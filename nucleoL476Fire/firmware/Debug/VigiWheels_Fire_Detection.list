
VigiWheels_Fire_Detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  0800b78c  0800b78c  0001b78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baa8  0800baa8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800baa8  0800baa8  0001baa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bab0  0800bab0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bab0  0800bab0  0001bab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bab4  0800bab4  0001bab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800bab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c18  2000006c  0800bb24  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c84  0800bb24  00021c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ef04  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003df9  00000000  00000000  0003efe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b50  00000000  00000000  00042de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000153f  00000000  00000000  00044930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b9c7  00000000  00000000  00045e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d0cd  00000000  00000000  00071836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111f15  00000000  00000000  0008e903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000081e4  00000000  00000000  001a0818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001a89fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b774 	.word	0x0800b774

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800b774 	.word	0x0800b774

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <msToTicks>:

#define SIZE_RX 10
#define SIZE_TX 100

TickType_t msToTicks(TickType_t ms)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	TickType_t tmp = ms;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	60fb      	str	r3, [r7, #12]

	if (ms<(1000/configTICK_RATE_HZ))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <msToTicks+0x18>
		tmp = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	e001      	b.n	8000d94 <msToTicks+0x1c>
	else {
		tmp = ms/(1000/configTICK_RATE_HZ);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	60fb      	str	r3, [r7, #12]

		if (ms % (1000/configTICK_RATE_HZ))
			tmp ++;
	}
	return tmp;
 8000d94:	68fb      	ldr	r3, [r7, #12]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <reading_analog_ir_sensor1>:


void reading_analog_ir_sensor1(uint16_t *sensorValue)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	615a      	str	r2, [r3, #20]

    // Configure and start ADC conversions for A0
    sConfig.Channel = ADC_CHANNEL_5;
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <reading_analog_ir_sensor1+0x64>)
 8000dc0:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dca:	237f      	movs	r3, #127	; 0x7f
 8000dcc:	617b      	str	r3, [r7, #20]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
    sConfig.Offset = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]

    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000dd6:	f107 0308 	add.w	r3, r7, #8
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <reading_analog_ir_sensor1+0x68>)
 8000dde:	f001 fd69 	bl	80028b4 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc1);
 8000de2:	480a      	ldr	r0, [pc, #40]	; (8000e0c <reading_analog_ir_sensor1+0x68>)
 8000de4:	f001 fbc6 	bl	8002574 <HAL_ADC_Start>

    // Wait for conversion to complete
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <reading_analog_ir_sensor1+0x68>)
 8000dee:	f001 fc7b 	bl	80026e8 <HAL_ADC_PollForConversion>

    // Read ADC value for A0
    *sensorValue = HAL_ADC_GetValue(&hadc1);
 8000df2:	4806      	ldr	r0, [pc, #24]	; (8000e0c <reading_analog_ir_sensor1+0x68>)
 8000df4:	f001 fd50 	bl	8002898 <HAL_ADC_GetValue>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	801a      	strh	r2, [r3, #0]

}
 8000e00:	bf00      	nop
 8000e02:	3720      	adds	r7, #32
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	14f00020 	.word	0x14f00020
 8000e0c:	200000a0 	.word	0x200000a0

08000e10 <reading_analog_ir_sensor3>:

void reading_analog_ir_sensor3(uint16_t *sensorValue)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
 8000e28:	615a      	str	r2, [r3, #20]

    // Configure and start ADC conversions for A1
    sConfig.Channel = ADC_CHANNEL_6;
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <reading_analog_ir_sensor3+0x64>)
 8000e2c:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e2e:	2306      	movs	r3, #6
 8000e30:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e36:	237f      	movs	r3, #127	; 0x7f
 8000e38:	617b      	str	r3, [r7, #20]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
    sConfig.Offset = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]

    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4619      	mov	r1, r3
 8000e48:	480b      	ldr	r0, [pc, #44]	; (8000e78 <reading_analog_ir_sensor3+0x68>)
 8000e4a:	f001 fd33 	bl	80028b4 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc1);
 8000e4e:	480a      	ldr	r0, [pc, #40]	; (8000e78 <reading_analog_ir_sensor3+0x68>)
 8000e50:	f001 fb90 	bl	8002574 <HAL_ADC_Start>

    // Wait for conversion to complete
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <reading_analog_ir_sensor3+0x68>)
 8000e5a:	f001 fc45 	bl	80026e8 <HAL_ADC_PollForConversion>

    // Read ADC value for A0
    *sensorValue = HAL_ADC_GetValue(&hadc1);
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <reading_analog_ir_sensor3+0x68>)
 8000e60:	f001 fd1a 	bl	8002898 <HAL_ADC_GetValue>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	801a      	strh	r2, [r3, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	19200040 	.word	0x19200040
 8000e78:	200000a0 	.word	0x200000a0

08000e7c <reading_analog_smoke_sensor1>:

void reading_analog_smoke_sensor1(uint16_t *sensorValue)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]

    // Configure and start ADC conversions for A2
    sConfig.Channel = ADC_CHANNEL_9;
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <reading_analog_smoke_sensor1+0x64>)
 8000e98:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ea2:	237f      	movs	r3, #127	; 0x7f
 8000ea4:	617b      	str	r3, [r7, #20]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
    sConfig.Offset = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]

    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <reading_analog_smoke_sensor1+0x68>)
 8000eb6:	f001 fcfd 	bl	80028b4 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc1);
 8000eba:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <reading_analog_smoke_sensor1+0x68>)
 8000ebc:	f001 fb5a 	bl	8002574 <HAL_ADC_Start>

    // Wait for conversion to complete
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <reading_analog_smoke_sensor1+0x68>)
 8000ec6:	f001 fc0f 	bl	80026e8 <HAL_ADC_PollForConversion>

    // Read ADC value for A0
    *sensorValue = HAL_ADC_GetValue(&hadc1);
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <reading_analog_smoke_sensor1+0x68>)
 8000ecc:	f001 fce4 	bl	8002898 <HAL_ADC_GetValue>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	801a      	strh	r2, [r3, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	25b00200 	.word	0x25b00200
 8000ee4:	200000a0 	.word	0x200000a0

08000ee8 <reading_analog_smoke_sensor2>:

void reading_analog_smoke_sensor2(uint16_t *sensorValue)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
 8000f00:	615a      	str	r2, [r3, #20]

    // Configure and start ADC conversions for A3
    sConfig.Channel = ADC_CHANNEL_15;
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <reading_analog_smoke_sensor2+0x64>)
 8000f04:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f06:	2306      	movs	r3, #6
 8000f08:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f0e:	237f      	movs	r3, #127	; 0x7f
 8000f10:	617b      	str	r3, [r7, #20]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f12:	2304      	movs	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
    sConfig.Offset = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]

    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480b      	ldr	r0, [pc, #44]	; (8000f50 <reading_analog_smoke_sensor2+0x68>)
 8000f22:	f001 fcc7 	bl	80028b4 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc1);
 8000f26:	480a      	ldr	r0, [pc, #40]	; (8000f50 <reading_analog_smoke_sensor2+0x68>)
 8000f28:	f001 fb24 	bl	8002574 <HAL_ADC_Start>

    // Wait for conversion to complete
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f30:	4807      	ldr	r0, [pc, #28]	; (8000f50 <reading_analog_smoke_sensor2+0x68>)
 8000f32:	f001 fbd9 	bl	80026e8 <HAL_ADC_PollForConversion>

    // Read ADC value for A0
    *sensorValue = HAL_ADC_GetValue(&hadc1);
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <reading_analog_smoke_sensor2+0x68>)
 8000f38:	f001 fcae 	bl	8002898 <HAL_ADC_GetValue>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	801a      	strh	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	3ef08000 	.word	0x3ef08000
 8000f50:	200000a0 	.word	0x200000a0

08000f54 <reading_digital_sensor>:

// Function to read digital sensor values
void reading_digital_sensor(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint16_t *sensorValue)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	817b      	strh	r3, [r7, #10]
	*sensorValue = !HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000f62:	897b      	ldrh	r3, [r7, #10]
 8000f64:	4619      	mov	r1, r3
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f002 fc82 	bl	8003870 <HAL_GPIO_ReadPin>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	bf0c      	ite	eq
 8000f72:	2301      	moveq	r3, #1
 8000f74:	2300      	movne	r3, #0
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	801a      	strh	r2, [r3, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <reading_sensor_values>:

// Function to read all sensor values
void reading_sensor_values()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	reading_analog_ir_sensor1(&ir_sensor1);
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <reading_sensor_values+0x38>)
 8000f8e:	f7ff ff09 	bl	8000da4 <reading_analog_ir_sensor1>
	reading_digital_sensor(GPIOA, GPIO_PIN_10, &ir_sensor2);
 8000f92:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <reading_sensor_values+0x3c>)
 8000f94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9c:	f7ff ffda 	bl	8000f54 <reading_digital_sensor>
	reading_analog_ir_sensor3(&ir_sensor3);
 8000fa0:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <reading_sensor_values+0x40>)
 8000fa2:	f7ff ff35 	bl	8000e10 <reading_analog_ir_sensor3>
	reading_digital_sensor(GPIOB, GPIO_PIN_3, &ir_sensor4);
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <reading_sensor_values+0x44>)
 8000fa8:	2108      	movs	r1, #8
 8000faa:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <reading_sensor_values+0x48>)
 8000fac:	f7ff ffd2 	bl	8000f54 <reading_digital_sensor>
	reading_analog_smoke_sensor1(&smoke_sensor1);
 8000fb0:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <reading_sensor_values+0x4c>)
 8000fb2:	f7ff ff63 	bl	8000e7c <reading_analog_smoke_sensor1>
	reading_analog_smoke_sensor2(&smoke_sensor2);
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <reading_sensor_values+0x50>)
 8000fb8:	f7ff ff96 	bl	8000ee8 <reading_analog_smoke_sensor2>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000088 	.word	0x20000088
 8000fc4:	2000008a 	.word	0x2000008a
 8000fc8:	2000008c 	.word	0x2000008c
 8000fcc:	2000008e 	.word	0x2000008e
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	20000090 	.word	0x20000090
 8000fd8:	20000092 	.word	0x20000092

08000fdc <sending_data_uart>:
    return 0; // Timeout occurred
}

// Frame format: "#[ID]=[Value]|[ID]=[Value]|[ID]=[Value]\n"
void sending_data_uart(void *argument)
{
 8000fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fde:	b0a1      	sub	sp, #132	; 0x84
 8000fe0:	af04      	add	r7, sp, #16
 8000fe2:	6078      	str	r0, [r7, #4]
	char tx[SIZE_TX + 1];

	while (1)
	{
		osMutexAcquire(uartMutex, osWaitForever);
 8000fe4:	4b1f      	ldr	r3, [pc, #124]	; (8001064 <sending_data_uart+0x88>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fec:	4618      	mov	r0, r3
 8000fee:	f006 f954 	bl	800729a <osMutexAcquire>

		reading_sensor_values();
 8000ff2:	f7ff ffc9 	bl	8000f88 <reading_sensor_values>

		// Create and transmit the frame
		sprintf(tx, "#IR_SENSOR1=%hu|IR_SENSOR2=%u|IR_SENSOR3=%hu|IR_SENSOR4=%u|SMOKE_SENSOR1=%hu|SMOKE_SENSOR2=%hu\n", ir_sensor1, ir_sensor2, ir_sensor3, ir_sensor4, smoke_sensor1, smoke_sensor2);
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <sending_data_uart+0x8c>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	461d      	mov	r5, r3
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <sending_data_uart+0x90>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	461e      	mov	r6, r3
 8001002:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <sending_data_uart+0x94>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <sending_data_uart+0x98>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <sending_data_uart+0x9c>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	461c      	mov	r4, r3
 8001014:	4b19      	ldr	r3, [pc, #100]	; (800107c <sending_data_uart+0xa0>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	f107 0008 	add.w	r0, r7, #8
 800101c:	9303      	str	r3, [sp, #12]
 800101e:	9402      	str	r4, [sp, #8]
 8001020:	9101      	str	r1, [sp, #4]
 8001022:	9200      	str	r2, [sp, #0]
 8001024:	4633      	mov	r3, r6
 8001026:	462a      	mov	r2, r5
 8001028:	4915      	ldr	r1, [pc, #84]	; (8001080 <sending_data_uart+0xa4>)
 800102a:	f009 fa89 	bl	800a540 <siprintf>

		HAL_UART_Transmit(&huart2, (const uint8_t *)tx, strlen(tx), 100);
 800102e:	f107 0308 	add.w	r3, r7, #8
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff f8d6 	bl	80001e4 <strlen>
 8001038:	4603      	mov	r3, r0
 800103a:	b29a      	uxth	r2, r3
 800103c:	f107 0108 	add.w	r1, r7, #8
 8001040:	2364      	movs	r3, #100	; 0x64
 8001042:	4810      	ldr	r0, [pc, #64]	; (8001084 <sending_data_uart+0xa8>)
 8001044:	f005 f956 	bl	80062f4 <HAL_UART_Transmit>

		osMutexRelease(uartMutex);
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <sending_data_uart+0x88>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f006 f96f 	bl	8007330 <osMutexRelease>

        osDelay(msToTicks(350));
 8001052:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8001056:	f7ff fe8f 	bl	8000d78 <msToTicks>
 800105a:	4603      	mov	r3, r0
 800105c:	4618      	mov	r0, r3
 800105e:	f006 f87b 	bl	8007158 <osDelay>
		osMutexAcquire(uartMutex, osWaitForever);
 8001062:	e7bf      	b.n	8000fe4 <sending_data_uart+0x8>
 8001064:	20000094 	.word	0x20000094
 8001068:	20000088 	.word	0x20000088
 800106c:	2000008a 	.word	0x2000008a
 8001070:	2000008c 	.word	0x2000008c
 8001074:	2000008e 	.word	0x2000008e
 8001078:	20000090 	.word	0x20000090
 800107c:	20000092 	.word	0x20000092
 8001080:	0800b794 	.word	0x0800b794
 8001084:	2000019c 	.word	0x2000019c

08001088 <receiving_data_uart>:
}


// Frame format: "#[ID]=[Value]\n"
void receiving_data_uart()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b088      	sub	sp, #32
 800108c:	af00      	add	r7, sp, #0
    char buf[1];
    char rx[SIZE_RX + 1];

    while (1)
    {
        osMutexAcquire(uartMutex, osWaitForever);
 800108e:	4b51      	ldr	r3, [pc, #324]	; (80011d4 <receiving_data_uart+0x14c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001096:	4618      	mov	r0, r3
 8001098:	f006 f8ff 	bl	800729a <osMutexAcquire>

        // Wait for "START_OF_FRAME"
        do
        {
            HAL_UART_Receive(&huart2, (uint8_t *)buf, 1, 100);
 800109c:	f107 010c 	add.w	r1, r7, #12
 80010a0:	2364      	movs	r3, #100	; 0x64
 80010a2:	2201      	movs	r2, #1
 80010a4:	484c      	ldr	r0, [pc, #304]	; (80011d8 <receiving_data_uart+0x150>)
 80010a6:	f005 f9af 	bl	8006408 <HAL_UART_Receive>
        } while (*buf != START_OF_FRAME);
 80010aa:	7b3b      	ldrb	r3, [r7, #12]
 80010ac:	2b23      	cmp	r3, #35	; 0x23
 80010ae:	d1f5      	bne.n	800109c <receiving_data_uart+0x14>

        // Receive data until "END_OF_FRAME"
        int i = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
        do
        {
            HAL_UART_Receive(&huart2, (uint8_t *)buf, 1, 100);
 80010b4:	f107 010c 	add.w	r1, r7, #12
 80010b8:	2364      	movs	r3, #100	; 0x64
 80010ba:	2201      	movs	r2, #1
 80010bc:	4846      	ldr	r0, [pc, #280]	; (80011d8 <receiving_data_uart+0x150>)
 80010be:	f005 f9a3 	bl	8006408 <HAL_UART_Receive>
            rx[i++] = *buf;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	1c5a      	adds	r2, r3, #1
 80010c6:	61fa      	str	r2, [r7, #28]
 80010c8:	7b3a      	ldrb	r2, [r7, #12]
 80010ca:	3320      	adds	r3, #32
 80010cc:	443b      	add	r3, r7
 80010ce:	f803 2c20 	strb.w	r2, [r3, #-32]

        } while (*buf != END_OF_FRAME);
 80010d2:	7b3b      	ldrb	r3, [r7, #12]
 80010d4:	2b0a      	cmp	r3, #10
 80010d6:	d1ed      	bne.n	80010b4 <receiving_data_uart+0x2c>

        rx[i] = '\0';
 80010d8:	463a      	mov	r2, r7
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	4413      	add	r3, r2
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]

        // Extract ID and Value from the received frame
        char *id = strtok(rx, "=");    // ID
 80010e2:	463b      	mov	r3, r7
 80010e4:	493d      	ldr	r1, [pc, #244]	; (80011dc <receiving_data_uart+0x154>)
 80010e6:	4618      	mov	r0, r3
 80010e8:	f009 fa96 	bl	800a618 <strtok>
 80010ec:	61b8      	str	r0, [r7, #24]
        char *value = strtok(NULL, "="); // Value
 80010ee:	493b      	ldr	r1, [pc, #236]	; (80011dc <receiving_data_uart+0x154>)
 80010f0:	2000      	movs	r0, #0
 80010f2:	f009 fa91 	bl	800a618 <strtok>
 80010f6:	6178      	str	r0, [r7, #20]

        // Process based on ID and Value
        if (id != NULL && value != NULL)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d064      	beq.n	80011c8 <receiving_data_uart+0x140>
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d061      	beq.n	80011c8 <receiving_data_uart+0x140>
        {
            if (strcmp(id, "fire") == 0)
 8001104:	4936      	ldr	r1, [pc, #216]	; (80011e0 <receiving_data_uart+0x158>)
 8001106:	69b8      	ldr	r0, [r7, #24]
 8001108:	f7ff f862 	bl	80001d0 <strcmp>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d121      	bne.n	8001156 <receiving_data_uart+0xce>
            {
                // Handle Fire sensor value
                if (atoi(value) == 1)
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f009 f8c2 	bl	800a29c <atoi>
 8001118:	4603      	mov	r3, r0
 800111a:	2b01      	cmp	r3, #1
 800111c:	d10a      	bne.n	8001134 <receiving_data_uart+0xac>
                {
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800111e:	2201      	movs	r2, #1
 8001120:	2110      	movs	r1, #16
 8001122:	4830      	ldr	r0, [pc, #192]	; (80011e4 <receiving_data_uart+0x15c>)
 8001124:	f002 fbbc 	bl	80038a0 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001128:	2201      	movs	r2, #1
 800112a:	2120      	movs	r1, #32
 800112c:	482d      	ldr	r0, [pc, #180]	; (80011e4 <receiving_data_uart+0x15c>)
 800112e:	f002 fbb7 	bl	80038a0 <HAL_GPIO_WritePin>
 8001132:	e049      	b.n	80011c8 <receiving_data_uart+0x140>
                }
                else if (atoi(value) == 0)
 8001134:	6978      	ldr	r0, [r7, #20]
 8001136:	f009 f8b1 	bl	800a29c <atoi>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d143      	bne.n	80011c8 <receiving_data_uart+0x140>
                {
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2110      	movs	r1, #16
 8001144:	4827      	ldr	r0, [pc, #156]	; (80011e4 <receiving_data_uart+0x15c>)
 8001146:	f002 fbab 	bl	80038a0 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2120      	movs	r1, #32
 800114e:	4825      	ldr	r0, [pc, #148]	; (80011e4 <receiving_data_uart+0x15c>)
 8001150:	f002 fba6 	bl	80038a0 <HAL_GPIO_WritePin>
 8001154:	e038      	b.n	80011c8 <receiving_data_uart+0x140>
                else
                {
                    // Handle error
                }
            }
            else if (strcmp(id, "c") == 0)
 8001156:	4924      	ldr	r1, [pc, #144]	; (80011e8 <receiving_data_uart+0x160>)
 8001158:	69b8      	ldr	r0, [r7, #24]
 800115a:	f7ff f839 	bl	80001d0 <strcmp>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d109      	bne.n	8001178 <receiving_data_uart+0xf0>
            {
                // Handle PWM value
                uint32_t cmd_angle = atoi(value);
 8001164:	6978      	ldr	r0, [r7, #20]
 8001166:	f009 f899 	bl	800a29c <atoi>
 800116a:	4603      	mov	r3, r0
 800116c:	613b      	str	r3, [r7, #16]
                update_CCR_timer_PWM(cmd_angle, &htim3);
 800116e:	491f      	ldr	r1, [pc, #124]	; (80011ec <receiving_data_uart+0x164>)
 8001170:	6938      	ldr	r0, [r7, #16]
 8001172:	f000 f841 	bl	80011f8 <update_CCR_timer_PWM>
 8001176:	e027      	b.n	80011c8 <receiving_data_uart+0x140>
            }
            else if (strcmp(id, "pressure") == 0)
 8001178:	491d      	ldr	r1, [pc, #116]	; (80011f0 <receiving_data_uart+0x168>)
 800117a:	69b8      	ldr	r0, [r7, #24]
 800117c:	f7ff f828 	bl	80001d0 <strcmp>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d120      	bne.n	80011c8 <receiving_data_uart+0x140>
			{
                // Handle Fire sensor value
                if (atoi(value) == 1)
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f009 f888 	bl	800a29c <atoi>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	d10a      	bne.n	80011a8 <receiving_data_uart+0x120>
                {
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2110      	movs	r1, #16
 8001196:	4813      	ldr	r0, [pc, #76]	; (80011e4 <receiving_data_uart+0x15c>)
 8001198:	f002 fb82 	bl	80038a0 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	2120      	movs	r1, #32
 80011a0:	4810      	ldr	r0, [pc, #64]	; (80011e4 <receiving_data_uart+0x15c>)
 80011a2:	f002 fb7d 	bl	80038a0 <HAL_GPIO_WritePin>
 80011a6:	e00f      	b.n	80011c8 <receiving_data_uart+0x140>
                }
                else if (atoi(value) == 0)
 80011a8:	6978      	ldr	r0, [r7, #20]
 80011aa:	f009 f877 	bl	800a29c <atoi>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d109      	bne.n	80011c8 <receiving_data_uart+0x140>
                {
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2110      	movs	r1, #16
 80011b8:	480a      	ldr	r0, [pc, #40]	; (80011e4 <receiving_data_uart+0x15c>)
 80011ba:	f002 fb71 	bl	80038a0 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2120      	movs	r1, #32
 80011c2:	4808      	ldr	r0, [pc, #32]	; (80011e4 <receiving_data_uart+0x15c>)
 80011c4:	f002 fb6c 	bl	80038a0 <HAL_GPIO_WritePin>
            {
                // Handle other IDs or report error
            }
        }

        osMutexRelease(uartMutex);
 80011c8:	4b02      	ldr	r3, [pc, #8]	; (80011d4 <receiving_data_uart+0x14c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f006 f8af 	bl	8007330 <osMutexRelease>
    {
 80011d2:	e75c      	b.n	800108e <receiving_data_uart+0x6>
 80011d4:	20000094 	.word	0x20000094
 80011d8:	2000019c 	.word	0x2000019c
 80011dc:	0800b7f4 	.word	0x0800b7f4
 80011e0:	0800b7f8 	.word	0x0800b7f8
 80011e4:	48000400 	.word	0x48000400
 80011e8:	0800b800 	.word	0x0800b800
 80011ec:	20000150 	.word	0x20000150
 80011f0:	0800b804 	.word	0x0800b804
 80011f4:	00000000 	.word	0x00000000

080011f8 <update_CCR_timer_PWM>:
    }
}


void update_CCR_timer_PWM(uint32_t cmd_angle_deg, TIM_HandleTypeDef * htim)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	if (cmd_angle_deg < 0)
	{
		cmd_angle_deg = 0;
	} else if (cmd_angle_deg > 180)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2bb4      	cmp	r3, #180	; 0xb4
 8001206:	d901      	bls.n	800120c <update_CCR_timer_PWM+0x14>
	{
		cmd_angle_deg = 180;
 8001208:	23b4      	movs	r3, #180	; 0xb4
 800120a:	607b      	str	r3, [r7, #4]
	}
	uint32_t ARR_timer = htim->Instance->ARR;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001212:	613b      	str	r3, [r7, #16]

	uint32_t CCR_value_180_deg = angle_180_duty_ratio_PWM*ARR_timer/100; //2100 here
 8001214:	6938      	ldr	r0, [r7, #16]
 8001216:	f7ff f985 	bl	8000524 <__aeabi_ui2d>
 800121a:	a32d      	add	r3, pc, #180	; (adr r3, 80012d0 <update_CCR_timer_PWM+0xd8>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7ff f9fa 	bl	8000618 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <update_CCR_timer_PWM+0xd0>)
 8001232:	f7ff fb1b 	bl	800086c <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fbfd 	bl	8000a3c <__aeabi_d2uiz>
 8001242:	4603      	mov	r3, r0
 8001244:	60fb      	str	r3, [r7, #12]
	uint32_t CCR_value_0_deg = angle_0_duty_ratio_PWM*ARR_timer/100; // 450 here
 8001246:	6938      	ldr	r0, [r7, #16]
 8001248:	f7ff f96c 	bl	8000524 <__aeabi_ui2d>
 800124c:	a31c      	add	r3, pc, #112	; (adr r3, 80012c0 <update_CCR_timer_PWM+0xc8>)
 800124e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001252:	f7ff f9e1 	bl	8000618 <__aeabi_dmul>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <update_CCR_timer_PWM+0xd0>)
 8001264:	f7ff fb02 	bl	800086c <__aeabi_ddiv>
 8001268:	4602      	mov	r2, r0
 800126a:	460b      	mov	r3, r1
 800126c:	4610      	mov	r0, r2
 800126e:	4619      	mov	r1, r3
 8001270:	f7ff fbe4 	bl	8000a3c <__aeabi_d2uiz>
 8001274:	4603      	mov	r3, r0
 8001276:	60bb      	str	r3, [r7, #8]

	int CCR_required = (CCR_value_180_deg-CCR_value_0_deg) * cmd_angle_deg / 180 + CCR_value_0_deg;
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	fb02 f303 	mul.w	r3, r2, r3
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	4a11      	ldr	r2, [pc, #68]	; (80012cc <update_CCR_timer_PWM+0xd4>)
 8001288:	fba2 2303 	umull	r2, r3, r2, r3
 800128c:	089a      	lsrs	r2, r3, #2
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	4413      	add	r3, r2
 8001292:	617b      	str	r3, [r7, #20]

	if (CCR_required > CCR_value_180_deg)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	429a      	cmp	r2, r3
 800129a:	d202      	bcs.n	80012a2 <update_CCR_timer_PWM+0xaa>
	{
		CCR_required = CCR_value_180_deg ;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	e005      	b.n	80012ae <update_CCR_timer_PWM+0xb6>
	} else if (CCR_required < CCR_value_0_deg)
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d901      	bls.n	80012ae <update_CCR_timer_PWM+0xb6>
	{
		CCR_required = CCR_value_0_deg;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	617b      	str	r3, [r7, #20]
	}
	htim->Instance->CCR1=CCR_required;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	47ae147b 	.word	0x47ae147b
 80012c4:	40067ae1 	.word	0x40067ae1
 80012c8:	40590000 	.word	0x40590000
 80012cc:	16c16c17 	.word	0x16c16c17
 80012d0:	5c28f5c3 	.word	0x5c28f5c3
 80012d4:	402a428f 	.word	0x402a428f

080012d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012dc:	f000 fd9a 	bl	8001e14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e0:	f000 f84c 	bl	800137c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e4:	f000 fa28 	bl	8001738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012e8:	f000 f9f6 	bl	80016d8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80012ec:	f000 f898 	bl	8001420 <MX_ADC1_Init>
  MX_TIM1_Init();
 80012f0:	f000 f8ea 	bl	80014c8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80012f4:	f000 f978 	bl	80015e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim3);
 80012f8:	4816      	ldr	r0, [pc, #88]	; (8001354 <main+0x7c>)
 80012fa:	f003 feb7 	bl	800506c <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012fe:	2100      	movs	r1, #0
 8001300:	4814      	ldr	r0, [pc, #80]	; (8001354 <main+0x7c>)
 8001302:	f003 ff15 	bl	8005130 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001306:	f005 fe4b 	bl	8006fa0 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  uartMutex = osMutexNew(NULL);
 800130a:	2000      	movs	r0, #0
 800130c:	f005 ff3f 	bl	800718e <osMutexNew>
 8001310:	4603      	mov	r3, r0
 8001312:	4a11      	ldr	r2, [pc, #68]	; (8001358 <main+0x80>)
 8001314:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001316:	4a11      	ldr	r2, [pc, #68]	; (800135c <main+0x84>)
 8001318:	2100      	movs	r1, #0
 800131a:	4811      	ldr	r0, [pc, #68]	; (8001360 <main+0x88>)
 800131c:	f005 fe8a 	bl	8007034 <osThreadNew>
 8001320:	4603      	mov	r3, r0
 8001322:	4a10      	ldr	r2, [pc, #64]	; (8001364 <main+0x8c>)
 8001324:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* Create tasks */
  senderThreadId = osThreadNew(sending_data_uart, NULL, &senderTask_attributes);
 8001326:	4a10      	ldr	r2, [pc, #64]	; (8001368 <main+0x90>)
 8001328:	2100      	movs	r1, #0
 800132a:	4810      	ldr	r0, [pc, #64]	; (800136c <main+0x94>)
 800132c:	f005 fe82 	bl	8007034 <osThreadNew>
 8001330:	4603      	mov	r3, r0
 8001332:	4a0f      	ldr	r2, [pc, #60]	; (8001370 <main+0x98>)
 8001334:	6013      	str	r3, [r2, #0]
  receiverThreadId = osThreadNew(receiving_data_uart, NULL, NULL);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	480e      	ldr	r0, [pc, #56]	; (8001374 <main+0x9c>)
 800133c:	f005 fe7a 	bl	8007034 <osThreadNew>
 8001340:	4603      	mov	r3, r0
 8001342:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <main+0xa0>)
 8001344:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  update_CCR_timer_PWM(90,&htim3);
 8001346:	4903      	ldr	r1, [pc, #12]	; (8001354 <main+0x7c>)
 8001348:	205a      	movs	r0, #90	; 0x5a
 800134a:	f7ff ff55 	bl	80011f8 <update_CCR_timer_PWM>
//update_CCR_timer_PWM(0,&htim3);
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800134e:	f005 fe4b 	bl	8006fe8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001352:	e7fe      	b.n	8001352 <main+0x7a>
 8001354:	20000150 	.word	0x20000150
 8001358:	20000094 	.word	0x20000094
 800135c:	0800b858 	.word	0x0800b858
 8001360:	08001865 	.word	0x08001865
 8001364:	20000224 	.word	0x20000224
 8001368:	0800b834 	.word	0x0800b834
 800136c:	08000fdd 	.word	0x08000fdd
 8001370:	20000098 	.word	0x20000098
 8001374:	08001089 	.word	0x08001089
 8001378:	2000009c 	.word	0x2000009c

0800137c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b096      	sub	sp, #88	; 0x58
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	2244      	movs	r2, #68	; 0x44
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f009 f93b 	bl	800a606 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	463b      	mov	r3, r7
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800139e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013a2:	f002 faa3 	bl	80038ec <HAL_PWREx_ControlVoltageScaling>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013ac:	f000 fa62 	bl	8001874 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013b0:	2302      	movs	r3, #2
 80013b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ba:	2310      	movs	r3, #16
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	2302      	movs	r3, #2
 80013c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013c2:	2302      	movs	r3, #2
 80013c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013c6:	2301      	movs	r3, #1
 80013c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80013ca:	230a      	movs	r3, #10
 80013cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013ce:	2307      	movs	r3, #7
 80013d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013d6:	2302      	movs	r3, #2
 80013d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fada 	bl	8003998 <HAL_RCC_OscConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80013ea:	f000 fa43 	bl	8001874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ee:	230f      	movs	r3, #15
 80013f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f2:	2303      	movs	r3, #3
 80013f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	2104      	movs	r1, #4
 8001406:	4618      	mov	r0, r3
 8001408:	f002 fea2 	bl	8004150 <HAL_RCC_ClockConfig>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001412:	f000 fa2f 	bl	8001874 <Error_Handler>
  }
}
 8001416:	bf00      	nop
 8001418:	3758      	adds	r7, #88	; 0x58
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <MX_ADC1_Init+0xa0>)
 8001432:	4a24      	ldr	r2, [pc, #144]	; (80014c4 <MX_ADC1_Init+0xa4>)
 8001434:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001436:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <MX_ADC1_Init+0xa0>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800143c:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <MX_ADC1_Init+0xa0>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001442:	4b1f      	ldr	r3, [pc, #124]	; (80014c0 <MX_ADC1_Init+0xa0>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001448:	4b1d      	ldr	r3, [pc, #116]	; (80014c0 <MX_ADC1_Init+0xa0>)
 800144a:	2200      	movs	r2, #0
 800144c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_ADC1_Init+0xa0>)
 8001450:	2204      	movs	r2, #4
 8001452:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <MX_ADC1_Init+0xa0>)
 8001456:	2200      	movs	r2, #0
 8001458:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <MX_ADC1_Init+0xa0>)
 800145c:	2200      	movs	r2, #0
 800145e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_ADC1_Init+0xa0>)
 8001462:	2201      	movs	r2, #1
 8001464:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_ADC1_Init+0xa0>)
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_ADC1_Init+0xa0>)
 8001470:	2200      	movs	r2, #0
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <MX_ADC1_Init+0xa0>)
 8001476:	2200      	movs	r2, #0
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_ADC1_Init+0xa0>)
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_ADC1_Init+0xa0>)
 8001484:	2200      	movs	r2, #0
 8001486:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001488:	4b0d      	ldr	r3, [pc, #52]	; (80014c0 <MX_ADC1_Init+0xa0>)
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001490:	480b      	ldr	r0, [pc, #44]	; (80014c0 <MX_ADC1_Init+0xa0>)
 8001492:	f000 ff1f 	bl	80022d4 <HAL_ADC_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 800149c:	f000 f9ea 	bl	8001874 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_ADC1_Init+0xa0>)
 80014aa:	f001 fea1 	bl	80031f0 <HAL_ADCEx_MultiModeConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80014b4:	f000 f9de 	bl	8001874 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3710      	adds	r7, #16
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	200000a0 	.word	0x200000a0
 80014c4:	50040000 	.word	0x50040000

080014c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b096      	sub	sp, #88	; 0x58
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
 80014ea:	615a      	str	r2, [r3, #20]
 80014ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	222c      	movs	r2, #44	; 0x2c
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f009 f886 	bl	800a606 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014fa:	4b39      	ldr	r3, [pc, #228]	; (80015e0 <MX_TIM1_Init+0x118>)
 80014fc:	4a39      	ldr	r2, [pc, #228]	; (80015e4 <MX_TIM1_Init+0x11c>)
 80014fe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001500:	4b37      	ldr	r3, [pc, #220]	; (80015e0 <MX_TIM1_Init+0x118>)
 8001502:	2200      	movs	r2, #0
 8001504:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <MX_TIM1_Init+0x118>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800150c:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <MX_TIM1_Init+0x118>)
 800150e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001512:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001514:	4b32      	ldr	r3, [pc, #200]	; (80015e0 <MX_TIM1_Init+0x118>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800151a:	4b31      	ldr	r3, [pc, #196]	; (80015e0 <MX_TIM1_Init+0x118>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b2f      	ldr	r3, [pc, #188]	; (80015e0 <MX_TIM1_Init+0x118>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001526:	482e      	ldr	r0, [pc, #184]	; (80015e0 <MX_TIM1_Init+0x118>)
 8001528:	f003 fd49 	bl	8004fbe <HAL_TIM_OC_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001532:	f000 f99f 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001542:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001546:	4619      	mov	r1, r3
 8001548:	4825      	ldr	r0, [pc, #148]	; (80015e0 <MX_TIM1_Init+0x118>)
 800154a:	f004 fd7f 	bl	800604c <HAL_TIMEx_MasterConfigSynchronization>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001554:	f000 f98e 	bl	8001874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001558:	2300      	movs	r3, #0
 800155a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001560:	2300      	movs	r3, #0
 8001562:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001564:	2300      	movs	r3, #0
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001568:	2300      	movs	r3, #0
 800156a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001574:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001578:	2200      	movs	r2, #0
 800157a:	4619      	mov	r1, r3
 800157c:	4818      	ldr	r0, [pc, #96]	; (80015e0 <MX_TIM1_Init+0x118>)
 800157e:	f003 fedd 	bl	800533c <HAL_TIM_OC_ConfigChannel>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001588:	f000 f974 	bl	8001874 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001590:	2300      	movs	r3, #0
 8001592:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001594:	2300      	movs	r3, #0
 8001596:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4807      	ldr	r0, [pc, #28]	; (80015e0 <MX_TIM1_Init+0x118>)
 80015c2:	f004 fdcb 	bl	800615c <HAL_TIMEx_ConfigBreakDeadTime>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80015cc:	f000 f952 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015d0:	4803      	ldr	r0, [pc, #12]	; (80015e0 <MX_TIM1_Init+0x118>)
 80015d2:	f000 fa43 	bl	8001a5c <HAL_TIM_MspPostInit>

}
 80015d6:	bf00      	nop
 80015d8:	3758      	adds	r7, #88	; 0x58
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000104 	.word	0x20000104
 80015e4:	40012c00 	.word	0x40012c00

080015e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b08e      	sub	sp, #56	; 0x38
 80015ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015fc:	f107 031c 	add.w	r3, r7, #28
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800161a:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <MX_TIM3_Init+0xe8>)
 800161c:	4a2d      	ldr	r2, [pc, #180]	; (80016d4 <MX_TIM3_Init+0xec>)
 800161e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001620:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <MX_TIM3_Init+0xe8>)
 8001622:	2263      	movs	r2, #99	; 0x63
 8001624:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001626:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <MX_TIM3_Init+0xe8>)
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16000;
 800162c:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <MX_TIM3_Init+0xe8>)
 800162e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001632:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001634:	4b26      	ldr	r3, [pc, #152]	; (80016d0 <MX_TIM3_Init+0xe8>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163a:	4b25      	ldr	r3, [pc, #148]	; (80016d0 <MX_TIM3_Init+0xe8>)
 800163c:	2200      	movs	r2, #0
 800163e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001640:	4823      	ldr	r0, [pc, #140]	; (80016d0 <MX_TIM3_Init+0xe8>)
 8001642:	f003 fc65 	bl	8004f10 <HAL_TIM_Base_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800164c:	f000 f912 	bl	8001874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800165a:	4619      	mov	r1, r3
 800165c:	481c      	ldr	r0, [pc, #112]	; (80016d0 <MX_TIM3_Init+0xe8>)
 800165e:	f003 fffb 	bl	8005658 <HAL_TIM_ConfigClockSource>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001668:	f000 f904 	bl	8001874 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800166c:	4818      	ldr	r0, [pc, #96]	; (80016d0 <MX_TIM3_Init+0xe8>)
 800166e:	f003 fcfd 	bl	800506c <HAL_TIM_PWM_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001678:	f000 f8fc 	bl	8001874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4619      	mov	r1, r3
 800168a:	4811      	ldr	r0, [pc, #68]	; (80016d0 <MX_TIM3_Init+0xe8>)
 800168c:	f004 fcde 	bl	800604c <HAL_TIMEx_MasterConfigSynchronization>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001696:	f000 f8ed 	bl	8001874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800169a:	2360      	movs	r3, #96	; 0x60
 800169c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800169e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80016a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ac:	463b      	mov	r3, r7
 80016ae:	2200      	movs	r2, #0
 80016b0:	4619      	mov	r1, r3
 80016b2:	4807      	ldr	r0, [pc, #28]	; (80016d0 <MX_TIM3_Init+0xe8>)
 80016b4:	f003 febc 	bl	8005430 <HAL_TIM_PWM_ConfigChannel>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80016be:	f000 f8d9 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016c2:	4803      	ldr	r0, [pc, #12]	; (80016d0 <MX_TIM3_Init+0xe8>)
 80016c4:	f000 f9ca 	bl	8001a5c <HAL_TIM_MspPostInit>

}
 80016c8:	bf00      	nop
 80016ca:	3738      	adds	r7, #56	; 0x38
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000150 	.word	0x20000150
 80016d4:	40000400 	.word	0x40000400

080016d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016dc:	4b14      	ldr	r3, [pc, #80]	; (8001730 <MX_USART2_UART_Init+0x58>)
 80016de:	4a15      	ldr	r2, [pc, #84]	; (8001734 <MX_USART2_UART_Init+0x5c>)
 80016e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016e2:	4b13      	ldr	r3, [pc, #76]	; (8001730 <MX_USART2_UART_Init+0x58>)
 80016e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <MX_USART2_UART_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <MX_USART2_UART_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <MX_USART2_UART_Init+0x58>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	; (8001730 <MX_USART2_UART_Init+0x58>)
 80016fe:	220c      	movs	r2, #12
 8001700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001702:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <MX_USART2_UART_Init+0x58>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <MX_USART2_UART_Init+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800170e:	4b08      	ldr	r3, [pc, #32]	; (8001730 <MX_USART2_UART_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <MX_USART2_UART_Init+0x58>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <MX_USART2_UART_Init+0x58>)
 800171c:	f004 fd9c 	bl	8006258 <HAL_UART_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001726:	f000 f8a5 	bl	8001874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800172a:	bf00      	nop
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2000019c 	.word	0x2000019c
 8001734:	40004400 	.word	0x40004400

08001738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b088      	sub	sp, #32
 800173c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173e:	f107 030c 	add.w	r3, r7, #12
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	4b42      	ldr	r3, [pc, #264]	; (8001858 <MX_GPIO_Init+0x120>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001752:	4a41      	ldr	r2, [pc, #260]	; (8001858 <MX_GPIO_Init+0x120>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	64d3      	str	r3, [r2, #76]	; 0x4c
 800175a:	4b3f      	ldr	r3, [pc, #252]	; (8001858 <MX_GPIO_Init+0x120>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001766:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <MX_GPIO_Init+0x120>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	4a3b      	ldr	r2, [pc, #236]	; (8001858 <MX_GPIO_Init+0x120>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001772:	4b39      	ldr	r3, [pc, #228]	; (8001858 <MX_GPIO_Init+0x120>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177e:	4b36      	ldr	r3, [pc, #216]	; (8001858 <MX_GPIO_Init+0x120>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	4a35      	ldr	r2, [pc, #212]	; (8001858 <MX_GPIO_Init+0x120>)
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178a:	4b33      	ldr	r3, [pc, #204]	; (8001858 <MX_GPIO_Init+0x120>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001796:	2200      	movs	r2, #0
 8001798:	2120      	movs	r1, #32
 800179a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179e:	f002 f87f 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D5___BUZZER_Pin|D4___RELAIS_Pin, GPIO_PIN_RESET);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2130      	movs	r1, #48	; 0x30
 80017a6:	482d      	ldr	r0, [pc, #180]	; (800185c <MX_GPIO_Init+0x124>)
 80017a8:	f002 f87a 	bl	80038a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	4619      	mov	r1, r3
 80017c2:	4827      	ldr	r0, [pc, #156]	; (8001860 <MX_GPIO_Init+0x128>)
 80017c4:	f001 feaa 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pin : A2___SMOKE_SENSOR1_Pin */
  GPIO_InitStruct.Pin = A2___SMOKE_SENSOR1_Pin;
 80017c8:	2310      	movs	r3, #16
 80017ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017cc:	230b      	movs	r3, #11
 80017ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A2___SMOKE_SENSOR1_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017de:	f001 fe9d 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80017e2:	2320      	movs	r3, #32
 80017e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e6:	2301      	movs	r3, #1
 80017e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 030c 	add.w	r3, r7, #12
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fc:	f001 fe8e 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pin : D2___IR_SENSOR2_Pin */
  GPIO_InitStruct.Pin = D2___IR_SENSOR2_Pin;
 8001800:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001804:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D2___IR_SENSOR2_GPIO_Port, &GPIO_InitStruct);
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	4619      	mov	r1, r3
 8001814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001818:	f001 fe80 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pin : D3___IR_SENSOR4_Pin */
  GPIO_InitStruct.Pin = D3___IR_SENSOR4_Pin;
 800181c:	2308      	movs	r3, #8
 800181e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001820:	2300      	movs	r3, #0
 8001822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D3___IR_SENSOR4_GPIO_Port, &GPIO_InitStruct);
 8001828:	f107 030c 	add.w	r3, r7, #12
 800182c:	4619      	mov	r1, r3
 800182e:	480b      	ldr	r0, [pc, #44]	; (800185c <MX_GPIO_Init+0x124>)
 8001830:	f001 fe74 	bl	800351c <HAL_GPIO_Init>

  /*Configure GPIO pins : D5___BUZZER_Pin D4___RELAIS_Pin */
  GPIO_InitStruct.Pin = D5___BUZZER_Pin|D4___RELAIS_Pin;
 8001834:	2330      	movs	r3, #48	; 0x30
 8001836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001838:	2301      	movs	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	4619      	mov	r1, r3
 800184a:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_GPIO_Init+0x124>)
 800184c:	f001 fe66 	bl	800351c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001850:	bf00      	nop
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	40021000 	.word	0x40021000
 800185c:	48000400 	.word	0x48000400
 8001860:	48000800 	.word	0x48000800

08001864 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800186c:	2001      	movs	r0, #1
 800186e:	f005 fc73 	bl	8007158 <osDelay>
 8001872:	e7fb      	b.n	800186c <StartDefaultTask+0x8>

08001874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001878:	b672      	cpsid	i
}
 800187a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800187c:	e7fe      	b.n	800187c <Error_Handler+0x8>
	...

08001880 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <HAL_MspInit+0x4c>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188a:	4a10      	ldr	r2, [pc, #64]	; (80018cc <HAL_MspInit+0x4c>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6613      	str	r3, [r2, #96]	; 0x60
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <HAL_MspInit+0x4c>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <HAL_MspInit+0x4c>)
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <HAL_MspInit+0x4c>)
 80018a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018a8:	6593      	str	r3, [r2, #88]	; 0x58
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <HAL_MspInit+0x4c>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	210f      	movs	r1, #15
 80018ba:	f06f 0001 	mvn.w	r0, #1
 80018be:	f001 fe04 	bl	80034ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c2:	bf00      	nop
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b0ac      	sub	sp, #176	; 0xb0
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	2288      	movs	r2, #136	; 0x88
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f008 fe88 	bl	800a606 <memset>
  if(hadc->Instance==ADC1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a35      	ldr	r2, [pc, #212]	; (80019d0 <HAL_ADC_MspInit+0x100>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d162      	bne.n	80019c6 <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001900:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001904:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001906:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800190a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800190e:	2302      	movs	r3, #2
 8001910:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001912:	2301      	movs	r3, #1
 8001914:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001916:	2308      	movs	r3, #8
 8001918:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800191a:	2307      	movs	r3, #7
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800191e:	2302      	movs	r3, #2
 8001920:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001922:	2302      	movs	r3, #2
 8001924:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001926:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800192a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192c:	f107 0314 	add.w	r3, r7, #20
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fe31 	bl	8004598 <HAL_RCCEx_PeriphCLKConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800193c:	f7ff ff9a 	bl	8001874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001940:	4b24      	ldr	r3, [pc, #144]	; (80019d4 <HAL_ADC_MspInit+0x104>)
 8001942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001944:	4a23      	ldr	r2, [pc, #140]	; (80019d4 <HAL_ADC_MspInit+0x104>)
 8001946:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800194a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800194c:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <HAL_ADC_MspInit+0x104>)
 800194e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001950:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HAL_ADC_MspInit+0x104>)
 800195a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195c:	4a1d      	ldr	r2, [pc, #116]	; (80019d4 <HAL_ADC_MspInit+0x104>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001964:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_ADC_MspInit+0x104>)
 8001966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001970:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <HAL_ADC_MspInit+0x104>)
 8001972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001974:	4a17      	ldr	r2, [pc, #92]	; (80019d4 <HAL_ADC_MspInit+0x104>)
 8001976:	f043 0302 	orr.w	r3, r3, #2
 800197a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197c:	4b15      	ldr	r3, [pc, #84]	; (80019d4 <HAL_ADC_MspInit+0x104>)
 800197e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001980:	f003 0302 	and.w	r3, r3, #2
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = A0___IR_SENSOR1_Pin|A0___IR_SENSOR3_Pin|A2___SMOKE_SENSOR1_Pin;
 8001988:	2313      	movs	r3, #19
 800198a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800198e:	230b      	movs	r3, #11
 8001990:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800199e:	4619      	mov	r1, r3
 80019a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a4:	f001 fdba 	bl	800351c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A2___SMOKE_SENSOR2_Pin;
 80019a8:	2301      	movs	r3, #1
 80019aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019ae:	230b      	movs	r3, #11
 80019b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(A2___SMOKE_SENSOR2_GPIO_Port, &GPIO_InitStruct);
 80019ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	; (80019d8 <HAL_ADC_MspInit+0x108>)
 80019c2:	f001 fdab 	bl	800351c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019c6:	bf00      	nop
 80019c8:	37b0      	adds	r7, #176	; 0xb0
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	50040000 	.word	0x50040000
 80019d4:	40021000 	.word	0x40021000
 80019d8:	48000400 	.word	0x48000400

080019dc <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <HAL_TIM_OC_MspInit+0x38>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10b      	bne.n	8001a06 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_TIM_OC_MspInit+0x3c>)
 80019f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_TIM_OC_MspInit+0x3c>)
 80019f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019f8:	6613      	str	r3, [r2, #96]	; 0x60
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <HAL_TIM_OC_MspInit+0x3c>)
 80019fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40012c00 	.word	0x40012c00
 8001a18:	40021000 	.word	0x40021000

08001a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_TIM_Base_MspInit+0x38>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10b      	bne.n	8001a46 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a2e:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <HAL_TIM_Base_MspInit+0x3c>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <HAL_TIM_Base_MspInit+0x3c>)
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	6593      	str	r3, [r2, #88]	; 0x58
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <HAL_TIM_Base_MspInit+0x3c>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40000400 	.word	0x40000400
 8001a58:	40021000 	.word	0x40021000

08001a5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a23      	ldr	r2, [pc, #140]	; (8001b08 <HAL_TIM_MspPostInit+0xac>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d11e      	bne.n	8001abc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7e:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <HAL_TIM_MspPostInit+0xb0>)
 8001a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a82:	4a22      	ldr	r2, [pc, #136]	; (8001b0c <HAL_TIM_MspPostInit+0xb0>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8a:	4b20      	ldr	r3, [pc, #128]	; (8001b0c <HAL_TIM_MspPostInit+0xb0>)
 8001a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab6:	f001 fd31 	bl	800351c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001aba:	e021      	b.n	8001b00 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <HAL_TIM_MspPostInit+0xb4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d11c      	bne.n	8001b00 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_TIM_MspPostInit+0xb0>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aca:	4a10      	ldr	r2, [pc, #64]	; (8001b0c <HAL_TIM_MspPostInit+0xb0>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad2:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_TIM_MspPostInit+0xb0>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ade:	2340      	movs	r3, #64	; 0x40
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001aee:	2302      	movs	r3, #2
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afc:	f001 fd0e 	bl	800351c <HAL_GPIO_Init>
}
 8001b00:	bf00      	nop
 8001b02:	3728      	adds	r7, #40	; 0x28
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40012c00 	.word	0x40012c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40000400 	.word	0x40000400

08001b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b0ac      	sub	sp, #176	; 0xb0
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	2288      	movs	r2, #136	; 0x88
 8001b32:	2100      	movs	r1, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f008 fd66 	bl	800a606 <memset>
  if(huart->Instance==USART2)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a21      	ldr	r2, [pc, #132]	; (8001bc4 <HAL_UART_MspInit+0xb0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d13b      	bne.n	8001bbc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b44:	2302      	movs	r3, #2
 8001b46:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	4618      	mov	r0, r3
 8001b52:	f002 fd21 	bl	8004598 <HAL_RCCEx_PeriphCLKConfig>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b5c:	f7ff fe8a 	bl	8001874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_UART_MspInit+0xb4>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	4a18      	ldr	r2, [pc, #96]	; (8001bc8 <HAL_UART_MspInit+0xb4>)
 8001b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_UART_MspInit+0xb4>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b78:	4b13      	ldr	r3, [pc, #76]	; (8001bc8 <HAL_UART_MspInit+0xb4>)
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b7c:	4a12      	ldr	r2, [pc, #72]	; (8001bc8 <HAL_UART_MspInit+0xb4>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b84:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HAL_UART_MspInit+0xb4>)
 8001b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b90:	230c      	movs	r3, #12
 8001b92:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b96:	2302      	movs	r3, #2
 8001b98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ba8:	2307      	movs	r3, #7
 8001baa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bae:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bb8:	f001 fcb0 	bl	800351c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bbc:	bf00      	nop
 8001bbe:	37b0      	adds	r7, #176	; 0xb0
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40004400 	.word	0x40004400
 8001bc8:	40021000 	.word	0x40021000

08001bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd0:	e7fe      	b.n	8001bd0 <NMI_Handler+0x4>

08001bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd6:	e7fe      	b.n	8001bd6 <HardFault_Handler+0x4>

08001bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bdc:	e7fe      	b.n	8001bdc <MemManage_Handler+0x4>

08001bde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bde:	b480      	push	{r7}
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be2:	e7fe      	b.n	8001be2 <BusFault_Handler+0x4>

08001be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be8:	e7fe      	b.n	8001be8 <UsageFault_Handler+0x4>

08001bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bfc:	f000 f966 	bl	8001ecc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c00:	f007 f9ea 	bl	8008fd8 <xTaskGetSchedulerState>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d001      	beq.n	8001c0e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c0a:	f008 f8cd 	bl	8009da8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c12:	b480      	push	{r7}
 8001c14:	af00      	add	r7, sp, #0
  return 1;
 8001c16:	2301      	movs	r3, #1
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <_kill>:

int _kill(int pid, int sig)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b082      	sub	sp, #8
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c2c:	f008 fd96 	bl	800a75c <__errno>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2216      	movs	r2, #22
 8001c34:	601a      	str	r2, [r3, #0]
  return -1;
 8001c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <_exit>:

void _exit (int status)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffe7 	bl	8001c22 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c54:	e7fe      	b.n	8001c54 <_exit+0x12>

08001c56 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	e00a      	b.n	8001c7e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c68:	f3af 8000 	nop.w
 8001c6c:	4601      	mov	r1, r0
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	60ba      	str	r2, [r7, #8]
 8001c74:	b2ca      	uxtb	r2, r1
 8001c76:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	dbf0      	blt.n	8001c68 <_read+0x12>
  }

  return len;
 8001c86:	687b      	ldr	r3, [r7, #4]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	e009      	b.n	8001cb6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	1c5a      	adds	r2, r3, #1
 8001ca6:	60ba      	str	r2, [r7, #8]
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	dbf1      	blt.n	8001ca2 <_write+0x12>
  }
  return len;
 8001cbe:	687b      	ldr	r3, [r7, #4]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_close>:

int _close(int file)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cf0:	605a      	str	r2, [r3, #4]
  return 0;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <_isatty>:

int _isatty(int file)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d08:	2301      	movs	r3, #1
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	60f8      	str	r0, [r7, #12]
 8001d1e:	60b9      	str	r1, [r7, #8]
 8001d20:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d38:	4a14      	ldr	r2, [pc, #80]	; (8001d8c <_sbrk+0x5c>)
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <_sbrk+0x60>)
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d44:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	; (8001d94 <_sbrk+0x64>)
 8001d4e:	4a12      	ldr	r2, [pc, #72]	; (8001d98 <_sbrk+0x68>)
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <_sbrk+0x64>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4413      	add	r3, r2
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d207      	bcs.n	8001d70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d60:	f008 fcfc 	bl	800a75c <__errno>
 8001d64:	4603      	mov	r3, r0
 8001d66:	220c      	movs	r2, #12
 8001d68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d6e:	e009      	b.n	8001d84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d70:	4b08      	ldr	r3, [pc, #32]	; (8001d94 <_sbrk+0x64>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <_sbrk+0x64>)
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <_sbrk+0x64>)
 8001d80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d82:	68fb      	ldr	r3, [r7, #12]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20018000 	.word	0x20018000
 8001d90:	00000400 	.word	0x00000400
 8001d94:	20000228 	.word	0x20000228
 8001d98:	20001c88 	.word	0x20001c88

08001d9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <SystemInit+0x20>)
 8001da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da6:	4a05      	ldr	r2, [pc, #20]	; (8001dbc <SystemInit+0x20>)
 8001da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001df8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dc4:	f7ff ffea 	bl	8001d9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dc8:	480c      	ldr	r0, [pc, #48]	; (8001dfc <LoopForever+0x6>)
  ldr r1, =_edata
 8001dca:	490d      	ldr	r1, [pc, #52]	; (8001e00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dcc:	4a0d      	ldr	r2, [pc, #52]	; (8001e04 <LoopForever+0xe>)
  movs r3, #0
 8001dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd0:	e002      	b.n	8001dd8 <LoopCopyDataInit>

08001dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dd6:	3304      	adds	r3, #4

08001dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ddc:	d3f9      	bcc.n	8001dd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001de0:	4c0a      	ldr	r4, [pc, #40]	; (8001e0c <LoopForever+0x16>)
  movs r3, #0
 8001de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de4:	e001      	b.n	8001dea <LoopFillZerobss>

08001de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001de8:	3204      	adds	r2, #4

08001dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dec:	d3fb      	bcc.n	8001de6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dee:	f008 fcbb 	bl	800a768 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001df2:	f7ff fa71 	bl	80012d8 <main>

08001df6 <LoopForever>:

LoopForever:
    b LoopForever
 8001df6:	e7fe      	b.n	8001df6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001df8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e00:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001e04:	0800bab8 	.word	0x0800bab8
  ldr r2, =_sbss
 8001e08:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001e0c:	20001c84 	.word	0x20001c84

08001e10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e10:	e7fe      	b.n	8001e10 <ADC1_2_IRQHandler>
	...

08001e14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <HAL_Init+0x3c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <HAL_Init+0x3c>)
 8001e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e28:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2a:	2003      	movs	r0, #3
 8001e2c:	f001 fb42 	bl	80034b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e30:	200f      	movs	r0, #15
 8001e32:	f000 f80f 	bl	8001e54 <HAL_InitTick>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d002      	beq.n	8001e42 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	71fb      	strb	r3, [r7, #7]
 8001e40:	e001      	b.n	8001e46 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e42:	f7ff fd1d 	bl	8001880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e46:	79fb      	ldrb	r3, [r7, #7]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40022000 	.word	0x40022000

08001e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <HAL_InitTick+0x6c>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d023      	beq.n	8001eb0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e68:	4b16      	ldr	r3, [pc, #88]	; (8001ec4 <HAL_InitTick+0x70>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b14      	ldr	r3, [pc, #80]	; (8001ec0 <HAL_InitTick+0x6c>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	4619      	mov	r1, r3
 8001e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f001 fb3f 	bl	8003502 <HAL_SYSTICK_Config>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d10f      	bne.n	8001eaa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d809      	bhi.n	8001ea4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e90:	2200      	movs	r2, #0
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e98:	f001 fb17 	bl	80034ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e9c:	4a0a      	ldr	r2, [pc, #40]	; (8001ec8 <HAL_InitTick+0x74>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6013      	str	r3, [r2, #0]
 8001ea2:	e007      	b.n	8001eb4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	73fb      	strb	r3, [r7, #15]
 8001ea8:	e004      	b.n	8001eb4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	73fb      	strb	r3, [r7, #15]
 8001eae:	e001      	b.n	8001eb4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3710      	adds	r7, #16
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000008 	.word	0x20000008
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_IncTick+0x20>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_IncTick+0x24>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4413      	add	r3, r2
 8001edc:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <HAL_IncTick+0x24>)
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	bf00      	nop
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	20000008 	.word	0x20000008
 8001ef0:	2000022c 	.word	0x2000022c

08001ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <HAL_GetTick+0x14>)
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	2000022c 	.word	0x2000022c

08001f0c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	609a      	str	r2, [r3, #8]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	609a      	str	r2, [r3, #8]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b087      	sub	sp, #28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	3360      	adds	r3, #96	; 0x60
 8001f86:	461a      	mov	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4413      	add	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <LL_ADC_SetOffset+0x44>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001fac:	bf00      	nop
 8001fae:	371c      	adds	r7, #28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	03fff000 	.word	0x03fff000

08001fbc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3360      	adds	r3, #96	; 0x60
 8001fca:	461a      	mov	r2, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4413      	add	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	3360      	adds	r3, #96	; 0x60
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	431a      	orrs	r2, r3
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002012:	bf00      	nop
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr

0800201e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800201e:	b480      	push	{r7}
 8002020:	b083      	sub	sp, #12
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3330      	adds	r3, #48	; 0x30
 8002054:	461a      	mov	r2, r3
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	4413      	add	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	f003 031f 	and.w	r3, r3, #31
 800206e:	211f      	movs	r1, #31
 8002070:	fa01 f303 	lsl.w	r3, r1, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	401a      	ands	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	0e9b      	lsrs	r3, r3, #26
 800207c:	f003 011f 	and.w	r1, r3, #31
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	f003 031f 	and.w	r3, r3, #31
 8002086:	fa01 f303 	lsl.w	r3, r1, r3
 800208a:	431a      	orrs	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002090:	bf00      	nop
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3314      	adds	r3, #20
 80020ac:	461a      	mov	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	0e5b      	lsrs	r3, r3, #25
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	4413      	add	r3, r2
 80020ba:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	0d1b      	lsrs	r3, r3, #20
 80020c4:	f003 031f 	and.w	r3, r3, #31
 80020c8:	2107      	movs	r1, #7
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	401a      	ands	r2, r3
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	0d1b      	lsrs	r3, r3, #20
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	6879      	ldr	r1, [r7, #4]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	431a      	orrs	r2, r3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80020e6:	bf00      	nop
 80020e8:	371c      	adds	r7, #28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800210c:	43db      	mvns	r3, r3
 800210e:	401a      	ands	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f003 0318 	and.w	r3, r3, #24
 8002116:	4908      	ldr	r1, [pc, #32]	; (8002138 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002118:	40d9      	lsrs	r1, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	400b      	ands	r3, r1
 800211e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002122:	431a      	orrs	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	0007ffff 	.word	0x0007ffff

0800213c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 031f 	and.w	r3, r3, #31
}
 800214c:	4618      	mov	r0, r3
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002184:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6093      	str	r3, [r2, #8]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021ac:	d101      	bne.n	80021b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021fc:	d101      	bne.n	8002202 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021fe:	2301      	movs	r3, #1
 8002200:	e000      	b.n	8002204 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002202:	2300      	movs	r3, #0
}
 8002204:	4618      	mov	r0, r3
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002220:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002224:	f043 0201 	orr.w	r2, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <LL_ADC_IsEnabled+0x18>
 800224c:	2301      	movs	r3, #1
 800224e:	e000      	b.n	8002252 <LL_ADC_IsEnabled+0x1a>
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800226e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002272:	f043 0204 	orr.w	r2, r3, #4
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	2b04      	cmp	r3, #4
 8002298:	d101      	bne.n	800229e <LL_ADC_REG_IsConversionOngoing+0x18>
 800229a:	2301      	movs	r3, #1
 800229c:	e000      	b.n	80022a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	2b08      	cmp	r3, #8
 80022be:	d101      	bne.n	80022c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	370c      	adds	r7, #12
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b089      	sub	sp, #36	; 0x24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e130      	b.n	8002550 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d109      	bne.n	8002310 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff fae7 	bl	80018d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7ff ff3f 	bl	8002198 <LL_ADC_IsDeepPowerDownEnabled>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d004      	beq.n	800232a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff ff25 	bl	8002174 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff5a 	bl	80021e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d115      	bne.n	8002366 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff ff3e 	bl	80021c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002344:	4b84      	ldr	r3, [pc, #528]	; (8002558 <HAL_ADC_Init+0x284>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	099b      	lsrs	r3, r3, #6
 800234a:	4a84      	ldr	r2, [pc, #528]	; (800255c <HAL_ADC_Init+0x288>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	3301      	adds	r3, #1
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002358:	e002      	b.n	8002360 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3b01      	subs	r3, #1
 800235e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f9      	bne.n	800235a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff ff3c 	bl	80021e8 <LL_ADC_IsInternalRegulatorEnabled>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10d      	bne.n	8002392 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800237a:	f043 0210 	orr.w	r2, r3, #16
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	f043 0201 	orr.w	r2, r3, #1
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff75 	bl	8002286 <LL_ADC_REG_IsConversionOngoing>
 800239c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a2:	f003 0310 	and.w	r3, r3, #16
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f040 80c9 	bne.w	800253e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 80c5 	bne.w	800253e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80023bc:	f043 0202 	orr.w	r2, r3, #2
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff35 	bl	8002238 <LL_ADC_IsEnabled>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d115      	bne.n	8002400 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023d4:	4862      	ldr	r0, [pc, #392]	; (8002560 <HAL_ADC_Init+0x28c>)
 80023d6:	f7ff ff2f 	bl	8002238 <LL_ADC_IsEnabled>
 80023da:	4604      	mov	r4, r0
 80023dc:	4861      	ldr	r0, [pc, #388]	; (8002564 <HAL_ADC_Init+0x290>)
 80023de:	f7ff ff2b 	bl	8002238 <LL_ADC_IsEnabled>
 80023e2:	4603      	mov	r3, r0
 80023e4:	431c      	orrs	r4, r3
 80023e6:	4860      	ldr	r0, [pc, #384]	; (8002568 <HAL_ADC_Init+0x294>)
 80023e8:	f7ff ff26 	bl	8002238 <LL_ADC_IsEnabled>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4323      	orrs	r3, r4
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d105      	bne.n	8002400 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4619      	mov	r1, r3
 80023fa:	485c      	ldr	r0, [pc, #368]	; (800256c <HAL_ADC_Init+0x298>)
 80023fc:	f7ff fd86 	bl	8001f0c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7e5b      	ldrb	r3, [r3, #25]
 8002404:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800240a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002410:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002416:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800241e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002420:	4313      	orrs	r3, r2
 8002422:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d106      	bne.n	800243c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	3b01      	subs	r3, #1
 8002434:	045b      	lsls	r3, r3, #17
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	2b00      	cmp	r3, #0
 8002442:	d009      	beq.n	8002458 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002448:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	4b44      	ldr	r3, [pc, #272]	; (8002570 <HAL_ADC_Init+0x29c>)
 8002460:	4013      	ands	r3, r2
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6812      	ldr	r2, [r2, #0]
 8002466:	69b9      	ldr	r1, [r7, #24]
 8002468:	430b      	orrs	r3, r1
 800246a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff1b 	bl	80022ac <LL_ADC_INJ_IsConversionOngoing>
 8002476:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d13d      	bne.n	80024fa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d13a      	bne.n	80024fa <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002488:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002490:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024a0:	f023 0302 	bic.w	r3, r3, #2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	69b9      	ldr	r1, [r7, #24]
 80024aa:	430b      	orrs	r3, r1
 80024ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d118      	bne.n	80024ea <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80024c2:	f023 0304 	bic.w	r3, r3, #4
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80024ce:	4311      	orrs	r1, r2
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024d4:	4311      	orrs	r1, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024da:	430a      	orrs	r2, r1
 80024dc:	431a      	orrs	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f042 0201 	orr.w	r2, r2, #1
 80024e6:	611a      	str	r2, [r3, #16]
 80024e8:	e007      	b.n	80024fa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f022 0201 	bic.w	r2, r2, #1
 80024f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d10c      	bne.n	800251c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	f023 010f 	bic.w	r1, r3, #15
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	1e5a      	subs	r2, r3, #1
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	631a      	str	r2, [r3, #48]	; 0x30
 800251a:	e007      	b.n	800252c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 020f 	bic.w	r2, r2, #15
 800252a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002530:	f023 0303 	bic.w	r3, r3, #3
 8002534:	f043 0201 	orr.w	r2, r3, #1
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	655a      	str	r2, [r3, #84]	; 0x54
 800253c:	e007      	b.n	800254e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 0210 	orr.w	r2, r3, #16
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800254e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002550:	4618      	mov	r0, r3
 8002552:	3724      	adds	r7, #36	; 0x24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd90      	pop	{r4, r7, pc}
 8002558:	20000000 	.word	0x20000000
 800255c:	053e2d63 	.word	0x053e2d63
 8002560:	50040000 	.word	0x50040000
 8002564:	50040100 	.word	0x50040100
 8002568:	50040200 	.word	0x50040200
 800256c:	50040300 	.word	0x50040300
 8002570:	fff0c007 	.word	0xfff0c007

08002574 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800257c:	4857      	ldr	r0, [pc, #348]	; (80026dc <HAL_ADC_Start+0x168>)
 800257e:	f7ff fddd 	bl	800213c <LL_ADC_GetMultimode>
 8002582:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff fe7c 	bl	8002286 <LL_ADC_REG_IsConversionOngoing>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	f040 809c 	bne.w	80026ce <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_ADC_Start+0x30>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e097      	b.n	80026d4 <HAL_ADC_Start+0x160>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fd73 	bl	8003098 <ADC_Enable>
 80025b2:	4603      	mov	r3, r0
 80025b4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025b6:	7dfb      	ldrb	r3, [r7, #23]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f040 8083 	bne.w	80026c4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025c6:	f023 0301 	bic.w	r3, r3, #1
 80025ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a42      	ldr	r2, [pc, #264]	; (80026e0 <HAL_ADC_Start+0x16c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d002      	beq.n	80025e2 <HAL_ADC_Start+0x6e>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	e000      	b.n	80025e4 <HAL_ADC_Start+0x70>
 80025e2:	4b40      	ldr	r3, [pc, #256]	; (80026e4 <HAL_ADC_Start+0x170>)
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	6812      	ldr	r2, [r2, #0]
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d002      	beq.n	80025f2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d105      	bne.n	80025fe <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260a:	d106      	bne.n	800261a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002610:	f023 0206 	bic.w	r2, r3, #6
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	659a      	str	r2, [r3, #88]	; 0x58
 8002618:	e002      	b.n	8002620 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	221c      	movs	r2, #28
 8002626:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a2a      	ldr	r2, [pc, #168]	; (80026e0 <HAL_ADC_Start+0x16c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d002      	beq.n	8002640 <HAL_ADC_Start+0xcc>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	e000      	b.n	8002642 <HAL_ADC_Start+0xce>
 8002640:	4b28      	ldr	r3, [pc, #160]	; (80026e4 <HAL_ADC_Start+0x170>)
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	4293      	cmp	r3, r2
 8002648:	d008      	beq.n	800265c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2b05      	cmp	r3, #5
 8002654:	d002      	beq.n	800265c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b09      	cmp	r3, #9
 800265a:	d114      	bne.n	8002686 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002672:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fded 	bl	800225e <LL_ADC_REG_StartConversion>
 8002684:	e025      	b.n	80026d2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <HAL_ADC_Start+0x16c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d002      	beq.n	80026a2 <HAL_ADC_Start+0x12e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	e000      	b.n	80026a4 <HAL_ADC_Start+0x130>
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <HAL_ADC_Start+0x170>)
 80026a4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00f      	beq.n	80026d2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54
 80026c2:	e006      	b.n	80026d2 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80026cc:	e001      	b.n	80026d2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80026ce:	2302      	movs	r3, #2
 80026d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	50040300 	.word	0x50040300
 80026e0:	50040100 	.word	0x50040100
 80026e4:	50040000 	.word	0x50040000

080026e8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026f2:	4866      	ldr	r0, [pc, #408]	; (800288c <HAL_ADC_PollForConversion+0x1a4>)
 80026f4:	f7ff fd22 	bl	800213c <LL_ADC_GetMultimode>
 80026f8:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d102      	bne.n	8002708 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002702:	2308      	movs	r3, #8
 8002704:	61fb      	str	r3, [r7, #28]
 8002706:	e02a      	b.n	800275e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	2b05      	cmp	r3, #5
 8002712:	d002      	beq.n	800271a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b09      	cmp	r3, #9
 8002718:	d111      	bne.n	800273e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b00      	cmp	r3, #0
 8002726:	d007      	beq.n	8002738 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272c:	f043 0220 	orr.w	r2, r3, #32
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0a4      	b.n	8002882 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002738:	2304      	movs	r3, #4
 800273a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800273c:	e00f      	b.n	800275e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800273e:	4853      	ldr	r0, [pc, #332]	; (800288c <HAL_ADC_PollForConversion+0x1a4>)
 8002740:	f7ff fd0a 	bl	8002158 <LL_ADC_GetMultiDMATransfer>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274e:	f043 0220 	orr.w	r2, r3, #32
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e093      	b.n	8002882 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800275a:	2304      	movs	r3, #4
 800275c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800275e:	f7ff fbc9 	bl	8001ef4 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002764:	e021      	b.n	80027aa <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800276c:	d01d      	beq.n	80027aa <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800276e:	f7ff fbc1 	bl	8001ef4 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d302      	bcc.n	8002784 <HAL_ADC_PollForConversion+0x9c>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d112      	bne.n	80027aa <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10b      	bne.n	80027aa <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002796:	f043 0204 	orr.w	r2, r3, #4
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e06b      	b.n	8002882 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0d6      	beq.n	8002766 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fc28 	bl	800201e <LL_ADC_REG_IsTriggerSourceSWStart>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01c      	beq.n	800280e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	7e5b      	ldrb	r3, [r3, #25]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d118      	bne.n	800280e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d111      	bne.n	800280e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d105      	bne.n	800280e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	f043 0201 	orr.w	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a1f      	ldr	r2, [pc, #124]	; (8002890 <HAL_ADC_PollForConversion+0x1a8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d002      	beq.n	800281e <HAL_ADC_PollForConversion+0x136>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	e000      	b.n	8002820 <HAL_ADC_PollForConversion+0x138>
 800281e:	4b1d      	ldr	r3, [pc, #116]	; (8002894 <HAL_ADC_PollForConversion+0x1ac>)
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	4293      	cmp	r3, r2
 8002826:	d008      	beq.n	800283a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b05      	cmp	r3, #5
 8002832:	d002      	beq.n	800283a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2b09      	cmp	r3, #9
 8002838:	d104      	bne.n	8002844 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	e00c      	b.n	800285e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a11      	ldr	r2, [pc, #68]	; (8002890 <HAL_ADC_PollForConversion+0x1a8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d002      	beq.n	8002854 <HAL_ADC_PollForConversion+0x16c>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	e000      	b.n	8002856 <HAL_ADC_PollForConversion+0x16e>
 8002854:	4b0f      	ldr	r3, [pc, #60]	; (8002894 <HAL_ADC_PollForConversion+0x1ac>)
 8002856:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	2b08      	cmp	r3, #8
 8002862:	d104      	bne.n	800286e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2208      	movs	r2, #8
 800286a:	601a      	str	r2, [r3, #0]
 800286c:	e008      	b.n	8002880 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d103      	bne.n	8002880 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	220c      	movs	r2, #12
 800287e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	3720      	adds	r7, #32
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	50040300 	.word	0x50040300
 8002890:	50040100 	.word	0x50040100
 8002894:	50040000 	.word	0x50040000

08002898 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b0b6      	sub	sp, #216	; 0xd8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028be:	2300      	movs	r3, #0
 80028c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x22>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e3c9      	b.n	800306a <HAL_ADC_ConfigChannel+0x7b6>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff fccf 	bl	8002286 <LL_ADC_REG_IsConversionOngoing>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f040 83aa 	bne.w	8003044 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	2b05      	cmp	r3, #5
 80028fe:	d824      	bhi.n	800294a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	3b02      	subs	r3, #2
 8002906:	2b03      	cmp	r3, #3
 8002908:	d81b      	bhi.n	8002942 <HAL_ADC_ConfigChannel+0x8e>
 800290a:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <HAL_ADC_ConfigChannel+0x5c>)
 800290c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002910:	08002921 	.word	0x08002921
 8002914:	08002929 	.word	0x08002929
 8002918:	08002931 	.word	0x08002931
 800291c:	08002939 	.word	0x08002939
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002920:	230c      	movs	r3, #12
 8002922:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002926:	e010      	b.n	800294a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002928:	2312      	movs	r3, #18
 800292a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800292e:	e00c      	b.n	800294a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002930:	2318      	movs	r3, #24
 8002932:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002936:	e008      	b.n	800294a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002938:	f44f 7380 	mov.w	r3, #256	; 0x100
 800293c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002940:	e003      	b.n	800294a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002942:	2306      	movs	r3, #6
 8002944:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002948:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6818      	ldr	r0, [r3, #0]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002958:	f7ff fb74 	bl	8002044 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fc90 	bl	8002286 <LL_ADC_REG_IsConversionOngoing>
 8002966:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fc9c 	bl	80022ac <LL_ADC_INJ_IsConversionOngoing>
 8002974:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002978:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800297c:	2b00      	cmp	r3, #0
 800297e:	f040 81a4 	bne.w	8002cca <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002982:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002986:	2b00      	cmp	r3, #0
 8002988:	f040 819f 	bne.w	8002cca <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6818      	ldr	r0, [r3, #0]
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	6819      	ldr	r1, [r3, #0]
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	461a      	mov	r2, r3
 800299a:	f7ff fb7f 	bl	800209c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	695a      	ldr	r2, [r3, #20]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	08db      	lsrs	r3, r3, #3
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d00a      	beq.n	80029d6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6919      	ldr	r1, [r3, #16]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029d0:	f7ff fad0 	bl	8001f74 <LL_ADC_SetOffset>
 80029d4:	e179      	b.n	8002cca <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2100      	movs	r1, #0
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff faed 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 80029e2:	4603      	mov	r3, r0
 80029e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10a      	bne.n	8002a02 <HAL_ADC_ConfigChannel+0x14e>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fae2 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 80029f8:	4603      	mov	r3, r0
 80029fa:	0e9b      	lsrs	r3, r3, #26
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	e01e      	b.n	8002a40 <HAL_ADC_ConfigChannel+0x18c>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2100      	movs	r1, #0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff fad7 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a18:	fa93 f3a3 	rbit	r3, r3
 8002a1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a28:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002a30:	2320      	movs	r3, #32
 8002a32:	e004      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002a34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a38:	fab3 f383 	clz	r3, r3
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <HAL_ADC_ConfigChannel+0x1a4>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0e9b      	lsrs	r3, r3, #26
 8002a52:	f003 031f 	and.w	r3, r3, #31
 8002a56:	e018      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x1d6>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002a6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002a74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	e004      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002a80:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d106      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2200      	movs	r2, #0
 8002a94:	2100      	movs	r1, #0
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff faa6 	bl	8001fe8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fa8a 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d10a      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x214>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff fa7f 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	0e9b      	lsrs	r3, r3, #26
 8002ac2:	f003 021f 	and.w	r2, r3, #31
 8002ac6:	e01e      	b.n	8002b06 <HAL_ADC_ConfigChannel+0x252>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2101      	movs	r1, #1
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fa74 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ada:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ade:	fa93 f3a3 	rbit	r3, r3
 8002ae2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002ae6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002aea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002aee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002af6:	2320      	movs	r3, #32
 8002af8:	e004      	b.n	8002b04 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002afa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002afe:	fab3 f383 	clz	r3, r3
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d105      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x26a>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	0e9b      	lsrs	r3, r3, #26
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	e018      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x29c>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002b32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002b3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002b42:	2320      	movs	r3, #32
 8002b44:	e004      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002b46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d106      	bne.n	8002b62 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f7ff fa43 	bl	8001fe8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2102      	movs	r1, #2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff fa27 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x2da>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2102      	movs	r1, #2
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff fa1c 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 8002b84:	4603      	mov	r3, r0
 8002b86:	0e9b      	lsrs	r3, r3, #26
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	e01e      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x318>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2102      	movs	r1, #2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fa11 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ba4:	fa93 f3a3 	rbit	r3, r3
 8002ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002bac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002bbc:	2320      	movs	r3, #32
 8002bbe:	e004      	b.n	8002bca <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002bc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bc4:	fab3 f383 	clz	r3, r3
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d105      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x330>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	f003 031f 	and.w	r3, r3, #31
 8002be2:	e014      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x35a>
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bec:	fa93 f3a3 	rbit	r3, r3
 8002bf0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002bf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e004      	b.n	8002c0e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c08:	fab3 f383 	clz	r3, r3
 8002c0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d106      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2200      	movs	r2, #0
 8002c18:	2102      	movs	r1, #2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff f9e4 	bl	8001fe8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2103      	movs	r1, #3
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff f9c8 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10a      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x398>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2103      	movs	r1, #3
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff f9bd 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 8002c42:	4603      	mov	r3, r0
 8002c44:	0e9b      	lsrs	r3, r3, #26
 8002c46:	f003 021f 	and.w	r2, r3, #31
 8002c4a:	e017      	b.n	8002c7c <HAL_ADC_ConfigChannel+0x3c8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2103      	movs	r1, #3
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff f9b2 	bl	8001fbc <LL_ADC_GetOffsetChannel>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c5e:	fa93 f3a3 	rbit	r3, r3
 8002c62:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c66:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002c68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002c6e:	2320      	movs	r3, #32
 8002c70:	e003      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002c72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c74:	fab3 f383 	clz	r3, r3
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d105      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x3e0>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	0e9b      	lsrs	r3, r3, #26
 8002c8e:	f003 031f 	and.w	r3, r3, #31
 8002c92:	e011      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x404>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c9c:	fa93 f3a3 	rbit	r3, r3
 8002ca0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002ca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ca4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002ca6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002cac:	2320      	movs	r3, #32
 8002cae:	e003      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002cb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d106      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2103      	movs	r1, #3
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff f98f 	bl	8001fe8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fab2 	bl	8002238 <LL_ADC_IsEnabled>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f040 8140 	bne.w	8002f5c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6819      	ldr	r1, [r3, #0]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	461a      	mov	r2, r3
 8002cea:	f7ff fa03 	bl	80020f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	4a8f      	ldr	r2, [pc, #572]	; (8002f30 <HAL_ADC_ConfigChannel+0x67c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	f040 8131 	bne.w	8002f5c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10b      	bne.n	8002d22 <HAL_ADC_ConfigChannel+0x46e>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0e9b      	lsrs	r3, r3, #26
 8002d10:	3301      	adds	r3, #1
 8002d12:	f003 031f 	and.w	r3, r3, #31
 8002d16:	2b09      	cmp	r3, #9
 8002d18:	bf94      	ite	ls
 8002d1a:	2301      	movls	r3, #1
 8002d1c:	2300      	movhi	r3, #0
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	e019      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x4a2>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d2a:	fa93 f3a3 	rbit	r3, r3
 8002d2e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d32:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	e003      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d40:	fab3 f383 	clz	r3, r3
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	3301      	adds	r3, #1
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	2b09      	cmp	r3, #9
 8002d4e:	bf94      	ite	ls
 8002d50:	2301      	movls	r3, #1
 8002d52:	2300      	movhi	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d079      	beq.n	8002e4e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d107      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x4c2>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	0e9b      	lsrs	r3, r3, #26
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	069b      	lsls	r3, r3, #26
 8002d70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d74:	e015      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x4ee>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002d84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d86:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002d8e:	2320      	movs	r3, #32
 8002d90:	e003      	b.n	8002d9a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	069b      	lsls	r3, r3, #26
 8002d9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d109      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x50e>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	0e9b      	lsrs	r3, r3, #26
 8002db4:	3301      	adds	r3, #1
 8002db6:	f003 031f 	and.w	r3, r3, #31
 8002dba:	2101      	movs	r1, #1
 8002dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002dc0:	e017      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x53e>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dca:	fa93 f3a3 	rbit	r3, r3
 8002dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dd2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002dda:	2320      	movs	r3, #32
 8002ddc:	e003      	b.n	8002de6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002de0:	fab3 f383 	clz	r3, r3
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	3301      	adds	r3, #1
 8002de8:	f003 031f 	and.w	r3, r3, #31
 8002dec:	2101      	movs	r1, #1
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	ea42 0103 	orr.w	r1, r2, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10a      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x564>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	0e9b      	lsrs	r3, r3, #26
 8002e08:	3301      	adds	r3, #1
 8002e0a:	f003 021f 	and.w	r2, r3, #31
 8002e0e:	4613      	mov	r3, r2
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	4413      	add	r3, r2
 8002e14:	051b      	lsls	r3, r3, #20
 8002e16:	e018      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x596>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e28:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002e30:	2320      	movs	r3, #32
 8002e32:	e003      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	f003 021f 	and.w	r2, r3, #31
 8002e42:	4613      	mov	r3, r2
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	4413      	add	r3, r2
 8002e48:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e4a:	430b      	orrs	r3, r1
 8002e4c:	e081      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d107      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x5b6>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	0e9b      	lsrs	r3, r3, #26
 8002e60:	3301      	adds	r3, #1
 8002e62:	069b      	lsls	r3, r3, #26
 8002e64:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e68:	e015      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x5e2>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002e82:	2320      	movs	r3, #32
 8002e84:	e003      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	069b      	lsls	r3, r3, #26
 8002e92:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d109      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x602>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	0e9b      	lsrs	r3, r3, #26
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	2101      	movs	r1, #1
 8002eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb4:	e017      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x632>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	61bb      	str	r3, [r7, #24]
  return result;
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002ece:	2320      	movs	r3, #32
 8002ed0:	e003      	b.n	8002eda <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002ed2:	6a3b      	ldr	r3, [r7, #32]
 8002ed4:	fab3 f383 	clz	r3, r3
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	3301      	adds	r3, #1
 8002edc:	f003 031f 	and.w	r3, r3, #31
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee6:	ea42 0103 	orr.w	r1, r2, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10d      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x65e>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	0e9b      	lsrs	r3, r3, #26
 8002efc:	3301      	adds	r3, #1
 8002efe:	f003 021f 	and.w	r2, r3, #31
 8002f02:	4613      	mov	r3, r2
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	4413      	add	r3, r2
 8002f08:	3b1e      	subs	r3, #30
 8002f0a:	051b      	lsls	r3, r3, #20
 8002f0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f10:	e01e      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x69c>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	60fb      	str	r3, [r7, #12]
  return result;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d104      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	e006      	b.n	8002f3c <HAL_ADC_ConfigChannel+0x688>
 8002f2e:	bf00      	nop
 8002f30:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fab3 f383 	clz	r3, r3
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f003 021f 	and.w	r2, r3, #31
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	3b1e      	subs	r3, #30
 8002f4a:	051b      	lsls	r3, r3, #20
 8002f4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f50:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f56:	4619      	mov	r1, r3
 8002f58:	f7ff f8a0 	bl	800209c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4b44      	ldr	r3, [pc, #272]	; (8003074 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f62:	4013      	ands	r3, r2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d07a      	beq.n	800305e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f68:	4843      	ldr	r0, [pc, #268]	; (8003078 <HAL_ADC_ConfigChannel+0x7c4>)
 8002f6a:	f7fe fff5 	bl	8001f58 <LL_ADC_GetCommonPathInternalCh>
 8002f6e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a41      	ldr	r2, [pc, #260]	; (800307c <HAL_ADC_ConfigChannel+0x7c8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d12c      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f7c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d126      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a3c      	ldr	r2, [pc, #240]	; (8003080 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_ADC_ConfigChannel+0x6e8>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a3b      	ldr	r2, [pc, #236]	; (8003084 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d15d      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fa0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4834      	ldr	r0, [pc, #208]	; (8003078 <HAL_ADC_ConfigChannel+0x7c4>)
 8002fa8:	f7fe ffc3 	bl	8001f32 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fac:	4b36      	ldr	r3, [pc, #216]	; (8003088 <HAL_ADC_ConfigChannel+0x7d4>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	4a36      	ldr	r2, [pc, #216]	; (800308c <HAL_ADC_ConfigChannel+0x7d8>)
 8002fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb8:	099b      	lsrs	r3, r3, #6
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002fc6:	e002      	b.n	8002fce <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1f9      	bne.n	8002fc8 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fd4:	e040      	b.n	8003058 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a2d      	ldr	r2, [pc, #180]	; (8003090 <HAL_ADC_ConfigChannel+0x7dc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d118      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fe0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fe4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d112      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a23      	ldr	r2, [pc, #140]	; (8003080 <HAL_ADC_ConfigChannel+0x7cc>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d004      	beq.n	8003000 <HAL_ADC_ConfigChannel+0x74c>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a22      	ldr	r2, [pc, #136]	; (8003084 <HAL_ADC_ConfigChannel+0x7d0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d12d      	bne.n	800305c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003000:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003004:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003008:	4619      	mov	r1, r3
 800300a:	481b      	ldr	r0, [pc, #108]	; (8003078 <HAL_ADC_ConfigChannel+0x7c4>)
 800300c:	f7fe ff91 	bl	8001f32 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003010:	e024      	b.n	800305c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a1f      	ldr	r2, [pc, #124]	; (8003094 <HAL_ADC_ConfigChannel+0x7e0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d120      	bne.n	800305e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800301c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003020:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d11a      	bne.n	800305e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a14      	ldr	r2, [pc, #80]	; (8003080 <HAL_ADC_ConfigChannel+0x7cc>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d115      	bne.n	800305e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003032:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003036:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800303a:	4619      	mov	r1, r3
 800303c:	480e      	ldr	r0, [pc, #56]	; (8003078 <HAL_ADC_ConfigChannel+0x7c4>)
 800303e:	f7fe ff78 	bl	8001f32 <LL_ADC_SetCommonPathInternalCh>
 8003042:	e00c      	b.n	800305e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003048:	f043 0220 	orr.w	r2, r3, #32
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003056:	e002      	b.n	800305e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003058:	bf00      	nop
 800305a:	e000      	b.n	800305e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800305c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003066:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800306a:	4618      	mov	r0, r3
 800306c:	37d8      	adds	r7, #216	; 0xd8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	80080000 	.word	0x80080000
 8003078:	50040300 	.word	0x50040300
 800307c:	c7520000 	.word	0xc7520000
 8003080:	50040000 	.word	0x50040000
 8003084:	50040200 	.word	0x50040200
 8003088:	20000000 	.word	0x20000000
 800308c:	053e2d63 	.word	0x053e2d63
 8003090:	cb840000 	.word	0xcb840000
 8003094:	80000001 	.word	0x80000001

08003098 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80030a0:	2300      	movs	r3, #0
 80030a2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff f8c5 	bl	8002238 <LL_ADC_IsEnabled>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d169      	bne.n	8003188 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	4b36      	ldr	r3, [pc, #216]	; (8003194 <ADC_Enable+0xfc>)
 80030bc:	4013      	ands	r3, r2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00d      	beq.n	80030de <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	f043 0210 	orr.w	r2, r3, #16
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d2:	f043 0201 	orr.w	r2, r3, #1
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e055      	b.n	800318a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7ff f894 	bl	8002210 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030e8:	482b      	ldr	r0, [pc, #172]	; (8003198 <ADC_Enable+0x100>)
 80030ea:	f7fe ff35 	bl	8001f58 <LL_ADC_GetCommonPathInternalCh>
 80030ee:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80030f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030f8:	4b28      	ldr	r3, [pc, #160]	; (800319c <ADC_Enable+0x104>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	099b      	lsrs	r3, r3, #6
 80030fe:	4a28      	ldr	r2, [pc, #160]	; (80031a0 <ADC_Enable+0x108>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	099b      	lsrs	r3, r3, #6
 8003106:	1c5a      	adds	r2, r3, #1
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003112:	e002      	b.n	800311a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	3b01      	subs	r3, #1
 8003118:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1f9      	bne.n	8003114 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003120:	f7fe fee8 	bl	8001ef4 <HAL_GetTick>
 8003124:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003126:	e028      	b.n	800317a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4618      	mov	r0, r3
 800312e:	f7ff f883 	bl	8002238 <LL_ADC_IsEnabled>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d104      	bne.n	8003142 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7ff f867 	bl	8002210 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003142:	f7fe fed7 	bl	8001ef4 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d914      	bls.n	800317a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b01      	cmp	r3, #1
 800315c:	d00d      	beq.n	800317a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	f043 0210 	orr.w	r2, r3, #16
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	f043 0201 	orr.w	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e007      	b.n	800318a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d1cf      	bne.n	8003128 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3710      	adds	r7, #16
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	8000003f 	.word	0x8000003f
 8003198:	50040300 	.word	0x50040300
 800319c:	20000000 	.word	0x20000000
 80031a0:	053e2d63 	.word	0x053e2d63

080031a4 <LL_ADC_IsEnabled>:
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <LL_ADC_IsEnabled+0x18>
 80031b8:	2301      	movs	r3, #1
 80031ba:	e000      	b.n	80031be <LL_ADC_IsEnabled+0x1a>
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <LL_ADC_REG_IsConversionOngoing>:
{
 80031ca:	b480      	push	{r7}
 80031cc:	b083      	sub	sp, #12
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d101      	bne.n	80031e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80031f0:	b590      	push	{r4, r7, lr}
 80031f2:	b09f      	sub	sp, #124	; 0x7c
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003206:	2b01      	cmp	r3, #1
 8003208:	d101      	bne.n	800320e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800320a:	2302      	movs	r3, #2
 800320c:	e093      	b.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2201      	movs	r2, #1
 8003212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003216:	2300      	movs	r3, #0
 8003218:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800321a:	2300      	movs	r3, #0
 800321c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a47      	ldr	r2, [pc, #284]	; (8003340 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d102      	bne.n	800322e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003228:	4b46      	ldr	r3, [pc, #280]	; (8003344 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800322a:	60bb      	str	r3, [r7, #8]
 800322c:	e001      	b.n	8003232 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800322e:	2300      	movs	r3, #0
 8003230:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10b      	bne.n	8003250 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	f043 0220 	orr.w	r2, r3, #32
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e072      	b.n	8003336 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff ffb9 	bl	80031ca <LL_ADC_REG_IsConversionOngoing>
 8003258:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff ffb3 	bl	80031ca <LL_ADC_REG_IsConversionOngoing>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d154      	bne.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800326a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800326c:	2b00      	cmp	r3, #0
 800326e:	d151      	bne.n	8003314 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003270:	4b35      	ldr	r3, [pc, #212]	; (8003348 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003272:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d02c      	beq.n	80032d6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800327c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	6859      	ldr	r1, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800328e:	035b      	lsls	r3, r3, #13
 8003290:	430b      	orrs	r3, r1
 8003292:	431a      	orrs	r2, r3
 8003294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003296:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003298:	4829      	ldr	r0, [pc, #164]	; (8003340 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800329a:	f7ff ff83 	bl	80031a4 <LL_ADC_IsEnabled>
 800329e:	4604      	mov	r4, r0
 80032a0:	4828      	ldr	r0, [pc, #160]	; (8003344 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032a2:	f7ff ff7f 	bl	80031a4 <LL_ADC_IsEnabled>
 80032a6:	4603      	mov	r3, r0
 80032a8:	431c      	orrs	r4, r3
 80032aa:	4828      	ldr	r0, [pc, #160]	; (800334c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80032ac:	f7ff ff7a 	bl	80031a4 <LL_ADC_IsEnabled>
 80032b0:	4603      	mov	r3, r0
 80032b2:	4323      	orrs	r3, r4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d137      	bne.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80032b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032c0:	f023 030f 	bic.w	r3, r3, #15
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	6811      	ldr	r1, [r2, #0]
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	6892      	ldr	r2, [r2, #8]
 80032cc:	430a      	orrs	r2, r1
 80032ce:	431a      	orrs	r2, r3
 80032d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d2:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032d4:	e028      	b.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80032d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032e2:	4817      	ldr	r0, [pc, #92]	; (8003340 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032e4:	f7ff ff5e 	bl	80031a4 <LL_ADC_IsEnabled>
 80032e8:	4604      	mov	r4, r0
 80032ea:	4816      	ldr	r0, [pc, #88]	; (8003344 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032ec:	f7ff ff5a 	bl	80031a4 <LL_ADC_IsEnabled>
 80032f0:	4603      	mov	r3, r0
 80032f2:	431c      	orrs	r4, r3
 80032f4:	4815      	ldr	r0, [pc, #84]	; (800334c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80032f6:	f7ff ff55 	bl	80031a4 <LL_ADC_IsEnabled>
 80032fa:	4603      	mov	r3, r0
 80032fc:	4323      	orrs	r3, r4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d112      	bne.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800330a:	f023 030f 	bic.w	r3, r3, #15
 800330e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003310:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003312:	e009      	b.n	8003328 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003318:	f043 0220 	orr.w	r2, r3, #32
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003326:	e000      	b.n	800332a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003328:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003332:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003336:	4618      	mov	r0, r3
 8003338:	377c      	adds	r7, #124	; 0x7c
 800333a:	46bd      	mov	sp, r7
 800333c:	bd90      	pop	{r4, r7, pc}
 800333e:	bf00      	nop
 8003340:	50040000 	.word	0x50040000
 8003344:	50040100 	.word	0x50040100
 8003348:	50040300 	.word	0x50040300
 800334c:	50040200 	.word	0x50040200

08003350 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003360:	4b0c      	ldr	r3, [pc, #48]	; (8003394 <__NVIC_SetPriorityGrouping+0x44>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800336c:	4013      	ands	r3, r2
 800336e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003378:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800337c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003382:	4a04      	ldr	r2, [pc, #16]	; (8003394 <__NVIC_SetPriorityGrouping+0x44>)
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	60d3      	str	r3, [r2, #12]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800339c:	4b04      	ldr	r3, [pc, #16]	; (80033b0 <__NVIC_GetPriorityGrouping+0x18>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	0a1b      	lsrs	r3, r3, #8
 80033a2:	f003 0307 	and.w	r3, r3, #7
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	e000ed00 	.word	0xe000ed00

080033b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	4603      	mov	r3, r0
 80033bc:	6039      	str	r1, [r7, #0]
 80033be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	db0a      	blt.n	80033de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	490c      	ldr	r1, [pc, #48]	; (8003400 <__NVIC_SetPriority+0x4c>)
 80033ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	440b      	add	r3, r1
 80033d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033dc:	e00a      	b.n	80033f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	b2da      	uxtb	r2, r3
 80033e2:	4908      	ldr	r1, [pc, #32]	; (8003404 <__NVIC_SetPriority+0x50>)
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	3b04      	subs	r3, #4
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	b2d2      	uxtb	r2, r2
 80033f0:	440b      	add	r3, r1
 80033f2:	761a      	strb	r2, [r3, #24]
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000e100 	.word	0xe000e100
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003408:	b480      	push	{r7}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f1c3 0307 	rsb	r3, r3, #7
 8003422:	2b04      	cmp	r3, #4
 8003424:	bf28      	it	cs
 8003426:	2304      	movcs	r3, #4
 8003428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3304      	adds	r3, #4
 800342e:	2b06      	cmp	r3, #6
 8003430:	d902      	bls.n	8003438 <NVIC_EncodePriority+0x30>
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	3b03      	subs	r3, #3
 8003436:	e000      	b.n	800343a <NVIC_EncodePriority+0x32>
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800343c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	43da      	mvns	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	401a      	ands	r2, r3
 800344c:	697b      	ldr	r3, [r7, #20]
 800344e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003450:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	43d9      	mvns	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003460:	4313      	orrs	r3, r2
         );
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	; 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
	...

08003470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	3b01      	subs	r3, #1
 800347c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003480:	d301      	bcc.n	8003486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003482:	2301      	movs	r3, #1
 8003484:	e00f      	b.n	80034a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003486:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <SysTick_Config+0x40>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3b01      	subs	r3, #1
 800348c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800348e:	210f      	movs	r1, #15
 8003490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003494:	f7ff ff8e 	bl	80033b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003498:	4b05      	ldr	r3, [pc, #20]	; (80034b0 <SysTick_Config+0x40>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800349e:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <SysTick_Config+0x40>)
 80034a0:	2207      	movs	r2, #7
 80034a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	e000e010 	.word	0xe000e010

080034b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ff47 	bl	8003350 <__NVIC_SetPriorityGrouping>
}
 80034c2:	bf00      	nop
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	4603      	mov	r3, r0
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
 80034d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034d8:	2300      	movs	r3, #0
 80034da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034dc:	f7ff ff5c 	bl	8003398 <__NVIC_GetPriorityGrouping>
 80034e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	6978      	ldr	r0, [r7, #20]
 80034e8:	f7ff ff8e 	bl	8003408 <NVIC_EncodePriority>
 80034ec:	4602      	mov	r2, r0
 80034ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff ff5d 	bl	80033b4 <__NVIC_SetPriority>
}
 80034fa:	bf00      	nop
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b082      	sub	sp, #8
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f7ff ffb0 	bl	8003470 <SysTick_Config>
 8003510:	4603      	mov	r3, r0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800352a:	e17f      	b.n	800382c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	2101      	movs	r1, #1
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	fa01 f303 	lsl.w	r3, r1, r3
 8003538:	4013      	ands	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 8171 	beq.w	8003826 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	2b01      	cmp	r3, #1
 800354e:	d005      	beq.n	800355c <HAL_GPIO_Init+0x40>
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d130      	bne.n	80035be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	2203      	movs	r2, #3
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	43db      	mvns	r3, r3
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	4013      	ands	r3, r2
 8003572:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003592:	2201      	movs	r2, #1
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	fa02 f303 	lsl.w	r3, r2, r3
 800359a:	43db      	mvns	r3, r3
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	4013      	ands	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 0201 	and.w	r2, r3, #1
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	2b03      	cmp	r3, #3
 80035c8:	d118      	bne.n	80035fc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80035d0:	2201      	movs	r2, #1
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	43db      	mvns	r3, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	08db      	lsrs	r3, r3, #3
 80035e6:	f003 0201 	and.w	r2, r3, #1
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b03      	cmp	r3, #3
 8003606:	d017      	beq.n	8003638 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2203      	movs	r2, #3
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689a      	ldr	r2, [r3, #8]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f003 0303 	and.w	r3, r3, #3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d123      	bne.n	800368c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	08da      	lsrs	r2, r3, #3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3208      	adds	r2, #8
 800364c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003650:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	220f      	movs	r2, #15
 800365c:	fa02 f303 	lsl.w	r3, r2, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	fa02 f303 	lsl.w	r3, r2, r3
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	08da      	lsrs	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3208      	adds	r2, #8
 8003686:	6939      	ldr	r1, [r7, #16]
 8003688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	2203      	movs	r2, #3
 8003698:	fa02 f303 	lsl.w	r3, r2, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	693a      	ldr	r2, [r7, #16]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f003 0203 	and.w	r2, r3, #3
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 80ac 	beq.w	8003826 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036ce:	4b5f      	ldr	r3, [pc, #380]	; (800384c <HAL_GPIO_Init+0x330>)
 80036d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036d2:	4a5e      	ldr	r2, [pc, #376]	; (800384c <HAL_GPIO_Init+0x330>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6613      	str	r3, [r2, #96]	; 0x60
 80036da:	4b5c      	ldr	r3, [pc, #368]	; (800384c <HAL_GPIO_Init+0x330>)
 80036dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036de:	f003 0301 	and.w	r3, r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036e6:	4a5a      	ldr	r2, [pc, #360]	; (8003850 <HAL_GPIO_Init+0x334>)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	089b      	lsrs	r3, r3, #2
 80036ec:	3302      	adds	r3, #2
 80036ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	220f      	movs	r2, #15
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003710:	d025      	beq.n	800375e <HAL_GPIO_Init+0x242>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a4f      	ldr	r2, [pc, #316]	; (8003854 <HAL_GPIO_Init+0x338>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01f      	beq.n	800375a <HAL_GPIO_Init+0x23e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a4e      	ldr	r2, [pc, #312]	; (8003858 <HAL_GPIO_Init+0x33c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d019      	beq.n	8003756 <HAL_GPIO_Init+0x23a>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a4d      	ldr	r2, [pc, #308]	; (800385c <HAL_GPIO_Init+0x340>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d013      	beq.n	8003752 <HAL_GPIO_Init+0x236>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a4c      	ldr	r2, [pc, #304]	; (8003860 <HAL_GPIO_Init+0x344>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d00d      	beq.n	800374e <HAL_GPIO_Init+0x232>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a4b      	ldr	r2, [pc, #300]	; (8003864 <HAL_GPIO_Init+0x348>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d007      	beq.n	800374a <HAL_GPIO_Init+0x22e>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a4a      	ldr	r2, [pc, #296]	; (8003868 <HAL_GPIO_Init+0x34c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d101      	bne.n	8003746 <HAL_GPIO_Init+0x22a>
 8003742:	2306      	movs	r3, #6
 8003744:	e00c      	b.n	8003760 <HAL_GPIO_Init+0x244>
 8003746:	2307      	movs	r3, #7
 8003748:	e00a      	b.n	8003760 <HAL_GPIO_Init+0x244>
 800374a:	2305      	movs	r3, #5
 800374c:	e008      	b.n	8003760 <HAL_GPIO_Init+0x244>
 800374e:	2304      	movs	r3, #4
 8003750:	e006      	b.n	8003760 <HAL_GPIO_Init+0x244>
 8003752:	2303      	movs	r3, #3
 8003754:	e004      	b.n	8003760 <HAL_GPIO_Init+0x244>
 8003756:	2302      	movs	r3, #2
 8003758:	e002      	b.n	8003760 <HAL_GPIO_Init+0x244>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <HAL_GPIO_Init+0x244>
 800375e:	2300      	movs	r3, #0
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	f002 0203 	and.w	r2, r2, #3
 8003766:	0092      	lsls	r2, r2, #2
 8003768:	4093      	lsls	r3, r2
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003770:	4937      	ldr	r1, [pc, #220]	; (8003850 <HAL_GPIO_Init+0x334>)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	089b      	lsrs	r3, r3, #2
 8003776:	3302      	adds	r3, #2
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800377e:	4b3b      	ldr	r3, [pc, #236]	; (800386c <HAL_GPIO_Init+0x350>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	43db      	mvns	r3, r3
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	4013      	ands	r3, r2
 800378c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800379a:	693a      	ldr	r2, [r7, #16]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037a2:	4a32      	ldr	r2, [pc, #200]	; (800386c <HAL_GPIO_Init+0x350>)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037a8:	4b30      	ldr	r3, [pc, #192]	; (800386c <HAL_GPIO_Init+0x350>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4013      	ands	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037cc:	4a27      	ldr	r2, [pc, #156]	; (800386c <HAL_GPIO_Init+0x350>)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037d2:	4b26      	ldr	r3, [pc, #152]	; (800386c <HAL_GPIO_Init+0x350>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	43db      	mvns	r3, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037f6:	4a1d      	ldr	r2, [pc, #116]	; (800386c <HAL_GPIO_Init+0x350>)
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <HAL_GPIO_Init+0x350>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	43db      	mvns	r3, r3
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4013      	ands	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003820:	4a12      	ldr	r2, [pc, #72]	; (800386c <HAL_GPIO_Init+0x350>)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3301      	adds	r3, #1
 800382a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	f47f ae78 	bne.w	800352c <HAL_GPIO_Init+0x10>
  }
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	371c      	adds	r7, #28
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40021000 	.word	0x40021000
 8003850:	40010000 	.word	0x40010000
 8003854:	48000400 	.word	0x48000400
 8003858:	48000800 	.word	0x48000800
 800385c:	48000c00 	.word	0x48000c00
 8003860:	48001000 	.word	0x48001000
 8003864:	48001400 	.word	0x48001400
 8003868:	48001800 	.word	0x48001800
 800386c:	40010400 	.word	0x40010400

08003870 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	460b      	mov	r3, r1
 800387a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	691a      	ldr	r2, [r3, #16]
 8003880:	887b      	ldrh	r3, [r7, #2]
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
 800388c:	e001      	b.n	8003892 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800388e:	2300      	movs	r3, #0
 8003890:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003892:	7bfb      	ldrb	r3, [r7, #15]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	807b      	strh	r3, [r7, #2]
 80038ac:	4613      	mov	r3, r2
 80038ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038b0:	787b      	ldrb	r3, [r7, #1]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038b6:	887a      	ldrh	r2, [r7, #2]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038bc:	e002      	b.n	80038c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038be:	887a      	ldrh	r2, [r7, #2]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038d4:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038dc:	4618      	mov	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40007000 	.word	0x40007000

080038ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b085      	sub	sp, #20
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038fa:	d130      	bne.n	800395e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038fc:	4b23      	ldr	r3, [pc, #140]	; (800398c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003908:	d038      	beq.n	800397c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800390a:	4b20      	ldr	r3, [pc, #128]	; (800398c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003912:	4a1e      	ldr	r2, [pc, #120]	; (800398c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003914:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003918:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800391a:	4b1d      	ldr	r3, [pc, #116]	; (8003990 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2232      	movs	r2, #50	; 0x32
 8003920:	fb02 f303 	mul.w	r3, r2, r3
 8003924:	4a1b      	ldr	r2, [pc, #108]	; (8003994 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003926:	fba2 2303 	umull	r2, r3, r2, r3
 800392a:	0c9b      	lsrs	r3, r3, #18
 800392c:	3301      	adds	r3, #1
 800392e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003930:	e002      	b.n	8003938 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	3b01      	subs	r3, #1
 8003936:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003938:	4b14      	ldr	r3, [pc, #80]	; (800398c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003944:	d102      	bne.n	800394c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1f2      	bne.n	8003932 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800394c:	4b0f      	ldr	r3, [pc, #60]	; (800398c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003958:	d110      	bne.n	800397c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e00f      	b.n	800397e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800395e:	4b0b      	ldr	r3, [pc, #44]	; (800398c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800396a:	d007      	beq.n	800397c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800396c:	4b07      	ldr	r3, [pc, #28]	; (800398c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003974:	4a05      	ldr	r2, [pc, #20]	; (800398c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800397a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	40007000 	.word	0x40007000
 8003990:	20000000 	.word	0x20000000
 8003994:	431bde83 	.word	0x431bde83

08003998 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b088      	sub	sp, #32
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e3ca      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039aa:	4b97      	ldr	r3, [pc, #604]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b4:	4b94      	ldr	r3, [pc, #592]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0310 	and.w	r3, r3, #16
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 80e4 	beq.w	8003b94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d007      	beq.n	80039e2 <HAL_RCC_OscConfig+0x4a>
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b0c      	cmp	r3, #12
 80039d6:	f040 808b 	bne.w	8003af0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	f040 8087 	bne.w	8003af0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039e2:	4b89      	ldr	r3, [pc, #548]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d005      	beq.n	80039fa <HAL_RCC_OscConfig+0x62>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e3a2      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1a      	ldr	r2, [r3, #32]
 80039fe:	4b82      	ldr	r3, [pc, #520]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d004      	beq.n	8003a14 <HAL_RCC_OscConfig+0x7c>
 8003a0a:	4b7f      	ldr	r3, [pc, #508]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a12:	e005      	b.n	8003a20 <HAL_RCC_OscConfig+0x88>
 8003a14:	4b7c      	ldr	r3, [pc, #496]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a1a:	091b      	lsrs	r3, r3, #4
 8003a1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d223      	bcs.n	8003a6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	4618      	mov	r0, r3
 8003a2a:	f000 fd55 	bl	80044d8 <RCC_SetFlashLatencyFromMSIRange>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e383      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a38:	4b73      	ldr	r3, [pc, #460]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a72      	ldr	r2, [pc, #456]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003a3e:	f043 0308 	orr.w	r3, r3, #8
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	4b70      	ldr	r3, [pc, #448]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	496d      	ldr	r1, [pc, #436]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a56:	4b6c      	ldr	r3, [pc, #432]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	4968      	ldr	r1, [pc, #416]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]
 8003a6a:	e025      	b.n	8003ab8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a6c:	4b66      	ldr	r3, [pc, #408]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a65      	ldr	r2, [pc, #404]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003a72:	f043 0308 	orr.w	r3, r3, #8
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b63      	ldr	r3, [pc, #396]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	4960      	ldr	r1, [pc, #384]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a8a:	4b5f      	ldr	r3, [pc, #380]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	021b      	lsls	r3, r3, #8
 8003a98:	495b      	ldr	r1, [pc, #364]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fd15 	bl	80044d8 <RCC_SetFlashLatencyFromMSIRange>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e343      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ab8:	f000 fc4a 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 8003abc:	4602      	mov	r2, r0
 8003abe:	4b52      	ldr	r3, [pc, #328]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 030f 	and.w	r3, r3, #15
 8003ac8:	4950      	ldr	r1, [pc, #320]	; (8003c0c <HAL_RCC_OscConfig+0x274>)
 8003aca:	5ccb      	ldrb	r3, [r1, r3]
 8003acc:	f003 031f 	and.w	r3, r3, #31
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad4:	4a4e      	ldr	r2, [pc, #312]	; (8003c10 <HAL_RCC_OscConfig+0x278>)
 8003ad6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ad8:	4b4e      	ldr	r3, [pc, #312]	; (8003c14 <HAL_RCC_OscConfig+0x27c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fe f9b9 	bl	8001e54 <HAL_InitTick>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d052      	beq.n	8003b92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
 8003aee:	e327      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d032      	beq.n	8003b5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003af8:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a42      	ldr	r2, [pc, #264]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b04:	f7fe f9f6 	bl	8001ef4 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b0c:	f7fe f9f2 	bl	8001ef4 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e310      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b1e:	4b3a      	ldr	r3, [pc, #232]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b2a:	4b37      	ldr	r3, [pc, #220]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a36      	ldr	r2, [pc, #216]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003b30:	f043 0308 	orr.w	r3, r3, #8
 8003b34:	6013      	str	r3, [r2, #0]
 8003b36:	4b34      	ldr	r3, [pc, #208]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	4931      	ldr	r1, [pc, #196]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b48:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	492c      	ldr	r1, [pc, #176]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	604b      	str	r3, [r1, #4]
 8003b5c:	e01a      	b.n	8003b94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b5e:	4b2a      	ldr	r3, [pc, #168]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a29      	ldr	r2, [pc, #164]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b6a:	f7fe f9c3 	bl	8001ef4 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b72:	f7fe f9bf 	bl	8001ef4 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e2dd      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b84:	4b20      	ldr	r3, [pc, #128]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0302 	and.w	r3, r3, #2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <HAL_RCC_OscConfig+0x1da>
 8003b90:	e000      	b.n	8003b94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d074      	beq.n	8003c8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d005      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x21a>
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2b0c      	cmp	r3, #12
 8003baa:	d10e      	bne.n	8003bca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d10b      	bne.n	8003bca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb2:	4b15      	ldr	r3, [pc, #84]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d064      	beq.n	8003c88 <HAL_RCC_OscConfig+0x2f0>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d160      	bne.n	8003c88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e2ba      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd2:	d106      	bne.n	8003be2 <HAL_RCC_OscConfig+0x24a>
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a0b      	ldr	r2, [pc, #44]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003bda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	e026      	b.n	8003c30 <HAL_RCC_OscConfig+0x298>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bea:	d115      	bne.n	8003c18 <HAL_RCC_OscConfig+0x280>
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a05      	ldr	r2, [pc, #20]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003bf2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a02      	ldr	r2, [pc, #8]	; (8003c08 <HAL_RCC_OscConfig+0x270>)
 8003bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	e014      	b.n	8003c30 <HAL_RCC_OscConfig+0x298>
 8003c06:	bf00      	nop
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	0800b87c 	.word	0x0800b87c
 8003c10:	20000000 	.word	0x20000000
 8003c14:	20000004 	.word	0x20000004
 8003c18:	4ba0      	ldr	r3, [pc, #640]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a9f      	ldr	r2, [pc, #636]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c22:	6013      	str	r3, [r2, #0]
 8003c24:	4b9d      	ldr	r3, [pc, #628]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a9c      	ldr	r2, [pc, #624]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d013      	beq.n	8003c60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7fe f95c 	bl	8001ef4 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c40:	f7fe f958 	bl	8001ef4 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b64      	cmp	r3, #100	; 0x64
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e276      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c52:	4b92      	ldr	r3, [pc, #584]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0x2a8>
 8003c5e:	e014      	b.n	8003c8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c60:	f7fe f948 	bl	8001ef4 <HAL_GetTick>
 8003c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c66:	e008      	b.n	8003c7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c68:	f7fe f944 	bl	8001ef4 <HAL_GetTick>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1ad3      	subs	r3, r2, r3
 8003c72:	2b64      	cmp	r3, #100	; 0x64
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e262      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c7a:	4b88      	ldr	r3, [pc, #544]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f0      	bne.n	8003c68 <HAL_RCC_OscConfig+0x2d0>
 8003c86:	e000      	b.n	8003c8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d060      	beq.n	8003d58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d005      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x310>
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	2b0c      	cmp	r3, #12
 8003ca0:	d119      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d116      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ca8:	4b7c      	ldr	r3, [pc, #496]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d005      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x328>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d101      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e23f      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc0:	4b76      	ldr	r3, [pc, #472]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	691b      	ldr	r3, [r3, #16]
 8003ccc:	061b      	lsls	r3, r3, #24
 8003cce:	4973      	ldr	r1, [pc, #460]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cd4:	e040      	b.n	8003d58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d023      	beq.n	8003d26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cde:	4b6f      	ldr	r3, [pc, #444]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a6e      	ldr	r2, [pc, #440]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003ce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cea:	f7fe f903 	bl	8001ef4 <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf0:	e008      	b.n	8003d04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cf2:	f7fe f8ff 	bl	8001ef4 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d901      	bls.n	8003d04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e21d      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d04:	4b65      	ldr	r3, [pc, #404]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d0f0      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d10:	4b62      	ldr	r3, [pc, #392]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	061b      	lsls	r3, r3, #24
 8003d1e:	495f      	ldr	r1, [pc, #380]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
 8003d24:	e018      	b.n	8003d58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d26:	4b5d      	ldr	r3, [pc, #372]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a5c      	ldr	r2, [pc, #368]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003d2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d32:	f7fe f8df 	bl	8001ef4 <HAL_GetTick>
 8003d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d38:	e008      	b.n	8003d4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d3a:	f7fe f8db 	bl	8001ef4 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e1f9      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d4c:	4b53      	ldr	r3, [pc, #332]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1f0      	bne.n	8003d3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d03c      	beq.n	8003dde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01c      	beq.n	8003da6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d6c:	4b4b      	ldr	r3, [pc, #300]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d72:	4a4a      	ldr	r2, [pc, #296]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003d74:	f043 0301 	orr.w	r3, r3, #1
 8003d78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7c:	f7fe f8ba 	bl	8001ef4 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d84:	f7fe f8b6 	bl	8001ef4 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e1d4      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d96:	4b41      	ldr	r3, [pc, #260]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d9c:	f003 0302 	and.w	r3, r3, #2
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0ef      	beq.n	8003d84 <HAL_RCC_OscConfig+0x3ec>
 8003da4:	e01b      	b.n	8003dde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003da6:	4b3d      	ldr	r3, [pc, #244]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dac:	4a3b      	ldr	r2, [pc, #236]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db6:	f7fe f89d 	bl	8001ef4 <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7fe f899 	bl	8001ef4 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e1b7      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dd0:	4b32      	ldr	r3, [pc, #200]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1ef      	bne.n	8003dbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80a6 	beq.w	8003f38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dec:	2300      	movs	r3, #0
 8003dee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003df0:	4b2a      	ldr	r3, [pc, #168]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10d      	bne.n	8003e18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dfc:	4b27      	ldr	r3, [pc, #156]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e00:	4a26      	ldr	r2, [pc, #152]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003e02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e06:	6593      	str	r3, [r2, #88]	; 0x58
 8003e08:	4b24      	ldr	r3, [pc, #144]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e10:	60bb      	str	r3, [r7, #8]
 8003e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e14:	2301      	movs	r3, #1
 8003e16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e18:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <HAL_RCC_OscConfig+0x508>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d118      	bne.n	8003e56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e24:	4b1e      	ldr	r3, [pc, #120]	; (8003ea0 <HAL_RCC_OscConfig+0x508>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a1d      	ldr	r2, [pc, #116]	; (8003ea0 <HAL_RCC_OscConfig+0x508>)
 8003e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e30:	f7fe f860 	bl	8001ef4 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e38:	f7fe f85c 	bl	8001ef4 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e17a      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e4a:	4b15      	ldr	r3, [pc, #84]	; (8003ea0 <HAL_RCC_OscConfig+0x508>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d0f0      	beq.n	8003e38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d108      	bne.n	8003e70 <HAL_RCC_OscConfig+0x4d8>
 8003e5e:	4b0f      	ldr	r3, [pc, #60]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	4a0d      	ldr	r2, [pc, #52]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003e66:	f043 0301 	orr.w	r3, r3, #1
 8003e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e6e:	e029      	b.n	8003ec4 <HAL_RCC_OscConfig+0x52c>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	2b05      	cmp	r3, #5
 8003e76:	d115      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x50c>
 8003e78:	4b08      	ldr	r3, [pc, #32]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	4a07      	ldr	r2, [pc, #28]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003e80:	f043 0304 	orr.w	r3, r3, #4
 8003e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e88:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8e:	4a03      	ldr	r2, [pc, #12]	; (8003e9c <HAL_RCC_OscConfig+0x504>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e98:	e014      	b.n	8003ec4 <HAL_RCC_OscConfig+0x52c>
 8003e9a:	bf00      	nop
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	40007000 	.word	0x40007000
 8003ea4:	4b9c      	ldr	r3, [pc, #624]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8003ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eaa:	4a9b      	ldr	r2, [pc, #620]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8003eac:	f023 0301 	bic.w	r3, r3, #1
 8003eb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eb4:	4b98      	ldr	r3, [pc, #608]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8003eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eba:	4a97      	ldr	r2, [pc, #604]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8003ebc:	f023 0304 	bic.w	r3, r3, #4
 8003ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d016      	beq.n	8003efa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7fe f812 	bl	8001ef4 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ed2:	e00a      	b.n	8003eea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed4:	f7fe f80e 	bl	8001ef4 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e12a      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eea:	4b8b      	ldr	r3, [pc, #556]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8003eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0ed      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x53c>
 8003ef8:	e015      	b.n	8003f26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efa:	f7fd fffb 	bl	8001ef4 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f00:	e00a      	b.n	8003f18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f02:	f7fd fff7 	bl	8001ef4 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e113      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f18:	4b7f      	ldr	r3, [pc, #508]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1ed      	bne.n	8003f02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f26:	7ffb      	ldrb	r3, [r7, #31]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d105      	bne.n	8003f38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f2c:	4b7a      	ldr	r3, [pc, #488]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f30:	4a79      	ldr	r2, [pc, #484]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8003f32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f36:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 80fe 	beq.w	800413e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	f040 80d0 	bne.w	80040ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f4c:	4b72      	ldr	r3, [pc, #456]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f003 0203 	and.w	r2, r3, #3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d130      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d127      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d11f      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f8c:	2a07      	cmp	r2, #7
 8003f8e:	bf14      	ite	ne
 8003f90:	2201      	movne	r2, #1
 8003f92:	2200      	moveq	r2, #0
 8003f94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d113      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa4:	085b      	lsrs	r3, r3, #1
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d109      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb8:	085b      	lsrs	r3, r3, #1
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d06e      	beq.n	80040a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	2b0c      	cmp	r3, #12
 8003fc6:	d069      	beq.n	800409c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fc8:	4b53      	ldr	r3, [pc, #332]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d105      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fd4:	4b50      	ldr	r3, [pc, #320]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e0ad      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fe4:	4b4c      	ldr	r3, [pc, #304]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a4b      	ldr	r2, [pc, #300]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8003fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ff0:	f7fd ff80 	bl	8001ef4 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff8:	f7fd ff7c 	bl	8001ef4 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e09a      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800400a:	4b43      	ldr	r3, [pc, #268]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004016:	4b40      	ldr	r3, [pc, #256]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8004018:	68da      	ldr	r2, [r3, #12]
 800401a:	4b40      	ldr	r3, [pc, #256]	; (800411c <HAL_RCC_OscConfig+0x784>)
 800401c:	4013      	ands	r3, r2
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004026:	3a01      	subs	r2, #1
 8004028:	0112      	lsls	r2, r2, #4
 800402a:	4311      	orrs	r1, r2
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004030:	0212      	lsls	r2, r2, #8
 8004032:	4311      	orrs	r1, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004038:	0852      	lsrs	r2, r2, #1
 800403a:	3a01      	subs	r2, #1
 800403c:	0552      	lsls	r2, r2, #21
 800403e:	4311      	orrs	r1, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004044:	0852      	lsrs	r2, r2, #1
 8004046:	3a01      	subs	r2, #1
 8004048:	0652      	lsls	r2, r2, #25
 800404a:	4311      	orrs	r1, r2
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004050:	0912      	lsrs	r2, r2, #4
 8004052:	0452      	lsls	r2, r2, #17
 8004054:	430a      	orrs	r2, r1
 8004056:	4930      	ldr	r1, [pc, #192]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8004058:	4313      	orrs	r3, r2
 800405a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800405c:	4b2e      	ldr	r3, [pc, #184]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a2d      	ldr	r2, [pc, #180]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8004062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004066:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004068:	4b2b      	ldr	r3, [pc, #172]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a2a      	ldr	r2, [pc, #168]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 800406e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004072:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004074:	f7fd ff3e 	bl	8001ef4 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800407c:	f7fd ff3a 	bl	8001ef4 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e058      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800408e:	4b22      	ldr	r3, [pc, #136]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800409a:	e050      	b.n	800413e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e04f      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a0:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d148      	bne.n	800413e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040ac:	4b1a      	ldr	r3, [pc, #104]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a19      	ldr	r2, [pc, #100]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 80040b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040b8:	4b17      	ldr	r3, [pc, #92]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4a16      	ldr	r2, [pc, #88]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 80040be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040c4:	f7fd ff16 	bl	8001ef4 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fd ff12 	bl	8001ef4 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e030      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040de:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0x734>
 80040ea:	e028      	b.n	800413e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	2b0c      	cmp	r3, #12
 80040f0:	d023      	beq.n	800413a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f2:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a08      	ldr	r2, [pc, #32]	; (8004118 <HAL_RCC_OscConfig+0x780>)
 80040f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fe:	f7fd fef9 	bl	8001ef4 <HAL_GetTick>
 8004102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004104:	e00c      	b.n	8004120 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004106:	f7fd fef5 	bl	8001ef4 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b02      	cmp	r3, #2
 8004112:	d905      	bls.n	8004120 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e013      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
 8004118:	40021000 	.word	0x40021000
 800411c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004120:	4b09      	ldr	r3, [pc, #36]	; (8004148 <HAL_RCC_OscConfig+0x7b0>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1ec      	bne.n	8004106 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <HAL_RCC_OscConfig+0x7b0>)
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	4905      	ldr	r1, [pc, #20]	; (8004148 <HAL_RCC_OscConfig+0x7b0>)
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_RCC_OscConfig+0x7b4>)
 8004134:	4013      	ands	r3, r2
 8004136:	60cb      	str	r3, [r1, #12]
 8004138:	e001      	b.n	800413e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3720      	adds	r7, #32
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40021000 	.word	0x40021000
 800414c:	feeefffc 	.word	0xfeeefffc

08004150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0e7      	b.n	8004334 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004164:	4b75      	ldr	r3, [pc, #468]	; (800433c <HAL_RCC_ClockConfig+0x1ec>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d910      	bls.n	8004194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b72      	ldr	r3, [pc, #456]	; (800433c <HAL_RCC_ClockConfig+0x1ec>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 0207 	bic.w	r2, r3, #7
 800417a:	4970      	ldr	r1, [pc, #448]	; (800433c <HAL_RCC_ClockConfig+0x1ec>)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b6e      	ldr	r3, [pc, #440]	; (800433c <HAL_RCC_ClockConfig+0x1ec>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e0cf      	b.n	8004334 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d010      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689a      	ldr	r2, [r3, #8]
 80041a4:	4b66      	ldr	r3, [pc, #408]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d908      	bls.n	80041c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b0:	4b63      	ldr	r3, [pc, #396]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	4960      	ldr	r1, [pc, #384]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d04c      	beq.n	8004268 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	2b03      	cmp	r3, #3
 80041d4:	d107      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041d6:	4b5a      	ldr	r3, [pc, #360]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d121      	bne.n	8004226 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e0a6      	b.n	8004334 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041ee:	4b54      	ldr	r3, [pc, #336]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d115      	bne.n	8004226 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e09a      	b.n	8004334 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d107      	bne.n	8004216 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004206:	4b4e      	ldr	r3, [pc, #312]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d109      	bne.n	8004226 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e08e      	b.n	8004334 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004216:	4b4a      	ldr	r3, [pc, #296]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e086      	b.n	8004334 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004226:	4b46      	ldr	r3, [pc, #280]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f023 0203 	bic.w	r2, r3, #3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	4943      	ldr	r1, [pc, #268]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 8004234:	4313      	orrs	r3, r2
 8004236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004238:	f7fd fe5c 	bl	8001ef4 <HAL_GetTick>
 800423c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423e:	e00a      	b.n	8004256 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004240:	f7fd fe58 	bl	8001ef4 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	f241 3288 	movw	r2, #5000	; 0x1388
 800424e:	4293      	cmp	r3, r2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e06e      	b.n	8004334 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004256:	4b3a      	ldr	r3, [pc, #232]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 020c 	and.w	r2, r3, #12
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	429a      	cmp	r2, r3
 8004266:	d1eb      	bne.n	8004240 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d010      	beq.n	8004296 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	4b31      	ldr	r3, [pc, #196]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004280:	429a      	cmp	r2, r3
 8004282:	d208      	bcs.n	8004296 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004284:	4b2e      	ldr	r3, [pc, #184]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	492b      	ldr	r1, [pc, #172]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004296:	4b29      	ldr	r3, [pc, #164]	; (800433c <HAL_RCC_ClockConfig+0x1ec>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d210      	bcs.n	80042c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a4:	4b25      	ldr	r3, [pc, #148]	; (800433c <HAL_RCC_ClockConfig+0x1ec>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f023 0207 	bic.w	r2, r3, #7
 80042ac:	4923      	ldr	r1, [pc, #140]	; (800433c <HAL_RCC_ClockConfig+0x1ec>)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042b4:	4b21      	ldr	r3, [pc, #132]	; (800433c <HAL_RCC_ClockConfig+0x1ec>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d001      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e036      	b.n	8004334 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0304 	and.w	r3, r3, #4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d008      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042d2:	4b1b      	ldr	r3, [pc, #108]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	4918      	ldr	r1, [pc, #96]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d009      	beq.n	8004304 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042f0:	4b13      	ldr	r3, [pc, #76]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	00db      	lsls	r3, r3, #3
 80042fe:	4910      	ldr	r1, [pc, #64]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 8004300:	4313      	orrs	r3, r2
 8004302:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004304:	f000 f824 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 8004308:	4602      	mov	r2, r0
 800430a:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <HAL_RCC_ClockConfig+0x1f0>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	091b      	lsrs	r3, r3, #4
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	490b      	ldr	r1, [pc, #44]	; (8004344 <HAL_RCC_ClockConfig+0x1f4>)
 8004316:	5ccb      	ldrb	r3, [r1, r3]
 8004318:	f003 031f 	and.w	r3, r3, #31
 800431c:	fa22 f303 	lsr.w	r3, r2, r3
 8004320:	4a09      	ldr	r2, [pc, #36]	; (8004348 <HAL_RCC_ClockConfig+0x1f8>)
 8004322:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004324:	4b09      	ldr	r3, [pc, #36]	; (800434c <HAL_RCC_ClockConfig+0x1fc>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7fd fd93 	bl	8001e54 <HAL_InitTick>
 800432e:	4603      	mov	r3, r0
 8004330:	72fb      	strb	r3, [r7, #11]

  return status;
 8004332:	7afb      	ldrb	r3, [r7, #11]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	40022000 	.word	0x40022000
 8004340:	40021000 	.word	0x40021000
 8004344:	0800b87c 	.word	0x0800b87c
 8004348:	20000000 	.word	0x20000000
 800434c:	20000004 	.word	0x20000004

08004350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004350:	b480      	push	{r7}
 8004352:	b089      	sub	sp, #36	; 0x24
 8004354:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
 800435a:	2300      	movs	r3, #0
 800435c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800435e:	4b3e      	ldr	r3, [pc, #248]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004368:	4b3b      	ldr	r3, [pc, #236]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d005      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x34>
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b0c      	cmp	r3, #12
 800437c:	d121      	bne.n	80043c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d11e      	bne.n	80043c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004384:	4b34      	ldr	r3, [pc, #208]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b00      	cmp	r3, #0
 800438e:	d107      	bne.n	80043a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004390:	4b31      	ldr	r3, [pc, #196]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 8004392:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004396:	0a1b      	lsrs	r3, r3, #8
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	e005      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043a0:	4b2d      	ldr	r3, [pc, #180]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	091b      	lsrs	r3, r3, #4
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043ac:	4a2b      	ldr	r2, [pc, #172]	; (800445c <HAL_RCC_GetSysClockFreq+0x10c>)
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d10d      	bne.n	80043d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043c0:	e00a      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d102      	bne.n	80043ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043c8:	4b25      	ldr	r3, [pc, #148]	; (8004460 <HAL_RCC_GetSysClockFreq+0x110>)
 80043ca:	61bb      	str	r3, [r7, #24]
 80043cc:	e004      	b.n	80043d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043d4:	4b23      	ldr	r3, [pc, #140]	; (8004464 <HAL_RCC_GetSysClockFreq+0x114>)
 80043d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	2b0c      	cmp	r3, #12
 80043dc:	d134      	bne.n	8004448 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043de:	4b1e      	ldr	r3, [pc, #120]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0303 	and.w	r3, r3, #3
 80043e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d003      	beq.n	80043f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b03      	cmp	r3, #3
 80043f2:	d003      	beq.n	80043fc <HAL_RCC_GetSysClockFreq+0xac>
 80043f4:	e005      	b.n	8004402 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043f6:	4b1a      	ldr	r3, [pc, #104]	; (8004460 <HAL_RCC_GetSysClockFreq+0x110>)
 80043f8:	617b      	str	r3, [r7, #20]
      break;
 80043fa:	e005      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043fc:	4b19      	ldr	r3, [pc, #100]	; (8004464 <HAL_RCC_GetSysClockFreq+0x114>)
 80043fe:	617b      	str	r3, [r7, #20]
      break;
 8004400:	e002      	b.n	8004408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	617b      	str	r3, [r7, #20]
      break;
 8004406:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004408:	4b13      	ldr	r3, [pc, #76]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	091b      	lsrs	r3, r3, #4
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	3301      	adds	r3, #1
 8004414:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004416:	4b10      	ldr	r3, [pc, #64]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	0a1b      	lsrs	r3, r3, #8
 800441c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004420:	697a      	ldr	r2, [r7, #20]
 8004422:	fb03 f202 	mul.w	r2, r3, r2
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800442e:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <HAL_RCC_GetSysClockFreq+0x108>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	0e5b      	lsrs	r3, r3, #25
 8004434:	f003 0303 	and.w	r3, r3, #3
 8004438:	3301      	adds	r3, #1
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	fbb2 f3f3 	udiv	r3, r2, r3
 8004446:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004448:	69bb      	ldr	r3, [r7, #24]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3724      	adds	r7, #36	; 0x24
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40021000 	.word	0x40021000
 800445c:	0800b894 	.word	0x0800b894
 8004460:	00f42400 	.word	0x00f42400
 8004464:	007a1200 	.word	0x007a1200

08004468 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004468:	b480      	push	{r7}
 800446a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800446c:	4b03      	ldr	r3, [pc, #12]	; (800447c <HAL_RCC_GetHCLKFreq+0x14>)
 800446e:	681b      	ldr	r3, [r3, #0]
}
 8004470:	4618      	mov	r0, r3
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000000 	.word	0x20000000

08004480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004484:	f7ff fff0 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 8004488:	4602      	mov	r2, r0
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	0a1b      	lsrs	r3, r3, #8
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	4904      	ldr	r1, [pc, #16]	; (80044a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004496:	5ccb      	ldrb	r3, [r1, r3]
 8004498:	f003 031f 	and.w	r3, r3, #31
 800449c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	40021000 	.word	0x40021000
 80044a8:	0800b88c 	.word	0x0800b88c

080044ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044b0:	f7ff ffda 	bl	8004468 <HAL_RCC_GetHCLKFreq>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4b06      	ldr	r3, [pc, #24]	; (80044d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	0adb      	lsrs	r3, r3, #11
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	4904      	ldr	r1, [pc, #16]	; (80044d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044c2:	5ccb      	ldrb	r3, [r1, r3]
 80044c4:	f003 031f 	and.w	r3, r3, #31
 80044c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40021000 	.word	0x40021000
 80044d4:	0800b88c 	.word	0x0800b88c

080044d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80044e0:	2300      	movs	r3, #0
 80044e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80044e4:	4b2a      	ldr	r3, [pc, #168]	; (8004590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80044f0:	f7ff f9ee 	bl	80038d0 <HAL_PWREx_GetVoltageRange>
 80044f4:	6178      	str	r0, [r7, #20]
 80044f6:	e014      	b.n	8004522 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80044f8:	4b25      	ldr	r3, [pc, #148]	; (8004590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fc:	4a24      	ldr	r2, [pc, #144]	; (8004590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004502:	6593      	str	r3, [r2, #88]	; 0x58
 8004504:	4b22      	ldr	r3, [pc, #136]	; (8004590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004510:	f7ff f9de 	bl	80038d0 <HAL_PWREx_GetVoltageRange>
 8004514:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004516:	4b1e      	ldr	r3, [pc, #120]	; (8004590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451a:	4a1d      	ldr	r2, [pc, #116]	; (8004590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800451c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004520:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004528:	d10b      	bne.n	8004542 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b80      	cmp	r3, #128	; 0x80
 800452e:	d919      	bls.n	8004564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2ba0      	cmp	r3, #160	; 0xa0
 8004534:	d902      	bls.n	800453c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004536:	2302      	movs	r3, #2
 8004538:	613b      	str	r3, [r7, #16]
 800453a:	e013      	b.n	8004564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800453c:	2301      	movs	r3, #1
 800453e:	613b      	str	r3, [r7, #16]
 8004540:	e010      	b.n	8004564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b80      	cmp	r3, #128	; 0x80
 8004546:	d902      	bls.n	800454e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004548:	2303      	movs	r3, #3
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	e00a      	b.n	8004564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b80      	cmp	r3, #128	; 0x80
 8004552:	d102      	bne.n	800455a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004554:	2302      	movs	r3, #2
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	e004      	b.n	8004564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b70      	cmp	r3, #112	; 0x70
 800455e:	d101      	bne.n	8004564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004560:	2301      	movs	r3, #1
 8004562:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004564:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f023 0207 	bic.w	r2, r3, #7
 800456c:	4909      	ldr	r1, [pc, #36]	; (8004594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004574:	4b07      	ldr	r3, [pc, #28]	; (8004594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	429a      	cmp	r2, r3
 8004580:	d001      	beq.n	8004586 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3718      	adds	r7, #24
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40021000 	.word	0x40021000
 8004594:	40022000 	.word	0x40022000

08004598 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045a0:	2300      	movs	r3, #0
 80045a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045a4:	2300      	movs	r3, #0
 80045a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d041      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045bc:	d02a      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80045be:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045c2:	d824      	bhi.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045c8:	d008      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045ce:	d81e      	bhi.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00a      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80045d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80045d8:	d010      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80045da:	e018      	b.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80045dc:	4b86      	ldr	r3, [pc, #536]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	4a85      	ldr	r2, [pc, #532]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045e8:	e015      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	3304      	adds	r3, #4
 80045ee:	2100      	movs	r1, #0
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fabb 	bl	8004b6c <RCCEx_PLLSAI1_Config>
 80045f6:	4603      	mov	r3, r0
 80045f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045fa:	e00c      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3320      	adds	r3, #32
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fba6 	bl	8004d54 <RCCEx_PLLSAI2_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800460c:	e003      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	74fb      	strb	r3, [r7, #19]
      break;
 8004612:	e000      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004616:	7cfb      	ldrb	r3, [r7, #19]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10b      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800461c:	4b76      	ldr	r3, [pc, #472]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800462a:	4973      	ldr	r1, [pc, #460]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004632:	e001      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	7cfb      	ldrb	r3, [r7, #19]
 8004636:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d041      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004648:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800464c:	d02a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800464e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004652:	d824      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004654:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004658:	d008      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800465a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800465e:	d81e      	bhi.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004660:	2b00      	cmp	r3, #0
 8004662:	d00a      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004668:	d010      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800466a:	e018      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800466c:	4b62      	ldr	r3, [pc, #392]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4a61      	ldr	r2, [pc, #388]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004676:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004678:	e015      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	3304      	adds	r3, #4
 800467e:	2100      	movs	r1, #0
 8004680:	4618      	mov	r0, r3
 8004682:	f000 fa73 	bl	8004b6c <RCCEx_PLLSAI1_Config>
 8004686:	4603      	mov	r3, r0
 8004688:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800468a:	e00c      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3320      	adds	r3, #32
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f000 fb5e 	bl	8004d54 <RCCEx_PLLSAI2_Config>
 8004698:	4603      	mov	r3, r0
 800469a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800469c:	e003      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	74fb      	strb	r3, [r7, #19]
      break;
 80046a2:	e000      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80046a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046a6:	7cfb      	ldrb	r3, [r7, #19]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10b      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046ac:	4b52      	ldr	r3, [pc, #328]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ba:	494f      	ldr	r1, [pc, #316]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046c2:	e001      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80a0 	beq.w	8004816 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d6:	2300      	movs	r3, #0
 80046d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046da:	4b47      	ldr	r3, [pc, #284]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d00d      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046f0:	4b41      	ldr	r3, [pc, #260]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	4a40      	ldr	r2, [pc, #256]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046fa:	6593      	str	r3, [r2, #88]	; 0x58
 80046fc:	4b3e      	ldr	r3, [pc, #248]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004704:	60bb      	str	r3, [r7, #8]
 8004706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004708:	2301      	movs	r3, #1
 800470a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800470c:	4b3b      	ldr	r3, [pc, #236]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a3a      	ldr	r2, [pc, #232]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004716:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004718:	f7fd fbec 	bl	8001ef4 <HAL_GetTick>
 800471c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800471e:	e009      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004720:	f7fd fbe8 	bl	8001ef4 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b02      	cmp	r3, #2
 800472c:	d902      	bls.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	74fb      	strb	r3, [r7, #19]
        break;
 8004732:	e005      	b.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004734:	4b31      	ldr	r3, [pc, #196]	; (80047fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0ef      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d15c      	bne.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004746:	4b2c      	ldr	r3, [pc, #176]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004750:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01f      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	429a      	cmp	r2, r3
 8004762:	d019      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004764:	4b24      	ldr	r3, [pc, #144]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004770:	4b21      	ldr	r3, [pc, #132]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004776:	4a20      	ldr	r2, [pc, #128]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004780:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	4a1c      	ldr	r2, [pc, #112]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004790:	4a19      	ldr	r2, [pc, #100]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a2:	f7fd fba7 	bl	8001ef4 <HAL_GetTick>
 80047a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047a8:	e00b      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047aa:	f7fd fba3 	bl	8001ef4 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d902      	bls.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	74fb      	strb	r3, [r7, #19]
            break;
 80047c0:	e006      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c2:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c8:	f003 0302 	and.w	r3, r3, #2
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0ec      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10c      	bne.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047d6:	4b08      	ldr	r3, [pc, #32]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e6:	4904      	ldr	r1, [pc, #16]	; (80047f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047ee:	e009      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047f0:	7cfb      	ldrb	r3, [r7, #19]
 80047f2:	74bb      	strb	r3, [r7, #18]
 80047f4:	e006      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
 80047fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004800:	7cfb      	ldrb	r3, [r7, #19]
 8004802:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004804:	7c7b      	ldrb	r3, [r7, #17]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d105      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800480a:	4b9e      	ldr	r3, [pc, #632]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480e:	4a9d      	ldr	r2, [pc, #628]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004814:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00a      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004822:	4b98      	ldr	r3, [pc, #608]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f023 0203 	bic.w	r2, r3, #3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004830:	4994      	ldr	r1, [pc, #592]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004844:	4b8f      	ldr	r3, [pc, #572]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	f023 020c 	bic.w	r2, r3, #12
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004852:	498c      	ldr	r1, [pc, #560]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004866:	4b87      	ldr	r3, [pc, #540]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	4983      	ldr	r1, [pc, #524]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004888:	4b7e      	ldr	r3, [pc, #504]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004896:	497b      	ldr	r1, [pc, #492]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0310 	and.w	r3, r3, #16
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048aa:	4b76      	ldr	r3, [pc, #472]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048b8:	4972      	ldr	r1, [pc, #456]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0320 	and.w	r3, r3, #32
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048cc:	4b6d      	ldr	r3, [pc, #436]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048da:	496a      	ldr	r1, [pc, #424]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ee:	4b65      	ldr	r3, [pc, #404]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fc:	4961      	ldr	r1, [pc, #388]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004910:	4b5c      	ldr	r3, [pc, #368]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491e:	4959      	ldr	r1, [pc, #356]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004932:	4b54      	ldr	r3, [pc, #336]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004940:	4950      	ldr	r1, [pc, #320]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004954:	4b4b      	ldr	r3, [pc, #300]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004962:	4948      	ldr	r1, [pc, #288]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004976:	4b43      	ldr	r3, [pc, #268]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004984:	493f      	ldr	r1, [pc, #252]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d028      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004998:	4b3a      	ldr	r3, [pc, #232]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049a6:	4937      	ldr	r1, [pc, #220]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b6:	d106      	bne.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b8:	4b32      	ldr	r3, [pc, #200]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4a31      	ldr	r2, [pc, #196]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049c2:	60d3      	str	r3, [r2, #12]
 80049c4:	e011      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049ce:	d10c      	bne.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3304      	adds	r3, #4
 80049d4:	2101      	movs	r1, #1
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 f8c8 	bl	8004b6c <RCCEx_PLLSAI1_Config>
 80049dc:	4603      	mov	r3, r0
 80049de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80049e0:	7cfb      	ldrb	r3, [r7, #19]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80049e6:	7cfb      	ldrb	r3, [r7, #19]
 80049e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d028      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049f6:	4b23      	ldr	r3, [pc, #140]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a04:	491f      	ldr	r1, [pc, #124]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a14:	d106      	bne.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a16:	4b1b      	ldr	r3, [pc, #108]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	4a1a      	ldr	r2, [pc, #104]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a20:	60d3      	str	r3, [r2, #12]
 8004a22:	e011      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a2c:	d10c      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	3304      	adds	r3, #4
 8004a32:	2101      	movs	r1, #1
 8004a34:	4618      	mov	r0, r3
 8004a36:	f000 f899 	bl	8004b6c <RCCEx_PLLSAI1_Config>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a3e:	7cfb      	ldrb	r3, [r7, #19]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a44:	7cfb      	ldrb	r3, [r7, #19]
 8004a46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d02b      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a54:	4b0b      	ldr	r3, [pc, #44]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a62:	4908      	ldr	r1, [pc, #32]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a72:	d109      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a74:	4b03      	ldr	r3, [pc, #12]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	4a02      	ldr	r2, [pc, #8]	; (8004a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a7e:	60d3      	str	r3, [r2, #12]
 8004a80:	e014      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a82:	bf00      	nop
 8004a84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a90:	d10c      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3304      	adds	r3, #4
 8004a96:	2101      	movs	r1, #1
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 f867 	bl	8004b6c <RCCEx_PLLSAI1_Config>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aa2:	7cfb      	ldrb	r3, [r7, #19]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004aa8:	7cfb      	ldrb	r3, [r7, #19]
 8004aaa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d02f      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ab8:	4b2b      	ldr	r3, [pc, #172]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ac6:	4928      	ldr	r1, [pc, #160]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ad2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ad6:	d10d      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	3304      	adds	r3, #4
 8004adc:	2102      	movs	r1, #2
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 f844 	bl	8004b6c <RCCEx_PLLSAI1_Config>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ae8:	7cfb      	ldrb	r3, [r7, #19]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d014      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004aee:	7cfb      	ldrb	r3, [r7, #19]
 8004af0:	74bb      	strb	r3, [r7, #18]
 8004af2:	e011      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004af8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004afc:	d10c      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3320      	adds	r3, #32
 8004b02:	2102      	movs	r1, #2
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 f925 	bl	8004d54 <RCCEx_PLLSAI2_Config>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b0e:	7cfb      	ldrb	r3, [r7, #19]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b14:	7cfb      	ldrb	r3, [r7, #19]
 8004b16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b24:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b32:	490d      	ldr	r1, [pc, #52]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b46:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b56:	4904      	ldr	r1, [pc, #16]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40021000 	.word	0x40021000

08004b6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b7a:	4b75      	ldr	r3, [pc, #468]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	f003 0303 	and.w	r3, r3, #3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d018      	beq.n	8004bb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b86:	4b72      	ldr	r3, [pc, #456]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	f003 0203 	and.w	r2, r3, #3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d10d      	bne.n	8004bb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
       ||
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d009      	beq.n	8004bb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b9e:	4b6c      	ldr	r3, [pc, #432]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	091b      	lsrs	r3, r3, #4
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	1c5a      	adds	r2, r3, #1
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
       ||
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d047      	beq.n	8004c42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	73fb      	strb	r3, [r7, #15]
 8004bb6:	e044      	b.n	8004c42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d018      	beq.n	8004bf2 <RCCEx_PLLSAI1_Config+0x86>
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d825      	bhi.n	8004c10 <RCCEx_PLLSAI1_Config+0xa4>
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d002      	beq.n	8004bce <RCCEx_PLLSAI1_Config+0x62>
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d009      	beq.n	8004be0 <RCCEx_PLLSAI1_Config+0x74>
 8004bcc:	e020      	b.n	8004c10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bce:	4b60      	ldr	r3, [pc, #384]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d11d      	bne.n	8004c16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bde:	e01a      	b.n	8004c16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004be0:	4b5b      	ldr	r3, [pc, #364]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d116      	bne.n	8004c1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bf0:	e013      	b.n	8004c1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bf2:	4b57      	ldr	r3, [pc, #348]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10f      	bne.n	8004c1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bfe:	4b54      	ldr	r3, [pc, #336]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d109      	bne.n	8004c1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c0e:	e006      	b.n	8004c1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c10:	2301      	movs	r3, #1
 8004c12:	73fb      	strb	r3, [r7, #15]
      break;
 8004c14:	e004      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c16:	bf00      	nop
 8004c18:	e002      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c1a:	bf00      	nop
 8004c1c:	e000      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10d      	bne.n	8004c42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c26:	4b4a      	ldr	r3, [pc, #296]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6819      	ldr	r1, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	430b      	orrs	r3, r1
 8004c3c:	4944      	ldr	r1, [pc, #272]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c42:	7bfb      	ldrb	r3, [r7, #15]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d17d      	bne.n	8004d44 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c48:	4b41      	ldr	r3, [pc, #260]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a40      	ldr	r2, [pc, #256]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c54:	f7fd f94e 	bl	8001ef4 <HAL_GetTick>
 8004c58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c5a:	e009      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c5c:	f7fd f94a 	bl	8001ef4 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d902      	bls.n	8004c70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c6e:	e005      	b.n	8004c7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c70:	4b37      	ldr	r3, [pc, #220]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1ef      	bne.n	8004c5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d160      	bne.n	8004d44 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d111      	bne.n	8004cac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c88:	4b31      	ldr	r3, [pc, #196]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6892      	ldr	r2, [r2, #8]
 8004c98:	0211      	lsls	r1, r2, #8
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	68d2      	ldr	r2, [r2, #12]
 8004c9e:	0912      	lsrs	r2, r2, #4
 8004ca0:	0452      	lsls	r2, r2, #17
 8004ca2:	430a      	orrs	r2, r1
 8004ca4:	492a      	ldr	r1, [pc, #168]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	610b      	str	r3, [r1, #16]
 8004caa:	e027      	b.n	8004cfc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d112      	bne.n	8004cd8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cb2:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004cba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	6892      	ldr	r2, [r2, #8]
 8004cc2:	0211      	lsls	r1, r2, #8
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6912      	ldr	r2, [r2, #16]
 8004cc8:	0852      	lsrs	r2, r2, #1
 8004cca:	3a01      	subs	r2, #1
 8004ccc:	0552      	lsls	r2, r2, #21
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	491f      	ldr	r1, [pc, #124]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	610b      	str	r3, [r1, #16]
 8004cd6:	e011      	b.n	8004cfc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cd8:	4b1d      	ldr	r3, [pc, #116]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ce0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6892      	ldr	r2, [r2, #8]
 8004ce8:	0211      	lsls	r1, r2, #8
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6952      	ldr	r2, [r2, #20]
 8004cee:	0852      	lsrs	r2, r2, #1
 8004cf0:	3a01      	subs	r2, #1
 8004cf2:	0652      	lsls	r2, r2, #25
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	4916      	ldr	r1, [pc, #88]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004cfc:	4b14      	ldr	r3, [pc, #80]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d02:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d08:	f7fd f8f4 	bl	8001ef4 <HAL_GetTick>
 8004d0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d0e:	e009      	b.n	8004d24 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d10:	f7fd f8f0 	bl	8001ef4 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d902      	bls.n	8004d24 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	73fb      	strb	r3, [r7, #15]
          break;
 8004d22:	e005      	b.n	8004d30 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d24:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d0ef      	beq.n	8004d10 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d36:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	4904      	ldr	r1, [pc, #16]	; (8004d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40021000 	.word	0x40021000

08004d54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d62:	4b6a      	ldr	r3, [pc, #424]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f003 0303 	and.w	r3, r3, #3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d018      	beq.n	8004da0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d6e:	4b67      	ldr	r3, [pc, #412]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	f003 0203 	and.w	r2, r3, #3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d10d      	bne.n	8004d9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
       ||
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d009      	beq.n	8004d9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d86:	4b61      	ldr	r3, [pc, #388]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	091b      	lsrs	r3, r3, #4
 8004d8c:	f003 0307 	and.w	r3, r3, #7
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
       ||
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d047      	beq.n	8004e2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	73fb      	strb	r3, [r7, #15]
 8004d9e:	e044      	b.n	8004e2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b03      	cmp	r3, #3
 8004da6:	d018      	beq.n	8004dda <RCCEx_PLLSAI2_Config+0x86>
 8004da8:	2b03      	cmp	r3, #3
 8004daa:	d825      	bhi.n	8004df8 <RCCEx_PLLSAI2_Config+0xa4>
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d002      	beq.n	8004db6 <RCCEx_PLLSAI2_Config+0x62>
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d009      	beq.n	8004dc8 <RCCEx_PLLSAI2_Config+0x74>
 8004db4:	e020      	b.n	8004df8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004db6:	4b55      	ldr	r3, [pc, #340]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d11d      	bne.n	8004dfe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc6:	e01a      	b.n	8004dfe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dc8:	4b50      	ldr	r3, [pc, #320]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d116      	bne.n	8004e02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd8:	e013      	b.n	8004e02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004dda:	4b4c      	ldr	r3, [pc, #304]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d10f      	bne.n	8004e06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004de6:	4b49      	ldr	r3, [pc, #292]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004df6:	e006      	b.n	8004e06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8004dfc:	e004      	b.n	8004e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004dfe:	bf00      	nop
 8004e00:	e002      	b.n	8004e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e02:	bf00      	nop
 8004e04:	e000      	b.n	8004e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e06:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10d      	bne.n	8004e2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e0e:	4b3f      	ldr	r3, [pc, #252]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6819      	ldr	r1, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	011b      	lsls	r3, r3, #4
 8004e22:	430b      	orrs	r3, r1
 8004e24:	4939      	ldr	r1, [pc, #228]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e2a:	7bfb      	ldrb	r3, [r7, #15]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d167      	bne.n	8004f00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e30:	4b36      	ldr	r3, [pc, #216]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a35      	ldr	r2, [pc, #212]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e3c:	f7fd f85a 	bl	8001ef4 <HAL_GetTick>
 8004e40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e42:	e009      	b.n	8004e58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e44:	f7fd f856 	bl	8001ef4 <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d902      	bls.n	8004e58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e52:	2303      	movs	r3, #3
 8004e54:	73fb      	strb	r3, [r7, #15]
        break;
 8004e56:	e005      	b.n	8004e64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e58:	4b2c      	ldr	r3, [pc, #176]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1ef      	bne.n	8004e44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d14a      	bne.n	8004f00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d111      	bne.n	8004e94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e70:	4b26      	ldr	r3, [pc, #152]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6892      	ldr	r2, [r2, #8]
 8004e80:	0211      	lsls	r1, r2, #8
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	68d2      	ldr	r2, [r2, #12]
 8004e86:	0912      	lsrs	r2, r2, #4
 8004e88:	0452      	lsls	r2, r2, #17
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	491f      	ldr	r1, [pc, #124]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	614b      	str	r3, [r1, #20]
 8004e92:	e011      	b.n	8004eb8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e94:	4b1d      	ldr	r3, [pc, #116]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6892      	ldr	r2, [r2, #8]
 8004ea4:	0211      	lsls	r1, r2, #8
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6912      	ldr	r2, [r2, #16]
 8004eaa:	0852      	lsrs	r2, r2, #1
 8004eac:	3a01      	subs	r2, #1
 8004eae:	0652      	lsls	r2, r2, #25
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	4916      	ldr	r1, [pc, #88]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004eb8:	4b14      	ldr	r3, [pc, #80]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a13      	ldr	r2, [pc, #76]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec4:	f7fd f816 	bl	8001ef4 <HAL_GetTick>
 8004ec8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004eca:	e009      	b.n	8004ee0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ecc:	f7fd f812 	bl	8001ef4 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d902      	bls.n	8004ee0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	73fb      	strb	r3, [r7, #15]
          break;
 8004ede:	e005      	b.n	8004eec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004ee0:	4b0a      	ldr	r3, [pc, #40]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0ef      	beq.n	8004ecc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d106      	bne.n	8004f00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ef2:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef4:	695a      	ldr	r2, [r3, #20]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	4904      	ldr	r1, [pc, #16]	; (8004f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40021000 	.word	0x40021000

08004f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e049      	b.n	8004fb6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d106      	bne.n	8004f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fc fd70 	bl	8001a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f000 fc4c 	bl	80057ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fb4:	2300      	movs	r3, #0
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}

08004fbe <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004fbe:	b580      	push	{r7, lr}
 8004fc0:	b082      	sub	sp, #8
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d101      	bne.n	8004fd0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e049      	b.n	8005064 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d106      	bne.n	8004fea <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7fc fcf9 	bl	80019dc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2202      	movs	r2, #2
 8004fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	f000 fbf5 	bl	80057ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2201      	movs	r2, #1
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3708      	adds	r7, #8
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e049      	b.n	8005112 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f841 	bl	800511a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3304      	adds	r3, #4
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f000 fb9e 	bl	80057ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3708      	adds	r7, #8
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d109      	bne.n	8005154 <HAL_TIM_PWM_Start+0x24>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005146:	b2db      	uxtb	r3, r3
 8005148:	2b01      	cmp	r3, #1
 800514a:	bf14      	ite	ne
 800514c:	2301      	movne	r3, #1
 800514e:	2300      	moveq	r3, #0
 8005150:	b2db      	uxtb	r3, r3
 8005152:	e03c      	b.n	80051ce <HAL_TIM_PWM_Start+0x9e>
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	2b04      	cmp	r3, #4
 8005158:	d109      	bne.n	800516e <HAL_TIM_PWM_Start+0x3e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b01      	cmp	r3, #1
 8005164:	bf14      	ite	ne
 8005166:	2301      	movne	r3, #1
 8005168:	2300      	moveq	r3, #0
 800516a:	b2db      	uxtb	r3, r3
 800516c:	e02f      	b.n	80051ce <HAL_TIM_PWM_Start+0x9e>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b08      	cmp	r3, #8
 8005172:	d109      	bne.n	8005188 <HAL_TIM_PWM_Start+0x58>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b01      	cmp	r3, #1
 800517e:	bf14      	ite	ne
 8005180:	2301      	movne	r3, #1
 8005182:	2300      	moveq	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	e022      	b.n	80051ce <HAL_TIM_PWM_Start+0x9e>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b0c      	cmp	r3, #12
 800518c:	d109      	bne.n	80051a2 <HAL_TIM_PWM_Start+0x72>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005194:	b2db      	uxtb	r3, r3
 8005196:	2b01      	cmp	r3, #1
 8005198:	bf14      	ite	ne
 800519a:	2301      	movne	r3, #1
 800519c:	2300      	moveq	r3, #0
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	e015      	b.n	80051ce <HAL_TIM_PWM_Start+0x9e>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b10      	cmp	r3, #16
 80051a6:	d109      	bne.n	80051bc <HAL_TIM_PWM_Start+0x8c>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	bf14      	ite	ne
 80051b4:	2301      	movne	r3, #1
 80051b6:	2300      	moveq	r3, #0
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	e008      	b.n	80051ce <HAL_TIM_PWM_Start+0x9e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d001      	beq.n	80051d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	e09c      	b.n	8005310 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_PWM_Start+0xb6>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051e4:	e023      	b.n	800522e <HAL_TIM_PWM_Start+0xfe>
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	2b04      	cmp	r3, #4
 80051ea:	d104      	bne.n	80051f6 <HAL_TIM_PWM_Start+0xc6>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051f4:	e01b      	b.n	800522e <HAL_TIM_PWM_Start+0xfe>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d104      	bne.n	8005206 <HAL_TIM_PWM_Start+0xd6>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005204:	e013      	b.n	800522e <HAL_TIM_PWM_Start+0xfe>
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b0c      	cmp	r3, #12
 800520a:	d104      	bne.n	8005216 <HAL_TIM_PWM_Start+0xe6>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005214:	e00b      	b.n	800522e <HAL_TIM_PWM_Start+0xfe>
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b10      	cmp	r3, #16
 800521a:	d104      	bne.n	8005226 <HAL_TIM_PWM_Start+0xf6>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005224:	e003      	b.n	800522e <HAL_TIM_PWM_Start+0xfe>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2202      	movs	r2, #2
 800522a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2201      	movs	r2, #1
 8005234:	6839      	ldr	r1, [r7, #0]
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fee2 	bl	8006000 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a35      	ldr	r2, [pc, #212]	; (8005318 <HAL_TIM_PWM_Start+0x1e8>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d013      	beq.n	800526e <HAL_TIM_PWM_Start+0x13e>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a34      	ldr	r2, [pc, #208]	; (800531c <HAL_TIM_PWM_Start+0x1ec>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00e      	beq.n	800526e <HAL_TIM_PWM_Start+0x13e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a32      	ldr	r2, [pc, #200]	; (8005320 <HAL_TIM_PWM_Start+0x1f0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d009      	beq.n	800526e <HAL_TIM_PWM_Start+0x13e>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a31      	ldr	r2, [pc, #196]	; (8005324 <HAL_TIM_PWM_Start+0x1f4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d004      	beq.n	800526e <HAL_TIM_PWM_Start+0x13e>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a2f      	ldr	r2, [pc, #188]	; (8005328 <HAL_TIM_PWM_Start+0x1f8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d101      	bne.n	8005272 <HAL_TIM_PWM_Start+0x142>
 800526e:	2301      	movs	r3, #1
 8005270:	e000      	b.n	8005274 <HAL_TIM_PWM_Start+0x144>
 8005272:	2300      	movs	r3, #0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005286:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a22      	ldr	r2, [pc, #136]	; (8005318 <HAL_TIM_PWM_Start+0x1e8>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d01d      	beq.n	80052ce <HAL_TIM_PWM_Start+0x19e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529a:	d018      	beq.n	80052ce <HAL_TIM_PWM_Start+0x19e>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a22      	ldr	r2, [pc, #136]	; (800532c <HAL_TIM_PWM_Start+0x1fc>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d013      	beq.n	80052ce <HAL_TIM_PWM_Start+0x19e>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a21      	ldr	r2, [pc, #132]	; (8005330 <HAL_TIM_PWM_Start+0x200>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d00e      	beq.n	80052ce <HAL_TIM_PWM_Start+0x19e>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a1f      	ldr	r2, [pc, #124]	; (8005334 <HAL_TIM_PWM_Start+0x204>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d009      	beq.n	80052ce <HAL_TIM_PWM_Start+0x19e>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a17      	ldr	r2, [pc, #92]	; (800531c <HAL_TIM_PWM_Start+0x1ec>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d004      	beq.n	80052ce <HAL_TIM_PWM_Start+0x19e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a15      	ldr	r2, [pc, #84]	; (8005320 <HAL_TIM_PWM_Start+0x1f0>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d115      	bne.n	80052fa <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689a      	ldr	r2, [r3, #8]
 80052d4:	4b18      	ldr	r3, [pc, #96]	; (8005338 <HAL_TIM_PWM_Start+0x208>)
 80052d6:	4013      	ands	r3, r2
 80052d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2b06      	cmp	r3, #6
 80052de:	d015      	beq.n	800530c <HAL_TIM_PWM_Start+0x1dc>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052e6:	d011      	beq.n	800530c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f042 0201 	orr.w	r2, r2, #1
 80052f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f8:	e008      	b.n	800530c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0201 	orr.w	r2, r2, #1
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	e000      	b.n	800530e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	40012c00 	.word	0x40012c00
 800531c:	40013400 	.word	0x40013400
 8005320:	40014000 	.word	0x40014000
 8005324:	40014400 	.word	0x40014400
 8005328:	40014800 	.word	0x40014800
 800532c:	40000400 	.word	0x40000400
 8005330:	40000800 	.word	0x40000800
 8005334:	40000c00 	.word	0x40000c00
 8005338:	00010007 	.word	0x00010007

0800533c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_TIM_OC_ConfigChannel+0x1e>
 8005356:	2302      	movs	r3, #2
 8005358:	e066      	b.n	8005428 <HAL_TIM_OC_ConfigChannel+0xec>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b14      	cmp	r3, #20
 8005366:	d857      	bhi.n	8005418 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005368:	a201      	add	r2, pc, #4	; (adr r2, 8005370 <HAL_TIM_OC_ConfigChannel+0x34>)
 800536a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800536e:	bf00      	nop
 8005370:	080053c5 	.word	0x080053c5
 8005374:	08005419 	.word	0x08005419
 8005378:	08005419 	.word	0x08005419
 800537c:	08005419 	.word	0x08005419
 8005380:	080053d3 	.word	0x080053d3
 8005384:	08005419 	.word	0x08005419
 8005388:	08005419 	.word	0x08005419
 800538c:	08005419 	.word	0x08005419
 8005390:	080053e1 	.word	0x080053e1
 8005394:	08005419 	.word	0x08005419
 8005398:	08005419 	.word	0x08005419
 800539c:	08005419 	.word	0x08005419
 80053a0:	080053ef 	.word	0x080053ef
 80053a4:	08005419 	.word	0x08005419
 80053a8:	08005419 	.word	0x08005419
 80053ac:	08005419 	.word	0x08005419
 80053b0:	080053fd 	.word	0x080053fd
 80053b4:	08005419 	.word	0x08005419
 80053b8:	08005419 	.word	0x08005419
 80053bc:	08005419 	.word	0x08005419
 80053c0:	0800540b 	.word	0x0800540b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68b9      	ldr	r1, [r7, #8]
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 faa8 	bl	8005920 <TIM_OC1_SetConfig>
      break;
 80053d0:	e025      	b.n	800541e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	4618      	mov	r0, r3
 80053da:	f000 fb31 	bl	8005a40 <TIM_OC2_SetConfig>
      break;
 80053de:	e01e      	b.n	800541e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68b9      	ldr	r1, [r7, #8]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f000 fbb4 	bl	8005b54 <TIM_OC3_SetConfig>
      break;
 80053ec:	e017      	b.n	800541e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68b9      	ldr	r1, [r7, #8]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 fc35 	bl	8005c64 <TIM_OC4_SetConfig>
      break;
 80053fa:	e010      	b.n	800541e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68b9      	ldr	r1, [r7, #8]
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fc98 	bl	8005d38 <TIM_OC5_SetConfig>
      break;
 8005408:	e009      	b.n	800541e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68b9      	ldr	r1, [r7, #8]
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fcf5 	bl	8005e00 <TIM_OC6_SetConfig>
      break;
 8005416:	e002      	b.n	800541e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	75fb      	strb	r3, [r7, #23]
      break;
 800541c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005426:	7dfb      	ldrb	r3, [r7, #23]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005446:	2b01      	cmp	r3, #1
 8005448:	d101      	bne.n	800544e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800544a:	2302      	movs	r3, #2
 800544c:	e0ff      	b.n	800564e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2201      	movs	r2, #1
 8005452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b14      	cmp	r3, #20
 800545a:	f200 80f0 	bhi.w	800563e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800545e:	a201      	add	r2, pc, #4	; (adr r2, 8005464 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005464:	080054b9 	.word	0x080054b9
 8005468:	0800563f 	.word	0x0800563f
 800546c:	0800563f 	.word	0x0800563f
 8005470:	0800563f 	.word	0x0800563f
 8005474:	080054f9 	.word	0x080054f9
 8005478:	0800563f 	.word	0x0800563f
 800547c:	0800563f 	.word	0x0800563f
 8005480:	0800563f 	.word	0x0800563f
 8005484:	0800553b 	.word	0x0800553b
 8005488:	0800563f 	.word	0x0800563f
 800548c:	0800563f 	.word	0x0800563f
 8005490:	0800563f 	.word	0x0800563f
 8005494:	0800557b 	.word	0x0800557b
 8005498:	0800563f 	.word	0x0800563f
 800549c:	0800563f 	.word	0x0800563f
 80054a0:	0800563f 	.word	0x0800563f
 80054a4:	080055bd 	.word	0x080055bd
 80054a8:	0800563f 	.word	0x0800563f
 80054ac:	0800563f 	.word	0x0800563f
 80054b0:	0800563f 	.word	0x0800563f
 80054b4:	080055fd 	.word	0x080055fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fa2e 	bl	8005920 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699a      	ldr	r2, [r3, #24]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f042 0208 	orr.w	r2, r2, #8
 80054d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699a      	ldr	r2, [r3, #24]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0204 	bic.w	r2, r2, #4
 80054e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6999      	ldr	r1, [r3, #24]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	691a      	ldr	r2, [r3, #16]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	619a      	str	r2, [r3, #24]
      break;
 80054f6:	e0a5      	b.n	8005644 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 fa9e 	bl	8005a40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	699a      	ldr	r2, [r3, #24]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005512:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699a      	ldr	r2, [r3, #24]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005522:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6999      	ldr	r1, [r3, #24]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	021a      	lsls	r2, r3, #8
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	430a      	orrs	r2, r1
 8005536:	619a      	str	r2, [r3, #24]
      break;
 8005538:	e084      	b.n	8005644 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68b9      	ldr	r1, [r7, #8]
 8005540:	4618      	mov	r0, r3
 8005542:	f000 fb07 	bl	8005b54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	69da      	ldr	r2, [r3, #28]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f042 0208 	orr.w	r2, r2, #8
 8005554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69da      	ldr	r2, [r3, #28]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f022 0204 	bic.w	r2, r2, #4
 8005564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	69d9      	ldr	r1, [r3, #28]
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	430a      	orrs	r2, r1
 8005576:	61da      	str	r2, [r3, #28]
      break;
 8005578:	e064      	b.n	8005644 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68b9      	ldr	r1, [r7, #8]
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fb6f 	bl	8005c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	69da      	ldr	r2, [r3, #28]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005594:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	69da      	ldr	r2, [r3, #28]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	69d9      	ldr	r1, [r3, #28]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	021a      	lsls	r2, r3, #8
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	61da      	str	r2, [r3, #28]
      break;
 80055ba:	e043      	b.n	8005644 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fbb8 	bl	8005d38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f042 0208 	orr.w	r2, r2, #8
 80055d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0204 	bic.w	r2, r2, #4
 80055e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055fa:	e023      	b.n	8005644 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	4618      	mov	r0, r3
 8005604:	f000 fbfc 	bl	8005e00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005616:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005626:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	021a      	lsls	r2, r3, #8
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	430a      	orrs	r2, r1
 800563a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800563c:	e002      	b.n	8005644 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	75fb      	strb	r3, [r7, #23]
      break;
 8005642:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800564c:	7dfb      	ldrb	r3, [r7, #23]
}
 800564e:	4618      	mov	r0, r3
 8005650:	3718      	adds	r7, #24
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop

08005658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005662:	2300      	movs	r3, #0
 8005664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_TIM_ConfigClockSource+0x1c>
 8005670:	2302      	movs	r3, #2
 8005672:	e0b6      	b.n	80057e2 <HAL_TIM_ConfigClockSource+0x18a>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2202      	movs	r2, #2
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005692:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800569e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b0:	d03e      	beq.n	8005730 <HAL_TIM_ConfigClockSource+0xd8>
 80056b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b6:	f200 8087 	bhi.w	80057c8 <HAL_TIM_ConfigClockSource+0x170>
 80056ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056be:	f000 8086 	beq.w	80057ce <HAL_TIM_ConfigClockSource+0x176>
 80056c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c6:	d87f      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x170>
 80056c8:	2b70      	cmp	r3, #112	; 0x70
 80056ca:	d01a      	beq.n	8005702 <HAL_TIM_ConfigClockSource+0xaa>
 80056cc:	2b70      	cmp	r3, #112	; 0x70
 80056ce:	d87b      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x170>
 80056d0:	2b60      	cmp	r3, #96	; 0x60
 80056d2:	d050      	beq.n	8005776 <HAL_TIM_ConfigClockSource+0x11e>
 80056d4:	2b60      	cmp	r3, #96	; 0x60
 80056d6:	d877      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x170>
 80056d8:	2b50      	cmp	r3, #80	; 0x50
 80056da:	d03c      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0xfe>
 80056dc:	2b50      	cmp	r3, #80	; 0x50
 80056de:	d873      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x170>
 80056e0:	2b40      	cmp	r3, #64	; 0x40
 80056e2:	d058      	beq.n	8005796 <HAL_TIM_ConfigClockSource+0x13e>
 80056e4:	2b40      	cmp	r3, #64	; 0x40
 80056e6:	d86f      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x170>
 80056e8:	2b30      	cmp	r3, #48	; 0x30
 80056ea:	d064      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x15e>
 80056ec:	2b30      	cmp	r3, #48	; 0x30
 80056ee:	d86b      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x170>
 80056f0:	2b20      	cmp	r3, #32
 80056f2:	d060      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x15e>
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d867      	bhi.n	80057c8 <HAL_TIM_ConfigClockSource+0x170>
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d05c      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x15e>
 80056fc:	2b10      	cmp	r3, #16
 80056fe:	d05a      	beq.n	80057b6 <HAL_TIM_ConfigClockSource+0x15e>
 8005700:	e062      	b.n	80057c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005712:	f000 fc55 	bl	8005fc0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005724:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	609a      	str	r2, [r3, #8]
      break;
 800572e:	e04f      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005740:	f000 fc3e 	bl	8005fc0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689a      	ldr	r2, [r3, #8]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005752:	609a      	str	r2, [r3, #8]
      break;
 8005754:	e03c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005762:	461a      	mov	r2, r3
 8005764:	f000 fbb2 	bl	8005ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2150      	movs	r1, #80	; 0x50
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fc0b 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005774:	e02c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005782:	461a      	mov	r2, r3
 8005784:	f000 fbd1 	bl	8005f2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2160      	movs	r1, #96	; 0x60
 800578e:	4618      	mov	r0, r3
 8005790:	f000 fbfb 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 8005794:	e01c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a2:	461a      	mov	r2, r3
 80057a4:	f000 fb92 	bl	8005ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2140      	movs	r1, #64	; 0x40
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fbeb 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 80057b4:	e00c      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4619      	mov	r1, r3
 80057c0:	4610      	mov	r0, r2
 80057c2:	f000 fbe2 	bl	8005f8a <TIM_ITRx_SetConfig>
      break;
 80057c6:	e003      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	73fb      	strb	r3, [r7, #15]
      break;
 80057cc:	e000      	b.n	80057d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80057ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
	...

080057ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b085      	sub	sp, #20
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a40      	ldr	r2, [pc, #256]	; (8005900 <TIM_Base_SetConfig+0x114>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d013      	beq.n	800582c <TIM_Base_SetConfig+0x40>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580a:	d00f      	beq.n	800582c <TIM_Base_SetConfig+0x40>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a3d      	ldr	r2, [pc, #244]	; (8005904 <TIM_Base_SetConfig+0x118>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00b      	beq.n	800582c <TIM_Base_SetConfig+0x40>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a3c      	ldr	r2, [pc, #240]	; (8005908 <TIM_Base_SetConfig+0x11c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d007      	beq.n	800582c <TIM_Base_SetConfig+0x40>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	4a3b      	ldr	r2, [pc, #236]	; (800590c <TIM_Base_SetConfig+0x120>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d003      	beq.n	800582c <TIM_Base_SetConfig+0x40>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a3a      	ldr	r2, [pc, #232]	; (8005910 <TIM_Base_SetConfig+0x124>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d108      	bne.n	800583e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005832:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a2f      	ldr	r2, [pc, #188]	; (8005900 <TIM_Base_SetConfig+0x114>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d01f      	beq.n	8005886 <TIM_Base_SetConfig+0x9a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800584c:	d01b      	beq.n	8005886 <TIM_Base_SetConfig+0x9a>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a2c      	ldr	r2, [pc, #176]	; (8005904 <TIM_Base_SetConfig+0x118>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d017      	beq.n	8005886 <TIM_Base_SetConfig+0x9a>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a2b      	ldr	r2, [pc, #172]	; (8005908 <TIM_Base_SetConfig+0x11c>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d013      	beq.n	8005886 <TIM_Base_SetConfig+0x9a>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a2a      	ldr	r2, [pc, #168]	; (800590c <TIM_Base_SetConfig+0x120>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d00f      	beq.n	8005886 <TIM_Base_SetConfig+0x9a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a29      	ldr	r2, [pc, #164]	; (8005910 <TIM_Base_SetConfig+0x124>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00b      	beq.n	8005886 <TIM_Base_SetConfig+0x9a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a28      	ldr	r2, [pc, #160]	; (8005914 <TIM_Base_SetConfig+0x128>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d007      	beq.n	8005886 <TIM_Base_SetConfig+0x9a>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a27      	ldr	r2, [pc, #156]	; (8005918 <TIM_Base_SetConfig+0x12c>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d003      	beq.n	8005886 <TIM_Base_SetConfig+0x9a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a26      	ldr	r2, [pc, #152]	; (800591c <TIM_Base_SetConfig+0x130>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d108      	bne.n	8005898 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800588c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	689a      	ldr	r2, [r3, #8]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a10      	ldr	r2, [pc, #64]	; (8005900 <TIM_Base_SetConfig+0x114>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d00f      	beq.n	80058e4 <TIM_Base_SetConfig+0xf8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a12      	ldr	r2, [pc, #72]	; (8005910 <TIM_Base_SetConfig+0x124>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00b      	beq.n	80058e4 <TIM_Base_SetConfig+0xf8>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a11      	ldr	r2, [pc, #68]	; (8005914 <TIM_Base_SetConfig+0x128>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d007      	beq.n	80058e4 <TIM_Base_SetConfig+0xf8>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a10      	ldr	r2, [pc, #64]	; (8005918 <TIM_Base_SetConfig+0x12c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d003      	beq.n	80058e4 <TIM_Base_SetConfig+0xf8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a0f      	ldr	r2, [pc, #60]	; (800591c <TIM_Base_SetConfig+0x130>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d103      	bne.n	80058ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	615a      	str	r2, [r3, #20]
}
 80058f2:	bf00      	nop
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40000400 	.word	0x40000400
 8005908:	40000800 	.word	0x40000800
 800590c:	40000c00 	.word	0x40000c00
 8005910:	40013400 	.word	0x40013400
 8005914:	40014000 	.word	0x40014000
 8005918:	40014400 	.word	0x40014400
 800591c:	40014800 	.word	0x40014800

08005920 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005920:	b480      	push	{r7}
 8005922:	b087      	sub	sp, #28
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	f023 0201 	bic.w	r2, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	699b      	ldr	r3, [r3, #24]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800594e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	4313      	orrs	r3, r2
 8005964:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	f023 0302 	bic.w	r3, r3, #2
 800596c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	4313      	orrs	r3, r2
 8005976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a2c      	ldr	r2, [pc, #176]	; (8005a2c <TIM_OC1_SetConfig+0x10c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00f      	beq.n	80059a0 <TIM_OC1_SetConfig+0x80>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a2b      	ldr	r2, [pc, #172]	; (8005a30 <TIM_OC1_SetConfig+0x110>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d00b      	beq.n	80059a0 <TIM_OC1_SetConfig+0x80>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a2a      	ldr	r2, [pc, #168]	; (8005a34 <TIM_OC1_SetConfig+0x114>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d007      	beq.n	80059a0 <TIM_OC1_SetConfig+0x80>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a29      	ldr	r2, [pc, #164]	; (8005a38 <TIM_OC1_SetConfig+0x118>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d003      	beq.n	80059a0 <TIM_OC1_SetConfig+0x80>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	4a28      	ldr	r2, [pc, #160]	; (8005a3c <TIM_OC1_SetConfig+0x11c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d10c      	bne.n	80059ba <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f023 0308 	bic.w	r3, r3, #8
 80059a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f023 0304 	bic.w	r3, r3, #4
 80059b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a1b      	ldr	r2, [pc, #108]	; (8005a2c <TIM_OC1_SetConfig+0x10c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00f      	beq.n	80059e2 <TIM_OC1_SetConfig+0xc2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a1a      	ldr	r2, [pc, #104]	; (8005a30 <TIM_OC1_SetConfig+0x110>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00b      	beq.n	80059e2 <TIM_OC1_SetConfig+0xc2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a19      	ldr	r2, [pc, #100]	; (8005a34 <TIM_OC1_SetConfig+0x114>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d007      	beq.n	80059e2 <TIM_OC1_SetConfig+0xc2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a18      	ldr	r2, [pc, #96]	; (8005a38 <TIM_OC1_SetConfig+0x118>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_OC1_SetConfig+0xc2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a17      	ldr	r2, [pc, #92]	; (8005a3c <TIM_OC1_SetConfig+0x11c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d111      	bne.n	8005a06 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	621a      	str	r2, [r3, #32]
}
 8005a20:	bf00      	nop
 8005a22:	371c      	adds	r7, #28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	40012c00 	.word	0x40012c00
 8005a30:	40013400 	.word	0x40013400
 8005a34:	40014000 	.word	0x40014000
 8005a38:	40014400 	.word	0x40014400
 8005a3c:	40014800 	.word	0x40014800

08005a40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	f023 0210 	bic.w	r2, r3, #16
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	021b      	lsls	r3, r3, #8
 8005a82:	68fa      	ldr	r2, [r7, #12]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f023 0320 	bic.w	r3, r3, #32
 8005a8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a28      	ldr	r2, [pc, #160]	; (8005b40 <TIM_OC2_SetConfig+0x100>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d003      	beq.n	8005aac <TIM_OC2_SetConfig+0x6c>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a27      	ldr	r2, [pc, #156]	; (8005b44 <TIM_OC2_SetConfig+0x104>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d10d      	bne.n	8005ac8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a1d      	ldr	r2, [pc, #116]	; (8005b40 <TIM_OC2_SetConfig+0x100>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d00f      	beq.n	8005af0 <TIM_OC2_SetConfig+0xb0>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a1c      	ldr	r2, [pc, #112]	; (8005b44 <TIM_OC2_SetConfig+0x104>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d00b      	beq.n	8005af0 <TIM_OC2_SetConfig+0xb0>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a1b      	ldr	r2, [pc, #108]	; (8005b48 <TIM_OC2_SetConfig+0x108>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d007      	beq.n	8005af0 <TIM_OC2_SetConfig+0xb0>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a1a      	ldr	r2, [pc, #104]	; (8005b4c <TIM_OC2_SetConfig+0x10c>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d003      	beq.n	8005af0 <TIM_OC2_SetConfig+0xb0>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a19      	ldr	r2, [pc, #100]	; (8005b50 <TIM_OC2_SetConfig+0x110>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d113      	bne.n	8005b18 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005af6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005afe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	699b      	ldr	r3, [r3, #24]
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4313      	orrs	r3, r2
 8005b16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	621a      	str	r2, [r3, #32]
}
 8005b32:	bf00      	nop
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40012c00 	.word	0x40012c00
 8005b44:	40013400 	.word	0x40013400
 8005b48:	40014000 	.word	0x40014000
 8005b4c:	40014400 	.word	0x40014400
 8005b50:	40014800 	.word	0x40014800

08005b54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	69db      	ldr	r3, [r3, #28]
 8005b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 0303 	bic.w	r3, r3, #3
 8005b8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ba0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	021b      	lsls	r3, r3, #8
 8005ba8:	697a      	ldr	r2, [r7, #20]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a27      	ldr	r2, [pc, #156]	; (8005c50 <TIM_OC3_SetConfig+0xfc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_OC3_SetConfig+0x6a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a26      	ldr	r2, [pc, #152]	; (8005c54 <TIM_OC3_SetConfig+0x100>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d10d      	bne.n	8005bda <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	021b      	lsls	r3, r3, #8
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a1c      	ldr	r2, [pc, #112]	; (8005c50 <TIM_OC3_SetConfig+0xfc>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d00f      	beq.n	8005c02 <TIM_OC3_SetConfig+0xae>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	4a1b      	ldr	r2, [pc, #108]	; (8005c54 <TIM_OC3_SetConfig+0x100>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d00b      	beq.n	8005c02 <TIM_OC3_SetConfig+0xae>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4a1a      	ldr	r2, [pc, #104]	; (8005c58 <TIM_OC3_SetConfig+0x104>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d007      	beq.n	8005c02 <TIM_OC3_SetConfig+0xae>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a19      	ldr	r2, [pc, #100]	; (8005c5c <TIM_OC3_SetConfig+0x108>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d003      	beq.n	8005c02 <TIM_OC3_SetConfig+0xae>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a18      	ldr	r2, [pc, #96]	; (8005c60 <TIM_OC3_SetConfig+0x10c>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d113      	bne.n	8005c2a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	621a      	str	r2, [r3, #32]
}
 8005c44:	bf00      	nop
 8005c46:	371c      	adds	r7, #28
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	40012c00 	.word	0x40012c00
 8005c54:	40013400 	.word	0x40013400
 8005c58:	40014000 	.word	0x40014000
 8005c5c:	40014400 	.word	0x40014400
 8005c60:	40014800 	.word	0x40014800

08005c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	021b      	lsls	r3, r3, #8
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	031b      	lsls	r3, r3, #12
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a18      	ldr	r2, [pc, #96]	; (8005d24 <TIM_OC4_SetConfig+0xc0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d00f      	beq.n	8005ce8 <TIM_OC4_SetConfig+0x84>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <TIM_OC4_SetConfig+0xc4>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d00b      	beq.n	8005ce8 <TIM_OC4_SetConfig+0x84>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	4a16      	ldr	r2, [pc, #88]	; (8005d2c <TIM_OC4_SetConfig+0xc8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d007      	beq.n	8005ce8 <TIM_OC4_SetConfig+0x84>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	4a15      	ldr	r2, [pc, #84]	; (8005d30 <TIM_OC4_SetConfig+0xcc>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d003      	beq.n	8005ce8 <TIM_OC4_SetConfig+0x84>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a14      	ldr	r2, [pc, #80]	; (8005d34 <TIM_OC4_SetConfig+0xd0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d109      	bne.n	8005cfc <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	019b      	lsls	r3, r3, #6
 8005cf6:	697a      	ldr	r2, [r7, #20]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	621a      	str	r2, [r3, #32]
}
 8005d16:	bf00      	nop
 8005d18:	371c      	adds	r7, #28
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	40012c00 	.word	0x40012c00
 8005d28:	40013400 	.word	0x40013400
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40014400 	.word	0x40014400
 8005d34:	40014800 	.word	0x40014800

08005d38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	041b      	lsls	r3, r3, #16
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a17      	ldr	r2, [pc, #92]	; (8005dec <TIM_OC5_SetConfig+0xb4>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d00f      	beq.n	8005db2 <TIM_OC5_SetConfig+0x7a>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a16      	ldr	r2, [pc, #88]	; (8005df0 <TIM_OC5_SetConfig+0xb8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00b      	beq.n	8005db2 <TIM_OC5_SetConfig+0x7a>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a15      	ldr	r2, [pc, #84]	; (8005df4 <TIM_OC5_SetConfig+0xbc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d007      	beq.n	8005db2 <TIM_OC5_SetConfig+0x7a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a14      	ldr	r2, [pc, #80]	; (8005df8 <TIM_OC5_SetConfig+0xc0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d003      	beq.n	8005db2 <TIM_OC5_SetConfig+0x7a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a13      	ldr	r2, [pc, #76]	; (8005dfc <TIM_OC5_SetConfig+0xc4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d109      	bne.n	8005dc6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005db8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68fa      	ldr	r2, [r7, #12]
 8005dd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	685a      	ldr	r2, [r3, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	621a      	str	r2, [r3, #32]
}
 8005de0:	bf00      	nop
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	40012c00 	.word	0x40012c00
 8005df0:	40013400 	.word	0x40013400
 8005df4:	40014000 	.word	0x40014000
 8005df8:	40014400 	.word	0x40014400
 8005dfc:	40014800 	.word	0x40014800

08005e00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b087      	sub	sp, #28
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a1b      	ldr	r3, [r3, #32]
 8005e14:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	021b      	lsls	r3, r3, #8
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	051b      	lsls	r3, r3, #20
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	4a18      	ldr	r2, [pc, #96]	; (8005eb8 <TIM_OC6_SetConfig+0xb8>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d00f      	beq.n	8005e7c <TIM_OC6_SetConfig+0x7c>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	4a17      	ldr	r2, [pc, #92]	; (8005ebc <TIM_OC6_SetConfig+0xbc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d00b      	beq.n	8005e7c <TIM_OC6_SetConfig+0x7c>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a16      	ldr	r2, [pc, #88]	; (8005ec0 <TIM_OC6_SetConfig+0xc0>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d007      	beq.n	8005e7c <TIM_OC6_SetConfig+0x7c>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	4a15      	ldr	r2, [pc, #84]	; (8005ec4 <TIM_OC6_SetConfig+0xc4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d003      	beq.n	8005e7c <TIM_OC6_SetConfig+0x7c>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a14      	ldr	r2, [pc, #80]	; (8005ec8 <TIM_OC6_SetConfig+0xc8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d109      	bne.n	8005e90 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	029b      	lsls	r3, r3, #10
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	697a      	ldr	r2, [r7, #20]
 8005e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685a      	ldr	r2, [r3, #4]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	621a      	str	r2, [r3, #32]
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
 8005eb6:	bf00      	nop
 8005eb8:	40012c00 	.word	0x40012c00
 8005ebc:	40013400 	.word	0x40013400
 8005ec0:	40014000 	.word	0x40014000
 8005ec4:	40014400 	.word	0x40014400
 8005ec8:	40014800 	.word	0x40014800

08005ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b087      	sub	sp, #28
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a1b      	ldr	r3, [r3, #32]
 8005edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	f023 0201 	bic.w	r2, r3, #1
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f023 030a 	bic.w	r3, r3, #10
 8005f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	621a      	str	r2, [r3, #32]
}
 8005f1e:	bf00      	nop
 8005f20:	371c      	adds	r7, #28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b087      	sub	sp, #28
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	60f8      	str	r0, [r7, #12]
 8005f32:	60b9      	str	r1, [r7, #8]
 8005f34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6a1b      	ldr	r3, [r3, #32]
 8005f3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	f023 0210 	bic.w	r2, r3, #16
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	699b      	ldr	r3, [r3, #24]
 8005f4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	031b      	lsls	r3, r3, #12
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f66:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	693a      	ldr	r2, [r7, #16]
 8005f76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr

08005f8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f8a:	b480      	push	{r7}
 8005f8c:	b085      	sub	sp, #20
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
 8005f92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f043 0307 	orr.w	r3, r3, #7
 8005fac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	609a      	str	r2, [r3, #8]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	021a      	lsls	r2, r3, #8
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	609a      	str	r2, [r3, #8]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006000:	b480      	push	{r7}
 8006002:	b087      	sub	sp, #28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	f003 031f 	and.w	r3, r3, #31
 8006012:	2201      	movs	r2, #1
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a1a      	ldr	r2, [r3, #32]
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	43db      	mvns	r3, r3
 8006022:	401a      	ands	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6a1a      	ldr	r2, [r3, #32]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	f003 031f 	and.w	r3, r3, #31
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	fa01 f303 	lsl.w	r3, r1, r3
 8006038:	431a      	orrs	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	bf00      	nop
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
	...

0800604c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800605c:	2b01      	cmp	r3, #1
 800605e:	d101      	bne.n	8006064 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006060:	2302      	movs	r3, #2
 8006062:	e068      	b.n	8006136 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a2e      	ldr	r2, [pc, #184]	; (8006144 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d004      	beq.n	8006098 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a2d      	ldr	r2, [pc, #180]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d108      	bne.n	80060aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800609e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a1e      	ldr	r2, [pc, #120]	; (8006144 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d01d      	beq.n	800610a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d6:	d018      	beq.n	800610a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a1b      	ldr	r2, [pc, #108]	; (800614c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d013      	beq.n	800610a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a1a      	ldr	r2, [pc, #104]	; (8006150 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d00e      	beq.n	800610a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a18      	ldr	r2, [pc, #96]	; (8006154 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d009      	beq.n	800610a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a13      	ldr	r2, [pc, #76]	; (8006148 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d004      	beq.n	800610a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a14      	ldr	r2, [pc, #80]	; (8006158 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d10c      	bne.n	8006124 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800610a:	68bb      	ldr	r3, [r7, #8]
 800610c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006110:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	4313      	orrs	r3, r2
 800611a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68ba      	ldr	r2, [r7, #8]
 8006122:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3714      	adds	r7, #20
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	40012c00 	.word	0x40012c00
 8006148:	40013400 	.word	0x40013400
 800614c:	40000400 	.word	0x40000400
 8006150:	40000800 	.word	0x40000800
 8006154:	40000c00 	.word	0x40000c00
 8006158:	40014000 	.word	0x40014000

0800615c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800615c:	b480      	push	{r7}
 800615e:	b085      	sub	sp, #20
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006166:	2300      	movs	r3, #0
 8006168:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006170:	2b01      	cmp	r3, #1
 8006172:	d101      	bne.n	8006178 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006174:	2302      	movs	r3, #2
 8006176:	e065      	b.n	8006244 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	695b      	ldr	r3, [r3, #20]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	4313      	orrs	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	041b      	lsls	r3, r3, #16
 80061ee:	4313      	orrs	r3, r2
 80061f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a16      	ldr	r2, [pc, #88]	; (8006250 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d004      	beq.n	8006206 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a14      	ldr	r2, [pc, #80]	; (8006254 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d115      	bne.n	8006232 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	051b      	lsls	r3, r3, #20
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	4313      	orrs	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	40012c00 	.word	0x40012c00
 8006254:	40013400 	.word	0x40013400

08006258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e040      	b.n	80062ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800626e:	2b00      	cmp	r3, #0
 8006270:	d106      	bne.n	8006280 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fb fc4a 	bl	8001b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2224      	movs	r2, #36	; 0x24
 8006284:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 0201 	bic.w	r2, r2, #1
 8006294:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 fc34 	bl	8006b0c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 f979 	bl	800659c <UART_SetConfig>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e01b      	b.n	80062ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689a      	ldr	r2, [r3, #8]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	681a      	ldr	r2, [r3, #0]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f042 0201 	orr.w	r2, r2, #1
 80062e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fcb3 	bl	8006c50 <UART_CheckIdleState>
 80062ea:	4603      	mov	r3, r0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3708      	adds	r7, #8
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b08a      	sub	sp, #40	; 0x28
 80062f8:	af02      	add	r7, sp, #8
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	603b      	str	r3, [r7, #0]
 8006300:	4613      	mov	r3, r2
 8006302:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006308:	2b20      	cmp	r3, #32
 800630a:	d178      	bne.n	80063fe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <HAL_UART_Transmit+0x24>
 8006312:	88fb      	ldrh	r3, [r7, #6]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d101      	bne.n	800631c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006318:	2301      	movs	r3, #1
 800631a:	e071      	b.n	8006400 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2221      	movs	r2, #33	; 0x21
 8006328:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800632a:	f7fb fde3 	bl	8001ef4 <HAL_GetTick>
 800632e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	88fa      	ldrh	r2, [r7, #6]
 8006334:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	88fa      	ldrh	r2, [r7, #6]
 800633c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	689b      	ldr	r3, [r3, #8]
 8006344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006348:	d108      	bne.n	800635c <HAL_UART_Transmit+0x68>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d104      	bne.n	800635c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006352:	2300      	movs	r3, #0
 8006354:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	e003      	b.n	8006364 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006360:	2300      	movs	r3, #0
 8006362:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006364:	e030      	b.n	80063c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2200      	movs	r2, #0
 800636e:	2180      	movs	r1, #128	; 0x80
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 fd15 	bl	8006da0 <UART_WaitOnFlagUntilTimeout>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d004      	beq.n	8006386 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2220      	movs	r2, #32
 8006380:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e03c      	b.n	8006400 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d10b      	bne.n	80063a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	881a      	ldrh	r2, [r3, #0]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006398:	b292      	uxth	r2, r2
 800639a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	3302      	adds	r3, #2
 80063a0:	61bb      	str	r3, [r7, #24]
 80063a2:	e008      	b.n	80063b6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063a4:	69fb      	ldr	r3, [r7, #28]
 80063a6:	781a      	ldrb	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	b292      	uxth	r2, r2
 80063ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	3301      	adds	r3, #1
 80063b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1c8      	bne.n	8006366 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2200      	movs	r2, #0
 80063dc:	2140      	movs	r1, #64	; 0x40
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 fcde 	bl	8006da0 <UART_WaitOnFlagUntilTimeout>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d004      	beq.n	80063f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2220      	movs	r2, #32
 80063ee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80063f0:	2303      	movs	r3, #3
 80063f2:	e005      	b.n	8006400 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2220      	movs	r2, #32
 80063f8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	e000      	b.n	8006400 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80063fe:	2302      	movs	r3, #2
  }
}
 8006400:	4618      	mov	r0, r3
 8006402:	3720      	adds	r7, #32
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b08a      	sub	sp, #40	; 0x28
 800640c:	af02      	add	r7, sp, #8
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	603b      	str	r3, [r7, #0]
 8006414:	4613      	mov	r3, r2
 8006416:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800641e:	2b20      	cmp	r3, #32
 8006420:	f040 80b6 	bne.w	8006590 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d002      	beq.n	8006430 <HAL_UART_Receive+0x28>
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d101      	bne.n	8006434 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e0ae      	b.n	8006592 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2200      	movs	r2, #0
 8006438:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2222      	movs	r2, #34	; 0x22
 8006440:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800644a:	f7fb fd53 	bl	8001ef4 <HAL_GetTick>
 800644e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	88fa      	ldrh	r2, [r7, #6]
 8006454:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	88fa      	ldrh	r2, [r7, #6]
 800645c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006468:	d10e      	bne.n	8006488 <HAL_UART_Receive+0x80>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d105      	bne.n	800647e <HAL_UART_Receive+0x76>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006478:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800647c:	e02d      	b.n	80064da <HAL_UART_Receive+0xd2>
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	22ff      	movs	r2, #255	; 0xff
 8006482:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006486:	e028      	b.n	80064da <HAL_UART_Receive+0xd2>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10d      	bne.n	80064ac <HAL_UART_Receive+0xa4>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d104      	bne.n	80064a2 <HAL_UART_Receive+0x9a>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	22ff      	movs	r2, #255	; 0xff
 800649c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064a0:	e01b      	b.n	80064da <HAL_UART_Receive+0xd2>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	227f      	movs	r2, #127	; 0x7f
 80064a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064aa:	e016      	b.n	80064da <HAL_UART_Receive+0xd2>
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064b4:	d10d      	bne.n	80064d2 <HAL_UART_Receive+0xca>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <HAL_UART_Receive+0xc0>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	227f      	movs	r2, #127	; 0x7f
 80064c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064c6:	e008      	b.n	80064da <HAL_UART_Receive+0xd2>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	223f      	movs	r2, #63	; 0x3f
 80064cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80064d0:	e003      	b.n	80064da <HAL_UART_Receive+0xd2>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064e0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ea:	d108      	bne.n	80064fe <HAL_UART_Receive+0xf6>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	691b      	ldr	r3, [r3, #16]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d104      	bne.n	80064fe <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	e003      	b.n	8006506 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006502:	2300      	movs	r3, #0
 8006504:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006506:	e037      	b.n	8006578 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	9300      	str	r3, [sp, #0]
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	2200      	movs	r2, #0
 8006510:	2120      	movs	r1, #32
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 fc44 	bl	8006da0 <UART_WaitOnFlagUntilTimeout>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d005      	beq.n	800652a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2220      	movs	r2, #32
 8006522:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006526:	2303      	movs	r3, #3
 8006528:	e033      	b.n	8006592 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10c      	bne.n	800654a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006536:	b29a      	uxth	r2, r3
 8006538:	8a7b      	ldrh	r3, [r7, #18]
 800653a:	4013      	ands	r3, r2
 800653c:	b29a      	uxth	r2, r3
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	3302      	adds	r3, #2
 8006546:	61bb      	str	r3, [r7, #24]
 8006548:	e00d      	b.n	8006566 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006550:	b29b      	uxth	r3, r3
 8006552:	b2da      	uxtb	r2, r3
 8006554:	8a7b      	ldrh	r3, [r7, #18]
 8006556:	b2db      	uxtb	r3, r3
 8006558:	4013      	ands	r3, r2
 800655a:	b2da      	uxtb	r2, r3
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	3301      	adds	r3, #1
 8006564:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800656c:	b29b      	uxth	r3, r3
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800657e:	b29b      	uxth	r3, r3
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1c1      	bne.n	8006508 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800658c:	2300      	movs	r3, #0
 800658e:	e000      	b.n	8006592 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006590:	2302      	movs	r3, #2
  }
}
 8006592:	4618      	mov	r0, r3
 8006594:	3720      	adds	r7, #32
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
	...

0800659c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800659c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065a0:	b08a      	sub	sp, #40	; 0x28
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	431a      	orrs	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	431a      	orrs	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	4ba4      	ldr	r3, [pc, #656]	; (800685c <UART_SetConfig+0x2c0>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	6812      	ldr	r2, [r2, #0]
 80065d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065d4:	430b      	orrs	r3, r1
 80065d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a99      	ldr	r2, [pc, #612]	; (8006860 <UART_SetConfig+0x2c4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d004      	beq.n	8006608 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006604:	4313      	orrs	r3, r2
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006618:	430a      	orrs	r2, r1
 800661a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a90      	ldr	r2, [pc, #576]	; (8006864 <UART_SetConfig+0x2c8>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d126      	bne.n	8006674 <UART_SetConfig+0xd8>
 8006626:	4b90      	ldr	r3, [pc, #576]	; (8006868 <UART_SetConfig+0x2cc>)
 8006628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	2b03      	cmp	r3, #3
 8006632:	d81b      	bhi.n	800666c <UART_SetConfig+0xd0>
 8006634:	a201      	add	r2, pc, #4	; (adr r2, 800663c <UART_SetConfig+0xa0>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	0800664d 	.word	0x0800664d
 8006640:	0800665d 	.word	0x0800665d
 8006644:	08006655 	.word	0x08006655
 8006648:	08006665 	.word	0x08006665
 800664c:	2301      	movs	r3, #1
 800664e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006652:	e116      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006654:	2302      	movs	r3, #2
 8006656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800665a:	e112      	b.n	8006882 <UART_SetConfig+0x2e6>
 800665c:	2304      	movs	r3, #4
 800665e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006662:	e10e      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006664:	2308      	movs	r3, #8
 8006666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800666a:	e10a      	b.n	8006882 <UART_SetConfig+0x2e6>
 800666c:	2310      	movs	r3, #16
 800666e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006672:	e106      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a7c      	ldr	r2, [pc, #496]	; (800686c <UART_SetConfig+0x2d0>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d138      	bne.n	80066f0 <UART_SetConfig+0x154>
 800667e:	4b7a      	ldr	r3, [pc, #488]	; (8006868 <UART_SetConfig+0x2cc>)
 8006680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006684:	f003 030c 	and.w	r3, r3, #12
 8006688:	2b0c      	cmp	r3, #12
 800668a:	d82d      	bhi.n	80066e8 <UART_SetConfig+0x14c>
 800668c:	a201      	add	r2, pc, #4	; (adr r2, 8006694 <UART_SetConfig+0xf8>)
 800668e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006692:	bf00      	nop
 8006694:	080066c9 	.word	0x080066c9
 8006698:	080066e9 	.word	0x080066e9
 800669c:	080066e9 	.word	0x080066e9
 80066a0:	080066e9 	.word	0x080066e9
 80066a4:	080066d9 	.word	0x080066d9
 80066a8:	080066e9 	.word	0x080066e9
 80066ac:	080066e9 	.word	0x080066e9
 80066b0:	080066e9 	.word	0x080066e9
 80066b4:	080066d1 	.word	0x080066d1
 80066b8:	080066e9 	.word	0x080066e9
 80066bc:	080066e9 	.word	0x080066e9
 80066c0:	080066e9 	.word	0x080066e9
 80066c4:	080066e1 	.word	0x080066e1
 80066c8:	2300      	movs	r3, #0
 80066ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ce:	e0d8      	b.n	8006882 <UART_SetConfig+0x2e6>
 80066d0:	2302      	movs	r3, #2
 80066d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d6:	e0d4      	b.n	8006882 <UART_SetConfig+0x2e6>
 80066d8:	2304      	movs	r3, #4
 80066da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066de:	e0d0      	b.n	8006882 <UART_SetConfig+0x2e6>
 80066e0:	2308      	movs	r3, #8
 80066e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066e6:	e0cc      	b.n	8006882 <UART_SetConfig+0x2e6>
 80066e8:	2310      	movs	r3, #16
 80066ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ee:	e0c8      	b.n	8006882 <UART_SetConfig+0x2e6>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a5e      	ldr	r2, [pc, #376]	; (8006870 <UART_SetConfig+0x2d4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d125      	bne.n	8006746 <UART_SetConfig+0x1aa>
 80066fa:	4b5b      	ldr	r3, [pc, #364]	; (8006868 <UART_SetConfig+0x2cc>)
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006700:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006704:	2b30      	cmp	r3, #48	; 0x30
 8006706:	d016      	beq.n	8006736 <UART_SetConfig+0x19a>
 8006708:	2b30      	cmp	r3, #48	; 0x30
 800670a:	d818      	bhi.n	800673e <UART_SetConfig+0x1a2>
 800670c:	2b20      	cmp	r3, #32
 800670e:	d00a      	beq.n	8006726 <UART_SetConfig+0x18a>
 8006710:	2b20      	cmp	r3, #32
 8006712:	d814      	bhi.n	800673e <UART_SetConfig+0x1a2>
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <UART_SetConfig+0x182>
 8006718:	2b10      	cmp	r3, #16
 800671a:	d008      	beq.n	800672e <UART_SetConfig+0x192>
 800671c:	e00f      	b.n	800673e <UART_SetConfig+0x1a2>
 800671e:	2300      	movs	r3, #0
 8006720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006724:	e0ad      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006726:	2302      	movs	r3, #2
 8006728:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672c:	e0a9      	b.n	8006882 <UART_SetConfig+0x2e6>
 800672e:	2304      	movs	r3, #4
 8006730:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006734:	e0a5      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006736:	2308      	movs	r3, #8
 8006738:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673c:	e0a1      	b.n	8006882 <UART_SetConfig+0x2e6>
 800673e:	2310      	movs	r3, #16
 8006740:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006744:	e09d      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a4a      	ldr	r2, [pc, #296]	; (8006874 <UART_SetConfig+0x2d8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d125      	bne.n	800679c <UART_SetConfig+0x200>
 8006750:	4b45      	ldr	r3, [pc, #276]	; (8006868 <UART_SetConfig+0x2cc>)
 8006752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006756:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800675a:	2bc0      	cmp	r3, #192	; 0xc0
 800675c:	d016      	beq.n	800678c <UART_SetConfig+0x1f0>
 800675e:	2bc0      	cmp	r3, #192	; 0xc0
 8006760:	d818      	bhi.n	8006794 <UART_SetConfig+0x1f8>
 8006762:	2b80      	cmp	r3, #128	; 0x80
 8006764:	d00a      	beq.n	800677c <UART_SetConfig+0x1e0>
 8006766:	2b80      	cmp	r3, #128	; 0x80
 8006768:	d814      	bhi.n	8006794 <UART_SetConfig+0x1f8>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <UART_SetConfig+0x1d8>
 800676e:	2b40      	cmp	r3, #64	; 0x40
 8006770:	d008      	beq.n	8006784 <UART_SetConfig+0x1e8>
 8006772:	e00f      	b.n	8006794 <UART_SetConfig+0x1f8>
 8006774:	2300      	movs	r3, #0
 8006776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677a:	e082      	b.n	8006882 <UART_SetConfig+0x2e6>
 800677c:	2302      	movs	r3, #2
 800677e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006782:	e07e      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006784:	2304      	movs	r3, #4
 8006786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678a:	e07a      	b.n	8006882 <UART_SetConfig+0x2e6>
 800678c:	2308      	movs	r3, #8
 800678e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006792:	e076      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006794:	2310      	movs	r3, #16
 8006796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679a:	e072      	b.n	8006882 <UART_SetConfig+0x2e6>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a35      	ldr	r2, [pc, #212]	; (8006878 <UART_SetConfig+0x2dc>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d12a      	bne.n	80067fc <UART_SetConfig+0x260>
 80067a6:	4b30      	ldr	r3, [pc, #192]	; (8006868 <UART_SetConfig+0x2cc>)
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067b4:	d01a      	beq.n	80067ec <UART_SetConfig+0x250>
 80067b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067ba:	d81b      	bhi.n	80067f4 <UART_SetConfig+0x258>
 80067bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c0:	d00c      	beq.n	80067dc <UART_SetConfig+0x240>
 80067c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067c6:	d815      	bhi.n	80067f4 <UART_SetConfig+0x258>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d003      	beq.n	80067d4 <UART_SetConfig+0x238>
 80067cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d0:	d008      	beq.n	80067e4 <UART_SetConfig+0x248>
 80067d2:	e00f      	b.n	80067f4 <UART_SetConfig+0x258>
 80067d4:	2300      	movs	r3, #0
 80067d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067da:	e052      	b.n	8006882 <UART_SetConfig+0x2e6>
 80067dc:	2302      	movs	r3, #2
 80067de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e2:	e04e      	b.n	8006882 <UART_SetConfig+0x2e6>
 80067e4:	2304      	movs	r3, #4
 80067e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ea:	e04a      	b.n	8006882 <UART_SetConfig+0x2e6>
 80067ec:	2308      	movs	r3, #8
 80067ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f2:	e046      	b.n	8006882 <UART_SetConfig+0x2e6>
 80067f4:	2310      	movs	r3, #16
 80067f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fa:	e042      	b.n	8006882 <UART_SetConfig+0x2e6>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a17      	ldr	r2, [pc, #92]	; (8006860 <UART_SetConfig+0x2c4>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d13a      	bne.n	800687c <UART_SetConfig+0x2e0>
 8006806:	4b18      	ldr	r3, [pc, #96]	; (8006868 <UART_SetConfig+0x2cc>)
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006810:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006814:	d01a      	beq.n	800684c <UART_SetConfig+0x2b0>
 8006816:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800681a:	d81b      	bhi.n	8006854 <UART_SetConfig+0x2b8>
 800681c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006820:	d00c      	beq.n	800683c <UART_SetConfig+0x2a0>
 8006822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006826:	d815      	bhi.n	8006854 <UART_SetConfig+0x2b8>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <UART_SetConfig+0x298>
 800682c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006830:	d008      	beq.n	8006844 <UART_SetConfig+0x2a8>
 8006832:	e00f      	b.n	8006854 <UART_SetConfig+0x2b8>
 8006834:	2300      	movs	r3, #0
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800683a:	e022      	b.n	8006882 <UART_SetConfig+0x2e6>
 800683c:	2302      	movs	r3, #2
 800683e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006842:	e01e      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006844:	2304      	movs	r3, #4
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684a:	e01a      	b.n	8006882 <UART_SetConfig+0x2e6>
 800684c:	2308      	movs	r3, #8
 800684e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006852:	e016      	b.n	8006882 <UART_SetConfig+0x2e6>
 8006854:	2310      	movs	r3, #16
 8006856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800685a:	e012      	b.n	8006882 <UART_SetConfig+0x2e6>
 800685c:	efff69f3 	.word	0xefff69f3
 8006860:	40008000 	.word	0x40008000
 8006864:	40013800 	.word	0x40013800
 8006868:	40021000 	.word	0x40021000
 800686c:	40004400 	.word	0x40004400
 8006870:	40004800 	.word	0x40004800
 8006874:	40004c00 	.word	0x40004c00
 8006878:	40005000 	.word	0x40005000
 800687c:	2310      	movs	r3, #16
 800687e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a9f      	ldr	r2, [pc, #636]	; (8006b04 <UART_SetConfig+0x568>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d17a      	bne.n	8006982 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800688c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006890:	2b08      	cmp	r3, #8
 8006892:	d824      	bhi.n	80068de <UART_SetConfig+0x342>
 8006894:	a201      	add	r2, pc, #4	; (adr r2, 800689c <UART_SetConfig+0x300>)
 8006896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689a:	bf00      	nop
 800689c:	080068c1 	.word	0x080068c1
 80068a0:	080068df 	.word	0x080068df
 80068a4:	080068c9 	.word	0x080068c9
 80068a8:	080068df 	.word	0x080068df
 80068ac:	080068cf 	.word	0x080068cf
 80068b0:	080068df 	.word	0x080068df
 80068b4:	080068df 	.word	0x080068df
 80068b8:	080068df 	.word	0x080068df
 80068bc:	080068d7 	.word	0x080068d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068c0:	f7fd fdde 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 80068c4:	61f8      	str	r0, [r7, #28]
        break;
 80068c6:	e010      	b.n	80068ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068c8:	4b8f      	ldr	r3, [pc, #572]	; (8006b08 <UART_SetConfig+0x56c>)
 80068ca:	61fb      	str	r3, [r7, #28]
        break;
 80068cc:	e00d      	b.n	80068ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ce:	f7fd fd3f 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 80068d2:	61f8      	str	r0, [r7, #28]
        break;
 80068d4:	e009      	b.n	80068ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068da:	61fb      	str	r3, [r7, #28]
        break;
 80068dc:	e005      	b.n	80068ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80068de:	2300      	movs	r3, #0
 80068e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f000 80fb 	beq.w	8006ae8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	4613      	mov	r3, r2
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	4413      	add	r3, r2
 80068fc:	69fa      	ldr	r2, [r7, #28]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d305      	bcc.n	800690e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006908:	69fa      	ldr	r2, [r7, #28]
 800690a:	429a      	cmp	r2, r3
 800690c:	d903      	bls.n	8006916 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006914:	e0e8      	b.n	8006ae8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2200      	movs	r2, #0
 800691a:	461c      	mov	r4, r3
 800691c:	4615      	mov	r5, r2
 800691e:	f04f 0200 	mov.w	r2, #0
 8006922:	f04f 0300 	mov.w	r3, #0
 8006926:	022b      	lsls	r3, r5, #8
 8006928:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800692c:	0222      	lsls	r2, r4, #8
 800692e:	68f9      	ldr	r1, [r7, #12]
 8006930:	6849      	ldr	r1, [r1, #4]
 8006932:	0849      	lsrs	r1, r1, #1
 8006934:	2000      	movs	r0, #0
 8006936:	4688      	mov	r8, r1
 8006938:	4681      	mov	r9, r0
 800693a:	eb12 0a08 	adds.w	sl, r2, r8
 800693e:	eb43 0b09 	adc.w	fp, r3, r9
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	2200      	movs	r2, #0
 8006948:	603b      	str	r3, [r7, #0]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006950:	4650      	mov	r0, sl
 8006952:	4659      	mov	r1, fp
 8006954:	f7fa f892 	bl	8000a7c <__aeabi_uldivmod>
 8006958:	4602      	mov	r2, r0
 800695a:	460b      	mov	r3, r1
 800695c:	4613      	mov	r3, r2
 800695e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006966:	d308      	bcc.n	800697a <UART_SetConfig+0x3de>
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800696e:	d204      	bcs.n	800697a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	60da      	str	r2, [r3, #12]
 8006978:	e0b6      	b.n	8006ae8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006980:	e0b2      	b.n	8006ae8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800698a:	d15e      	bne.n	8006a4a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800698c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006990:	2b08      	cmp	r3, #8
 8006992:	d828      	bhi.n	80069e6 <UART_SetConfig+0x44a>
 8006994:	a201      	add	r2, pc, #4	; (adr r2, 800699c <UART_SetConfig+0x400>)
 8006996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699a:	bf00      	nop
 800699c:	080069c1 	.word	0x080069c1
 80069a0:	080069c9 	.word	0x080069c9
 80069a4:	080069d1 	.word	0x080069d1
 80069a8:	080069e7 	.word	0x080069e7
 80069ac:	080069d7 	.word	0x080069d7
 80069b0:	080069e7 	.word	0x080069e7
 80069b4:	080069e7 	.word	0x080069e7
 80069b8:	080069e7 	.word	0x080069e7
 80069bc:	080069df 	.word	0x080069df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069c0:	f7fd fd5e 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 80069c4:	61f8      	str	r0, [r7, #28]
        break;
 80069c6:	e014      	b.n	80069f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069c8:	f7fd fd70 	bl	80044ac <HAL_RCC_GetPCLK2Freq>
 80069cc:	61f8      	str	r0, [r7, #28]
        break;
 80069ce:	e010      	b.n	80069f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069d0:	4b4d      	ldr	r3, [pc, #308]	; (8006b08 <UART_SetConfig+0x56c>)
 80069d2:	61fb      	str	r3, [r7, #28]
        break;
 80069d4:	e00d      	b.n	80069f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069d6:	f7fd fcbb 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 80069da:	61f8      	str	r0, [r7, #28]
        break;
 80069dc:	e009      	b.n	80069f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069e2:	61fb      	str	r3, [r7, #28]
        break;
 80069e4:	e005      	b.n	80069f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d077      	beq.n	8006ae8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	005a      	lsls	r2, r3, #1
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	085b      	lsrs	r3, r3, #1
 8006a02:	441a      	add	r2, r3
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	2b0f      	cmp	r3, #15
 8006a12:	d916      	bls.n	8006a42 <UART_SetConfig+0x4a6>
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a1a:	d212      	bcs.n	8006a42 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f023 030f 	bic.w	r3, r3, #15
 8006a24:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	085b      	lsrs	r3, r3, #1
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	f003 0307 	and.w	r3, r3, #7
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	8afb      	ldrh	r3, [r7, #22]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	8afa      	ldrh	r2, [r7, #22]
 8006a3e:	60da      	str	r2, [r3, #12]
 8006a40:	e052      	b.n	8006ae8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a48:	e04e      	b.n	8006ae8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a4e:	2b08      	cmp	r3, #8
 8006a50:	d827      	bhi.n	8006aa2 <UART_SetConfig+0x506>
 8006a52:	a201      	add	r2, pc, #4	; (adr r2, 8006a58 <UART_SetConfig+0x4bc>)
 8006a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a58:	08006a7d 	.word	0x08006a7d
 8006a5c:	08006a85 	.word	0x08006a85
 8006a60:	08006a8d 	.word	0x08006a8d
 8006a64:	08006aa3 	.word	0x08006aa3
 8006a68:	08006a93 	.word	0x08006a93
 8006a6c:	08006aa3 	.word	0x08006aa3
 8006a70:	08006aa3 	.word	0x08006aa3
 8006a74:	08006aa3 	.word	0x08006aa3
 8006a78:	08006a9b 	.word	0x08006a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a7c:	f7fd fd00 	bl	8004480 <HAL_RCC_GetPCLK1Freq>
 8006a80:	61f8      	str	r0, [r7, #28]
        break;
 8006a82:	e014      	b.n	8006aae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a84:	f7fd fd12 	bl	80044ac <HAL_RCC_GetPCLK2Freq>
 8006a88:	61f8      	str	r0, [r7, #28]
        break;
 8006a8a:	e010      	b.n	8006aae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a8c:	4b1e      	ldr	r3, [pc, #120]	; (8006b08 <UART_SetConfig+0x56c>)
 8006a8e:	61fb      	str	r3, [r7, #28]
        break;
 8006a90:	e00d      	b.n	8006aae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a92:	f7fd fc5d 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 8006a96:	61f8      	str	r0, [r7, #28]
        break;
 8006a98:	e009      	b.n	8006aae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a9e:	61fb      	str	r3, [r7, #28]
        break;
 8006aa0:	e005      	b.n	8006aae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006aac:	bf00      	nop
    }

    if (pclk != 0U)
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d019      	beq.n	8006ae8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	085a      	lsrs	r2, r3, #1
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	441a      	add	r2, r3
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ac6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	2b0f      	cmp	r3, #15
 8006acc:	d909      	bls.n	8006ae2 <UART_SetConfig+0x546>
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ad4:	d205      	bcs.n	8006ae2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	60da      	str	r2, [r3, #12]
 8006ae0:	e002      	b.n	8006ae8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006af4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3728      	adds	r7, #40	; 0x28
 8006afc:	46bd      	mov	sp, r7
 8006afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b02:	bf00      	nop
 8006b04:	40008000 	.word	0x40008000
 8006b08:	00f42400 	.word	0x00f42400

08006b0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b18:	f003 0308 	and.w	r3, r3, #8
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d00a      	beq.n	8006b36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00a      	beq.n	8006b58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	430a      	orrs	r2, r1
 8006b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	f003 0302 	and.w	r3, r3, #2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00a      	beq.n	8006b7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	430a      	orrs	r2, r1
 8006b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	f003 0304 	and.w	r3, r3, #4
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	430a      	orrs	r2, r1
 8006b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba0:	f003 0310 	and.w	r3, r3, #16
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00a      	beq.n	8006bbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	f003 0320 	and.w	r3, r3, #32
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d01a      	beq.n	8006c22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c0a:	d10a      	bne.n	8006c22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	605a      	str	r2, [r3, #4]
  }
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b098      	sub	sp, #96	; 0x60
 8006c54:	af02      	add	r7, sp, #8
 8006c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c60:	f7fb f948 	bl	8001ef4 <HAL_GetTick>
 8006c64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 0308 	and.w	r3, r3, #8
 8006c70:	2b08      	cmp	r3, #8
 8006c72:	d12e      	bne.n	8006cd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f88c 	bl	8006da0 <UART_WaitOnFlagUntilTimeout>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d021      	beq.n	8006cd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c96:	e853 3f00 	ldrex	r3, [r3]
 8006c9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cac:	647b      	str	r3, [r7, #68]	; 0x44
 8006cae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cb4:	e841 2300 	strex	r3, r2, [r1]
 8006cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1e6      	bne.n	8006c8e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e062      	b.n	8006d98 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0304 	and.w	r3, r3, #4
 8006cdc:	2b04      	cmp	r3, #4
 8006cde:	d149      	bne.n	8006d74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ce0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f856 	bl	8006da0 <UART_WaitOnFlagUntilTimeout>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d03c      	beq.n	8006d74 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	e853 3f00 	ldrex	r3, [r3]
 8006d06:	623b      	str	r3, [r7, #32]
   return(result);
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	461a      	mov	r2, r3
 8006d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d18:	633b      	str	r3, [r7, #48]	; 0x30
 8006d1a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d20:	e841 2300 	strex	r3, r2, [r1]
 8006d24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1e6      	bne.n	8006cfa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	3308      	adds	r3, #8
 8006d32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	e853 3f00 	ldrex	r3, [r3]
 8006d3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0301 	bic.w	r3, r3, #1
 8006d42:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3308      	adds	r3, #8
 8006d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d4c:	61fa      	str	r2, [r7, #28]
 8006d4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d50:	69b9      	ldr	r1, [r7, #24]
 8006d52:	69fa      	ldr	r2, [r7, #28]
 8006d54:	e841 2300 	strex	r3, r2, [r1]
 8006d58:	617b      	str	r3, [r7, #20]
   return(result);
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1e5      	bne.n	8006d2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2220      	movs	r2, #32
 8006d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e011      	b.n	8006d98 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2220      	movs	r2, #32
 8006d7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3758      	adds	r7, #88	; 0x58
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	603b      	str	r3, [r7, #0]
 8006dac:	4613      	mov	r3, r2
 8006dae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006db0:	e049      	b.n	8006e46 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006db8:	d045      	beq.n	8006e46 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dba:	f7fb f89b 	bl	8001ef4 <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	683b      	ldr	r3, [r7, #0]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d302      	bcc.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e048      	b.n	8006e66 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d031      	beq.n	8006e46 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	69db      	ldr	r3, [r3, #28]
 8006de8:	f003 0308 	and.w	r3, r3, #8
 8006dec:	2b08      	cmp	r3, #8
 8006dee:	d110      	bne.n	8006e12 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2208      	movs	r2, #8
 8006df6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 f838 	bl	8006e6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2208      	movs	r2, #8
 8006e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e029      	b.n	8006e66 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69db      	ldr	r3, [r3, #28]
 8006e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e20:	d111      	bne.n	8006e46 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 f81e 	bl	8006e6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2220      	movs	r2, #32
 8006e36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e00f      	b.n	8006e66 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69da      	ldr	r2, [r3, #28]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	bf0c      	ite	eq
 8006e56:	2301      	moveq	r3, #1
 8006e58:	2300      	movne	r3, #0
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d0a6      	beq.n	8006db2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b095      	sub	sp, #84	; 0x54
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7e:	e853 3f00 	ldrex	r3, [r3]
 8006e82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	461a      	mov	r2, r3
 8006e92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e94:	643b      	str	r3, [r7, #64]	; 0x40
 8006e96:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e9c:	e841 2300 	strex	r3, r2, [r1]
 8006ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1e6      	bne.n	8006e76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3308      	adds	r3, #8
 8006eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	e853 3f00 	ldrex	r3, [r3]
 8006eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	f023 0301 	bic.w	r3, r3, #1
 8006ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ec8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ed0:	e841 2300 	strex	r3, r2, [r1]
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1e5      	bne.n	8006ea8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d118      	bne.n	8006f16 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	f023 0310 	bic.w	r3, r3, #16
 8006ef8:	647b      	str	r3, [r7, #68]	; 0x44
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	461a      	mov	r2, r3
 8006f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f02:	61bb      	str	r3, [r7, #24]
 8006f04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f06:	6979      	ldr	r1, [r7, #20]
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	e841 2300 	strex	r3, r2, [r1]
 8006f0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1e6      	bne.n	8006ee4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2200      	movs	r2, #0
 8006f22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f2a:	bf00      	nop
 8006f2c:	3754      	adds	r7, #84	; 0x54
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
	...

08006f38 <__NVIC_SetPriority>:
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	6039      	str	r1, [r7, #0]
 8006f42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	db0a      	blt.n	8006f62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	b2da      	uxtb	r2, r3
 8006f50:	490c      	ldr	r1, [pc, #48]	; (8006f84 <__NVIC_SetPriority+0x4c>)
 8006f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f56:	0112      	lsls	r2, r2, #4
 8006f58:	b2d2      	uxtb	r2, r2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f60:	e00a      	b.n	8006f78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	4908      	ldr	r1, [pc, #32]	; (8006f88 <__NVIC_SetPriority+0x50>)
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	f003 030f 	and.w	r3, r3, #15
 8006f6e:	3b04      	subs	r3, #4
 8006f70:	0112      	lsls	r2, r2, #4
 8006f72:	b2d2      	uxtb	r2, r2
 8006f74:	440b      	add	r3, r1
 8006f76:	761a      	strb	r2, [r3, #24]
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	e000e100 	.word	0xe000e100
 8006f88:	e000ed00 	.word	0xe000ed00

08006f8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006f90:	2100      	movs	r1, #0
 8006f92:	f06f 0004 	mvn.w	r0, #4
 8006f96:	f7ff ffcf 	bl	8006f38 <__NVIC_SetPriority>
#endif
}
 8006f9a:	bf00      	nop
 8006f9c:	bd80      	pop	{r7, pc}
	...

08006fa0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fa6:	f3ef 8305 	mrs	r3, IPSR
 8006faa:	603b      	str	r3, [r7, #0]
  return(result);
 8006fac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006fb2:	f06f 0305 	mvn.w	r3, #5
 8006fb6:	607b      	str	r3, [r7, #4]
 8006fb8:	e00c      	b.n	8006fd4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006fba:	4b0a      	ldr	r3, [pc, #40]	; (8006fe4 <osKernelInitialize+0x44>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d105      	bne.n	8006fce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006fc2:	4b08      	ldr	r3, [pc, #32]	; (8006fe4 <osKernelInitialize+0x44>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	607b      	str	r3, [r7, #4]
 8006fcc:	e002      	b.n	8006fd4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006fd4:	687b      	ldr	r3, [r7, #4]
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	370c      	adds	r7, #12
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20000230 	.word	0x20000230

08006fe8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fee:	f3ef 8305 	mrs	r3, IPSR
 8006ff2:	603b      	str	r3, [r7, #0]
  return(result);
 8006ff4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d003      	beq.n	8007002 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006ffa:	f06f 0305 	mvn.w	r3, #5
 8006ffe:	607b      	str	r3, [r7, #4]
 8007000:	e010      	b.n	8007024 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007002:	4b0b      	ldr	r3, [pc, #44]	; (8007030 <osKernelStart+0x48>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d109      	bne.n	800701e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800700a:	f7ff ffbf 	bl	8006f8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800700e:	4b08      	ldr	r3, [pc, #32]	; (8007030 <osKernelStart+0x48>)
 8007010:	2202      	movs	r2, #2
 8007012:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007014:	f001 fb88 	bl	8008728 <vTaskStartScheduler>
      stat = osOK;
 8007018:	2300      	movs	r3, #0
 800701a:	607b      	str	r3, [r7, #4]
 800701c:	e002      	b.n	8007024 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800701e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007022:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007024:	687b      	ldr	r3, [r7, #4]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3708      	adds	r7, #8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20000230 	.word	0x20000230

08007034 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007034:	b580      	push	{r7, lr}
 8007036:	b08e      	sub	sp, #56	; 0x38
 8007038:	af04      	add	r7, sp, #16
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007040:	2300      	movs	r3, #0
 8007042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007044:	f3ef 8305 	mrs	r3, IPSR
 8007048:	617b      	str	r3, [r7, #20]
  return(result);
 800704a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800704c:	2b00      	cmp	r3, #0
 800704e:	d17e      	bne.n	800714e <osThreadNew+0x11a>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d07b      	beq.n	800714e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007056:	2380      	movs	r3, #128	; 0x80
 8007058:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800705a:	2318      	movs	r3, #24
 800705c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800705e:	2300      	movs	r3, #0
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007062:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007066:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d045      	beq.n	80070fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d002      	beq.n	800707c <osThreadNew+0x48>
        name = attr->name;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	699b      	ldr	r3, [r3, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d002      	beq.n	800708a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	699b      	ldr	r3, [r3, #24]
 8007088:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d008      	beq.n	80070a2 <osThreadNew+0x6e>
 8007090:	69fb      	ldr	r3, [r7, #28]
 8007092:	2b38      	cmp	r3, #56	; 0x38
 8007094:	d805      	bhi.n	80070a2 <osThreadNew+0x6e>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <osThreadNew+0x72>
        return (NULL);
 80070a2:	2300      	movs	r3, #0
 80070a4:	e054      	b.n	8007150 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	695b      	ldr	r3, [r3, #20]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	089b      	lsrs	r3, r3, #2
 80070b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00e      	beq.n	80070dc <osThreadNew+0xa8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	2b5b      	cmp	r3, #91	; 0x5b
 80070c4:	d90a      	bls.n	80070dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d006      	beq.n	80070dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d002      	beq.n	80070dc <osThreadNew+0xa8>
        mem = 1;
 80070d6:	2301      	movs	r3, #1
 80070d8:	61bb      	str	r3, [r7, #24]
 80070da:	e010      	b.n	80070fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d10c      	bne.n	80070fe <osThreadNew+0xca>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d108      	bne.n	80070fe <osThreadNew+0xca>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d104      	bne.n	80070fe <osThreadNew+0xca>
          mem = 0;
 80070f4:	2300      	movs	r3, #0
 80070f6:	61bb      	str	r3, [r7, #24]
 80070f8:	e001      	b.n	80070fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80070fa:	2300      	movs	r3, #0
 80070fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	2b01      	cmp	r3, #1
 8007102:	d110      	bne.n	8007126 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800710c:	9202      	str	r2, [sp, #8]
 800710e:	9301      	str	r3, [sp, #4]
 8007110:	69fb      	ldr	r3, [r7, #28]
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	6a3a      	ldr	r2, [r7, #32]
 8007118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800711a:	68f8      	ldr	r0, [r7, #12]
 800711c:	f001 f92e 	bl	800837c <xTaskCreateStatic>
 8007120:	4603      	mov	r3, r0
 8007122:	613b      	str	r3, [r7, #16]
 8007124:	e013      	b.n	800714e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d110      	bne.n	800714e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800712c:	6a3b      	ldr	r3, [r7, #32]
 800712e:	b29a      	uxth	r2, r3
 8007130:	f107 0310 	add.w	r3, r7, #16
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	9300      	str	r3, [sp, #0]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f001 f979 	bl	8008436 <xTaskCreate>
 8007144:	4603      	mov	r3, r0
 8007146:	2b01      	cmp	r3, #1
 8007148:	d001      	beq.n	800714e <osThreadNew+0x11a>
            hTask = NULL;
 800714a:	2300      	movs	r3, #0
 800714c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800714e:	693b      	ldr	r3, [r7, #16]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3728      	adds	r7, #40	; 0x28
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007160:	f3ef 8305 	mrs	r3, IPSR
 8007164:	60bb      	str	r3, [r7, #8]
  return(result);
 8007166:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007168:	2b00      	cmp	r3, #0
 800716a:	d003      	beq.n	8007174 <osDelay+0x1c>
    stat = osErrorISR;
 800716c:	f06f 0305 	mvn.w	r3, #5
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	e007      	b.n	8007184 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007174:	2300      	movs	r3, #0
 8007176:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d002      	beq.n	8007184 <osDelay+0x2c>
      vTaskDelay(ticks);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f001 fa9e 	bl	80086c0 <vTaskDelay>
    }
  }

  return (stat);
 8007184:	68fb      	ldr	r3, [r7, #12]
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800718e:	b580      	push	{r7, lr}
 8007190:	b088      	sub	sp, #32
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007196:	2300      	movs	r3, #0
 8007198:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800719a:	f3ef 8305 	mrs	r3, IPSR
 800719e:	60bb      	str	r3, [r7, #8]
  return(result);
 80071a0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d174      	bne.n	8007290 <osMutexNew+0x102>
    if (attr != NULL) {
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <osMutexNew+0x26>
      type = attr->attr_bits;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	61bb      	str	r3, [r7, #24]
 80071b2:	e001      	b.n	80071b8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80071b4:	2300      	movs	r3, #0
 80071b6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	f003 0301 	and.w	r3, r3, #1
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <osMutexNew+0x3a>
      rmtx = 1U;
 80071c2:	2301      	movs	r3, #1
 80071c4:	617b      	str	r3, [r7, #20]
 80071c6:	e001      	b.n	80071cc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	f003 0308 	and.w	r3, r3, #8
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d15c      	bne.n	8007290 <osMutexNew+0x102>
      mem = -1;
 80071d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071da:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d015      	beq.n	800720e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	689b      	ldr	r3, [r3, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d006      	beq.n	80071f8 <osMutexNew+0x6a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	2b4f      	cmp	r3, #79	; 0x4f
 80071f0:	d902      	bls.n	80071f8 <osMutexNew+0x6a>
          mem = 1;
 80071f2:	2301      	movs	r3, #1
 80071f4:	613b      	str	r3, [r7, #16]
 80071f6:	e00c      	b.n	8007212 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d108      	bne.n	8007212 <osMutexNew+0x84>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d104      	bne.n	8007212 <osMutexNew+0x84>
            mem = 0;
 8007208:	2300      	movs	r3, #0
 800720a:	613b      	str	r3, [r7, #16]
 800720c:	e001      	b.n	8007212 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d112      	bne.n	800723e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d007      	beq.n	800722e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	4619      	mov	r1, r3
 8007224:	2004      	movs	r0, #4
 8007226:	f000 fb18 	bl	800785a <xQueueCreateMutexStatic>
 800722a:	61f8      	str	r0, [r7, #28]
 800722c:	e016      	b.n	800725c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	4619      	mov	r1, r3
 8007234:	2001      	movs	r0, #1
 8007236:	f000 fb10 	bl	800785a <xQueueCreateMutexStatic>
 800723a:	61f8      	str	r0, [r7, #28]
 800723c:	e00e      	b.n	800725c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10b      	bne.n	800725c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d004      	beq.n	8007254 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800724a:	2004      	movs	r0, #4
 800724c:	f000 faed 	bl	800782a <xQueueCreateMutex>
 8007250:	61f8      	str	r0, [r7, #28]
 8007252:	e003      	b.n	800725c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007254:	2001      	movs	r0, #1
 8007256:	f000 fae8 	bl	800782a <xQueueCreateMutex>
 800725a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00c      	beq.n	800727c <osMutexNew+0xee>
        if (attr != NULL) {
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <osMutexNew+0xe2>
          name = attr->name;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60fb      	str	r3, [r7, #12]
 800726e:	e001      	b.n	8007274 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007270:	2300      	movs	r3, #0
 8007272:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007274:	68f9      	ldr	r1, [r7, #12]
 8007276:	69f8      	ldr	r0, [r7, #28]
 8007278:	f001 f822 	bl	80082c0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d006      	beq.n	8007290 <osMutexNew+0x102>
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d003      	beq.n	8007290 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	f043 0301 	orr.w	r3, r3, #1
 800728e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007290:	69fb      	ldr	r3, [r7, #28]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3720      	adds	r7, #32
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800729a:	b580      	push	{r7, lr}
 800729c:	b086      	sub	sp, #24
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f023 0301 	bic.w	r3, r3, #1
 80072aa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072b8:	f3ef 8305 	mrs	r3, IPSR
 80072bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80072be:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d003      	beq.n	80072cc <osMutexAcquire+0x32>
    stat = osErrorISR;
 80072c4:	f06f 0305 	mvn.w	r3, #5
 80072c8:	617b      	str	r3, [r7, #20]
 80072ca:	e02c      	b.n	8007326 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d103      	bne.n	80072da <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80072d2:	f06f 0303 	mvn.w	r3, #3
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	e025      	b.n	8007326 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d011      	beq.n	8007304 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6938      	ldr	r0, [r7, #16]
 80072e4:	f000 fb08 	bl	80078f8 <xQueueTakeMutexRecursive>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d01b      	beq.n	8007326 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80072f4:	f06f 0301 	mvn.w	r3, #1
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	e014      	b.n	8007326 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80072fc:	f06f 0302 	mvn.w	r3, #2
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	e010      	b.n	8007326 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6938      	ldr	r0, [r7, #16]
 8007308:	f000 fda6 	bl	8007e58 <xQueueSemaphoreTake>
 800730c:	4603      	mov	r3, r0
 800730e:	2b01      	cmp	r3, #1
 8007310:	d009      	beq.n	8007326 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d003      	beq.n	8007320 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007318:	f06f 0301 	mvn.w	r3, #1
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	e002      	b.n	8007326 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007320:	f06f 0302 	mvn.w	r3, #2
 8007324:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007326:	697b      	ldr	r3, [r7, #20]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3718      	adds	r7, #24
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f023 0301 	bic.w	r3, r3, #1
 800733e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007348:	2300      	movs	r3, #0
 800734a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800734c:	f3ef 8305 	mrs	r3, IPSR
 8007350:	60bb      	str	r3, [r7, #8]
  return(result);
 8007352:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007354:	2b00      	cmp	r3, #0
 8007356:	d003      	beq.n	8007360 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007358:	f06f 0305 	mvn.w	r3, #5
 800735c:	617b      	str	r3, [r7, #20]
 800735e:	e01f      	b.n	80073a0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d103      	bne.n	800736e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007366:	f06f 0303 	mvn.w	r3, #3
 800736a:	617b      	str	r3, [r7, #20]
 800736c:	e018      	b.n	80073a0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d009      	beq.n	8007388 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007374:	6938      	ldr	r0, [r7, #16]
 8007376:	f000 fa8b 	bl	8007890 <xQueueGiveMutexRecursive>
 800737a:	4603      	mov	r3, r0
 800737c:	2b01      	cmp	r3, #1
 800737e:	d00f      	beq.n	80073a0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007380:	f06f 0302 	mvn.w	r3, #2
 8007384:	617b      	str	r3, [r7, #20]
 8007386:	e00b      	b.n	80073a0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007388:	2300      	movs	r3, #0
 800738a:	2200      	movs	r2, #0
 800738c:	2100      	movs	r1, #0
 800738e:	6938      	ldr	r0, [r7, #16]
 8007390:	f000 fae8 	bl	8007964 <xQueueGenericSend>
 8007394:	4603      	mov	r3, r0
 8007396:	2b01      	cmp	r3, #1
 8007398:	d002      	beq.n	80073a0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800739a:	f06f 0302 	mvn.w	r3, #2
 800739e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80073a0:	697b      	ldr	r3, [r7, #20]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3718      	adds	r7, #24
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
	...

080073ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4a07      	ldr	r2, [pc, #28]	; (80073d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80073bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	4a06      	ldr	r2, [pc, #24]	; (80073dc <vApplicationGetIdleTaskMemory+0x30>)
 80073c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2280      	movs	r2, #128	; 0x80
 80073c8:	601a      	str	r2, [r3, #0]
}
 80073ca:	bf00      	nop
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop
 80073d8:	20000234 	.word	0x20000234
 80073dc:	20000290 	.word	0x20000290

080073e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	4a07      	ldr	r2, [pc, #28]	; (800740c <vApplicationGetTimerTaskMemory+0x2c>)
 80073f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	4a06      	ldr	r2, [pc, #24]	; (8007410 <vApplicationGetTimerTaskMemory+0x30>)
 80073f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073fe:	601a      	str	r2, [r3, #0]
}
 8007400:	bf00      	nop
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	20000490 	.word	0x20000490
 8007410:	200004ec 	.word	0x200004ec

08007414 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f103 0208 	add.w	r2, r3, #8
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800742c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f103 0208 	add.w	r2, r3, #8
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f103 0208 	add.w	r2, r3, #8
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007462:	bf00      	nop
 8007464:	370c      	adds	r7, #12
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr

0800746e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800746e:	b480      	push	{r7}
 8007470:	b085      	sub	sp, #20
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	601a      	str	r2, [r3, #0]
}
 80074aa:	bf00      	nop
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074b6:	b480      	push	{r7}
 80074b8:	b085      	sub	sp, #20
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
 80074be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074cc:	d103      	bne.n	80074d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e00c      	b.n	80074f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	3308      	adds	r3, #8
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	e002      	b.n	80074e4 <vListInsert+0x2e>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d2f6      	bcs.n	80074de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	1c5a      	adds	r2, r3, #1
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	601a      	str	r2, [r3, #0]
}
 800751c:	bf00      	nop
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6892      	ldr	r2, [r2, #8]
 800753e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	6852      	ldr	r2, [r2, #4]
 8007548:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	429a      	cmp	r2, r3
 8007552:	d103      	bne.n	800755c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	689a      	ldr	r2, [r3, #8]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	1e5a      	subs	r2, r3, #1
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3714      	adds	r7, #20
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d10a      	bne.n	80075a6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007594:	f383 8811 	msr	BASEPRI, r3
 8007598:	f3bf 8f6f 	isb	sy
 800759c:	f3bf 8f4f 	dsb	sy
 80075a0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80075a2:	bf00      	nop
 80075a4:	e7fe      	b.n	80075a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80075a6:	f002 fb6d 	bl	8009c84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075b2:	68f9      	ldr	r1, [r7, #12]
 80075b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075b6:	fb01 f303 	mul.w	r3, r1, r3
 80075ba:	441a      	add	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d6:	3b01      	subs	r3, #1
 80075d8:	68f9      	ldr	r1, [r7, #12]
 80075da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80075dc:	fb01 f303 	mul.w	r3, r1, r3
 80075e0:	441a      	add	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	22ff      	movs	r2, #255	; 0xff
 80075ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	22ff      	movs	r2, #255	; 0xff
 80075f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d114      	bne.n	8007626 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d01a      	beq.n	800763a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	3310      	adds	r3, #16
 8007608:	4618      	mov	r0, r3
 800760a:	f001 fb17 	bl	8008c3c <xTaskRemoveFromEventList>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d012      	beq.n	800763a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007614:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <xQueueGenericReset+0xcc>)
 8007616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	e009      	b.n	800763a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3310      	adds	r3, #16
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff fef2 	bl	8007414 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	3324      	adds	r3, #36	; 0x24
 8007634:	4618      	mov	r0, r3
 8007636:	f7ff feed 	bl	8007414 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800763a:	f002 fb53 	bl	8009ce4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800763e:	2301      	movs	r3, #1
}
 8007640:	4618      	mov	r0, r3
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	e000ed04 	.word	0xe000ed04

0800764c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08e      	sub	sp, #56	; 0x38
 8007650:	af02      	add	r7, sp, #8
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10a      	bne.n	8007692 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800768e:	bf00      	nop
 8007690:	e7fe      	b.n	8007690 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d002      	beq.n	800769e <xQueueGenericCreateStatic+0x52>
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <xQueueGenericCreateStatic+0x56>
 800769e:	2301      	movs	r3, #1
 80076a0:	e000      	b.n	80076a4 <xQueueGenericCreateStatic+0x58>
 80076a2:	2300      	movs	r3, #0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80076a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ac:	f383 8811 	msr	BASEPRI, r3
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	f3bf 8f4f 	dsb	sy
 80076b8:	623b      	str	r3, [r7, #32]
}
 80076ba:	bf00      	nop
 80076bc:	e7fe      	b.n	80076bc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d102      	bne.n	80076ca <xQueueGenericCreateStatic+0x7e>
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <xQueueGenericCreateStatic+0x82>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e000      	b.n	80076d0 <xQueueGenericCreateStatic+0x84>
 80076ce:	2300      	movs	r3, #0
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10a      	bne.n	80076ea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	61fb      	str	r3, [r7, #28]
}
 80076e6:	bf00      	nop
 80076e8:	e7fe      	b.n	80076e8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80076ea:	2350      	movs	r3, #80	; 0x50
 80076ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	2b50      	cmp	r3, #80	; 0x50
 80076f2:	d00a      	beq.n	800770a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	61bb      	str	r3, [r7, #24]
}
 8007706:	bf00      	nop
 8007708:	e7fe      	b.n	8007708 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800770a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00d      	beq.n	8007732 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007718:	2201      	movs	r2, #1
 800771a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800771e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	9300      	str	r3, [sp, #0]
 8007726:	4613      	mov	r3, r2
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	68b9      	ldr	r1, [r7, #8]
 800772c:	68f8      	ldr	r0, [r7, #12]
 800772e:	f000 f83f 	bl	80077b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007734:	4618      	mov	r0, r3
 8007736:	3730      	adds	r7, #48	; 0x30
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08a      	sub	sp, #40	; 0x28
 8007740:	af02      	add	r7, sp, #8
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	4613      	mov	r3, r2
 8007748:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10a      	bne.n	8007766 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	613b      	str	r3, [r7, #16]
}
 8007762:	bf00      	nop
 8007764:	e7fe      	b.n	8007764 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	fb02 f303 	mul.w	r3, r2, r3
 800776e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	3350      	adds	r3, #80	; 0x50
 8007774:	4618      	mov	r0, r3
 8007776:	f002 fba7 	bl	8009ec8 <pvPortMalloc>
 800777a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d011      	beq.n	80077a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007782:	69bb      	ldr	r3, [r7, #24]
 8007784:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	3350      	adds	r3, #80	; 0x50
 800778a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007794:	79fa      	ldrb	r2, [r7, #7]
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	9300      	str	r3, [sp, #0]
 800779a:	4613      	mov	r3, r2
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	68b9      	ldr	r1, [r7, #8]
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f805 	bl	80077b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077a6:	69bb      	ldr	r3, [r7, #24]
	}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3720      	adds	r7, #32
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d103      	bne.n	80077cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077c4:	69bb      	ldr	r3, [r7, #24]
 80077c6:	69ba      	ldr	r2, [r7, #24]
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	e002      	b.n	80077d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077cc:	69bb      	ldr	r3, [r7, #24]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077d2:	69bb      	ldr	r3, [r7, #24]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077de:	2101      	movs	r1, #1
 80077e0:	69b8      	ldr	r0, [r7, #24]
 80077e2:	f7ff fecb 	bl	800757c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	78fa      	ldrb	r2, [r7, #3]
 80077ea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80077ee:	bf00      	nop
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00e      	beq.n	8007822 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007816:	2300      	movs	r3, #0
 8007818:	2200      	movs	r2, #0
 800781a:	2100      	movs	r1, #0
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 f8a1 	bl	8007964 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007822:	bf00      	nop
 8007824:	3708      	adds	r7, #8
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800782a:	b580      	push	{r7, lr}
 800782c:	b086      	sub	sp, #24
 800782e:	af00      	add	r7, sp, #0
 8007830:	4603      	mov	r3, r0
 8007832:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007834:	2301      	movs	r3, #1
 8007836:	617b      	str	r3, [r7, #20]
 8007838:	2300      	movs	r3, #0
 800783a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800783c:	79fb      	ldrb	r3, [r7, #7]
 800783e:	461a      	mov	r2, r3
 8007840:	6939      	ldr	r1, [r7, #16]
 8007842:	6978      	ldr	r0, [r7, #20]
 8007844:	f7ff ff7a 	bl	800773c <xQueueGenericCreate>
 8007848:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f7ff ffd3 	bl	80077f6 <prvInitialiseMutex>

		return xNewQueue;
 8007850:	68fb      	ldr	r3, [r7, #12]
	}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800785a:	b580      	push	{r7, lr}
 800785c:	b088      	sub	sp, #32
 800785e:	af02      	add	r7, sp, #8
 8007860:	4603      	mov	r3, r0
 8007862:	6039      	str	r1, [r7, #0]
 8007864:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007866:	2301      	movs	r3, #1
 8007868:	617b      	str	r3, [r7, #20]
 800786a:	2300      	movs	r3, #0
 800786c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800786e:	79fb      	ldrb	r3, [r7, #7]
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2200      	movs	r2, #0
 8007876:	6939      	ldr	r1, [r7, #16]
 8007878:	6978      	ldr	r0, [r7, #20]
 800787a:	f7ff fee7 	bl	800764c <xQueueGenericCreateStatic>
 800787e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f7ff ffb8 	bl	80077f6 <prvInitialiseMutex>

		return xNewQueue;
 8007886:	68fb      	ldr	r3, [r7, #12]
	}
 8007888:	4618      	mov	r0, r3
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007890:	b590      	push	{r4, r7, lr}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10a      	bne.n	80078b8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	60fb      	str	r3, [r7, #12]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	689c      	ldr	r4, [r3, #8]
 80078bc:	f001 fb7c 	bl	8008fb8 <xTaskGetCurrentTaskHandle>
 80078c0:	4603      	mov	r3, r0
 80078c2:	429c      	cmp	r4, r3
 80078c4:	d111      	bne.n	80078ea <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	1e5a      	subs	r2, r3, #1
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d105      	bne.n	80078e4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80078d8:	2300      	movs	r3, #0
 80078da:	2200      	movs	r2, #0
 80078dc:	2100      	movs	r1, #0
 80078de:	6938      	ldr	r0, [r7, #16]
 80078e0:	f000 f840 	bl	8007964 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80078e4:	2301      	movs	r3, #1
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	e001      	b.n	80078ee <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80078ee:	697b      	ldr	r3, [r7, #20]
	}
 80078f0:	4618      	mov	r0, r3
 80078f2:	371c      	adds	r7, #28
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd90      	pop	{r4, r7, pc}

080078f8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80078f8:	b590      	push	{r4, r7, lr}
 80078fa:	b087      	sub	sp, #28
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10a      	bne.n	8007922 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800790c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007910:	f383 8811 	msr	BASEPRI, r3
 8007914:	f3bf 8f6f 	isb	sy
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	60fb      	str	r3, [r7, #12]
}
 800791e:	bf00      	nop
 8007920:	e7fe      	b.n	8007920 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	689c      	ldr	r4, [r3, #8]
 8007926:	f001 fb47 	bl	8008fb8 <xTaskGetCurrentTaskHandle>
 800792a:	4603      	mov	r3, r0
 800792c:	429c      	cmp	r4, r3
 800792e:	d107      	bne.n	8007940 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800793a:	2301      	movs	r3, #1
 800793c:	617b      	str	r3, [r7, #20]
 800793e:	e00c      	b.n	800795a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007940:	6839      	ldr	r1, [r7, #0]
 8007942:	6938      	ldr	r0, [r7, #16]
 8007944:	f000 fa88 	bl	8007e58 <xQueueSemaphoreTake>
 8007948:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d004      	beq.n	800795a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	1c5a      	adds	r2, r3, #1
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800795a:	697b      	ldr	r3, [r7, #20]
	}
 800795c:	4618      	mov	r0, r3
 800795e:	371c      	adds	r7, #28
 8007960:	46bd      	mov	sp, r7
 8007962:	bd90      	pop	{r4, r7, pc}

08007964 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b08e      	sub	sp, #56	; 0x38
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
 8007970:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007972:	2300      	movs	r3, #0
 8007974:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10a      	bne.n	8007996 <xQueueGenericSend+0x32>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007992:	bf00      	nop
 8007994:	e7fe      	b.n	8007994 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d103      	bne.n	80079a4 <xQueueGenericSend+0x40>
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d101      	bne.n	80079a8 <xQueueGenericSend+0x44>
 80079a4:	2301      	movs	r3, #1
 80079a6:	e000      	b.n	80079aa <xQueueGenericSend+0x46>
 80079a8:	2300      	movs	r3, #0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d10a      	bne.n	80079c4 <xQueueGenericSend+0x60>
	__asm volatile
 80079ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b2:	f383 8811 	msr	BASEPRI, r3
 80079b6:	f3bf 8f6f 	isb	sy
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079c0:	bf00      	nop
 80079c2:	e7fe      	b.n	80079c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d103      	bne.n	80079d2 <xQueueGenericSend+0x6e>
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d101      	bne.n	80079d6 <xQueueGenericSend+0x72>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e000      	b.n	80079d8 <xQueueGenericSend+0x74>
 80079d6:	2300      	movs	r3, #0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10a      	bne.n	80079f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	623b      	str	r3, [r7, #32]
}
 80079ee:	bf00      	nop
 80079f0:	e7fe      	b.n	80079f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079f2:	f001 faf1 	bl	8008fd8 <xTaskGetSchedulerState>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d102      	bne.n	8007a02 <xQueueGenericSend+0x9e>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <xQueueGenericSend+0xa2>
 8007a02:	2301      	movs	r3, #1
 8007a04:	e000      	b.n	8007a08 <xQueueGenericSend+0xa4>
 8007a06:	2300      	movs	r3, #0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d10a      	bne.n	8007a22 <xQueueGenericSend+0xbe>
	__asm volatile
 8007a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a10:	f383 8811 	msr	BASEPRI, r3
 8007a14:	f3bf 8f6f 	isb	sy
 8007a18:	f3bf 8f4f 	dsb	sy
 8007a1c:	61fb      	str	r3, [r7, #28]
}
 8007a1e:	bf00      	nop
 8007a20:	e7fe      	b.n	8007a20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a22:	f002 f92f 	bl	8009c84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d302      	bcc.n	8007a38 <xQueueGenericSend+0xd4>
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d129      	bne.n	8007a8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a38:	683a      	ldr	r2, [r7, #0]
 8007a3a:	68b9      	ldr	r1, [r7, #8]
 8007a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a3e:	f000 fb2f 	bl	80080a0 <prvCopyDataToQueue>
 8007a42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d010      	beq.n	8007a6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	3324      	adds	r3, #36	; 0x24
 8007a50:	4618      	mov	r0, r3
 8007a52:	f001 f8f3 	bl	8008c3c <xTaskRemoveFromEventList>
 8007a56:	4603      	mov	r3, r0
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d013      	beq.n	8007a84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a5c:	4b3f      	ldr	r3, [pc, #252]	; (8007b5c <xQueueGenericSend+0x1f8>)
 8007a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	e00a      	b.n	8007a84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d007      	beq.n	8007a84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a74:	4b39      	ldr	r3, [pc, #228]	; (8007b5c <xQueueGenericSend+0x1f8>)
 8007a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a84:	f002 f92e 	bl	8009ce4 <vPortExitCritical>
				return pdPASS;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e063      	b.n	8007b54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d103      	bne.n	8007a9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a92:	f002 f927 	bl	8009ce4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a96:	2300      	movs	r3, #0
 8007a98:	e05c      	b.n	8007b54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d106      	bne.n	8007aae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007aa0:	f107 0314 	add.w	r3, r7, #20
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f001 f92d 	bl	8008d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007aae:	f002 f919 	bl	8009ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ab2:	f000 fe9f 	bl	80087f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ab6:	f002 f8e5 	bl	8009c84 <vPortEnterCritical>
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ac0:	b25b      	sxtb	r3, r3
 8007ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ac6:	d103      	bne.n	8007ad0 <xQueueGenericSend+0x16c>
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ad6:	b25b      	sxtb	r3, r3
 8007ad8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007adc:	d103      	bne.n	8007ae6 <xQueueGenericSend+0x182>
 8007ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ae6:	f002 f8fd 	bl	8009ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007aea:	1d3a      	adds	r2, r7, #4
 8007aec:	f107 0314 	add.w	r3, r7, #20
 8007af0:	4611      	mov	r1, r2
 8007af2:	4618      	mov	r0, r3
 8007af4:	f001 f91c 	bl	8008d30 <xTaskCheckForTimeOut>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d124      	bne.n	8007b48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007afe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b00:	f000 fbc6 	bl	8008290 <prvIsQueueFull>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d018      	beq.n	8007b3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0c:	3310      	adds	r3, #16
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	4611      	mov	r1, r2
 8007b12:	4618      	mov	r0, r3
 8007b14:	f001 f842 	bl	8008b9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b1a:	f000 fb51 	bl	80081c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b1e:	f000 fe77 	bl	8008810 <xTaskResumeAll>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f47f af7c 	bne.w	8007a22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007b2a:	4b0c      	ldr	r3, [pc, #48]	; (8007b5c <xQueueGenericSend+0x1f8>)
 8007b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b30:	601a      	str	r2, [r3, #0]
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	f3bf 8f6f 	isb	sy
 8007b3a:	e772      	b.n	8007a22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b3e:	f000 fb3f 	bl	80081c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b42:	f000 fe65 	bl	8008810 <xTaskResumeAll>
 8007b46:	e76c      	b.n	8007a22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b4a:	f000 fb39 	bl	80081c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b4e:	f000 fe5f 	bl	8008810 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3738      	adds	r7, #56	; 0x38
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	e000ed04 	.word	0xe000ed04

08007b60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b090      	sub	sp, #64	; 0x40
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	60f8      	str	r0, [r7, #12]
 8007b68:	60b9      	str	r1, [r7, #8]
 8007b6a:	607a      	str	r2, [r7, #4]
 8007b6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b8a:	bf00      	nop
 8007b8c:	e7fe      	b.n	8007b8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d103      	bne.n	8007b9c <xQueueGenericSendFromISR+0x3c>
 8007b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d101      	bne.n	8007ba0 <xQueueGenericSendFromISR+0x40>
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e000      	b.n	8007ba2 <xQueueGenericSendFromISR+0x42>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10a      	bne.n	8007bbc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007bb8:	bf00      	nop
 8007bba:	e7fe      	b.n	8007bba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d103      	bne.n	8007bca <xQueueGenericSendFromISR+0x6a>
 8007bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d101      	bne.n	8007bce <xQueueGenericSendFromISR+0x6e>
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e000      	b.n	8007bd0 <xQueueGenericSendFromISR+0x70>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10a      	bne.n	8007bea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	623b      	str	r3, [r7, #32]
}
 8007be6:	bf00      	nop
 8007be8:	e7fe      	b.n	8007be8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bea:	f002 f92d 	bl	8009e48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007bee:	f3ef 8211 	mrs	r2, BASEPRI
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	61fa      	str	r2, [r7, #28]
 8007c04:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007c06:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c08:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c12:	429a      	cmp	r2, r3
 8007c14:	d302      	bcc.n	8007c1c <xQueueGenericSendFromISR+0xbc>
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d12f      	bne.n	8007c7c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	68b9      	ldr	r1, [r7, #8]
 8007c30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c32:	f000 fa35 	bl	80080a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c3e:	d112      	bne.n	8007c66 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d016      	beq.n	8007c76 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c4a:	3324      	adds	r3, #36	; 0x24
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 fff5 	bl	8008c3c <xTaskRemoveFromEventList>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00e      	beq.n	8007c76 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00b      	beq.n	8007c76 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	e007      	b.n	8007c76 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	b25a      	sxtb	r2, r3
 8007c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c76:	2301      	movs	r3, #1
 8007c78:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007c7a:	e001      	b.n	8007c80 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c82:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3740      	adds	r7, #64	; 0x40
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
	...

08007c98 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08c      	sub	sp, #48	; 0x30
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d10a      	bne.n	8007cc8 <xQueueReceive+0x30>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	f383 8811 	msr	BASEPRI, r3
 8007cba:	f3bf 8f6f 	isb	sy
 8007cbe:	f3bf 8f4f 	dsb	sy
 8007cc2:	623b      	str	r3, [r7, #32]
}
 8007cc4:	bf00      	nop
 8007cc6:	e7fe      	b.n	8007cc6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d103      	bne.n	8007cd6 <xQueueReceive+0x3e>
 8007cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <xQueueReceive+0x42>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e000      	b.n	8007cdc <xQueueReceive+0x44>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10a      	bne.n	8007cf6 <xQueueReceive+0x5e>
	__asm volatile
 8007ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce4:	f383 8811 	msr	BASEPRI, r3
 8007ce8:	f3bf 8f6f 	isb	sy
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	61fb      	str	r3, [r7, #28]
}
 8007cf2:	bf00      	nop
 8007cf4:	e7fe      	b.n	8007cf4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cf6:	f001 f96f 	bl	8008fd8 <xTaskGetSchedulerState>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d102      	bne.n	8007d06 <xQueueReceive+0x6e>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <xQueueReceive+0x72>
 8007d06:	2301      	movs	r3, #1
 8007d08:	e000      	b.n	8007d0c <xQueueReceive+0x74>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10a      	bne.n	8007d26 <xQueueReceive+0x8e>
	__asm volatile
 8007d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d14:	f383 8811 	msr	BASEPRI, r3
 8007d18:	f3bf 8f6f 	isb	sy
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	61bb      	str	r3, [r7, #24]
}
 8007d22:	bf00      	nop
 8007d24:	e7fe      	b.n	8007d24 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d26:	f001 ffad 	bl	8009c84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d01f      	beq.n	8007d76 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d36:	68b9      	ldr	r1, [r7, #8]
 8007d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d3a:	f000 fa1b 	bl	8008174 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d40:	1e5a      	subs	r2, r3, #1
 8007d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00f      	beq.n	8007d6e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d50:	3310      	adds	r3, #16
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 ff72 	bl	8008c3c <xTaskRemoveFromEventList>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d007      	beq.n	8007d6e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d5e:	4b3d      	ldr	r3, [pc, #244]	; (8007e54 <xQueueReceive+0x1bc>)
 8007d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	f3bf 8f4f 	dsb	sy
 8007d6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d6e:	f001 ffb9 	bl	8009ce4 <vPortExitCritical>
				return pdPASS;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e069      	b.n	8007e4a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d103      	bne.n	8007d84 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d7c:	f001 ffb2 	bl	8009ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e062      	b.n	8007e4a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d106      	bne.n	8007d98 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d8a:	f107 0310 	add.w	r3, r7, #16
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 ffb8 	bl	8008d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d94:	2301      	movs	r3, #1
 8007d96:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d98:	f001 ffa4 	bl	8009ce4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d9c:	f000 fd2a 	bl	80087f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007da0:	f001 ff70 	bl	8009c84 <vPortEnterCritical>
 8007da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007da6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007daa:	b25b      	sxtb	r3, r3
 8007dac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007db0:	d103      	bne.n	8007dba <xQueueReceive+0x122>
 8007db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db4:	2200      	movs	r2, #0
 8007db6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007dc0:	b25b      	sxtb	r3, r3
 8007dc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dc6:	d103      	bne.n	8007dd0 <xQueueReceive+0x138>
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007dd0:	f001 ff88 	bl	8009ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007dd4:	1d3a      	adds	r2, r7, #4
 8007dd6:	f107 0310 	add.w	r3, r7, #16
 8007dda:	4611      	mov	r1, r2
 8007ddc:	4618      	mov	r0, r3
 8007dde:	f000 ffa7 	bl	8008d30 <xTaskCheckForTimeOut>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d123      	bne.n	8007e30 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dea:	f000 fa3b 	bl	8008264 <prvIsQueueEmpty>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d017      	beq.n	8007e24 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	3324      	adds	r3, #36	; 0x24
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 fecd 	bl	8008b9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e04:	f000 f9dc 	bl	80081c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e08:	f000 fd02 	bl	8008810 <xTaskResumeAll>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d189      	bne.n	8007d26 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007e12:	4b10      	ldr	r3, [pc, #64]	; (8007e54 <xQueueReceive+0x1bc>)
 8007e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	e780      	b.n	8007d26 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e26:	f000 f9cb 	bl	80081c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e2a:	f000 fcf1 	bl	8008810 <xTaskResumeAll>
 8007e2e:	e77a      	b.n	8007d26 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e32:	f000 f9c5 	bl	80081c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e36:	f000 fceb 	bl	8008810 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e3c:	f000 fa12 	bl	8008264 <prvIsQueueEmpty>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	f43f af6f 	beq.w	8007d26 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3730      	adds	r7, #48	; 0x30
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	e000ed04 	.word	0xe000ed04

08007e58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08e      	sub	sp, #56	; 0x38
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e62:	2300      	movs	r3, #0
 8007e64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d10a      	bne.n	8007e8a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e78:	f383 8811 	msr	BASEPRI, r3
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	623b      	str	r3, [r7, #32]
}
 8007e86:	bf00      	nop
 8007e88:	e7fe      	b.n	8007e88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00a      	beq.n	8007ea8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	61fb      	str	r3, [r7, #28]
}
 8007ea4:	bf00      	nop
 8007ea6:	e7fe      	b.n	8007ea6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ea8:	f001 f896 	bl	8008fd8 <xTaskGetSchedulerState>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d102      	bne.n	8007eb8 <xQueueSemaphoreTake+0x60>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d101      	bne.n	8007ebc <xQueueSemaphoreTake+0x64>
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e000      	b.n	8007ebe <xQueueSemaphoreTake+0x66>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10a      	bne.n	8007ed8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec6:	f383 8811 	msr	BASEPRI, r3
 8007eca:	f3bf 8f6f 	isb	sy
 8007ece:	f3bf 8f4f 	dsb	sy
 8007ed2:	61bb      	str	r3, [r7, #24]
}
 8007ed4:	bf00      	nop
 8007ed6:	e7fe      	b.n	8007ed6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ed8:	f001 fed4 	bl	8009c84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d024      	beq.n	8007f32 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eea:	1e5a      	subs	r2, r3, #1
 8007eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eee:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d104      	bne.n	8007f02 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007ef8:	f001 f9e4 	bl	80092c4 <pvTaskIncrementMutexHeldCount>
 8007efc:	4602      	mov	r2, r0
 8007efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f00:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00f      	beq.n	8007f2a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f0c:	3310      	adds	r3, #16
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 fe94 	bl	8008c3c <xTaskRemoveFromEventList>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d007      	beq.n	8007f2a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f1a:	4b54      	ldr	r3, [pc, #336]	; (800806c <xQueueSemaphoreTake+0x214>)
 8007f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f2a:	f001 fedb 	bl	8009ce4 <vPortExitCritical>
				return pdPASS;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e097      	b.n	8008062 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d111      	bne.n	8007f5c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	617b      	str	r3, [r7, #20]
}
 8007f50:	bf00      	nop
 8007f52:	e7fe      	b.n	8007f52 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007f54:	f001 fec6 	bl	8009ce4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	e082      	b.n	8008062 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d106      	bne.n	8007f70 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f62:	f107 030c 	add.w	r3, r7, #12
 8007f66:	4618      	mov	r0, r3
 8007f68:	f000 fecc 	bl	8008d04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f70:	f001 feb8 	bl	8009ce4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f74:	f000 fc3e 	bl	80087f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f78:	f001 fe84 	bl	8009c84 <vPortEnterCritical>
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f82:	b25b      	sxtb	r3, r3
 8007f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f88:	d103      	bne.n	8007f92 <xQueueSemaphoreTake+0x13a>
 8007f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f98:	b25b      	sxtb	r3, r3
 8007f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f9e:	d103      	bne.n	8007fa8 <xQueueSemaphoreTake+0x150>
 8007fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fa8:	f001 fe9c 	bl	8009ce4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fac:	463a      	mov	r2, r7
 8007fae:	f107 030c 	add.w	r3, r7, #12
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f000 febb 	bl	8008d30 <xTaskCheckForTimeOut>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d132      	bne.n	8008026 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fc2:	f000 f94f 	bl	8008264 <prvIsQueueEmpty>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d026      	beq.n	800801a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d109      	bne.n	8007fe8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007fd4:	f001 fe56 	bl	8009c84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f001 f819 	bl	8009014 <xTaskPriorityInherit>
 8007fe2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007fe4:	f001 fe7e 	bl	8009ce4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fea:	3324      	adds	r3, #36	; 0x24
 8007fec:	683a      	ldr	r2, [r7, #0]
 8007fee:	4611      	mov	r1, r2
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f000 fdd3 	bl	8008b9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ff6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ff8:	f000 f8e2 	bl	80081c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ffc:	f000 fc08 	bl	8008810 <xTaskResumeAll>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	f47f af68 	bne.w	8007ed8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008008:	4b18      	ldr	r3, [pc, #96]	; (800806c <xQueueSemaphoreTake+0x214>)
 800800a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	f3bf 8f6f 	isb	sy
 8008018:	e75e      	b.n	8007ed8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800801a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800801c:	f000 f8d0 	bl	80081c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008020:	f000 fbf6 	bl	8008810 <xTaskResumeAll>
 8008024:	e758      	b.n	8007ed8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008026:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008028:	f000 f8ca 	bl	80081c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800802c:	f000 fbf0 	bl	8008810 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008030:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008032:	f000 f917 	bl	8008264 <prvIsQueueEmpty>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	f43f af4d 	beq.w	8007ed8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	2b00      	cmp	r3, #0
 8008042:	d00d      	beq.n	8008060 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008044:	f001 fe1e 	bl	8009c84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008048:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800804a:	f000 f811 	bl	8008070 <prvGetDisinheritPriorityAfterTimeout>
 800804e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008056:	4618      	mov	r0, r3
 8008058:	f001 f8b2 	bl	80091c0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800805c:	f001 fe42 	bl	8009ce4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008060:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008062:	4618      	mov	r0, r3
 8008064:	3738      	adds	r7, #56	; 0x38
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	e000ed04 	.word	0xe000ed04

08008070 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800807c:	2b00      	cmp	r3, #0
 800807e:	d006      	beq.n	800808e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800808a:	60fb      	str	r3, [r7, #12]
 800808c:	e001      	b.n	8008092 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800808e:	2300      	movs	r3, #0
 8008090:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008092:	68fb      	ldr	r3, [r7, #12]
	}
 8008094:	4618      	mov	r0, r3
 8008096:	3714      	adds	r7, #20
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b086      	sub	sp, #24
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80080ac:	2300      	movs	r3, #0
 80080ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10d      	bne.n	80080da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d14d      	bne.n	8008162 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 f80a 	bl	80090e4 <xTaskPriorityDisinherit>
 80080d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2200      	movs	r2, #0
 80080d6:	609a      	str	r2, [r3, #8]
 80080d8:	e043      	b.n	8008162 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d119      	bne.n	8008114 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6858      	ldr	r0, [r3, #4]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e8:	461a      	mov	r2, r3
 80080ea:	68b9      	ldr	r1, [r7, #8]
 80080ec:	f002 fb63 	bl	800a7b6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f8:	441a      	add	r2, r3
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	685a      	ldr	r2, [r3, #4]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	429a      	cmp	r2, r3
 8008108:	d32b      	bcc.n	8008162 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	605a      	str	r2, [r3, #4]
 8008112:	e026      	b.n	8008162 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	68d8      	ldr	r0, [r3, #12]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800811c:	461a      	mov	r2, r3
 800811e:	68b9      	ldr	r1, [r7, #8]
 8008120:	f002 fb49 	bl	800a7b6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	68da      	ldr	r2, [r3, #12]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800812c:	425b      	negs	r3, r3
 800812e:	441a      	add	r2, r3
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	68da      	ldr	r2, [r3, #12]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	429a      	cmp	r2, r3
 800813e:	d207      	bcs.n	8008150 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	689a      	ldr	r2, [r3, #8]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008148:	425b      	negs	r3, r3
 800814a:	441a      	add	r2, r3
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2b02      	cmp	r3, #2
 8008154:	d105      	bne.n	8008162 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d002      	beq.n	8008162 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	3b01      	subs	r3, #1
 8008160:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	1c5a      	adds	r2, r3, #1
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800816a:	697b      	ldr	r3, [r7, #20]
}
 800816c:	4618      	mov	r0, r3
 800816e:	3718      	adds	r7, #24
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008182:	2b00      	cmp	r3, #0
 8008184:	d018      	beq.n	80081b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818e:	441a      	add	r2, r3
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	68da      	ldr	r2, [r3, #12]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	429a      	cmp	r2, r3
 800819e:	d303      	bcc.n	80081a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68d9      	ldr	r1, [r3, #12]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b0:	461a      	mov	r2, r3
 80081b2:	6838      	ldr	r0, [r7, #0]
 80081b4:	f002 faff 	bl	800a7b6 <memcpy>
	}
}
 80081b8:	bf00      	nop
 80081ba:	3708      	adds	r7, #8
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd80      	pop	{r7, pc}

080081c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80081c8:	f001 fd5c 	bl	8009c84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081d4:	e011      	b.n	80081fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d012      	beq.n	8008204 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	3324      	adds	r3, #36	; 0x24
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fd2a 	bl	8008c3c <xTaskRemoveFromEventList>
 80081e8:	4603      	mov	r3, r0
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081ee:	f000 fe01 	bl	8008df4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
 80081f4:	3b01      	subs	r3, #1
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	dce9      	bgt.n	80081d6 <prvUnlockQueue+0x16>
 8008202:	e000      	b.n	8008206 <prvUnlockQueue+0x46>
					break;
 8008204:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	22ff      	movs	r2, #255	; 0xff
 800820a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800820e:	f001 fd69 	bl	8009ce4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008212:	f001 fd37 	bl	8009c84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800821c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800821e:	e011      	b.n	8008244 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d012      	beq.n	800824e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3310      	adds	r3, #16
 800822c:	4618      	mov	r0, r3
 800822e:	f000 fd05 	bl	8008c3c <xTaskRemoveFromEventList>
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008238:	f000 fddc 	bl	8008df4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800823c:	7bbb      	ldrb	r3, [r7, #14]
 800823e:	3b01      	subs	r3, #1
 8008240:	b2db      	uxtb	r3, r3
 8008242:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008244:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008248:	2b00      	cmp	r3, #0
 800824a:	dce9      	bgt.n	8008220 <prvUnlockQueue+0x60>
 800824c:	e000      	b.n	8008250 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800824e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	22ff      	movs	r2, #255	; 0xff
 8008254:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008258:	f001 fd44 	bl	8009ce4 <vPortExitCritical>
}
 800825c:	bf00      	nop
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800826c:	f001 fd0a 	bl	8009c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008274:	2b00      	cmp	r3, #0
 8008276:	d102      	bne.n	800827e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008278:	2301      	movs	r3, #1
 800827a:	60fb      	str	r3, [r7, #12]
 800827c:	e001      	b.n	8008282 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800827e:	2300      	movs	r3, #0
 8008280:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008282:	f001 fd2f 	bl	8009ce4 <vPortExitCritical>

	return xReturn;
 8008286:	68fb      	ldr	r3, [r7, #12]
}
 8008288:	4618      	mov	r0, r3
 800828a:	3710      	adds	r7, #16
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008298:	f001 fcf4 	bl	8009c84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d102      	bne.n	80082ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80082a8:	2301      	movs	r3, #1
 80082aa:	60fb      	str	r3, [r7, #12]
 80082ac:	e001      	b.n	80082b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80082ae:	2300      	movs	r3, #0
 80082b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082b2:	f001 fd17 	bl	8009ce4 <vPortExitCritical>

	return xReturn;
 80082b6:	68fb      	ldr	r3, [r7, #12]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80082c0:	b480      	push	{r7}
 80082c2:	b085      	sub	sp, #20
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082ca:	2300      	movs	r3, #0
 80082cc:	60fb      	str	r3, [r7, #12]
 80082ce:	e014      	b.n	80082fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80082d0:	4a0f      	ldr	r2, [pc, #60]	; (8008310 <vQueueAddToRegistry+0x50>)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10b      	bne.n	80082f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80082dc:	490c      	ldr	r1, [pc, #48]	; (8008310 <vQueueAddToRegistry+0x50>)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	683a      	ldr	r2, [r7, #0]
 80082e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80082e6:	4a0a      	ldr	r2, [pc, #40]	; (8008310 <vQueueAddToRegistry+0x50>)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	4413      	add	r3, r2
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80082f2:	e006      	b.n	8008302 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	3301      	adds	r3, #1
 80082f8:	60fb      	str	r3, [r7, #12]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2b07      	cmp	r3, #7
 80082fe:	d9e7      	bls.n	80082d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008300:	bf00      	nop
 8008302:	bf00      	nop
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	200008ec 	.word	0x200008ec

08008314 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008324:	f001 fcae 	bl	8009c84 <vPortEnterCritical>
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800832e:	b25b      	sxtb	r3, r3
 8008330:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008334:	d103      	bne.n	800833e <vQueueWaitForMessageRestricted+0x2a>
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2200      	movs	r2, #0
 800833a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008344:	b25b      	sxtb	r3, r3
 8008346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800834a:	d103      	bne.n	8008354 <vQueueWaitForMessageRestricted+0x40>
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008354:	f001 fcc6 	bl	8009ce4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835c:	2b00      	cmp	r3, #0
 800835e:	d106      	bne.n	800836e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	3324      	adds	r3, #36	; 0x24
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	68b9      	ldr	r1, [r7, #8]
 8008368:	4618      	mov	r0, r3
 800836a:	f000 fc3b 	bl	8008be4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800836e:	6978      	ldr	r0, [r7, #20]
 8008370:	f7ff ff26 	bl	80081c0 <prvUnlockQueue>
	}
 8008374:	bf00      	nop
 8008376:	3718      	adds	r7, #24
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800837c:	b580      	push	{r7, lr}
 800837e:	b08e      	sub	sp, #56	; 0x38
 8008380:	af04      	add	r7, sp, #16
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
 8008388:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800838a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10a      	bne.n	80083a6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008394:	f383 8811 	msr	BASEPRI, r3
 8008398:	f3bf 8f6f 	isb	sy
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	623b      	str	r3, [r7, #32]
}
 80083a2:	bf00      	nop
 80083a4:	e7fe      	b.n	80083a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80083a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10a      	bne.n	80083c2 <xTaskCreateStatic+0x46>
	__asm volatile
 80083ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	61fb      	str	r3, [r7, #28]
}
 80083be:	bf00      	nop
 80083c0:	e7fe      	b.n	80083c0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80083c2:	235c      	movs	r3, #92	; 0x5c
 80083c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	2b5c      	cmp	r3, #92	; 0x5c
 80083ca:	d00a      	beq.n	80083e2 <xTaskCreateStatic+0x66>
	__asm volatile
 80083cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	61bb      	str	r3, [r7, #24]
}
 80083de:	bf00      	nop
 80083e0:	e7fe      	b.n	80083e0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80083e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d01e      	beq.n	8008428 <xTaskCreateStatic+0xac>
 80083ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d01b      	beq.n	8008428 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	2202      	movs	r2, #2
 80083fe:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008402:	2300      	movs	r3, #0
 8008404:	9303      	str	r3, [sp, #12]
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	9302      	str	r3, [sp, #8]
 800840a:	f107 0314 	add.w	r3, r7, #20
 800840e:	9301      	str	r3, [sp, #4]
 8008410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	68b9      	ldr	r1, [r7, #8]
 800841a:	68f8      	ldr	r0, [r7, #12]
 800841c:	f000 f850 	bl	80084c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008422:	f000 f8dd 	bl	80085e0 <prvAddNewTaskToReadyList>
 8008426:	e001      	b.n	800842c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008428:	2300      	movs	r3, #0
 800842a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800842c:	697b      	ldr	r3, [r7, #20]
	}
 800842e:	4618      	mov	r0, r3
 8008430:	3728      	adds	r7, #40	; 0x28
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008436:	b580      	push	{r7, lr}
 8008438:	b08c      	sub	sp, #48	; 0x30
 800843a:	af04      	add	r7, sp, #16
 800843c:	60f8      	str	r0, [r7, #12]
 800843e:	60b9      	str	r1, [r7, #8]
 8008440:	603b      	str	r3, [r7, #0]
 8008442:	4613      	mov	r3, r2
 8008444:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008446:	88fb      	ldrh	r3, [r7, #6]
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4618      	mov	r0, r3
 800844c:	f001 fd3c 	bl	8009ec8 <pvPortMalloc>
 8008450:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d00e      	beq.n	8008476 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008458:	205c      	movs	r0, #92	; 0x5c
 800845a:	f001 fd35 	bl	8009ec8 <pvPortMalloc>
 800845e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	631a      	str	r2, [r3, #48]	; 0x30
 800846c:	e005      	b.n	800847a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800846e:	6978      	ldr	r0, [r7, #20]
 8008470:	f001 fdf6 	bl	800a060 <vPortFree>
 8008474:	e001      	b.n	800847a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008476:	2300      	movs	r3, #0
 8008478:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d017      	beq.n	80084b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	2200      	movs	r2, #0
 8008484:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008488:	88fa      	ldrh	r2, [r7, #6]
 800848a:	2300      	movs	r3, #0
 800848c:	9303      	str	r3, [sp, #12]
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	9302      	str	r3, [sp, #8]
 8008492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008494:	9301      	str	r3, [sp, #4]
 8008496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008498:	9300      	str	r3, [sp, #0]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	68b9      	ldr	r1, [r7, #8]
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f000 f80e 	bl	80084c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084a4:	69f8      	ldr	r0, [r7, #28]
 80084a6:	f000 f89b 	bl	80085e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80084aa:	2301      	movs	r3, #1
 80084ac:	61bb      	str	r3, [r7, #24]
 80084ae:	e002      	b.n	80084b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80084b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80084b6:	69bb      	ldr	r3, [r7, #24]
	}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3720      	adds	r7, #32
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b088      	sub	sp, #32
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	607a      	str	r2, [r7, #4]
 80084cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	461a      	mov	r2, r3
 80084d8:	21a5      	movs	r1, #165	; 0xa5
 80084da:	f002 f894 	bl	800a606 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80084e8:	3b01      	subs	r3, #1
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	f023 0307 	bic.w	r3, r3, #7
 80084f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	f003 0307 	and.w	r3, r3, #7
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00a      	beq.n	8008518 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	617b      	str	r3, [r7, #20]
}
 8008514:	bf00      	nop
 8008516:	e7fe      	b.n	8008516 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d01f      	beq.n	800855e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800851e:	2300      	movs	r3, #0
 8008520:	61fb      	str	r3, [r7, #28]
 8008522:	e012      	b.n	800854a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	4413      	add	r3, r2
 800852a:	7819      	ldrb	r1, [r3, #0]
 800852c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	4413      	add	r3, r2
 8008532:	3334      	adds	r3, #52	; 0x34
 8008534:	460a      	mov	r2, r1
 8008536:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	4413      	add	r3, r2
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d006      	beq.n	8008552 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	3301      	adds	r3, #1
 8008548:	61fb      	str	r3, [r7, #28]
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	2b0f      	cmp	r3, #15
 800854e:	d9e9      	bls.n	8008524 <prvInitialiseNewTask+0x64>
 8008550:	e000      	b.n	8008554 <prvInitialiseNewTask+0x94>
			{
				break;
 8008552:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	2200      	movs	r2, #0
 8008558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800855c:	e003      	b.n	8008566 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008568:	2b37      	cmp	r3, #55	; 0x37
 800856a:	d901      	bls.n	8008570 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800856c:	2337      	movs	r3, #55	; 0x37
 800856e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008574:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800857a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857e:	2200      	movs	r2, #0
 8008580:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008584:	3304      	adds	r3, #4
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe ff64 	bl	8007454 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	3318      	adds	r3, #24
 8008590:	4618      	mov	r0, r3
 8008592:	f7fe ff5f 	bl	8007454 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800859a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800859c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80085a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085aa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80085ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ae:	2200      	movs	r2, #0
 80085b0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80085b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	68f9      	ldr	r1, [r7, #12]
 80085be:	69b8      	ldr	r0, [r7, #24]
 80085c0:	f001 fa36 	bl	8009a30 <pxPortInitialiseStack>
 80085c4:	4602      	mov	r2, r0
 80085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80085ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085d6:	bf00      	nop
 80085d8:	3720      	adds	r7, #32
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085e8:	f001 fb4c 	bl	8009c84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085ec:	4b2d      	ldr	r3, [pc, #180]	; (80086a4 <prvAddNewTaskToReadyList+0xc4>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	3301      	adds	r3, #1
 80085f2:	4a2c      	ldr	r2, [pc, #176]	; (80086a4 <prvAddNewTaskToReadyList+0xc4>)
 80085f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085f6:	4b2c      	ldr	r3, [pc, #176]	; (80086a8 <prvAddNewTaskToReadyList+0xc8>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d109      	bne.n	8008612 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085fe:	4a2a      	ldr	r2, [pc, #168]	; (80086a8 <prvAddNewTaskToReadyList+0xc8>)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008604:	4b27      	ldr	r3, [pc, #156]	; (80086a4 <prvAddNewTaskToReadyList+0xc4>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d110      	bne.n	800862e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800860c:	f000 fc16 	bl	8008e3c <prvInitialiseTaskLists>
 8008610:	e00d      	b.n	800862e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008612:	4b26      	ldr	r3, [pc, #152]	; (80086ac <prvAddNewTaskToReadyList+0xcc>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d109      	bne.n	800862e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800861a:	4b23      	ldr	r3, [pc, #140]	; (80086a8 <prvAddNewTaskToReadyList+0xc8>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008624:	429a      	cmp	r2, r3
 8008626:	d802      	bhi.n	800862e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008628:	4a1f      	ldr	r2, [pc, #124]	; (80086a8 <prvAddNewTaskToReadyList+0xc8>)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800862e:	4b20      	ldr	r3, [pc, #128]	; (80086b0 <prvAddNewTaskToReadyList+0xd0>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	3301      	adds	r3, #1
 8008634:	4a1e      	ldr	r2, [pc, #120]	; (80086b0 <prvAddNewTaskToReadyList+0xd0>)
 8008636:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008638:	4b1d      	ldr	r3, [pc, #116]	; (80086b0 <prvAddNewTaskToReadyList+0xd0>)
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008644:	4b1b      	ldr	r3, [pc, #108]	; (80086b4 <prvAddNewTaskToReadyList+0xd4>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	429a      	cmp	r2, r3
 800864a:	d903      	bls.n	8008654 <prvAddNewTaskToReadyList+0x74>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008650:	4a18      	ldr	r2, [pc, #96]	; (80086b4 <prvAddNewTaskToReadyList+0xd4>)
 8008652:	6013      	str	r3, [r2, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008658:	4613      	mov	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	4413      	add	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	4a15      	ldr	r2, [pc, #84]	; (80086b8 <prvAddNewTaskToReadyList+0xd8>)
 8008662:	441a      	add	r2, r3
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	3304      	adds	r3, #4
 8008668:	4619      	mov	r1, r3
 800866a:	4610      	mov	r0, r2
 800866c:	f7fe feff 	bl	800746e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008670:	f001 fb38 	bl	8009ce4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008674:	4b0d      	ldr	r3, [pc, #52]	; (80086ac <prvAddNewTaskToReadyList+0xcc>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00e      	beq.n	800869a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800867c:	4b0a      	ldr	r3, [pc, #40]	; (80086a8 <prvAddNewTaskToReadyList+0xc8>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008686:	429a      	cmp	r2, r3
 8008688:	d207      	bcs.n	800869a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800868a:	4b0c      	ldr	r3, [pc, #48]	; (80086bc <prvAddNewTaskToReadyList+0xdc>)
 800868c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	f3bf 8f4f 	dsb	sy
 8008696:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800869a:	bf00      	nop
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	20000e00 	.word	0x20000e00
 80086a8:	2000092c 	.word	0x2000092c
 80086ac:	20000e0c 	.word	0x20000e0c
 80086b0:	20000e1c 	.word	0x20000e1c
 80086b4:	20000e08 	.word	0x20000e08
 80086b8:	20000930 	.word	0x20000930
 80086bc:	e000ed04 	.word	0xe000ed04

080086c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b084      	sub	sp, #16
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80086c8:	2300      	movs	r3, #0
 80086ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d017      	beq.n	8008702 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80086d2:	4b13      	ldr	r3, [pc, #76]	; (8008720 <vTaskDelay+0x60>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <vTaskDelay+0x30>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	60bb      	str	r3, [r7, #8]
}
 80086ec:	bf00      	nop
 80086ee:	e7fe      	b.n	80086ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80086f0:	f000 f880 	bl	80087f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80086f4:	2100      	movs	r1, #0
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 fdf8 	bl	80092ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80086fc:	f000 f888 	bl	8008810 <xTaskResumeAll>
 8008700:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d107      	bne.n	8008718 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008708:	4b06      	ldr	r3, [pc, #24]	; (8008724 <vTaskDelay+0x64>)
 800870a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800870e:	601a      	str	r2, [r3, #0]
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008718:	bf00      	nop
 800871a:	3710      	adds	r7, #16
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	20000e28 	.word	0x20000e28
 8008724:	e000ed04 	.word	0xe000ed04

08008728 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	; 0x28
 800872c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800872e:	2300      	movs	r3, #0
 8008730:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008732:	2300      	movs	r3, #0
 8008734:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008736:	463a      	mov	r2, r7
 8008738:	1d39      	adds	r1, r7, #4
 800873a:	f107 0308 	add.w	r3, r7, #8
 800873e:	4618      	mov	r0, r3
 8008740:	f7fe fe34 	bl	80073ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008744:	6839      	ldr	r1, [r7, #0]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	9202      	str	r2, [sp, #8]
 800874c:	9301      	str	r3, [sp, #4]
 800874e:	2300      	movs	r3, #0
 8008750:	9300      	str	r3, [sp, #0]
 8008752:	2300      	movs	r3, #0
 8008754:	460a      	mov	r2, r1
 8008756:	4921      	ldr	r1, [pc, #132]	; (80087dc <vTaskStartScheduler+0xb4>)
 8008758:	4821      	ldr	r0, [pc, #132]	; (80087e0 <vTaskStartScheduler+0xb8>)
 800875a:	f7ff fe0f 	bl	800837c <xTaskCreateStatic>
 800875e:	4603      	mov	r3, r0
 8008760:	4a20      	ldr	r2, [pc, #128]	; (80087e4 <vTaskStartScheduler+0xbc>)
 8008762:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008764:	4b1f      	ldr	r3, [pc, #124]	; (80087e4 <vTaskStartScheduler+0xbc>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800876c:	2301      	movs	r3, #1
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	e001      	b.n	8008776 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008772:	2300      	movs	r3, #0
 8008774:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2b01      	cmp	r3, #1
 800877a:	d102      	bne.n	8008782 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800877c:	f000 fe0a 	bl	8009394 <xTimerCreateTimerTask>
 8008780:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d116      	bne.n	80087b6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	613b      	str	r3, [r7, #16]
}
 800879a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800879c:	4b12      	ldr	r3, [pc, #72]	; (80087e8 <vTaskStartScheduler+0xc0>)
 800879e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80087a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80087a4:	4b11      	ldr	r3, [pc, #68]	; (80087ec <vTaskStartScheduler+0xc4>)
 80087a6:	2201      	movs	r2, #1
 80087a8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80087aa:	4b11      	ldr	r3, [pc, #68]	; (80087f0 <vTaskStartScheduler+0xc8>)
 80087ac:	2200      	movs	r2, #0
 80087ae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087b0:	f001 f9c6 	bl	8009b40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087b4:	e00e      	b.n	80087d4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087bc:	d10a      	bne.n	80087d4 <vTaskStartScheduler+0xac>
	__asm volatile
 80087be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087c2:	f383 8811 	msr	BASEPRI, r3
 80087c6:	f3bf 8f6f 	isb	sy
 80087ca:	f3bf 8f4f 	dsb	sy
 80087ce:	60fb      	str	r3, [r7, #12]
}
 80087d0:	bf00      	nop
 80087d2:	e7fe      	b.n	80087d2 <vTaskStartScheduler+0xaa>
}
 80087d4:	bf00      	nop
 80087d6:	3718      	adds	r7, #24
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}
 80087dc:	0800b81c 	.word	0x0800b81c
 80087e0:	08008e0d 	.word	0x08008e0d
 80087e4:	20000e24 	.word	0x20000e24
 80087e8:	20000e20 	.word	0x20000e20
 80087ec:	20000e0c 	.word	0x20000e0c
 80087f0:	20000e04 	.word	0x20000e04

080087f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087f4:	b480      	push	{r7}
 80087f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80087f8:	4b04      	ldr	r3, [pc, #16]	; (800880c <vTaskSuspendAll+0x18>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	3301      	adds	r3, #1
 80087fe:	4a03      	ldr	r2, [pc, #12]	; (800880c <vTaskSuspendAll+0x18>)
 8008800:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008802:	bf00      	nop
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	20000e28 	.word	0x20000e28

08008810 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800881a:	2300      	movs	r3, #0
 800881c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800881e:	4b42      	ldr	r3, [pc, #264]	; (8008928 <xTaskResumeAll+0x118>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10a      	bne.n	800883c <xTaskResumeAll+0x2c>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	603b      	str	r3, [r7, #0]
}
 8008838:	bf00      	nop
 800883a:	e7fe      	b.n	800883a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800883c:	f001 fa22 	bl	8009c84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008840:	4b39      	ldr	r3, [pc, #228]	; (8008928 <xTaskResumeAll+0x118>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3b01      	subs	r3, #1
 8008846:	4a38      	ldr	r2, [pc, #224]	; (8008928 <xTaskResumeAll+0x118>)
 8008848:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800884a:	4b37      	ldr	r3, [pc, #220]	; (8008928 <xTaskResumeAll+0x118>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d162      	bne.n	8008918 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008852:	4b36      	ldr	r3, [pc, #216]	; (800892c <xTaskResumeAll+0x11c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d05e      	beq.n	8008918 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800885a:	e02f      	b.n	80088bc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800885c:	4b34      	ldr	r3, [pc, #208]	; (8008930 <xTaskResumeAll+0x120>)
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	3318      	adds	r3, #24
 8008868:	4618      	mov	r0, r3
 800886a:	f7fe fe5d 	bl	8007528 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3304      	adds	r3, #4
 8008872:	4618      	mov	r0, r3
 8008874:	f7fe fe58 	bl	8007528 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800887c:	4b2d      	ldr	r3, [pc, #180]	; (8008934 <xTaskResumeAll+0x124>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	429a      	cmp	r2, r3
 8008882:	d903      	bls.n	800888c <xTaskResumeAll+0x7c>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	4a2a      	ldr	r2, [pc, #168]	; (8008934 <xTaskResumeAll+0x124>)
 800888a:	6013      	str	r3, [r2, #0]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008890:	4613      	mov	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4413      	add	r3, r2
 8008896:	009b      	lsls	r3, r3, #2
 8008898:	4a27      	ldr	r2, [pc, #156]	; (8008938 <xTaskResumeAll+0x128>)
 800889a:	441a      	add	r2, r3
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	3304      	adds	r3, #4
 80088a0:	4619      	mov	r1, r3
 80088a2:	4610      	mov	r0, r2
 80088a4:	f7fe fde3 	bl	800746e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ac:	4b23      	ldr	r3, [pc, #140]	; (800893c <xTaskResumeAll+0x12c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d302      	bcc.n	80088bc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80088b6:	4b22      	ldr	r3, [pc, #136]	; (8008940 <xTaskResumeAll+0x130>)
 80088b8:	2201      	movs	r2, #1
 80088ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088bc:	4b1c      	ldr	r3, [pc, #112]	; (8008930 <xTaskResumeAll+0x120>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1cb      	bne.n	800885c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088ca:	f000 fb55 	bl	8008f78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80088ce:	4b1d      	ldr	r3, [pc, #116]	; (8008944 <xTaskResumeAll+0x134>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d010      	beq.n	80088fc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80088da:	f000 f847 	bl	800896c <xTaskIncrementTick>
 80088de:	4603      	mov	r3, r0
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d002      	beq.n	80088ea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80088e4:	4b16      	ldr	r3, [pc, #88]	; (8008940 <xTaskResumeAll+0x130>)
 80088e6:	2201      	movs	r2, #1
 80088e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	3b01      	subs	r3, #1
 80088ee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1f1      	bne.n	80088da <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80088f6:	4b13      	ldr	r3, [pc, #76]	; (8008944 <xTaskResumeAll+0x134>)
 80088f8:	2200      	movs	r2, #0
 80088fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088fc:	4b10      	ldr	r3, [pc, #64]	; (8008940 <xTaskResumeAll+0x130>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d009      	beq.n	8008918 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008904:	2301      	movs	r3, #1
 8008906:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008908:	4b0f      	ldr	r3, [pc, #60]	; (8008948 <xTaskResumeAll+0x138>)
 800890a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800890e:	601a      	str	r2, [r3, #0]
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008918:	f001 f9e4 	bl	8009ce4 <vPortExitCritical>

	return xAlreadyYielded;
 800891c:	68bb      	ldr	r3, [r7, #8]
}
 800891e:	4618      	mov	r0, r3
 8008920:	3710      	adds	r7, #16
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20000e28 	.word	0x20000e28
 800892c:	20000e00 	.word	0x20000e00
 8008930:	20000dc0 	.word	0x20000dc0
 8008934:	20000e08 	.word	0x20000e08
 8008938:	20000930 	.word	0x20000930
 800893c:	2000092c 	.word	0x2000092c
 8008940:	20000e14 	.word	0x20000e14
 8008944:	20000e10 	.word	0x20000e10
 8008948:	e000ed04 	.word	0xe000ed04

0800894c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008952:	4b05      	ldr	r3, [pc, #20]	; (8008968 <xTaskGetTickCount+0x1c>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008958:	687b      	ldr	r3, [r7, #4]
}
 800895a:	4618      	mov	r0, r3
 800895c:	370c      	adds	r7, #12
 800895e:	46bd      	mov	sp, r7
 8008960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	20000e04 	.word	0x20000e04

0800896c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008972:	2300      	movs	r3, #0
 8008974:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008976:	4b4f      	ldr	r3, [pc, #316]	; (8008ab4 <xTaskIncrementTick+0x148>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	f040 808f 	bne.w	8008a9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008980:	4b4d      	ldr	r3, [pc, #308]	; (8008ab8 <xTaskIncrementTick+0x14c>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3301      	adds	r3, #1
 8008986:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008988:	4a4b      	ldr	r2, [pc, #300]	; (8008ab8 <xTaskIncrementTick+0x14c>)
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d120      	bne.n	80089d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008994:	4b49      	ldr	r3, [pc, #292]	; (8008abc <xTaskIncrementTick+0x150>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00a      	beq.n	80089b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	603b      	str	r3, [r7, #0]
}
 80089b0:	bf00      	nop
 80089b2:	e7fe      	b.n	80089b2 <xTaskIncrementTick+0x46>
 80089b4:	4b41      	ldr	r3, [pc, #260]	; (8008abc <xTaskIncrementTick+0x150>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	60fb      	str	r3, [r7, #12]
 80089ba:	4b41      	ldr	r3, [pc, #260]	; (8008ac0 <xTaskIncrementTick+0x154>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a3f      	ldr	r2, [pc, #252]	; (8008abc <xTaskIncrementTick+0x150>)
 80089c0:	6013      	str	r3, [r2, #0]
 80089c2:	4a3f      	ldr	r2, [pc, #252]	; (8008ac0 <xTaskIncrementTick+0x154>)
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	4b3e      	ldr	r3, [pc, #248]	; (8008ac4 <xTaskIncrementTick+0x158>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	3301      	adds	r3, #1
 80089ce:	4a3d      	ldr	r2, [pc, #244]	; (8008ac4 <xTaskIncrementTick+0x158>)
 80089d0:	6013      	str	r3, [r2, #0]
 80089d2:	f000 fad1 	bl	8008f78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089d6:	4b3c      	ldr	r3, [pc, #240]	; (8008ac8 <xTaskIncrementTick+0x15c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d349      	bcc.n	8008a74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089e0:	4b36      	ldr	r3, [pc, #216]	; (8008abc <xTaskIncrementTick+0x150>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d104      	bne.n	80089f4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089ea:	4b37      	ldr	r3, [pc, #220]	; (8008ac8 <xTaskIncrementTick+0x15c>)
 80089ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80089f0:	601a      	str	r2, [r3, #0]
					break;
 80089f2:	e03f      	b.n	8008a74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089f4:	4b31      	ldr	r3, [pc, #196]	; (8008abc <xTaskIncrementTick+0x150>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a04:	693a      	ldr	r2, [r7, #16]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d203      	bcs.n	8008a14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a0c:	4a2e      	ldr	r2, [pc, #184]	; (8008ac8 <xTaskIncrementTick+0x15c>)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a12:	e02f      	b.n	8008a74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	3304      	adds	r3, #4
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7fe fd85 	bl	8007528 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d004      	beq.n	8008a30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	3318      	adds	r3, #24
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe fd7c 	bl	8007528 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a34:	4b25      	ldr	r3, [pc, #148]	; (8008acc <xTaskIncrementTick+0x160>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	d903      	bls.n	8008a44 <xTaskIncrementTick+0xd8>
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a40:	4a22      	ldr	r2, [pc, #136]	; (8008acc <xTaskIncrementTick+0x160>)
 8008a42:	6013      	str	r3, [r2, #0]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a48:	4613      	mov	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4a1f      	ldr	r2, [pc, #124]	; (8008ad0 <xTaskIncrementTick+0x164>)
 8008a52:	441a      	add	r2, r3
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	3304      	adds	r3, #4
 8008a58:	4619      	mov	r1, r3
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	f7fe fd07 	bl	800746e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a64:	4b1b      	ldr	r3, [pc, #108]	; (8008ad4 <xTaskIncrementTick+0x168>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d3b8      	bcc.n	80089e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a72:	e7b5      	b.n	80089e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a74:	4b17      	ldr	r3, [pc, #92]	; (8008ad4 <xTaskIncrementTick+0x168>)
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a7a:	4915      	ldr	r1, [pc, #84]	; (8008ad0 <xTaskIncrementTick+0x164>)
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4413      	add	r3, r2
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	440b      	add	r3, r1
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	d901      	bls.n	8008a90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a90:	4b11      	ldr	r3, [pc, #68]	; (8008ad8 <xTaskIncrementTick+0x16c>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d007      	beq.n	8008aa8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	e004      	b.n	8008aa8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a9e:	4b0f      	ldr	r3, [pc, #60]	; (8008adc <xTaskIncrementTick+0x170>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	4a0d      	ldr	r2, [pc, #52]	; (8008adc <xTaskIncrementTick+0x170>)
 8008aa6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008aa8:	697b      	ldr	r3, [r7, #20]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20000e28 	.word	0x20000e28
 8008ab8:	20000e04 	.word	0x20000e04
 8008abc:	20000db8 	.word	0x20000db8
 8008ac0:	20000dbc 	.word	0x20000dbc
 8008ac4:	20000e18 	.word	0x20000e18
 8008ac8:	20000e20 	.word	0x20000e20
 8008acc:	20000e08 	.word	0x20000e08
 8008ad0:	20000930 	.word	0x20000930
 8008ad4:	2000092c 	.word	0x2000092c
 8008ad8:	20000e14 	.word	0x20000e14
 8008adc:	20000e10 	.word	0x20000e10

08008ae0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ae6:	4b28      	ldr	r3, [pc, #160]	; (8008b88 <vTaskSwitchContext+0xa8>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008aee:	4b27      	ldr	r3, [pc, #156]	; (8008b8c <vTaskSwitchContext+0xac>)
 8008af0:	2201      	movs	r2, #1
 8008af2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008af4:	e041      	b.n	8008b7a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008af6:	4b25      	ldr	r3, [pc, #148]	; (8008b8c <vTaskSwitchContext+0xac>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008afc:	4b24      	ldr	r3, [pc, #144]	; (8008b90 <vTaskSwitchContext+0xb0>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	60fb      	str	r3, [r7, #12]
 8008b02:	e010      	b.n	8008b26 <vTaskSwitchContext+0x46>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d10a      	bne.n	8008b20 <vTaskSwitchContext+0x40>
	__asm volatile
 8008b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0e:	f383 8811 	msr	BASEPRI, r3
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	f3bf 8f4f 	dsb	sy
 8008b1a:	607b      	str	r3, [r7, #4]
}
 8008b1c:	bf00      	nop
 8008b1e:	e7fe      	b.n	8008b1e <vTaskSwitchContext+0x3e>
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	60fb      	str	r3, [r7, #12]
 8008b26:	491b      	ldr	r1, [pc, #108]	; (8008b94 <vTaskSwitchContext+0xb4>)
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	4613      	mov	r3, r2
 8008b2c:	009b      	lsls	r3, r3, #2
 8008b2e:	4413      	add	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	440b      	add	r3, r1
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d0e4      	beq.n	8008b04 <vTaskSwitchContext+0x24>
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4a13      	ldr	r2, [pc, #76]	; (8008b94 <vTaskSwitchContext+0xb4>)
 8008b46:	4413      	add	r3, r2
 8008b48:	60bb      	str	r3, [r7, #8]
 8008b4a:	68bb      	ldr	r3, [r7, #8]
 8008b4c:	685b      	ldr	r3, [r3, #4]
 8008b4e:	685a      	ldr	r2, [r3, #4]
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	605a      	str	r2, [r3, #4]
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	3308      	adds	r3, #8
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d104      	bne.n	8008b6a <vTaskSwitchContext+0x8a>
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	605a      	str	r2, [r3, #4]
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	4a09      	ldr	r2, [pc, #36]	; (8008b98 <vTaskSwitchContext+0xb8>)
 8008b72:	6013      	str	r3, [r2, #0]
 8008b74:	4a06      	ldr	r2, [pc, #24]	; (8008b90 <vTaskSwitchContext+0xb0>)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	6013      	str	r3, [r2, #0]
}
 8008b7a:	bf00      	nop
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	20000e28 	.word	0x20000e28
 8008b8c:	20000e14 	.word	0x20000e14
 8008b90:	20000e08 	.word	0x20000e08
 8008b94:	20000930 	.word	0x20000930
 8008b98:	2000092c 	.word	0x2000092c

08008b9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b084      	sub	sp, #16
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10a      	bne.n	8008bc2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	60fb      	str	r3, [r7, #12]
}
 8008bbe:	bf00      	nop
 8008bc0:	e7fe      	b.n	8008bc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bc2:	4b07      	ldr	r3, [pc, #28]	; (8008be0 <vTaskPlaceOnEventList+0x44>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3318      	adds	r3, #24
 8008bc8:	4619      	mov	r1, r3
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f7fe fc73 	bl	80074b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	6838      	ldr	r0, [r7, #0]
 8008bd4:	f000 fb8a 	bl	80092ec <prvAddCurrentTaskToDelayedList>
}
 8008bd8:	bf00      	nop
 8008bda:	3710      	adds	r7, #16
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	2000092c 	.word	0x2000092c

08008be4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10a      	bne.n	8008c0c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	617b      	str	r3, [r7, #20]
}
 8008c08:	bf00      	nop
 8008c0a:	e7fe      	b.n	8008c0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c0c:	4b0a      	ldr	r3, [pc, #40]	; (8008c38 <vTaskPlaceOnEventListRestricted+0x54>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	3318      	adds	r3, #24
 8008c12:	4619      	mov	r1, r3
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f7fe fc2a 	bl	800746e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008c20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c24:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c26:	6879      	ldr	r1, [r7, #4]
 8008c28:	68b8      	ldr	r0, [r7, #8]
 8008c2a:	f000 fb5f 	bl	80092ec <prvAddCurrentTaskToDelayedList>
	}
 8008c2e:	bf00      	nop
 8008c30:	3718      	adds	r7, #24
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	2000092c 	.word	0x2000092c

08008c3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	68db      	ldr	r3, [r3, #12]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10a      	bne.n	8008c68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c56:	f383 8811 	msr	BASEPRI, r3
 8008c5a:	f3bf 8f6f 	isb	sy
 8008c5e:	f3bf 8f4f 	dsb	sy
 8008c62:	60fb      	str	r3, [r7, #12]
}
 8008c64:	bf00      	nop
 8008c66:	e7fe      	b.n	8008c66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	3318      	adds	r3, #24
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7fe fc5b 	bl	8007528 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c72:	4b1e      	ldr	r3, [pc, #120]	; (8008cec <xTaskRemoveFromEventList+0xb0>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d11d      	bne.n	8008cb6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	3304      	adds	r3, #4
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe fc52 	bl	8007528 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c88:	4b19      	ldr	r3, [pc, #100]	; (8008cf0 <xTaskRemoveFromEventList+0xb4>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d903      	bls.n	8008c98 <xTaskRemoveFromEventList+0x5c>
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c94:	4a16      	ldr	r2, [pc, #88]	; (8008cf0 <xTaskRemoveFromEventList+0xb4>)
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c9c:	4613      	mov	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	4413      	add	r3, r2
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	4a13      	ldr	r2, [pc, #76]	; (8008cf4 <xTaskRemoveFromEventList+0xb8>)
 8008ca6:	441a      	add	r2, r3
 8008ca8:	693b      	ldr	r3, [r7, #16]
 8008caa:	3304      	adds	r3, #4
 8008cac:	4619      	mov	r1, r3
 8008cae:	4610      	mov	r0, r2
 8008cb0:	f7fe fbdd 	bl	800746e <vListInsertEnd>
 8008cb4:	e005      	b.n	8008cc2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	3318      	adds	r3, #24
 8008cba:	4619      	mov	r1, r3
 8008cbc:	480e      	ldr	r0, [pc, #56]	; (8008cf8 <xTaskRemoveFromEventList+0xbc>)
 8008cbe:	f7fe fbd6 	bl	800746e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc6:	4b0d      	ldr	r3, [pc, #52]	; (8008cfc <xTaskRemoveFromEventList+0xc0>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d905      	bls.n	8008cdc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	; (8008d00 <xTaskRemoveFromEventList+0xc4>)
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	e001      	b.n	8008ce0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008ce0:	697b      	ldr	r3, [r7, #20]
}
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	3718      	adds	r7, #24
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20000e28 	.word	0x20000e28
 8008cf0:	20000e08 	.word	0x20000e08
 8008cf4:	20000930 	.word	0x20000930
 8008cf8:	20000dc0 	.word	0x20000dc0
 8008cfc:	2000092c 	.word	0x2000092c
 8008d00:	20000e14 	.word	0x20000e14

08008d04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <vTaskInternalSetTimeOutState+0x24>)
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d14:	4b05      	ldr	r3, [pc, #20]	; (8008d2c <vTaskInternalSetTimeOutState+0x28>)
 8008d16:	681a      	ldr	r2, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	605a      	str	r2, [r3, #4]
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr
 8008d28:	20000e18 	.word	0x20000e18
 8008d2c:	20000e04 	.word	0x20000e04

08008d30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b088      	sub	sp, #32
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d10a      	bne.n	8008d56 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	613b      	str	r3, [r7, #16]
}
 8008d52:	bf00      	nop
 8008d54:	e7fe      	b.n	8008d54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d10a      	bne.n	8008d72 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d60:	f383 8811 	msr	BASEPRI, r3
 8008d64:	f3bf 8f6f 	isb	sy
 8008d68:	f3bf 8f4f 	dsb	sy
 8008d6c:	60fb      	str	r3, [r7, #12]
}
 8008d6e:	bf00      	nop
 8008d70:	e7fe      	b.n	8008d70 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008d72:	f000 ff87 	bl	8009c84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d76:	4b1d      	ldr	r3, [pc, #116]	; (8008dec <xTaskCheckForTimeOut+0xbc>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	69ba      	ldr	r2, [r7, #24]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d8e:	d102      	bne.n	8008d96 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d90:	2300      	movs	r3, #0
 8008d92:	61fb      	str	r3, [r7, #28]
 8008d94:	e023      	b.n	8008dde <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	4b15      	ldr	r3, [pc, #84]	; (8008df0 <xTaskCheckForTimeOut+0xc0>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d007      	beq.n	8008db2 <xTaskCheckForTimeOut+0x82>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	69ba      	ldr	r2, [r7, #24]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d302      	bcc.n	8008db2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008dac:	2301      	movs	r3, #1
 8008dae:	61fb      	str	r3, [r7, #28]
 8008db0:	e015      	b.n	8008dde <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	697a      	ldr	r2, [r7, #20]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d20b      	bcs.n	8008dd4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	681a      	ldr	r2, [r3, #0]
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	1ad2      	subs	r2, r2, r3
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f7ff ff9b 	bl	8008d04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	61fb      	str	r3, [r7, #28]
 8008dd2:	e004      	b.n	8008dde <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008dde:	f000 ff81 	bl	8009ce4 <vPortExitCritical>

	return xReturn;
 8008de2:	69fb      	ldr	r3, [r7, #28]
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	3720      	adds	r7, #32
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	20000e04 	.word	0x20000e04
 8008df0:	20000e18 	.word	0x20000e18

08008df4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008df4:	b480      	push	{r7}
 8008df6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008df8:	4b03      	ldr	r3, [pc, #12]	; (8008e08 <vTaskMissedYield+0x14>)
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	601a      	str	r2, [r3, #0]
}
 8008dfe:	bf00      	nop
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr
 8008e08:	20000e14 	.word	0x20000e14

08008e0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b082      	sub	sp, #8
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e14:	f000 f852 	bl	8008ebc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e18:	4b06      	ldr	r3, [pc, #24]	; (8008e34 <prvIdleTask+0x28>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b01      	cmp	r3, #1
 8008e1e:	d9f9      	bls.n	8008e14 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e20:	4b05      	ldr	r3, [pc, #20]	; (8008e38 <prvIdleTask+0x2c>)
 8008e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e30:	e7f0      	b.n	8008e14 <prvIdleTask+0x8>
 8008e32:	bf00      	nop
 8008e34:	20000930 	.word	0x20000930
 8008e38:	e000ed04 	.word	0xe000ed04

08008e3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e42:	2300      	movs	r3, #0
 8008e44:	607b      	str	r3, [r7, #4]
 8008e46:	e00c      	b.n	8008e62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	4613      	mov	r3, r2
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	4413      	add	r3, r2
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	4a12      	ldr	r2, [pc, #72]	; (8008e9c <prvInitialiseTaskLists+0x60>)
 8008e54:	4413      	add	r3, r2
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7fe fadc 	bl	8007414 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	607b      	str	r3, [r7, #4]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b37      	cmp	r3, #55	; 0x37
 8008e66:	d9ef      	bls.n	8008e48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e68:	480d      	ldr	r0, [pc, #52]	; (8008ea0 <prvInitialiseTaskLists+0x64>)
 8008e6a:	f7fe fad3 	bl	8007414 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e6e:	480d      	ldr	r0, [pc, #52]	; (8008ea4 <prvInitialiseTaskLists+0x68>)
 8008e70:	f7fe fad0 	bl	8007414 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e74:	480c      	ldr	r0, [pc, #48]	; (8008ea8 <prvInitialiseTaskLists+0x6c>)
 8008e76:	f7fe facd 	bl	8007414 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e7a:	480c      	ldr	r0, [pc, #48]	; (8008eac <prvInitialiseTaskLists+0x70>)
 8008e7c:	f7fe faca 	bl	8007414 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e80:	480b      	ldr	r0, [pc, #44]	; (8008eb0 <prvInitialiseTaskLists+0x74>)
 8008e82:	f7fe fac7 	bl	8007414 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e86:	4b0b      	ldr	r3, [pc, #44]	; (8008eb4 <prvInitialiseTaskLists+0x78>)
 8008e88:	4a05      	ldr	r2, [pc, #20]	; (8008ea0 <prvInitialiseTaskLists+0x64>)
 8008e8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e8c:	4b0a      	ldr	r3, [pc, #40]	; (8008eb8 <prvInitialiseTaskLists+0x7c>)
 8008e8e:	4a05      	ldr	r2, [pc, #20]	; (8008ea4 <prvInitialiseTaskLists+0x68>)
 8008e90:	601a      	str	r2, [r3, #0]
}
 8008e92:	bf00      	nop
 8008e94:	3708      	adds	r7, #8
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop
 8008e9c:	20000930 	.word	0x20000930
 8008ea0:	20000d90 	.word	0x20000d90
 8008ea4:	20000da4 	.word	0x20000da4
 8008ea8:	20000dc0 	.word	0x20000dc0
 8008eac:	20000dd4 	.word	0x20000dd4
 8008eb0:	20000dec 	.word	0x20000dec
 8008eb4:	20000db8 	.word	0x20000db8
 8008eb8:	20000dbc 	.word	0x20000dbc

08008ebc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ec2:	e019      	b.n	8008ef8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ec4:	f000 fede 	bl	8009c84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ec8:	4b10      	ldr	r3, [pc, #64]	; (8008f0c <prvCheckTasksWaitingTermination+0x50>)
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f7fe fb27 	bl	8007528 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008eda:	4b0d      	ldr	r3, [pc, #52]	; (8008f10 <prvCheckTasksWaitingTermination+0x54>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3b01      	subs	r3, #1
 8008ee0:	4a0b      	ldr	r2, [pc, #44]	; (8008f10 <prvCheckTasksWaitingTermination+0x54>)
 8008ee2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ee4:	4b0b      	ldr	r3, [pc, #44]	; (8008f14 <prvCheckTasksWaitingTermination+0x58>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	4a0a      	ldr	r2, [pc, #40]	; (8008f14 <prvCheckTasksWaitingTermination+0x58>)
 8008eec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008eee:	f000 fef9 	bl	8009ce4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f810 	bl	8008f18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ef8:	4b06      	ldr	r3, [pc, #24]	; (8008f14 <prvCheckTasksWaitingTermination+0x58>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1e1      	bne.n	8008ec4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f00:	bf00      	nop
 8008f02:	bf00      	nop
 8008f04:	3708      	adds	r7, #8
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}
 8008f0a:	bf00      	nop
 8008f0c:	20000dd4 	.word	0x20000dd4
 8008f10:	20000e00 	.word	0x20000e00
 8008f14:	20000de8 	.word	0x20000de8

08008f18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d108      	bne.n	8008f3c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f001 f896 	bl	800a060 <vPortFree>
				vPortFree( pxTCB );
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	f001 f893 	bl	800a060 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f3a:	e018      	b.n	8008f6e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d103      	bne.n	8008f4e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f001 f88a 	bl	800a060 <vPortFree>
	}
 8008f4c:	e00f      	b.n	8008f6e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d00a      	beq.n	8008f6e <prvDeleteTCB+0x56>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	60fb      	str	r3, [r7, #12]
}
 8008f6a:	bf00      	nop
 8008f6c:	e7fe      	b.n	8008f6c <prvDeleteTCB+0x54>
	}
 8008f6e:	bf00      	nop
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
	...

08008f78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f7e:	4b0c      	ldr	r3, [pc, #48]	; (8008fb0 <prvResetNextTaskUnblockTime+0x38>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d104      	bne.n	8008f92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f88:	4b0a      	ldr	r3, [pc, #40]	; (8008fb4 <prvResetNextTaskUnblockTime+0x3c>)
 8008f8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f90:	e008      	b.n	8008fa4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f92:	4b07      	ldr	r3, [pc, #28]	; (8008fb0 <prvResetNextTaskUnblockTime+0x38>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	4a04      	ldr	r2, [pc, #16]	; (8008fb4 <prvResetNextTaskUnblockTime+0x3c>)
 8008fa2:	6013      	str	r3, [r2, #0]
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	20000db8 	.word	0x20000db8
 8008fb4:	20000e20 	.word	0x20000e20

08008fb8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008fbe:	4b05      	ldr	r3, [pc, #20]	; (8008fd4 <xTaskGetCurrentTaskHandle+0x1c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008fc4:	687b      	ldr	r3, [r7, #4]
	}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	370c      	adds	r7, #12
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr
 8008fd2:	bf00      	nop
 8008fd4:	2000092c 	.word	0x2000092c

08008fd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008fde:	4b0b      	ldr	r3, [pc, #44]	; (800900c <xTaskGetSchedulerState+0x34>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d102      	bne.n	8008fec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	607b      	str	r3, [r7, #4]
 8008fea:	e008      	b.n	8008ffe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fec:	4b08      	ldr	r3, [pc, #32]	; (8009010 <xTaskGetSchedulerState+0x38>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d102      	bne.n	8008ffa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ff4:	2302      	movs	r3, #2
 8008ff6:	607b      	str	r3, [r7, #4]
 8008ff8:	e001      	b.n	8008ffe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008ffe:	687b      	ldr	r3, [r7, #4]
	}
 8009000:	4618      	mov	r0, r3
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	20000e0c 	.word	0x20000e0c
 8009010:	20000e28 	.word	0x20000e28

08009014 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009020:	2300      	movs	r3, #0
 8009022:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d051      	beq.n	80090ce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800902e:	4b2a      	ldr	r3, [pc, #168]	; (80090d8 <xTaskPriorityInherit+0xc4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009034:	429a      	cmp	r2, r3
 8009036:	d241      	bcs.n	80090bc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	2b00      	cmp	r3, #0
 800903e:	db06      	blt.n	800904e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009040:	4b25      	ldr	r3, [pc, #148]	; (80090d8 <xTaskPriorityInherit+0xc4>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009046:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	6959      	ldr	r1, [r3, #20]
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009056:	4613      	mov	r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	4413      	add	r3, r2
 800905c:	009b      	lsls	r3, r3, #2
 800905e:	4a1f      	ldr	r2, [pc, #124]	; (80090dc <xTaskPriorityInherit+0xc8>)
 8009060:	4413      	add	r3, r2
 8009062:	4299      	cmp	r1, r3
 8009064:	d122      	bne.n	80090ac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	3304      	adds	r3, #4
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe fa5c 	bl	8007528 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009070:	4b19      	ldr	r3, [pc, #100]	; (80090d8 <xTaskPriorityInherit+0xc4>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800907e:	4b18      	ldr	r3, [pc, #96]	; (80090e0 <xTaskPriorityInherit+0xcc>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	429a      	cmp	r2, r3
 8009084:	d903      	bls.n	800908e <xTaskPriorityInherit+0x7a>
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908a:	4a15      	ldr	r2, [pc, #84]	; (80090e0 <xTaskPriorityInherit+0xcc>)
 800908c:	6013      	str	r3, [r2, #0]
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009092:	4613      	mov	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4a10      	ldr	r2, [pc, #64]	; (80090dc <xTaskPriorityInherit+0xc8>)
 800909c:	441a      	add	r2, r3
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	3304      	adds	r3, #4
 80090a2:	4619      	mov	r1, r3
 80090a4:	4610      	mov	r0, r2
 80090a6:	f7fe f9e2 	bl	800746e <vListInsertEnd>
 80090aa:	e004      	b.n	80090b6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80090ac:	4b0a      	ldr	r3, [pc, #40]	; (80090d8 <xTaskPriorityInherit+0xc4>)
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80090b6:	2301      	movs	r3, #1
 80090b8:	60fb      	str	r3, [r7, #12]
 80090ba:	e008      	b.n	80090ce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090c0:	4b05      	ldr	r3, [pc, #20]	; (80090d8 <xTaskPriorityInherit+0xc4>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c6:	429a      	cmp	r2, r3
 80090c8:	d201      	bcs.n	80090ce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80090ca:	2301      	movs	r3, #1
 80090cc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090ce:	68fb      	ldr	r3, [r7, #12]
	}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3710      	adds	r7, #16
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	2000092c 	.word	0x2000092c
 80090dc:	20000930 	.word	0x20000930
 80090e0:	20000e08 	.word	0x20000e08

080090e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80090f0:	2300      	movs	r3, #0
 80090f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d056      	beq.n	80091a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80090fa:	4b2e      	ldr	r3, [pc, #184]	; (80091b4 <xTaskPriorityDisinherit+0xd0>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	429a      	cmp	r2, r3
 8009102:	d00a      	beq.n	800911a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009108:	f383 8811 	msr	BASEPRI, r3
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f3bf 8f4f 	dsb	sy
 8009114:	60fb      	str	r3, [r7, #12]
}
 8009116:	bf00      	nop
 8009118:	e7fe      	b.n	8009118 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10a      	bne.n	8009138 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	60bb      	str	r3, [r7, #8]
}
 8009134:	bf00      	nop
 8009136:	e7fe      	b.n	8009136 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009138:	693b      	ldr	r3, [r7, #16]
 800913a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800913c:	1e5a      	subs	r2, r3, #1
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800914a:	429a      	cmp	r2, r3
 800914c:	d02c      	beq.n	80091a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009152:	2b00      	cmp	r3, #0
 8009154:	d128      	bne.n	80091a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	3304      	adds	r3, #4
 800915a:	4618      	mov	r0, r3
 800915c:	f7fe f9e4 	bl	8007528 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009178:	4b0f      	ldr	r3, [pc, #60]	; (80091b8 <xTaskPriorityDisinherit+0xd4>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	429a      	cmp	r2, r3
 800917e:	d903      	bls.n	8009188 <xTaskPriorityDisinherit+0xa4>
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009184:	4a0c      	ldr	r2, [pc, #48]	; (80091b8 <xTaskPriorityDisinherit+0xd4>)
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800918c:	4613      	mov	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	4413      	add	r3, r2
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	4a09      	ldr	r2, [pc, #36]	; (80091bc <xTaskPriorityDisinherit+0xd8>)
 8009196:	441a      	add	r2, r3
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	3304      	adds	r3, #4
 800919c:	4619      	mov	r1, r3
 800919e:	4610      	mov	r0, r2
 80091a0:	f7fe f965 	bl	800746e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80091a4:	2301      	movs	r3, #1
 80091a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80091a8:	697b      	ldr	r3, [r7, #20]
	}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3718      	adds	r7, #24
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	2000092c 	.word	0x2000092c
 80091b8:	20000e08 	.word	0x20000e08
 80091bc:	20000930 	.word	0x20000930

080091c0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b088      	sub	sp, #32
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80091ce:	2301      	movs	r3, #1
 80091d0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d06a      	beq.n	80092ae <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80091d8:	69bb      	ldr	r3, [r7, #24]
 80091da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d10a      	bne.n	80091f6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	60fb      	str	r3, [r7, #12]
}
 80091f2:	bf00      	nop
 80091f4:	e7fe      	b.n	80091f4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091fa:	683a      	ldr	r2, [r7, #0]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d902      	bls.n	8009206 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	61fb      	str	r3, [r7, #28]
 8009204:	e002      	b.n	800920c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009206:	69bb      	ldr	r3, [r7, #24]
 8009208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800920a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009210:	69fa      	ldr	r2, [r7, #28]
 8009212:	429a      	cmp	r2, r3
 8009214:	d04b      	beq.n	80092ae <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009216:	69bb      	ldr	r3, [r7, #24]
 8009218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800921a:	697a      	ldr	r2, [r7, #20]
 800921c:	429a      	cmp	r2, r3
 800921e:	d146      	bne.n	80092ae <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009220:	4b25      	ldr	r3, [pc, #148]	; (80092b8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	69ba      	ldr	r2, [r7, #24]
 8009226:	429a      	cmp	r2, r3
 8009228:	d10a      	bne.n	8009240 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	60bb      	str	r3, [r7, #8]
}
 800923c:	bf00      	nop
 800923e:	e7fe      	b.n	800923e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009240:	69bb      	ldr	r3, [r7, #24]
 8009242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009244:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	69fa      	ldr	r2, [r7, #28]
 800924a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800924c:	69bb      	ldr	r3, [r7, #24]
 800924e:	699b      	ldr	r3, [r3, #24]
 8009250:	2b00      	cmp	r3, #0
 8009252:	db04      	blt.n	800925e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800925a:	69bb      	ldr	r3, [r7, #24]
 800925c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	6959      	ldr	r1, [r3, #20]
 8009262:	693a      	ldr	r2, [r7, #16]
 8009264:	4613      	mov	r3, r2
 8009266:	009b      	lsls	r3, r3, #2
 8009268:	4413      	add	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4a13      	ldr	r2, [pc, #76]	; (80092bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800926e:	4413      	add	r3, r2
 8009270:	4299      	cmp	r1, r3
 8009272:	d11c      	bne.n	80092ae <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009274:	69bb      	ldr	r3, [r7, #24]
 8009276:	3304      	adds	r3, #4
 8009278:	4618      	mov	r0, r3
 800927a:	f7fe f955 	bl	8007528 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009282:	4b0f      	ldr	r3, [pc, #60]	; (80092c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	429a      	cmp	r2, r3
 8009288:	d903      	bls.n	8009292 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800928a:	69bb      	ldr	r3, [r7, #24]
 800928c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928e:	4a0c      	ldr	r2, [pc, #48]	; (80092c0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009290:	6013      	str	r3, [r2, #0]
 8009292:	69bb      	ldr	r3, [r7, #24]
 8009294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009296:	4613      	mov	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4a07      	ldr	r2, [pc, #28]	; (80092bc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80092a0:	441a      	add	r2, r3
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	3304      	adds	r3, #4
 80092a6:	4619      	mov	r1, r3
 80092a8:	4610      	mov	r0, r2
 80092aa:	f7fe f8e0 	bl	800746e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092ae:	bf00      	nop
 80092b0:	3720      	adds	r7, #32
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	2000092c 	.word	0x2000092c
 80092bc:	20000930 	.word	0x20000930
 80092c0:	20000e08 	.word	0x20000e08

080092c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80092c4:	b480      	push	{r7}
 80092c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80092c8:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d004      	beq.n	80092da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80092d0:	4b05      	ldr	r3, [pc, #20]	; (80092e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80092d6:	3201      	adds	r2, #1
 80092d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80092da:	4b03      	ldr	r3, [pc, #12]	; (80092e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80092dc:	681b      	ldr	r3, [r3, #0]
	}
 80092de:	4618      	mov	r0, r3
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	2000092c 	.word	0x2000092c

080092ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80092f6:	4b21      	ldr	r3, [pc, #132]	; (800937c <prvAddCurrentTaskToDelayedList+0x90>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092fc:	4b20      	ldr	r3, [pc, #128]	; (8009380 <prvAddCurrentTaskToDelayedList+0x94>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	3304      	adds	r3, #4
 8009302:	4618      	mov	r0, r3
 8009304:	f7fe f910 	bl	8007528 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800930e:	d10a      	bne.n	8009326 <prvAddCurrentTaskToDelayedList+0x3a>
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d007      	beq.n	8009326 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009316:	4b1a      	ldr	r3, [pc, #104]	; (8009380 <prvAddCurrentTaskToDelayedList+0x94>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3304      	adds	r3, #4
 800931c:	4619      	mov	r1, r3
 800931e:	4819      	ldr	r0, [pc, #100]	; (8009384 <prvAddCurrentTaskToDelayedList+0x98>)
 8009320:	f7fe f8a5 	bl	800746e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009324:	e026      	b.n	8009374 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4413      	add	r3, r2
 800932c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800932e:	4b14      	ldr	r3, [pc, #80]	; (8009380 <prvAddCurrentTaskToDelayedList+0x94>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009336:	68ba      	ldr	r2, [r7, #8]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	429a      	cmp	r2, r3
 800933c:	d209      	bcs.n	8009352 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800933e:	4b12      	ldr	r3, [pc, #72]	; (8009388 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	4b0f      	ldr	r3, [pc, #60]	; (8009380 <prvAddCurrentTaskToDelayedList+0x94>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3304      	adds	r3, #4
 8009348:	4619      	mov	r1, r3
 800934a:	4610      	mov	r0, r2
 800934c:	f7fe f8b3 	bl	80074b6 <vListInsert>
}
 8009350:	e010      	b.n	8009374 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009352:	4b0e      	ldr	r3, [pc, #56]	; (800938c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	4b0a      	ldr	r3, [pc, #40]	; (8009380 <prvAddCurrentTaskToDelayedList+0x94>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	3304      	adds	r3, #4
 800935c:	4619      	mov	r1, r3
 800935e:	4610      	mov	r0, r2
 8009360:	f7fe f8a9 	bl	80074b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009364:	4b0a      	ldr	r3, [pc, #40]	; (8009390 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	429a      	cmp	r2, r3
 800936c:	d202      	bcs.n	8009374 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800936e:	4a08      	ldr	r2, [pc, #32]	; (8009390 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	6013      	str	r3, [r2, #0]
}
 8009374:	bf00      	nop
 8009376:	3710      	adds	r7, #16
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}
 800937c:	20000e04 	.word	0x20000e04
 8009380:	2000092c 	.word	0x2000092c
 8009384:	20000dec 	.word	0x20000dec
 8009388:	20000dbc 	.word	0x20000dbc
 800938c:	20000db8 	.word	0x20000db8
 8009390:	20000e20 	.word	0x20000e20

08009394 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b08a      	sub	sp, #40	; 0x28
 8009398:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800939a:	2300      	movs	r3, #0
 800939c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800939e:	f000 fb07 	bl	80099b0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80093a2:	4b1c      	ldr	r3, [pc, #112]	; (8009414 <xTimerCreateTimerTask+0x80>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d021      	beq.n	80093ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80093aa:	2300      	movs	r3, #0
 80093ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80093ae:	2300      	movs	r3, #0
 80093b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80093b2:	1d3a      	adds	r2, r7, #4
 80093b4:	f107 0108 	add.w	r1, r7, #8
 80093b8:	f107 030c 	add.w	r3, r7, #12
 80093bc:	4618      	mov	r0, r3
 80093be:	f7fe f80f 	bl	80073e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	68fa      	ldr	r2, [r7, #12]
 80093c8:	9202      	str	r2, [sp, #8]
 80093ca:	9301      	str	r3, [sp, #4]
 80093cc:	2302      	movs	r3, #2
 80093ce:	9300      	str	r3, [sp, #0]
 80093d0:	2300      	movs	r3, #0
 80093d2:	460a      	mov	r2, r1
 80093d4:	4910      	ldr	r1, [pc, #64]	; (8009418 <xTimerCreateTimerTask+0x84>)
 80093d6:	4811      	ldr	r0, [pc, #68]	; (800941c <xTimerCreateTimerTask+0x88>)
 80093d8:	f7fe ffd0 	bl	800837c <xTaskCreateStatic>
 80093dc:	4603      	mov	r3, r0
 80093de:	4a10      	ldr	r2, [pc, #64]	; (8009420 <xTimerCreateTimerTask+0x8c>)
 80093e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80093e2:	4b0f      	ldr	r3, [pc, #60]	; (8009420 <xTimerCreateTimerTask+0x8c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80093ea:	2301      	movs	r3, #1
 80093ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10a      	bne.n	800940a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80093f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f8:	f383 8811 	msr	BASEPRI, r3
 80093fc:	f3bf 8f6f 	isb	sy
 8009400:	f3bf 8f4f 	dsb	sy
 8009404:	613b      	str	r3, [r7, #16]
}
 8009406:	bf00      	nop
 8009408:	e7fe      	b.n	8009408 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800940a:	697b      	ldr	r3, [r7, #20]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	20000e5c 	.word	0x20000e5c
 8009418:	0800b824 	.word	0x0800b824
 800941c:	08009559 	.word	0x08009559
 8009420:	20000e60 	.word	0x20000e60

08009424 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b08a      	sub	sp, #40	; 0x28
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
 8009430:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009432:	2300      	movs	r3, #0
 8009434:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10a      	bne.n	8009452 <xTimerGenericCommand+0x2e>
	__asm volatile
 800943c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009440:	f383 8811 	msr	BASEPRI, r3
 8009444:	f3bf 8f6f 	isb	sy
 8009448:	f3bf 8f4f 	dsb	sy
 800944c:	623b      	str	r3, [r7, #32]
}
 800944e:	bf00      	nop
 8009450:	e7fe      	b.n	8009450 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009452:	4b1a      	ldr	r3, [pc, #104]	; (80094bc <xTimerGenericCommand+0x98>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d02a      	beq.n	80094b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	2b05      	cmp	r3, #5
 800946a:	dc18      	bgt.n	800949e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800946c:	f7ff fdb4 	bl	8008fd8 <xTaskGetSchedulerState>
 8009470:	4603      	mov	r3, r0
 8009472:	2b02      	cmp	r3, #2
 8009474:	d109      	bne.n	800948a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009476:	4b11      	ldr	r3, [pc, #68]	; (80094bc <xTimerGenericCommand+0x98>)
 8009478:	6818      	ldr	r0, [r3, #0]
 800947a:	f107 0110 	add.w	r1, r7, #16
 800947e:	2300      	movs	r3, #0
 8009480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009482:	f7fe fa6f 	bl	8007964 <xQueueGenericSend>
 8009486:	6278      	str	r0, [r7, #36]	; 0x24
 8009488:	e012      	b.n	80094b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800948a:	4b0c      	ldr	r3, [pc, #48]	; (80094bc <xTimerGenericCommand+0x98>)
 800948c:	6818      	ldr	r0, [r3, #0]
 800948e:	f107 0110 	add.w	r1, r7, #16
 8009492:	2300      	movs	r3, #0
 8009494:	2200      	movs	r2, #0
 8009496:	f7fe fa65 	bl	8007964 <xQueueGenericSend>
 800949a:	6278      	str	r0, [r7, #36]	; 0x24
 800949c:	e008      	b.n	80094b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800949e:	4b07      	ldr	r3, [pc, #28]	; (80094bc <xTimerGenericCommand+0x98>)
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	f107 0110 	add.w	r1, r7, #16
 80094a6:	2300      	movs	r3, #0
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	f7fe fb59 	bl	8007b60 <xQueueGenericSendFromISR>
 80094ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80094b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3728      	adds	r7, #40	; 0x28
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	20000e5c 	.word	0x20000e5c

080094c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b088      	sub	sp, #32
 80094c4:	af02      	add	r7, sp, #8
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ca:	4b22      	ldr	r3, [pc, #136]	; (8009554 <prvProcessExpiredTimer+0x94>)
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80094d4:	697b      	ldr	r3, [r7, #20]
 80094d6:	3304      	adds	r3, #4
 80094d8:	4618      	mov	r0, r3
 80094da:	f7fe f825 	bl	8007528 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094e4:	f003 0304 	and.w	r3, r3, #4
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d022      	beq.n	8009532 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	699a      	ldr	r2, [r3, #24]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	18d1      	adds	r1, r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	6978      	ldr	r0, [r7, #20]
 80094fa:	f000 f8d1 	bl	80096a0 <prvInsertTimerInActiveList>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d01f      	beq.n	8009544 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009504:	2300      	movs	r3, #0
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	2300      	movs	r3, #0
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	2100      	movs	r1, #0
 800950e:	6978      	ldr	r0, [r7, #20]
 8009510:	f7ff ff88 	bl	8009424 <xTimerGenericCommand>
 8009514:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d113      	bne.n	8009544 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	60fb      	str	r3, [r7, #12]
}
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009532:	697b      	ldr	r3, [r7, #20]
 8009534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009538:	f023 0301 	bic.w	r3, r3, #1
 800953c:	b2da      	uxtb	r2, r3
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	6a1b      	ldr	r3, [r3, #32]
 8009548:	6978      	ldr	r0, [r7, #20]
 800954a:	4798      	blx	r3
}
 800954c:	bf00      	nop
 800954e:	3718      	adds	r7, #24
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}
 8009554:	20000e54 	.word	0x20000e54

08009558 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009560:	f107 0308 	add.w	r3, r7, #8
 8009564:	4618      	mov	r0, r3
 8009566:	f000 f857 	bl	8009618 <prvGetNextExpireTime>
 800956a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4619      	mov	r1, r3
 8009570:	68f8      	ldr	r0, [r7, #12]
 8009572:	f000 f803 	bl	800957c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009576:	f000 f8d5 	bl	8009724 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800957a:	e7f1      	b.n	8009560 <prvTimerTask+0x8>

0800957c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009586:	f7ff f935 	bl	80087f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800958a:	f107 0308 	add.w	r3, r7, #8
 800958e:	4618      	mov	r0, r3
 8009590:	f000 f866 	bl	8009660 <prvSampleTimeNow>
 8009594:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d130      	bne.n	80095fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10a      	bne.n	80095b8 <prvProcessTimerOrBlockTask+0x3c>
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d806      	bhi.n	80095b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80095aa:	f7ff f931 	bl	8008810 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80095ae:	68f9      	ldr	r1, [r7, #12]
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7ff ff85 	bl	80094c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80095b6:	e024      	b.n	8009602 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d008      	beq.n	80095d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80095be:	4b13      	ldr	r3, [pc, #76]	; (800960c <prvProcessTimerOrBlockTask+0x90>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d101      	bne.n	80095cc <prvProcessTimerOrBlockTask+0x50>
 80095c8:	2301      	movs	r3, #1
 80095ca:	e000      	b.n	80095ce <prvProcessTimerOrBlockTask+0x52>
 80095cc:	2300      	movs	r3, #0
 80095ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80095d0:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <prvProcessTimerOrBlockTask+0x94>)
 80095d2:	6818      	ldr	r0, [r3, #0]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	1ad3      	subs	r3, r2, r3
 80095da:	683a      	ldr	r2, [r7, #0]
 80095dc:	4619      	mov	r1, r3
 80095de:	f7fe fe99 	bl	8008314 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80095e2:	f7ff f915 	bl	8008810 <xTaskResumeAll>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10a      	bne.n	8009602 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80095ec:	4b09      	ldr	r3, [pc, #36]	; (8009614 <prvProcessTimerOrBlockTask+0x98>)
 80095ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095f2:	601a      	str	r2, [r3, #0]
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	f3bf 8f6f 	isb	sy
}
 80095fc:	e001      	b.n	8009602 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80095fe:	f7ff f907 	bl	8008810 <xTaskResumeAll>
}
 8009602:	bf00      	nop
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}
 800960a:	bf00      	nop
 800960c:	20000e58 	.word	0x20000e58
 8009610:	20000e5c 	.word	0x20000e5c
 8009614:	e000ed04 	.word	0xe000ed04

08009618 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009618:	b480      	push	{r7}
 800961a:	b085      	sub	sp, #20
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009620:	4b0e      	ldr	r3, [pc, #56]	; (800965c <prvGetNextExpireTime+0x44>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d101      	bne.n	800962e <prvGetNextExpireTime+0x16>
 800962a:	2201      	movs	r2, #1
 800962c:	e000      	b.n	8009630 <prvGetNextExpireTime+0x18>
 800962e:	2200      	movs	r2, #0
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d105      	bne.n	8009648 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800963c:	4b07      	ldr	r3, [pc, #28]	; (800965c <prvGetNextExpireTime+0x44>)
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	60fb      	str	r3, [r7, #12]
 8009646:	e001      	b.n	800964c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009648:	2300      	movs	r3, #0
 800964a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800964c:	68fb      	ldr	r3, [r7, #12]
}
 800964e:	4618      	mov	r0, r3
 8009650:	3714      	adds	r7, #20
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr
 800965a:	bf00      	nop
 800965c:	20000e54 	.word	0x20000e54

08009660 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009668:	f7ff f970 	bl	800894c <xTaskGetTickCount>
 800966c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800966e:	4b0b      	ldr	r3, [pc, #44]	; (800969c <prvSampleTimeNow+0x3c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	429a      	cmp	r2, r3
 8009676:	d205      	bcs.n	8009684 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009678:	f000 f936 	bl	80098e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	601a      	str	r2, [r3, #0]
 8009682:	e002      	b.n	800968a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800968a:	4a04      	ldr	r2, [pc, #16]	; (800969c <prvSampleTimeNow+0x3c>)
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009690:	68fb      	ldr	r3, [r7, #12]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	20000e64 	.word	0x20000e64

080096a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
 80096ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80096ae:	2300      	movs	r3, #0
 80096b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	68ba      	ldr	r2, [r7, #8]
 80096b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	68fa      	ldr	r2, [r7, #12]
 80096bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d812      	bhi.n	80096ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	1ad2      	subs	r2, r2, r3
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	699b      	ldr	r3, [r3, #24]
 80096d0:	429a      	cmp	r2, r3
 80096d2:	d302      	bcc.n	80096da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80096d4:	2301      	movs	r3, #1
 80096d6:	617b      	str	r3, [r7, #20]
 80096d8:	e01b      	b.n	8009712 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80096da:	4b10      	ldr	r3, [pc, #64]	; (800971c <prvInsertTimerInActiveList+0x7c>)
 80096dc:	681a      	ldr	r2, [r3, #0]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3304      	adds	r3, #4
 80096e2:	4619      	mov	r1, r3
 80096e4:	4610      	mov	r0, r2
 80096e6:	f7fd fee6 	bl	80074b6 <vListInsert>
 80096ea:	e012      	b.n	8009712 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d206      	bcs.n	8009702 <prvInsertTimerInActiveList+0x62>
 80096f4:	68ba      	ldr	r2, [r7, #8]
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d302      	bcc.n	8009702 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80096fc:	2301      	movs	r3, #1
 80096fe:	617b      	str	r3, [r7, #20]
 8009700:	e007      	b.n	8009712 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009702:	4b07      	ldr	r3, [pc, #28]	; (8009720 <prvInsertTimerInActiveList+0x80>)
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	3304      	adds	r3, #4
 800970a:	4619      	mov	r1, r3
 800970c:	4610      	mov	r0, r2
 800970e:	f7fd fed2 	bl	80074b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009712:	697b      	ldr	r3, [r7, #20]
}
 8009714:	4618      	mov	r0, r3
 8009716:	3718      	adds	r7, #24
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	20000e58 	.word	0x20000e58
 8009720:	20000e54 	.word	0x20000e54

08009724 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b08e      	sub	sp, #56	; 0x38
 8009728:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800972a:	e0ca      	b.n	80098c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2b00      	cmp	r3, #0
 8009730:	da18      	bge.n	8009764 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009732:	1d3b      	adds	r3, r7, #4
 8009734:	3304      	adds	r3, #4
 8009736:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973a:	2b00      	cmp	r3, #0
 800973c:	d10a      	bne.n	8009754 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	61fb      	str	r3, [r7, #28]
}
 8009750:	bf00      	nop
 8009752:	e7fe      	b.n	8009752 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800975a:	6850      	ldr	r0, [r2, #4]
 800975c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800975e:	6892      	ldr	r2, [r2, #8]
 8009760:	4611      	mov	r1, r2
 8009762:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2b00      	cmp	r3, #0
 8009768:	f2c0 80ab 	blt.w	80098c2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	695b      	ldr	r3, [r3, #20]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d004      	beq.n	8009782 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977a:	3304      	adds	r3, #4
 800977c:	4618      	mov	r0, r3
 800977e:	f7fd fed3 	bl	8007528 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009782:	463b      	mov	r3, r7
 8009784:	4618      	mov	r0, r3
 8009786:	f7ff ff6b 	bl	8009660 <prvSampleTimeNow>
 800978a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b09      	cmp	r3, #9
 8009790:	f200 8096 	bhi.w	80098c0 <prvProcessReceivedCommands+0x19c>
 8009794:	a201      	add	r2, pc, #4	; (adr r2, 800979c <prvProcessReceivedCommands+0x78>)
 8009796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979a:	bf00      	nop
 800979c:	080097c5 	.word	0x080097c5
 80097a0:	080097c5 	.word	0x080097c5
 80097a4:	080097c5 	.word	0x080097c5
 80097a8:	08009839 	.word	0x08009839
 80097ac:	0800984d 	.word	0x0800984d
 80097b0:	08009897 	.word	0x08009897
 80097b4:	080097c5 	.word	0x080097c5
 80097b8:	080097c5 	.word	0x080097c5
 80097bc:	08009839 	.word	0x08009839
 80097c0:	0800984d 	.word	0x0800984d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ca:	f043 0301 	orr.w	r3, r3, #1
 80097ce:	b2da      	uxtb	r2, r3
 80097d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	18d1      	adds	r1, r2, r3
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097e4:	f7ff ff5c 	bl	80096a0 <prvInsertTimerInActiveList>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d069      	beq.n	80098c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80097f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097fc:	f003 0304 	and.w	r3, r3, #4
 8009800:	2b00      	cmp	r3, #0
 8009802:	d05e      	beq.n	80098c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009808:	699b      	ldr	r3, [r3, #24]
 800980a:	441a      	add	r2, r3
 800980c:	2300      	movs	r3, #0
 800980e:	9300      	str	r3, [sp, #0]
 8009810:	2300      	movs	r3, #0
 8009812:	2100      	movs	r1, #0
 8009814:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009816:	f7ff fe05 	bl	8009424 <xTimerGenericCommand>
 800981a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d14f      	bne.n	80098c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009826:	f383 8811 	msr	BASEPRI, r3
 800982a:	f3bf 8f6f 	isb	sy
 800982e:	f3bf 8f4f 	dsb	sy
 8009832:	61bb      	str	r3, [r7, #24]
}
 8009834:	bf00      	nop
 8009836:	e7fe      	b.n	8009836 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800983e:	f023 0301 	bic.w	r3, r3, #1
 8009842:	b2da      	uxtb	r2, r3
 8009844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800984a:	e03a      	b.n	80098c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800984c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800984e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009852:	f043 0301 	orr.w	r3, r3, #1
 8009856:	b2da      	uxtb	r2, r3
 8009858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009862:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009866:	699b      	ldr	r3, [r3, #24]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10a      	bne.n	8009882 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	617b      	str	r3, [r7, #20]
}
 800987e:	bf00      	nop
 8009880:	e7fe      	b.n	8009880 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009884:	699a      	ldr	r2, [r3, #24]
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	18d1      	adds	r1, r2, r3
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800988e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009890:	f7ff ff06 	bl	80096a0 <prvInsertTimerInActiveList>
					break;
 8009894:	e015      	b.n	80098c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800989c:	f003 0302 	and.w	r3, r3, #2
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d103      	bne.n	80098ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80098a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80098a6:	f000 fbdb 	bl	800a060 <vPortFree>
 80098aa:	e00a      	b.n	80098c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80098ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098b2:	f023 0301 	bic.w	r3, r3, #1
 80098b6:	b2da      	uxtb	r2, r3
 80098b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80098be:	e000      	b.n	80098c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80098c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098c2:	4b08      	ldr	r3, [pc, #32]	; (80098e4 <prvProcessReceivedCommands+0x1c0>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	1d39      	adds	r1, r7, #4
 80098c8:	2200      	movs	r2, #0
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fe f9e4 	bl	8007c98 <xQueueReceive>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	f47f af2a 	bne.w	800972c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80098d8:	bf00      	nop
 80098da:	bf00      	nop
 80098dc:	3730      	adds	r7, #48	; 0x30
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	20000e5c 	.word	0x20000e5c

080098e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b088      	sub	sp, #32
 80098ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098ee:	e048      	b.n	8009982 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098f0:	4b2d      	ldr	r3, [pc, #180]	; (80099a8 <prvSwitchTimerLists+0xc0>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098fa:	4b2b      	ldr	r3, [pc, #172]	; (80099a8 <prvSwitchTimerLists+0xc0>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	68db      	ldr	r3, [r3, #12]
 8009902:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	3304      	adds	r3, #4
 8009908:	4618      	mov	r0, r3
 800990a:	f7fd fe0d 	bl	8007528 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800991c:	f003 0304 	and.w	r3, r3, #4
 8009920:	2b00      	cmp	r3, #0
 8009922:	d02e      	beq.n	8009982 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	693a      	ldr	r2, [r7, #16]
 800992a:	4413      	add	r3, r2
 800992c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	693b      	ldr	r3, [r7, #16]
 8009932:	429a      	cmp	r2, r3
 8009934:	d90e      	bls.n	8009954 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	68fa      	ldr	r2, [r7, #12]
 8009940:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009942:	4b19      	ldr	r3, [pc, #100]	; (80099a8 <prvSwitchTimerLists+0xc0>)
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3304      	adds	r3, #4
 800994a:	4619      	mov	r1, r3
 800994c:	4610      	mov	r0, r2
 800994e:	f7fd fdb2 	bl	80074b6 <vListInsert>
 8009952:	e016      	b.n	8009982 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009954:	2300      	movs	r3, #0
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	2300      	movs	r3, #0
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	2100      	movs	r1, #0
 800995e:	68f8      	ldr	r0, [r7, #12]
 8009960:	f7ff fd60 	bl	8009424 <xTimerGenericCommand>
 8009964:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10a      	bne.n	8009982 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800996c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009970:	f383 8811 	msr	BASEPRI, r3
 8009974:	f3bf 8f6f 	isb	sy
 8009978:	f3bf 8f4f 	dsb	sy
 800997c:	603b      	str	r3, [r7, #0]
}
 800997e:	bf00      	nop
 8009980:	e7fe      	b.n	8009980 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009982:	4b09      	ldr	r3, [pc, #36]	; (80099a8 <prvSwitchTimerLists+0xc0>)
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1b1      	bne.n	80098f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800998c:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <prvSwitchTimerLists+0xc0>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009992:	4b06      	ldr	r3, [pc, #24]	; (80099ac <prvSwitchTimerLists+0xc4>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a04      	ldr	r2, [pc, #16]	; (80099a8 <prvSwitchTimerLists+0xc0>)
 8009998:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800999a:	4a04      	ldr	r2, [pc, #16]	; (80099ac <prvSwitchTimerLists+0xc4>)
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	6013      	str	r3, [r2, #0]
}
 80099a0:	bf00      	nop
 80099a2:	3718      	adds	r7, #24
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}
 80099a8:	20000e54 	.word	0x20000e54
 80099ac:	20000e58 	.word	0x20000e58

080099b0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80099b6:	f000 f965 	bl	8009c84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80099ba:	4b15      	ldr	r3, [pc, #84]	; (8009a10 <prvCheckForValidListAndQueue+0x60>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d120      	bne.n	8009a04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80099c2:	4814      	ldr	r0, [pc, #80]	; (8009a14 <prvCheckForValidListAndQueue+0x64>)
 80099c4:	f7fd fd26 	bl	8007414 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80099c8:	4813      	ldr	r0, [pc, #76]	; (8009a18 <prvCheckForValidListAndQueue+0x68>)
 80099ca:	f7fd fd23 	bl	8007414 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80099ce:	4b13      	ldr	r3, [pc, #76]	; (8009a1c <prvCheckForValidListAndQueue+0x6c>)
 80099d0:	4a10      	ldr	r2, [pc, #64]	; (8009a14 <prvCheckForValidListAndQueue+0x64>)
 80099d2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80099d4:	4b12      	ldr	r3, [pc, #72]	; (8009a20 <prvCheckForValidListAndQueue+0x70>)
 80099d6:	4a10      	ldr	r2, [pc, #64]	; (8009a18 <prvCheckForValidListAndQueue+0x68>)
 80099d8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80099da:	2300      	movs	r3, #0
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	4b11      	ldr	r3, [pc, #68]	; (8009a24 <prvCheckForValidListAndQueue+0x74>)
 80099e0:	4a11      	ldr	r2, [pc, #68]	; (8009a28 <prvCheckForValidListAndQueue+0x78>)
 80099e2:	2110      	movs	r1, #16
 80099e4:	200a      	movs	r0, #10
 80099e6:	f7fd fe31 	bl	800764c <xQueueGenericCreateStatic>
 80099ea:	4603      	mov	r3, r0
 80099ec:	4a08      	ldr	r2, [pc, #32]	; (8009a10 <prvCheckForValidListAndQueue+0x60>)
 80099ee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80099f0:	4b07      	ldr	r3, [pc, #28]	; (8009a10 <prvCheckForValidListAndQueue+0x60>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d005      	beq.n	8009a04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80099f8:	4b05      	ldr	r3, [pc, #20]	; (8009a10 <prvCheckForValidListAndQueue+0x60>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	490b      	ldr	r1, [pc, #44]	; (8009a2c <prvCheckForValidListAndQueue+0x7c>)
 80099fe:	4618      	mov	r0, r3
 8009a00:	f7fe fc5e 	bl	80082c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009a04:	f000 f96e 	bl	8009ce4 <vPortExitCritical>
}
 8009a08:	bf00      	nop
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	20000e5c 	.word	0x20000e5c
 8009a14:	20000e2c 	.word	0x20000e2c
 8009a18:	20000e40 	.word	0x20000e40
 8009a1c:	20000e54 	.word	0x20000e54
 8009a20:	20000e58 	.word	0x20000e58
 8009a24:	20000f08 	.word	0x20000f08
 8009a28:	20000e68 	.word	0x20000e68
 8009a2c:	0800b82c 	.word	0x0800b82c

08009a30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3b04      	subs	r3, #4
 8009a40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	3b04      	subs	r3, #4
 8009a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	f023 0201 	bic.w	r2, r3, #1
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	3b04      	subs	r3, #4
 8009a5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a60:	4a0c      	ldr	r2, [pc, #48]	; (8009a94 <pxPortInitialiseStack+0x64>)
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	3b14      	subs	r3, #20
 8009a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a6c:	687a      	ldr	r2, [r7, #4]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	3b04      	subs	r3, #4
 8009a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	f06f 0202 	mvn.w	r2, #2
 8009a7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	3b20      	subs	r3, #32
 8009a84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a86:	68fb      	ldr	r3, [r7, #12]
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3714      	adds	r7, #20
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr
 8009a94:	08009a99 	.word	0x08009a99

08009a98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009aa2:	4b12      	ldr	r3, [pc, #72]	; (8009aec <prvTaskExitError+0x54>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009aaa:	d00a      	beq.n	8009ac2 <prvTaskExitError+0x2a>
	__asm volatile
 8009aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab0:	f383 8811 	msr	BASEPRI, r3
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	f3bf 8f4f 	dsb	sy
 8009abc:	60fb      	str	r3, [r7, #12]
}
 8009abe:	bf00      	nop
 8009ac0:	e7fe      	b.n	8009ac0 <prvTaskExitError+0x28>
	__asm volatile
 8009ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac6:	f383 8811 	msr	BASEPRI, r3
 8009aca:	f3bf 8f6f 	isb	sy
 8009ace:	f3bf 8f4f 	dsb	sy
 8009ad2:	60bb      	str	r3, [r7, #8]
}
 8009ad4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ad6:	bf00      	nop
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d0fc      	beq.n	8009ad8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ade:	bf00      	nop
 8009ae0:	bf00      	nop
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr
 8009aec:	2000000c 	.word	0x2000000c

08009af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009af0:	4b07      	ldr	r3, [pc, #28]	; (8009b10 <pxCurrentTCBConst2>)
 8009af2:	6819      	ldr	r1, [r3, #0]
 8009af4:	6808      	ldr	r0, [r1, #0]
 8009af6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afa:	f380 8809 	msr	PSP, r0
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f04f 0000 	mov.w	r0, #0
 8009b06:	f380 8811 	msr	BASEPRI, r0
 8009b0a:	4770      	bx	lr
 8009b0c:	f3af 8000 	nop.w

08009b10 <pxCurrentTCBConst2>:
 8009b10:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b14:	bf00      	nop
 8009b16:	bf00      	nop

08009b18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009b18:	4808      	ldr	r0, [pc, #32]	; (8009b3c <prvPortStartFirstTask+0x24>)
 8009b1a:	6800      	ldr	r0, [r0, #0]
 8009b1c:	6800      	ldr	r0, [r0, #0]
 8009b1e:	f380 8808 	msr	MSP, r0
 8009b22:	f04f 0000 	mov.w	r0, #0
 8009b26:	f380 8814 	msr	CONTROL, r0
 8009b2a:	b662      	cpsie	i
 8009b2c:	b661      	cpsie	f
 8009b2e:	f3bf 8f4f 	dsb	sy
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	df00      	svc	0
 8009b38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009b3a:	bf00      	nop
 8009b3c:	e000ed08 	.word	0xe000ed08

08009b40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009b46:	4b46      	ldr	r3, [pc, #280]	; (8009c60 <xPortStartScheduler+0x120>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a46      	ldr	r2, [pc, #280]	; (8009c64 <xPortStartScheduler+0x124>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d10a      	bne.n	8009b66 <xPortStartScheduler+0x26>
	__asm volatile
 8009b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	613b      	str	r3, [r7, #16]
}
 8009b62:	bf00      	nop
 8009b64:	e7fe      	b.n	8009b64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b66:	4b3e      	ldr	r3, [pc, #248]	; (8009c60 <xPortStartScheduler+0x120>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a3f      	ldr	r2, [pc, #252]	; (8009c68 <xPortStartScheduler+0x128>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d10a      	bne.n	8009b86 <xPortStartScheduler+0x46>
	__asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	60fb      	str	r3, [r7, #12]
}
 8009b82:	bf00      	nop
 8009b84:	e7fe      	b.n	8009b84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b86:	4b39      	ldr	r3, [pc, #228]	; (8009c6c <xPortStartScheduler+0x12c>)
 8009b88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	22ff      	movs	r2, #255	; 0xff
 8009b96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	781b      	ldrb	r3, [r3, #0]
 8009b9c:	b2db      	uxtb	r3, r3
 8009b9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ba0:	78fb      	ldrb	r3, [r7, #3]
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	4b31      	ldr	r3, [pc, #196]	; (8009c70 <xPortStartScheduler+0x130>)
 8009bac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009bae:	4b31      	ldr	r3, [pc, #196]	; (8009c74 <xPortStartScheduler+0x134>)
 8009bb0:	2207      	movs	r2, #7
 8009bb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bb4:	e009      	b.n	8009bca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009bb6:	4b2f      	ldr	r3, [pc, #188]	; (8009c74 <xPortStartScheduler+0x134>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	4a2d      	ldr	r2, [pc, #180]	; (8009c74 <xPortStartScheduler+0x134>)
 8009bbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009bc0:	78fb      	ldrb	r3, [r7, #3]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009bca:	78fb      	ldrb	r3, [r7, #3]
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bd2:	2b80      	cmp	r3, #128	; 0x80
 8009bd4:	d0ef      	beq.n	8009bb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009bd6:	4b27      	ldr	r3, [pc, #156]	; (8009c74 <xPortStartScheduler+0x134>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f1c3 0307 	rsb	r3, r3, #7
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	d00a      	beq.n	8009bf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	60bb      	str	r3, [r7, #8]
}
 8009bf4:	bf00      	nop
 8009bf6:	e7fe      	b.n	8009bf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009bf8:	4b1e      	ldr	r3, [pc, #120]	; (8009c74 <xPortStartScheduler+0x134>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	021b      	lsls	r3, r3, #8
 8009bfe:	4a1d      	ldr	r2, [pc, #116]	; (8009c74 <xPortStartScheduler+0x134>)
 8009c00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009c02:	4b1c      	ldr	r3, [pc, #112]	; (8009c74 <xPortStartScheduler+0x134>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009c0a:	4a1a      	ldr	r2, [pc, #104]	; (8009c74 <xPortStartScheduler+0x134>)
 8009c0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009c16:	4b18      	ldr	r3, [pc, #96]	; (8009c78 <xPortStartScheduler+0x138>)
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a17      	ldr	r2, [pc, #92]	; (8009c78 <xPortStartScheduler+0x138>)
 8009c1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009c22:	4b15      	ldr	r3, [pc, #84]	; (8009c78 <xPortStartScheduler+0x138>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a14      	ldr	r2, [pc, #80]	; (8009c78 <xPortStartScheduler+0x138>)
 8009c28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009c2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009c2e:	f000 f8dd 	bl	8009dec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009c32:	4b12      	ldr	r3, [pc, #72]	; (8009c7c <xPortStartScheduler+0x13c>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009c38:	f000 f8fc 	bl	8009e34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009c3c:	4b10      	ldr	r3, [pc, #64]	; (8009c80 <xPortStartScheduler+0x140>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a0f      	ldr	r2, [pc, #60]	; (8009c80 <xPortStartScheduler+0x140>)
 8009c42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009c46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009c48:	f7ff ff66 	bl	8009b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009c4c:	f7fe ff48 	bl	8008ae0 <vTaskSwitchContext>
	prvTaskExitError();
 8009c50:	f7ff ff22 	bl	8009a98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c54:	2300      	movs	r3, #0
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	e000ed00 	.word	0xe000ed00
 8009c64:	410fc271 	.word	0x410fc271
 8009c68:	410fc270 	.word	0x410fc270
 8009c6c:	e000e400 	.word	0xe000e400
 8009c70:	20000f58 	.word	0x20000f58
 8009c74:	20000f5c 	.word	0x20000f5c
 8009c78:	e000ed20 	.word	0xe000ed20
 8009c7c:	2000000c 	.word	0x2000000c
 8009c80:	e000ef34 	.word	0xe000ef34

08009c84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
	__asm volatile
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	f383 8811 	msr	BASEPRI, r3
 8009c92:	f3bf 8f6f 	isb	sy
 8009c96:	f3bf 8f4f 	dsb	sy
 8009c9a:	607b      	str	r3, [r7, #4]
}
 8009c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c9e:	4b0f      	ldr	r3, [pc, #60]	; (8009cdc <vPortEnterCritical+0x58>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	4a0d      	ldr	r2, [pc, #52]	; (8009cdc <vPortEnterCritical+0x58>)
 8009ca6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009ca8:	4b0c      	ldr	r3, [pc, #48]	; (8009cdc <vPortEnterCritical+0x58>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d10f      	bne.n	8009cd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009cb0:	4b0b      	ldr	r3, [pc, #44]	; (8009ce0 <vPortEnterCritical+0x5c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	b2db      	uxtb	r3, r3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d00a      	beq.n	8009cd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbe:	f383 8811 	msr	BASEPRI, r3
 8009cc2:	f3bf 8f6f 	isb	sy
 8009cc6:	f3bf 8f4f 	dsb	sy
 8009cca:	603b      	str	r3, [r7, #0]
}
 8009ccc:	bf00      	nop
 8009cce:	e7fe      	b.n	8009cce <vPortEnterCritical+0x4a>
	}
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr
 8009cdc:	2000000c 	.word	0x2000000c
 8009ce0:	e000ed04 	.word	0xe000ed04

08009ce4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b083      	sub	sp, #12
 8009ce8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009cea:	4b12      	ldr	r3, [pc, #72]	; (8009d34 <vPortExitCritical+0x50>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10a      	bne.n	8009d08 <vPortExitCritical+0x24>
	__asm volatile
 8009cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf6:	f383 8811 	msr	BASEPRI, r3
 8009cfa:	f3bf 8f6f 	isb	sy
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	607b      	str	r3, [r7, #4]
}
 8009d04:	bf00      	nop
 8009d06:	e7fe      	b.n	8009d06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009d08:	4b0a      	ldr	r3, [pc, #40]	; (8009d34 <vPortExitCritical+0x50>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	4a09      	ldr	r2, [pc, #36]	; (8009d34 <vPortExitCritical+0x50>)
 8009d10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009d12:	4b08      	ldr	r3, [pc, #32]	; (8009d34 <vPortExitCritical+0x50>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d105      	bne.n	8009d26 <vPortExitCritical+0x42>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	f383 8811 	msr	BASEPRI, r3
}
 8009d24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009d26:	bf00      	nop
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	2000000c 	.word	0x2000000c
	...

08009d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009d40:	f3ef 8009 	mrs	r0, PSP
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	4b15      	ldr	r3, [pc, #84]	; (8009da0 <pxCurrentTCBConst>)
 8009d4a:	681a      	ldr	r2, [r3, #0]
 8009d4c:	f01e 0f10 	tst.w	lr, #16
 8009d50:	bf08      	it	eq
 8009d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d5a:	6010      	str	r0, [r2, #0]
 8009d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d64:	f380 8811 	msr	BASEPRI, r0
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	f3bf 8f6f 	isb	sy
 8009d70:	f7fe feb6 	bl	8008ae0 <vTaskSwitchContext>
 8009d74:	f04f 0000 	mov.w	r0, #0
 8009d78:	f380 8811 	msr	BASEPRI, r0
 8009d7c:	bc09      	pop	{r0, r3}
 8009d7e:	6819      	ldr	r1, [r3, #0]
 8009d80:	6808      	ldr	r0, [r1, #0]
 8009d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d86:	f01e 0f10 	tst.w	lr, #16
 8009d8a:	bf08      	it	eq
 8009d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d90:	f380 8809 	msr	PSP, r0
 8009d94:	f3bf 8f6f 	isb	sy
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	f3af 8000 	nop.w

08009da0 <pxCurrentTCBConst>:
 8009da0:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009da4:	bf00      	nop
 8009da6:	bf00      	nop

08009da8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
	__asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	607b      	str	r3, [r7, #4]
}
 8009dc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009dc2:	f7fe fdd3 	bl	800896c <xTaskIncrementTick>
 8009dc6:	4603      	mov	r3, r0
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d003      	beq.n	8009dd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009dcc:	4b06      	ldr	r3, [pc, #24]	; (8009de8 <xPortSysTickHandler+0x40>)
 8009dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dd2:	601a      	str	r2, [r3, #0]
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	f383 8811 	msr	BASEPRI, r3
}
 8009dde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009de0:	bf00      	nop
 8009de2:	3708      	adds	r7, #8
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}
 8009de8:	e000ed04 	.word	0xe000ed04

08009dec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009dec:	b480      	push	{r7}
 8009dee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009df0:	4b0b      	ldr	r3, [pc, #44]	; (8009e20 <vPortSetupTimerInterrupt+0x34>)
 8009df2:	2200      	movs	r2, #0
 8009df4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009df6:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <vPortSetupTimerInterrupt+0x38>)
 8009df8:	2200      	movs	r2, #0
 8009dfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009dfc:	4b0a      	ldr	r3, [pc, #40]	; (8009e28 <vPortSetupTimerInterrupt+0x3c>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a0a      	ldr	r2, [pc, #40]	; (8009e2c <vPortSetupTimerInterrupt+0x40>)
 8009e02:	fba2 2303 	umull	r2, r3, r2, r3
 8009e06:	099b      	lsrs	r3, r3, #6
 8009e08:	4a09      	ldr	r2, [pc, #36]	; (8009e30 <vPortSetupTimerInterrupt+0x44>)
 8009e0a:	3b01      	subs	r3, #1
 8009e0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009e0e:	4b04      	ldr	r3, [pc, #16]	; (8009e20 <vPortSetupTimerInterrupt+0x34>)
 8009e10:	2207      	movs	r2, #7
 8009e12:	601a      	str	r2, [r3, #0]
}
 8009e14:	bf00      	nop
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	e000e010 	.word	0xe000e010
 8009e24:	e000e018 	.word	0xe000e018
 8009e28:	20000000 	.word	0x20000000
 8009e2c:	10624dd3 	.word	0x10624dd3
 8009e30:	e000e014 	.word	0xe000e014

08009e34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009e34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009e44 <vPortEnableVFP+0x10>
 8009e38:	6801      	ldr	r1, [r0, #0]
 8009e3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009e3e:	6001      	str	r1, [r0, #0]
 8009e40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009e42:	bf00      	nop
 8009e44:	e000ed88 	.word	0xe000ed88

08009e48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009e4e:	f3ef 8305 	mrs	r3, IPSR
 8009e52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b0f      	cmp	r3, #15
 8009e58:	d914      	bls.n	8009e84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e5a:	4a17      	ldr	r2, [pc, #92]	; (8009eb8 <vPortValidateInterruptPriority+0x70>)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	4413      	add	r3, r2
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e64:	4b15      	ldr	r3, [pc, #84]	; (8009ebc <vPortValidateInterruptPriority+0x74>)
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	7afa      	ldrb	r2, [r7, #11]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d20a      	bcs.n	8009e84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e72:	f383 8811 	msr	BASEPRI, r3
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	607b      	str	r3, [r7, #4]
}
 8009e80:	bf00      	nop
 8009e82:	e7fe      	b.n	8009e82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e84:	4b0e      	ldr	r3, [pc, #56]	; (8009ec0 <vPortValidateInterruptPriority+0x78>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e8c:	4b0d      	ldr	r3, [pc, #52]	; (8009ec4 <vPortValidateInterruptPriority+0x7c>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d90a      	bls.n	8009eaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	603b      	str	r3, [r7, #0]
}
 8009ea6:	bf00      	nop
 8009ea8:	e7fe      	b.n	8009ea8 <vPortValidateInterruptPriority+0x60>
	}
 8009eaa:	bf00      	nop
 8009eac:	3714      	adds	r7, #20
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr
 8009eb6:	bf00      	nop
 8009eb8:	e000e3f0 	.word	0xe000e3f0
 8009ebc:	20000f58 	.word	0x20000f58
 8009ec0:	e000ed0c 	.word	0xe000ed0c
 8009ec4:	20000f5c 	.word	0x20000f5c

08009ec8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b08a      	sub	sp, #40	; 0x28
 8009ecc:	af00      	add	r7, sp, #0
 8009ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009ed4:	f7fe fc8e 	bl	80087f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ed8:	4b5b      	ldr	r3, [pc, #364]	; (800a048 <pvPortMalloc+0x180>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d101      	bne.n	8009ee4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ee0:	f000 f920 	bl	800a124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ee4:	4b59      	ldr	r3, [pc, #356]	; (800a04c <pvPortMalloc+0x184>)
 8009ee6:	681a      	ldr	r2, [r3, #0]
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4013      	ands	r3, r2
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	f040 8093 	bne.w	800a018 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d01d      	beq.n	8009f34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ef8:	2208      	movs	r2, #8
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	4413      	add	r3, r2
 8009efe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f003 0307 	and.w	r3, r3, #7
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d014      	beq.n	8009f34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f023 0307 	bic.w	r3, r3, #7
 8009f10:	3308      	adds	r3, #8
 8009f12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f003 0307 	and.w	r3, r3, #7
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00a      	beq.n	8009f34 <pvPortMalloc+0x6c>
	__asm volatile
 8009f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f22:	f383 8811 	msr	BASEPRI, r3
 8009f26:	f3bf 8f6f 	isb	sy
 8009f2a:	f3bf 8f4f 	dsb	sy
 8009f2e:	617b      	str	r3, [r7, #20]
}
 8009f30:	bf00      	nop
 8009f32:	e7fe      	b.n	8009f32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d06e      	beq.n	800a018 <pvPortMalloc+0x150>
 8009f3a:	4b45      	ldr	r3, [pc, #276]	; (800a050 <pvPortMalloc+0x188>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d869      	bhi.n	800a018 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009f44:	4b43      	ldr	r3, [pc, #268]	; (800a054 <pvPortMalloc+0x18c>)
 8009f46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009f48:	4b42      	ldr	r3, [pc, #264]	; (800a054 <pvPortMalloc+0x18c>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f4e:	e004      	b.n	8009f5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	687a      	ldr	r2, [r7, #4]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d903      	bls.n	8009f6c <pvPortMalloc+0xa4>
 8009f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d1f1      	bne.n	8009f50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f6c:	4b36      	ldr	r3, [pc, #216]	; (800a048 <pvPortMalloc+0x180>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d050      	beq.n	800a018 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f76:	6a3b      	ldr	r3, [r7, #32]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2208      	movs	r2, #8
 8009f7c:	4413      	add	r3, r2
 8009f7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	6a3b      	ldr	r3, [r7, #32]
 8009f86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8a:	685a      	ldr	r2, [r3, #4]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	1ad2      	subs	r2, r2, r3
 8009f90:	2308      	movs	r3, #8
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d91f      	bls.n	8009fd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	f003 0307 	and.w	r3, r3, #7
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d00a      	beq.n	8009fc0 <pvPortMalloc+0xf8>
	__asm volatile
 8009faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	613b      	str	r3, [r7, #16]
}
 8009fbc:	bf00      	nop
 8009fbe:	e7fe      	b.n	8009fbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc2:	685a      	ldr	r2, [r3, #4]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	1ad2      	subs	r2, r2, r3
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009fd2:	69b8      	ldr	r0, [r7, #24]
 8009fd4:	f000 f908 	bl	800a1e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009fd8:	4b1d      	ldr	r3, [pc, #116]	; (800a050 <pvPortMalloc+0x188>)
 8009fda:	681a      	ldr	r2, [r3, #0]
 8009fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	1ad3      	subs	r3, r2, r3
 8009fe2:	4a1b      	ldr	r2, [pc, #108]	; (800a050 <pvPortMalloc+0x188>)
 8009fe4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009fe6:	4b1a      	ldr	r3, [pc, #104]	; (800a050 <pvPortMalloc+0x188>)
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	4b1b      	ldr	r3, [pc, #108]	; (800a058 <pvPortMalloc+0x190>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d203      	bcs.n	8009ffa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ff2:	4b17      	ldr	r3, [pc, #92]	; (800a050 <pvPortMalloc+0x188>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a18      	ldr	r2, [pc, #96]	; (800a058 <pvPortMalloc+0x190>)
 8009ff8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffc:	685a      	ldr	r2, [r3, #4]
 8009ffe:	4b13      	ldr	r3, [pc, #76]	; (800a04c <pvPortMalloc+0x184>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	431a      	orrs	r2, r3
 800a004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a006:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00a:	2200      	movs	r2, #0
 800a00c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a00e:	4b13      	ldr	r3, [pc, #76]	; (800a05c <pvPortMalloc+0x194>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	3301      	adds	r3, #1
 800a014:	4a11      	ldr	r2, [pc, #68]	; (800a05c <pvPortMalloc+0x194>)
 800a016:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a018:	f7fe fbfa 	bl	8008810 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	f003 0307 	and.w	r3, r3, #7
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00a      	beq.n	800a03c <pvPortMalloc+0x174>
	__asm volatile
 800a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	60fb      	str	r3, [r7, #12]
}
 800a038:	bf00      	nop
 800a03a:	e7fe      	b.n	800a03a <pvPortMalloc+0x172>
	return pvReturn;
 800a03c:	69fb      	ldr	r3, [r7, #28]
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3728      	adds	r7, #40	; 0x28
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	20001b20 	.word	0x20001b20
 800a04c:	20001b34 	.word	0x20001b34
 800a050:	20001b24 	.word	0x20001b24
 800a054:	20001b18 	.word	0x20001b18
 800a058:	20001b28 	.word	0x20001b28
 800a05c:	20001b2c 	.word	0x20001b2c

0800a060 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d04d      	beq.n	800a10e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a072:	2308      	movs	r3, #8
 800a074:	425b      	negs	r3, r3
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	4413      	add	r3, r2
 800a07a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	4b24      	ldr	r3, [pc, #144]	; (800a118 <vPortFree+0xb8>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4013      	ands	r3, r2
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10a      	bne.n	800a0a4 <vPortFree+0x44>
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	60fb      	str	r3, [r7, #12]
}
 800a0a0:	bf00      	nop
 800a0a2:	e7fe      	b.n	800a0a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d00a      	beq.n	800a0c2 <vPortFree+0x62>
	__asm volatile
 800a0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	60bb      	str	r3, [r7, #8]
}
 800a0be:	bf00      	nop
 800a0c0:	e7fe      	b.n	800a0c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	685a      	ldr	r2, [r3, #4]
 800a0c6:	4b14      	ldr	r3, [pc, #80]	; (800a118 <vPortFree+0xb8>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d01e      	beq.n	800a10e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d11a      	bne.n	800a10e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	685a      	ldr	r2, [r3, #4]
 800a0dc:	4b0e      	ldr	r3, [pc, #56]	; (800a118 <vPortFree+0xb8>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	43db      	mvns	r3, r3
 800a0e2:	401a      	ands	r2, r3
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a0e8:	f7fe fb84 	bl	80087f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	685a      	ldr	r2, [r3, #4]
 800a0f0:	4b0a      	ldr	r3, [pc, #40]	; (800a11c <vPortFree+0xbc>)
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4413      	add	r3, r2
 800a0f6:	4a09      	ldr	r2, [pc, #36]	; (800a11c <vPortFree+0xbc>)
 800a0f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0fa:	6938      	ldr	r0, [r7, #16]
 800a0fc:	f000 f874 	bl	800a1e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a100:	4b07      	ldr	r3, [pc, #28]	; (800a120 <vPortFree+0xc0>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	3301      	adds	r3, #1
 800a106:	4a06      	ldr	r2, [pc, #24]	; (800a120 <vPortFree+0xc0>)
 800a108:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a10a:	f7fe fb81 	bl	8008810 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a10e:	bf00      	nop
 800a110:	3718      	adds	r7, #24
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	20001b34 	.word	0x20001b34
 800a11c:	20001b24 	.word	0x20001b24
 800a120:	20001b30 	.word	0x20001b30

0800a124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a12a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a12e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a130:	4b27      	ldr	r3, [pc, #156]	; (800a1d0 <prvHeapInit+0xac>)
 800a132:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f003 0307 	and.w	r3, r3, #7
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00c      	beq.n	800a158 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	3307      	adds	r3, #7
 800a142:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f023 0307 	bic.w	r3, r3, #7
 800a14a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	1ad3      	subs	r3, r2, r3
 800a152:	4a1f      	ldr	r2, [pc, #124]	; (800a1d0 <prvHeapInit+0xac>)
 800a154:	4413      	add	r3, r2
 800a156:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a15c:	4a1d      	ldr	r2, [pc, #116]	; (800a1d4 <prvHeapInit+0xb0>)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a162:	4b1c      	ldr	r3, [pc, #112]	; (800a1d4 <prvHeapInit+0xb0>)
 800a164:	2200      	movs	r2, #0
 800a166:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	68ba      	ldr	r2, [r7, #8]
 800a16c:	4413      	add	r3, r2
 800a16e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a170:	2208      	movs	r2, #8
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	1a9b      	subs	r3, r3, r2
 800a176:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f023 0307 	bic.w	r3, r3, #7
 800a17e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	4a15      	ldr	r2, [pc, #84]	; (800a1d8 <prvHeapInit+0xb4>)
 800a184:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a186:	4b14      	ldr	r3, [pc, #80]	; (800a1d8 <prvHeapInit+0xb4>)
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	2200      	movs	r2, #0
 800a18c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a18e:	4b12      	ldr	r3, [pc, #72]	; (800a1d8 <prvHeapInit+0xb4>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2200      	movs	r2, #0
 800a194:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	1ad2      	subs	r2, r2, r3
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a1a4:	4b0c      	ldr	r3, [pc, #48]	; (800a1d8 <prvHeapInit+0xb4>)
 800a1a6:	681a      	ldr	r2, [r3, #0]
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	4a0a      	ldr	r2, [pc, #40]	; (800a1dc <prvHeapInit+0xb8>)
 800a1b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	4a09      	ldr	r2, [pc, #36]	; (800a1e0 <prvHeapInit+0xbc>)
 800a1ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a1bc:	4b09      	ldr	r3, [pc, #36]	; (800a1e4 <prvHeapInit+0xc0>)
 800a1be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a1c2:	601a      	str	r2, [r3, #0]
}
 800a1c4:	bf00      	nop
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr
 800a1d0:	20000f60 	.word	0x20000f60
 800a1d4:	20001b18 	.word	0x20001b18
 800a1d8:	20001b20 	.word	0x20001b20
 800a1dc:	20001b28 	.word	0x20001b28
 800a1e0:	20001b24 	.word	0x20001b24
 800a1e4:	20001b34 	.word	0x20001b34

0800a1e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a1f0:	4b28      	ldr	r3, [pc, #160]	; (800a294 <prvInsertBlockIntoFreeList+0xac>)
 800a1f2:	60fb      	str	r3, [r7, #12]
 800a1f4:	e002      	b.n	800a1fc <prvInsertBlockIntoFreeList+0x14>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	60fb      	str	r3, [r7, #12]
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	429a      	cmp	r2, r3
 800a204:	d8f7      	bhi.n	800a1f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	68ba      	ldr	r2, [r7, #8]
 800a210:	4413      	add	r3, r2
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	429a      	cmp	r2, r3
 800a216:	d108      	bne.n	800a22a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	441a      	add	r2, r3
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	68ba      	ldr	r2, [r7, #8]
 800a234:	441a      	add	r2, r3
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d118      	bne.n	800a270 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	4b15      	ldr	r3, [pc, #84]	; (800a298 <prvInsertBlockIntoFreeList+0xb0>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	429a      	cmp	r2, r3
 800a248:	d00d      	beq.n	800a266 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	441a      	add	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	681a      	ldr	r2, [r3, #0]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	e008      	b.n	800a278 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a266:	4b0c      	ldr	r3, [pc, #48]	; (800a298 <prvInsertBlockIntoFreeList+0xb0>)
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	601a      	str	r2, [r3, #0]
 800a26e:	e003      	b.n	800a278 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a278:	68fa      	ldr	r2, [r7, #12]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	429a      	cmp	r2, r3
 800a27e:	d002      	beq.n	800a286 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a286:	bf00      	nop
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	20001b18 	.word	0x20001b18
 800a298:	20001b20 	.word	0x20001b20

0800a29c <atoi>:
 800a29c:	220a      	movs	r2, #10
 800a29e:	2100      	movs	r1, #0
 800a2a0:	f000 b882 	b.w	800a3a8 <strtol>

0800a2a4 <_strtol_l.constprop.0>:
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2aa:	d001      	beq.n	800a2b0 <_strtol_l.constprop.0+0xc>
 800a2ac:	2b24      	cmp	r3, #36	; 0x24
 800a2ae:	d906      	bls.n	800a2be <_strtol_l.constprop.0+0x1a>
 800a2b0:	f000 fa54 	bl	800a75c <__errno>
 800a2b4:	2316      	movs	r3, #22
 800a2b6:	6003      	str	r3, [r0, #0]
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a3a4 <_strtol_l.constprop.0+0x100>
 800a2c2:	460d      	mov	r5, r1
 800a2c4:	462e      	mov	r6, r5
 800a2c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2ca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a2ce:	f017 0708 	ands.w	r7, r7, #8
 800a2d2:	d1f7      	bne.n	800a2c4 <_strtol_l.constprop.0+0x20>
 800a2d4:	2c2d      	cmp	r4, #45	; 0x2d
 800a2d6:	d132      	bne.n	800a33e <_strtol_l.constprop.0+0x9a>
 800a2d8:	782c      	ldrb	r4, [r5, #0]
 800a2da:	2701      	movs	r7, #1
 800a2dc:	1cb5      	adds	r5, r6, #2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d05b      	beq.n	800a39a <_strtol_l.constprop.0+0xf6>
 800a2e2:	2b10      	cmp	r3, #16
 800a2e4:	d109      	bne.n	800a2fa <_strtol_l.constprop.0+0x56>
 800a2e6:	2c30      	cmp	r4, #48	; 0x30
 800a2e8:	d107      	bne.n	800a2fa <_strtol_l.constprop.0+0x56>
 800a2ea:	782c      	ldrb	r4, [r5, #0]
 800a2ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a2f0:	2c58      	cmp	r4, #88	; 0x58
 800a2f2:	d14d      	bne.n	800a390 <_strtol_l.constprop.0+0xec>
 800a2f4:	786c      	ldrb	r4, [r5, #1]
 800a2f6:	2310      	movs	r3, #16
 800a2f8:	3502      	adds	r5, #2
 800a2fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a2fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a302:	f04f 0e00 	mov.w	lr, #0
 800a306:	fbb8 f9f3 	udiv	r9, r8, r3
 800a30a:	4676      	mov	r6, lr
 800a30c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a310:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a314:	f1bc 0f09 	cmp.w	ip, #9
 800a318:	d816      	bhi.n	800a348 <_strtol_l.constprop.0+0xa4>
 800a31a:	4664      	mov	r4, ip
 800a31c:	42a3      	cmp	r3, r4
 800a31e:	dd24      	ble.n	800a36a <_strtol_l.constprop.0+0xc6>
 800a320:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800a324:	d008      	beq.n	800a338 <_strtol_l.constprop.0+0x94>
 800a326:	45b1      	cmp	r9, r6
 800a328:	d31c      	bcc.n	800a364 <_strtol_l.constprop.0+0xc0>
 800a32a:	d101      	bne.n	800a330 <_strtol_l.constprop.0+0x8c>
 800a32c:	45a2      	cmp	sl, r4
 800a32e:	db19      	blt.n	800a364 <_strtol_l.constprop.0+0xc0>
 800a330:	fb06 4603 	mla	r6, r6, r3, r4
 800a334:	f04f 0e01 	mov.w	lr, #1
 800a338:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a33c:	e7e8      	b.n	800a310 <_strtol_l.constprop.0+0x6c>
 800a33e:	2c2b      	cmp	r4, #43	; 0x2b
 800a340:	bf04      	itt	eq
 800a342:	782c      	ldrbeq	r4, [r5, #0]
 800a344:	1cb5      	addeq	r5, r6, #2
 800a346:	e7ca      	b.n	800a2de <_strtol_l.constprop.0+0x3a>
 800a348:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a34c:	f1bc 0f19 	cmp.w	ip, #25
 800a350:	d801      	bhi.n	800a356 <_strtol_l.constprop.0+0xb2>
 800a352:	3c37      	subs	r4, #55	; 0x37
 800a354:	e7e2      	b.n	800a31c <_strtol_l.constprop.0+0x78>
 800a356:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a35a:	f1bc 0f19 	cmp.w	ip, #25
 800a35e:	d804      	bhi.n	800a36a <_strtol_l.constprop.0+0xc6>
 800a360:	3c57      	subs	r4, #87	; 0x57
 800a362:	e7db      	b.n	800a31c <_strtol_l.constprop.0+0x78>
 800a364:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800a368:	e7e6      	b.n	800a338 <_strtol_l.constprop.0+0x94>
 800a36a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800a36e:	d105      	bne.n	800a37c <_strtol_l.constprop.0+0xd8>
 800a370:	2322      	movs	r3, #34	; 0x22
 800a372:	6003      	str	r3, [r0, #0]
 800a374:	4646      	mov	r6, r8
 800a376:	b942      	cbnz	r2, 800a38a <_strtol_l.constprop.0+0xe6>
 800a378:	4630      	mov	r0, r6
 800a37a:	e79e      	b.n	800a2ba <_strtol_l.constprop.0+0x16>
 800a37c:	b107      	cbz	r7, 800a380 <_strtol_l.constprop.0+0xdc>
 800a37e:	4276      	negs	r6, r6
 800a380:	2a00      	cmp	r2, #0
 800a382:	d0f9      	beq.n	800a378 <_strtol_l.constprop.0+0xd4>
 800a384:	f1be 0f00 	cmp.w	lr, #0
 800a388:	d000      	beq.n	800a38c <_strtol_l.constprop.0+0xe8>
 800a38a:	1e69      	subs	r1, r5, #1
 800a38c:	6011      	str	r1, [r2, #0]
 800a38e:	e7f3      	b.n	800a378 <_strtol_l.constprop.0+0xd4>
 800a390:	2430      	movs	r4, #48	; 0x30
 800a392:	2b00      	cmp	r3, #0
 800a394:	d1b1      	bne.n	800a2fa <_strtol_l.constprop.0+0x56>
 800a396:	2308      	movs	r3, #8
 800a398:	e7af      	b.n	800a2fa <_strtol_l.constprop.0+0x56>
 800a39a:	2c30      	cmp	r4, #48	; 0x30
 800a39c:	d0a5      	beq.n	800a2ea <_strtol_l.constprop.0+0x46>
 800a39e:	230a      	movs	r3, #10
 800a3a0:	e7ab      	b.n	800a2fa <_strtol_l.constprop.0+0x56>
 800a3a2:	bf00      	nop
 800a3a4:	0800b8c5 	.word	0x0800b8c5

0800a3a8 <strtol>:
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	460a      	mov	r2, r1
 800a3ac:	4601      	mov	r1, r0
 800a3ae:	4802      	ldr	r0, [pc, #8]	; (800a3b8 <strtol+0x10>)
 800a3b0:	6800      	ldr	r0, [r0, #0]
 800a3b2:	f7ff bf77 	b.w	800a2a4 <_strtol_l.constprop.0>
 800a3b6:	bf00      	nop
 800a3b8:	20000068 	.word	0x20000068

0800a3bc <std>:
 800a3bc:	2300      	movs	r3, #0
 800a3be:	b510      	push	{r4, lr}
 800a3c0:	4604      	mov	r4, r0
 800a3c2:	e9c0 3300 	strd	r3, r3, [r0]
 800a3c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3ca:	6083      	str	r3, [r0, #8]
 800a3cc:	8181      	strh	r1, [r0, #12]
 800a3ce:	6643      	str	r3, [r0, #100]	; 0x64
 800a3d0:	81c2      	strh	r2, [r0, #14]
 800a3d2:	6183      	str	r3, [r0, #24]
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	2208      	movs	r2, #8
 800a3d8:	305c      	adds	r0, #92	; 0x5c
 800a3da:	f000 f914 	bl	800a606 <memset>
 800a3de:	4b0d      	ldr	r3, [pc, #52]	; (800a414 <std+0x58>)
 800a3e0:	6263      	str	r3, [r4, #36]	; 0x24
 800a3e2:	4b0d      	ldr	r3, [pc, #52]	; (800a418 <std+0x5c>)
 800a3e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3e6:	4b0d      	ldr	r3, [pc, #52]	; (800a41c <std+0x60>)
 800a3e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3ea:	4b0d      	ldr	r3, [pc, #52]	; (800a420 <std+0x64>)
 800a3ec:	6323      	str	r3, [r4, #48]	; 0x30
 800a3ee:	4b0d      	ldr	r3, [pc, #52]	; (800a424 <std+0x68>)
 800a3f0:	6224      	str	r4, [r4, #32]
 800a3f2:	429c      	cmp	r4, r3
 800a3f4:	d006      	beq.n	800a404 <std+0x48>
 800a3f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a3fa:	4294      	cmp	r4, r2
 800a3fc:	d002      	beq.n	800a404 <std+0x48>
 800a3fe:	33d0      	adds	r3, #208	; 0xd0
 800a400:	429c      	cmp	r4, r3
 800a402:	d105      	bne.n	800a410 <std+0x54>
 800a404:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a40c:	f000 b9d0 	b.w	800a7b0 <__retarget_lock_init_recursive>
 800a410:	bd10      	pop	{r4, pc}
 800a412:	bf00      	nop
 800a414:	0800a581 	.word	0x0800a581
 800a418:	0800a5a3 	.word	0x0800a5a3
 800a41c:	0800a5db 	.word	0x0800a5db
 800a420:	0800a5ff 	.word	0x0800a5ff
 800a424:	20001b38 	.word	0x20001b38

0800a428 <stdio_exit_handler>:
 800a428:	4a02      	ldr	r2, [pc, #8]	; (800a434 <stdio_exit_handler+0xc>)
 800a42a:	4903      	ldr	r1, [pc, #12]	; (800a438 <stdio_exit_handler+0x10>)
 800a42c:	4803      	ldr	r0, [pc, #12]	; (800a43c <stdio_exit_handler+0x14>)
 800a42e:	f000 b869 	b.w	800a504 <_fwalk_sglue>
 800a432:	bf00      	nop
 800a434:	20000010 	.word	0x20000010
 800a438:	0800b0ed 	.word	0x0800b0ed
 800a43c:	2000001c 	.word	0x2000001c

0800a440 <cleanup_stdio>:
 800a440:	6841      	ldr	r1, [r0, #4]
 800a442:	4b0c      	ldr	r3, [pc, #48]	; (800a474 <cleanup_stdio+0x34>)
 800a444:	4299      	cmp	r1, r3
 800a446:	b510      	push	{r4, lr}
 800a448:	4604      	mov	r4, r0
 800a44a:	d001      	beq.n	800a450 <cleanup_stdio+0x10>
 800a44c:	f000 fe4e 	bl	800b0ec <_fflush_r>
 800a450:	68a1      	ldr	r1, [r4, #8]
 800a452:	4b09      	ldr	r3, [pc, #36]	; (800a478 <cleanup_stdio+0x38>)
 800a454:	4299      	cmp	r1, r3
 800a456:	d002      	beq.n	800a45e <cleanup_stdio+0x1e>
 800a458:	4620      	mov	r0, r4
 800a45a:	f000 fe47 	bl	800b0ec <_fflush_r>
 800a45e:	68e1      	ldr	r1, [r4, #12]
 800a460:	4b06      	ldr	r3, [pc, #24]	; (800a47c <cleanup_stdio+0x3c>)
 800a462:	4299      	cmp	r1, r3
 800a464:	d004      	beq.n	800a470 <cleanup_stdio+0x30>
 800a466:	4620      	mov	r0, r4
 800a468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a46c:	f000 be3e 	b.w	800b0ec <_fflush_r>
 800a470:	bd10      	pop	{r4, pc}
 800a472:	bf00      	nop
 800a474:	20001b38 	.word	0x20001b38
 800a478:	20001ba0 	.word	0x20001ba0
 800a47c:	20001c08 	.word	0x20001c08

0800a480 <global_stdio_init.part.0>:
 800a480:	b510      	push	{r4, lr}
 800a482:	4b0b      	ldr	r3, [pc, #44]	; (800a4b0 <global_stdio_init.part.0+0x30>)
 800a484:	4c0b      	ldr	r4, [pc, #44]	; (800a4b4 <global_stdio_init.part.0+0x34>)
 800a486:	4a0c      	ldr	r2, [pc, #48]	; (800a4b8 <global_stdio_init.part.0+0x38>)
 800a488:	601a      	str	r2, [r3, #0]
 800a48a:	4620      	mov	r0, r4
 800a48c:	2200      	movs	r2, #0
 800a48e:	2104      	movs	r1, #4
 800a490:	f7ff ff94 	bl	800a3bc <std>
 800a494:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a498:	2201      	movs	r2, #1
 800a49a:	2109      	movs	r1, #9
 800a49c:	f7ff ff8e 	bl	800a3bc <std>
 800a4a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a4a4:	2202      	movs	r2, #2
 800a4a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4aa:	2112      	movs	r1, #18
 800a4ac:	f7ff bf86 	b.w	800a3bc <std>
 800a4b0:	20001c70 	.word	0x20001c70
 800a4b4:	20001b38 	.word	0x20001b38
 800a4b8:	0800a429 	.word	0x0800a429

0800a4bc <__sfp_lock_acquire>:
 800a4bc:	4801      	ldr	r0, [pc, #4]	; (800a4c4 <__sfp_lock_acquire+0x8>)
 800a4be:	f000 b978 	b.w	800a7b2 <__retarget_lock_acquire_recursive>
 800a4c2:	bf00      	nop
 800a4c4:	20001c79 	.word	0x20001c79

0800a4c8 <__sfp_lock_release>:
 800a4c8:	4801      	ldr	r0, [pc, #4]	; (800a4d0 <__sfp_lock_release+0x8>)
 800a4ca:	f000 b973 	b.w	800a7b4 <__retarget_lock_release_recursive>
 800a4ce:	bf00      	nop
 800a4d0:	20001c79 	.word	0x20001c79

0800a4d4 <__sinit>:
 800a4d4:	b510      	push	{r4, lr}
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	f7ff fff0 	bl	800a4bc <__sfp_lock_acquire>
 800a4dc:	6a23      	ldr	r3, [r4, #32]
 800a4de:	b11b      	cbz	r3, 800a4e8 <__sinit+0x14>
 800a4e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4e4:	f7ff bff0 	b.w	800a4c8 <__sfp_lock_release>
 800a4e8:	4b04      	ldr	r3, [pc, #16]	; (800a4fc <__sinit+0x28>)
 800a4ea:	6223      	str	r3, [r4, #32]
 800a4ec:	4b04      	ldr	r3, [pc, #16]	; (800a500 <__sinit+0x2c>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1f5      	bne.n	800a4e0 <__sinit+0xc>
 800a4f4:	f7ff ffc4 	bl	800a480 <global_stdio_init.part.0>
 800a4f8:	e7f2      	b.n	800a4e0 <__sinit+0xc>
 800a4fa:	bf00      	nop
 800a4fc:	0800a441 	.word	0x0800a441
 800a500:	20001c70 	.word	0x20001c70

0800a504 <_fwalk_sglue>:
 800a504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a508:	4607      	mov	r7, r0
 800a50a:	4688      	mov	r8, r1
 800a50c:	4614      	mov	r4, r2
 800a50e:	2600      	movs	r6, #0
 800a510:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a514:	f1b9 0901 	subs.w	r9, r9, #1
 800a518:	d505      	bpl.n	800a526 <_fwalk_sglue+0x22>
 800a51a:	6824      	ldr	r4, [r4, #0]
 800a51c:	2c00      	cmp	r4, #0
 800a51e:	d1f7      	bne.n	800a510 <_fwalk_sglue+0xc>
 800a520:	4630      	mov	r0, r6
 800a522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a526:	89ab      	ldrh	r3, [r5, #12]
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d907      	bls.n	800a53c <_fwalk_sglue+0x38>
 800a52c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a530:	3301      	adds	r3, #1
 800a532:	d003      	beq.n	800a53c <_fwalk_sglue+0x38>
 800a534:	4629      	mov	r1, r5
 800a536:	4638      	mov	r0, r7
 800a538:	47c0      	blx	r8
 800a53a:	4306      	orrs	r6, r0
 800a53c:	3568      	adds	r5, #104	; 0x68
 800a53e:	e7e9      	b.n	800a514 <_fwalk_sglue+0x10>

0800a540 <siprintf>:
 800a540:	b40e      	push	{r1, r2, r3}
 800a542:	b500      	push	{lr}
 800a544:	b09c      	sub	sp, #112	; 0x70
 800a546:	ab1d      	add	r3, sp, #116	; 0x74
 800a548:	9002      	str	r0, [sp, #8]
 800a54a:	9006      	str	r0, [sp, #24]
 800a54c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a550:	4809      	ldr	r0, [pc, #36]	; (800a578 <siprintf+0x38>)
 800a552:	9107      	str	r1, [sp, #28]
 800a554:	9104      	str	r1, [sp, #16]
 800a556:	4909      	ldr	r1, [pc, #36]	; (800a57c <siprintf+0x3c>)
 800a558:	f853 2b04 	ldr.w	r2, [r3], #4
 800a55c:	9105      	str	r1, [sp, #20]
 800a55e:	6800      	ldr	r0, [r0, #0]
 800a560:	9301      	str	r3, [sp, #4]
 800a562:	a902      	add	r1, sp, #8
 800a564:	f000 faae 	bl	800aac4 <_svfiprintf_r>
 800a568:	9b02      	ldr	r3, [sp, #8]
 800a56a:	2200      	movs	r2, #0
 800a56c:	701a      	strb	r2, [r3, #0]
 800a56e:	b01c      	add	sp, #112	; 0x70
 800a570:	f85d eb04 	ldr.w	lr, [sp], #4
 800a574:	b003      	add	sp, #12
 800a576:	4770      	bx	lr
 800a578:	20000068 	.word	0x20000068
 800a57c:	ffff0208 	.word	0xffff0208

0800a580 <__sread>:
 800a580:	b510      	push	{r4, lr}
 800a582:	460c      	mov	r4, r1
 800a584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a588:	f000 f8c4 	bl	800a714 <_read_r>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	bfab      	itete	ge
 800a590:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a592:	89a3      	ldrhlt	r3, [r4, #12]
 800a594:	181b      	addge	r3, r3, r0
 800a596:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a59a:	bfac      	ite	ge
 800a59c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a59e:	81a3      	strhlt	r3, [r4, #12]
 800a5a0:	bd10      	pop	{r4, pc}

0800a5a2 <__swrite>:
 800a5a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a6:	461f      	mov	r7, r3
 800a5a8:	898b      	ldrh	r3, [r1, #12]
 800a5aa:	05db      	lsls	r3, r3, #23
 800a5ac:	4605      	mov	r5, r0
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	4616      	mov	r6, r2
 800a5b2:	d505      	bpl.n	800a5c0 <__swrite+0x1e>
 800a5b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b8:	2302      	movs	r3, #2
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	f000 f898 	bl	800a6f0 <_lseek_r>
 800a5c0:	89a3      	ldrh	r3, [r4, #12]
 800a5c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5ca:	81a3      	strh	r3, [r4, #12]
 800a5cc:	4632      	mov	r2, r6
 800a5ce:	463b      	mov	r3, r7
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5d6:	f000 b8af 	b.w	800a738 <_write_r>

0800a5da <__sseek>:
 800a5da:	b510      	push	{r4, lr}
 800a5dc:	460c      	mov	r4, r1
 800a5de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5e2:	f000 f885 	bl	800a6f0 <_lseek_r>
 800a5e6:	1c43      	adds	r3, r0, #1
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	bf15      	itete	ne
 800a5ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5f6:	81a3      	strheq	r3, [r4, #12]
 800a5f8:	bf18      	it	ne
 800a5fa:	81a3      	strhne	r3, [r4, #12]
 800a5fc:	bd10      	pop	{r4, pc}

0800a5fe <__sclose>:
 800a5fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a602:	f000 b865 	b.w	800a6d0 <_close_r>

0800a606 <memset>:
 800a606:	4402      	add	r2, r0
 800a608:	4603      	mov	r3, r0
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d100      	bne.n	800a610 <memset+0xa>
 800a60e:	4770      	bx	lr
 800a610:	f803 1b01 	strb.w	r1, [r3], #1
 800a614:	e7f9      	b.n	800a60a <memset+0x4>
	...

0800a618 <strtok>:
 800a618:	4b16      	ldr	r3, [pc, #88]	; (800a674 <strtok+0x5c>)
 800a61a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a61c:	681e      	ldr	r6, [r3, #0]
 800a61e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a620:	4605      	mov	r5, r0
 800a622:	b9fc      	cbnz	r4, 800a664 <strtok+0x4c>
 800a624:	2050      	movs	r0, #80	; 0x50
 800a626:	9101      	str	r1, [sp, #4]
 800a628:	f000 f93e 	bl	800a8a8 <malloc>
 800a62c:	9901      	ldr	r1, [sp, #4]
 800a62e:	6470      	str	r0, [r6, #68]	; 0x44
 800a630:	4602      	mov	r2, r0
 800a632:	b920      	cbnz	r0, 800a63e <strtok+0x26>
 800a634:	4b10      	ldr	r3, [pc, #64]	; (800a678 <strtok+0x60>)
 800a636:	4811      	ldr	r0, [pc, #68]	; (800a67c <strtok+0x64>)
 800a638:	215b      	movs	r1, #91	; 0x5b
 800a63a:	f000 f8cb 	bl	800a7d4 <__assert_func>
 800a63e:	e9c0 4400 	strd	r4, r4, [r0]
 800a642:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a646:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a64a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a64e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a652:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a656:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a65a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a65e:	6184      	str	r4, [r0, #24]
 800a660:	7704      	strb	r4, [r0, #28]
 800a662:	6244      	str	r4, [r0, #36]	; 0x24
 800a664:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a666:	2301      	movs	r3, #1
 800a668:	4628      	mov	r0, r5
 800a66a:	b002      	add	sp, #8
 800a66c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a670:	f000 b806 	b.w	800a680 <__strtok_r>
 800a674:	20000068 	.word	0x20000068
 800a678:	0800b9c5 	.word	0x0800b9c5
 800a67c:	0800b9dc 	.word	0x0800b9dc

0800a680 <__strtok_r>:
 800a680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a682:	b908      	cbnz	r0, 800a688 <__strtok_r+0x8>
 800a684:	6810      	ldr	r0, [r2, #0]
 800a686:	b188      	cbz	r0, 800a6ac <__strtok_r+0x2c>
 800a688:	4604      	mov	r4, r0
 800a68a:	4620      	mov	r0, r4
 800a68c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a690:	460f      	mov	r7, r1
 800a692:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a696:	b91e      	cbnz	r6, 800a6a0 <__strtok_r+0x20>
 800a698:	b965      	cbnz	r5, 800a6b4 <__strtok_r+0x34>
 800a69a:	6015      	str	r5, [r2, #0]
 800a69c:	4628      	mov	r0, r5
 800a69e:	e005      	b.n	800a6ac <__strtok_r+0x2c>
 800a6a0:	42b5      	cmp	r5, r6
 800a6a2:	d1f6      	bne.n	800a692 <__strtok_r+0x12>
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d1f0      	bne.n	800a68a <__strtok_r+0xa>
 800a6a8:	6014      	str	r4, [r2, #0]
 800a6aa:	7003      	strb	r3, [r0, #0]
 800a6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6ae:	461c      	mov	r4, r3
 800a6b0:	e00c      	b.n	800a6cc <__strtok_r+0x4c>
 800a6b2:	b915      	cbnz	r5, 800a6ba <__strtok_r+0x3a>
 800a6b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a6b8:	460e      	mov	r6, r1
 800a6ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a6be:	42ab      	cmp	r3, r5
 800a6c0:	d1f7      	bne.n	800a6b2 <__strtok_r+0x32>
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d0f3      	beq.n	800a6ae <__strtok_r+0x2e>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a6cc:	6014      	str	r4, [r2, #0]
 800a6ce:	e7ed      	b.n	800a6ac <__strtok_r+0x2c>

0800a6d0 <_close_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	4d06      	ldr	r5, [pc, #24]	; (800a6ec <_close_r+0x1c>)
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	4608      	mov	r0, r1
 800a6da:	602b      	str	r3, [r5, #0]
 800a6dc:	f7f7 faf4 	bl	8001cc8 <_close>
 800a6e0:	1c43      	adds	r3, r0, #1
 800a6e2:	d102      	bne.n	800a6ea <_close_r+0x1a>
 800a6e4:	682b      	ldr	r3, [r5, #0]
 800a6e6:	b103      	cbz	r3, 800a6ea <_close_r+0x1a>
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	bd38      	pop	{r3, r4, r5, pc}
 800a6ec:	20001c74 	.word	0x20001c74

0800a6f0 <_lseek_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4d07      	ldr	r5, [pc, #28]	; (800a710 <_lseek_r+0x20>)
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	4608      	mov	r0, r1
 800a6f8:	4611      	mov	r1, r2
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	602a      	str	r2, [r5, #0]
 800a6fe:	461a      	mov	r2, r3
 800a700:	f7f7 fb09 	bl	8001d16 <_lseek>
 800a704:	1c43      	adds	r3, r0, #1
 800a706:	d102      	bne.n	800a70e <_lseek_r+0x1e>
 800a708:	682b      	ldr	r3, [r5, #0]
 800a70a:	b103      	cbz	r3, 800a70e <_lseek_r+0x1e>
 800a70c:	6023      	str	r3, [r4, #0]
 800a70e:	bd38      	pop	{r3, r4, r5, pc}
 800a710:	20001c74 	.word	0x20001c74

0800a714 <_read_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	4d07      	ldr	r5, [pc, #28]	; (800a734 <_read_r+0x20>)
 800a718:	4604      	mov	r4, r0
 800a71a:	4608      	mov	r0, r1
 800a71c:	4611      	mov	r1, r2
 800a71e:	2200      	movs	r2, #0
 800a720:	602a      	str	r2, [r5, #0]
 800a722:	461a      	mov	r2, r3
 800a724:	f7f7 fa97 	bl	8001c56 <_read>
 800a728:	1c43      	adds	r3, r0, #1
 800a72a:	d102      	bne.n	800a732 <_read_r+0x1e>
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	b103      	cbz	r3, 800a732 <_read_r+0x1e>
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	bd38      	pop	{r3, r4, r5, pc}
 800a734:	20001c74 	.word	0x20001c74

0800a738 <_write_r>:
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	4d07      	ldr	r5, [pc, #28]	; (800a758 <_write_r+0x20>)
 800a73c:	4604      	mov	r4, r0
 800a73e:	4608      	mov	r0, r1
 800a740:	4611      	mov	r1, r2
 800a742:	2200      	movs	r2, #0
 800a744:	602a      	str	r2, [r5, #0]
 800a746:	461a      	mov	r2, r3
 800a748:	f7f7 faa2 	bl	8001c90 <_write>
 800a74c:	1c43      	adds	r3, r0, #1
 800a74e:	d102      	bne.n	800a756 <_write_r+0x1e>
 800a750:	682b      	ldr	r3, [r5, #0]
 800a752:	b103      	cbz	r3, 800a756 <_write_r+0x1e>
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	bd38      	pop	{r3, r4, r5, pc}
 800a758:	20001c74 	.word	0x20001c74

0800a75c <__errno>:
 800a75c:	4b01      	ldr	r3, [pc, #4]	; (800a764 <__errno+0x8>)
 800a75e:	6818      	ldr	r0, [r3, #0]
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	20000068 	.word	0x20000068

0800a768 <__libc_init_array>:
 800a768:	b570      	push	{r4, r5, r6, lr}
 800a76a:	4d0d      	ldr	r5, [pc, #52]	; (800a7a0 <__libc_init_array+0x38>)
 800a76c:	4c0d      	ldr	r4, [pc, #52]	; (800a7a4 <__libc_init_array+0x3c>)
 800a76e:	1b64      	subs	r4, r4, r5
 800a770:	10a4      	asrs	r4, r4, #2
 800a772:	2600      	movs	r6, #0
 800a774:	42a6      	cmp	r6, r4
 800a776:	d109      	bne.n	800a78c <__libc_init_array+0x24>
 800a778:	4d0b      	ldr	r5, [pc, #44]	; (800a7a8 <__libc_init_array+0x40>)
 800a77a:	4c0c      	ldr	r4, [pc, #48]	; (800a7ac <__libc_init_array+0x44>)
 800a77c:	f000 fffa 	bl	800b774 <_init>
 800a780:	1b64      	subs	r4, r4, r5
 800a782:	10a4      	asrs	r4, r4, #2
 800a784:	2600      	movs	r6, #0
 800a786:	42a6      	cmp	r6, r4
 800a788:	d105      	bne.n	800a796 <__libc_init_array+0x2e>
 800a78a:	bd70      	pop	{r4, r5, r6, pc}
 800a78c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a790:	4798      	blx	r3
 800a792:	3601      	adds	r6, #1
 800a794:	e7ee      	b.n	800a774 <__libc_init_array+0xc>
 800a796:	f855 3b04 	ldr.w	r3, [r5], #4
 800a79a:	4798      	blx	r3
 800a79c:	3601      	adds	r6, #1
 800a79e:	e7f2      	b.n	800a786 <__libc_init_array+0x1e>
 800a7a0:	0800bab0 	.word	0x0800bab0
 800a7a4:	0800bab0 	.word	0x0800bab0
 800a7a8:	0800bab0 	.word	0x0800bab0
 800a7ac:	0800bab4 	.word	0x0800bab4

0800a7b0 <__retarget_lock_init_recursive>:
 800a7b0:	4770      	bx	lr

0800a7b2 <__retarget_lock_acquire_recursive>:
 800a7b2:	4770      	bx	lr

0800a7b4 <__retarget_lock_release_recursive>:
 800a7b4:	4770      	bx	lr

0800a7b6 <memcpy>:
 800a7b6:	440a      	add	r2, r1
 800a7b8:	4291      	cmp	r1, r2
 800a7ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a7be:	d100      	bne.n	800a7c2 <memcpy+0xc>
 800a7c0:	4770      	bx	lr
 800a7c2:	b510      	push	{r4, lr}
 800a7c4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7cc:	4291      	cmp	r1, r2
 800a7ce:	d1f9      	bne.n	800a7c4 <memcpy+0xe>
 800a7d0:	bd10      	pop	{r4, pc}
	...

0800a7d4 <__assert_func>:
 800a7d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7d6:	4614      	mov	r4, r2
 800a7d8:	461a      	mov	r2, r3
 800a7da:	4b09      	ldr	r3, [pc, #36]	; (800a800 <__assert_func+0x2c>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4605      	mov	r5, r0
 800a7e0:	68d8      	ldr	r0, [r3, #12]
 800a7e2:	b14c      	cbz	r4, 800a7f8 <__assert_func+0x24>
 800a7e4:	4b07      	ldr	r3, [pc, #28]	; (800a804 <__assert_func+0x30>)
 800a7e6:	9100      	str	r1, [sp, #0]
 800a7e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7ec:	4906      	ldr	r1, [pc, #24]	; (800a808 <__assert_func+0x34>)
 800a7ee:	462b      	mov	r3, r5
 800a7f0:	f000 fca4 	bl	800b13c <fiprintf>
 800a7f4:	f000 fcde 	bl	800b1b4 <abort>
 800a7f8:	4b04      	ldr	r3, [pc, #16]	; (800a80c <__assert_func+0x38>)
 800a7fa:	461c      	mov	r4, r3
 800a7fc:	e7f3      	b.n	800a7e6 <__assert_func+0x12>
 800a7fe:	bf00      	nop
 800a800:	20000068 	.word	0x20000068
 800a804:	0800ba36 	.word	0x0800ba36
 800a808:	0800ba43 	.word	0x0800ba43
 800a80c:	0800ba71 	.word	0x0800ba71

0800a810 <_free_r>:
 800a810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a812:	2900      	cmp	r1, #0
 800a814:	d044      	beq.n	800a8a0 <_free_r+0x90>
 800a816:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a81a:	9001      	str	r0, [sp, #4]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	f1a1 0404 	sub.w	r4, r1, #4
 800a822:	bfb8      	it	lt
 800a824:	18e4      	addlt	r4, r4, r3
 800a826:	f000 f8e7 	bl	800a9f8 <__malloc_lock>
 800a82a:	4a1e      	ldr	r2, [pc, #120]	; (800a8a4 <_free_r+0x94>)
 800a82c:	9801      	ldr	r0, [sp, #4]
 800a82e:	6813      	ldr	r3, [r2, #0]
 800a830:	b933      	cbnz	r3, 800a840 <_free_r+0x30>
 800a832:	6063      	str	r3, [r4, #4]
 800a834:	6014      	str	r4, [r2, #0]
 800a836:	b003      	add	sp, #12
 800a838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a83c:	f000 b8e2 	b.w	800aa04 <__malloc_unlock>
 800a840:	42a3      	cmp	r3, r4
 800a842:	d908      	bls.n	800a856 <_free_r+0x46>
 800a844:	6825      	ldr	r5, [r4, #0]
 800a846:	1961      	adds	r1, r4, r5
 800a848:	428b      	cmp	r3, r1
 800a84a:	bf01      	itttt	eq
 800a84c:	6819      	ldreq	r1, [r3, #0]
 800a84e:	685b      	ldreq	r3, [r3, #4]
 800a850:	1949      	addeq	r1, r1, r5
 800a852:	6021      	streq	r1, [r4, #0]
 800a854:	e7ed      	b.n	800a832 <_free_r+0x22>
 800a856:	461a      	mov	r2, r3
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	b10b      	cbz	r3, 800a860 <_free_r+0x50>
 800a85c:	42a3      	cmp	r3, r4
 800a85e:	d9fa      	bls.n	800a856 <_free_r+0x46>
 800a860:	6811      	ldr	r1, [r2, #0]
 800a862:	1855      	adds	r5, r2, r1
 800a864:	42a5      	cmp	r5, r4
 800a866:	d10b      	bne.n	800a880 <_free_r+0x70>
 800a868:	6824      	ldr	r4, [r4, #0]
 800a86a:	4421      	add	r1, r4
 800a86c:	1854      	adds	r4, r2, r1
 800a86e:	42a3      	cmp	r3, r4
 800a870:	6011      	str	r1, [r2, #0]
 800a872:	d1e0      	bne.n	800a836 <_free_r+0x26>
 800a874:	681c      	ldr	r4, [r3, #0]
 800a876:	685b      	ldr	r3, [r3, #4]
 800a878:	6053      	str	r3, [r2, #4]
 800a87a:	440c      	add	r4, r1
 800a87c:	6014      	str	r4, [r2, #0]
 800a87e:	e7da      	b.n	800a836 <_free_r+0x26>
 800a880:	d902      	bls.n	800a888 <_free_r+0x78>
 800a882:	230c      	movs	r3, #12
 800a884:	6003      	str	r3, [r0, #0]
 800a886:	e7d6      	b.n	800a836 <_free_r+0x26>
 800a888:	6825      	ldr	r5, [r4, #0]
 800a88a:	1961      	adds	r1, r4, r5
 800a88c:	428b      	cmp	r3, r1
 800a88e:	bf04      	itt	eq
 800a890:	6819      	ldreq	r1, [r3, #0]
 800a892:	685b      	ldreq	r3, [r3, #4]
 800a894:	6063      	str	r3, [r4, #4]
 800a896:	bf04      	itt	eq
 800a898:	1949      	addeq	r1, r1, r5
 800a89a:	6021      	streq	r1, [r4, #0]
 800a89c:	6054      	str	r4, [r2, #4]
 800a89e:	e7ca      	b.n	800a836 <_free_r+0x26>
 800a8a0:	b003      	add	sp, #12
 800a8a2:	bd30      	pop	{r4, r5, pc}
 800a8a4:	20001c7c 	.word	0x20001c7c

0800a8a8 <malloc>:
 800a8a8:	4b02      	ldr	r3, [pc, #8]	; (800a8b4 <malloc+0xc>)
 800a8aa:	4601      	mov	r1, r0
 800a8ac:	6818      	ldr	r0, [r3, #0]
 800a8ae:	f000 b823 	b.w	800a8f8 <_malloc_r>
 800a8b2:	bf00      	nop
 800a8b4:	20000068 	.word	0x20000068

0800a8b8 <sbrk_aligned>:
 800a8b8:	b570      	push	{r4, r5, r6, lr}
 800a8ba:	4e0e      	ldr	r6, [pc, #56]	; (800a8f4 <sbrk_aligned+0x3c>)
 800a8bc:	460c      	mov	r4, r1
 800a8be:	6831      	ldr	r1, [r6, #0]
 800a8c0:	4605      	mov	r5, r0
 800a8c2:	b911      	cbnz	r1, 800a8ca <sbrk_aligned+0x12>
 800a8c4:	f000 fc66 	bl	800b194 <_sbrk_r>
 800a8c8:	6030      	str	r0, [r6, #0]
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	f000 fc61 	bl	800b194 <_sbrk_r>
 800a8d2:	1c43      	adds	r3, r0, #1
 800a8d4:	d00a      	beq.n	800a8ec <sbrk_aligned+0x34>
 800a8d6:	1cc4      	adds	r4, r0, #3
 800a8d8:	f024 0403 	bic.w	r4, r4, #3
 800a8dc:	42a0      	cmp	r0, r4
 800a8de:	d007      	beq.n	800a8f0 <sbrk_aligned+0x38>
 800a8e0:	1a21      	subs	r1, r4, r0
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	f000 fc56 	bl	800b194 <_sbrk_r>
 800a8e8:	3001      	adds	r0, #1
 800a8ea:	d101      	bne.n	800a8f0 <sbrk_aligned+0x38>
 800a8ec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	bd70      	pop	{r4, r5, r6, pc}
 800a8f4:	20001c80 	.word	0x20001c80

0800a8f8 <_malloc_r>:
 800a8f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8fc:	1ccd      	adds	r5, r1, #3
 800a8fe:	f025 0503 	bic.w	r5, r5, #3
 800a902:	3508      	adds	r5, #8
 800a904:	2d0c      	cmp	r5, #12
 800a906:	bf38      	it	cc
 800a908:	250c      	movcc	r5, #12
 800a90a:	2d00      	cmp	r5, #0
 800a90c:	4607      	mov	r7, r0
 800a90e:	db01      	blt.n	800a914 <_malloc_r+0x1c>
 800a910:	42a9      	cmp	r1, r5
 800a912:	d905      	bls.n	800a920 <_malloc_r+0x28>
 800a914:	230c      	movs	r3, #12
 800a916:	603b      	str	r3, [r7, #0]
 800a918:	2600      	movs	r6, #0
 800a91a:	4630      	mov	r0, r6
 800a91c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a920:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a9f4 <_malloc_r+0xfc>
 800a924:	f000 f868 	bl	800a9f8 <__malloc_lock>
 800a928:	f8d8 3000 	ldr.w	r3, [r8]
 800a92c:	461c      	mov	r4, r3
 800a92e:	bb5c      	cbnz	r4, 800a988 <_malloc_r+0x90>
 800a930:	4629      	mov	r1, r5
 800a932:	4638      	mov	r0, r7
 800a934:	f7ff ffc0 	bl	800a8b8 <sbrk_aligned>
 800a938:	1c43      	adds	r3, r0, #1
 800a93a:	4604      	mov	r4, r0
 800a93c:	d155      	bne.n	800a9ea <_malloc_r+0xf2>
 800a93e:	f8d8 4000 	ldr.w	r4, [r8]
 800a942:	4626      	mov	r6, r4
 800a944:	2e00      	cmp	r6, #0
 800a946:	d145      	bne.n	800a9d4 <_malloc_r+0xdc>
 800a948:	2c00      	cmp	r4, #0
 800a94a:	d048      	beq.n	800a9de <_malloc_r+0xe6>
 800a94c:	6823      	ldr	r3, [r4, #0]
 800a94e:	4631      	mov	r1, r6
 800a950:	4638      	mov	r0, r7
 800a952:	eb04 0903 	add.w	r9, r4, r3
 800a956:	f000 fc1d 	bl	800b194 <_sbrk_r>
 800a95a:	4581      	cmp	r9, r0
 800a95c:	d13f      	bne.n	800a9de <_malloc_r+0xe6>
 800a95e:	6821      	ldr	r1, [r4, #0]
 800a960:	1a6d      	subs	r5, r5, r1
 800a962:	4629      	mov	r1, r5
 800a964:	4638      	mov	r0, r7
 800a966:	f7ff ffa7 	bl	800a8b8 <sbrk_aligned>
 800a96a:	3001      	adds	r0, #1
 800a96c:	d037      	beq.n	800a9de <_malloc_r+0xe6>
 800a96e:	6823      	ldr	r3, [r4, #0]
 800a970:	442b      	add	r3, r5
 800a972:	6023      	str	r3, [r4, #0]
 800a974:	f8d8 3000 	ldr.w	r3, [r8]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d038      	beq.n	800a9ee <_malloc_r+0xf6>
 800a97c:	685a      	ldr	r2, [r3, #4]
 800a97e:	42a2      	cmp	r2, r4
 800a980:	d12b      	bne.n	800a9da <_malloc_r+0xe2>
 800a982:	2200      	movs	r2, #0
 800a984:	605a      	str	r2, [r3, #4]
 800a986:	e00f      	b.n	800a9a8 <_malloc_r+0xb0>
 800a988:	6822      	ldr	r2, [r4, #0]
 800a98a:	1b52      	subs	r2, r2, r5
 800a98c:	d41f      	bmi.n	800a9ce <_malloc_r+0xd6>
 800a98e:	2a0b      	cmp	r2, #11
 800a990:	d917      	bls.n	800a9c2 <_malloc_r+0xca>
 800a992:	1961      	adds	r1, r4, r5
 800a994:	42a3      	cmp	r3, r4
 800a996:	6025      	str	r5, [r4, #0]
 800a998:	bf18      	it	ne
 800a99a:	6059      	strne	r1, [r3, #4]
 800a99c:	6863      	ldr	r3, [r4, #4]
 800a99e:	bf08      	it	eq
 800a9a0:	f8c8 1000 	streq.w	r1, [r8]
 800a9a4:	5162      	str	r2, [r4, r5]
 800a9a6:	604b      	str	r3, [r1, #4]
 800a9a8:	4638      	mov	r0, r7
 800a9aa:	f104 060b 	add.w	r6, r4, #11
 800a9ae:	f000 f829 	bl	800aa04 <__malloc_unlock>
 800a9b2:	f026 0607 	bic.w	r6, r6, #7
 800a9b6:	1d23      	adds	r3, r4, #4
 800a9b8:	1af2      	subs	r2, r6, r3
 800a9ba:	d0ae      	beq.n	800a91a <_malloc_r+0x22>
 800a9bc:	1b9b      	subs	r3, r3, r6
 800a9be:	50a3      	str	r3, [r4, r2]
 800a9c0:	e7ab      	b.n	800a91a <_malloc_r+0x22>
 800a9c2:	42a3      	cmp	r3, r4
 800a9c4:	6862      	ldr	r2, [r4, #4]
 800a9c6:	d1dd      	bne.n	800a984 <_malloc_r+0x8c>
 800a9c8:	f8c8 2000 	str.w	r2, [r8]
 800a9cc:	e7ec      	b.n	800a9a8 <_malloc_r+0xb0>
 800a9ce:	4623      	mov	r3, r4
 800a9d0:	6864      	ldr	r4, [r4, #4]
 800a9d2:	e7ac      	b.n	800a92e <_malloc_r+0x36>
 800a9d4:	4634      	mov	r4, r6
 800a9d6:	6876      	ldr	r6, [r6, #4]
 800a9d8:	e7b4      	b.n	800a944 <_malloc_r+0x4c>
 800a9da:	4613      	mov	r3, r2
 800a9dc:	e7cc      	b.n	800a978 <_malloc_r+0x80>
 800a9de:	230c      	movs	r3, #12
 800a9e0:	603b      	str	r3, [r7, #0]
 800a9e2:	4638      	mov	r0, r7
 800a9e4:	f000 f80e 	bl	800aa04 <__malloc_unlock>
 800a9e8:	e797      	b.n	800a91a <_malloc_r+0x22>
 800a9ea:	6025      	str	r5, [r4, #0]
 800a9ec:	e7dc      	b.n	800a9a8 <_malloc_r+0xb0>
 800a9ee:	605b      	str	r3, [r3, #4]
 800a9f0:	deff      	udf	#255	; 0xff
 800a9f2:	bf00      	nop
 800a9f4:	20001c7c 	.word	0x20001c7c

0800a9f8 <__malloc_lock>:
 800a9f8:	4801      	ldr	r0, [pc, #4]	; (800aa00 <__malloc_lock+0x8>)
 800a9fa:	f7ff beda 	b.w	800a7b2 <__retarget_lock_acquire_recursive>
 800a9fe:	bf00      	nop
 800aa00:	20001c78 	.word	0x20001c78

0800aa04 <__malloc_unlock>:
 800aa04:	4801      	ldr	r0, [pc, #4]	; (800aa0c <__malloc_unlock+0x8>)
 800aa06:	f7ff bed5 	b.w	800a7b4 <__retarget_lock_release_recursive>
 800aa0a:	bf00      	nop
 800aa0c:	20001c78 	.word	0x20001c78

0800aa10 <__ssputs_r>:
 800aa10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa14:	688e      	ldr	r6, [r1, #8]
 800aa16:	461f      	mov	r7, r3
 800aa18:	42be      	cmp	r6, r7
 800aa1a:	680b      	ldr	r3, [r1, #0]
 800aa1c:	4682      	mov	sl, r0
 800aa1e:	460c      	mov	r4, r1
 800aa20:	4690      	mov	r8, r2
 800aa22:	d82c      	bhi.n	800aa7e <__ssputs_r+0x6e>
 800aa24:	898a      	ldrh	r2, [r1, #12]
 800aa26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aa2a:	d026      	beq.n	800aa7a <__ssputs_r+0x6a>
 800aa2c:	6965      	ldr	r5, [r4, #20]
 800aa2e:	6909      	ldr	r1, [r1, #16]
 800aa30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa34:	eba3 0901 	sub.w	r9, r3, r1
 800aa38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa3c:	1c7b      	adds	r3, r7, #1
 800aa3e:	444b      	add	r3, r9
 800aa40:	106d      	asrs	r5, r5, #1
 800aa42:	429d      	cmp	r5, r3
 800aa44:	bf38      	it	cc
 800aa46:	461d      	movcc	r5, r3
 800aa48:	0553      	lsls	r3, r2, #21
 800aa4a:	d527      	bpl.n	800aa9c <__ssputs_r+0x8c>
 800aa4c:	4629      	mov	r1, r5
 800aa4e:	f7ff ff53 	bl	800a8f8 <_malloc_r>
 800aa52:	4606      	mov	r6, r0
 800aa54:	b360      	cbz	r0, 800aab0 <__ssputs_r+0xa0>
 800aa56:	6921      	ldr	r1, [r4, #16]
 800aa58:	464a      	mov	r2, r9
 800aa5a:	f7ff feac 	bl	800a7b6 <memcpy>
 800aa5e:	89a3      	ldrh	r3, [r4, #12]
 800aa60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa68:	81a3      	strh	r3, [r4, #12]
 800aa6a:	6126      	str	r6, [r4, #16]
 800aa6c:	6165      	str	r5, [r4, #20]
 800aa6e:	444e      	add	r6, r9
 800aa70:	eba5 0509 	sub.w	r5, r5, r9
 800aa74:	6026      	str	r6, [r4, #0]
 800aa76:	60a5      	str	r5, [r4, #8]
 800aa78:	463e      	mov	r6, r7
 800aa7a:	42be      	cmp	r6, r7
 800aa7c:	d900      	bls.n	800aa80 <__ssputs_r+0x70>
 800aa7e:	463e      	mov	r6, r7
 800aa80:	6820      	ldr	r0, [r4, #0]
 800aa82:	4632      	mov	r2, r6
 800aa84:	4641      	mov	r1, r8
 800aa86:	f000 fb6b 	bl	800b160 <memmove>
 800aa8a:	68a3      	ldr	r3, [r4, #8]
 800aa8c:	1b9b      	subs	r3, r3, r6
 800aa8e:	60a3      	str	r3, [r4, #8]
 800aa90:	6823      	ldr	r3, [r4, #0]
 800aa92:	4433      	add	r3, r6
 800aa94:	6023      	str	r3, [r4, #0]
 800aa96:	2000      	movs	r0, #0
 800aa98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa9c:	462a      	mov	r2, r5
 800aa9e:	f000 fb90 	bl	800b1c2 <_realloc_r>
 800aaa2:	4606      	mov	r6, r0
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d1e0      	bne.n	800aa6a <__ssputs_r+0x5a>
 800aaa8:	6921      	ldr	r1, [r4, #16]
 800aaaa:	4650      	mov	r0, sl
 800aaac:	f7ff feb0 	bl	800a810 <_free_r>
 800aab0:	230c      	movs	r3, #12
 800aab2:	f8ca 3000 	str.w	r3, [sl]
 800aab6:	89a3      	ldrh	r3, [r4, #12]
 800aab8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aabc:	81a3      	strh	r3, [r4, #12]
 800aabe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aac2:	e7e9      	b.n	800aa98 <__ssputs_r+0x88>

0800aac4 <_svfiprintf_r>:
 800aac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aac8:	4698      	mov	r8, r3
 800aaca:	898b      	ldrh	r3, [r1, #12]
 800aacc:	061b      	lsls	r3, r3, #24
 800aace:	b09d      	sub	sp, #116	; 0x74
 800aad0:	4607      	mov	r7, r0
 800aad2:	460d      	mov	r5, r1
 800aad4:	4614      	mov	r4, r2
 800aad6:	d50e      	bpl.n	800aaf6 <_svfiprintf_r+0x32>
 800aad8:	690b      	ldr	r3, [r1, #16]
 800aada:	b963      	cbnz	r3, 800aaf6 <_svfiprintf_r+0x32>
 800aadc:	2140      	movs	r1, #64	; 0x40
 800aade:	f7ff ff0b 	bl	800a8f8 <_malloc_r>
 800aae2:	6028      	str	r0, [r5, #0]
 800aae4:	6128      	str	r0, [r5, #16]
 800aae6:	b920      	cbnz	r0, 800aaf2 <_svfiprintf_r+0x2e>
 800aae8:	230c      	movs	r3, #12
 800aaea:	603b      	str	r3, [r7, #0]
 800aaec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaf0:	e0d0      	b.n	800ac94 <_svfiprintf_r+0x1d0>
 800aaf2:	2340      	movs	r3, #64	; 0x40
 800aaf4:	616b      	str	r3, [r5, #20]
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	9309      	str	r3, [sp, #36]	; 0x24
 800aafa:	2320      	movs	r3, #32
 800aafc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab00:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab04:	2330      	movs	r3, #48	; 0x30
 800ab06:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800acac <_svfiprintf_r+0x1e8>
 800ab0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ab0e:	f04f 0901 	mov.w	r9, #1
 800ab12:	4623      	mov	r3, r4
 800ab14:	469a      	mov	sl, r3
 800ab16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab1a:	b10a      	cbz	r2, 800ab20 <_svfiprintf_r+0x5c>
 800ab1c:	2a25      	cmp	r2, #37	; 0x25
 800ab1e:	d1f9      	bne.n	800ab14 <_svfiprintf_r+0x50>
 800ab20:	ebba 0b04 	subs.w	fp, sl, r4
 800ab24:	d00b      	beq.n	800ab3e <_svfiprintf_r+0x7a>
 800ab26:	465b      	mov	r3, fp
 800ab28:	4622      	mov	r2, r4
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	4638      	mov	r0, r7
 800ab2e:	f7ff ff6f 	bl	800aa10 <__ssputs_r>
 800ab32:	3001      	adds	r0, #1
 800ab34:	f000 80a9 	beq.w	800ac8a <_svfiprintf_r+0x1c6>
 800ab38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab3a:	445a      	add	r2, fp
 800ab3c:	9209      	str	r2, [sp, #36]	; 0x24
 800ab3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	f000 80a1 	beq.w	800ac8a <_svfiprintf_r+0x1c6>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab52:	f10a 0a01 	add.w	sl, sl, #1
 800ab56:	9304      	str	r3, [sp, #16]
 800ab58:	9307      	str	r3, [sp, #28]
 800ab5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab5e:	931a      	str	r3, [sp, #104]	; 0x68
 800ab60:	4654      	mov	r4, sl
 800ab62:	2205      	movs	r2, #5
 800ab64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab68:	4850      	ldr	r0, [pc, #320]	; (800acac <_svfiprintf_r+0x1e8>)
 800ab6a:	f7f5 fb49 	bl	8000200 <memchr>
 800ab6e:	9a04      	ldr	r2, [sp, #16]
 800ab70:	b9d8      	cbnz	r0, 800abaa <_svfiprintf_r+0xe6>
 800ab72:	06d0      	lsls	r0, r2, #27
 800ab74:	bf44      	itt	mi
 800ab76:	2320      	movmi	r3, #32
 800ab78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab7c:	0711      	lsls	r1, r2, #28
 800ab7e:	bf44      	itt	mi
 800ab80:	232b      	movmi	r3, #43	; 0x2b
 800ab82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab86:	f89a 3000 	ldrb.w	r3, [sl]
 800ab8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab8c:	d015      	beq.n	800abba <_svfiprintf_r+0xf6>
 800ab8e:	9a07      	ldr	r2, [sp, #28]
 800ab90:	4654      	mov	r4, sl
 800ab92:	2000      	movs	r0, #0
 800ab94:	f04f 0c0a 	mov.w	ip, #10
 800ab98:	4621      	mov	r1, r4
 800ab9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab9e:	3b30      	subs	r3, #48	; 0x30
 800aba0:	2b09      	cmp	r3, #9
 800aba2:	d94d      	bls.n	800ac40 <_svfiprintf_r+0x17c>
 800aba4:	b1b0      	cbz	r0, 800abd4 <_svfiprintf_r+0x110>
 800aba6:	9207      	str	r2, [sp, #28]
 800aba8:	e014      	b.n	800abd4 <_svfiprintf_r+0x110>
 800abaa:	eba0 0308 	sub.w	r3, r0, r8
 800abae:	fa09 f303 	lsl.w	r3, r9, r3
 800abb2:	4313      	orrs	r3, r2
 800abb4:	9304      	str	r3, [sp, #16]
 800abb6:	46a2      	mov	sl, r4
 800abb8:	e7d2      	b.n	800ab60 <_svfiprintf_r+0x9c>
 800abba:	9b03      	ldr	r3, [sp, #12]
 800abbc:	1d19      	adds	r1, r3, #4
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	9103      	str	r1, [sp, #12]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	bfbb      	ittet	lt
 800abc6:	425b      	neglt	r3, r3
 800abc8:	f042 0202 	orrlt.w	r2, r2, #2
 800abcc:	9307      	strge	r3, [sp, #28]
 800abce:	9307      	strlt	r3, [sp, #28]
 800abd0:	bfb8      	it	lt
 800abd2:	9204      	strlt	r2, [sp, #16]
 800abd4:	7823      	ldrb	r3, [r4, #0]
 800abd6:	2b2e      	cmp	r3, #46	; 0x2e
 800abd8:	d10c      	bne.n	800abf4 <_svfiprintf_r+0x130>
 800abda:	7863      	ldrb	r3, [r4, #1]
 800abdc:	2b2a      	cmp	r3, #42	; 0x2a
 800abde:	d134      	bne.n	800ac4a <_svfiprintf_r+0x186>
 800abe0:	9b03      	ldr	r3, [sp, #12]
 800abe2:	1d1a      	adds	r2, r3, #4
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	9203      	str	r2, [sp, #12]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	bfb8      	it	lt
 800abec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800abf0:	3402      	adds	r4, #2
 800abf2:	9305      	str	r3, [sp, #20]
 800abf4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800acbc <_svfiprintf_r+0x1f8>
 800abf8:	7821      	ldrb	r1, [r4, #0]
 800abfa:	2203      	movs	r2, #3
 800abfc:	4650      	mov	r0, sl
 800abfe:	f7f5 faff 	bl	8000200 <memchr>
 800ac02:	b138      	cbz	r0, 800ac14 <_svfiprintf_r+0x150>
 800ac04:	9b04      	ldr	r3, [sp, #16]
 800ac06:	eba0 000a 	sub.w	r0, r0, sl
 800ac0a:	2240      	movs	r2, #64	; 0x40
 800ac0c:	4082      	lsls	r2, r0
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	3401      	adds	r4, #1
 800ac12:	9304      	str	r3, [sp, #16]
 800ac14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac18:	4825      	ldr	r0, [pc, #148]	; (800acb0 <_svfiprintf_r+0x1ec>)
 800ac1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ac1e:	2206      	movs	r2, #6
 800ac20:	f7f5 faee 	bl	8000200 <memchr>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	d038      	beq.n	800ac9a <_svfiprintf_r+0x1d6>
 800ac28:	4b22      	ldr	r3, [pc, #136]	; (800acb4 <_svfiprintf_r+0x1f0>)
 800ac2a:	bb1b      	cbnz	r3, 800ac74 <_svfiprintf_r+0x1b0>
 800ac2c:	9b03      	ldr	r3, [sp, #12]
 800ac2e:	3307      	adds	r3, #7
 800ac30:	f023 0307 	bic.w	r3, r3, #7
 800ac34:	3308      	adds	r3, #8
 800ac36:	9303      	str	r3, [sp, #12]
 800ac38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac3a:	4433      	add	r3, r6
 800ac3c:	9309      	str	r3, [sp, #36]	; 0x24
 800ac3e:	e768      	b.n	800ab12 <_svfiprintf_r+0x4e>
 800ac40:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac44:	460c      	mov	r4, r1
 800ac46:	2001      	movs	r0, #1
 800ac48:	e7a6      	b.n	800ab98 <_svfiprintf_r+0xd4>
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	3401      	adds	r4, #1
 800ac4e:	9305      	str	r3, [sp, #20]
 800ac50:	4619      	mov	r1, r3
 800ac52:	f04f 0c0a 	mov.w	ip, #10
 800ac56:	4620      	mov	r0, r4
 800ac58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac5c:	3a30      	subs	r2, #48	; 0x30
 800ac5e:	2a09      	cmp	r2, #9
 800ac60:	d903      	bls.n	800ac6a <_svfiprintf_r+0x1a6>
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d0c6      	beq.n	800abf4 <_svfiprintf_r+0x130>
 800ac66:	9105      	str	r1, [sp, #20]
 800ac68:	e7c4      	b.n	800abf4 <_svfiprintf_r+0x130>
 800ac6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac6e:	4604      	mov	r4, r0
 800ac70:	2301      	movs	r3, #1
 800ac72:	e7f0      	b.n	800ac56 <_svfiprintf_r+0x192>
 800ac74:	ab03      	add	r3, sp, #12
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	462a      	mov	r2, r5
 800ac7a:	4b0f      	ldr	r3, [pc, #60]	; (800acb8 <_svfiprintf_r+0x1f4>)
 800ac7c:	a904      	add	r1, sp, #16
 800ac7e:	4638      	mov	r0, r7
 800ac80:	f3af 8000 	nop.w
 800ac84:	1c42      	adds	r2, r0, #1
 800ac86:	4606      	mov	r6, r0
 800ac88:	d1d6      	bne.n	800ac38 <_svfiprintf_r+0x174>
 800ac8a:	89ab      	ldrh	r3, [r5, #12]
 800ac8c:	065b      	lsls	r3, r3, #25
 800ac8e:	f53f af2d 	bmi.w	800aaec <_svfiprintf_r+0x28>
 800ac92:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac94:	b01d      	add	sp, #116	; 0x74
 800ac96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9a:	ab03      	add	r3, sp, #12
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	462a      	mov	r2, r5
 800aca0:	4b05      	ldr	r3, [pc, #20]	; (800acb8 <_svfiprintf_r+0x1f4>)
 800aca2:	a904      	add	r1, sp, #16
 800aca4:	4638      	mov	r0, r7
 800aca6:	f000 f879 	bl	800ad9c <_printf_i>
 800acaa:	e7eb      	b.n	800ac84 <_svfiprintf_r+0x1c0>
 800acac:	0800ba72 	.word	0x0800ba72
 800acb0:	0800ba7c 	.word	0x0800ba7c
 800acb4:	00000000 	.word	0x00000000
 800acb8:	0800aa11 	.word	0x0800aa11
 800acbc:	0800ba78 	.word	0x0800ba78

0800acc0 <_printf_common>:
 800acc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acc4:	4616      	mov	r6, r2
 800acc6:	4699      	mov	r9, r3
 800acc8:	688a      	ldr	r2, [r1, #8]
 800acca:	690b      	ldr	r3, [r1, #16]
 800accc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800acd0:	4293      	cmp	r3, r2
 800acd2:	bfb8      	it	lt
 800acd4:	4613      	movlt	r3, r2
 800acd6:	6033      	str	r3, [r6, #0]
 800acd8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800acdc:	4607      	mov	r7, r0
 800acde:	460c      	mov	r4, r1
 800ace0:	b10a      	cbz	r2, 800ace6 <_printf_common+0x26>
 800ace2:	3301      	adds	r3, #1
 800ace4:	6033      	str	r3, [r6, #0]
 800ace6:	6823      	ldr	r3, [r4, #0]
 800ace8:	0699      	lsls	r1, r3, #26
 800acea:	bf42      	ittt	mi
 800acec:	6833      	ldrmi	r3, [r6, #0]
 800acee:	3302      	addmi	r3, #2
 800acf0:	6033      	strmi	r3, [r6, #0]
 800acf2:	6825      	ldr	r5, [r4, #0]
 800acf4:	f015 0506 	ands.w	r5, r5, #6
 800acf8:	d106      	bne.n	800ad08 <_printf_common+0x48>
 800acfa:	f104 0a19 	add.w	sl, r4, #25
 800acfe:	68e3      	ldr	r3, [r4, #12]
 800ad00:	6832      	ldr	r2, [r6, #0]
 800ad02:	1a9b      	subs	r3, r3, r2
 800ad04:	42ab      	cmp	r3, r5
 800ad06:	dc26      	bgt.n	800ad56 <_printf_common+0x96>
 800ad08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ad0c:	1e13      	subs	r3, r2, #0
 800ad0e:	6822      	ldr	r2, [r4, #0]
 800ad10:	bf18      	it	ne
 800ad12:	2301      	movne	r3, #1
 800ad14:	0692      	lsls	r2, r2, #26
 800ad16:	d42b      	bmi.n	800ad70 <_printf_common+0xb0>
 800ad18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad1c:	4649      	mov	r1, r9
 800ad1e:	4638      	mov	r0, r7
 800ad20:	47c0      	blx	r8
 800ad22:	3001      	adds	r0, #1
 800ad24:	d01e      	beq.n	800ad64 <_printf_common+0xa4>
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	6922      	ldr	r2, [r4, #16]
 800ad2a:	f003 0306 	and.w	r3, r3, #6
 800ad2e:	2b04      	cmp	r3, #4
 800ad30:	bf02      	ittt	eq
 800ad32:	68e5      	ldreq	r5, [r4, #12]
 800ad34:	6833      	ldreq	r3, [r6, #0]
 800ad36:	1aed      	subeq	r5, r5, r3
 800ad38:	68a3      	ldr	r3, [r4, #8]
 800ad3a:	bf0c      	ite	eq
 800ad3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ad40:	2500      	movne	r5, #0
 800ad42:	4293      	cmp	r3, r2
 800ad44:	bfc4      	itt	gt
 800ad46:	1a9b      	subgt	r3, r3, r2
 800ad48:	18ed      	addgt	r5, r5, r3
 800ad4a:	2600      	movs	r6, #0
 800ad4c:	341a      	adds	r4, #26
 800ad4e:	42b5      	cmp	r5, r6
 800ad50:	d11a      	bne.n	800ad88 <_printf_common+0xc8>
 800ad52:	2000      	movs	r0, #0
 800ad54:	e008      	b.n	800ad68 <_printf_common+0xa8>
 800ad56:	2301      	movs	r3, #1
 800ad58:	4652      	mov	r2, sl
 800ad5a:	4649      	mov	r1, r9
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	47c0      	blx	r8
 800ad60:	3001      	adds	r0, #1
 800ad62:	d103      	bne.n	800ad6c <_printf_common+0xac>
 800ad64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad6c:	3501      	adds	r5, #1
 800ad6e:	e7c6      	b.n	800acfe <_printf_common+0x3e>
 800ad70:	18e1      	adds	r1, r4, r3
 800ad72:	1c5a      	adds	r2, r3, #1
 800ad74:	2030      	movs	r0, #48	; 0x30
 800ad76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad7a:	4422      	add	r2, r4
 800ad7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad84:	3302      	adds	r3, #2
 800ad86:	e7c7      	b.n	800ad18 <_printf_common+0x58>
 800ad88:	2301      	movs	r3, #1
 800ad8a:	4622      	mov	r2, r4
 800ad8c:	4649      	mov	r1, r9
 800ad8e:	4638      	mov	r0, r7
 800ad90:	47c0      	blx	r8
 800ad92:	3001      	adds	r0, #1
 800ad94:	d0e6      	beq.n	800ad64 <_printf_common+0xa4>
 800ad96:	3601      	adds	r6, #1
 800ad98:	e7d9      	b.n	800ad4e <_printf_common+0x8e>
	...

0800ad9c <_printf_i>:
 800ad9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ada0:	7e0f      	ldrb	r7, [r1, #24]
 800ada2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ada4:	2f78      	cmp	r7, #120	; 0x78
 800ada6:	4691      	mov	r9, r2
 800ada8:	4680      	mov	r8, r0
 800adaa:	460c      	mov	r4, r1
 800adac:	469a      	mov	sl, r3
 800adae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800adb2:	d807      	bhi.n	800adc4 <_printf_i+0x28>
 800adb4:	2f62      	cmp	r7, #98	; 0x62
 800adb6:	d80a      	bhi.n	800adce <_printf_i+0x32>
 800adb8:	2f00      	cmp	r7, #0
 800adba:	f000 80d4 	beq.w	800af66 <_printf_i+0x1ca>
 800adbe:	2f58      	cmp	r7, #88	; 0x58
 800adc0:	f000 80c0 	beq.w	800af44 <_printf_i+0x1a8>
 800adc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adc8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800adcc:	e03a      	b.n	800ae44 <_printf_i+0xa8>
 800adce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800add2:	2b15      	cmp	r3, #21
 800add4:	d8f6      	bhi.n	800adc4 <_printf_i+0x28>
 800add6:	a101      	add	r1, pc, #4	; (adr r1, 800addc <_printf_i+0x40>)
 800add8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800addc:	0800ae35 	.word	0x0800ae35
 800ade0:	0800ae49 	.word	0x0800ae49
 800ade4:	0800adc5 	.word	0x0800adc5
 800ade8:	0800adc5 	.word	0x0800adc5
 800adec:	0800adc5 	.word	0x0800adc5
 800adf0:	0800adc5 	.word	0x0800adc5
 800adf4:	0800ae49 	.word	0x0800ae49
 800adf8:	0800adc5 	.word	0x0800adc5
 800adfc:	0800adc5 	.word	0x0800adc5
 800ae00:	0800adc5 	.word	0x0800adc5
 800ae04:	0800adc5 	.word	0x0800adc5
 800ae08:	0800af4d 	.word	0x0800af4d
 800ae0c:	0800ae75 	.word	0x0800ae75
 800ae10:	0800af07 	.word	0x0800af07
 800ae14:	0800adc5 	.word	0x0800adc5
 800ae18:	0800adc5 	.word	0x0800adc5
 800ae1c:	0800af6f 	.word	0x0800af6f
 800ae20:	0800adc5 	.word	0x0800adc5
 800ae24:	0800ae75 	.word	0x0800ae75
 800ae28:	0800adc5 	.word	0x0800adc5
 800ae2c:	0800adc5 	.word	0x0800adc5
 800ae30:	0800af0f 	.word	0x0800af0f
 800ae34:	682b      	ldr	r3, [r5, #0]
 800ae36:	1d1a      	adds	r2, r3, #4
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	602a      	str	r2, [r5, #0]
 800ae3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ae40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ae44:	2301      	movs	r3, #1
 800ae46:	e09f      	b.n	800af88 <_printf_i+0x1ec>
 800ae48:	6820      	ldr	r0, [r4, #0]
 800ae4a:	682b      	ldr	r3, [r5, #0]
 800ae4c:	0607      	lsls	r7, r0, #24
 800ae4e:	f103 0104 	add.w	r1, r3, #4
 800ae52:	6029      	str	r1, [r5, #0]
 800ae54:	d501      	bpl.n	800ae5a <_printf_i+0xbe>
 800ae56:	681e      	ldr	r6, [r3, #0]
 800ae58:	e003      	b.n	800ae62 <_printf_i+0xc6>
 800ae5a:	0646      	lsls	r6, r0, #25
 800ae5c:	d5fb      	bpl.n	800ae56 <_printf_i+0xba>
 800ae5e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ae62:	2e00      	cmp	r6, #0
 800ae64:	da03      	bge.n	800ae6e <_printf_i+0xd2>
 800ae66:	232d      	movs	r3, #45	; 0x2d
 800ae68:	4276      	negs	r6, r6
 800ae6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae6e:	485a      	ldr	r0, [pc, #360]	; (800afd8 <_printf_i+0x23c>)
 800ae70:	230a      	movs	r3, #10
 800ae72:	e012      	b.n	800ae9a <_printf_i+0xfe>
 800ae74:	682b      	ldr	r3, [r5, #0]
 800ae76:	6820      	ldr	r0, [r4, #0]
 800ae78:	1d19      	adds	r1, r3, #4
 800ae7a:	6029      	str	r1, [r5, #0]
 800ae7c:	0605      	lsls	r5, r0, #24
 800ae7e:	d501      	bpl.n	800ae84 <_printf_i+0xe8>
 800ae80:	681e      	ldr	r6, [r3, #0]
 800ae82:	e002      	b.n	800ae8a <_printf_i+0xee>
 800ae84:	0641      	lsls	r1, r0, #25
 800ae86:	d5fb      	bpl.n	800ae80 <_printf_i+0xe4>
 800ae88:	881e      	ldrh	r6, [r3, #0]
 800ae8a:	4853      	ldr	r0, [pc, #332]	; (800afd8 <_printf_i+0x23c>)
 800ae8c:	2f6f      	cmp	r7, #111	; 0x6f
 800ae8e:	bf0c      	ite	eq
 800ae90:	2308      	moveq	r3, #8
 800ae92:	230a      	movne	r3, #10
 800ae94:	2100      	movs	r1, #0
 800ae96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae9a:	6865      	ldr	r5, [r4, #4]
 800ae9c:	60a5      	str	r5, [r4, #8]
 800ae9e:	2d00      	cmp	r5, #0
 800aea0:	bfa2      	ittt	ge
 800aea2:	6821      	ldrge	r1, [r4, #0]
 800aea4:	f021 0104 	bicge.w	r1, r1, #4
 800aea8:	6021      	strge	r1, [r4, #0]
 800aeaa:	b90e      	cbnz	r6, 800aeb0 <_printf_i+0x114>
 800aeac:	2d00      	cmp	r5, #0
 800aeae:	d04b      	beq.n	800af48 <_printf_i+0x1ac>
 800aeb0:	4615      	mov	r5, r2
 800aeb2:	fbb6 f1f3 	udiv	r1, r6, r3
 800aeb6:	fb03 6711 	mls	r7, r3, r1, r6
 800aeba:	5dc7      	ldrb	r7, [r0, r7]
 800aebc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aec0:	4637      	mov	r7, r6
 800aec2:	42bb      	cmp	r3, r7
 800aec4:	460e      	mov	r6, r1
 800aec6:	d9f4      	bls.n	800aeb2 <_printf_i+0x116>
 800aec8:	2b08      	cmp	r3, #8
 800aeca:	d10b      	bne.n	800aee4 <_printf_i+0x148>
 800aecc:	6823      	ldr	r3, [r4, #0]
 800aece:	07de      	lsls	r6, r3, #31
 800aed0:	d508      	bpl.n	800aee4 <_printf_i+0x148>
 800aed2:	6923      	ldr	r3, [r4, #16]
 800aed4:	6861      	ldr	r1, [r4, #4]
 800aed6:	4299      	cmp	r1, r3
 800aed8:	bfde      	ittt	le
 800aeda:	2330      	movle	r3, #48	; 0x30
 800aedc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aee0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aee4:	1b52      	subs	r2, r2, r5
 800aee6:	6122      	str	r2, [r4, #16]
 800aee8:	f8cd a000 	str.w	sl, [sp]
 800aeec:	464b      	mov	r3, r9
 800aeee:	aa03      	add	r2, sp, #12
 800aef0:	4621      	mov	r1, r4
 800aef2:	4640      	mov	r0, r8
 800aef4:	f7ff fee4 	bl	800acc0 <_printf_common>
 800aef8:	3001      	adds	r0, #1
 800aefa:	d14a      	bne.n	800af92 <_printf_i+0x1f6>
 800aefc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af00:	b004      	add	sp, #16
 800af02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af06:	6823      	ldr	r3, [r4, #0]
 800af08:	f043 0320 	orr.w	r3, r3, #32
 800af0c:	6023      	str	r3, [r4, #0]
 800af0e:	4833      	ldr	r0, [pc, #204]	; (800afdc <_printf_i+0x240>)
 800af10:	2778      	movs	r7, #120	; 0x78
 800af12:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800af16:	6823      	ldr	r3, [r4, #0]
 800af18:	6829      	ldr	r1, [r5, #0]
 800af1a:	061f      	lsls	r7, r3, #24
 800af1c:	f851 6b04 	ldr.w	r6, [r1], #4
 800af20:	d402      	bmi.n	800af28 <_printf_i+0x18c>
 800af22:	065f      	lsls	r7, r3, #25
 800af24:	bf48      	it	mi
 800af26:	b2b6      	uxthmi	r6, r6
 800af28:	07df      	lsls	r7, r3, #31
 800af2a:	bf48      	it	mi
 800af2c:	f043 0320 	orrmi.w	r3, r3, #32
 800af30:	6029      	str	r1, [r5, #0]
 800af32:	bf48      	it	mi
 800af34:	6023      	strmi	r3, [r4, #0]
 800af36:	b91e      	cbnz	r6, 800af40 <_printf_i+0x1a4>
 800af38:	6823      	ldr	r3, [r4, #0]
 800af3a:	f023 0320 	bic.w	r3, r3, #32
 800af3e:	6023      	str	r3, [r4, #0]
 800af40:	2310      	movs	r3, #16
 800af42:	e7a7      	b.n	800ae94 <_printf_i+0xf8>
 800af44:	4824      	ldr	r0, [pc, #144]	; (800afd8 <_printf_i+0x23c>)
 800af46:	e7e4      	b.n	800af12 <_printf_i+0x176>
 800af48:	4615      	mov	r5, r2
 800af4a:	e7bd      	b.n	800aec8 <_printf_i+0x12c>
 800af4c:	682b      	ldr	r3, [r5, #0]
 800af4e:	6826      	ldr	r6, [r4, #0]
 800af50:	6961      	ldr	r1, [r4, #20]
 800af52:	1d18      	adds	r0, r3, #4
 800af54:	6028      	str	r0, [r5, #0]
 800af56:	0635      	lsls	r5, r6, #24
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	d501      	bpl.n	800af60 <_printf_i+0x1c4>
 800af5c:	6019      	str	r1, [r3, #0]
 800af5e:	e002      	b.n	800af66 <_printf_i+0x1ca>
 800af60:	0670      	lsls	r0, r6, #25
 800af62:	d5fb      	bpl.n	800af5c <_printf_i+0x1c0>
 800af64:	8019      	strh	r1, [r3, #0]
 800af66:	2300      	movs	r3, #0
 800af68:	6123      	str	r3, [r4, #16]
 800af6a:	4615      	mov	r5, r2
 800af6c:	e7bc      	b.n	800aee8 <_printf_i+0x14c>
 800af6e:	682b      	ldr	r3, [r5, #0]
 800af70:	1d1a      	adds	r2, r3, #4
 800af72:	602a      	str	r2, [r5, #0]
 800af74:	681d      	ldr	r5, [r3, #0]
 800af76:	6862      	ldr	r2, [r4, #4]
 800af78:	2100      	movs	r1, #0
 800af7a:	4628      	mov	r0, r5
 800af7c:	f7f5 f940 	bl	8000200 <memchr>
 800af80:	b108      	cbz	r0, 800af86 <_printf_i+0x1ea>
 800af82:	1b40      	subs	r0, r0, r5
 800af84:	6060      	str	r0, [r4, #4]
 800af86:	6863      	ldr	r3, [r4, #4]
 800af88:	6123      	str	r3, [r4, #16]
 800af8a:	2300      	movs	r3, #0
 800af8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af90:	e7aa      	b.n	800aee8 <_printf_i+0x14c>
 800af92:	6923      	ldr	r3, [r4, #16]
 800af94:	462a      	mov	r2, r5
 800af96:	4649      	mov	r1, r9
 800af98:	4640      	mov	r0, r8
 800af9a:	47d0      	blx	sl
 800af9c:	3001      	adds	r0, #1
 800af9e:	d0ad      	beq.n	800aefc <_printf_i+0x160>
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	079b      	lsls	r3, r3, #30
 800afa4:	d413      	bmi.n	800afce <_printf_i+0x232>
 800afa6:	68e0      	ldr	r0, [r4, #12]
 800afa8:	9b03      	ldr	r3, [sp, #12]
 800afaa:	4298      	cmp	r0, r3
 800afac:	bfb8      	it	lt
 800afae:	4618      	movlt	r0, r3
 800afb0:	e7a6      	b.n	800af00 <_printf_i+0x164>
 800afb2:	2301      	movs	r3, #1
 800afb4:	4632      	mov	r2, r6
 800afb6:	4649      	mov	r1, r9
 800afb8:	4640      	mov	r0, r8
 800afba:	47d0      	blx	sl
 800afbc:	3001      	adds	r0, #1
 800afbe:	d09d      	beq.n	800aefc <_printf_i+0x160>
 800afc0:	3501      	adds	r5, #1
 800afc2:	68e3      	ldr	r3, [r4, #12]
 800afc4:	9903      	ldr	r1, [sp, #12]
 800afc6:	1a5b      	subs	r3, r3, r1
 800afc8:	42ab      	cmp	r3, r5
 800afca:	dcf2      	bgt.n	800afb2 <_printf_i+0x216>
 800afcc:	e7eb      	b.n	800afa6 <_printf_i+0x20a>
 800afce:	2500      	movs	r5, #0
 800afd0:	f104 0619 	add.w	r6, r4, #25
 800afd4:	e7f5      	b.n	800afc2 <_printf_i+0x226>
 800afd6:	bf00      	nop
 800afd8:	0800ba83 	.word	0x0800ba83
 800afdc:	0800ba94 	.word	0x0800ba94

0800afe0 <__sflush_r>:
 800afe0:	898a      	ldrh	r2, [r1, #12]
 800afe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afe6:	4605      	mov	r5, r0
 800afe8:	0710      	lsls	r0, r2, #28
 800afea:	460c      	mov	r4, r1
 800afec:	d458      	bmi.n	800b0a0 <__sflush_r+0xc0>
 800afee:	684b      	ldr	r3, [r1, #4]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	dc05      	bgt.n	800b000 <__sflush_r+0x20>
 800aff4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	dc02      	bgt.n	800b000 <__sflush_r+0x20>
 800affa:	2000      	movs	r0, #0
 800affc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b000:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b002:	2e00      	cmp	r6, #0
 800b004:	d0f9      	beq.n	800affa <__sflush_r+0x1a>
 800b006:	2300      	movs	r3, #0
 800b008:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b00c:	682f      	ldr	r7, [r5, #0]
 800b00e:	6a21      	ldr	r1, [r4, #32]
 800b010:	602b      	str	r3, [r5, #0]
 800b012:	d032      	beq.n	800b07a <__sflush_r+0x9a>
 800b014:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b016:	89a3      	ldrh	r3, [r4, #12]
 800b018:	075a      	lsls	r2, r3, #29
 800b01a:	d505      	bpl.n	800b028 <__sflush_r+0x48>
 800b01c:	6863      	ldr	r3, [r4, #4]
 800b01e:	1ac0      	subs	r0, r0, r3
 800b020:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b022:	b10b      	cbz	r3, 800b028 <__sflush_r+0x48>
 800b024:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b026:	1ac0      	subs	r0, r0, r3
 800b028:	2300      	movs	r3, #0
 800b02a:	4602      	mov	r2, r0
 800b02c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b02e:	6a21      	ldr	r1, [r4, #32]
 800b030:	4628      	mov	r0, r5
 800b032:	47b0      	blx	r6
 800b034:	1c43      	adds	r3, r0, #1
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	d106      	bne.n	800b048 <__sflush_r+0x68>
 800b03a:	6829      	ldr	r1, [r5, #0]
 800b03c:	291d      	cmp	r1, #29
 800b03e:	d82b      	bhi.n	800b098 <__sflush_r+0xb8>
 800b040:	4a29      	ldr	r2, [pc, #164]	; (800b0e8 <__sflush_r+0x108>)
 800b042:	410a      	asrs	r2, r1
 800b044:	07d6      	lsls	r6, r2, #31
 800b046:	d427      	bmi.n	800b098 <__sflush_r+0xb8>
 800b048:	2200      	movs	r2, #0
 800b04a:	6062      	str	r2, [r4, #4]
 800b04c:	04d9      	lsls	r1, r3, #19
 800b04e:	6922      	ldr	r2, [r4, #16]
 800b050:	6022      	str	r2, [r4, #0]
 800b052:	d504      	bpl.n	800b05e <__sflush_r+0x7e>
 800b054:	1c42      	adds	r2, r0, #1
 800b056:	d101      	bne.n	800b05c <__sflush_r+0x7c>
 800b058:	682b      	ldr	r3, [r5, #0]
 800b05a:	b903      	cbnz	r3, 800b05e <__sflush_r+0x7e>
 800b05c:	6560      	str	r0, [r4, #84]	; 0x54
 800b05e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b060:	602f      	str	r7, [r5, #0]
 800b062:	2900      	cmp	r1, #0
 800b064:	d0c9      	beq.n	800affa <__sflush_r+0x1a>
 800b066:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b06a:	4299      	cmp	r1, r3
 800b06c:	d002      	beq.n	800b074 <__sflush_r+0x94>
 800b06e:	4628      	mov	r0, r5
 800b070:	f7ff fbce 	bl	800a810 <_free_r>
 800b074:	2000      	movs	r0, #0
 800b076:	6360      	str	r0, [r4, #52]	; 0x34
 800b078:	e7c0      	b.n	800affc <__sflush_r+0x1c>
 800b07a:	2301      	movs	r3, #1
 800b07c:	4628      	mov	r0, r5
 800b07e:	47b0      	blx	r6
 800b080:	1c41      	adds	r1, r0, #1
 800b082:	d1c8      	bne.n	800b016 <__sflush_r+0x36>
 800b084:	682b      	ldr	r3, [r5, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0c5      	beq.n	800b016 <__sflush_r+0x36>
 800b08a:	2b1d      	cmp	r3, #29
 800b08c:	d001      	beq.n	800b092 <__sflush_r+0xb2>
 800b08e:	2b16      	cmp	r3, #22
 800b090:	d101      	bne.n	800b096 <__sflush_r+0xb6>
 800b092:	602f      	str	r7, [r5, #0]
 800b094:	e7b1      	b.n	800affa <__sflush_r+0x1a>
 800b096:	89a3      	ldrh	r3, [r4, #12]
 800b098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b09c:	81a3      	strh	r3, [r4, #12]
 800b09e:	e7ad      	b.n	800affc <__sflush_r+0x1c>
 800b0a0:	690f      	ldr	r7, [r1, #16]
 800b0a2:	2f00      	cmp	r7, #0
 800b0a4:	d0a9      	beq.n	800affa <__sflush_r+0x1a>
 800b0a6:	0793      	lsls	r3, r2, #30
 800b0a8:	680e      	ldr	r6, [r1, #0]
 800b0aa:	bf08      	it	eq
 800b0ac:	694b      	ldreq	r3, [r1, #20]
 800b0ae:	600f      	str	r7, [r1, #0]
 800b0b0:	bf18      	it	ne
 800b0b2:	2300      	movne	r3, #0
 800b0b4:	eba6 0807 	sub.w	r8, r6, r7
 800b0b8:	608b      	str	r3, [r1, #8]
 800b0ba:	f1b8 0f00 	cmp.w	r8, #0
 800b0be:	dd9c      	ble.n	800affa <__sflush_r+0x1a>
 800b0c0:	6a21      	ldr	r1, [r4, #32]
 800b0c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0c4:	4643      	mov	r3, r8
 800b0c6:	463a      	mov	r2, r7
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	47b0      	blx	r6
 800b0cc:	2800      	cmp	r0, #0
 800b0ce:	dc06      	bgt.n	800b0de <__sflush_r+0xfe>
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0d6:	81a3      	strh	r3, [r4, #12]
 800b0d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0dc:	e78e      	b.n	800affc <__sflush_r+0x1c>
 800b0de:	4407      	add	r7, r0
 800b0e0:	eba8 0800 	sub.w	r8, r8, r0
 800b0e4:	e7e9      	b.n	800b0ba <__sflush_r+0xda>
 800b0e6:	bf00      	nop
 800b0e8:	dfbffffe 	.word	0xdfbffffe

0800b0ec <_fflush_r>:
 800b0ec:	b538      	push	{r3, r4, r5, lr}
 800b0ee:	690b      	ldr	r3, [r1, #16]
 800b0f0:	4605      	mov	r5, r0
 800b0f2:	460c      	mov	r4, r1
 800b0f4:	b913      	cbnz	r3, 800b0fc <_fflush_r+0x10>
 800b0f6:	2500      	movs	r5, #0
 800b0f8:	4628      	mov	r0, r5
 800b0fa:	bd38      	pop	{r3, r4, r5, pc}
 800b0fc:	b118      	cbz	r0, 800b106 <_fflush_r+0x1a>
 800b0fe:	6a03      	ldr	r3, [r0, #32]
 800b100:	b90b      	cbnz	r3, 800b106 <_fflush_r+0x1a>
 800b102:	f7ff f9e7 	bl	800a4d4 <__sinit>
 800b106:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d0f3      	beq.n	800b0f6 <_fflush_r+0xa>
 800b10e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b110:	07d0      	lsls	r0, r2, #31
 800b112:	d404      	bmi.n	800b11e <_fflush_r+0x32>
 800b114:	0599      	lsls	r1, r3, #22
 800b116:	d402      	bmi.n	800b11e <_fflush_r+0x32>
 800b118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b11a:	f7ff fb4a 	bl	800a7b2 <__retarget_lock_acquire_recursive>
 800b11e:	4628      	mov	r0, r5
 800b120:	4621      	mov	r1, r4
 800b122:	f7ff ff5d 	bl	800afe0 <__sflush_r>
 800b126:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b128:	07da      	lsls	r2, r3, #31
 800b12a:	4605      	mov	r5, r0
 800b12c:	d4e4      	bmi.n	800b0f8 <_fflush_r+0xc>
 800b12e:	89a3      	ldrh	r3, [r4, #12]
 800b130:	059b      	lsls	r3, r3, #22
 800b132:	d4e1      	bmi.n	800b0f8 <_fflush_r+0xc>
 800b134:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b136:	f7ff fb3d 	bl	800a7b4 <__retarget_lock_release_recursive>
 800b13a:	e7dd      	b.n	800b0f8 <_fflush_r+0xc>

0800b13c <fiprintf>:
 800b13c:	b40e      	push	{r1, r2, r3}
 800b13e:	b503      	push	{r0, r1, lr}
 800b140:	4601      	mov	r1, r0
 800b142:	ab03      	add	r3, sp, #12
 800b144:	4805      	ldr	r0, [pc, #20]	; (800b15c <fiprintf+0x20>)
 800b146:	f853 2b04 	ldr.w	r2, [r3], #4
 800b14a:	6800      	ldr	r0, [r0, #0]
 800b14c:	9301      	str	r3, [sp, #4]
 800b14e:	f000 f891 	bl	800b274 <_vfiprintf_r>
 800b152:	b002      	add	sp, #8
 800b154:	f85d eb04 	ldr.w	lr, [sp], #4
 800b158:	b003      	add	sp, #12
 800b15a:	4770      	bx	lr
 800b15c:	20000068 	.word	0x20000068

0800b160 <memmove>:
 800b160:	4288      	cmp	r0, r1
 800b162:	b510      	push	{r4, lr}
 800b164:	eb01 0402 	add.w	r4, r1, r2
 800b168:	d902      	bls.n	800b170 <memmove+0x10>
 800b16a:	4284      	cmp	r4, r0
 800b16c:	4623      	mov	r3, r4
 800b16e:	d807      	bhi.n	800b180 <memmove+0x20>
 800b170:	1e43      	subs	r3, r0, #1
 800b172:	42a1      	cmp	r1, r4
 800b174:	d008      	beq.n	800b188 <memmove+0x28>
 800b176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b17a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b17e:	e7f8      	b.n	800b172 <memmove+0x12>
 800b180:	4402      	add	r2, r0
 800b182:	4601      	mov	r1, r0
 800b184:	428a      	cmp	r2, r1
 800b186:	d100      	bne.n	800b18a <memmove+0x2a>
 800b188:	bd10      	pop	{r4, pc}
 800b18a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b18e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b192:	e7f7      	b.n	800b184 <memmove+0x24>

0800b194 <_sbrk_r>:
 800b194:	b538      	push	{r3, r4, r5, lr}
 800b196:	4d06      	ldr	r5, [pc, #24]	; (800b1b0 <_sbrk_r+0x1c>)
 800b198:	2300      	movs	r3, #0
 800b19a:	4604      	mov	r4, r0
 800b19c:	4608      	mov	r0, r1
 800b19e:	602b      	str	r3, [r5, #0]
 800b1a0:	f7f6 fdc6 	bl	8001d30 <_sbrk>
 800b1a4:	1c43      	adds	r3, r0, #1
 800b1a6:	d102      	bne.n	800b1ae <_sbrk_r+0x1a>
 800b1a8:	682b      	ldr	r3, [r5, #0]
 800b1aa:	b103      	cbz	r3, 800b1ae <_sbrk_r+0x1a>
 800b1ac:	6023      	str	r3, [r4, #0]
 800b1ae:	bd38      	pop	{r3, r4, r5, pc}
 800b1b0:	20001c74 	.word	0x20001c74

0800b1b4 <abort>:
 800b1b4:	b508      	push	{r3, lr}
 800b1b6:	2006      	movs	r0, #6
 800b1b8:	f000 fa34 	bl	800b624 <raise>
 800b1bc:	2001      	movs	r0, #1
 800b1be:	f7f6 fd40 	bl	8001c42 <_exit>

0800b1c2 <_realloc_r>:
 800b1c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c6:	4680      	mov	r8, r0
 800b1c8:	4614      	mov	r4, r2
 800b1ca:	460e      	mov	r6, r1
 800b1cc:	b921      	cbnz	r1, 800b1d8 <_realloc_r+0x16>
 800b1ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	f7ff bb90 	b.w	800a8f8 <_malloc_r>
 800b1d8:	b92a      	cbnz	r2, 800b1e6 <_realloc_r+0x24>
 800b1da:	f7ff fb19 	bl	800a810 <_free_r>
 800b1de:	4625      	mov	r5, r4
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1e6:	f000 fa39 	bl	800b65c <_malloc_usable_size_r>
 800b1ea:	4284      	cmp	r4, r0
 800b1ec:	4607      	mov	r7, r0
 800b1ee:	d802      	bhi.n	800b1f6 <_realloc_r+0x34>
 800b1f0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1f4:	d812      	bhi.n	800b21c <_realloc_r+0x5a>
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	4640      	mov	r0, r8
 800b1fa:	f7ff fb7d 	bl	800a8f8 <_malloc_r>
 800b1fe:	4605      	mov	r5, r0
 800b200:	2800      	cmp	r0, #0
 800b202:	d0ed      	beq.n	800b1e0 <_realloc_r+0x1e>
 800b204:	42bc      	cmp	r4, r7
 800b206:	4622      	mov	r2, r4
 800b208:	4631      	mov	r1, r6
 800b20a:	bf28      	it	cs
 800b20c:	463a      	movcs	r2, r7
 800b20e:	f7ff fad2 	bl	800a7b6 <memcpy>
 800b212:	4631      	mov	r1, r6
 800b214:	4640      	mov	r0, r8
 800b216:	f7ff fafb 	bl	800a810 <_free_r>
 800b21a:	e7e1      	b.n	800b1e0 <_realloc_r+0x1e>
 800b21c:	4635      	mov	r5, r6
 800b21e:	e7df      	b.n	800b1e0 <_realloc_r+0x1e>

0800b220 <__sfputc_r>:
 800b220:	6893      	ldr	r3, [r2, #8]
 800b222:	3b01      	subs	r3, #1
 800b224:	2b00      	cmp	r3, #0
 800b226:	b410      	push	{r4}
 800b228:	6093      	str	r3, [r2, #8]
 800b22a:	da08      	bge.n	800b23e <__sfputc_r+0x1e>
 800b22c:	6994      	ldr	r4, [r2, #24]
 800b22e:	42a3      	cmp	r3, r4
 800b230:	db01      	blt.n	800b236 <__sfputc_r+0x16>
 800b232:	290a      	cmp	r1, #10
 800b234:	d103      	bne.n	800b23e <__sfputc_r+0x1e>
 800b236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b23a:	f000 b935 	b.w	800b4a8 <__swbuf_r>
 800b23e:	6813      	ldr	r3, [r2, #0]
 800b240:	1c58      	adds	r0, r3, #1
 800b242:	6010      	str	r0, [r2, #0]
 800b244:	7019      	strb	r1, [r3, #0]
 800b246:	4608      	mov	r0, r1
 800b248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b24c:	4770      	bx	lr

0800b24e <__sfputs_r>:
 800b24e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b250:	4606      	mov	r6, r0
 800b252:	460f      	mov	r7, r1
 800b254:	4614      	mov	r4, r2
 800b256:	18d5      	adds	r5, r2, r3
 800b258:	42ac      	cmp	r4, r5
 800b25a:	d101      	bne.n	800b260 <__sfputs_r+0x12>
 800b25c:	2000      	movs	r0, #0
 800b25e:	e007      	b.n	800b270 <__sfputs_r+0x22>
 800b260:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b264:	463a      	mov	r2, r7
 800b266:	4630      	mov	r0, r6
 800b268:	f7ff ffda 	bl	800b220 <__sfputc_r>
 800b26c:	1c43      	adds	r3, r0, #1
 800b26e:	d1f3      	bne.n	800b258 <__sfputs_r+0xa>
 800b270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b274 <_vfiprintf_r>:
 800b274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b278:	460d      	mov	r5, r1
 800b27a:	b09d      	sub	sp, #116	; 0x74
 800b27c:	4614      	mov	r4, r2
 800b27e:	4698      	mov	r8, r3
 800b280:	4606      	mov	r6, r0
 800b282:	b118      	cbz	r0, 800b28c <_vfiprintf_r+0x18>
 800b284:	6a03      	ldr	r3, [r0, #32]
 800b286:	b90b      	cbnz	r3, 800b28c <_vfiprintf_r+0x18>
 800b288:	f7ff f924 	bl	800a4d4 <__sinit>
 800b28c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b28e:	07d9      	lsls	r1, r3, #31
 800b290:	d405      	bmi.n	800b29e <_vfiprintf_r+0x2a>
 800b292:	89ab      	ldrh	r3, [r5, #12]
 800b294:	059a      	lsls	r2, r3, #22
 800b296:	d402      	bmi.n	800b29e <_vfiprintf_r+0x2a>
 800b298:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b29a:	f7ff fa8a 	bl	800a7b2 <__retarget_lock_acquire_recursive>
 800b29e:	89ab      	ldrh	r3, [r5, #12]
 800b2a0:	071b      	lsls	r3, r3, #28
 800b2a2:	d501      	bpl.n	800b2a8 <_vfiprintf_r+0x34>
 800b2a4:	692b      	ldr	r3, [r5, #16]
 800b2a6:	b99b      	cbnz	r3, 800b2d0 <_vfiprintf_r+0x5c>
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f000 f93a 	bl	800b524 <__swsetup_r>
 800b2b0:	b170      	cbz	r0, 800b2d0 <_vfiprintf_r+0x5c>
 800b2b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2b4:	07dc      	lsls	r4, r3, #31
 800b2b6:	d504      	bpl.n	800b2c2 <_vfiprintf_r+0x4e>
 800b2b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2bc:	b01d      	add	sp, #116	; 0x74
 800b2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c2:	89ab      	ldrh	r3, [r5, #12]
 800b2c4:	0598      	lsls	r0, r3, #22
 800b2c6:	d4f7      	bmi.n	800b2b8 <_vfiprintf_r+0x44>
 800b2c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2ca:	f7ff fa73 	bl	800a7b4 <__retarget_lock_release_recursive>
 800b2ce:	e7f3      	b.n	800b2b8 <_vfiprintf_r+0x44>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b2d4:	2320      	movs	r3, #32
 800b2d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2da:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2de:	2330      	movs	r3, #48	; 0x30
 800b2e0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b494 <_vfiprintf_r+0x220>
 800b2e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2e8:	f04f 0901 	mov.w	r9, #1
 800b2ec:	4623      	mov	r3, r4
 800b2ee:	469a      	mov	sl, r3
 800b2f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2f4:	b10a      	cbz	r2, 800b2fa <_vfiprintf_r+0x86>
 800b2f6:	2a25      	cmp	r2, #37	; 0x25
 800b2f8:	d1f9      	bne.n	800b2ee <_vfiprintf_r+0x7a>
 800b2fa:	ebba 0b04 	subs.w	fp, sl, r4
 800b2fe:	d00b      	beq.n	800b318 <_vfiprintf_r+0xa4>
 800b300:	465b      	mov	r3, fp
 800b302:	4622      	mov	r2, r4
 800b304:	4629      	mov	r1, r5
 800b306:	4630      	mov	r0, r6
 800b308:	f7ff ffa1 	bl	800b24e <__sfputs_r>
 800b30c:	3001      	adds	r0, #1
 800b30e:	f000 80a9 	beq.w	800b464 <_vfiprintf_r+0x1f0>
 800b312:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b314:	445a      	add	r2, fp
 800b316:	9209      	str	r2, [sp, #36]	; 0x24
 800b318:	f89a 3000 	ldrb.w	r3, [sl]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f000 80a1 	beq.w	800b464 <_vfiprintf_r+0x1f0>
 800b322:	2300      	movs	r3, #0
 800b324:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b32c:	f10a 0a01 	add.w	sl, sl, #1
 800b330:	9304      	str	r3, [sp, #16]
 800b332:	9307      	str	r3, [sp, #28]
 800b334:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b338:	931a      	str	r3, [sp, #104]	; 0x68
 800b33a:	4654      	mov	r4, sl
 800b33c:	2205      	movs	r2, #5
 800b33e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b342:	4854      	ldr	r0, [pc, #336]	; (800b494 <_vfiprintf_r+0x220>)
 800b344:	f7f4 ff5c 	bl	8000200 <memchr>
 800b348:	9a04      	ldr	r2, [sp, #16]
 800b34a:	b9d8      	cbnz	r0, 800b384 <_vfiprintf_r+0x110>
 800b34c:	06d1      	lsls	r1, r2, #27
 800b34e:	bf44      	itt	mi
 800b350:	2320      	movmi	r3, #32
 800b352:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b356:	0713      	lsls	r3, r2, #28
 800b358:	bf44      	itt	mi
 800b35a:	232b      	movmi	r3, #43	; 0x2b
 800b35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b360:	f89a 3000 	ldrb.w	r3, [sl]
 800b364:	2b2a      	cmp	r3, #42	; 0x2a
 800b366:	d015      	beq.n	800b394 <_vfiprintf_r+0x120>
 800b368:	9a07      	ldr	r2, [sp, #28]
 800b36a:	4654      	mov	r4, sl
 800b36c:	2000      	movs	r0, #0
 800b36e:	f04f 0c0a 	mov.w	ip, #10
 800b372:	4621      	mov	r1, r4
 800b374:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b378:	3b30      	subs	r3, #48	; 0x30
 800b37a:	2b09      	cmp	r3, #9
 800b37c:	d94d      	bls.n	800b41a <_vfiprintf_r+0x1a6>
 800b37e:	b1b0      	cbz	r0, 800b3ae <_vfiprintf_r+0x13a>
 800b380:	9207      	str	r2, [sp, #28]
 800b382:	e014      	b.n	800b3ae <_vfiprintf_r+0x13a>
 800b384:	eba0 0308 	sub.w	r3, r0, r8
 800b388:	fa09 f303 	lsl.w	r3, r9, r3
 800b38c:	4313      	orrs	r3, r2
 800b38e:	9304      	str	r3, [sp, #16]
 800b390:	46a2      	mov	sl, r4
 800b392:	e7d2      	b.n	800b33a <_vfiprintf_r+0xc6>
 800b394:	9b03      	ldr	r3, [sp, #12]
 800b396:	1d19      	adds	r1, r3, #4
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	9103      	str	r1, [sp, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	bfbb      	ittet	lt
 800b3a0:	425b      	neglt	r3, r3
 800b3a2:	f042 0202 	orrlt.w	r2, r2, #2
 800b3a6:	9307      	strge	r3, [sp, #28]
 800b3a8:	9307      	strlt	r3, [sp, #28]
 800b3aa:	bfb8      	it	lt
 800b3ac:	9204      	strlt	r2, [sp, #16]
 800b3ae:	7823      	ldrb	r3, [r4, #0]
 800b3b0:	2b2e      	cmp	r3, #46	; 0x2e
 800b3b2:	d10c      	bne.n	800b3ce <_vfiprintf_r+0x15a>
 800b3b4:	7863      	ldrb	r3, [r4, #1]
 800b3b6:	2b2a      	cmp	r3, #42	; 0x2a
 800b3b8:	d134      	bne.n	800b424 <_vfiprintf_r+0x1b0>
 800b3ba:	9b03      	ldr	r3, [sp, #12]
 800b3bc:	1d1a      	adds	r2, r3, #4
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	9203      	str	r2, [sp, #12]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	bfb8      	it	lt
 800b3c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b3ca:	3402      	adds	r4, #2
 800b3cc:	9305      	str	r3, [sp, #20]
 800b3ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b4a4 <_vfiprintf_r+0x230>
 800b3d2:	7821      	ldrb	r1, [r4, #0]
 800b3d4:	2203      	movs	r2, #3
 800b3d6:	4650      	mov	r0, sl
 800b3d8:	f7f4 ff12 	bl	8000200 <memchr>
 800b3dc:	b138      	cbz	r0, 800b3ee <_vfiprintf_r+0x17a>
 800b3de:	9b04      	ldr	r3, [sp, #16]
 800b3e0:	eba0 000a 	sub.w	r0, r0, sl
 800b3e4:	2240      	movs	r2, #64	; 0x40
 800b3e6:	4082      	lsls	r2, r0
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	3401      	adds	r4, #1
 800b3ec:	9304      	str	r3, [sp, #16]
 800b3ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3f2:	4829      	ldr	r0, [pc, #164]	; (800b498 <_vfiprintf_r+0x224>)
 800b3f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3f8:	2206      	movs	r2, #6
 800b3fa:	f7f4 ff01 	bl	8000200 <memchr>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d03f      	beq.n	800b482 <_vfiprintf_r+0x20e>
 800b402:	4b26      	ldr	r3, [pc, #152]	; (800b49c <_vfiprintf_r+0x228>)
 800b404:	bb1b      	cbnz	r3, 800b44e <_vfiprintf_r+0x1da>
 800b406:	9b03      	ldr	r3, [sp, #12]
 800b408:	3307      	adds	r3, #7
 800b40a:	f023 0307 	bic.w	r3, r3, #7
 800b40e:	3308      	adds	r3, #8
 800b410:	9303      	str	r3, [sp, #12]
 800b412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b414:	443b      	add	r3, r7
 800b416:	9309      	str	r3, [sp, #36]	; 0x24
 800b418:	e768      	b.n	800b2ec <_vfiprintf_r+0x78>
 800b41a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b41e:	460c      	mov	r4, r1
 800b420:	2001      	movs	r0, #1
 800b422:	e7a6      	b.n	800b372 <_vfiprintf_r+0xfe>
 800b424:	2300      	movs	r3, #0
 800b426:	3401      	adds	r4, #1
 800b428:	9305      	str	r3, [sp, #20]
 800b42a:	4619      	mov	r1, r3
 800b42c:	f04f 0c0a 	mov.w	ip, #10
 800b430:	4620      	mov	r0, r4
 800b432:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b436:	3a30      	subs	r2, #48	; 0x30
 800b438:	2a09      	cmp	r2, #9
 800b43a:	d903      	bls.n	800b444 <_vfiprintf_r+0x1d0>
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d0c6      	beq.n	800b3ce <_vfiprintf_r+0x15a>
 800b440:	9105      	str	r1, [sp, #20]
 800b442:	e7c4      	b.n	800b3ce <_vfiprintf_r+0x15a>
 800b444:	fb0c 2101 	mla	r1, ip, r1, r2
 800b448:	4604      	mov	r4, r0
 800b44a:	2301      	movs	r3, #1
 800b44c:	e7f0      	b.n	800b430 <_vfiprintf_r+0x1bc>
 800b44e:	ab03      	add	r3, sp, #12
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	462a      	mov	r2, r5
 800b454:	4b12      	ldr	r3, [pc, #72]	; (800b4a0 <_vfiprintf_r+0x22c>)
 800b456:	a904      	add	r1, sp, #16
 800b458:	4630      	mov	r0, r6
 800b45a:	f3af 8000 	nop.w
 800b45e:	4607      	mov	r7, r0
 800b460:	1c78      	adds	r0, r7, #1
 800b462:	d1d6      	bne.n	800b412 <_vfiprintf_r+0x19e>
 800b464:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b466:	07d9      	lsls	r1, r3, #31
 800b468:	d405      	bmi.n	800b476 <_vfiprintf_r+0x202>
 800b46a:	89ab      	ldrh	r3, [r5, #12]
 800b46c:	059a      	lsls	r2, r3, #22
 800b46e:	d402      	bmi.n	800b476 <_vfiprintf_r+0x202>
 800b470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b472:	f7ff f99f 	bl	800a7b4 <__retarget_lock_release_recursive>
 800b476:	89ab      	ldrh	r3, [r5, #12]
 800b478:	065b      	lsls	r3, r3, #25
 800b47a:	f53f af1d 	bmi.w	800b2b8 <_vfiprintf_r+0x44>
 800b47e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b480:	e71c      	b.n	800b2bc <_vfiprintf_r+0x48>
 800b482:	ab03      	add	r3, sp, #12
 800b484:	9300      	str	r3, [sp, #0]
 800b486:	462a      	mov	r2, r5
 800b488:	4b05      	ldr	r3, [pc, #20]	; (800b4a0 <_vfiprintf_r+0x22c>)
 800b48a:	a904      	add	r1, sp, #16
 800b48c:	4630      	mov	r0, r6
 800b48e:	f7ff fc85 	bl	800ad9c <_printf_i>
 800b492:	e7e4      	b.n	800b45e <_vfiprintf_r+0x1ea>
 800b494:	0800ba72 	.word	0x0800ba72
 800b498:	0800ba7c 	.word	0x0800ba7c
 800b49c:	00000000 	.word	0x00000000
 800b4a0:	0800b24f 	.word	0x0800b24f
 800b4a4:	0800ba78 	.word	0x0800ba78

0800b4a8 <__swbuf_r>:
 800b4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4aa:	460e      	mov	r6, r1
 800b4ac:	4614      	mov	r4, r2
 800b4ae:	4605      	mov	r5, r0
 800b4b0:	b118      	cbz	r0, 800b4ba <__swbuf_r+0x12>
 800b4b2:	6a03      	ldr	r3, [r0, #32]
 800b4b4:	b90b      	cbnz	r3, 800b4ba <__swbuf_r+0x12>
 800b4b6:	f7ff f80d 	bl	800a4d4 <__sinit>
 800b4ba:	69a3      	ldr	r3, [r4, #24]
 800b4bc:	60a3      	str	r3, [r4, #8]
 800b4be:	89a3      	ldrh	r3, [r4, #12]
 800b4c0:	071a      	lsls	r2, r3, #28
 800b4c2:	d525      	bpl.n	800b510 <__swbuf_r+0x68>
 800b4c4:	6923      	ldr	r3, [r4, #16]
 800b4c6:	b31b      	cbz	r3, 800b510 <__swbuf_r+0x68>
 800b4c8:	6823      	ldr	r3, [r4, #0]
 800b4ca:	6922      	ldr	r2, [r4, #16]
 800b4cc:	1a98      	subs	r0, r3, r2
 800b4ce:	6963      	ldr	r3, [r4, #20]
 800b4d0:	b2f6      	uxtb	r6, r6
 800b4d2:	4283      	cmp	r3, r0
 800b4d4:	4637      	mov	r7, r6
 800b4d6:	dc04      	bgt.n	800b4e2 <__swbuf_r+0x3a>
 800b4d8:	4621      	mov	r1, r4
 800b4da:	4628      	mov	r0, r5
 800b4dc:	f7ff fe06 	bl	800b0ec <_fflush_r>
 800b4e0:	b9e0      	cbnz	r0, 800b51c <__swbuf_r+0x74>
 800b4e2:	68a3      	ldr	r3, [r4, #8]
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	60a3      	str	r3, [r4, #8]
 800b4e8:	6823      	ldr	r3, [r4, #0]
 800b4ea:	1c5a      	adds	r2, r3, #1
 800b4ec:	6022      	str	r2, [r4, #0]
 800b4ee:	701e      	strb	r6, [r3, #0]
 800b4f0:	6962      	ldr	r2, [r4, #20]
 800b4f2:	1c43      	adds	r3, r0, #1
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d004      	beq.n	800b502 <__swbuf_r+0x5a>
 800b4f8:	89a3      	ldrh	r3, [r4, #12]
 800b4fa:	07db      	lsls	r3, r3, #31
 800b4fc:	d506      	bpl.n	800b50c <__swbuf_r+0x64>
 800b4fe:	2e0a      	cmp	r6, #10
 800b500:	d104      	bne.n	800b50c <__swbuf_r+0x64>
 800b502:	4621      	mov	r1, r4
 800b504:	4628      	mov	r0, r5
 800b506:	f7ff fdf1 	bl	800b0ec <_fflush_r>
 800b50a:	b938      	cbnz	r0, 800b51c <__swbuf_r+0x74>
 800b50c:	4638      	mov	r0, r7
 800b50e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b510:	4621      	mov	r1, r4
 800b512:	4628      	mov	r0, r5
 800b514:	f000 f806 	bl	800b524 <__swsetup_r>
 800b518:	2800      	cmp	r0, #0
 800b51a:	d0d5      	beq.n	800b4c8 <__swbuf_r+0x20>
 800b51c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b520:	e7f4      	b.n	800b50c <__swbuf_r+0x64>
	...

0800b524 <__swsetup_r>:
 800b524:	b538      	push	{r3, r4, r5, lr}
 800b526:	4b2a      	ldr	r3, [pc, #168]	; (800b5d0 <__swsetup_r+0xac>)
 800b528:	4605      	mov	r5, r0
 800b52a:	6818      	ldr	r0, [r3, #0]
 800b52c:	460c      	mov	r4, r1
 800b52e:	b118      	cbz	r0, 800b538 <__swsetup_r+0x14>
 800b530:	6a03      	ldr	r3, [r0, #32]
 800b532:	b90b      	cbnz	r3, 800b538 <__swsetup_r+0x14>
 800b534:	f7fe ffce 	bl	800a4d4 <__sinit>
 800b538:	89a3      	ldrh	r3, [r4, #12]
 800b53a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b53e:	0718      	lsls	r0, r3, #28
 800b540:	d422      	bmi.n	800b588 <__swsetup_r+0x64>
 800b542:	06d9      	lsls	r1, r3, #27
 800b544:	d407      	bmi.n	800b556 <__swsetup_r+0x32>
 800b546:	2309      	movs	r3, #9
 800b548:	602b      	str	r3, [r5, #0]
 800b54a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b54e:	81a3      	strh	r3, [r4, #12]
 800b550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b554:	e034      	b.n	800b5c0 <__swsetup_r+0x9c>
 800b556:	0758      	lsls	r0, r3, #29
 800b558:	d512      	bpl.n	800b580 <__swsetup_r+0x5c>
 800b55a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b55c:	b141      	cbz	r1, 800b570 <__swsetup_r+0x4c>
 800b55e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b562:	4299      	cmp	r1, r3
 800b564:	d002      	beq.n	800b56c <__swsetup_r+0x48>
 800b566:	4628      	mov	r0, r5
 800b568:	f7ff f952 	bl	800a810 <_free_r>
 800b56c:	2300      	movs	r3, #0
 800b56e:	6363      	str	r3, [r4, #52]	; 0x34
 800b570:	89a3      	ldrh	r3, [r4, #12]
 800b572:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b576:	81a3      	strh	r3, [r4, #12]
 800b578:	2300      	movs	r3, #0
 800b57a:	6063      	str	r3, [r4, #4]
 800b57c:	6923      	ldr	r3, [r4, #16]
 800b57e:	6023      	str	r3, [r4, #0]
 800b580:	89a3      	ldrh	r3, [r4, #12]
 800b582:	f043 0308 	orr.w	r3, r3, #8
 800b586:	81a3      	strh	r3, [r4, #12]
 800b588:	6923      	ldr	r3, [r4, #16]
 800b58a:	b94b      	cbnz	r3, 800b5a0 <__swsetup_r+0x7c>
 800b58c:	89a3      	ldrh	r3, [r4, #12]
 800b58e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b596:	d003      	beq.n	800b5a0 <__swsetup_r+0x7c>
 800b598:	4621      	mov	r1, r4
 800b59a:	4628      	mov	r0, r5
 800b59c:	f000 f88c 	bl	800b6b8 <__smakebuf_r>
 800b5a0:	89a0      	ldrh	r0, [r4, #12]
 800b5a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5a6:	f010 0301 	ands.w	r3, r0, #1
 800b5aa:	d00a      	beq.n	800b5c2 <__swsetup_r+0x9e>
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	60a3      	str	r3, [r4, #8]
 800b5b0:	6963      	ldr	r3, [r4, #20]
 800b5b2:	425b      	negs	r3, r3
 800b5b4:	61a3      	str	r3, [r4, #24]
 800b5b6:	6923      	ldr	r3, [r4, #16]
 800b5b8:	b943      	cbnz	r3, 800b5cc <__swsetup_r+0xa8>
 800b5ba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b5be:	d1c4      	bne.n	800b54a <__swsetup_r+0x26>
 800b5c0:	bd38      	pop	{r3, r4, r5, pc}
 800b5c2:	0781      	lsls	r1, r0, #30
 800b5c4:	bf58      	it	pl
 800b5c6:	6963      	ldrpl	r3, [r4, #20]
 800b5c8:	60a3      	str	r3, [r4, #8]
 800b5ca:	e7f4      	b.n	800b5b6 <__swsetup_r+0x92>
 800b5cc:	2000      	movs	r0, #0
 800b5ce:	e7f7      	b.n	800b5c0 <__swsetup_r+0x9c>
 800b5d0:	20000068 	.word	0x20000068

0800b5d4 <_raise_r>:
 800b5d4:	291f      	cmp	r1, #31
 800b5d6:	b538      	push	{r3, r4, r5, lr}
 800b5d8:	4604      	mov	r4, r0
 800b5da:	460d      	mov	r5, r1
 800b5dc:	d904      	bls.n	800b5e8 <_raise_r+0x14>
 800b5de:	2316      	movs	r3, #22
 800b5e0:	6003      	str	r3, [r0, #0]
 800b5e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b5ea:	b112      	cbz	r2, 800b5f2 <_raise_r+0x1e>
 800b5ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5f0:	b94b      	cbnz	r3, 800b606 <_raise_r+0x32>
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f000 f830 	bl	800b658 <_getpid_r>
 800b5f8:	462a      	mov	r2, r5
 800b5fa:	4601      	mov	r1, r0
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b602:	f000 b817 	b.w	800b634 <_kill_r>
 800b606:	2b01      	cmp	r3, #1
 800b608:	d00a      	beq.n	800b620 <_raise_r+0x4c>
 800b60a:	1c59      	adds	r1, r3, #1
 800b60c:	d103      	bne.n	800b616 <_raise_r+0x42>
 800b60e:	2316      	movs	r3, #22
 800b610:	6003      	str	r3, [r0, #0]
 800b612:	2001      	movs	r0, #1
 800b614:	e7e7      	b.n	800b5e6 <_raise_r+0x12>
 800b616:	2400      	movs	r4, #0
 800b618:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b61c:	4628      	mov	r0, r5
 800b61e:	4798      	blx	r3
 800b620:	2000      	movs	r0, #0
 800b622:	e7e0      	b.n	800b5e6 <_raise_r+0x12>

0800b624 <raise>:
 800b624:	4b02      	ldr	r3, [pc, #8]	; (800b630 <raise+0xc>)
 800b626:	4601      	mov	r1, r0
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	f7ff bfd3 	b.w	800b5d4 <_raise_r>
 800b62e:	bf00      	nop
 800b630:	20000068 	.word	0x20000068

0800b634 <_kill_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	4d07      	ldr	r5, [pc, #28]	; (800b654 <_kill_r+0x20>)
 800b638:	2300      	movs	r3, #0
 800b63a:	4604      	mov	r4, r0
 800b63c:	4608      	mov	r0, r1
 800b63e:	4611      	mov	r1, r2
 800b640:	602b      	str	r3, [r5, #0]
 800b642:	f7f6 faee 	bl	8001c22 <_kill>
 800b646:	1c43      	adds	r3, r0, #1
 800b648:	d102      	bne.n	800b650 <_kill_r+0x1c>
 800b64a:	682b      	ldr	r3, [r5, #0]
 800b64c:	b103      	cbz	r3, 800b650 <_kill_r+0x1c>
 800b64e:	6023      	str	r3, [r4, #0]
 800b650:	bd38      	pop	{r3, r4, r5, pc}
 800b652:	bf00      	nop
 800b654:	20001c74 	.word	0x20001c74

0800b658 <_getpid_r>:
 800b658:	f7f6 badb 	b.w	8001c12 <_getpid>

0800b65c <_malloc_usable_size_r>:
 800b65c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b660:	1f18      	subs	r0, r3, #4
 800b662:	2b00      	cmp	r3, #0
 800b664:	bfbc      	itt	lt
 800b666:	580b      	ldrlt	r3, [r1, r0]
 800b668:	18c0      	addlt	r0, r0, r3
 800b66a:	4770      	bx	lr

0800b66c <__swhatbuf_r>:
 800b66c:	b570      	push	{r4, r5, r6, lr}
 800b66e:	460c      	mov	r4, r1
 800b670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b674:	2900      	cmp	r1, #0
 800b676:	b096      	sub	sp, #88	; 0x58
 800b678:	4615      	mov	r5, r2
 800b67a:	461e      	mov	r6, r3
 800b67c:	da0d      	bge.n	800b69a <__swhatbuf_r+0x2e>
 800b67e:	89a3      	ldrh	r3, [r4, #12]
 800b680:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b684:	f04f 0100 	mov.w	r1, #0
 800b688:	bf0c      	ite	eq
 800b68a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b68e:	2340      	movne	r3, #64	; 0x40
 800b690:	2000      	movs	r0, #0
 800b692:	6031      	str	r1, [r6, #0]
 800b694:	602b      	str	r3, [r5, #0]
 800b696:	b016      	add	sp, #88	; 0x58
 800b698:	bd70      	pop	{r4, r5, r6, pc}
 800b69a:	466a      	mov	r2, sp
 800b69c:	f000 f848 	bl	800b730 <_fstat_r>
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	dbec      	blt.n	800b67e <__swhatbuf_r+0x12>
 800b6a4:	9901      	ldr	r1, [sp, #4]
 800b6a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b6aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b6ae:	4259      	negs	r1, r3
 800b6b0:	4159      	adcs	r1, r3
 800b6b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6b6:	e7eb      	b.n	800b690 <__swhatbuf_r+0x24>

0800b6b8 <__smakebuf_r>:
 800b6b8:	898b      	ldrh	r3, [r1, #12]
 800b6ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6bc:	079d      	lsls	r5, r3, #30
 800b6be:	4606      	mov	r6, r0
 800b6c0:	460c      	mov	r4, r1
 800b6c2:	d507      	bpl.n	800b6d4 <__smakebuf_r+0x1c>
 800b6c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b6c8:	6023      	str	r3, [r4, #0]
 800b6ca:	6123      	str	r3, [r4, #16]
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	6163      	str	r3, [r4, #20]
 800b6d0:	b002      	add	sp, #8
 800b6d2:	bd70      	pop	{r4, r5, r6, pc}
 800b6d4:	ab01      	add	r3, sp, #4
 800b6d6:	466a      	mov	r2, sp
 800b6d8:	f7ff ffc8 	bl	800b66c <__swhatbuf_r>
 800b6dc:	9900      	ldr	r1, [sp, #0]
 800b6de:	4605      	mov	r5, r0
 800b6e0:	4630      	mov	r0, r6
 800b6e2:	f7ff f909 	bl	800a8f8 <_malloc_r>
 800b6e6:	b948      	cbnz	r0, 800b6fc <__smakebuf_r+0x44>
 800b6e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ec:	059a      	lsls	r2, r3, #22
 800b6ee:	d4ef      	bmi.n	800b6d0 <__smakebuf_r+0x18>
 800b6f0:	f023 0303 	bic.w	r3, r3, #3
 800b6f4:	f043 0302 	orr.w	r3, r3, #2
 800b6f8:	81a3      	strh	r3, [r4, #12]
 800b6fa:	e7e3      	b.n	800b6c4 <__smakebuf_r+0xc>
 800b6fc:	89a3      	ldrh	r3, [r4, #12]
 800b6fe:	6020      	str	r0, [r4, #0]
 800b700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b704:	81a3      	strh	r3, [r4, #12]
 800b706:	9b00      	ldr	r3, [sp, #0]
 800b708:	6163      	str	r3, [r4, #20]
 800b70a:	9b01      	ldr	r3, [sp, #4]
 800b70c:	6120      	str	r0, [r4, #16]
 800b70e:	b15b      	cbz	r3, 800b728 <__smakebuf_r+0x70>
 800b710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b714:	4630      	mov	r0, r6
 800b716:	f000 f81d 	bl	800b754 <_isatty_r>
 800b71a:	b128      	cbz	r0, 800b728 <__smakebuf_r+0x70>
 800b71c:	89a3      	ldrh	r3, [r4, #12]
 800b71e:	f023 0303 	bic.w	r3, r3, #3
 800b722:	f043 0301 	orr.w	r3, r3, #1
 800b726:	81a3      	strh	r3, [r4, #12]
 800b728:	89a3      	ldrh	r3, [r4, #12]
 800b72a:	431d      	orrs	r5, r3
 800b72c:	81a5      	strh	r5, [r4, #12]
 800b72e:	e7cf      	b.n	800b6d0 <__smakebuf_r+0x18>

0800b730 <_fstat_r>:
 800b730:	b538      	push	{r3, r4, r5, lr}
 800b732:	4d07      	ldr	r5, [pc, #28]	; (800b750 <_fstat_r+0x20>)
 800b734:	2300      	movs	r3, #0
 800b736:	4604      	mov	r4, r0
 800b738:	4608      	mov	r0, r1
 800b73a:	4611      	mov	r1, r2
 800b73c:	602b      	str	r3, [r5, #0]
 800b73e:	f7f6 facf 	bl	8001ce0 <_fstat>
 800b742:	1c43      	adds	r3, r0, #1
 800b744:	d102      	bne.n	800b74c <_fstat_r+0x1c>
 800b746:	682b      	ldr	r3, [r5, #0]
 800b748:	b103      	cbz	r3, 800b74c <_fstat_r+0x1c>
 800b74a:	6023      	str	r3, [r4, #0]
 800b74c:	bd38      	pop	{r3, r4, r5, pc}
 800b74e:	bf00      	nop
 800b750:	20001c74 	.word	0x20001c74

0800b754 <_isatty_r>:
 800b754:	b538      	push	{r3, r4, r5, lr}
 800b756:	4d06      	ldr	r5, [pc, #24]	; (800b770 <_isatty_r+0x1c>)
 800b758:	2300      	movs	r3, #0
 800b75a:	4604      	mov	r4, r0
 800b75c:	4608      	mov	r0, r1
 800b75e:	602b      	str	r3, [r5, #0]
 800b760:	f7f6 face 	bl	8001d00 <_isatty>
 800b764:	1c43      	adds	r3, r0, #1
 800b766:	d102      	bne.n	800b76e <_isatty_r+0x1a>
 800b768:	682b      	ldr	r3, [r5, #0]
 800b76a:	b103      	cbz	r3, 800b76e <_isatty_r+0x1a>
 800b76c:	6023      	str	r3, [r4, #0]
 800b76e:	bd38      	pop	{r3, r4, r5, pc}
 800b770:	20001c74 	.word	0x20001c74

0800b774 <_init>:
 800b774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b776:	bf00      	nop
 800b778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b77a:	bc08      	pop	{r3}
 800b77c:	469e      	mov	lr, r3
 800b77e:	4770      	bx	lr

0800b780 <_fini>:
 800b780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b782:	bf00      	nop
 800b784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b786:	bc08      	pop	{r3}
 800b788:	469e      	mov	lr, r3
 800b78a:	4770      	bx	lr
