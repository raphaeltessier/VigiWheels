
VigiWheels_Fire_Detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000987c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08009a0c  08009a0c  00019a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b70  08009b70  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08009b70  08009b70  00019b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b78  08009b78  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b78  08009b78  00019b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b7c  08009b7c  00019b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08009b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c30  20000060  08009be0  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c90  08009be0  00021c90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e3e4  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b59  00000000  00000000  0003e4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a70  00000000  00000000  00042010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000149b  00000000  00000000  00043a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a3b6  00000000  00000000  00044f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c603  00000000  00000000  0006f2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110176  00000000  00000000  0008b8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000766c  00000000  00000000  0019ba4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001a30b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080099f4 	.word	0x080099f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080099f4 	.word	0x080099f4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <reading_analog_sensor>:

#define SIZE_RX 10
#define SIZE_TX 100

void reading_analog_sensor(ADC_HandleTypeDef *hadc, uint16_t *sensorValue)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
    HAL_ADC_Start(hadc);
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f001 f9f8 	bl	800199c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, 100);
 80005ac:	2164      	movs	r1, #100	; 0x64
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f001 fae2 	bl	8001b78 <HAL_ADC_PollForConversion>
    *sensorValue = HAL_ADC_GetValue(hadc);
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f001 fbb7 	bl	8001d28 <HAL_ADC_GetValue>
 80005ba:	4603      	mov	r3, r0
 80005bc:	b29a      	uxth	r2, r3
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	801a      	strh	r2, [r3, #0]
    HAL_ADC_Stop(hadc);
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f001 faa4 	bl	8001b10 <HAL_ADC_Stop>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <reading_digital_sensor>:

void reading_digital_sensor(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint16_t *sensorValue)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	460b      	mov	r3, r1
 80005da:	607a      	str	r2, [r7, #4]
 80005dc:	817b      	strh	r3, [r7, #10]
    *sensorValue = !HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80005de:	897b      	ldrh	r3, [r7, #10]
 80005e0:	4619      	mov	r1, r3
 80005e2:	68f8      	ldr	r0, [r7, #12]
 80005e4:	f002 fca8 	bl	8002f38 <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	bf0c      	ite	eq
 80005ee:	2301      	moveq	r3, #1
 80005f0:	2300      	movne	r3, #0
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	801a      	strh	r2, [r3, #0]
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <reading_sensor_values>:

void reading_sensor_values()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
    reading_analog_sensor(&hadc1, &ir_sensor1);
 8000608:	490e      	ldr	r1, [pc, #56]	; (8000644 <reading_sensor_values+0x40>)
 800060a:	480f      	ldr	r0, [pc, #60]	; (8000648 <reading_sensor_values+0x44>)
 800060c:	f7ff ffc6 	bl	800059c <reading_analog_sensor>
    reading_digital_sensor(GPIOA, GPIO_PIN_10, &ir_sensor2);
 8000610:	4a0e      	ldr	r2, [pc, #56]	; (800064c <reading_sensor_values+0x48>)
 8000612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061a:	f7ff ffd9 	bl	80005d0 <reading_digital_sensor>
    reading_analog_sensor(&hadc1, &ir_sensor3);
 800061e:	490c      	ldr	r1, [pc, #48]	; (8000650 <reading_sensor_values+0x4c>)
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <reading_sensor_values+0x44>)
 8000622:	f7ff ffbb 	bl	800059c <reading_analog_sensor>
    reading_digital_sensor(GPIOB, GPIO_PIN_3, &ir_sensor4);
 8000626:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <reading_sensor_values+0x50>)
 8000628:	2108      	movs	r1, #8
 800062a:	480b      	ldr	r0, [pc, #44]	; (8000658 <reading_sensor_values+0x54>)
 800062c:	f7ff ffd0 	bl	80005d0 <reading_digital_sensor>
    reading_analog_sensor(&hadc1, &smoke_sensor1);
 8000630:	490a      	ldr	r1, [pc, #40]	; (800065c <reading_sensor_values+0x58>)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <reading_sensor_values+0x44>)
 8000634:	f7ff ffb2 	bl	800059c <reading_analog_sensor>
    reading_analog_sensor(&hadc1, &smoke_sensor2);
 8000638:	4909      	ldr	r1, [pc, #36]	; (8000660 <reading_sensor_values+0x5c>)
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <reading_sensor_values+0x44>)
 800063c:	f7ff ffae 	bl	800059c <reading_analog_sensor>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	2000007c 	.word	0x2000007c
 8000648:	20000094 	.word	0x20000094
 800064c:	2000007e 	.word	0x2000007e
 8000650:	20000080 	.word	0x20000080
 8000654:	20000082 	.word	0x20000082
 8000658:	48000400 	.word	0x48000400
 800065c:	20000084 	.word	0x20000084
 8000660:	20000086 	.word	0x20000086

08000664 <sending_data_uart>:

void sending_data_uart(void *argument)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b09f      	sub	sp, #124	; 0x7c
 8000668:	af02      	add	r7, sp, #8
 800066a:	6078      	str	r0, [r7, #4]
	char tx[SIZE_TX + 1];

    while (1)
    {
        osMutexAcquire(uartMutex, osWaitForever);
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <sending_data_uart+0x70>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000674:	4618      	mov	r0, r3
 8000676:	f005 fd18 	bl	80060aa <osMutexAcquire>

        reading_sensor_values();
 800067a:	f7ff ffc3 	bl	8000604 <reading_sensor_values>

        sprintf(tx, "#IR_SENSOR1=%hu|IR_SENSOR2=%u|IR_SENSOR3=%hu|IR_SENSOR4=%u|SMOKE_SENSOR1=4095|SMOKE_SENSOR2=4095\r\n", ir_sensor1, ir_sensor2, ir_sensor3, ir_sensor4);
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <sending_data_uart+0x74>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	4619      	mov	r1, r3
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <sending_data_uart+0x78>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	461c      	mov	r4, r3
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <sending_data_uart+0x7c>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	461a      	mov	r2, r3
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <sending_data_uart+0x80>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	f107 0008 	add.w	r0, r7, #8
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	9200      	str	r2, [sp, #0]
 800069c:	4623      	mov	r3, r4
 800069e:	460a      	mov	r2, r1
 80006a0:	4911      	ldr	r1, [pc, #68]	; (80006e8 <sending_data_uart+0x84>)
 80006a2:	f008 fd03 	bl	80090ac <siprintf>

        HAL_UART_Transmit(&huart2, (const uint8_t *)tx, strlen(tx), 100);
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fd9a 	bl	80001e4 <strlen>
 80006b0:	4603      	mov	r3, r0
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	f107 0108 	add.w	r1, r7, #8
 80006b8:	2364      	movs	r3, #100	; 0x64
 80006ba:	480c      	ldr	r0, [pc, #48]	; (80006ec <sending_data_uart+0x88>)
 80006bc:	f004 fd22 	bl	8005104 <HAL_UART_Transmit>

        osMutexRelease(uartMutex);
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <sending_data_uart+0x70>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f005 fd3b 	bl	8006140 <osMutexRelease>

        osDelay(200);
 80006ca:	20c8      	movs	r0, #200	; 0xc8
 80006cc:	f005 fc4c 	bl	8005f68 <osDelay>
        osMutexAcquire(uartMutex, osWaitForever);
 80006d0:	e7cc      	b.n	800066c <sending_data_uart+0x8>
 80006d2:	bf00      	nop
 80006d4:	20000088 	.word	0x20000088
 80006d8:	2000007c 	.word	0x2000007c
 80006dc:	2000007e 	.word	0x2000007e
 80006e0:	20000080 	.word	0x20000080
 80006e4:	20000082 	.word	0x20000082
 80006e8:	08009a14 	.word	0x08009a14
 80006ec:	200001a8 	.word	0x200001a8

080006f0 <receiving_data_uart>:
    }
}

void receiving_data_uart(void *argument)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
    char buf[1];
    char rx[SIZE_RX + 1];

    while (1)
    {
        osMutexAcquire(uartMutex, osWaitForever);
 80006f8:	4b30      	ldr	r3, [pc, #192]	; (80007bc <receiving_data_uart+0xcc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000700:	4618      	mov	r0, r3
 8000702:	f005 fcd2 	bl	80060aa <osMutexAcquire>

        do
        {
            HAL_UART_Receive(&huart2, (uint8_t *)buf, 1, 100);
 8000706:	f107 0118 	add.w	r1, r7, #24
 800070a:	2364      	movs	r3, #100	; 0x64
 800070c:	2201      	movs	r2, #1
 800070e:	482c      	ldr	r0, [pc, #176]	; (80007c0 <receiving_data_uart+0xd0>)
 8000710:	f004 fd82 	bl	8005218 <HAL_UART_Receive>
        } while (*buf != '#');
 8000714:	7e3b      	ldrb	r3, [r7, #24]
 8000716:	2b23      	cmp	r3, #35	; 0x23
 8000718:	d1f5      	bne.n	8000706 <receiving_data_uart+0x16>

        int i = 0;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]
        do
        {
            HAL_UART_Receive(&huart2, (uint8_t *)buf, 1, 100);
 800071e:	f107 0118 	add.w	r1, r7, #24
 8000722:	2364      	movs	r3, #100	; 0x64
 8000724:	2201      	movs	r2, #1
 8000726:	4826      	ldr	r0, [pc, #152]	; (80007c0 <receiving_data_uart+0xd0>)
 8000728:	f004 fd76 	bl	8005218 <HAL_UART_Receive>
            if (*buf != '#')
 800072c:	7e3b      	ldrb	r3, [r7, #24]
 800072e:	2b23      	cmp	r3, #35	; 0x23
 8000730:	d007      	beq.n	8000742 <receiving_data_uart+0x52>
            {
                rx[i++] = *buf;
 8000732:	69fb      	ldr	r3, [r7, #28]
 8000734:	1c5a      	adds	r2, r3, #1
 8000736:	61fa      	str	r2, [r7, #28]
 8000738:	7e3a      	ldrb	r2, [r7, #24]
 800073a:	3320      	adds	r3, #32
 800073c:	443b      	add	r3, r7
 800073e:	f803 2c14 	strb.w	r2, [r3, #-20]
            }
        } while (i < SIZE_RX && (*buf != '0' && *buf != '1'));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	2b09      	cmp	r3, #9
 8000746:	dc05      	bgt.n	8000754 <receiving_data_uart+0x64>
 8000748:	7e3b      	ldrb	r3, [r7, #24]
 800074a:	2b30      	cmp	r3, #48	; 0x30
 800074c:	d002      	beq.n	8000754 <receiving_data_uart+0x64>
 800074e:	7e3b      	ldrb	r3, [r7, #24]
 8000750:	2b31      	cmp	r3, #49	; 0x31
 8000752:	d1e4      	bne.n	800071e <receiving_data_uart+0x2e>

        rx[i] = '\0';
 8000754:	f107 020c 	add.w	r2, r7, #12
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	4413      	add	r3, r2
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]

        if (strcmp(rx, "fire=1") == 0)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	4917      	ldr	r1, [pc, #92]	; (80007c4 <receiving_data_uart+0xd4>)
 8000766:	4618      	mov	r0, r3
 8000768:	f7ff fd32 	bl	80001d0 <strcmp>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d10a      	bne.n	8000788 <receiving_data_uart+0x98>
        {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); //Gyro
 8000772:	2201      	movs	r2, #1
 8000774:	2120      	movs	r1, #32
 8000776:	4814      	ldr	r0, [pc, #80]	; (80007c8 <receiving_data_uart+0xd8>)
 8000778:	f002 fbf6 	bl	8002f68 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //Buzzer
 800077c:	2201      	movs	r2, #1
 800077e:	2110      	movs	r1, #16
 8000780:	4811      	ldr	r0, [pc, #68]	; (80007c8 <receiving_data_uart+0xd8>)
 8000782:	f002 fbf1 	bl	8002f68 <HAL_GPIO_WritePin>
 8000786:	e012      	b.n	80007ae <receiving_data_uart+0xbe>
        }
        else if (strcmp(rx, "fire=0") == 0)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	490f      	ldr	r1, [pc, #60]	; (80007cc <receiving_data_uart+0xdc>)
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fd1e 	bl	80001d0 <strcmp>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d109      	bne.n	80007ae <receiving_data_uart+0xbe>
        {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2120      	movs	r1, #32
 800079e:	480a      	ldr	r0, [pc, #40]	; (80007c8 <receiving_data_uart+0xd8>)
 80007a0:	f002 fbe2 	bl	8002f68 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2110      	movs	r1, #16
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <receiving_data_uart+0xd8>)
 80007aa:	f002 fbdd 	bl	8002f68 <HAL_GPIO_WritePin>
        } else
        {
            // Error handling for unexpected values
        }

        osMutexRelease(uartMutex);
 80007ae:	4b03      	ldr	r3, [pc, #12]	; (80007bc <receiving_data_uart+0xcc>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f005 fcc4 	bl	8006140 <osMutexRelease>
    {
 80007b8:	e79e      	b.n	80006f8 <receiving_data_uart+0x8>
 80007ba:	bf00      	nop
 80007bc:	20000088 	.word	0x20000088
 80007c0:	200001a8 	.word	0x200001a8
 80007c4:	08009a78 	.word	0x08009a78
 80007c8:	48000400 	.word	0x48000400
 80007cc:	08009a80 	.word	0x08009a80

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d4:	f000 fce4 	bl	80011a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d8:	f000 f842 	bl	8000860 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007dc:	f000 f891 	bl	8000902 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e0:	f000 fa54 	bl	8000c8c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007e4:	f000 fa22 	bl	8000c2c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80007e8:	f000 f8b6 	bl	8000958 <MX_ADC1_Init>
  MX_ADC2_Init();
 80007ec:	f000 f92a 	bl	8000a44 <MX_ADC2_Init>
  MX_TIM1_Init();
 80007f0:	f000 f98c 	bl	8000b0c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007f4:	f005 fadc 	bl	8005db0 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  uartMutex = osMutexNew(NULL);
 80007f8:	2000      	movs	r0, #0
 80007fa:	f005 fbd0 	bl	8005f9e <osMutexNew>
 80007fe:	4603      	mov	r3, r0
 8000800:	4a0e      	ldr	r2, [pc, #56]	; (800083c <main+0x6c>)
 8000802:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000804:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <main+0x70>)
 8000806:	2100      	movs	r1, #0
 8000808:	480e      	ldr	r0, [pc, #56]	; (8000844 <main+0x74>)
 800080a:	f005 fb1b 	bl	8005e44 <osThreadNew>
 800080e:	4603      	mov	r3, r0
 8000810:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <main+0x78>)
 8000812:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* Create tasks */
  senderThreadId = osThreadNew(sending_data_uart, NULL, &senderTask_attributes);
 8000814:	4a0d      	ldr	r2, [pc, #52]	; (800084c <main+0x7c>)
 8000816:	2100      	movs	r1, #0
 8000818:	480d      	ldr	r0, [pc, #52]	; (8000850 <main+0x80>)
 800081a:	f005 fb13 	bl	8005e44 <osThreadNew>
 800081e:	4603      	mov	r3, r0
 8000820:	4a0c      	ldr	r2, [pc, #48]	; (8000854 <main+0x84>)
 8000822:	6013      	str	r3, [r2, #0]
  receiverThreadId = osThreadNew(receiving_data_uart, NULL, NULL);
 8000824:	2200      	movs	r2, #0
 8000826:	2100      	movs	r1, #0
 8000828:	480b      	ldr	r0, [pc, #44]	; (8000858 <main+0x88>)
 800082a:	f005 fb0b 	bl	8005e44 <osThreadNew>
 800082e:	4603      	mov	r3, r0
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <main+0x8c>)
 8000832:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000834:	f005 fae0 	bl	8005df8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000838:	e7fe      	b.n	8000838 <main+0x68>
 800083a:	bf00      	nop
 800083c:	20000088 	.word	0x20000088
 8000840:	08009ad0 	.word	0x08009ad0
 8000844:	08000da1 	.word	0x08000da1
 8000848:	20000230 	.word	0x20000230
 800084c:	08009aac 	.word	0x08009aac
 8000850:	08000665 	.word	0x08000665
 8000854:	2000008c 	.word	0x2000008c
 8000858:	080006f1 	.word	0x080006f1
 800085c:	20000090 	.word	0x20000090

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b096      	sub	sp, #88	; 0x58
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	f107 0314 	add.w	r3, r7, #20
 800086a:	2244      	movs	r2, #68	; 0x44
 800086c:	2100      	movs	r1, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f008 fc3c 	bl	80090ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000874:	463b      	mov	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	609a      	str	r2, [r3, #8]
 800087e:	60da      	str	r2, [r3, #12]
 8000880:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000882:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000886:	f002 fb95 	bl	8002fb4 <HAL_PWREx_ControlVoltageScaling>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000890:	f000 fa8e 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000894:	2302      	movs	r3, #2
 8000896:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800089c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800089e:	2310      	movs	r3, #16
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a2:	2302      	movs	r3, #2
 80008a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a6:	2302      	movs	r3, #2
 80008a8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008ae:	230a      	movs	r3, #10
 80008b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008b2:	2307      	movs	r3, #7
 80008b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4618      	mov	r0, r3
 80008c4:	f002 fbcc 	bl	8003060 <HAL_RCC_OscConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008ce:	f000 fa6f 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	230f      	movs	r3, #15
 80008d4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	2303      	movs	r3, #3
 80008d8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008e6:	463b      	mov	r3, r7
 80008e8:	2104      	movs	r1, #4
 80008ea:	4618      	mov	r0, r3
 80008ec:	f002 ff94 	bl	8003818 <HAL_RCC_ClockConfig>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008f6:	f000 fa5b 	bl	8000db0 <Error_Handler>
  }
}
 80008fa:	bf00      	nop
 80008fc:	3758      	adds	r7, #88	; 0x58
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b0a2      	sub	sp, #136	; 0x88
 8000906:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000908:	463b      	mov	r3, r7
 800090a:	2288      	movs	r2, #136	; 0x88
 800090c:	2100      	movs	r1, #0
 800090e:	4618      	mov	r0, r3
 8000910:	f008 fbec 	bl	80090ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000914:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000918:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800091a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800091e:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000920:	2302      	movs	r3, #2
 8000922:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000924:	2301      	movs	r3, #1
 8000926:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000928:	2308      	movs	r3, #8
 800092a:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800092c:	2307      	movs	r3, #7
 800092e:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000930:	2302      	movs	r3, #2
 8000932:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000934:	2302      	movs	r3, #2
 8000936:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000938:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800093c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093e:	463b      	mov	r3, r7
 8000940:	4618      	mov	r0, r3
 8000942:	f003 f98d 	bl	8003c60 <HAL_RCCEx_PeriphCLKConfig>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 800094c:	f000 fa30 	bl	8000db0 <Error_Handler>
  }
}
 8000950:	bf00      	nop
 8000952:	3788      	adds	r7, #136	; 0x88
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
 8000978:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800097a:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <MX_ADC1_Init+0xe0>)
 800097c:	4a2f      	ldr	r2, [pc, #188]	; (8000a3c <MX_ADC1_Init+0xe4>)
 800097e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000980:	4b2d      	ldr	r3, [pc, #180]	; (8000a38 <MX_ADC1_Init+0xe0>)
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <MX_ADC1_Init+0xe0>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800098c:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <MX_ADC1_Init+0xe0>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000992:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <MX_ADC1_Init+0xe0>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000998:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <MX_ADC1_Init+0xe0>)
 800099a:	2204      	movs	r2, #4
 800099c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800099e:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009a4:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80009aa:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009cc:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009da:	4817      	ldr	r0, [pc, #92]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009dc:	f000 fe8e 	bl	80016fc <HAL_ADC_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80009e6:	f000 f9e3 	bl	8000db0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4810      	ldr	r0, [pc, #64]	; (8000a38 <MX_ADC1_Init+0xe0>)
 80009f6:	f001 ff5f 	bl	80028b8 <HAL_ADCEx_MultiModeConfigChannel>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a00:	f000 f9d6 	bl	8000db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_ADC1_Init+0xe8>)
 8000a06:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a08:	2306      	movs	r3, #6
 8000a0a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a10:	237f      	movs	r3, #127	; 0x7f
 8000a12:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a14:	2304      	movs	r3, #4
 8000a16:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_ADC1_Init+0xe0>)
 8000a22:	f001 f98f 	bl	8001d44 <HAL_ADC_ConfigChannel>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000a2c:	f000 f9c0 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000094 	.word	0x20000094
 8000a3c:	50040000 	.word	0x50040000
 8000a40:	14f00020 	.word	0x14f00020

08000a44 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b086      	sub	sp, #24
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]
 8000a58:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a5a:	4b29      	ldr	r3, [pc, #164]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a5c:	4a29      	ldr	r2, [pc, #164]	; (8000b04 <MX_ADC2_Init+0xc0>)
 8000a5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a60:	4b27      	ldr	r3, [pc, #156]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a66:	4b26      	ldr	r3, [pc, #152]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a6c:	4b24      	ldr	r3, [pc, #144]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a72:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a78:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a7e:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a84:	4b1e      	ldr	r3, [pc, #120]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000a8a:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a90:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a9e:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000aba:	4811      	ldr	r0, [pc, #68]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000abc:	f000 fe1e 	bl	80016fc <HAL_ADC_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000ac6:	f000 f973 	bl	8000db0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_ADC2_Init+0xc4>)
 8000acc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ace:	2306      	movs	r3, #6
 8000ad0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ad6:	237f      	movs	r3, #127	; 0x7f
 8000ad8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ada:	2304      	movs	r3, #4
 8000adc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ae2:	463b      	mov	r3, r7
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <MX_ADC2_Init+0xbc>)
 8000ae8:	f001 f92c 	bl	8001d44 <HAL_ADC_ConfigChannel>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000af2:	f000 f95d 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	3718      	adds	r7, #24
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	200000f8 	.word	0x200000f8
 8000b04:	50040100 	.word	0x50040100
 8000b08:	04300002 	.word	0x04300002

08000b0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b096      	sub	sp, #88	; 0x58
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b12:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
 8000b2e:	615a      	str	r2, [r3, #20]
 8000b30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	222c      	movs	r2, #44	; 0x2c
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f008 fad7 	bl	80090ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b3e:	4b39      	ldr	r3, [pc, #228]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b40:	4a39      	ldr	r2, [pc, #228]	; (8000c28 <MX_TIM1_Init+0x11c>)
 8000b42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b44:	4b37      	ldr	r3, [pc, #220]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4a:	4b36      	ldr	r3, [pc, #216]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b50:	4b34      	ldr	r3, [pc, #208]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b58:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b5e:	4b31      	ldr	r3, [pc, #196]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b64:	4b2f      	ldr	r3, [pc, #188]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000b6a:	482e      	ldr	r0, [pc, #184]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b6c:	f003 fd34 	bl	80045d8 <HAL_TIM_OC_Init>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b76:	f000 f91b 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b86:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4825      	ldr	r0, [pc, #148]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000b8e:	f004 f965 	bl	8004e5c <HAL_TIMEx_MasterConfigSynchronization>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b98:	f000 f90a 	bl	8000db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4818      	ldr	r0, [pc, #96]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000bc2:	f003 fd61 	bl	8004688 <HAL_TIM_OC_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000bcc:	f000 f8f0 	bl	8000db0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c00:	1d3b      	adds	r3, r7, #4
 8000c02:	4619      	mov	r1, r3
 8000c04:	4807      	ldr	r0, [pc, #28]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000c06:	f004 f9b1 	bl	8004f6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000c10:	f000 f8ce 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c14:	4803      	ldr	r0, [pc, #12]	; (8000c24 <MX_TIM1_Init+0x118>)
 8000c16:	f000 f999 	bl	8000f4c <HAL_TIM_MspPostInit>

}
 8000c1a:	bf00      	nop
 8000c1c:	3758      	adds	r7, #88	; 0x58
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000015c 	.word	0x2000015c
 8000c28:	40012c00 	.word	0x40012c00

08000c2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c30:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <MX_USART2_UART_Init+0x5c>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c36:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c6e:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_USART2_UART_Init+0x58>)
 8000c70:	f004 f9fa 	bl	8005068 <HAL_UART_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c7a:	f000 f899 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200001a8 	.word	0x200001a8
 8000c88:	40004400 	.word	0x40004400

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 030c 	add.w	r3, r7, #12
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca2:	4b3c      	ldr	r3, [pc, #240]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	4a3b      	ldr	r2, [pc, #236]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000ca8:	f043 0304 	orr.w	r3, r3, #4
 8000cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cae:	4b39      	ldr	r3, [pc, #228]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	f003 0304 	and.w	r3, r3, #4
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	4b36      	ldr	r3, [pc, #216]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	4a35      	ldr	r2, [pc, #212]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc6:	4b33      	ldr	r3, [pc, #204]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd2:	4b30      	ldr	r3, [pc, #192]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	4a2f      	ldr	r2, [pc, #188]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000cd8:	f043 0302 	orr.w	r3, r3, #2
 8000cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cde:	4b2d      	ldr	r3, [pc, #180]	; (8000d94 <MX_GPIO_Init+0x108>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	2120      	movs	r1, #32
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cf2:	f002 f939 	bl	8002f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D5___BUZZER_Pin|D4___RELAIS_Pin, GPIO_PIN_RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2130      	movs	r1, #48	; 0x30
 8000cfa:	4827      	ldr	r0, [pc, #156]	; (8000d98 <MX_GPIO_Init+0x10c>)
 8000cfc:	f002 f934 	bl	8002f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d06:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d10:	f107 030c 	add.w	r3, r7, #12
 8000d14:	4619      	mov	r1, r3
 8000d16:	4821      	ldr	r0, [pc, #132]	; (8000d9c <MX_GPIO_Init+0x110>)
 8000d18:	f001 ff64 	bl	8002be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d1c:	2320      	movs	r3, #32
 8000d1e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d36:	f001 ff55 	bl	8002be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2___IR_SENSOR2_Pin */
  GPIO_InitStruct.Pin = D2___IR_SENSOR2_Pin;
 8000d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d40:	2300      	movs	r3, #0
 8000d42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D2___IR_SENSOR2_GPIO_Port, &GPIO_InitStruct);
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d52:	f001 ff47 	bl	8002be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : D3___IR_SENSOR4_Pin */
  GPIO_InitStruct.Pin = D3___IR_SENSOR4_Pin;
 8000d56:	2308      	movs	r3, #8
 8000d58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D3___IR_SENSOR4_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	4619      	mov	r1, r3
 8000d68:	480b      	ldr	r0, [pc, #44]	; (8000d98 <MX_GPIO_Init+0x10c>)
 8000d6a:	f001 ff3b 	bl	8002be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D5___BUZZER_Pin D4___RELAIS_Pin */
  GPIO_InitStruct.Pin = D5___BUZZER_Pin|D4___RELAIS_Pin;
 8000d6e:	2330      	movs	r3, #48	; 0x30
 8000d70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4619      	mov	r1, r3
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <MX_GPIO_Init+0x10c>)
 8000d86:	f001 ff2d 	bl	8002be4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8a:	bf00      	nop
 8000d8c:	3720      	adds	r7, #32
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000
 8000d98:	48000400 	.word	0x48000400
 8000d9c:	48000800 	.word	0x48000800

08000da0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000da8:	2001      	movs	r0, #1
 8000daa:	f005 f8dd 	bl	8005f68 <osDelay>
 8000dae:	e7fb      	b.n	8000da8 <StartDefaultTask+0x8>

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <Error_Handler+0x8>
	...

08000dbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc6:	4a10      	ldr	r2, [pc, #64]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <HAL_MspInit+0x4c>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <HAL_MspInit+0x4c>)
 8000ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dde:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_MspInit+0x4c>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	6593      	str	r3, [r2, #88]	; 0x58
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <HAL_MspInit+0x4c>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	210f      	movs	r1, #15
 8000df6:	f06f 0001 	mvn.w	r0, #1
 8000dfa:	f001 feca 	bl	8002b92 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08c      	sub	sp, #48	; 0x30
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 031c 	add.w	r3, r7, #28
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a33      	ldr	r2, [pc, #204]	; (8000ef8 <HAL_ADC_MspInit+0xec>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d12e      	bne.n	8000e8c <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000e2e:	4b33      	ldr	r3, [pc, #204]	; (8000efc <HAL_ADC_MspInit+0xf0>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	3301      	adds	r3, #1
 8000e34:	4a31      	ldr	r2, [pc, #196]	; (8000efc <HAL_ADC_MspInit+0xf0>)
 8000e36:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000e38:	4b30      	ldr	r3, [pc, #192]	; (8000efc <HAL_ADC_MspInit+0xf0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d10b      	bne.n	8000e58 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000e40:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <HAL_ADC_MspInit+0xf4>)
 8000e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e44:	4a2e      	ldr	r2, [pc, #184]	; (8000f00 <HAL_ADC_MspInit+0xf4>)
 8000e46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <HAL_ADC_MspInit+0xf4>)
 8000e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e54:	61bb      	str	r3, [r7, #24]
 8000e56:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <HAL_ADC_MspInit+0xf4>)
 8000e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5c:	4a28      	ldr	r2, [pc, #160]	; (8000f00 <HAL_ADC_MspInit+0xf4>)
 8000e5e:	f043 0301 	orr.w	r3, r3, #1
 8000e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e64:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <HAL_ADC_MspInit+0xf4>)
 8000e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e68:	f003 0301 	and.w	r3, r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e70:	2303      	movs	r3, #3
 8000e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e74:	230b      	movs	r3, #11
 8000e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e7c:	f107 031c 	add.w	r3, r7, #28
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e86:	f001 fead 	bl	8002be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e8a:	e031      	b.n	8000ef0 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a1c      	ldr	r2, [pc, #112]	; (8000f04 <HAL_ADC_MspInit+0xf8>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d12c      	bne.n	8000ef0 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000e96:	4b19      	ldr	r3, [pc, #100]	; (8000efc <HAL_ADC_MspInit+0xf0>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	4a17      	ldr	r2, [pc, #92]	; (8000efc <HAL_ADC_MspInit+0xf0>)
 8000e9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000ea0:	4b16      	ldr	r3, [pc, #88]	; (8000efc <HAL_ADC_MspInit+0xf0>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d10b      	bne.n	8000ec0 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <HAL_ADC_MspInit+0xf4>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eac:	4a14      	ldr	r2, [pc, #80]	; (8000f00 <HAL_ADC_MspInit+0xf4>)
 8000eae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb4:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <HAL_ADC_MspInit+0xf4>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <HAL_ADC_MspInit+0xf4>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_ADC_MspInit+0xf4>)
 8000ec6:	f043 0304 	orr.w	r3, r3, #4
 8000eca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <HAL_ADC_MspInit+0xf4>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed0:	f003 0304 	and.w	r3, r3, #4
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000edc:	230b      	movs	r3, #11
 8000ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4807      	ldr	r0, [pc, #28]	; (8000f08 <HAL_ADC_MspInit+0xfc>)
 8000eec:	f001 fe7a 	bl	8002be4 <HAL_GPIO_Init>
}
 8000ef0:	bf00      	nop
 8000ef2:	3730      	adds	r7, #48	; 0x30
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	50040000 	.word	0x50040000
 8000efc:	20000234 	.word	0x20000234
 8000f00:	40021000 	.word	0x40021000
 8000f04:	50040100 	.word	0x50040100
 8000f08:	48000800 	.word	0x48000800

08000f0c <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <HAL_TIM_OC_MspInit+0x38>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d10b      	bne.n	8000f36 <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_TIM_OC_MspInit+0x3c>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f22:	4a09      	ldr	r2, [pc, #36]	; (8000f48 <HAL_TIM_OC_MspInit+0x3c>)
 8000f24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f28:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <HAL_TIM_OC_MspInit+0x3c>)
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40012c00 	.word	0x40012c00
 8000f48:	40021000 	.word	0x40021000

08000f4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <HAL_TIM_MspPostInit+0x68>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d11d      	bne.n	8000faa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_TIM_MspPostInit+0x6c>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f72:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <HAL_TIM_MspPostInit+0x6c>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_TIM_MspPostInit+0x6c>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8c:	2302      	movs	r3, #2
 8000f8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa6:	f001 fe1d 	bl	8002be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000faa:	bf00      	nop
 8000fac:	3720      	adds	r7, #32
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40012c00 	.word	0x40012c00
 8000fb8:	40021000 	.word	0x40021000

08000fbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0ac      	sub	sp, #176	; 0xb0
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	2288      	movs	r2, #136	; 0x88
 8000fda:	2100      	movs	r1, #0
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f008 f885 	bl	80090ec <memset>
  if(huart->Instance==USART2)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a21      	ldr	r2, [pc, #132]	; (800106c <HAL_UART_MspInit+0xb0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d13b      	bne.n	8001064 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fec:	2302      	movs	r3, #2
 8000fee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f002 fe31 	bl	8003c60 <HAL_RCCEx_PeriphCLKConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001004:	f7ff fed4 	bl	8000db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <HAL_UART_MspInit+0xb4>)
 800100a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100c:	4a18      	ldr	r2, [pc, #96]	; (8001070 <HAL_UART_MspInit+0xb4>)
 800100e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001012:	6593      	str	r3, [r2, #88]	; 0x58
 8001014:	4b16      	ldr	r3, [pc, #88]	; (8001070 <HAL_UART_MspInit+0xb4>)
 8001016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <HAL_UART_MspInit+0xb4>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	4a12      	ldr	r2, [pc, #72]	; (8001070 <HAL_UART_MspInit+0xb4>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102c:	4b10      	ldr	r3, [pc, #64]	; (8001070 <HAL_UART_MspInit+0xb4>)
 800102e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001038:	230c      	movs	r3, #12
 800103a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	2303      	movs	r3, #3
 800104c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001050:	2307      	movs	r3, #7
 8001052:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800105a:	4619      	mov	r1, r3
 800105c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001060:	f001 fdc0 	bl	8002be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001064:	bf00      	nop
 8001066:	37b0      	adds	r7, #176	; 0xb0
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40004400 	.word	0x40004400
 8001070:	40021000 	.word	0x40021000

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001078:	e7fe      	b.n	8001078 <NMI_Handler+0x4>

0800107a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800107e:	e7fe      	b.n	800107e <HardFault_Handler+0x4>

08001080 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001084:	e7fe      	b.n	8001084 <MemManage_Handler+0x4>

08001086 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001086:	b480      	push	{r7}
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800108a:	e7fe      	b.n	800108a <BusFault_Handler+0x4>

0800108c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001090:	e7fe      	b.n	8001090 <UsageFault_Handler+0x4>

08001092 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a4:	f000 f8d8 	bl	8001258 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010a8:	f006 fe9e 	bl	8007de8 <xTaskGetSchedulerState>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d001      	beq.n	80010b6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80010b2:	f007 fd81 	bl	8008bb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
	...

080010bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c4:	4a14      	ldr	r2, [pc, #80]	; (8001118 <_sbrk+0x5c>)
 80010c6:	4b15      	ldr	r3, [pc, #84]	; (800111c <_sbrk+0x60>)
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d0:	4b13      	ldr	r3, [pc, #76]	; (8001120 <_sbrk+0x64>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d102      	bne.n	80010de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d8:	4b11      	ldr	r3, [pc, #68]	; (8001120 <_sbrk+0x64>)
 80010da:	4a12      	ldr	r2, [pc, #72]	; (8001124 <_sbrk+0x68>)
 80010dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010de:	4b10      	ldr	r3, [pc, #64]	; (8001120 <_sbrk+0x64>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4413      	add	r3, r2
 80010e6:	693a      	ldr	r2, [r7, #16]
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d207      	bcs.n	80010fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ec:	f008 f806 	bl	80090fc <__errno>
 80010f0:	4603      	mov	r3, r0
 80010f2:	220c      	movs	r2, #12
 80010f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010fa:	e009      	b.n	8001110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <_sbrk+0x64>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <_sbrk+0x64>)
 800110c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800110e:	68fb      	ldr	r3, [r7, #12]
}
 8001110:	4618      	mov	r0, r3
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20018000 	.word	0x20018000
 800111c:	00000400 	.word	0x00000400
 8001120:	20000238 	.word	0x20000238
 8001124:	20001c90 	.word	0x20001c90

08001128 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800112c:	4b06      	ldr	r3, [pc, #24]	; (8001148 <SystemInit+0x20>)
 800112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <SystemInit+0x20>)
 8001134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800114c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001184 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001150:	f7ff ffea 	bl	8001128 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001154:	480c      	ldr	r0, [pc, #48]	; (8001188 <LoopForever+0x6>)
  ldr r1, =_edata
 8001156:	490d      	ldr	r1, [pc, #52]	; (800118c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001158:	4a0d      	ldr	r2, [pc, #52]	; (8001190 <LoopForever+0xe>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <LoopForever+0x12>)
  ldr r4, =_ebss
 800116c:	4c0a      	ldr	r4, [pc, #40]	; (8001198 <LoopForever+0x16>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800117a:	f007 ffc5 	bl	8009108 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800117e:	f7ff fb27 	bl	80007d0 <main>

08001182 <LoopForever>:

LoopForever:
    b LoopForever
 8001182:	e7fe      	b.n	8001182 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001184:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800118c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001190:	08009b80 	.word	0x08009b80
  ldr r2, =_sbss
 8001194:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001198:	20001c90 	.word	0x20001c90

0800119c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800119c:	e7fe      	b.n	800119c <ADC1_2_IRQHandler>
	...

080011a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_Init+0x3c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a0b      	ldr	r2, [pc, #44]	; (80011dc <HAL_Init+0x3c>)
 80011b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b6:	2003      	movs	r0, #3
 80011b8:	f001 fce0 	bl	8002b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011bc:	200f      	movs	r0, #15
 80011be:	f000 f80f 	bl	80011e0 <HAL_InitTick>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	71fb      	strb	r3, [r7, #7]
 80011cc:	e001      	b.n	80011d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011ce:	f7ff fdf5 	bl	8000dbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011d2:	79fb      	ldrb	r3, [r7, #7]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40022000 	.word	0x40022000

080011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011e8:	2300      	movs	r3, #0
 80011ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <HAL_InitTick+0x6c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d023      	beq.n	800123c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <HAL_InitTick+0x70>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b14      	ldr	r3, [pc, #80]	; (800124c <HAL_InitTick+0x6c>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4619      	mov	r1, r3
 80011fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001202:	fbb3 f3f1 	udiv	r3, r3, r1
 8001206:	fbb2 f3f3 	udiv	r3, r2, r3
 800120a:	4618      	mov	r0, r3
 800120c:	f001 fcdd 	bl	8002bca <HAL_SYSTICK_Config>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10f      	bne.n	8001236 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b0f      	cmp	r3, #15
 800121a:	d809      	bhi.n	8001230 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800121c:	2200      	movs	r2, #0
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001224:	f001 fcb5 	bl	8002b92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001228:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <HAL_InitTick+0x74>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e007      	b.n	8001240 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e004      	b.n	8001240 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	73fb      	strb	r3, [r7, #15]
 800123a:	e001      	b.n	8001240 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008
 8001250:	20000000 	.word	0x20000000
 8001254:	20000004 	.word	0x20000004

08001258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <HAL_IncTick+0x20>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	461a      	mov	r2, r3
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x24>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4413      	add	r3, r2
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_IncTick+0x24>)
 800126a:	6013      	str	r3, [r2, #0]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000008 	.word	0x20000008
 800127c:	2000023c 	.word	0x2000023c

08001280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  return uwTick;
 8001284:	4b03      	ldr	r3, [pc, #12]	; (8001294 <HAL_GetTick+0x14>)
 8001286:	681b      	ldr	r3, [r3, #0]
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	2000023c 	.word	0x2000023c

08001298 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	431a      	orrs	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	609a      	str	r2, [r3, #8]
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	431a      	orrs	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	609a      	str	r2, [r3, #8]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
 800130c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3360      	adds	r3, #96	; 0x60
 8001312:	461a      	mov	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <LL_ADC_SetOffset+0x44>)
 8001322:	4013      	ands	r3, r2
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800132a:	683a      	ldr	r2, [r7, #0]
 800132c:	430a      	orrs	r2, r1
 800132e:	4313      	orrs	r3, r2
 8001330:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001338:	bf00      	nop
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	03fff000 	.word	0x03fff000

08001348 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3360      	adds	r3, #96	; 0x60
 8001356:	461a      	mov	r2, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001374:	b480      	push	{r7}
 8001376:	b087      	sub	sp, #28
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3360      	adds	r3, #96	; 0x60
 8001384:	461a      	mov	r2, r3
 8001386:	68bb      	ldr	r3, [r7, #8]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	4413      	add	r3, r2
 800138c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	431a      	orrs	r2, r3
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800139e:	bf00      	nop
 80013a0:	371c      	adds	r7, #28
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013be:	2301      	movs	r3, #1
 80013c0:	e000      	b.n	80013c4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	3330      	adds	r3, #48	; 0x30
 80013e0:	461a      	mov	r2, r3
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	f003 030c 	and.w	r3, r3, #12
 80013ec:	4413      	add	r3, r2
 80013ee:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	f003 031f 	and.w	r3, r3, #31
 80013fa:	211f      	movs	r1, #31
 80013fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001400:	43db      	mvns	r3, r3
 8001402:	401a      	ands	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	0e9b      	lsrs	r3, r3, #26
 8001408:	f003 011f 	and.w	r1, r3, #31
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	f003 031f 	and.w	r3, r3, #31
 8001412:	fa01 f303 	lsl.w	r3, r1, r3
 8001416:	431a      	orrs	r2, r3
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800141c:	bf00      	nop
 800141e:	371c      	adds	r7, #28
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr

08001428 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	3314      	adds	r3, #20
 8001438:	461a      	mov	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	0e5b      	lsrs	r3, r3, #25
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	4413      	add	r3, r2
 8001446:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	0d1b      	lsrs	r3, r3, #20
 8001450:	f003 031f 	and.w	r3, r3, #31
 8001454:	2107      	movs	r1, #7
 8001456:	fa01 f303 	lsl.w	r3, r1, r3
 800145a:	43db      	mvns	r3, r3
 800145c:	401a      	ands	r2, r3
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	0d1b      	lsrs	r3, r3, #20
 8001462:	f003 031f 	and.w	r3, r3, #31
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	431a      	orrs	r2, r3
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001472:	bf00      	nop
 8001474:	371c      	adds	r7, #28
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001498:	43db      	mvns	r3, r3
 800149a:	401a      	ands	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0318 	and.w	r3, r3, #24
 80014a2:	4908      	ldr	r1, [pc, #32]	; (80014c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014a4:	40d9      	lsrs	r1, r3
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	400b      	ands	r3, r1
 80014aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ae:	431a      	orrs	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	0007ffff 	.word	0x0007ffff

080014c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 031f 	and.w	r3, r3, #31
}
 80014d8:	4618      	mov	r0, r3
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr

08001500 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001510:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6093      	str	r3, [r2, #8]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001534:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001538:	d101      	bne.n	800153e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800153a:	2301      	movs	r3, #1
 800153c:	e000      	b.n	8001540 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800155c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001560:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001584:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001588:	d101      	bne.n	800158e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800158a:	2301      	movs	r3, #1
 800158c:	e000      	b.n	8001590 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015b0:	f043 0201 	orr.w	r2, r3, #1
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d8:	f043 0202 	orr.w	r2, r3, #2
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d101      	bne.n	8001604 <LL_ADC_IsEnabled+0x18>
 8001600:	2301      	movs	r3, #1
 8001602:	e000      	b.n	8001606 <LL_ADC_IsEnabled+0x1a>
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001612:	b480      	push	{r7}
 8001614:	b083      	sub	sp, #12
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b02      	cmp	r3, #2
 8001624:	d101      	bne.n	800162a <LL_ADC_IsDisableOngoing+0x18>
 8001626:	2301      	movs	r3, #1
 8001628:	e000      	b.n	800162c <LL_ADC_IsDisableOngoing+0x1a>
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001648:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800164c:	f043 0204 	orr.w	r2, r3, #4
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001670:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001674:	f043 0210 	orr.w	r2, r3, #16
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b04      	cmp	r3, #4
 800169a:	d101      	bne.n	80016a0 <LL_ADC_REG_IsConversionOngoing+0x18>
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016c2:	f043 0220 	orr.w	r2, r3, #32
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016d6:	b480      	push	{r7}
 80016d8:	b083      	sub	sp, #12
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b08      	cmp	r3, #8
 80016e8:	d101      	bne.n	80016ee <LL_ADC_INJ_IsConversionOngoing+0x18>
 80016ea:	2301      	movs	r3, #1
 80016ec:	e000      	b.n	80016f0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80016fc:	b590      	push	{r4, r7, lr}
 80016fe:	b089      	sub	sp, #36	; 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001704:	2300      	movs	r3, #0
 8001706:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001708:	2300      	movs	r3, #0
 800170a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e130      	b.n	8001978 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001720:	2b00      	cmp	r3, #0
 8001722:	d109      	bne.n	8001738 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff fb71 	bl	8000e0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fef1 	bl	8001524 <LL_ADC_IsDeepPowerDownEnabled>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fed7 	bl	8001500 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff0c 	bl	8001574 <LL_ADC_IsInternalRegulatorEnabled>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d115      	bne.n	800178e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7ff fef0 	bl	800154c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800176c:	4b84      	ldr	r3, [pc, #528]	; (8001980 <HAL_ADC_Init+0x284>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	099b      	lsrs	r3, r3, #6
 8001772:	4a84      	ldr	r2, [pc, #528]	; (8001984 <HAL_ADC_Init+0x288>)
 8001774:	fba2 2303 	umull	r2, r3, r2, r3
 8001778:	099b      	lsrs	r3, r3, #6
 800177a:	3301      	adds	r3, #1
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001780:	e002      	b.n	8001788 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3b01      	subs	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f9      	bne.n	8001782 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff feee 	bl	8001574 <LL_ADC_IsInternalRegulatorEnabled>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10d      	bne.n	80017ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017a2:	f043 0210 	orr.w	r2, r3, #16
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ae:	f043 0201 	orr.w	r2, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff ff62 	bl	8001688 <LL_ADC_REG_IsConversionOngoing>
 80017c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f040 80c9 	bne.w	8001966 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f040 80c5 	bne.w	8001966 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017e4:	f043 0202 	orr.w	r2, r3, #2
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fefb 	bl	80015ec <LL_ADC_IsEnabled>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d115      	bne.n	8001828 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80017fc:	4862      	ldr	r0, [pc, #392]	; (8001988 <HAL_ADC_Init+0x28c>)
 80017fe:	f7ff fef5 	bl	80015ec <LL_ADC_IsEnabled>
 8001802:	4604      	mov	r4, r0
 8001804:	4861      	ldr	r0, [pc, #388]	; (800198c <HAL_ADC_Init+0x290>)
 8001806:	f7ff fef1 	bl	80015ec <LL_ADC_IsEnabled>
 800180a:	4603      	mov	r3, r0
 800180c:	431c      	orrs	r4, r3
 800180e:	4860      	ldr	r0, [pc, #384]	; (8001990 <HAL_ADC_Init+0x294>)
 8001810:	f7ff feec 	bl	80015ec <LL_ADC_IsEnabled>
 8001814:	4603      	mov	r3, r0
 8001816:	4323      	orrs	r3, r4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d105      	bne.n	8001828 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	4619      	mov	r1, r3
 8001822:	485c      	ldr	r0, [pc, #368]	; (8001994 <HAL_ADC_Init+0x298>)
 8001824:	f7ff fd38 	bl	8001298 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	7e5b      	ldrb	r3, [r3, #25]
 800182c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001832:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001838:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800183e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001846:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d106      	bne.n	8001864 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	3b01      	subs	r3, #1
 800185c:	045b      	lsls	r3, r3, #17
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	2b00      	cmp	r3, #0
 800186a:	d009      	beq.n	8001880 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001870:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001878:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68da      	ldr	r2, [r3, #12]
 8001886:	4b44      	ldr	r3, [pc, #272]	; (8001998 <HAL_ADC_Init+0x29c>)
 8001888:	4013      	ands	r3, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	430b      	orrs	r3, r1
 8001892:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff1c 	bl	80016d6 <LL_ADC_INJ_IsConversionOngoing>
 800189e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d13d      	bne.n	8001922 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d13a      	bne.n	8001922 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018b0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018b8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018c8:	f023 0302 	bic.w	r3, r3, #2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	69b9      	ldr	r1, [r7, #24]
 80018d2:	430b      	orrs	r3, r1
 80018d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d118      	bne.n	8001912 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80018ea:	f023 0304 	bic.w	r3, r3, #4
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80018f6:	4311      	orrs	r1, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018fc:	4311      	orrs	r1, r2
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001902:	430a      	orrs	r2, r1
 8001904:	431a      	orrs	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	611a      	str	r2, [r3, #16]
 8001910:	e007      	b.n	8001922 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	691a      	ldr	r2, [r3, #16]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0201 	bic.w	r2, r2, #1
 8001920:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d10c      	bne.n	8001944 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001930:	f023 010f 	bic.w	r1, r3, #15
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	1e5a      	subs	r2, r3, #1
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	430a      	orrs	r2, r1
 8001940:	631a      	str	r2, [r3, #48]	; 0x30
 8001942:	e007      	b.n	8001954 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 020f 	bic.w	r2, r2, #15
 8001952:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001958:	f023 0303 	bic.w	r3, r3, #3
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	655a      	str	r2, [r3, #84]	; 0x54
 8001964:	e007      	b.n	8001976 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800196a:	f043 0210 	orr.w	r2, r3, #16
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001976:	7ffb      	ldrb	r3, [r7, #31]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3724      	adds	r7, #36	; 0x24
 800197c:	46bd      	mov	sp, r7
 800197e:	bd90      	pop	{r4, r7, pc}
 8001980:	20000000 	.word	0x20000000
 8001984:	053e2d63 	.word	0x053e2d63
 8001988:	50040000 	.word	0x50040000
 800198c:	50040100 	.word	0x50040100
 8001990:	50040200 	.word	0x50040200
 8001994:	50040300 	.word	0x50040300
 8001998:	fff0c007 	.word	0xfff0c007

0800199c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019a4:	4857      	ldr	r0, [pc, #348]	; (8001b04 <HAL_ADC_Start+0x168>)
 80019a6:	f7ff fd8f 	bl	80014c8 <LL_ADC_GetMultimode>
 80019aa:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fe69 	bl	8001688 <LL_ADC_REG_IsConversionOngoing>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f040 809c 	bne.w	8001af6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d101      	bne.n	80019cc <HAL_ADC_Start+0x30>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e097      	b.n	8001afc <HAL_ADC_Start+0x160>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2201      	movs	r2, #1
 80019d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 fe63 	bl	80026a0 <ADC_Enable>
 80019da:	4603      	mov	r3, r0
 80019dc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80019de:	7dfb      	ldrb	r3, [r7, #23]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	f040 8083 	bne.w	8001aec <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019ee:	f023 0301 	bic.w	r3, r3, #1
 80019f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a42      	ldr	r2, [pc, #264]	; (8001b08 <HAL_ADC_Start+0x16c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d002      	beq.n	8001a0a <HAL_ADC_Start+0x6e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	e000      	b.n	8001a0c <HAL_ADC_Start+0x70>
 8001a0a:	4b40      	ldr	r3, [pc, #256]	; (8001b0c <HAL_ADC_Start+0x170>)
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d002      	beq.n	8001a1a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a32:	d106      	bne.n	8001a42 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	f023 0206 	bic.w	r2, r3, #6
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a40:	e002      	b.n	8001a48 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	221c      	movs	r2, #28
 8001a4e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a2a      	ldr	r2, [pc, #168]	; (8001b08 <HAL_ADC_Start+0x16c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d002      	beq.n	8001a68 <HAL_ADC_Start+0xcc>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	e000      	b.n	8001a6a <HAL_ADC_Start+0xce>
 8001a68:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <HAL_ADC_Start+0x170>)
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d008      	beq.n	8001a84 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	2b05      	cmp	r3, #5
 8001a7c:	d002      	beq.n	8001a84 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	2b09      	cmp	r3, #9
 8001a82:	d114      	bne.n	8001aae <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d007      	beq.n	8001aa2 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a9a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7ff fdc6 	bl	8001638 <LL_ADC_REG_StartConversion>
 8001aac:	e025      	b.n	8001afa <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <HAL_ADC_Start+0x16c>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d002      	beq.n	8001aca <HAL_ADC_Start+0x12e>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	e000      	b.n	8001acc <HAL_ADC_Start+0x130>
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <HAL_ADC_Start+0x170>)
 8001acc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00f      	beq.n	8001afa <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ade:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ae2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54
 8001aea:	e006      	b.n	8001afa <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001af4:	e001      	b.n	8001afa <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001af6:	2302      	movs	r3, #2
 8001af8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001afa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	50040300 	.word	0x50040300
 8001b08:	50040100 	.word	0x50040100
 8001b0c:	50040000 	.word	0x50040000

08001b10 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_ADC_Stop+0x16>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e023      	b.n	8001b6e <HAL_ADC_Stop+0x5e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001b2e:	2103      	movs	r1, #3
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fcf9 	bl	8002528 <ADC_ConversionStop>
 8001b36:	4603      	mov	r3, r0
 8001b38:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d111      	bne.n	8001b64 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fe33 	bl	80027ac <ADC_Disable>
 8001b46:	4603      	mov	r3, r0
 8001b48:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d109      	bne.n	8001b64 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b82:	4866      	ldr	r0, [pc, #408]	; (8001d1c <HAL_ADC_PollForConversion+0x1a4>)
 8001b84:	f7ff fca0 	bl	80014c8 <LL_ADC_GetMultimode>
 8001b88:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d102      	bne.n	8001b98 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001b92:	2308      	movs	r3, #8
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	e02a      	b.n	8001bee <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d005      	beq.n	8001baa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b05      	cmp	r3, #5
 8001ba2:	d002      	beq.n	8001baa <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	2b09      	cmp	r3, #9
 8001ba8:	d111      	bne.n	8001bce <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d007      	beq.n	8001bc8 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbc:	f043 0220 	orr.w	r2, r3, #32
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0a4      	b.n	8001d12 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001bc8:	2304      	movs	r3, #4
 8001bca:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001bcc:	e00f      	b.n	8001bee <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001bce:	4853      	ldr	r0, [pc, #332]	; (8001d1c <HAL_ADC_PollForConversion+0x1a4>)
 8001bd0:	f7ff fc88 	bl	80014e4 <LL_ADC_GetMultiDMATransfer>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d007      	beq.n	8001bea <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bde:	f043 0220 	orr.w	r2, r3, #32
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e093      	b.n	8001d12 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001bea:	2304      	movs	r3, #4
 8001bec:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001bee:	f7ff fb47 	bl	8001280 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001bf4:	e021      	b.n	8001c3a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001bfc:	d01d      	beq.n	8001c3a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001bfe:	f7ff fb3f 	bl	8001280 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d302      	bcc.n	8001c14 <HAL_ADC_PollForConversion+0x9c>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d112      	bne.n	8001c3a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10b      	bne.n	8001c3a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c26:	f043 0204 	orr.w	r2, r3, #4
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e06b      	b.n	8001d12 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0d6      	beq.n	8001bf6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fba6 	bl	80013aa <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d01c      	beq.n	8001c9e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7e5b      	ldrb	r3, [r3, #25]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d118      	bne.n	8001c9e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b08      	cmp	r3, #8
 8001c78:	d111      	bne.n	8001c9e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c96:	f043 0201 	orr.w	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1f      	ldr	r2, [pc, #124]	; (8001d20 <HAL_ADC_PollForConversion+0x1a8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d002      	beq.n	8001cae <HAL_ADC_PollForConversion+0x136>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	e000      	b.n	8001cb0 <HAL_ADC_PollForConversion+0x138>
 8001cae:	4b1d      	ldr	r3, [pc, #116]	; (8001d24 <HAL_ADC_PollForConversion+0x1ac>)
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6812      	ldr	r2, [r2, #0]
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d008      	beq.n	8001cca <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d005      	beq.n	8001cca <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d002      	beq.n	8001cca <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	2b09      	cmp	r3, #9
 8001cc8:	d104      	bne.n	8001cd4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	e00c      	b.n	8001cee <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a11      	ldr	r2, [pc, #68]	; (8001d20 <HAL_ADC_PollForConversion+0x1a8>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d002      	beq.n	8001ce4 <HAL_ADC_PollForConversion+0x16c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	e000      	b.n	8001ce6 <HAL_ADC_PollForConversion+0x16e>
 8001ce4:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <HAL_ADC_PollForConversion+0x1ac>)
 8001ce6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	2b08      	cmp	r3, #8
 8001cf2:	d104      	bne.n	8001cfe <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2208      	movs	r2, #8
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	e008      	b.n	8001d10 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d103      	bne.n	8001d10 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	220c      	movs	r2, #12
 8001d0e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3720      	adds	r7, #32
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	50040300 	.word	0x50040300
 8001d20:	50040100 	.word	0x50040100
 8001d24:	50040000 	.word	0x50040000

08001d28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
	...

08001d44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b0b6      	sub	sp, #216	; 0xd8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_ADC_ConfigChannel+0x22>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e3c9      	b.n	80024fa <HAL_ADC_ConfigChannel+0x7b6>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2201      	movs	r2, #1
 8001d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fc88 	bl	8001688 <LL_ADC_REG_IsConversionOngoing>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f040 83aa 	bne.w	80024d4 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	d824      	bhi.n	8001dda <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	3b02      	subs	r3, #2
 8001d96:	2b03      	cmp	r3, #3
 8001d98:	d81b      	bhi.n	8001dd2 <HAL_ADC_ConfigChannel+0x8e>
 8001d9a:	a201      	add	r2, pc, #4	; (adr r2, 8001da0 <HAL_ADC_ConfigChannel+0x5c>)
 8001d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001da0:	08001db1 	.word	0x08001db1
 8001da4:	08001db9 	.word	0x08001db9
 8001da8:	08001dc1 	.word	0x08001dc1
 8001dac:	08001dc9 	.word	0x08001dc9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001db0:	230c      	movs	r3, #12
 8001db2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001db6:	e010      	b.n	8001dda <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001db8:	2312      	movs	r3, #18
 8001dba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001dbe:	e00c      	b.n	8001dda <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001dc0:	2318      	movs	r3, #24
 8001dc2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001dc6:	e008      	b.n	8001dda <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001dc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001dd0:	e003      	b.n	8001dda <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001dd2:	2306      	movs	r3, #6
 8001dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001dd8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6818      	ldr	r0, [r3, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	461a      	mov	r2, r3
 8001de4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001de8:	f7ff faf2 	bl	80013d0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fc49 	bl	8001688 <LL_ADC_REG_IsConversionOngoing>
 8001df6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fc69 	bl	80016d6 <LL_ADC_INJ_IsConversionOngoing>
 8001e04:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f040 81a4 	bne.w	800215a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f040 819f 	bne.w	800215a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6819      	ldr	r1, [r3, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	461a      	mov	r2, r3
 8001e2a:	f7ff fafd 	bl	8001428 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	695a      	ldr	r2, [r3, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	08db      	lsrs	r3, r3, #3
 8001e3a:	f003 0303 	and.w	r3, r3, #3
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	691b      	ldr	r3, [r3, #16]
 8001e4c:	2b04      	cmp	r3, #4
 8001e4e:	d00a      	beq.n	8001e66 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	6919      	ldr	r1, [r3, #16]
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e60:	f7ff fa4e 	bl	8001300 <LL_ADC_SetOffset>
 8001e64:	e179      	b.n	800215a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fa6b 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10a      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x14e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2100      	movs	r1, #0
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fa60 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	0e9b      	lsrs	r3, r3, #26
 8001e8c:	f003 021f 	and.w	r2, r3, #31
 8001e90:	e01e      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x18c>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2100      	movs	r1, #0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fa55 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ea8:	fa93 f3a3 	rbit	r3, r3
 8001eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eb0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001eb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001eb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001ec0:	2320      	movs	r3, #32
 8001ec2:	e004      	b.n	8001ece <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001ec4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ec8:	fab3 f383 	clz	r3, r3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d105      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x1a4>
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0e9b      	lsrs	r3, r3, #26
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	e018      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x1d6>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001efc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001f04:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d101      	bne.n	8001f10 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001f0c:	2320      	movs	r3, #32
 8001f0e:	e004      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001f10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f14:	fab3 f383 	clz	r3, r3
 8001f18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d106      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff fa24 	bl	8001374 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2101      	movs	r1, #1
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff fa08 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10a      	bne.n	8001f58 <HAL_ADC_ConfigChannel+0x214>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2101      	movs	r1, #1
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff f9fd 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	0e9b      	lsrs	r3, r3, #26
 8001f52:	f003 021f 	and.w	r2, r3, #31
 8001f56:	e01e      	b.n	8001f96 <HAL_ADC_ConfigChannel+0x252>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff f9f2 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001f76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001f7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001f86:	2320      	movs	r3, #32
 8001f88:	e004      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001f8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f8e:	fab3 f383 	clz	r3, r3
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d105      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x26a>
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	0e9b      	lsrs	r3, r3, #26
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	e018      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x29c>
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001fc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001fca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001fd2:	2320      	movs	r3, #32
 8001fd4:	e004      	b.n	8001fe0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001fd6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fda:	fab3 f383 	clz	r3, r3
 8001fde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d106      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	2101      	movs	r1, #1
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff f9c1 	bl	8001374 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2102      	movs	r1, #2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff f9a5 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8001ffe:	4603      	mov	r3, r0
 8002000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <HAL_ADC_ConfigChannel+0x2da>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2102      	movs	r1, #2
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff f99a 	bl	8001348 <LL_ADC_GetOffsetChannel>
 8002014:	4603      	mov	r3, r0
 8002016:	0e9b      	lsrs	r3, r3, #26
 8002018:	f003 021f 	and.w	r2, r3, #31
 800201c:	e01e      	b.n	800205c <HAL_ADC_ConfigChannel+0x318>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2102      	movs	r1, #2
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff f98f 	bl	8001348 <LL_ADC_GetOffsetChannel>
 800202a:	4603      	mov	r3, r0
 800202c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800203c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002048:	2b00      	cmp	r3, #0
 800204a:	d101      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800204c:	2320      	movs	r3, #32
 800204e:	e004      	b.n	800205a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x330>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	0e9b      	lsrs	r3, r3, #26
 800206e:	f003 031f 	and.w	r3, r3, #31
 8002072:	e014      	b.n	800209e <HAL_ADC_ConfigChannel+0x35a>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002084:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002088:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800208c:	2b00      	cmp	r3, #0
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002090:	2320      	movs	r3, #32
 8002092:	e004      	b.n	800209e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002094:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002098:	fab3 f383 	clz	r3, r3
 800209c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800209e:	429a      	cmp	r2, r3
 80020a0:	d106      	bne.n	80020b0 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2200      	movs	r2, #0
 80020a8:	2102      	movs	r1, #2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff f962 	bl	8001374 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2103      	movs	r1, #3
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7ff f946 	bl	8001348 <LL_ADC_GetOffsetChannel>
 80020bc:	4603      	mov	r3, r0
 80020be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10a      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x398>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2103      	movs	r1, #3
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff f93b 	bl	8001348 <LL_ADC_GetOffsetChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	0e9b      	lsrs	r3, r3, #26
 80020d6:	f003 021f 	and.w	r2, r3, #31
 80020da:	e017      	b.n	800210c <HAL_ADC_ConfigChannel+0x3c8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2103      	movs	r1, #3
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff f930 	bl	8001348 <LL_ADC_GetOffsetChannel>
 80020e8:	4603      	mov	r3, r0
 80020ea:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ee:	fa93 f3a3 	rbit	r3, r3
 80020f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80020f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80020f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80020fe:	2320      	movs	r3, #32
 8002100:	e003      	b.n	800210a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002102:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002114:	2b00      	cmp	r3, #0
 8002116:	d105      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x3e0>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	0e9b      	lsrs	r3, r3, #26
 800211e:	f003 031f 	and.w	r3, r3, #31
 8002122:	e011      	b.n	8002148 <HAL_ADC_ConfigChannel+0x404>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002134:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002136:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800213c:	2320      	movs	r3, #32
 800213e:	e003      	b.n	8002148 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002140:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002148:	429a      	cmp	r2, r3
 800214a:	d106      	bne.n	800215a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2200      	movs	r2, #0
 8002152:	2103      	movs	r1, #3
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff f90d 	bl	8001374 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fa44 	bl	80015ec <LL_ADC_IsEnabled>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	f040 8140 	bne.w	80023ec <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6818      	ldr	r0, [r3, #0]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	6819      	ldr	r1, [r3, #0]
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	461a      	mov	r2, r3
 800217a:	f7ff f981 	bl	8001480 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	4a8f      	ldr	r2, [pc, #572]	; (80023c0 <HAL_ADC_ConfigChannel+0x67c>)
 8002184:	4293      	cmp	r3, r2
 8002186:	f040 8131 	bne.w	80023ec <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10b      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x46e>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	0e9b      	lsrs	r3, r3, #26
 80021a0:	3301      	adds	r3, #1
 80021a2:	f003 031f 	and.w	r3, r3, #31
 80021a6:	2b09      	cmp	r3, #9
 80021a8:	bf94      	ite	ls
 80021aa:	2301      	movls	r3, #1
 80021ac:	2300      	movhi	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	e019      	b.n	80021e6 <HAL_ADC_ConfigChannel+0x4a2>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021ba:	fa93 f3a3 	rbit	r3, r3
 80021be:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80021c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80021c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80021ca:	2320      	movs	r3, #32
 80021cc:	e003      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80021ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d0:	fab3 f383 	clz	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	f003 031f 	and.w	r3, r3, #31
 80021dc:	2b09      	cmp	r3, #9
 80021de:	bf94      	ite	ls
 80021e0:	2301      	movls	r3, #1
 80021e2:	2300      	movhi	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d079      	beq.n	80022de <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d107      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x4c2>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	0e9b      	lsrs	r3, r3, #26
 80021fc:	3301      	adds	r3, #1
 80021fe:	069b      	lsls	r3, r3, #26
 8002200:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002204:	e015      	b.n	8002232 <HAL_ADC_ConfigChannel+0x4ee>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800220e:	fa93 f3a3 	rbit	r3, r3
 8002212:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002216:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800221e:	2320      	movs	r3, #32
 8002220:	e003      	b.n	800222a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002224:	fab3 f383 	clz	r3, r3
 8002228:	b2db      	uxtb	r3, r3
 800222a:	3301      	adds	r3, #1
 800222c:	069b      	lsls	r3, r3, #26
 800222e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x50e>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	0e9b      	lsrs	r3, r3, #26
 8002244:	3301      	adds	r3, #1
 8002246:	f003 031f 	and.w	r3, r3, #31
 800224a:	2101      	movs	r1, #1
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	e017      	b.n	8002282 <HAL_ADC_ConfigChannel+0x53e>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002262:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800226a:	2320      	movs	r3, #32
 800226c:	e003      	b.n	8002276 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800226e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	3301      	adds	r3, #1
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2101      	movs	r1, #1
 800227e:	fa01 f303 	lsl.w	r3, r1, r3
 8002282:	ea42 0103 	orr.w	r1, r2, r3
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10a      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x564>
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	0e9b      	lsrs	r3, r3, #26
 8002298:	3301      	adds	r3, #1
 800229a:	f003 021f 	and.w	r2, r3, #31
 800229e:	4613      	mov	r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	051b      	lsls	r3, r3, #20
 80022a6:	e018      	b.n	80022da <HAL_ADC_ConfigChannel+0x596>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80022ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80022c0:	2320      	movs	r3, #32
 80022c2:	e003      	b.n	80022cc <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80022c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c6:	fab3 f383 	clz	r3, r3
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	3301      	adds	r3, #1
 80022ce:	f003 021f 	and.w	r2, r3, #31
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022da:	430b      	orrs	r3, r1
 80022dc:	e081      	b.n	80023e2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d107      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x5b6>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	0e9b      	lsrs	r3, r3, #26
 80022f0:	3301      	adds	r3, #1
 80022f2:	069b      	lsls	r3, r3, #26
 80022f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022f8:	e015      	b.n	8002326 <HAL_ADC_ConfigChannel+0x5e2>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002312:	2320      	movs	r3, #32
 8002314:	e003      	b.n	800231e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	3301      	adds	r3, #1
 8002320:	069b      	lsls	r3, r3, #26
 8002322:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232e:	2b00      	cmp	r3, #0
 8002330:	d109      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x602>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	0e9b      	lsrs	r3, r3, #26
 8002338:	3301      	adds	r3, #1
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	2101      	movs	r1, #1
 8002340:	fa01 f303 	lsl.w	r3, r1, r3
 8002344:	e017      	b.n	8002376 <HAL_ADC_ConfigChannel+0x632>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	61bb      	str	r3, [r7, #24]
  return result;
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800235e:	2320      	movs	r3, #32
 8002360:	e003      	b.n	800236a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	3301      	adds	r3, #1
 800236c:	f003 031f 	and.w	r3, r3, #31
 8002370:	2101      	movs	r1, #1
 8002372:	fa01 f303 	lsl.w	r3, r1, r3
 8002376:	ea42 0103 	orr.w	r1, r2, r3
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10d      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x65e>
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	0e9b      	lsrs	r3, r3, #26
 800238c:	3301      	adds	r3, #1
 800238e:	f003 021f 	and.w	r2, r3, #31
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	3b1e      	subs	r3, #30
 800239a:	051b      	lsls	r3, r3, #20
 800239c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023a0:	e01e      	b.n	80023e0 <HAL_ADC_ConfigChannel+0x69c>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	fa93 f3a3 	rbit	r3, r3
 80023ae:	60fb      	str	r3, [r7, #12]
  return result;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d104      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80023ba:	2320      	movs	r3, #32
 80023bc:	e006      	b.n	80023cc <HAL_ADC_ConfigChannel+0x688>
 80023be:	bf00      	nop
 80023c0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	3301      	adds	r3, #1
 80023ce:	f003 021f 	and.w	r2, r3, #31
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	3b1e      	subs	r3, #30
 80023da:	051b      	lsls	r3, r3, #20
 80023dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023e0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023e6:	4619      	mov	r1, r3
 80023e8:	f7ff f81e 	bl	8001428 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b44      	ldr	r3, [pc, #272]	; (8002504 <HAL_ADC_ConfigChannel+0x7c0>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d07a      	beq.n	80024ee <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023f8:	4843      	ldr	r0, [pc, #268]	; (8002508 <HAL_ADC_ConfigChannel+0x7c4>)
 80023fa:	f7fe ff73 	bl	80012e4 <LL_ADC_GetCommonPathInternalCh>
 80023fe:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a41      	ldr	r2, [pc, #260]	; (800250c <HAL_ADC_ConfigChannel+0x7c8>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d12c      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800240c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002410:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d126      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a3c      	ldr	r2, [pc, #240]	; (8002510 <HAL_ADC_ConfigChannel+0x7cc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d004      	beq.n	800242c <HAL_ADC_ConfigChannel+0x6e8>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a3b      	ldr	r2, [pc, #236]	; (8002514 <HAL_ADC_ConfigChannel+0x7d0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d15d      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800242c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002430:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002434:	4619      	mov	r1, r3
 8002436:	4834      	ldr	r0, [pc, #208]	; (8002508 <HAL_ADC_ConfigChannel+0x7c4>)
 8002438:	f7fe ff41 	bl	80012be <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800243c:	4b36      	ldr	r3, [pc, #216]	; (8002518 <HAL_ADC_ConfigChannel+0x7d4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	4a36      	ldr	r2, [pc, #216]	; (800251c <HAL_ADC_ConfigChannel+0x7d8>)
 8002444:	fba2 2303 	umull	r2, r3, r2, r3
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	4613      	mov	r3, r2
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002456:	e002      	b.n	800245e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	3b01      	subs	r3, #1
 800245c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1f9      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002464:	e040      	b.n	80024e8 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a2d      	ldr	r2, [pc, #180]	; (8002520 <HAL_ADC_ConfigChannel+0x7dc>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d118      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002470:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d112      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a23      	ldr	r2, [pc, #140]	; (8002510 <HAL_ADC_ConfigChannel+0x7cc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d004      	beq.n	8002490 <HAL_ADC_ConfigChannel+0x74c>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a22      	ldr	r2, [pc, #136]	; (8002514 <HAL_ADC_ConfigChannel+0x7d0>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d12d      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002490:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002494:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002498:	4619      	mov	r1, r3
 800249a:	481b      	ldr	r0, [pc, #108]	; (8002508 <HAL_ADC_ConfigChannel+0x7c4>)
 800249c:	f7fe ff0f 	bl	80012be <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024a0:	e024      	b.n	80024ec <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1f      	ldr	r2, [pc, #124]	; (8002524 <HAL_ADC_ConfigChannel+0x7e0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d120      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d11a      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a14      	ldr	r2, [pc, #80]	; (8002510 <HAL_ADC_ConfigChannel+0x7cc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d115      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024ca:	4619      	mov	r1, r3
 80024cc:	480e      	ldr	r0, [pc, #56]	; (8002508 <HAL_ADC_ConfigChannel+0x7c4>)
 80024ce:	f7fe fef6 	bl	80012be <LL_ADC_SetCommonPathInternalCh>
 80024d2:	e00c      	b.n	80024ee <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d8:	f043 0220 	orr.w	r2, r3, #32
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80024e6:	e002      	b.n	80024ee <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e8:	bf00      	nop
 80024ea:	e000      	b.n	80024ee <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024ec:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80024f6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	37d8      	adds	r7, #216	; 0xd8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	80080000 	.word	0x80080000
 8002508:	50040300 	.word	0x50040300
 800250c:	c7520000 	.word	0xc7520000
 8002510:	50040000 	.word	0x50040000
 8002514:	50040200 	.word	0x50040200
 8002518:	20000000 	.word	0x20000000
 800251c:	053e2d63 	.word	0x053e2d63
 8002520:	cb840000 	.word	0xcb840000
 8002524:	80000001 	.word	0x80000001

08002528 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff f8a2 	bl	8001688 <LL_ADC_REG_IsConversionOngoing>
 8002544:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff f8c3 	bl	80016d6 <LL_ADC_INJ_IsConversionOngoing>
 8002550:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d103      	bne.n	8002560 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 8098 	beq.w	8002690 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d02a      	beq.n	80025c4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	7e5b      	ldrb	r3, [r3, #25]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d126      	bne.n	80025c4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	7e1b      	ldrb	r3, [r3, #24]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d122      	bne.n	80025c4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800257e:	2301      	movs	r3, #1
 8002580:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002582:	e014      	b.n	80025ae <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	4a45      	ldr	r2, [pc, #276]	; (800269c <ADC_ConversionStop+0x174>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d90d      	bls.n	80025a8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002590:	f043 0210 	orr.w	r2, r3, #16
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	f043 0201 	orr.w	r2, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e074      	b.n	8002692 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	3301      	adds	r3, #1
 80025ac:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b8:	2b40      	cmp	r3, #64	; 0x40
 80025ba:	d1e3      	bne.n	8002584 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2240      	movs	r2, #64	; 0x40
 80025c2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d014      	beq.n	80025f4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff f85a 	bl	8001688 <LL_ADC_REG_IsConversionOngoing>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00c      	beq.n	80025f4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f7ff f817 	bl	8001612 <LL_ADC_IsDisableOngoing>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d104      	bne.n	80025f4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff f836 	bl	8001660 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d014      	beq.n	8002624 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff f869 	bl	80016d6 <LL_ADC_INJ_IsConversionOngoing>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00c      	beq.n	8002624 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f7fe ffff 	bl	8001612 <LL_ADC_IsDisableOngoing>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d104      	bne.n	8002624 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7ff f845 	bl	80016ae <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d005      	beq.n	8002636 <ADC_ConversionStop+0x10e>
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2b03      	cmp	r3, #3
 800262e:	d105      	bne.n	800263c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002630:	230c      	movs	r3, #12
 8002632:	617b      	str	r3, [r7, #20]
        break;
 8002634:	e005      	b.n	8002642 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002636:	2308      	movs	r3, #8
 8002638:	617b      	str	r3, [r7, #20]
        break;
 800263a:	e002      	b.n	8002642 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800263c:	2304      	movs	r3, #4
 800263e:	617b      	str	r3, [r7, #20]
        break;
 8002640:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002642:	f7fe fe1d 	bl	8001280 <HAL_GetTick>
 8002646:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002648:	e01b      	b.n	8002682 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800264a:	f7fe fe19 	bl	8001280 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b05      	cmp	r3, #5
 8002656:	d914      	bls.n	8002682 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689a      	ldr	r2, [r3, #8]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00d      	beq.n	8002682 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266a:	f043 0210 	orr.w	r2, r3, #16
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	f043 0201 	orr.w	r2, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e007      	b.n	8002692 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1dc      	bne.n	800264a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3720      	adds	r7, #32
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	a33fffff 	.word	0xa33fffff

080026a0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fe ff9b 	bl	80015ec <LL_ADC_IsEnabled>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d169      	bne.n	8002790 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	4b36      	ldr	r3, [pc, #216]	; (800279c <ADC_Enable+0xfc>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00d      	beq.n	80026e6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f043 0210 	orr.w	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e055      	b.n	8002792 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7fe ff56 	bl	800159c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026f0:	482b      	ldr	r0, [pc, #172]	; (80027a0 <ADC_Enable+0x100>)
 80026f2:	f7fe fdf7 	bl	80012e4 <LL_ADC_GetCommonPathInternalCh>
 80026f6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80026f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d013      	beq.n	8002728 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002700:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <ADC_Enable+0x104>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	099b      	lsrs	r3, r3, #6
 8002706:	4a28      	ldr	r2, [pc, #160]	; (80027a8 <ADC_Enable+0x108>)
 8002708:	fba2 2303 	umull	r2, r3, r2, r3
 800270c:	099b      	lsrs	r3, r3, #6
 800270e:	1c5a      	adds	r2, r3, #1
 8002710:	4613      	mov	r3, r2
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	4413      	add	r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800271a:	e002      	b.n	8002722 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	3b01      	subs	r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1f9      	bne.n	800271c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002728:	f7fe fdaa 	bl	8001280 <HAL_GetTick>
 800272c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800272e:	e028      	b.n	8002782 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7fe ff59 	bl	80015ec <LL_ADC_IsEnabled>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d104      	bne.n	800274a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7fe ff29 	bl	800159c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800274a:	f7fe fd99 	bl	8001280 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d914      	bls.n	8002782 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b01      	cmp	r3, #1
 8002764:	d00d      	beq.n	8002782 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	f043 0210 	orr.w	r2, r3, #16
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	f043 0201 	orr.w	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e007      	b.n	8002792 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0301 	and.w	r3, r3, #1
 800278c:	2b01      	cmp	r3, #1
 800278e:	d1cf      	bne.n	8002730 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	8000003f 	.word	0x8000003f
 80027a0:	50040300 	.word	0x50040300
 80027a4:	20000000 	.word	0x20000000
 80027a8:	053e2d63 	.word	0x053e2d63

080027ac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fe ff2a 	bl	8001612 <LL_ADC_IsDisableOngoing>
 80027be:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe ff11 	bl	80015ec <LL_ADC_IsEnabled>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d047      	beq.n	8002860 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d144      	bne.n	8002860 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 030d 	and.w	r3, r3, #13
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10c      	bne.n	80027fe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe feeb 	bl	80015c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2203      	movs	r2, #3
 80027f4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027f6:	f7fe fd43 	bl	8001280 <HAL_GetTick>
 80027fa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027fc:	e029      	b.n	8002852 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	f043 0210 	orr.w	r2, r3, #16
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	f043 0201 	orr.w	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e023      	b.n	8002862 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800281a:	f7fe fd31 	bl	8001280 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d914      	bls.n	8002852 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00d      	beq.n	8002852 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f043 0210 	orr.w	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002846:	f043 0201 	orr.w	r2, r3, #1
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e007      	b.n	8002862 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1dc      	bne.n	800281a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <LL_ADC_IsEnabled>:
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <LL_ADC_IsEnabled+0x18>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <LL_ADC_IsEnabled+0x1a>
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <LL_ADC_REG_IsConversionOngoing>:
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b04      	cmp	r3, #4
 80028a2:	d101      	bne.n	80028a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028a4:	2301      	movs	r3, #1
 80028a6:	e000      	b.n	80028aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b09f      	sub	sp, #124	; 0x7c
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e093      	b.n	80029fe <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80028de:	2300      	movs	r3, #0
 80028e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80028e2:	2300      	movs	r3, #0
 80028e4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a47      	ldr	r2, [pc, #284]	; (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d102      	bne.n	80028f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028f0:	4b46      	ldr	r3, [pc, #280]	; (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	e001      	b.n	80028fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10b      	bne.n	8002918 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e072      	b.n	80029fe <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff ffb8 	bl	8002890 <LL_ADC_REG_IsConversionOngoing>
 8002920:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ffb2 	bl	8002890 <LL_ADC_REG_IsConversionOngoing>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d154      	bne.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002934:	2b00      	cmp	r3, #0
 8002936:	d151      	bne.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002938:	4b35      	ldr	r3, [pc, #212]	; (8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800293a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d02c      	beq.n	800299e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	6859      	ldr	r1, [r3, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002956:	035b      	lsls	r3, r3, #13
 8002958:	430b      	orrs	r3, r1
 800295a:	431a      	orrs	r2, r3
 800295c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800295e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002960:	4829      	ldr	r0, [pc, #164]	; (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002962:	f7ff ff82 	bl	800286a <LL_ADC_IsEnabled>
 8002966:	4604      	mov	r4, r0
 8002968:	4828      	ldr	r0, [pc, #160]	; (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800296a:	f7ff ff7e 	bl	800286a <LL_ADC_IsEnabled>
 800296e:	4603      	mov	r3, r0
 8002970:	431c      	orrs	r4, r3
 8002972:	4828      	ldr	r0, [pc, #160]	; (8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002974:	f7ff ff79 	bl	800286a <LL_ADC_IsEnabled>
 8002978:	4603      	mov	r3, r0
 800297a:	4323      	orrs	r3, r4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d137      	bne.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002980:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002988:	f023 030f 	bic.w	r3, r3, #15
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	6811      	ldr	r1, [r2, #0]
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	6892      	ldr	r2, [r2, #8]
 8002994:	430a      	orrs	r2, r1
 8002996:	431a      	orrs	r2, r3
 8002998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800299a:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800299c:	e028      	b.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800299e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029aa:	4817      	ldr	r0, [pc, #92]	; (8002a08 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80029ac:	f7ff ff5d 	bl	800286a <LL_ADC_IsEnabled>
 80029b0:	4604      	mov	r4, r0
 80029b2:	4816      	ldr	r0, [pc, #88]	; (8002a0c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80029b4:	f7ff ff59 	bl	800286a <LL_ADC_IsEnabled>
 80029b8:	4603      	mov	r3, r0
 80029ba:	431c      	orrs	r4, r3
 80029bc:	4815      	ldr	r0, [pc, #84]	; (8002a14 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80029be:	f7ff ff54 	bl	800286a <LL_ADC_IsEnabled>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4323      	orrs	r3, r4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d112      	bne.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029d2:	f023 030f 	bic.w	r3, r3, #15
 80029d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029d8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029da:	e009      	b.n	80029f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e0:	f043 0220 	orr.w	r2, r3, #32
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80029ee:	e000      	b.n	80029f2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80029f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80029fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	377c      	adds	r7, #124	; 0x7c
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd90      	pop	{r4, r7, pc}
 8002a06:	bf00      	nop
 8002a08:	50040000 	.word	0x50040000
 8002a0c:	50040100 	.word	0x50040100
 8002a10:	50040300 	.word	0x50040300
 8002a14:	50040200 	.word	0x50040200

08002a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <__NVIC_SetPriorityGrouping+0x44>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a34:	4013      	ands	r3, r2
 8002a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a4a:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <__NVIC_SetPriorityGrouping+0x44>)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	60d3      	str	r3, [r2, #12]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a64:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <__NVIC_GetPriorityGrouping+0x18>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	0a1b      	lsrs	r3, r3, #8
 8002a6a:	f003 0307 	and.w	r3, r3, #7
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	6039      	str	r1, [r7, #0]
 8002a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	db0a      	blt.n	8002aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	490c      	ldr	r1, [pc, #48]	; (8002ac8 <__NVIC_SetPriority+0x4c>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	0112      	lsls	r2, r2, #4
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002aa4:	e00a      	b.n	8002abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	4908      	ldr	r1, [pc, #32]	; (8002acc <__NVIC_SetPriority+0x50>)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	f003 030f 	and.w	r3, r3, #15
 8002ab2:	3b04      	subs	r3, #4
 8002ab4:	0112      	lsls	r2, r2, #4
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	440b      	add	r3, r1
 8002aba:	761a      	strb	r2, [r3, #24]
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e100 	.word	0xe000e100
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b089      	sub	sp, #36	; 0x24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f1c3 0307 	rsb	r3, r3, #7
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	bf28      	it	cs
 8002aee:	2304      	movcs	r3, #4
 8002af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3304      	adds	r3, #4
 8002af6:	2b06      	cmp	r3, #6
 8002af8:	d902      	bls.n	8002b00 <NVIC_EncodePriority+0x30>
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	3b03      	subs	r3, #3
 8002afe:	e000      	b.n	8002b02 <NVIC_EncodePriority+0x32>
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	401a      	ands	r2, r3
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b22:	43d9      	mvns	r1, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	4313      	orrs	r3, r2
         );
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3724      	adds	r7, #36	; 0x24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
	...

08002b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b48:	d301      	bcc.n	8002b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e00f      	b.n	8002b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	; (8002b78 <SysTick_Config+0x40>)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b56:	210f      	movs	r1, #15
 8002b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b5c:	f7ff ff8e 	bl	8002a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <SysTick_Config+0x40>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b66:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <SysTick_Config+0x40>)
 8002b68:	2207      	movs	r2, #7
 8002b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	e000e010 	.word	0xe000e010

08002b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff47 	bl	8002a18 <__NVIC_SetPriorityGrouping>
}
 8002b8a:	bf00      	nop
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4603      	mov	r3, r0
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba4:	f7ff ff5c 	bl	8002a60 <__NVIC_GetPriorityGrouping>
 8002ba8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	6978      	ldr	r0, [r7, #20]
 8002bb0:	f7ff ff8e 	bl	8002ad0 <NVIC_EncodePriority>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7ff ff5d 	bl	8002a7c <__NVIC_SetPriority>
}
 8002bc2:	bf00      	nop
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff ffb0 	bl	8002b38 <SysTick_Config>
 8002bd8:	4603      	mov	r3, r0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
	...

08002be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bf2:	e17f      	b.n	8002ef4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	4013      	ands	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 8171 	beq.w	8002eee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d005      	beq.n	8002c24 <HAL_GPIO_Init+0x40>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0303 	and.w	r3, r3, #3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d130      	bne.n	8002c86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	2203      	movs	r2, #3
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	693a      	ldr	r2, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c62:	43db      	mvns	r3, r3
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4013      	ands	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	091b      	lsrs	r3, r3, #4
 8002c70:	f003 0201 	and.w	r2, r3, #1
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d118      	bne.n	8002cc4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c98:	2201      	movs	r2, #1
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	08db      	lsrs	r3, r3, #3
 8002cae:	f003 0201 	and.w	r2, r3, #1
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b03      	cmp	r3, #3
 8002cce:	d017      	beq.n	8002d00 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	2203      	movs	r2, #3
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d123      	bne.n	8002d54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	08da      	lsrs	r2, r3, #3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3208      	adds	r2, #8
 8002d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	220f      	movs	r2, #15
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	691a      	ldr	r2, [r3, #16]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	08da      	lsrs	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	3208      	adds	r2, #8
 8002d4e:	6939      	ldr	r1, [r7, #16]
 8002d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f003 0203 	and.w	r2, r3, #3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 80ac 	beq.w	8002eee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d96:	4b5f      	ldr	r3, [pc, #380]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002d98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d9a:	4a5e      	ldr	r2, [pc, #376]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6613      	str	r3, [r2, #96]	; 0x60
 8002da2:	4b5c      	ldr	r3, [pc, #368]	; (8002f14 <HAL_GPIO_Init+0x330>)
 8002da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	60bb      	str	r3, [r7, #8]
 8002dac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002dae:	4a5a      	ldr	r2, [pc, #360]	; (8002f18 <HAL_GPIO_Init+0x334>)
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	3302      	adds	r3, #2
 8002db6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	220f      	movs	r2, #15
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002dd8:	d025      	beq.n	8002e26 <HAL_GPIO_Init+0x242>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a4f      	ldr	r2, [pc, #316]	; (8002f1c <HAL_GPIO_Init+0x338>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d01f      	beq.n	8002e22 <HAL_GPIO_Init+0x23e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a4e      	ldr	r2, [pc, #312]	; (8002f20 <HAL_GPIO_Init+0x33c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d019      	beq.n	8002e1e <HAL_GPIO_Init+0x23a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a4d      	ldr	r2, [pc, #308]	; (8002f24 <HAL_GPIO_Init+0x340>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d013      	beq.n	8002e1a <HAL_GPIO_Init+0x236>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a4c      	ldr	r2, [pc, #304]	; (8002f28 <HAL_GPIO_Init+0x344>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00d      	beq.n	8002e16 <HAL_GPIO_Init+0x232>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a4b      	ldr	r2, [pc, #300]	; (8002f2c <HAL_GPIO_Init+0x348>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d007      	beq.n	8002e12 <HAL_GPIO_Init+0x22e>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a4a      	ldr	r2, [pc, #296]	; (8002f30 <HAL_GPIO_Init+0x34c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d101      	bne.n	8002e0e <HAL_GPIO_Init+0x22a>
 8002e0a:	2306      	movs	r3, #6
 8002e0c:	e00c      	b.n	8002e28 <HAL_GPIO_Init+0x244>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	e00a      	b.n	8002e28 <HAL_GPIO_Init+0x244>
 8002e12:	2305      	movs	r3, #5
 8002e14:	e008      	b.n	8002e28 <HAL_GPIO_Init+0x244>
 8002e16:	2304      	movs	r3, #4
 8002e18:	e006      	b.n	8002e28 <HAL_GPIO_Init+0x244>
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e004      	b.n	8002e28 <HAL_GPIO_Init+0x244>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e002      	b.n	8002e28 <HAL_GPIO_Init+0x244>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <HAL_GPIO_Init+0x244>
 8002e26:	2300      	movs	r3, #0
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	f002 0203 	and.w	r2, r2, #3
 8002e2e:	0092      	lsls	r2, r2, #2
 8002e30:	4093      	lsls	r3, r2
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e38:	4937      	ldr	r1, [pc, #220]	; (8002f18 <HAL_GPIO_Init+0x334>)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	3302      	adds	r3, #2
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e46:	4b3b      	ldr	r3, [pc, #236]	; (8002f34 <HAL_GPIO_Init+0x350>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	43db      	mvns	r3, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4013      	ands	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e6a:	4a32      	ldr	r2, [pc, #200]	; (8002f34 <HAL_GPIO_Init+0x350>)
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e70:	4b30      	ldr	r3, [pc, #192]	; (8002f34 <HAL_GPIO_Init+0x350>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	43db      	mvns	r3, r3
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d003      	beq.n	8002e94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e94:	4a27      	ldr	r2, [pc, #156]	; (8002f34 <HAL_GPIO_Init+0x350>)
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e9a:	4b26      	ldr	r3, [pc, #152]	; (8002f34 <HAL_GPIO_Init+0x350>)
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ebe:	4a1d      	ldr	r2, [pc, #116]	; (8002f34 <HAL_GPIO_Init+0x350>)
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ec4:	4b1b      	ldr	r3, [pc, #108]	; (8002f34 <HAL_GPIO_Init+0x350>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ee8:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <HAL_GPIO_Init+0x350>)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	fa22 f303 	lsr.w	r3, r2, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f47f ae78 	bne.w	8002bf4 <HAL_GPIO_Init+0x10>
  }
}
 8002f04:	bf00      	nop
 8002f06:	bf00      	nop
 8002f08:	371c      	adds	r7, #28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40010000 	.word	0x40010000
 8002f1c:	48000400 	.word	0x48000400
 8002f20:	48000800 	.word	0x48000800
 8002f24:	48000c00 	.word	0x48000c00
 8002f28:	48001000 	.word	0x48001000
 8002f2c:	48001400 	.word	0x48001400
 8002f30:	48001800 	.word	0x48001800
 8002f34:	40010400 	.word	0x40010400

08002f38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	460b      	mov	r3, r1
 8002f42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	887b      	ldrh	r3, [r7, #2]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d002      	beq.n	8002f56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
 8002f54:	e001      	b.n	8002f5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
 8002f74:	4613      	mov	r3, r2
 8002f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f78:	787b      	ldrb	r3, [r7, #1]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f7e:	887a      	ldrh	r2, [r7, #2]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f84:	e002      	b.n	8002f8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f86:	887a      	ldrh	r2, [r7, #2]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	40007000 	.word	0x40007000

08002fb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fc2:	d130      	bne.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fc4:	4b23      	ldr	r3, [pc, #140]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd0:	d038      	beq.n	8003044 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fd2:	4b20      	ldr	r3, [pc, #128]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002fda:	4a1e      	ldr	r2, [pc, #120]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002fdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fe0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2232      	movs	r2, #50	; 0x32
 8002fe8:	fb02 f303 	mul.w	r3, r2, r3
 8002fec:	4a1b      	ldr	r2, [pc, #108]	; (800305c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	0c9b      	lsrs	r3, r3, #18
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ff8:	e002      	b.n	8003000 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003000:	4b14      	ldr	r3, [pc, #80]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003002:	695b      	ldr	r3, [r3, #20]
 8003004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800300c:	d102      	bne.n	8003014 <HAL_PWREx_ControlVoltageScaling+0x60>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f2      	bne.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003014:	4b0f      	ldr	r3, [pc, #60]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800301c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003020:	d110      	bne.n	8003044 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e00f      	b.n	8003046 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003026:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800302e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003032:	d007      	beq.n	8003044 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003034:	4b07      	ldr	r3, [pc, #28]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800303c:	4a05      	ldr	r2, [pc, #20]	; (8003054 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800303e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003042:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40007000 	.word	0x40007000
 8003058:	20000000 	.word	0x20000000
 800305c:	431bde83 	.word	0x431bde83

08003060 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e3ca      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003072:	4b97      	ldr	r3, [pc, #604]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
 800307a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800307c:	4b94      	ldr	r3, [pc, #592]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f003 0303 	and.w	r3, r3, #3
 8003084:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 80e4 	beq.w	800325c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <HAL_RCC_OscConfig+0x4a>
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	2b0c      	cmp	r3, #12
 800309e:	f040 808b 	bne.w	80031b8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	f040 8087 	bne.w	80031b8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030aa:	4b89      	ldr	r3, [pc, #548]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_RCC_OscConfig+0x62>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e3a2      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1a      	ldr	r2, [r3, #32]
 80030c6:	4b82      	ldr	r3, [pc, #520]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d004      	beq.n	80030dc <HAL_RCC_OscConfig+0x7c>
 80030d2:	4b7f      	ldr	r3, [pc, #508]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030da:	e005      	b.n	80030e8 <HAL_RCC_OscConfig+0x88>
 80030dc:	4b7c      	ldr	r3, [pc, #496]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80030de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d223      	bcs.n	8003134 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fd55 	bl	8003ba0 <RCC_SetFlashLatencyFromMSIRange>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e383      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003100:	4b73      	ldr	r3, [pc, #460]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a72      	ldr	r2, [pc, #456]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003106:	f043 0308 	orr.w	r3, r3, #8
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	4b70      	ldr	r3, [pc, #448]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a1b      	ldr	r3, [r3, #32]
 8003118:	496d      	ldr	r1, [pc, #436]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800311a:	4313      	orrs	r3, r2
 800311c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800311e:	4b6c      	ldr	r3, [pc, #432]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	021b      	lsls	r3, r3, #8
 800312c:	4968      	ldr	r1, [pc, #416]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800312e:	4313      	orrs	r3, r2
 8003130:	604b      	str	r3, [r1, #4]
 8003132:	e025      	b.n	8003180 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003134:	4b66      	ldr	r3, [pc, #408]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a65      	ldr	r2, [pc, #404]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800313a:	f043 0308 	orr.w	r3, r3, #8
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	4b63      	ldr	r3, [pc, #396]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4960      	ldr	r1, [pc, #384]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800314e:	4313      	orrs	r3, r2
 8003150:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003152:	4b5f      	ldr	r3, [pc, #380]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	021b      	lsls	r3, r3, #8
 8003160:	495b      	ldr	r1, [pc, #364]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d109      	bne.n	8003180 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a1b      	ldr	r3, [r3, #32]
 8003170:	4618      	mov	r0, r3
 8003172:	f000 fd15 	bl	8003ba0 <RCC_SetFlashLatencyFromMSIRange>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e343      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003180:	f000 fc4a 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 8003184:	4602      	mov	r2, r0
 8003186:	4b52      	ldr	r3, [pc, #328]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	4950      	ldr	r1, [pc, #320]	; (80032d4 <HAL_RCC_OscConfig+0x274>)
 8003192:	5ccb      	ldrb	r3, [r1, r3]
 8003194:	f003 031f 	and.w	r3, r3, #31
 8003198:	fa22 f303 	lsr.w	r3, r2, r3
 800319c:	4a4e      	ldr	r2, [pc, #312]	; (80032d8 <HAL_RCC_OscConfig+0x278>)
 800319e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80031a0:	4b4e      	ldr	r3, [pc, #312]	; (80032dc <HAL_RCC_OscConfig+0x27c>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7fe f81b 	bl	80011e0 <HAL_InitTick>
 80031aa:	4603      	mov	r3, r0
 80031ac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d052      	beq.n	800325a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	e327      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d032      	beq.n	8003226 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031c0:	4b43      	ldr	r3, [pc, #268]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a42      	ldr	r2, [pc, #264]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031cc:	f7fe f858 	bl	8001280 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031d4:	f7fe f854 	bl	8001280 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e310      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031e6:	4b3a      	ldr	r3, [pc, #232]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031f2:	4b37      	ldr	r3, [pc, #220]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a36      	ldr	r2, [pc, #216]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80031f8:	f043 0308 	orr.w	r3, r3, #8
 80031fc:	6013      	str	r3, [r2, #0]
 80031fe:	4b34      	ldr	r3, [pc, #208]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	4931      	ldr	r1, [pc, #196]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800320c:	4313      	orrs	r3, r2
 800320e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003210:	4b2f      	ldr	r3, [pc, #188]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	492c      	ldr	r1, [pc, #176]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
 8003224:	e01a      	b.n	800325c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003226:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a29      	ldr	r2, [pc, #164]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800322c:	f023 0301 	bic.w	r3, r3, #1
 8003230:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003232:	f7fe f825 	bl	8001280 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800323a:	f7fe f821 	bl	8001280 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e2dd      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800324c:	4b20      	ldr	r3, [pc, #128]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f0      	bne.n	800323a <HAL_RCC_OscConfig+0x1da>
 8003258:	e000      	b.n	800325c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800325a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0301 	and.w	r3, r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	d074      	beq.n	8003352 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	2b08      	cmp	r3, #8
 800326c:	d005      	beq.n	800327a <HAL_RCC_OscConfig+0x21a>
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2b0c      	cmp	r3, #12
 8003272:	d10e      	bne.n	8003292 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b03      	cmp	r3, #3
 8003278:	d10b      	bne.n	8003292 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327a:	4b15      	ldr	r3, [pc, #84]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d064      	beq.n	8003350 <HAL_RCC_OscConfig+0x2f0>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d160      	bne.n	8003350 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e2ba      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329a:	d106      	bne.n	80032aa <HAL_RCC_OscConfig+0x24a>
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0b      	ldr	r2, [pc, #44]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80032a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	e026      	b.n	80032f8 <HAL_RCC_OscConfig+0x298>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b2:	d115      	bne.n	80032e0 <HAL_RCC_OscConfig+0x280>
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a05      	ldr	r2, [pc, #20]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80032ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a02      	ldr	r2, [pc, #8]	; (80032d0 <HAL_RCC_OscConfig+0x270>)
 80032c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	e014      	b.n	80032f8 <HAL_RCC_OscConfig+0x298>
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
 80032d4:	08009af4 	.word	0x08009af4
 80032d8:	20000000 	.word	0x20000000
 80032dc:	20000004 	.word	0x20000004
 80032e0:	4ba0      	ldr	r3, [pc, #640]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a9f      	ldr	r2, [pc, #636]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 80032e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ea:	6013      	str	r3, [r2, #0]
 80032ec:	4b9d      	ldr	r3, [pc, #628]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a9c      	ldr	r2, [pc, #624]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 80032f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d013      	beq.n	8003328 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003300:	f7fd ffbe 	bl	8001280 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003308:	f7fd ffba 	bl	8001280 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b64      	cmp	r3, #100	; 0x64
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e276      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800331a:	4b92      	ldr	r3, [pc, #584]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d0f0      	beq.n	8003308 <HAL_RCC_OscConfig+0x2a8>
 8003326:	e014      	b.n	8003352 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fd ffaa 	bl	8001280 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003330:	f7fd ffa6 	bl	8001280 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b64      	cmp	r3, #100	; 0x64
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e262      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003342:	4b88      	ldr	r3, [pc, #544]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x2d0>
 800334e:	e000      	b.n	8003352 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d060      	beq.n	8003420 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	2b04      	cmp	r3, #4
 8003362:	d005      	beq.n	8003370 <HAL_RCC_OscConfig+0x310>
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	2b0c      	cmp	r3, #12
 8003368:	d119      	bne.n	800339e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2b02      	cmp	r3, #2
 800336e:	d116      	bne.n	800339e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003370:	4b7c      	ldr	r3, [pc, #496]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_OscConfig+0x328>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e23f      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003388:	4b76      	ldr	r3, [pc, #472]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	061b      	lsls	r3, r3, #24
 8003396:	4973      	ldr	r1, [pc, #460]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800339c:	e040      	b.n	8003420 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d023      	beq.n	80033ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a6:	4b6f      	ldr	r3, [pc, #444]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a6e      	ldr	r2, [pc, #440]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 80033ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b2:	f7fd ff65 	bl	8001280 <HAL_GetTick>
 80033b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033b8:	e008      	b.n	80033cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033ba:	f7fd ff61 	bl	8001280 <HAL_GetTick>
 80033be:	4602      	mov	r2, r0
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d901      	bls.n	80033cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e21d      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80033cc:	4b65      	ldr	r3, [pc, #404]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0f0      	beq.n	80033ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d8:	4b62      	ldr	r3, [pc, #392]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	061b      	lsls	r3, r3, #24
 80033e6:	495f      	ldr	r1, [pc, #380]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	604b      	str	r3, [r1, #4]
 80033ec:	e018      	b.n	8003420 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ee:	4b5d      	ldr	r3, [pc, #372]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a5c      	ldr	r2, [pc, #368]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 80033f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fa:	f7fd ff41 	bl	8001280 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003402:	f7fd ff3d 	bl	8001280 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e1f9      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003414:	4b53      	ldr	r3, [pc, #332]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f0      	bne.n	8003402 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d03c      	beq.n	80034a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01c      	beq.n	800346e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003434:	4b4b      	ldr	r3, [pc, #300]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 8003436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800343a:	4a4a      	ldr	r2, [pc, #296]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 800343c:	f043 0301 	orr.w	r3, r3, #1
 8003440:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003444:	f7fd ff1c 	bl	8001280 <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800344c:	f7fd ff18 	bl	8001280 <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e1d4      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800345e:	4b41      	ldr	r3, [pc, #260]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 8003460:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	2b00      	cmp	r3, #0
 800346a:	d0ef      	beq.n	800344c <HAL_RCC_OscConfig+0x3ec>
 800346c:	e01b      	b.n	80034a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800346e:	4b3d      	ldr	r3, [pc, #244]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 8003470:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003474:	4a3b      	ldr	r2, [pc, #236]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 8003476:	f023 0301 	bic.w	r3, r3, #1
 800347a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800347e:	f7fd feff 	bl	8001280 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003486:	f7fd fefb 	bl	8001280 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1b7      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003498:	4b32      	ldr	r3, [pc, #200]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 800349a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1ef      	bne.n	8003486 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 80a6 	beq.w	8003600 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034b4:	2300      	movs	r3, #0
 80034b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80034b8:	4b2a      	ldr	r3, [pc, #168]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 80034ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10d      	bne.n	80034e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c4:	4b27      	ldr	r3, [pc, #156]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c8:	4a26      	ldr	r2, [pc, #152]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 80034ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034ce:	6593      	str	r3, [r2, #88]	; 0x58
 80034d0:	4b24      	ldr	r3, [pc, #144]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034dc:	2301      	movs	r3, #1
 80034de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034e0:	4b21      	ldr	r3, [pc, #132]	; (8003568 <HAL_RCC_OscConfig+0x508>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d118      	bne.n	800351e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034ec:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <HAL_RCC_OscConfig+0x508>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1d      	ldr	r2, [pc, #116]	; (8003568 <HAL_RCC_OscConfig+0x508>)
 80034f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f8:	f7fd fec2 	bl	8001280 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003500:	f7fd febe 	bl	8001280 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e17a      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003512:	4b15      	ldr	r3, [pc, #84]	; (8003568 <HAL_RCC_OscConfig+0x508>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d0f0      	beq.n	8003500 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d108      	bne.n	8003538 <HAL_RCC_OscConfig+0x4d8>
 8003526:	4b0f      	ldr	r3, [pc, #60]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 8003528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352c:	4a0d      	ldr	r2, [pc, #52]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003536:	e029      	b.n	800358c <HAL_RCC_OscConfig+0x52c>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b05      	cmp	r3, #5
 800353e:	d115      	bne.n	800356c <HAL_RCC_OscConfig+0x50c>
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003546:	4a07      	ldr	r2, [pc, #28]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 8003548:	f043 0304 	orr.w	r3, r3, #4
 800354c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 8003552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003556:	4a03      	ldr	r2, [pc, #12]	; (8003564 <HAL_RCC_OscConfig+0x504>)
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003560:	e014      	b.n	800358c <HAL_RCC_OscConfig+0x52c>
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000
 8003568:	40007000 	.word	0x40007000
 800356c:	4b9c      	ldr	r3, [pc, #624]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	4a9b      	ldr	r2, [pc, #620]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 8003574:	f023 0301 	bic.w	r3, r3, #1
 8003578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800357c:	4b98      	ldr	r3, [pc, #608]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	4a97      	ldr	r2, [pc, #604]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 8003584:	f023 0304 	bic.w	r3, r3, #4
 8003588:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d016      	beq.n	80035c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003594:	f7fd fe74 	bl	8001280 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800359a:	e00a      	b.n	80035b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359c:	f7fd fe70 	bl	8001280 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e12a      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035b2:	4b8b      	ldr	r3, [pc, #556]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 80035b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ed      	beq.n	800359c <HAL_RCC_OscConfig+0x53c>
 80035c0:	e015      	b.n	80035ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c2:	f7fd fe5d 	bl	8001280 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035c8:	e00a      	b.n	80035e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ca:	f7fd fe59 	bl	8001280 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d8:	4293      	cmp	r3, r2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e113      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035e0:	4b7f      	ldr	r3, [pc, #508]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 80035e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1ed      	bne.n	80035ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ee:	7ffb      	ldrb	r3, [r7, #31]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d105      	bne.n	8003600 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f4:	4b7a      	ldr	r3, [pc, #488]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	4a79      	ldr	r2, [pc, #484]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 80035fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80fe 	beq.w	8003806 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	2b02      	cmp	r3, #2
 8003610:	f040 80d0 	bne.w	80037b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003614:	4b72      	ldr	r3, [pc, #456]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	f003 0203 	and.w	r2, r3, #3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	429a      	cmp	r2, r3
 8003626:	d130      	bne.n	800368a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	3b01      	subs	r3, #1
 8003634:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d127      	bne.n	800368a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003644:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d11f      	bne.n	800368a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003654:	2a07      	cmp	r2, #7
 8003656:	bf14      	ite	ne
 8003658:	2201      	movne	r2, #1
 800365a:	2200      	moveq	r2, #0
 800365c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800365e:	4293      	cmp	r3, r2
 8003660:	d113      	bne.n	800368a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	3b01      	subs	r3, #1
 8003670:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d109      	bne.n	800368a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	3b01      	subs	r3, #1
 8003684:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003686:	429a      	cmp	r2, r3
 8003688:	d06e      	beq.n	8003768 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b0c      	cmp	r3, #12
 800368e:	d069      	beq.n	8003764 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003690:	4b53      	ldr	r3, [pc, #332]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d105      	bne.n	80036a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800369c:	4b50      	ldr	r3, [pc, #320]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e0ad      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036ac:	4b4c      	ldr	r3, [pc, #304]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a4b      	ldr	r2, [pc, #300]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 80036b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036b8:	f7fd fde2 	bl	8001280 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036c0:	f7fd fdde 	bl	8001280 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e09a      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036d2:	4b43      	ldr	r3, [pc, #268]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1f0      	bne.n	80036c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036de:	4b40      	ldr	r3, [pc, #256]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	4b40      	ldr	r3, [pc, #256]	; (80037e4 <HAL_RCC_OscConfig+0x784>)
 80036e4:	4013      	ands	r3, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80036ee:	3a01      	subs	r2, #1
 80036f0:	0112      	lsls	r2, r2, #4
 80036f2:	4311      	orrs	r1, r2
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80036f8:	0212      	lsls	r2, r2, #8
 80036fa:	4311      	orrs	r1, r2
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003700:	0852      	lsrs	r2, r2, #1
 8003702:	3a01      	subs	r2, #1
 8003704:	0552      	lsls	r2, r2, #21
 8003706:	4311      	orrs	r1, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800370c:	0852      	lsrs	r2, r2, #1
 800370e:	3a01      	subs	r2, #1
 8003710:	0652      	lsls	r2, r2, #25
 8003712:	4311      	orrs	r1, r2
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003718:	0912      	lsrs	r2, r2, #4
 800371a:	0452      	lsls	r2, r2, #17
 800371c:	430a      	orrs	r2, r1
 800371e:	4930      	ldr	r1, [pc, #192]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 8003720:	4313      	orrs	r3, r2
 8003722:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003724:	4b2e      	ldr	r3, [pc, #184]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a2d      	ldr	r2, [pc, #180]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 800372a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800372e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003730:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4a2a      	ldr	r2, [pc, #168]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 8003736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800373a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800373c:	f7fd fda0 	bl	8001280 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003744:	f7fd fd9c 	bl	8001280 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b02      	cmp	r3, #2
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e058      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003756:	4b22      	ldr	r3, [pc, #136]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003762:	e050      	b.n	8003806 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e04f      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003768:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d148      	bne.n	8003806 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003774:	4b1a      	ldr	r3, [pc, #104]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a19      	ldr	r2, [pc, #100]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003780:	4b17      	ldr	r3, [pc, #92]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a16      	ldr	r2, [pc, #88]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800378a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800378c:	f7fd fd78 	bl	8001280 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003794:	f7fd fd74 	bl	8001280 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e030      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a6:	4b0e      	ldr	r3, [pc, #56]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x734>
 80037b2:	e028      	b.n	8003806 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d023      	beq.n	8003802 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ba:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a08      	ldr	r2, [pc, #32]	; (80037e0 <HAL_RCC_OscConfig+0x780>)
 80037c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7fd fd5b 	bl	8001280 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037cc:	e00c      	b.n	80037e8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ce:	f7fd fd57 	bl	8001280 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d905      	bls.n	80037e8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e013      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
 80037e0:	40021000 	.word	0x40021000
 80037e4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e8:	4b09      	ldr	r3, [pc, #36]	; (8003810 <HAL_RCC_OscConfig+0x7b0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ec      	bne.n	80037ce <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80037f4:	4b06      	ldr	r3, [pc, #24]	; (8003810 <HAL_RCC_OscConfig+0x7b0>)
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	4905      	ldr	r1, [pc, #20]	; (8003810 <HAL_RCC_OscConfig+0x7b0>)
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_RCC_OscConfig+0x7b4>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	60cb      	str	r3, [r1, #12]
 8003800:	e001      	b.n	8003806 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e000      	b.n	8003808 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3720      	adds	r7, #32
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40021000 	.word	0x40021000
 8003814:	feeefffc 	.word	0xfeeefffc

08003818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d101      	bne.n	800382c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0e7      	b.n	80039fc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800382c:	4b75      	ldr	r3, [pc, #468]	; (8003a04 <HAL_RCC_ClockConfig+0x1ec>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d910      	bls.n	800385c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383a:	4b72      	ldr	r3, [pc, #456]	; (8003a04 <HAL_RCC_ClockConfig+0x1ec>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 0207 	bic.w	r2, r3, #7
 8003842:	4970      	ldr	r1, [pc, #448]	; (8003a04 <HAL_RCC_ClockConfig+0x1ec>)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	4313      	orrs	r3, r2
 8003848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800384a:	4b6e      	ldr	r3, [pc, #440]	; (8003a04 <HAL_RCC_ClockConfig+0x1ec>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e0cf      	b.n	80039fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0302 	and.w	r3, r3, #2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d010      	beq.n	800388a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	4b66      	ldr	r3, [pc, #408]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003874:	429a      	cmp	r2, r3
 8003876:	d908      	bls.n	800388a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003878:	4b63      	ldr	r3, [pc, #396]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	4960      	ldr	r1, [pc, #384]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 8003886:	4313      	orrs	r3, r2
 8003888:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	2b00      	cmp	r3, #0
 8003894:	d04c      	beq.n	8003930 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2b03      	cmp	r3, #3
 800389c:	d107      	bne.n	80038ae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800389e:	4b5a      	ldr	r3, [pc, #360]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d121      	bne.n	80038ee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e0a6      	b.n	80039fc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038b6:	4b54      	ldr	r3, [pc, #336]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d115      	bne.n	80038ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e09a      	b.n	80039fc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d107      	bne.n	80038de <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038ce:	4b4e      	ldr	r3, [pc, #312]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d109      	bne.n	80038ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e08e      	b.n	80039fc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038de:	4b4a      	ldr	r3, [pc, #296]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d101      	bne.n	80038ee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e086      	b.n	80039fc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038ee:	4b46      	ldr	r3, [pc, #280]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f023 0203 	bic.w	r2, r3, #3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4943      	ldr	r1, [pc, #268]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003900:	f7fd fcbe 	bl	8001280 <HAL_GetTick>
 8003904:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	e00a      	b.n	800391e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003908:	f7fd fcba 	bl	8001280 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f241 3288 	movw	r2, #5000	; 0x1388
 8003916:	4293      	cmp	r3, r2
 8003918:	d901      	bls.n	800391e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800391a:	2303      	movs	r3, #3
 800391c:	e06e      	b.n	80039fc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800391e:	4b3a      	ldr	r3, [pc, #232]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f003 020c 	and.w	r2, r3, #12
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	429a      	cmp	r2, r3
 800392e:	d1eb      	bne.n	8003908 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d010      	beq.n	800395e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	4b31      	ldr	r3, [pc, #196]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003948:	429a      	cmp	r2, r3
 800394a:	d208      	bcs.n	800395e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800394c:	4b2e      	ldr	r3, [pc, #184]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	492b      	ldr	r1, [pc, #172]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800395e:	4b29      	ldr	r3, [pc, #164]	; (8003a04 <HAL_RCC_ClockConfig+0x1ec>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0307 	and.w	r3, r3, #7
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	429a      	cmp	r2, r3
 800396a:	d210      	bcs.n	800398e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396c:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <HAL_RCC_ClockConfig+0x1ec>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f023 0207 	bic.w	r2, r3, #7
 8003974:	4923      	ldr	r1, [pc, #140]	; (8003a04 <HAL_RCC_ClockConfig+0x1ec>)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	4313      	orrs	r3, r2
 800397a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800397c:	4b21      	ldr	r3, [pc, #132]	; (8003a04 <HAL_RCC_ClockConfig+0x1ec>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	d001      	beq.n	800398e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e036      	b.n	80039fc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800399a:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	4918      	ldr	r1, [pc, #96]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d009      	beq.n	80039cc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039b8:	4b13      	ldr	r3, [pc, #76]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	691b      	ldr	r3, [r3, #16]
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	4910      	ldr	r1, [pc, #64]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80039cc:	f000 f824 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 80039d0:	4602      	mov	r2, r0
 80039d2:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <HAL_RCC_ClockConfig+0x1f0>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	490b      	ldr	r1, [pc, #44]	; (8003a0c <HAL_RCC_ClockConfig+0x1f4>)
 80039de:	5ccb      	ldrb	r3, [r1, r3]
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	fa22 f303 	lsr.w	r3, r2, r3
 80039e8:	4a09      	ldr	r2, [pc, #36]	; (8003a10 <HAL_RCC_ClockConfig+0x1f8>)
 80039ea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <HAL_RCC_ClockConfig+0x1fc>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fd fbf5 	bl	80011e0 <HAL_InitTick>
 80039f6:	4603      	mov	r3, r0
 80039f8:	72fb      	strb	r3, [r7, #11]

  return status;
 80039fa:	7afb      	ldrb	r3, [r7, #11]
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40022000 	.word	0x40022000
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	08009af4 	.word	0x08009af4
 8003a10:	20000000 	.word	0x20000000
 8003a14:	20000004 	.word	0x20000004

08003a18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	; 0x24
 8003a1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	2300      	movs	r3, #0
 8003a24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a26:	4b3e      	ldr	r3, [pc, #248]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a30:	4b3b      	ldr	r3, [pc, #236]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_GetSysClockFreq+0x34>
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	2b0c      	cmp	r3, #12
 8003a44:	d121      	bne.n	8003a8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d11e      	bne.n	8003a8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003a4c:	4b34      	ldr	r3, [pc, #208]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d107      	bne.n	8003a68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003a58:	4b31      	ldr	r3, [pc, #196]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a5e:	0a1b      	lsrs	r3, r3, #8
 8003a60:	f003 030f 	and.w	r3, r3, #15
 8003a64:	61fb      	str	r3, [r7, #28]
 8003a66:	e005      	b.n	8003a74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003a68:	4b2d      	ldr	r3, [pc, #180]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003a74:	4a2b      	ldr	r2, [pc, #172]	; (8003b24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a88:	e00a      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d102      	bne.n	8003a96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a92:	61bb      	str	r3, [r7, #24]
 8003a94:	e004      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d101      	bne.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a9c:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x114>)
 8003a9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b0c      	cmp	r3, #12
 8003aa4:	d134      	bne.n	8003b10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003aa6:	4b1e      	ldr	r3, [pc, #120]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d003      	beq.n	8003abe <HAL_RCC_GetSysClockFreq+0xa6>
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d003      	beq.n	8003ac4 <HAL_RCC_GetSysClockFreq+0xac>
 8003abc:	e005      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003abe:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ac0:	617b      	str	r3, [r7, #20]
      break;
 8003ac2:	e005      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x114>)
 8003ac6:	617b      	str	r3, [r7, #20]
      break;
 8003ac8:	e002      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	617b      	str	r3, [r7, #20]
      break;
 8003ace:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ad0:	4b13      	ldr	r3, [pc, #76]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	3301      	adds	r3, #1
 8003adc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ade:	4b10      	ldr	r3, [pc, #64]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	0a1b      	lsrs	r3, r3, #8
 8003ae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	fb03 f202 	mul.w	r2, r3, r2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x108>)
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	0e5b      	lsrs	r3, r3, #25
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	3301      	adds	r3, #1
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003b10:	69bb      	ldr	r3, [r7, #24]
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3724      	adds	r7, #36	; 0x24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40021000 	.word	0x40021000
 8003b24:	08009b0c 	.word	0x08009b0c
 8003b28:	00f42400 	.word	0x00f42400
 8003b2c:	007a1200 	.word	0x007a1200

08003b30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b36:	681b      	ldr	r3, [r3, #0]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	20000000 	.word	0x20000000

08003b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003b4c:	f7ff fff0 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b50:	4602      	mov	r2, r0
 8003b52:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	0a1b      	lsrs	r3, r3, #8
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	4904      	ldr	r1, [pc, #16]	; (8003b70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b5e:	5ccb      	ldrb	r3, [r1, r3]
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	08009b04 	.word	0x08009b04

08003b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003b78:	f7ff ffda 	bl	8003b30 <HAL_RCC_GetHCLKFreq>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	0adb      	lsrs	r3, r3, #11
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	4904      	ldr	r1, [pc, #16]	; (8003b9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b8a:	5ccb      	ldrb	r3, [r1, r3]
 8003b8c:	f003 031f 	and.w	r3, r3, #31
 8003b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	08009b04 	.word	0x08009b04

08003ba0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b086      	sub	sp, #24
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ba8:	2300      	movs	r3, #0
 8003baa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003bac:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003bb8:	f7ff f9ee 	bl	8002f98 <HAL_PWREx_GetVoltageRange>
 8003bbc:	6178      	str	r0, [r7, #20]
 8003bbe:	e014      	b.n	8003bea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bc0:	4b25      	ldr	r3, [pc, #148]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc4:	4a24      	ldr	r2, [pc, #144]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bca:	6593      	str	r3, [r2, #88]	; 0x58
 8003bcc:	4b22      	ldr	r3, [pc, #136]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	60fb      	str	r3, [r7, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003bd8:	f7ff f9de 	bl	8002f98 <HAL_PWREx_GetVoltageRange>
 8003bdc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003bde:	4b1e      	ldr	r3, [pc, #120]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be2:	4a1d      	ldr	r2, [pc, #116]	; (8003c58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf0:	d10b      	bne.n	8003c0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b80      	cmp	r3, #128	; 0x80
 8003bf6:	d919      	bls.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2ba0      	cmp	r3, #160	; 0xa0
 8003bfc:	d902      	bls.n	8003c04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003bfe:	2302      	movs	r3, #2
 8003c00:	613b      	str	r3, [r7, #16]
 8003c02:	e013      	b.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c04:	2301      	movs	r3, #1
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	e010      	b.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d902      	bls.n	8003c16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003c10:	2303      	movs	r3, #3
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	e00a      	b.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2b80      	cmp	r3, #128	; 0x80
 8003c1a:	d102      	bne.n	8003c22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	613b      	str	r3, [r7, #16]
 8003c20:	e004      	b.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2b70      	cmp	r3, #112	; 0x70
 8003c26:	d101      	bne.n	8003c2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c28:	2301      	movs	r3, #1
 8003c2a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f023 0207 	bic.w	r2, r3, #7
 8003c34:	4909      	ldr	r1, [pc, #36]	; (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c3c:	4b07      	ldr	r3, [pc, #28]	; (8003c5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d001      	beq.n	8003c4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e000      	b.n	8003c50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40022000 	.word	0x40022000

08003c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c68:	2300      	movs	r3, #0
 8003c6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d041      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c80:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c84:	d02a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003c86:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003c8a:	d824      	bhi.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c90:	d008      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003c92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003c96:	d81e      	bhi.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca0:	d010      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ca2:	e018      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ca4:	4b86      	ldr	r3, [pc, #536]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	4a85      	ldr	r2, [pc, #532]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003caa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cb0:	e015      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f000 fabb 	bl	8004234 <RCCEx_PLLSAI1_Config>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cc2:	e00c      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3320      	adds	r3, #32
 8003cc8:	2100      	movs	r1, #0
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fba6 	bl	800441c <RCCEx_PLLSAI2_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cd4:	e003      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	74fb      	strb	r3, [r7, #19]
      break;
 8003cda:	e000      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003cdc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003cde:	7cfb      	ldrb	r3, [r7, #19]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10b      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ce4:	4b76      	ldr	r3, [pc, #472]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cf2:	4973      	ldr	r1, [pc, #460]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cfa:	e001      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cfc:	7cfb      	ldrb	r3, [r7, #19]
 8003cfe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d041      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d10:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d14:	d02a      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003d16:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003d1a:	d824      	bhi.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d20:	d008      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003d22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003d26:	d81e      	bhi.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d30:	d010      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d32:	e018      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d34:	4b62      	ldr	r3, [pc, #392]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4a61      	ldr	r2, [pc, #388]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d40:	e015      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	3304      	adds	r3, #4
 8003d46:	2100      	movs	r1, #0
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 fa73 	bl	8004234 <RCCEx_PLLSAI1_Config>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d52:	e00c      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3320      	adds	r3, #32
 8003d58:	2100      	movs	r1, #0
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 fb5e 	bl	800441c <RCCEx_PLLSAI2_Config>
 8003d60:	4603      	mov	r3, r0
 8003d62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d64:	e003      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	74fb      	strb	r3, [r7, #19]
      break;
 8003d6a:	e000      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d6e:	7cfb      	ldrb	r3, [r7, #19]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10b      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d74:	4b52      	ldr	r3, [pc, #328]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d82:	494f      	ldr	r1, [pc, #316]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003d8a:	e001      	b.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d8c:	7cfb      	ldrb	r3, [r7, #19]
 8003d8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80a0 	beq.w	8003ede <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003da2:	4b47      	ldr	r3, [pc, #284]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003dae:	2301      	movs	r3, #1
 8003db0:	e000      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003db2:	2300      	movs	r3, #0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00d      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003db8:	4b41      	ldr	r3, [pc, #260]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dbc:	4a40      	ldr	r2, [pc, #256]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	6593      	str	r3, [r2, #88]	; 0x58
 8003dc4:	4b3e      	ldr	r3, [pc, #248]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	60bb      	str	r3, [r7, #8]
 8003dce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dd4:	4b3b      	ldr	r3, [pc, #236]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a3a      	ldr	r2, [pc, #232]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dde:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003de0:	f7fd fa4e 	bl	8001280 <HAL_GetTick>
 8003de4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003de6:	e009      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de8:	f7fd fa4a 	bl	8001280 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d902      	bls.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	74fb      	strb	r3, [r7, #19]
        break;
 8003dfa:	e005      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003dfc:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0ef      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d15c      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e0e:	4b2c      	ldr	r3, [pc, #176]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d01f      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d019      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e2c:	4b24      	ldr	r3, [pc, #144]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e38:	4b21      	ldr	r3, [pc, #132]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3e:	4a20      	ldr	r2, [pc, #128]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e48:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	4a1c      	ldr	r2, [pc, #112]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e58:	4a19      	ldr	r2, [pc, #100]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f003 0301 	and.w	r3, r3, #1
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d016      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6a:	f7fd fa09 	bl	8001280 <HAL_GetTick>
 8003e6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e70:	e00b      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e72:	f7fd fa05 	bl	8001280 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d902      	bls.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	74fb      	strb	r3, [r7, #19]
            break;
 8003e88:	e006      	b.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0ec      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003e98:	7cfb      	ldrb	r3, [r7, #19]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eae:	4904      	ldr	r1, [pc, #16]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003eb6:	e009      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eb8:	7cfb      	ldrb	r3, [r7, #19]
 8003eba:	74bb      	strb	r3, [r7, #18]
 8003ebc:	e006      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec8:	7cfb      	ldrb	r3, [r7, #19]
 8003eca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ecc:	7c7b      	ldrb	r3, [r7, #17]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d105      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed2:	4b9e      	ldr	r3, [pc, #632]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	4a9d      	ldr	r2, [pc, #628]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003edc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003eea:	4b98      	ldr	r3, [pc, #608]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ef0:	f023 0203 	bic.w	r2, r3, #3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	4994      	ldr	r1, [pc, #592]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f0c:	4b8f      	ldr	r3, [pc, #572]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f023 020c 	bic.w	r2, r3, #12
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1a:	498c      	ldr	r1, [pc, #560]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00a      	beq.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f2e:	4b87      	ldr	r3, [pc, #540]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	4983      	ldr	r1, [pc, #524]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f50:	4b7e      	ldr	r3, [pc, #504]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f5e:	497b      	ldr	r1, [pc, #492]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0310 	and.w	r3, r3, #16
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f72:	4b76      	ldr	r3, [pc, #472]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f80:	4972      	ldr	r1, [pc, #456]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0320 	and.w	r3, r3, #32
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f94:	4b6d      	ldr	r3, [pc, #436]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa2:	496a      	ldr	r1, [pc, #424]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fb6:	4b65      	ldr	r3, [pc, #404]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc4:	4961      	ldr	r1, [pc, #388]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fd8:	4b5c      	ldr	r3, [pc, #368]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe6:	4959      	ldr	r1, [pc, #356]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ffa:	4b54      	ldr	r3, [pc, #336]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004000:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004008:	4950      	ldr	r1, [pc, #320]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800401c:	4b4b      	ldr	r3, [pc, #300]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004022:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	4948      	ldr	r1, [pc, #288]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800403e:	4b43      	ldr	r3, [pc, #268]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004044:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404c:	493f      	ldr	r1, [pc, #252]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d028      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004060:	4b3a      	ldr	r3, [pc, #232]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004066:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406e:	4937      	ldr	r1, [pc, #220]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800407a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800407e:	d106      	bne.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004080:	4b32      	ldr	r3, [pc, #200]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	4a31      	ldr	r2, [pc, #196]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800408a:	60d3      	str	r3, [r2, #12]
 800408c:	e011      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004092:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004096:	d10c      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	2101      	movs	r1, #1
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 f8c8 	bl	8004234 <RCCEx_PLLSAI1_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040a8:	7cfb      	ldrb	r3, [r7, #19]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d001      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80040ae:	7cfb      	ldrb	r3, [r7, #19]
 80040b0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d028      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040be:	4b23      	ldr	r3, [pc, #140]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040cc:	491f      	ldr	r1, [pc, #124]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040dc:	d106      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040de:	4b1b      	ldr	r3, [pc, #108]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	4a1a      	ldr	r2, [pc, #104]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040e8:	60d3      	str	r3, [r2, #12]
 80040ea:	e011      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040f4:	d10c      	bne.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	3304      	adds	r3, #4
 80040fa:	2101      	movs	r1, #1
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 f899 	bl	8004234 <RCCEx_PLLSAI1_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004106:	7cfb      	ldrb	r3, [r7, #19]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800410c:	7cfb      	ldrb	r3, [r7, #19]
 800410e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d02b      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412a:	4908      	ldr	r1, [pc, #32]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004136:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800413a:	d109      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800413c:	4b03      	ldr	r3, [pc, #12]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4a02      	ldr	r2, [pc, #8]	; (800414c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004146:	60d3      	str	r3, [r2, #12]
 8004148:	e014      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800414a:	bf00      	nop
 800414c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004154:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004158:	d10c      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	3304      	adds	r3, #4
 800415e:	2101      	movs	r1, #1
 8004160:	4618      	mov	r0, r3
 8004162:	f000 f867 	bl	8004234 <RCCEx_PLLSAI1_Config>
 8004166:	4603      	mov	r3, r0
 8004168:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800416a:	7cfb      	ldrb	r3, [r7, #19]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d02f      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004180:	4b2b      	ldr	r3, [pc, #172]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004186:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800418e:	4928      	ldr	r1, [pc, #160]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800419a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800419e:	d10d      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3304      	adds	r3, #4
 80041a4:	2102      	movs	r1, #2
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 f844 	bl	8004234 <RCCEx_PLLSAI1_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041b0:	7cfb      	ldrb	r3, [r7, #19]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d014      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041b6:	7cfb      	ldrb	r3, [r7, #19]
 80041b8:	74bb      	strb	r3, [r7, #18]
 80041ba:	e011      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041c4:	d10c      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	3320      	adds	r3, #32
 80041ca:	2102      	movs	r1, #2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 f925 	bl	800441c <RCCEx_PLLSAI2_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041d6:	7cfb      	ldrb	r3, [r7, #19]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80041dc:	7cfb      	ldrb	r3, [r7, #19]
 80041de:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041ec:	4b10      	ldr	r3, [pc, #64]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041fa:	490d      	ldr	r1, [pc, #52]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00b      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800420e:	4b08      	ldr	r3, [pc, #32]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004214:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800421e:	4904      	ldr	r1, [pc, #16]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004226:	7cbb      	ldrb	r3, [r7, #18]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	40021000 	.word	0x40021000

08004234 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800423e:	2300      	movs	r3, #0
 8004240:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004242:	4b75      	ldr	r3, [pc, #468]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0303 	and.w	r3, r3, #3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d018      	beq.n	8004280 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800424e:	4b72      	ldr	r3, [pc, #456]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0203 	and.w	r2, r3, #3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d10d      	bne.n	800427a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
       ||
 8004262:	2b00      	cmp	r3, #0
 8004264:	d009      	beq.n	800427a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004266:	4b6c      	ldr	r3, [pc, #432]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	f003 0307 	and.w	r3, r3, #7
 8004270:	1c5a      	adds	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
       ||
 8004276:	429a      	cmp	r2, r3
 8004278:	d047      	beq.n	800430a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	73fb      	strb	r3, [r7, #15]
 800427e:	e044      	b.n	800430a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d018      	beq.n	80042ba <RCCEx_PLLSAI1_Config+0x86>
 8004288:	2b03      	cmp	r3, #3
 800428a:	d825      	bhi.n	80042d8 <RCCEx_PLLSAI1_Config+0xa4>
 800428c:	2b01      	cmp	r3, #1
 800428e:	d002      	beq.n	8004296 <RCCEx_PLLSAI1_Config+0x62>
 8004290:	2b02      	cmp	r3, #2
 8004292:	d009      	beq.n	80042a8 <RCCEx_PLLSAI1_Config+0x74>
 8004294:	e020      	b.n	80042d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004296:	4b60      	ldr	r3, [pc, #384]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d11d      	bne.n	80042de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042a6:	e01a      	b.n	80042de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042a8:	4b5b      	ldr	r3, [pc, #364]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d116      	bne.n	80042e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042b8:	e013      	b.n	80042e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042ba:	4b57      	ldr	r3, [pc, #348]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d10f      	bne.n	80042e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042c6:	4b54      	ldr	r3, [pc, #336]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042d6:	e006      	b.n	80042e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	73fb      	strb	r3, [r7, #15]
      break;
 80042dc:	e004      	b.n	80042e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042de:	bf00      	nop
 80042e0:	e002      	b.n	80042e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042e2:	bf00      	nop
 80042e4:	e000      	b.n	80042e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80042e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10d      	bne.n	800430a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042ee:	4b4a      	ldr	r3, [pc, #296]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6819      	ldr	r1, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	3b01      	subs	r3, #1
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	430b      	orrs	r3, r1
 8004304:	4944      	ldr	r1, [pc, #272]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004306:	4313      	orrs	r3, r2
 8004308:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800430a:	7bfb      	ldrb	r3, [r7, #15]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d17d      	bne.n	800440c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004310:	4b41      	ldr	r3, [pc, #260]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a40      	ldr	r2, [pc, #256]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004316:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800431a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800431c:	f7fc ffb0 	bl	8001280 <HAL_GetTick>
 8004320:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004322:	e009      	b.n	8004338 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004324:	f7fc ffac 	bl	8001280 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d902      	bls.n	8004338 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	73fb      	strb	r3, [r7, #15]
        break;
 8004336:	e005      	b.n	8004344 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004338:	4b37      	ldr	r3, [pc, #220]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1ef      	bne.n	8004324 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004344:	7bfb      	ldrb	r3, [r7, #15]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d160      	bne.n	800440c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d111      	bne.n	8004374 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004350:	4b31      	ldr	r3, [pc, #196]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004352:	691b      	ldr	r3, [r3, #16]
 8004354:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6892      	ldr	r2, [r2, #8]
 8004360:	0211      	lsls	r1, r2, #8
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	68d2      	ldr	r2, [r2, #12]
 8004366:	0912      	lsrs	r2, r2, #4
 8004368:	0452      	lsls	r2, r2, #17
 800436a:	430a      	orrs	r2, r1
 800436c:	492a      	ldr	r1, [pc, #168]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 800436e:	4313      	orrs	r3, r2
 8004370:	610b      	str	r3, [r1, #16]
 8004372:	e027      	b.n	80043c4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d112      	bne.n	80043a0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800437a:	4b27      	ldr	r3, [pc, #156]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004382:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6892      	ldr	r2, [r2, #8]
 800438a:	0211      	lsls	r1, r2, #8
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6912      	ldr	r2, [r2, #16]
 8004390:	0852      	lsrs	r2, r2, #1
 8004392:	3a01      	subs	r2, #1
 8004394:	0552      	lsls	r2, r2, #21
 8004396:	430a      	orrs	r2, r1
 8004398:	491f      	ldr	r1, [pc, #124]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 800439a:	4313      	orrs	r3, r2
 800439c:	610b      	str	r3, [r1, #16]
 800439e:	e011      	b.n	80043c4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043a0:	4b1d      	ldr	r3, [pc, #116]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	6892      	ldr	r2, [r2, #8]
 80043b0:	0211      	lsls	r1, r2, #8
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6952      	ldr	r2, [r2, #20]
 80043b6:	0852      	lsrs	r2, r2, #1
 80043b8:	3a01      	subs	r2, #1
 80043ba:	0652      	lsls	r2, r2, #25
 80043bc:	430a      	orrs	r2, r1
 80043be:	4916      	ldr	r1, [pc, #88]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80043c4:	4b14      	ldr	r3, [pc, #80]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a13      	ldr	r2, [pc, #76]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7fc ff56 	bl	8001280 <HAL_GetTick>
 80043d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043d6:	e009      	b.n	80043ec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043d8:	f7fc ff52 	bl	8001280 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d902      	bls.n	80043ec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	73fb      	strb	r3, [r7, #15]
          break;
 80043ea:	e005      	b.n	80043f8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0ef      	beq.n	80043d8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80043f8:	7bfb      	ldrb	r3, [r7, #15]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004400:	691a      	ldr	r2, [r3, #16]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	4904      	ldr	r1, [pc, #16]	; (8004418 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004408:	4313      	orrs	r3, r2
 800440a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40021000 	.word	0x40021000

0800441c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800442a:	4b6a      	ldr	r3, [pc, #424]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d018      	beq.n	8004468 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004436:	4b67      	ldr	r3, [pc, #412]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f003 0203 	and.w	r2, r3, #3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d10d      	bne.n	8004462 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
       ||
 800444a:	2b00      	cmp	r3, #0
 800444c:	d009      	beq.n	8004462 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800444e:	4b61      	ldr	r3, [pc, #388]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	091b      	lsrs	r3, r3, #4
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
       ||
 800445e:	429a      	cmp	r2, r3
 8004460:	d047      	beq.n	80044f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
 8004466:	e044      	b.n	80044f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b03      	cmp	r3, #3
 800446e:	d018      	beq.n	80044a2 <RCCEx_PLLSAI2_Config+0x86>
 8004470:	2b03      	cmp	r3, #3
 8004472:	d825      	bhi.n	80044c0 <RCCEx_PLLSAI2_Config+0xa4>
 8004474:	2b01      	cmp	r3, #1
 8004476:	d002      	beq.n	800447e <RCCEx_PLLSAI2_Config+0x62>
 8004478:	2b02      	cmp	r3, #2
 800447a:	d009      	beq.n	8004490 <RCCEx_PLLSAI2_Config+0x74>
 800447c:	e020      	b.n	80044c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800447e:	4b55      	ldr	r3, [pc, #340]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d11d      	bne.n	80044c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800448e:	e01a      	b.n	80044c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004490:	4b50      	ldr	r3, [pc, #320]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004498:	2b00      	cmp	r3, #0
 800449a:	d116      	bne.n	80044ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a0:	e013      	b.n	80044ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044a2:	4b4c      	ldr	r3, [pc, #304]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10f      	bne.n	80044ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044ae:	4b49      	ldr	r3, [pc, #292]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044be:	e006      	b.n	80044ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
      break;
 80044c4:	e004      	b.n	80044d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044c6:	bf00      	nop
 80044c8:	e002      	b.n	80044d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044ca:	bf00      	nop
 80044cc:	e000      	b.n	80044d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80044ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10d      	bne.n	80044f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044d6:	4b3f      	ldr	r3, [pc, #252]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6819      	ldr	r1, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	430b      	orrs	r3, r1
 80044ec:	4939      	ldr	r1, [pc, #228]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d167      	bne.n	80045c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80044f8:	4b36      	ldr	r3, [pc, #216]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a35      	ldr	r2, [pc, #212]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80044fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004504:	f7fc febc 	bl	8001280 <HAL_GetTick>
 8004508:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800450a:	e009      	b.n	8004520 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800450c:	f7fc feb8 	bl	8001280 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d902      	bls.n	8004520 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	73fb      	strb	r3, [r7, #15]
        break;
 800451e:	e005      	b.n	800452c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004520:	4b2c      	ldr	r3, [pc, #176]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1ef      	bne.n	800450c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d14a      	bne.n	80045c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d111      	bne.n	800455c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004538:	4b26      	ldr	r3, [pc, #152]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6892      	ldr	r2, [r2, #8]
 8004548:	0211      	lsls	r1, r2, #8
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	68d2      	ldr	r2, [r2, #12]
 800454e:	0912      	lsrs	r2, r2, #4
 8004550:	0452      	lsls	r2, r2, #17
 8004552:	430a      	orrs	r2, r1
 8004554:	491f      	ldr	r1, [pc, #124]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004556:	4313      	orrs	r3, r2
 8004558:	614b      	str	r3, [r1, #20]
 800455a:	e011      	b.n	8004580 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800455c:	4b1d      	ldr	r3, [pc, #116]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004564:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	6892      	ldr	r2, [r2, #8]
 800456c:	0211      	lsls	r1, r2, #8
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6912      	ldr	r2, [r2, #16]
 8004572:	0852      	lsrs	r2, r2, #1
 8004574:	3a01      	subs	r2, #1
 8004576:	0652      	lsls	r2, r2, #25
 8004578:	430a      	orrs	r2, r1
 800457a:	4916      	ldr	r1, [pc, #88]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800457c:	4313      	orrs	r3, r2
 800457e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004580:	4b14      	ldr	r3, [pc, #80]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a13      	ldr	r2, [pc, #76]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800458a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458c:	f7fc fe78 	bl	8001280 <HAL_GetTick>
 8004590:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004592:	e009      	b.n	80045a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004594:	f7fc fe74 	bl	8001280 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d902      	bls.n	80045a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	73fb      	strb	r3, [r7, #15]
          break;
 80045a6:	e005      	b.n	80045b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80045a8:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ef      	beq.n	8004594 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80045ba:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
 80045c2:	4904      	ldr	r1, [pc, #16]	; (80045d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80045c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40021000 	.word	0x40021000

080045d8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e049      	b.n	800467e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fc fc84 	bl	8000f0c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3304      	adds	r3, #4
 8004614:	4619      	mov	r1, r3
 8004616:	4610      	mov	r0, r2
 8004618:	f000 f8b0 	bl	800477c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_TIM_OC_ConfigChannel+0x1e>
 80046a2:	2302      	movs	r3, #2
 80046a4:	e066      	b.n	8004774 <HAL_TIM_OC_ConfigChannel+0xec>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b14      	cmp	r3, #20
 80046b2:	d857      	bhi.n	8004764 <HAL_TIM_OC_ConfigChannel+0xdc>
 80046b4:	a201      	add	r2, pc, #4	; (adr r2, 80046bc <HAL_TIM_OC_ConfigChannel+0x34>)
 80046b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ba:	bf00      	nop
 80046bc:	08004711 	.word	0x08004711
 80046c0:	08004765 	.word	0x08004765
 80046c4:	08004765 	.word	0x08004765
 80046c8:	08004765 	.word	0x08004765
 80046cc:	0800471f 	.word	0x0800471f
 80046d0:	08004765 	.word	0x08004765
 80046d4:	08004765 	.word	0x08004765
 80046d8:	08004765 	.word	0x08004765
 80046dc:	0800472d 	.word	0x0800472d
 80046e0:	08004765 	.word	0x08004765
 80046e4:	08004765 	.word	0x08004765
 80046e8:	08004765 	.word	0x08004765
 80046ec:	0800473b 	.word	0x0800473b
 80046f0:	08004765 	.word	0x08004765
 80046f4:	08004765 	.word	0x08004765
 80046f8:	08004765 	.word	0x08004765
 80046fc:	08004749 	.word	0x08004749
 8004700:	08004765 	.word	0x08004765
 8004704:	08004765 	.word	0x08004765
 8004708:	08004765 	.word	0x08004765
 800470c:	08004757 	.word	0x08004757
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68b9      	ldr	r1, [r7, #8]
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f8ca 	bl	80048b0 <TIM_OC1_SetConfig>
      break;
 800471c:	e025      	b.n	800476a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	4618      	mov	r0, r3
 8004726:	f000 f953 	bl	80049d0 <TIM_OC2_SetConfig>
      break;
 800472a:	e01e      	b.n	800476a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	4618      	mov	r0, r3
 8004734:	f000 f9d6 	bl	8004ae4 <TIM_OC3_SetConfig>
      break;
 8004738:	e017      	b.n	800476a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68b9      	ldr	r1, [r7, #8]
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fa57 	bl	8004bf4 <TIM_OC4_SetConfig>
      break;
 8004746:	e010      	b.n	800476a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68b9      	ldr	r1, [r7, #8]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 faba 	bl	8004cc8 <TIM_OC5_SetConfig>
      break;
 8004754:	e009      	b.n	800476a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68b9      	ldr	r1, [r7, #8]
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fb17 	bl	8004d90 <TIM_OC6_SetConfig>
      break;
 8004762:	e002      	b.n	800476a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	75fb      	strb	r3, [r7, #23]
      break;
 8004768:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004772:	7dfb      	ldrb	r3, [r7, #23]
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a40      	ldr	r2, [pc, #256]	; (8004890 <TIM_Base_SetConfig+0x114>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <TIM_Base_SetConfig+0x40>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479a:	d00f      	beq.n	80047bc <TIM_Base_SetConfig+0x40>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a3d      	ldr	r2, [pc, #244]	; (8004894 <TIM_Base_SetConfig+0x118>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d00b      	beq.n	80047bc <TIM_Base_SetConfig+0x40>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a3c      	ldr	r2, [pc, #240]	; (8004898 <TIM_Base_SetConfig+0x11c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d007      	beq.n	80047bc <TIM_Base_SetConfig+0x40>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a3b      	ldr	r2, [pc, #236]	; (800489c <TIM_Base_SetConfig+0x120>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d003      	beq.n	80047bc <TIM_Base_SetConfig+0x40>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a3a      	ldr	r2, [pc, #232]	; (80048a0 <TIM_Base_SetConfig+0x124>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d108      	bne.n	80047ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a2f      	ldr	r2, [pc, #188]	; (8004890 <TIM_Base_SetConfig+0x114>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d01f      	beq.n	8004816 <TIM_Base_SetConfig+0x9a>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047dc:	d01b      	beq.n	8004816 <TIM_Base_SetConfig+0x9a>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a2c      	ldr	r2, [pc, #176]	; (8004894 <TIM_Base_SetConfig+0x118>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d017      	beq.n	8004816 <TIM_Base_SetConfig+0x9a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a2b      	ldr	r2, [pc, #172]	; (8004898 <TIM_Base_SetConfig+0x11c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d013      	beq.n	8004816 <TIM_Base_SetConfig+0x9a>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a2a      	ldr	r2, [pc, #168]	; (800489c <TIM_Base_SetConfig+0x120>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d00f      	beq.n	8004816 <TIM_Base_SetConfig+0x9a>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a29      	ldr	r2, [pc, #164]	; (80048a0 <TIM_Base_SetConfig+0x124>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d00b      	beq.n	8004816 <TIM_Base_SetConfig+0x9a>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a28      	ldr	r2, [pc, #160]	; (80048a4 <TIM_Base_SetConfig+0x128>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d007      	beq.n	8004816 <TIM_Base_SetConfig+0x9a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a27      	ldr	r2, [pc, #156]	; (80048a8 <TIM_Base_SetConfig+0x12c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d003      	beq.n	8004816 <TIM_Base_SetConfig+0x9a>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a26      	ldr	r2, [pc, #152]	; (80048ac <TIM_Base_SetConfig+0x130>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d108      	bne.n	8004828 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800481c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a10      	ldr	r2, [pc, #64]	; (8004890 <TIM_Base_SetConfig+0x114>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00f      	beq.n	8004874 <TIM_Base_SetConfig+0xf8>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a12      	ldr	r2, [pc, #72]	; (80048a0 <TIM_Base_SetConfig+0x124>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00b      	beq.n	8004874 <TIM_Base_SetConfig+0xf8>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a11      	ldr	r2, [pc, #68]	; (80048a4 <TIM_Base_SetConfig+0x128>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d007      	beq.n	8004874 <TIM_Base_SetConfig+0xf8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a10      	ldr	r2, [pc, #64]	; (80048a8 <TIM_Base_SetConfig+0x12c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d003      	beq.n	8004874 <TIM_Base_SetConfig+0xf8>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a0f      	ldr	r2, [pc, #60]	; (80048ac <TIM_Base_SetConfig+0x130>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d103      	bne.n	800487c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	615a      	str	r2, [r3, #20]
}
 8004882:	bf00      	nop
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	40012c00 	.word	0x40012c00
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800
 800489c:	40000c00 	.word	0x40000c00
 80048a0:	40013400 	.word	0x40013400
 80048a4:	40014000 	.word	0x40014000
 80048a8:	40014400 	.word	0x40014400
 80048ac:	40014800 	.word	0x40014800

080048b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b087      	sub	sp, #28
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f023 0201 	bic.w	r2, r3, #1
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0303 	bic.w	r3, r3, #3
 80048ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f023 0302 	bic.w	r3, r3, #2
 80048fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	4a2c      	ldr	r2, [pc, #176]	; (80049bc <TIM_OC1_SetConfig+0x10c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00f      	beq.n	8004930 <TIM_OC1_SetConfig+0x80>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a2b      	ldr	r2, [pc, #172]	; (80049c0 <TIM_OC1_SetConfig+0x110>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00b      	beq.n	8004930 <TIM_OC1_SetConfig+0x80>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	4a2a      	ldr	r2, [pc, #168]	; (80049c4 <TIM_OC1_SetConfig+0x114>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d007      	beq.n	8004930 <TIM_OC1_SetConfig+0x80>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a29      	ldr	r2, [pc, #164]	; (80049c8 <TIM_OC1_SetConfig+0x118>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_OC1_SetConfig+0x80>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a28      	ldr	r2, [pc, #160]	; (80049cc <TIM_OC1_SetConfig+0x11c>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d10c      	bne.n	800494a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f023 0308 	bic.w	r3, r3, #8
 8004936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f023 0304 	bic.w	r3, r3, #4
 8004948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a1b      	ldr	r2, [pc, #108]	; (80049bc <TIM_OC1_SetConfig+0x10c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00f      	beq.n	8004972 <TIM_OC1_SetConfig+0xc2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a1a      	ldr	r2, [pc, #104]	; (80049c0 <TIM_OC1_SetConfig+0x110>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d00b      	beq.n	8004972 <TIM_OC1_SetConfig+0xc2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <TIM_OC1_SetConfig+0x114>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d007      	beq.n	8004972 <TIM_OC1_SetConfig+0xc2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <TIM_OC1_SetConfig+0x118>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d003      	beq.n	8004972 <TIM_OC1_SetConfig+0xc2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a17      	ldr	r2, [pc, #92]	; (80049cc <TIM_OC1_SetConfig+0x11c>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d111      	bne.n	8004996 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	621a      	str	r2, [r3, #32]
}
 80049b0:	bf00      	nop
 80049b2:	371c      	adds	r7, #28
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	40012c00 	.word	0x40012c00
 80049c0:	40013400 	.word	0x40013400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800

080049d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
 80049d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1b      	ldr	r3, [r3, #32]
 80049de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a1b      	ldr	r3, [r3, #32]
 80049e4:	f023 0210 	bic.w	r2, r3, #16
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	021b      	lsls	r3, r3, #8
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	f023 0320 	bic.w	r3, r3, #32
 8004a1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a28      	ldr	r2, [pc, #160]	; (8004ad0 <TIM_OC2_SetConfig+0x100>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d003      	beq.n	8004a3c <TIM_OC2_SetConfig+0x6c>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a27      	ldr	r2, [pc, #156]	; (8004ad4 <TIM_OC2_SetConfig+0x104>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d10d      	bne.n	8004a58 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	697a      	ldr	r2, [r7, #20]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a1d      	ldr	r2, [pc, #116]	; (8004ad0 <TIM_OC2_SetConfig+0x100>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d00f      	beq.n	8004a80 <TIM_OC2_SetConfig+0xb0>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a1c      	ldr	r2, [pc, #112]	; (8004ad4 <TIM_OC2_SetConfig+0x104>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d00b      	beq.n	8004a80 <TIM_OC2_SetConfig+0xb0>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a1b      	ldr	r2, [pc, #108]	; (8004ad8 <TIM_OC2_SetConfig+0x108>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d007      	beq.n	8004a80 <TIM_OC2_SetConfig+0xb0>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a1a      	ldr	r2, [pc, #104]	; (8004adc <TIM_OC2_SetConfig+0x10c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_OC2_SetConfig+0xb0>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a19      	ldr	r2, [pc, #100]	; (8004ae0 <TIM_OC2_SetConfig+0x110>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d113      	bne.n	8004aa8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40012c00 	.word	0x40012c00
 8004ad4:	40013400 	.word	0x40013400
 8004ad8:	40014000 	.word	0x40014000
 8004adc:	40014400 	.word	0x40014400
 8004ae0:	40014800 	.word	0x40014800

08004ae4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a1b      	ldr	r3, [r3, #32]
 8004af8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	69db      	ldr	r3, [r3, #28]
 8004b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f023 0303 	bic.w	r3, r3, #3
 8004b1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	697a      	ldr	r2, [r7, #20]
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a27      	ldr	r2, [pc, #156]	; (8004be0 <TIM_OC3_SetConfig+0xfc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d003      	beq.n	8004b4e <TIM_OC3_SetConfig+0x6a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a26      	ldr	r2, [pc, #152]	; (8004be4 <TIM_OC3_SetConfig+0x100>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d10d      	bne.n	8004b6a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	021b      	lsls	r3, r3, #8
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a1c      	ldr	r2, [pc, #112]	; (8004be0 <TIM_OC3_SetConfig+0xfc>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d00f      	beq.n	8004b92 <TIM_OC3_SetConfig+0xae>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a1b      	ldr	r2, [pc, #108]	; (8004be4 <TIM_OC3_SetConfig+0x100>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d00b      	beq.n	8004b92 <TIM_OC3_SetConfig+0xae>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a1a      	ldr	r2, [pc, #104]	; (8004be8 <TIM_OC3_SetConfig+0x104>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d007      	beq.n	8004b92 <TIM_OC3_SetConfig+0xae>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	4a19      	ldr	r2, [pc, #100]	; (8004bec <TIM_OC3_SetConfig+0x108>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d003      	beq.n	8004b92 <TIM_OC3_SetConfig+0xae>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <TIM_OC3_SetConfig+0x10c>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d113      	bne.n	8004bba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	011b      	lsls	r3, r3, #4
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	693a      	ldr	r2, [r7, #16]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685a      	ldr	r2, [r3, #4]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	621a      	str	r2, [r3, #32]
}
 8004bd4:	bf00      	nop
 8004bd6:	371c      	adds	r7, #28
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	40012c00 	.word	0x40012c00
 8004be4:	40013400 	.word	0x40013400
 8004be8:	40014000 	.word	0x40014000
 8004bec:	40014400 	.word	0x40014400
 8004bf0:	40014800 	.word	0x40014800

08004bf4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	021b      	lsls	r3, r3, #8
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	031b      	lsls	r3, r3, #12
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a18      	ldr	r2, [pc, #96]	; (8004cb4 <TIM_OC4_SetConfig+0xc0>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d00f      	beq.n	8004c78 <TIM_OC4_SetConfig+0x84>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	4a17      	ldr	r2, [pc, #92]	; (8004cb8 <TIM_OC4_SetConfig+0xc4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d00b      	beq.n	8004c78 <TIM_OC4_SetConfig+0x84>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a16      	ldr	r2, [pc, #88]	; (8004cbc <TIM_OC4_SetConfig+0xc8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d007      	beq.n	8004c78 <TIM_OC4_SetConfig+0x84>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a15      	ldr	r2, [pc, #84]	; (8004cc0 <TIM_OC4_SetConfig+0xcc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d003      	beq.n	8004c78 <TIM_OC4_SetConfig+0x84>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a14      	ldr	r2, [pc, #80]	; (8004cc4 <TIM_OC4_SetConfig+0xd0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d109      	bne.n	8004c8c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	695b      	ldr	r3, [r3, #20]
 8004c84:	019b      	lsls	r3, r3, #6
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	621a      	str	r2, [r3, #32]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40012c00 	.word	0x40012c00
 8004cb8:	40013400 	.word	0x40013400
 8004cbc:	40014000 	.word	0x40014000
 8004cc0:	40014400 	.word	0x40014400
 8004cc4:	40014800 	.word	0x40014800

08004cc8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a1b      	ldr	r3, [r3, #32]
 8004cd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d0c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	041b      	lsls	r3, r3, #16
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a17      	ldr	r2, [pc, #92]	; (8004d7c <TIM_OC5_SetConfig+0xb4>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00f      	beq.n	8004d42 <TIM_OC5_SetConfig+0x7a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a16      	ldr	r2, [pc, #88]	; (8004d80 <TIM_OC5_SetConfig+0xb8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00b      	beq.n	8004d42 <TIM_OC5_SetConfig+0x7a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a15      	ldr	r2, [pc, #84]	; (8004d84 <TIM_OC5_SetConfig+0xbc>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d007      	beq.n	8004d42 <TIM_OC5_SetConfig+0x7a>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a14      	ldr	r2, [pc, #80]	; (8004d88 <TIM_OC5_SetConfig+0xc0>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d003      	beq.n	8004d42 <TIM_OC5_SetConfig+0x7a>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a13      	ldr	r2, [pc, #76]	; (8004d8c <TIM_OC5_SetConfig+0xc4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d109      	bne.n	8004d56 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	695b      	ldr	r3, [r3, #20]
 8004d4e:	021b      	lsls	r3, r3, #8
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	621a      	str	r2, [r3, #32]
}
 8004d70:	bf00      	nop
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	40012c00 	.word	0x40012c00
 8004d80:	40013400 	.word	0x40013400
 8004d84:	40014000 	.word	0x40014000
 8004d88:	40014400 	.word	0x40014400
 8004d8c:	40014800 	.word	0x40014800

08004d90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	051b      	lsls	r3, r3, #20
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a18      	ldr	r2, [pc, #96]	; (8004e48 <TIM_OC6_SetConfig+0xb8>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d00f      	beq.n	8004e0c <TIM_OC6_SetConfig+0x7c>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a17      	ldr	r2, [pc, #92]	; (8004e4c <TIM_OC6_SetConfig+0xbc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00b      	beq.n	8004e0c <TIM_OC6_SetConfig+0x7c>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a16      	ldr	r2, [pc, #88]	; (8004e50 <TIM_OC6_SetConfig+0xc0>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d007      	beq.n	8004e0c <TIM_OC6_SetConfig+0x7c>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a15      	ldr	r2, [pc, #84]	; (8004e54 <TIM_OC6_SetConfig+0xc4>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d003      	beq.n	8004e0c <TIM_OC6_SetConfig+0x7c>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a14      	ldr	r2, [pc, #80]	; (8004e58 <TIM_OC6_SetConfig+0xc8>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d109      	bne.n	8004e20 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	029b      	lsls	r3, r3, #10
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	621a      	str	r2, [r3, #32]
}
 8004e3a:	bf00      	nop
 8004e3c:	371c      	adds	r7, #28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40012c00 	.word	0x40012c00
 8004e4c:	40013400 	.word	0x40013400
 8004e50:	40014000 	.word	0x40014000
 8004e54:	40014400 	.word	0x40014400
 8004e58:	40014800 	.word	0x40014800

08004e5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d101      	bne.n	8004e74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e70:	2302      	movs	r3, #2
 8004e72:	e068      	b.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2202      	movs	r2, #2
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a2e      	ldr	r2, [pc, #184]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d004      	beq.n	8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a2d      	ldr	r2, [pc, #180]	; (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d108      	bne.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004eae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a1e      	ldr	r2, [pc, #120]	; (8004f54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d01d      	beq.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee6:	d018      	beq.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a1b      	ldr	r2, [pc, #108]	; (8004f5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d013      	beq.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a1a      	ldr	r2, [pc, #104]	; (8004f60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d00e      	beq.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a18      	ldr	r2, [pc, #96]	; (8004f64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d009      	beq.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a13      	ldr	r2, [pc, #76]	; (8004f58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d004      	beq.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a14      	ldr	r2, [pc, #80]	; (8004f68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d10c      	bne.n	8004f34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f50:	4770      	bx	lr
 8004f52:	bf00      	nop
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40013400 	.word	0x40013400
 8004f5c:	40000400 	.word	0x40000400
 8004f60:	40000800 	.word	0x40000800
 8004f64:	40000c00 	.word	0x40000c00
 8004f68:	40014000 	.word	0x40014000

08004f6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e065      	b.n	8005054 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	4313      	orrs	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a16      	ldr	r2, [pc, #88]	; (8005060 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d004      	beq.n	8005016 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a14      	ldr	r2, [pc, #80]	; (8005064 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d115      	bne.n	8005042 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	051b      	lsls	r3, r3, #20
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	6a1b      	ldr	r3, [r3, #32]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	40012c00 	.word	0x40012c00
 8005064:	40013400 	.word	0x40013400

08005068 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e040      	b.n	80050fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fb ff96 	bl	8000fbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2224      	movs	r2, #36	; 0x24
 8005094:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0201 	bic.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fc34 	bl	800591c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 f979 	bl	80053ac <UART_SetConfig>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d101      	bne.n	80050c4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e01b      	b.n	80050fc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689a      	ldr	r2, [r3, #8]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fcb3 	bl	8005a60 <UART_CheckIdleState>
 80050fa:	4603      	mov	r3, r0
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3708      	adds	r7, #8
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08a      	sub	sp, #40	; 0x28
 8005108:	af02      	add	r7, sp, #8
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	603b      	str	r3, [r7, #0]
 8005110:	4613      	mov	r3, r2
 8005112:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005118:	2b20      	cmp	r3, #32
 800511a:	d178      	bne.n	800520e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d002      	beq.n	8005128 <HAL_UART_Transmit+0x24>
 8005122:	88fb      	ldrh	r3, [r7, #6]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d101      	bne.n	800512c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e071      	b.n	8005210 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2221      	movs	r2, #33	; 0x21
 8005138:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800513a:	f7fc f8a1 	bl	8001280 <HAL_GetTick>
 800513e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	88fa      	ldrh	r2, [r7, #6]
 8005144:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	88fa      	ldrh	r2, [r7, #6]
 800514c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005158:	d108      	bne.n	800516c <HAL_UART_Transmit+0x68>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d104      	bne.n	800516c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005162:	2300      	movs	r3, #0
 8005164:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	e003      	b.n	8005174 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005170:	2300      	movs	r3, #0
 8005172:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005174:	e030      	b.n	80051d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	2200      	movs	r2, #0
 800517e:	2180      	movs	r1, #128	; 0x80
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 fd15 	bl	8005bb0 <UART_WaitOnFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d004      	beq.n	8005196 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2220      	movs	r2, #32
 8005190:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e03c      	b.n	8005210 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10b      	bne.n	80051b4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	881a      	ldrh	r2, [r3, #0]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051a8:	b292      	uxth	r2, r2
 80051aa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	3302      	adds	r3, #2
 80051b0:	61bb      	str	r3, [r7, #24]
 80051b2:	e008      	b.n	80051c6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	781a      	ldrb	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	b292      	uxth	r2, r2
 80051be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	3301      	adds	r3, #1
 80051c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051de:	b29b      	uxth	r3, r3
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1c8      	bne.n	8005176 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2200      	movs	r2, #0
 80051ec:	2140      	movs	r1, #64	; 0x40
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 fcde 	bl	8005bb0 <UART_WaitOnFlagUntilTimeout>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d004      	beq.n	8005204 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2220      	movs	r2, #32
 80051fe:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e005      	b.n	8005210 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	e000      	b.n	8005210 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800520e:	2302      	movs	r3, #2
  }
}
 8005210:	4618      	mov	r0, r3
 8005212:	3720      	adds	r7, #32
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af02      	add	r7, sp, #8
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	603b      	str	r3, [r7, #0]
 8005224:	4613      	mov	r3, r2
 8005226:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800522e:	2b20      	cmp	r3, #32
 8005230:	f040 80b6 	bne.w	80053a0 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <HAL_UART_Receive+0x28>
 800523a:	88fb      	ldrh	r3, [r7, #6]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e0ae      	b.n	80053a2 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2222      	movs	r2, #34	; 0x22
 8005250:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800525a:	f7fc f811 	bl	8001280 <HAL_GetTick>
 800525e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	88fa      	ldrh	r2, [r7, #6]
 8005264:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	88fa      	ldrh	r2, [r7, #6]
 800526c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	689b      	ldr	r3, [r3, #8]
 8005274:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005278:	d10e      	bne.n	8005298 <HAL_UART_Receive+0x80>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d105      	bne.n	800528e <HAL_UART_Receive+0x76>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005288:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800528c:	e02d      	b.n	80052ea <HAL_UART_Receive+0xd2>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	22ff      	movs	r2, #255	; 0xff
 8005292:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005296:	e028      	b.n	80052ea <HAL_UART_Receive+0xd2>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10d      	bne.n	80052bc <HAL_UART_Receive+0xa4>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d104      	bne.n	80052b2 <HAL_UART_Receive+0x9a>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	22ff      	movs	r2, #255	; 0xff
 80052ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052b0:	e01b      	b.n	80052ea <HAL_UART_Receive+0xd2>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	227f      	movs	r2, #127	; 0x7f
 80052b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052ba:	e016      	b.n	80052ea <HAL_UART_Receive+0xd2>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052c4:	d10d      	bne.n	80052e2 <HAL_UART_Receive+0xca>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d104      	bne.n	80052d8 <HAL_UART_Receive+0xc0>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	227f      	movs	r2, #127	; 0x7f
 80052d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052d6:	e008      	b.n	80052ea <HAL_UART_Receive+0xd2>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	223f      	movs	r2, #63	; 0x3f
 80052dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80052e0:	e003      	b.n	80052ea <HAL_UART_Receive+0xd2>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80052f0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052fa:	d108      	bne.n	800530e <HAL_UART_Receive+0xf6>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	691b      	ldr	r3, [r3, #16]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d104      	bne.n	800530e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005304:	2300      	movs	r3, #0
 8005306:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	61bb      	str	r3, [r7, #24]
 800530c:	e003      	b.n	8005316 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005316:	e037      	b.n	8005388 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	2200      	movs	r2, #0
 8005320:	2120      	movs	r1, #32
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 fc44 	bl	8005bb0 <UART_WaitOnFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2220      	movs	r2, #32
 8005332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e033      	b.n	80053a2 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10c      	bne.n	800535a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005346:	b29a      	uxth	r2, r3
 8005348:	8a7b      	ldrh	r3, [r7, #18]
 800534a:	4013      	ands	r3, r2
 800534c:	b29a      	uxth	r2, r3
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	3302      	adds	r3, #2
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	e00d      	b.n	8005376 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005360:	b29b      	uxth	r3, r3
 8005362:	b2da      	uxtb	r2, r3
 8005364:	8a7b      	ldrh	r3, [r7, #18]
 8005366:	b2db      	uxtb	r3, r3
 8005368:	4013      	ands	r3, r2
 800536a:	b2da      	uxtb	r2, r3
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	3301      	adds	r3, #1
 8005374:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1c1      	bne.n	8005318 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800539c:	2300      	movs	r3, #0
 800539e:	e000      	b.n	80053a2 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80053a0:	2302      	movs	r3, #2
  }
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3720      	adds	r7, #32
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053b0:	b08a      	sub	sp, #40	; 0x28
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	4ba4      	ldr	r3, [pc, #656]	; (800566c <UART_SetConfig+0x2c0>)
 80053dc:	4013      	ands	r3, r2
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	6812      	ldr	r2, [r2, #0]
 80053e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053e4:	430b      	orrs	r3, r1
 80053e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	68da      	ldr	r2, [r3, #12]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a99      	ldr	r2, [pc, #612]	; (8005670 <UART_SetConfig+0x2c4>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d004      	beq.n	8005418 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005414:	4313      	orrs	r3, r2
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005428:	430a      	orrs	r2, r1
 800542a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a90      	ldr	r2, [pc, #576]	; (8005674 <UART_SetConfig+0x2c8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d126      	bne.n	8005484 <UART_SetConfig+0xd8>
 8005436:	4b90      	ldr	r3, [pc, #576]	; (8005678 <UART_SetConfig+0x2cc>)
 8005438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543c:	f003 0303 	and.w	r3, r3, #3
 8005440:	2b03      	cmp	r3, #3
 8005442:	d81b      	bhi.n	800547c <UART_SetConfig+0xd0>
 8005444:	a201      	add	r2, pc, #4	; (adr r2, 800544c <UART_SetConfig+0xa0>)
 8005446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544a:	bf00      	nop
 800544c:	0800545d 	.word	0x0800545d
 8005450:	0800546d 	.word	0x0800546d
 8005454:	08005465 	.word	0x08005465
 8005458:	08005475 	.word	0x08005475
 800545c:	2301      	movs	r3, #1
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005462:	e116      	b.n	8005692 <UART_SetConfig+0x2e6>
 8005464:	2302      	movs	r3, #2
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546a:	e112      	b.n	8005692 <UART_SetConfig+0x2e6>
 800546c:	2304      	movs	r3, #4
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005472:	e10e      	b.n	8005692 <UART_SetConfig+0x2e6>
 8005474:	2308      	movs	r3, #8
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547a:	e10a      	b.n	8005692 <UART_SetConfig+0x2e6>
 800547c:	2310      	movs	r3, #16
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005482:	e106      	b.n	8005692 <UART_SetConfig+0x2e6>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a7c      	ldr	r2, [pc, #496]	; (800567c <UART_SetConfig+0x2d0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d138      	bne.n	8005500 <UART_SetConfig+0x154>
 800548e:	4b7a      	ldr	r3, [pc, #488]	; (8005678 <UART_SetConfig+0x2cc>)
 8005490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005494:	f003 030c 	and.w	r3, r3, #12
 8005498:	2b0c      	cmp	r3, #12
 800549a:	d82d      	bhi.n	80054f8 <UART_SetConfig+0x14c>
 800549c:	a201      	add	r2, pc, #4	; (adr r2, 80054a4 <UART_SetConfig+0xf8>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080054d9 	.word	0x080054d9
 80054a8:	080054f9 	.word	0x080054f9
 80054ac:	080054f9 	.word	0x080054f9
 80054b0:	080054f9 	.word	0x080054f9
 80054b4:	080054e9 	.word	0x080054e9
 80054b8:	080054f9 	.word	0x080054f9
 80054bc:	080054f9 	.word	0x080054f9
 80054c0:	080054f9 	.word	0x080054f9
 80054c4:	080054e1 	.word	0x080054e1
 80054c8:	080054f9 	.word	0x080054f9
 80054cc:	080054f9 	.word	0x080054f9
 80054d0:	080054f9 	.word	0x080054f9
 80054d4:	080054f1 	.word	0x080054f1
 80054d8:	2300      	movs	r3, #0
 80054da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054de:	e0d8      	b.n	8005692 <UART_SetConfig+0x2e6>
 80054e0:	2302      	movs	r3, #2
 80054e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e6:	e0d4      	b.n	8005692 <UART_SetConfig+0x2e6>
 80054e8:	2304      	movs	r3, #4
 80054ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ee:	e0d0      	b.n	8005692 <UART_SetConfig+0x2e6>
 80054f0:	2308      	movs	r3, #8
 80054f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054f6:	e0cc      	b.n	8005692 <UART_SetConfig+0x2e6>
 80054f8:	2310      	movs	r3, #16
 80054fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054fe:	e0c8      	b.n	8005692 <UART_SetConfig+0x2e6>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a5e      	ldr	r2, [pc, #376]	; (8005680 <UART_SetConfig+0x2d4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d125      	bne.n	8005556 <UART_SetConfig+0x1aa>
 800550a:	4b5b      	ldr	r3, [pc, #364]	; (8005678 <UART_SetConfig+0x2cc>)
 800550c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005510:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005514:	2b30      	cmp	r3, #48	; 0x30
 8005516:	d016      	beq.n	8005546 <UART_SetConfig+0x19a>
 8005518:	2b30      	cmp	r3, #48	; 0x30
 800551a:	d818      	bhi.n	800554e <UART_SetConfig+0x1a2>
 800551c:	2b20      	cmp	r3, #32
 800551e:	d00a      	beq.n	8005536 <UART_SetConfig+0x18a>
 8005520:	2b20      	cmp	r3, #32
 8005522:	d814      	bhi.n	800554e <UART_SetConfig+0x1a2>
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <UART_SetConfig+0x182>
 8005528:	2b10      	cmp	r3, #16
 800552a:	d008      	beq.n	800553e <UART_SetConfig+0x192>
 800552c:	e00f      	b.n	800554e <UART_SetConfig+0x1a2>
 800552e:	2300      	movs	r3, #0
 8005530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005534:	e0ad      	b.n	8005692 <UART_SetConfig+0x2e6>
 8005536:	2302      	movs	r3, #2
 8005538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553c:	e0a9      	b.n	8005692 <UART_SetConfig+0x2e6>
 800553e:	2304      	movs	r3, #4
 8005540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005544:	e0a5      	b.n	8005692 <UART_SetConfig+0x2e6>
 8005546:	2308      	movs	r3, #8
 8005548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800554c:	e0a1      	b.n	8005692 <UART_SetConfig+0x2e6>
 800554e:	2310      	movs	r3, #16
 8005550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005554:	e09d      	b.n	8005692 <UART_SetConfig+0x2e6>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a4a      	ldr	r2, [pc, #296]	; (8005684 <UART_SetConfig+0x2d8>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d125      	bne.n	80055ac <UART_SetConfig+0x200>
 8005560:	4b45      	ldr	r3, [pc, #276]	; (8005678 <UART_SetConfig+0x2cc>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005566:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800556a:	2bc0      	cmp	r3, #192	; 0xc0
 800556c:	d016      	beq.n	800559c <UART_SetConfig+0x1f0>
 800556e:	2bc0      	cmp	r3, #192	; 0xc0
 8005570:	d818      	bhi.n	80055a4 <UART_SetConfig+0x1f8>
 8005572:	2b80      	cmp	r3, #128	; 0x80
 8005574:	d00a      	beq.n	800558c <UART_SetConfig+0x1e0>
 8005576:	2b80      	cmp	r3, #128	; 0x80
 8005578:	d814      	bhi.n	80055a4 <UART_SetConfig+0x1f8>
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <UART_SetConfig+0x1d8>
 800557e:	2b40      	cmp	r3, #64	; 0x40
 8005580:	d008      	beq.n	8005594 <UART_SetConfig+0x1e8>
 8005582:	e00f      	b.n	80055a4 <UART_SetConfig+0x1f8>
 8005584:	2300      	movs	r3, #0
 8005586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800558a:	e082      	b.n	8005692 <UART_SetConfig+0x2e6>
 800558c:	2302      	movs	r3, #2
 800558e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005592:	e07e      	b.n	8005692 <UART_SetConfig+0x2e6>
 8005594:	2304      	movs	r3, #4
 8005596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800559a:	e07a      	b.n	8005692 <UART_SetConfig+0x2e6>
 800559c:	2308      	movs	r3, #8
 800559e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a2:	e076      	b.n	8005692 <UART_SetConfig+0x2e6>
 80055a4:	2310      	movs	r3, #16
 80055a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055aa:	e072      	b.n	8005692 <UART_SetConfig+0x2e6>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a35      	ldr	r2, [pc, #212]	; (8005688 <UART_SetConfig+0x2dc>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d12a      	bne.n	800560c <UART_SetConfig+0x260>
 80055b6:	4b30      	ldr	r3, [pc, #192]	; (8005678 <UART_SetConfig+0x2cc>)
 80055b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055c4:	d01a      	beq.n	80055fc <UART_SetConfig+0x250>
 80055c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ca:	d81b      	bhi.n	8005604 <UART_SetConfig+0x258>
 80055cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d0:	d00c      	beq.n	80055ec <UART_SetConfig+0x240>
 80055d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055d6:	d815      	bhi.n	8005604 <UART_SetConfig+0x258>
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d003      	beq.n	80055e4 <UART_SetConfig+0x238>
 80055dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055e0:	d008      	beq.n	80055f4 <UART_SetConfig+0x248>
 80055e2:	e00f      	b.n	8005604 <UART_SetConfig+0x258>
 80055e4:	2300      	movs	r3, #0
 80055e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055ea:	e052      	b.n	8005692 <UART_SetConfig+0x2e6>
 80055ec:	2302      	movs	r3, #2
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055f2:	e04e      	b.n	8005692 <UART_SetConfig+0x2e6>
 80055f4:	2304      	movs	r3, #4
 80055f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055fa:	e04a      	b.n	8005692 <UART_SetConfig+0x2e6>
 80055fc:	2308      	movs	r3, #8
 80055fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005602:	e046      	b.n	8005692 <UART_SetConfig+0x2e6>
 8005604:	2310      	movs	r3, #16
 8005606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800560a:	e042      	b.n	8005692 <UART_SetConfig+0x2e6>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a17      	ldr	r2, [pc, #92]	; (8005670 <UART_SetConfig+0x2c4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d13a      	bne.n	800568c <UART_SetConfig+0x2e0>
 8005616:	4b18      	ldr	r3, [pc, #96]	; (8005678 <UART_SetConfig+0x2cc>)
 8005618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800561c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005620:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005624:	d01a      	beq.n	800565c <UART_SetConfig+0x2b0>
 8005626:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800562a:	d81b      	bhi.n	8005664 <UART_SetConfig+0x2b8>
 800562c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005630:	d00c      	beq.n	800564c <UART_SetConfig+0x2a0>
 8005632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005636:	d815      	bhi.n	8005664 <UART_SetConfig+0x2b8>
 8005638:	2b00      	cmp	r3, #0
 800563a:	d003      	beq.n	8005644 <UART_SetConfig+0x298>
 800563c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005640:	d008      	beq.n	8005654 <UART_SetConfig+0x2a8>
 8005642:	e00f      	b.n	8005664 <UART_SetConfig+0x2b8>
 8005644:	2300      	movs	r3, #0
 8005646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800564a:	e022      	b.n	8005692 <UART_SetConfig+0x2e6>
 800564c:	2302      	movs	r3, #2
 800564e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005652:	e01e      	b.n	8005692 <UART_SetConfig+0x2e6>
 8005654:	2304      	movs	r3, #4
 8005656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800565a:	e01a      	b.n	8005692 <UART_SetConfig+0x2e6>
 800565c:	2308      	movs	r3, #8
 800565e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005662:	e016      	b.n	8005692 <UART_SetConfig+0x2e6>
 8005664:	2310      	movs	r3, #16
 8005666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800566a:	e012      	b.n	8005692 <UART_SetConfig+0x2e6>
 800566c:	efff69f3 	.word	0xefff69f3
 8005670:	40008000 	.word	0x40008000
 8005674:	40013800 	.word	0x40013800
 8005678:	40021000 	.word	0x40021000
 800567c:	40004400 	.word	0x40004400
 8005680:	40004800 	.word	0x40004800
 8005684:	40004c00 	.word	0x40004c00
 8005688:	40005000 	.word	0x40005000
 800568c:	2310      	movs	r3, #16
 800568e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a9f      	ldr	r2, [pc, #636]	; (8005914 <UART_SetConfig+0x568>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d17a      	bne.n	8005792 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800569c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d824      	bhi.n	80056ee <UART_SetConfig+0x342>
 80056a4:	a201      	add	r2, pc, #4	; (adr r2, 80056ac <UART_SetConfig+0x300>)
 80056a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056aa:	bf00      	nop
 80056ac:	080056d1 	.word	0x080056d1
 80056b0:	080056ef 	.word	0x080056ef
 80056b4:	080056d9 	.word	0x080056d9
 80056b8:	080056ef 	.word	0x080056ef
 80056bc:	080056df 	.word	0x080056df
 80056c0:	080056ef 	.word	0x080056ef
 80056c4:	080056ef 	.word	0x080056ef
 80056c8:	080056ef 	.word	0x080056ef
 80056cc:	080056e7 	.word	0x080056e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056d0:	f7fe fa3a 	bl	8003b48 <HAL_RCC_GetPCLK1Freq>
 80056d4:	61f8      	str	r0, [r7, #28]
        break;
 80056d6:	e010      	b.n	80056fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056d8:	4b8f      	ldr	r3, [pc, #572]	; (8005918 <UART_SetConfig+0x56c>)
 80056da:	61fb      	str	r3, [r7, #28]
        break;
 80056dc:	e00d      	b.n	80056fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056de:	f7fe f99b 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 80056e2:	61f8      	str	r0, [r7, #28]
        break;
 80056e4:	e009      	b.n	80056fa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056ea:	61fb      	str	r3, [r7, #28]
        break;
 80056ec:	e005      	b.n	80056fa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 80fb 	beq.w	80058f8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	4613      	mov	r3, r2
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	4413      	add	r3, r2
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	429a      	cmp	r2, r3
 8005710:	d305      	bcc.n	800571e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005718:	69fa      	ldr	r2, [r7, #28]
 800571a:	429a      	cmp	r2, r3
 800571c:	d903      	bls.n	8005726 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005724:	e0e8      	b.n	80058f8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	2200      	movs	r2, #0
 800572a:	461c      	mov	r4, r3
 800572c:	4615      	mov	r5, r2
 800572e:	f04f 0200 	mov.w	r2, #0
 8005732:	f04f 0300 	mov.w	r3, #0
 8005736:	022b      	lsls	r3, r5, #8
 8005738:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800573c:	0222      	lsls	r2, r4, #8
 800573e:	68f9      	ldr	r1, [r7, #12]
 8005740:	6849      	ldr	r1, [r1, #4]
 8005742:	0849      	lsrs	r1, r1, #1
 8005744:	2000      	movs	r0, #0
 8005746:	4688      	mov	r8, r1
 8005748:	4681      	mov	r9, r0
 800574a:	eb12 0a08 	adds.w	sl, r2, r8
 800574e:	eb43 0b09 	adc.w	fp, r3, r9
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	603b      	str	r3, [r7, #0]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005760:	4650      	mov	r0, sl
 8005762:	4659      	mov	r1, fp
 8005764:	f7fa fd9c 	bl	80002a0 <__aeabi_uldivmod>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4613      	mov	r3, r2
 800576e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005776:	d308      	bcc.n	800578a <UART_SetConfig+0x3de>
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800577e:	d204      	bcs.n	800578a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	60da      	str	r2, [r3, #12]
 8005788:	e0b6      	b.n	80058f8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005790:	e0b2      	b.n	80058f8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800579a:	d15e      	bne.n	800585a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800579c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d828      	bhi.n	80057f6 <UART_SetConfig+0x44a>
 80057a4:	a201      	add	r2, pc, #4	; (adr r2, 80057ac <UART_SetConfig+0x400>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080057d1 	.word	0x080057d1
 80057b0:	080057d9 	.word	0x080057d9
 80057b4:	080057e1 	.word	0x080057e1
 80057b8:	080057f7 	.word	0x080057f7
 80057bc:	080057e7 	.word	0x080057e7
 80057c0:	080057f7 	.word	0x080057f7
 80057c4:	080057f7 	.word	0x080057f7
 80057c8:	080057f7 	.word	0x080057f7
 80057cc:	080057ef 	.word	0x080057ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057d0:	f7fe f9ba 	bl	8003b48 <HAL_RCC_GetPCLK1Freq>
 80057d4:	61f8      	str	r0, [r7, #28]
        break;
 80057d6:	e014      	b.n	8005802 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057d8:	f7fe f9cc 	bl	8003b74 <HAL_RCC_GetPCLK2Freq>
 80057dc:	61f8      	str	r0, [r7, #28]
        break;
 80057de:	e010      	b.n	8005802 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057e0:	4b4d      	ldr	r3, [pc, #308]	; (8005918 <UART_SetConfig+0x56c>)
 80057e2:	61fb      	str	r3, [r7, #28]
        break;
 80057e4:	e00d      	b.n	8005802 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057e6:	f7fe f917 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 80057ea:	61f8      	str	r0, [r7, #28]
        break;
 80057ec:	e009      	b.n	8005802 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80057f2:	61fb      	str	r3, [r7, #28]
        break;
 80057f4:	e005      	b.n	8005802 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80057f6:	2300      	movs	r3, #0
 80057f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005800:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d077      	beq.n	80058f8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	005a      	lsls	r2, r3, #1
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	085b      	lsrs	r3, r3, #1
 8005812:	441a      	add	r2, r3
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	fbb2 f3f3 	udiv	r3, r2, r3
 800581c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	2b0f      	cmp	r3, #15
 8005822:	d916      	bls.n	8005852 <UART_SetConfig+0x4a6>
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800582a:	d212      	bcs.n	8005852 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	b29b      	uxth	r3, r3
 8005830:	f023 030f 	bic.w	r3, r3, #15
 8005834:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	085b      	lsrs	r3, r3, #1
 800583a:	b29b      	uxth	r3, r3
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	b29a      	uxth	r2, r3
 8005842:	8afb      	ldrh	r3, [r7, #22]
 8005844:	4313      	orrs	r3, r2
 8005846:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	8afa      	ldrh	r2, [r7, #22]
 800584e:	60da      	str	r2, [r3, #12]
 8005850:	e052      	b.n	80058f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005858:	e04e      	b.n	80058f8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800585a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800585e:	2b08      	cmp	r3, #8
 8005860:	d827      	bhi.n	80058b2 <UART_SetConfig+0x506>
 8005862:	a201      	add	r2, pc, #4	; (adr r2, 8005868 <UART_SetConfig+0x4bc>)
 8005864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005868:	0800588d 	.word	0x0800588d
 800586c:	08005895 	.word	0x08005895
 8005870:	0800589d 	.word	0x0800589d
 8005874:	080058b3 	.word	0x080058b3
 8005878:	080058a3 	.word	0x080058a3
 800587c:	080058b3 	.word	0x080058b3
 8005880:	080058b3 	.word	0x080058b3
 8005884:	080058b3 	.word	0x080058b3
 8005888:	080058ab 	.word	0x080058ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800588c:	f7fe f95c 	bl	8003b48 <HAL_RCC_GetPCLK1Freq>
 8005890:	61f8      	str	r0, [r7, #28]
        break;
 8005892:	e014      	b.n	80058be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005894:	f7fe f96e 	bl	8003b74 <HAL_RCC_GetPCLK2Freq>
 8005898:	61f8      	str	r0, [r7, #28]
        break;
 800589a:	e010      	b.n	80058be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800589c:	4b1e      	ldr	r3, [pc, #120]	; (8005918 <UART_SetConfig+0x56c>)
 800589e:	61fb      	str	r3, [r7, #28]
        break;
 80058a0:	e00d      	b.n	80058be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058a2:	f7fe f8b9 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 80058a6:	61f8      	str	r0, [r7, #28]
        break;
 80058a8:	e009      	b.n	80058be <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058ae:	61fb      	str	r3, [r7, #28]
        break;
 80058b0:	e005      	b.n	80058be <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80058bc:	bf00      	nop
    }

    if (pclk != 0U)
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d019      	beq.n	80058f8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	085a      	lsrs	r2, r3, #1
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	441a      	add	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	2b0f      	cmp	r3, #15
 80058dc:	d909      	bls.n	80058f2 <UART_SetConfig+0x546>
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e4:	d205      	bcs.n	80058f2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60da      	str	r2, [r3, #12]
 80058f0:	e002      	b.n	80058f8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005904:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005908:	4618      	mov	r0, r3
 800590a:	3728      	adds	r7, #40	; 0x28
 800590c:	46bd      	mov	sp, r7
 800590e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005912:	bf00      	nop
 8005914:	40008000 	.word	0x40008000
 8005918:	00f42400 	.word	0x00f42400

0800591c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	f003 0308 	and.w	r3, r3, #8
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	f003 0304 	and.w	r3, r3, #4
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b0:	f003 0310 	and.w	r3, r3, #16
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00a      	beq.n	80059ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	430a      	orrs	r2, r1
 80059cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	f003 0320 	and.w	r3, r3, #32
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01a      	beq.n	8005a32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a1a:	d10a      	bne.n	8005a32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	430a      	orrs	r2, r1
 8005a30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00a      	beq.n	8005a54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	605a      	str	r2, [r3, #4]
  }
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b098      	sub	sp, #96	; 0x60
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005a70:	f7fb fc06 	bl	8001280 <HAL_GetTick>
 8005a74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0308 	and.w	r3, r3, #8
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d12e      	bne.n	8005ae2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005a88:	9300      	str	r3, [sp, #0]
 8005a8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 f88c 	bl	8005bb0 <UART_WaitOnFlagUntilTimeout>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d021      	beq.n	8005ae2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ab2:	653b      	str	r3, [r7, #80]	; 0x50
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005abc:	647b      	str	r3, [r7, #68]	; 0x44
 8005abe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ac2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e6      	bne.n	8005a9e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e062      	b.n	8005ba8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d149      	bne.n	8005b84 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005af0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005af4:	9300      	str	r3, [sp, #0]
 8005af6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005af8:	2200      	movs	r2, #0
 8005afa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f856 	bl	8005bb0 <UART_WaitOnFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d03c      	beq.n	8005b84 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	623b      	str	r3, [r7, #32]
   return(result);
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	461a      	mov	r2, r3
 8005b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b28:	633b      	str	r3, [r7, #48]	; 0x30
 8005b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e6      	bne.n	8005b0a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3308      	adds	r3, #8
 8005b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f023 0301 	bic.w	r3, r3, #1
 8005b52:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3308      	adds	r3, #8
 8005b5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b5c:	61fa      	str	r2, [r7, #28]
 8005b5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	69b9      	ldr	r1, [r7, #24]
 8005b62:	69fa      	ldr	r2, [r7, #28]
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	617b      	str	r3, [r7, #20]
   return(result);
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e5      	bne.n	8005b3c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e011      	b.n	8005ba8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2220      	movs	r2, #32
 8005b88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2220      	movs	r2, #32
 8005b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3758      	adds	r7, #88	; 0x58
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	603b      	str	r3, [r7, #0]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc0:	e049      	b.n	8005c56 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bc8:	d045      	beq.n	8005c56 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bca:	f7fb fb59 	bl	8001280 <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	69ba      	ldr	r2, [r7, #24]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d302      	bcc.n	8005be0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e048      	b.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f003 0304 	and.w	r3, r3, #4
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d031      	beq.n	8005c56 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	f003 0308 	and.w	r3, r3, #8
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d110      	bne.n	8005c22 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2208      	movs	r2, #8
 8005c06:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f838 	bl	8005c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2208      	movs	r2, #8
 8005c12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e029      	b.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c30:	d111      	bne.n	8005c56 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f81e 	bl	8005c7e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e00f      	b.n	8005c76 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	bf0c      	ite	eq
 8005c66:	2301      	moveq	r3, #1
 8005c68:	2300      	movne	r3, #0
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	79fb      	ldrb	r3, [r7, #7]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d0a6      	beq.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b095      	sub	sp, #84	; 0x54
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c8e:	e853 3f00 	ldrex	r3, [r3]
 8005c92:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ca6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005caa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cac:	e841 2300 	strex	r3, r2, [r1]
 8005cb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1e6      	bne.n	8005c86 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f023 0301 	bic.w	r3, r3, #1
 8005cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e5      	bne.n	8005cb8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d118      	bne.n	8005d26 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f023 0310 	bic.w	r3, r3, #16
 8005d08:	647b      	str	r3, [r7, #68]	; 0x44
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d12:	61bb      	str	r3, [r7, #24]
 8005d14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	6979      	ldr	r1, [r7, #20]
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e6      	bne.n	8005cf4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005d3a:	bf00      	nop
 8005d3c:	3754      	adds	r7, #84	; 0x54
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr
	...

08005d48 <__NVIC_SetPriority>:
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	4603      	mov	r3, r0
 8005d50:	6039      	str	r1, [r7, #0]
 8005d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	db0a      	blt.n	8005d72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	490c      	ldr	r1, [pc, #48]	; (8005d94 <__NVIC_SetPriority+0x4c>)
 8005d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d66:	0112      	lsls	r2, r2, #4
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	440b      	add	r3, r1
 8005d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d70:	e00a      	b.n	8005d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	4908      	ldr	r1, [pc, #32]	; (8005d98 <__NVIC_SetPriority+0x50>)
 8005d78:	79fb      	ldrb	r3, [r7, #7]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	3b04      	subs	r3, #4
 8005d80:	0112      	lsls	r2, r2, #4
 8005d82:	b2d2      	uxtb	r2, r2
 8005d84:	440b      	add	r3, r1
 8005d86:	761a      	strb	r2, [r3, #24]
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr
 8005d94:	e000e100 	.word	0xe000e100
 8005d98:	e000ed00 	.word	0xe000ed00

08005d9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005da0:	2100      	movs	r1, #0
 8005da2:	f06f 0004 	mvn.w	r0, #4
 8005da6:	f7ff ffcf 	bl	8005d48 <__NVIC_SetPriority>
#endif
}
 8005daa:	bf00      	nop
 8005dac:	bd80      	pop	{r7, pc}
	...

08005db0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005db6:	f3ef 8305 	mrs	r3, IPSR
 8005dba:	603b      	str	r3, [r7, #0]
  return(result);
 8005dbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005dc2:	f06f 0305 	mvn.w	r3, #5
 8005dc6:	607b      	str	r3, [r7, #4]
 8005dc8:	e00c      	b.n	8005de4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005dca:	4b0a      	ldr	r3, [pc, #40]	; (8005df4 <osKernelInitialize+0x44>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d105      	bne.n	8005dde <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005dd2:	4b08      	ldr	r3, [pc, #32]	; (8005df4 <osKernelInitialize+0x44>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	607b      	str	r3, [r7, #4]
 8005ddc:	e002      	b.n	8005de4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005de2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005de4:	687b      	ldr	r3, [r7, #4]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	370c      	adds	r7, #12
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20000240 	.word	0x20000240

08005df8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dfe:	f3ef 8305 	mrs	r3, IPSR
 8005e02:	603b      	str	r3, [r7, #0]
  return(result);
 8005e04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005e0a:	f06f 0305 	mvn.w	r3, #5
 8005e0e:	607b      	str	r3, [r7, #4]
 8005e10:	e010      	b.n	8005e34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e12:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <osKernelStart+0x48>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d109      	bne.n	8005e2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005e1a:	f7ff ffbf 	bl	8005d9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005e1e:	4b08      	ldr	r3, [pc, #32]	; (8005e40 <osKernelStart+0x48>)
 8005e20:	2202      	movs	r2, #2
 8005e22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e24:	f001 fb88 	bl	8007538 <vTaskStartScheduler>
      stat = osOK;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	607b      	str	r3, [r7, #4]
 8005e2c:	e002      	b.n	8005e34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e34:	687b      	ldr	r3, [r7, #4]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000240 	.word	0x20000240

08005e44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08e      	sub	sp, #56	; 0x38
 8005e48:	af04      	add	r7, sp, #16
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e54:	f3ef 8305 	mrs	r3, IPSR
 8005e58:	617b      	str	r3, [r7, #20]
  return(result);
 8005e5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d17e      	bne.n	8005f5e <osThreadNew+0x11a>
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d07b      	beq.n	8005f5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005e66:	2380      	movs	r3, #128	; 0x80
 8005e68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005e6a:	2318      	movs	r3, #24
 8005e6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d045      	beq.n	8005f0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d002      	beq.n	8005e8c <osThreadNew+0x48>
        name = attr->name;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	699b      	ldr	r3, [r3, #24]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d008      	beq.n	8005eb2 <osThreadNew+0x6e>
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	2b38      	cmp	r3, #56	; 0x38
 8005ea4:	d805      	bhi.n	8005eb2 <osThreadNew+0x6e>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <osThreadNew+0x72>
        return (NULL);
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	e054      	b.n	8005f60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	695b      	ldr	r3, [r3, #20]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	695b      	ldr	r3, [r3, #20]
 8005ec2:	089b      	lsrs	r3, r3, #2
 8005ec4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00e      	beq.n	8005eec <osThreadNew+0xa8>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68db      	ldr	r3, [r3, #12]
 8005ed2:	2b5b      	cmp	r3, #91	; 0x5b
 8005ed4:	d90a      	bls.n	8005eec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d006      	beq.n	8005eec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <osThreadNew+0xa8>
        mem = 1;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	e010      	b.n	8005f0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10c      	bne.n	8005f0e <osThreadNew+0xca>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d108      	bne.n	8005f0e <osThreadNew+0xca>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	691b      	ldr	r3, [r3, #16]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d104      	bne.n	8005f0e <osThreadNew+0xca>
          mem = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	61bb      	str	r3, [r7, #24]
 8005f08:	e001      	b.n	8005f0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d110      	bne.n	8005f36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005f18:	687a      	ldr	r2, [r7, #4]
 8005f1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f1c:	9202      	str	r2, [sp, #8]
 8005f1e:	9301      	str	r3, [sp, #4]
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	9300      	str	r3, [sp, #0]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	6a3a      	ldr	r2, [r7, #32]
 8005f28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f001 f92e 	bl	800718c <xTaskCreateStatic>
 8005f30:	4603      	mov	r3, r0
 8005f32:	613b      	str	r3, [r7, #16]
 8005f34:	e013      	b.n	8005f5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d110      	bne.n	8005f5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f3c:	6a3b      	ldr	r3, [r7, #32]
 8005f3e:	b29a      	uxth	r2, r3
 8005f40:	f107 0310 	add.w	r3, r7, #16
 8005f44:	9301      	str	r3, [sp, #4]
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f001 f979 	bl	8007246 <xTaskCreate>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d001      	beq.n	8005f5e <osThreadNew+0x11a>
            hTask = NULL;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005f5e:	693b      	ldr	r3, [r7, #16]
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3728      	adds	r7, #40	; 0x28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f70:	f3ef 8305 	mrs	r3, IPSR
 8005f74:	60bb      	str	r3, [r7, #8]
  return(result);
 8005f76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <osDelay+0x1c>
    stat = osErrorISR;
 8005f7c:	f06f 0305 	mvn.w	r3, #5
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	e007      	b.n	8005f94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f001 fa9e 	bl	80074d0 <vTaskDelay>
    }
  }

  return (stat);
 8005f94:	68fb      	ldr	r3, [r7, #12]
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b088      	sub	sp, #32
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005faa:	f3ef 8305 	mrs	r3, IPSR
 8005fae:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fb0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d174      	bne.n	80060a0 <osMutexNew+0x102>
    if (attr != NULL) {
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	61bb      	str	r3, [r7, #24]
 8005fc2:	e001      	b.n	8005fc8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <osMutexNew+0x3a>
      rmtx = 1U;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	617b      	str	r3, [r7, #20]
 8005fd6:	e001      	b.n	8005fdc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	f003 0308 	and.w	r3, r3, #8
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d15c      	bne.n	80060a0 <osMutexNew+0x102>
      mem = -1;
 8005fe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005fea:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d015      	beq.n	800601e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d006      	beq.n	8006008 <osMutexNew+0x6a>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68db      	ldr	r3, [r3, #12]
 8005ffe:	2b4f      	cmp	r3, #79	; 0x4f
 8006000:	d902      	bls.n	8006008 <osMutexNew+0x6a>
          mem = 1;
 8006002:	2301      	movs	r3, #1
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	e00c      	b.n	8006022 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d108      	bne.n	8006022 <osMutexNew+0x84>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d104      	bne.n	8006022 <osMutexNew+0x84>
            mem = 0;
 8006018:	2300      	movs	r3, #0
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	e001      	b.n	8006022 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800601e:	2300      	movs	r3, #0
 8006020:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d112      	bne.n	800604e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	4619      	mov	r1, r3
 8006034:	2004      	movs	r0, #4
 8006036:	f000 fb18 	bl	800666a <xQueueCreateMutexStatic>
 800603a:	61f8      	str	r0, [r7, #28]
 800603c:	e016      	b.n	800606c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	4619      	mov	r1, r3
 8006044:	2001      	movs	r0, #1
 8006046:	f000 fb10 	bl	800666a <xQueueCreateMutexStatic>
 800604a:	61f8      	str	r0, [r7, #28]
 800604c:	e00e      	b.n	800606c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10b      	bne.n	800606c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d004      	beq.n	8006064 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800605a:	2004      	movs	r0, #4
 800605c:	f000 faed 	bl	800663a <xQueueCreateMutex>
 8006060:	61f8      	str	r0, [r7, #28]
 8006062:	e003      	b.n	800606c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006064:	2001      	movs	r0, #1
 8006066:	f000 fae8 	bl	800663a <xQueueCreateMutex>
 800606a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00c      	beq.n	800608c <osMutexNew+0xee>
        if (attr != NULL) {
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d003      	beq.n	8006080 <osMutexNew+0xe2>
          name = attr->name;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	60fb      	str	r3, [r7, #12]
 800607e:	e001      	b.n	8006084 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8006080:	2300      	movs	r3, #0
 8006082:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8006084:	68f9      	ldr	r1, [r7, #12]
 8006086:	69f8      	ldr	r0, [r7, #28]
 8006088:	f001 f822 	bl	80070d0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d006      	beq.n	80060a0 <osMutexNew+0x102>
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	f043 0301 	orr.w	r3, r3, #1
 800609e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80060a0:	69fb      	ldr	r3, [r7, #28]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3720      	adds	r7, #32
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b086      	sub	sp, #24
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f023 0301 	bic.w	r3, r3, #1
 80060ba:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f003 0301 	and.w	r3, r3, #1
 80060c2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80060c4:	2300      	movs	r3, #0
 80060c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060c8:	f3ef 8305 	mrs	r3, IPSR
 80060cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80060ce:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d003      	beq.n	80060dc <osMutexAcquire+0x32>
    stat = osErrorISR;
 80060d4:	f06f 0305 	mvn.w	r3, #5
 80060d8:	617b      	str	r3, [r7, #20]
 80060da:	e02c      	b.n	8006136 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d103      	bne.n	80060ea <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80060e2:	f06f 0303 	mvn.w	r3, #3
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	e025      	b.n	8006136 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d011      	beq.n	8006114 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80060f0:	6839      	ldr	r1, [r7, #0]
 80060f2:	6938      	ldr	r0, [r7, #16]
 80060f4:	f000 fb08 	bl	8006708 <xQueueTakeMutexRecursive>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d01b      	beq.n	8006136 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d003      	beq.n	800610c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006104:	f06f 0301 	mvn.w	r3, #1
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	e014      	b.n	8006136 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800610c:	f06f 0302 	mvn.w	r3, #2
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	e010      	b.n	8006136 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006114:	6839      	ldr	r1, [r7, #0]
 8006116:	6938      	ldr	r0, [r7, #16]
 8006118:	f000 fda6 	bl	8006c68 <xQueueSemaphoreTake>
 800611c:	4603      	mov	r3, r0
 800611e:	2b01      	cmp	r3, #1
 8006120:	d009      	beq.n	8006136 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d003      	beq.n	8006130 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8006128:	f06f 0301 	mvn.w	r3, #1
 800612c:	617b      	str	r3, [r7, #20]
 800612e:	e002      	b.n	8006136 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006130:	f06f 0302 	mvn.w	r3, #2
 8006134:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8006136:	697b      	ldr	r3, [r7, #20]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3718      	adds	r7, #24
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f023 0301 	bic.w	r3, r3, #1
 800614e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8006158:	2300      	movs	r3, #0
 800615a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800615c:	f3ef 8305 	mrs	r3, IPSR
 8006160:	60bb      	str	r3, [r7, #8]
  return(result);
 8006162:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <osMutexRelease+0x30>
    stat = osErrorISR;
 8006168:	f06f 0305 	mvn.w	r3, #5
 800616c:	617b      	str	r3, [r7, #20]
 800616e:	e01f      	b.n	80061b0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d103      	bne.n	800617e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8006176:	f06f 0303 	mvn.w	r3, #3
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	e018      	b.n	80061b0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d009      	beq.n	8006198 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006184:	6938      	ldr	r0, [r7, #16]
 8006186:	f000 fa8b 	bl	80066a0 <xQueueGiveMutexRecursive>
 800618a:	4603      	mov	r3, r0
 800618c:	2b01      	cmp	r3, #1
 800618e:	d00f      	beq.n	80061b0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8006190:	f06f 0302 	mvn.w	r3, #2
 8006194:	617b      	str	r3, [r7, #20]
 8006196:	e00b      	b.n	80061b0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006198:	2300      	movs	r3, #0
 800619a:	2200      	movs	r2, #0
 800619c:	2100      	movs	r1, #0
 800619e:	6938      	ldr	r0, [r7, #16]
 80061a0:	f000 fae8 	bl	8006774 <xQueueGenericSend>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d002      	beq.n	80061b0 <osMutexRelease+0x70>
        stat = osErrorResource;
 80061aa:	f06f 0302 	mvn.w	r3, #2
 80061ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80061b0:	697b      	ldr	r3, [r7, #20]
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3718      	adds	r7, #24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4a07      	ldr	r2, [pc, #28]	; (80061e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80061cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4a06      	ldr	r2, [pc, #24]	; (80061ec <vApplicationGetIdleTaskMemory+0x30>)
 80061d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2280      	movs	r2, #128	; 0x80
 80061d8:	601a      	str	r2, [r3, #0]
}
 80061da:	bf00      	nop
 80061dc:	3714      	adds	r7, #20
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	20000244 	.word	0x20000244
 80061ec:	200002a0 	.word	0x200002a0

080061f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4a07      	ldr	r2, [pc, #28]	; (800621c <vApplicationGetTimerTaskMemory+0x2c>)
 8006200:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	4a06      	ldr	r2, [pc, #24]	; (8006220 <vApplicationGetTimerTaskMemory+0x30>)
 8006206:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800620e:	601a      	str	r2, [r3, #0]
}
 8006210:	bf00      	nop
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	200004a0 	.word	0x200004a0
 8006220:	200004fc 	.word	0x200004fc

08006224 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f103 0208 	add.w	r2, r3, #8
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800623c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f103 0208 	add.w	r2, r3, #8
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f103 0208 	add.w	r2, r3, #8
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800627e:	b480      	push	{r7}
 8006280:	b085      	sub	sp, #20
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	689a      	ldr	r2, [r3, #8]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	683a      	ldr	r2, [r7, #0]
 80062a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	601a      	str	r2, [r3, #0]
}
 80062ba:	bf00      	nop
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80062c6:	b480      	push	{r7}
 80062c8:	b085      	sub	sp, #20
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062dc:	d103      	bne.n	80062e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	691b      	ldr	r3, [r3, #16]
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e00c      	b.n	8006300 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3308      	adds	r3, #8
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	e002      	b.n	80062f4 <vListInsert+0x2e>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d2f6      	bcs.n	80062ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	601a      	str	r2, [r3, #0]
}
 800632c:	bf00      	nop
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	6892      	ldr	r2, [r2, #8]
 800634e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	6852      	ldr	r2, [r2, #4]
 8006358:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	429a      	cmp	r2, r3
 8006362:	d103      	bne.n	800636c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689a      	ldr	r2, [r3, #8]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	1e5a      	subs	r2, r3, #1
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10a      	bne.n	80063b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80063b2:	bf00      	nop
 80063b4:	e7fe      	b.n	80063b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80063b6:	f002 fb6d 	bl	8008a94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c2:	68f9      	ldr	r1, [r7, #12]
 80063c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063c6:	fb01 f303 	mul.w	r3, r1, r3
 80063ca:	441a      	add	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063e6:	3b01      	subs	r3, #1
 80063e8:	68f9      	ldr	r1, [r7, #12]
 80063ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80063ec:	fb01 f303 	mul.w	r3, r1, r3
 80063f0:	441a      	add	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	22ff      	movs	r2, #255	; 0xff
 80063fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	22ff      	movs	r2, #255	; 0xff
 8006402:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d114      	bne.n	8006436 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01a      	beq.n	800644a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3310      	adds	r3, #16
 8006418:	4618      	mov	r0, r3
 800641a:	f001 fb17 	bl	8007a4c <xTaskRemoveFromEventList>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d012      	beq.n	800644a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006424:	4b0c      	ldr	r3, [pc, #48]	; (8006458 <xQueueGenericReset+0xcc>)
 8006426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	e009      	b.n	800644a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3310      	adds	r3, #16
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff fef2 	bl	8006224 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3324      	adds	r3, #36	; 0x24
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff feed 	bl	8006224 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800644a:	f002 fb53 	bl	8008af4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800644e:	2301      	movs	r3, #1
}
 8006450:	4618      	mov	r0, r3
 8006452:	3710      	adds	r7, #16
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	e000ed04 	.word	0xe000ed04

0800645c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08e      	sub	sp, #56	; 0x38
 8006460:	af02      	add	r7, sp, #8
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
 8006468:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10a      	bne.n	8006486 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006482:	bf00      	nop
 8006484:	e7fe      	b.n	8006484 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10a      	bne.n	80064a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006490:	f383 8811 	msr	BASEPRI, r3
 8006494:	f3bf 8f6f 	isb	sy
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800649e:	bf00      	nop
 80064a0:	e7fe      	b.n	80064a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d002      	beq.n	80064ae <xQueueGenericCreateStatic+0x52>
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <xQueueGenericCreateStatic+0x56>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <xQueueGenericCreateStatic+0x58>
 80064b2:	2300      	movs	r3, #0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10a      	bne.n	80064ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	623b      	str	r3, [r7, #32]
}
 80064ca:	bf00      	nop
 80064cc:	e7fe      	b.n	80064cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d102      	bne.n	80064da <xQueueGenericCreateStatic+0x7e>
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <xQueueGenericCreateStatic+0x82>
 80064da:	2301      	movs	r3, #1
 80064dc:	e000      	b.n	80064e0 <xQueueGenericCreateStatic+0x84>
 80064de:	2300      	movs	r3, #0
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d10a      	bne.n	80064fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80064e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e8:	f383 8811 	msr	BASEPRI, r3
 80064ec:	f3bf 8f6f 	isb	sy
 80064f0:	f3bf 8f4f 	dsb	sy
 80064f4:	61fb      	str	r3, [r7, #28]
}
 80064f6:	bf00      	nop
 80064f8:	e7fe      	b.n	80064f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80064fa:	2350      	movs	r3, #80	; 0x50
 80064fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b50      	cmp	r3, #80	; 0x50
 8006502:	d00a      	beq.n	800651a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	61bb      	str	r3, [r7, #24]
}
 8006516:	bf00      	nop
 8006518:	e7fe      	b.n	8006518 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800651a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00d      	beq.n	8006542 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800652e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	4613      	mov	r3, r2
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f83f 	bl	80065c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006544:	4618      	mov	r0, r3
 8006546:	3730      	adds	r7, #48	; 0x30
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08a      	sub	sp, #40	; 0x28
 8006550:	af02      	add	r7, sp, #8
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	4613      	mov	r3, r2
 8006558:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10a      	bne.n	8006576 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	613b      	str	r3, [r7, #16]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	fb02 f303 	mul.w	r3, r2, r3
 800657e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	3350      	adds	r3, #80	; 0x50
 8006584:	4618      	mov	r0, r3
 8006586:	f002 fba7 	bl	8008cd8 <pvPortMalloc>
 800658a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d011      	beq.n	80065b6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	3350      	adds	r3, #80	; 0x50
 800659a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065a4:	79fa      	ldrb	r2, [r7, #7]
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	4613      	mov	r3, r2
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 f805 	bl	80065c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065b6:	69bb      	ldr	r3, [r7, #24]
	}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3720      	adds	r7, #32
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d103      	bne.n	80065dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	601a      	str	r2, [r3, #0]
 80065da:	e002      	b.n	80065e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80065dc:	69bb      	ldr	r3, [r7, #24]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80065ee:	2101      	movs	r1, #1
 80065f0:	69b8      	ldr	r0, [r7, #24]
 80065f2:	f7ff fecb 	bl	800638c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	78fa      	ldrb	r2, [r7, #3]
 80065fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80065fe:	bf00      	nop
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006606:	b580      	push	{r7, lr}
 8006608:	b082      	sub	sp, #8
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00e      	beq.n	8006632 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006626:	2300      	movs	r3, #0
 8006628:	2200      	movs	r2, #0
 800662a:	2100      	movs	r1, #0
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f8a1 	bl	8006774 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006632:	bf00      	nop
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800663a:	b580      	push	{r7, lr}
 800663c:	b086      	sub	sp, #24
 800663e:	af00      	add	r7, sp, #0
 8006640:	4603      	mov	r3, r0
 8006642:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006644:	2301      	movs	r3, #1
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	2300      	movs	r3, #0
 800664a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800664c:	79fb      	ldrb	r3, [r7, #7]
 800664e:	461a      	mov	r2, r3
 8006650:	6939      	ldr	r1, [r7, #16]
 8006652:	6978      	ldr	r0, [r7, #20]
 8006654:	f7ff ff7a 	bl	800654c <xQueueGenericCreate>
 8006658:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f7ff ffd3 	bl	8006606 <prvInitialiseMutex>

		return xNewQueue;
 8006660:	68fb      	ldr	r3, [r7, #12]
	}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800666a:	b580      	push	{r7, lr}
 800666c:	b088      	sub	sp, #32
 800666e:	af02      	add	r7, sp, #8
 8006670:	4603      	mov	r3, r0
 8006672:	6039      	str	r1, [r7, #0]
 8006674:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006676:	2301      	movs	r3, #1
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	2300      	movs	r3, #0
 800667c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800667e:	79fb      	ldrb	r3, [r7, #7]
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	2200      	movs	r2, #0
 8006686:	6939      	ldr	r1, [r7, #16]
 8006688:	6978      	ldr	r0, [r7, #20]
 800668a:	f7ff fee7 	bl	800645c <xQueueGenericCreateStatic>
 800668e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f7ff ffb8 	bl	8006606 <prvInitialiseMutex>

		return xNewQueue;
 8006696:	68fb      	ldr	r3, [r7, #12]
	}
 8006698:	4618      	mov	r0, r3
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80066a0:	b590      	push	{r4, r7, lr}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10a      	bne.n	80066c8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80066b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b6:	f383 8811 	msr	BASEPRI, r3
 80066ba:	f3bf 8f6f 	isb	sy
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	60fb      	str	r3, [r7, #12]
}
 80066c4:	bf00      	nop
 80066c6:	e7fe      	b.n	80066c6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	689c      	ldr	r4, [r3, #8]
 80066cc:	f001 fb7c 	bl	8007dc8 <xTaskGetCurrentTaskHandle>
 80066d0:	4603      	mov	r3, r0
 80066d2:	429c      	cmp	r4, r3
 80066d4:	d111      	bne.n	80066fa <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	1e5a      	subs	r2, r3, #1
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d105      	bne.n	80066f4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80066e8:	2300      	movs	r3, #0
 80066ea:	2200      	movs	r2, #0
 80066ec:	2100      	movs	r1, #0
 80066ee:	6938      	ldr	r0, [r7, #16]
 80066f0:	f000 f840 	bl	8006774 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80066f4:	2301      	movs	r3, #1
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	e001      	b.n	80066fe <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80066fe:	697b      	ldr	r3, [r7, #20]
	}
 8006700:	4618      	mov	r0, r3
 8006702:	371c      	adds	r7, #28
 8006704:	46bd      	mov	sp, r7
 8006706:	bd90      	pop	{r4, r7, pc}

08006708 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006708:	b590      	push	{r4, r7, lr}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d10a      	bne.n	8006732 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800671c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006720:	f383 8811 	msr	BASEPRI, r3
 8006724:	f3bf 8f6f 	isb	sy
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	60fb      	str	r3, [r7, #12]
}
 800672e:	bf00      	nop
 8006730:	e7fe      	b.n	8006730 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	689c      	ldr	r4, [r3, #8]
 8006736:	f001 fb47 	bl	8007dc8 <xTaskGetCurrentTaskHandle>
 800673a:	4603      	mov	r3, r0
 800673c:	429c      	cmp	r4, r3
 800673e:	d107      	bne.n	8006750 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800674a:	2301      	movs	r3, #1
 800674c:	617b      	str	r3, [r7, #20]
 800674e:	e00c      	b.n	800676a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	6938      	ldr	r0, [r7, #16]
 8006754:	f000 fa88 	bl	8006c68 <xQueueSemaphoreTake>
 8006758:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d004      	beq.n	800676a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800676a:	697b      	ldr	r3, [r7, #20]
	}
 800676c:	4618      	mov	r0, r3
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	bd90      	pop	{r4, r7, pc}

08006774 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b08e      	sub	sp, #56	; 0x38
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006782:	2300      	movs	r3, #0
 8006784:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800678a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10a      	bne.n	80067a6 <xQueueGenericSend+0x32>
	__asm volatile
 8006790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006794:	f383 8811 	msr	BASEPRI, r3
 8006798:	f3bf 8f6f 	isb	sy
 800679c:	f3bf 8f4f 	dsb	sy
 80067a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80067a2:	bf00      	nop
 80067a4:	e7fe      	b.n	80067a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d103      	bne.n	80067b4 <xQueueGenericSend+0x40>
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d101      	bne.n	80067b8 <xQueueGenericSend+0x44>
 80067b4:	2301      	movs	r3, #1
 80067b6:	e000      	b.n	80067ba <xQueueGenericSend+0x46>
 80067b8:	2300      	movs	r3, #0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10a      	bne.n	80067d4 <xQueueGenericSend+0x60>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80067d0:	bf00      	nop
 80067d2:	e7fe      	b.n	80067d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d103      	bne.n	80067e2 <xQueueGenericSend+0x6e>
 80067da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <xQueueGenericSend+0x72>
 80067e2:	2301      	movs	r3, #1
 80067e4:	e000      	b.n	80067e8 <xQueueGenericSend+0x74>
 80067e6:	2300      	movs	r3, #0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <xQueueGenericSend+0x8e>
	__asm volatile
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	623b      	str	r3, [r7, #32]
}
 80067fe:	bf00      	nop
 8006800:	e7fe      	b.n	8006800 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006802:	f001 faf1 	bl	8007de8 <xTaskGetSchedulerState>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d102      	bne.n	8006812 <xQueueGenericSend+0x9e>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <xQueueGenericSend+0xa2>
 8006812:	2301      	movs	r3, #1
 8006814:	e000      	b.n	8006818 <xQueueGenericSend+0xa4>
 8006816:	2300      	movs	r3, #0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d10a      	bne.n	8006832 <xQueueGenericSend+0xbe>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	61fb      	str	r3, [r7, #28]
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006832:	f002 f92f 	bl	8008a94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683e:	429a      	cmp	r2, r3
 8006840:	d302      	bcc.n	8006848 <xQueueGenericSend+0xd4>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b02      	cmp	r3, #2
 8006846:	d129      	bne.n	800689c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800684e:	f000 fb2f 	bl	8006eb0 <prvCopyDataToQueue>
 8006852:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	2b00      	cmp	r3, #0
 800685a:	d010      	beq.n	800687e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800685c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685e:	3324      	adds	r3, #36	; 0x24
 8006860:	4618      	mov	r0, r3
 8006862:	f001 f8f3 	bl	8007a4c <xTaskRemoveFromEventList>
 8006866:	4603      	mov	r3, r0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d013      	beq.n	8006894 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800686c:	4b3f      	ldr	r3, [pc, #252]	; (800696c <xQueueGenericSend+0x1f8>)
 800686e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	e00a      	b.n	8006894 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800687e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006880:	2b00      	cmp	r3, #0
 8006882:	d007      	beq.n	8006894 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006884:	4b39      	ldr	r3, [pc, #228]	; (800696c <xQueueGenericSend+0x1f8>)
 8006886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800688a:	601a      	str	r2, [r3, #0]
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006894:	f002 f92e 	bl	8008af4 <vPortExitCritical>
				return pdPASS;
 8006898:	2301      	movs	r3, #1
 800689a:	e063      	b.n	8006964 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d103      	bne.n	80068aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80068a2:	f002 f927 	bl	8008af4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	e05c      	b.n	8006964 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80068aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d106      	bne.n	80068be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068b0:	f107 0314 	add.w	r3, r7, #20
 80068b4:	4618      	mov	r0, r3
 80068b6:	f001 f92d 	bl	8007b14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068ba:	2301      	movs	r3, #1
 80068bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068be:	f002 f919 	bl	8008af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068c2:	f000 fe9f 	bl	8007604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068c6:	f002 f8e5 	bl	8008a94 <vPortEnterCritical>
 80068ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068d0:	b25b      	sxtb	r3, r3
 80068d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068d6:	d103      	bne.n	80068e0 <xQueueGenericSend+0x16c>
 80068d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068e6:	b25b      	sxtb	r3, r3
 80068e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ec:	d103      	bne.n	80068f6 <xQueueGenericSend+0x182>
 80068ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068f6:	f002 f8fd 	bl	8008af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068fa:	1d3a      	adds	r2, r7, #4
 80068fc:	f107 0314 	add.w	r3, r7, #20
 8006900:	4611      	mov	r1, r2
 8006902:	4618      	mov	r0, r3
 8006904:	f001 f91c 	bl	8007b40 <xTaskCheckForTimeOut>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d124      	bne.n	8006958 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800690e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006910:	f000 fbc6 	bl	80070a0 <prvIsQueueFull>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d018      	beq.n	800694c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	3310      	adds	r3, #16
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	4611      	mov	r1, r2
 8006922:	4618      	mov	r0, r3
 8006924:	f001 f842 	bl	80079ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800692a:	f000 fb51 	bl	8006fd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800692e:	f000 fe77 	bl	8007620 <xTaskResumeAll>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	f47f af7c 	bne.w	8006832 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800693a:	4b0c      	ldr	r3, [pc, #48]	; (800696c <xQueueGenericSend+0x1f8>)
 800693c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006940:	601a      	str	r2, [r3, #0]
 8006942:	f3bf 8f4f 	dsb	sy
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	e772      	b.n	8006832 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800694c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800694e:	f000 fb3f 	bl	8006fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006952:	f000 fe65 	bl	8007620 <xTaskResumeAll>
 8006956:	e76c      	b.n	8006832 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800695a:	f000 fb39 	bl	8006fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800695e:	f000 fe5f 	bl	8007620 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006962:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006964:	4618      	mov	r0, r3
 8006966:	3738      	adds	r7, #56	; 0x38
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	e000ed04 	.word	0xe000ed04

08006970 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b090      	sub	sp, #64	; 0x40
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	2b00      	cmp	r3, #0
 8006986:	d10a      	bne.n	800699e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698c:	f383 8811 	msr	BASEPRI, r3
 8006990:	f3bf 8f6f 	isb	sy
 8006994:	f3bf 8f4f 	dsb	sy
 8006998:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800699a:	bf00      	nop
 800699c:	e7fe      	b.n	800699c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d103      	bne.n	80069ac <xQueueGenericSendFromISR+0x3c>
 80069a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <xQueueGenericSendFromISR+0x40>
 80069ac:	2301      	movs	r3, #1
 80069ae:	e000      	b.n	80069b2 <xQueueGenericSendFromISR+0x42>
 80069b0:	2300      	movs	r3, #0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10a      	bne.n	80069cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80069b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ba:	f383 8811 	msr	BASEPRI, r3
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f3bf 8f4f 	dsb	sy
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069c8:	bf00      	nop
 80069ca:	e7fe      	b.n	80069ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d103      	bne.n	80069da <xQueueGenericSendFromISR+0x6a>
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d101      	bne.n	80069de <xQueueGenericSendFromISR+0x6e>
 80069da:	2301      	movs	r3, #1
 80069dc:	e000      	b.n	80069e0 <xQueueGenericSendFromISR+0x70>
 80069de:	2300      	movs	r3, #0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d10a      	bne.n	80069fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	623b      	str	r3, [r7, #32]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069fa:	f002 f92d 	bl	8008c58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80069fe:	f3ef 8211 	mrs	r2, BASEPRI
 8006a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a06:	f383 8811 	msr	BASEPRI, r3
 8006a0a:	f3bf 8f6f 	isb	sy
 8006a0e:	f3bf 8f4f 	dsb	sy
 8006a12:	61fa      	str	r2, [r7, #28]
 8006a14:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006a16:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a18:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d302      	bcc.n	8006a2c <xQueueGenericSendFromISR+0xbc>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d12f      	bne.n	8006a8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	68b9      	ldr	r1, [r7, #8]
 8006a40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a42:	f000 fa35 	bl	8006eb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006a46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a4e:	d112      	bne.n	8006a76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d016      	beq.n	8006a86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5a:	3324      	adds	r3, #36	; 0x24
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f000 fff5 	bl	8007a4c <xTaskRemoveFromEventList>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00e      	beq.n	8006a86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00b      	beq.n	8006a86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	601a      	str	r2, [r3, #0]
 8006a74:	e007      	b.n	8006a86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006a76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	b25a      	sxtb	r2, r3
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006a86:	2301      	movs	r3, #1
 8006a88:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006a8a:	e001      	b.n	8006a90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a92:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006a9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3740      	adds	r7, #64	; 0x40
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08c      	sub	sp, #48	; 0x30
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d10a      	bne.n	8006ad8 <xQueueReceive+0x30>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	f383 8811 	msr	BASEPRI, r3
 8006aca:	f3bf 8f6f 	isb	sy
 8006ace:	f3bf 8f4f 	dsb	sy
 8006ad2:	623b      	str	r3, [r7, #32]
}
 8006ad4:	bf00      	nop
 8006ad6:	e7fe      	b.n	8006ad6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d103      	bne.n	8006ae6 <xQueueReceive+0x3e>
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <xQueueReceive+0x42>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e000      	b.n	8006aec <xQueueReceive+0x44>
 8006aea:	2300      	movs	r3, #0
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d10a      	bne.n	8006b06 <xQueueReceive+0x5e>
	__asm volatile
 8006af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af4:	f383 8811 	msr	BASEPRI, r3
 8006af8:	f3bf 8f6f 	isb	sy
 8006afc:	f3bf 8f4f 	dsb	sy
 8006b00:	61fb      	str	r3, [r7, #28]
}
 8006b02:	bf00      	nop
 8006b04:	e7fe      	b.n	8006b04 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b06:	f001 f96f 	bl	8007de8 <xTaskGetSchedulerState>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d102      	bne.n	8006b16 <xQueueReceive+0x6e>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <xQueueReceive+0x72>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <xQueueReceive+0x74>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10a      	bne.n	8006b36 <xQueueReceive+0x8e>
	__asm volatile
 8006b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b24:	f383 8811 	msr	BASEPRI, r3
 8006b28:	f3bf 8f6f 	isb	sy
 8006b2c:	f3bf 8f4f 	dsb	sy
 8006b30:	61bb      	str	r3, [r7, #24]
}
 8006b32:	bf00      	nop
 8006b34:	e7fe      	b.n	8006b34 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b36:	f001 ffad 	bl	8008a94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01f      	beq.n	8006b86 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006b46:	68b9      	ldr	r1, [r7, #8]
 8006b48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b4a:	f000 fa1b 	bl	8006f84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b50:	1e5a      	subs	r2, r3, #1
 8006b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b54:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00f      	beq.n	8006b7e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b60:	3310      	adds	r3, #16
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 ff72 	bl	8007a4c <xTaskRemoveFromEventList>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d007      	beq.n	8006b7e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006b6e:	4b3d      	ldr	r3, [pc, #244]	; (8006c64 <xQueueReceive+0x1bc>)
 8006b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006b7e:	f001 ffb9 	bl	8008af4 <vPortExitCritical>
				return pdPASS;
 8006b82:	2301      	movs	r3, #1
 8006b84:	e069      	b.n	8006c5a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d103      	bne.n	8006b94 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006b8c:	f001 ffb2 	bl	8008af4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e062      	b.n	8006c5a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d106      	bne.n	8006ba8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b9a:	f107 0310 	add.w	r3, r7, #16
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 ffb8 	bl	8007b14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ba8:	f001 ffa4 	bl	8008af4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006bac:	f000 fd2a 	bl	8007604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006bb0:	f001 ff70 	bl	8008a94 <vPortEnterCritical>
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006bba:	b25b      	sxtb	r3, r3
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bc0:	d103      	bne.n	8006bca <xQueueReceive+0x122>
 8006bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006bd0:	b25b      	sxtb	r3, r3
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bd6:	d103      	bne.n	8006be0 <xQueueReceive+0x138>
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006be0:	f001 ff88 	bl	8008af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006be4:	1d3a      	adds	r2, r7, #4
 8006be6:	f107 0310 	add.w	r3, r7, #16
 8006bea:	4611      	mov	r1, r2
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 ffa7 	bl	8007b40 <xTaskCheckForTimeOut>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d123      	bne.n	8006c40 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bfa:	f000 fa3b 	bl	8007074 <prvIsQueueEmpty>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d017      	beq.n	8006c34 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	3324      	adds	r3, #36	; 0x24
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fecd 	bl	80079ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006c12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c14:	f000 f9dc 	bl	8006fd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006c18:	f000 fd02 	bl	8007620 <xTaskResumeAll>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d189      	bne.n	8006b36 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006c22:	4b10      	ldr	r3, [pc, #64]	; (8006c64 <xQueueReceive+0x1bc>)
 8006c24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	e780      	b.n	8006b36 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c36:	f000 f9cb 	bl	8006fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006c3a:	f000 fcf1 	bl	8007620 <xTaskResumeAll>
 8006c3e:	e77a      	b.n	8006b36 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006c40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c42:	f000 f9c5 	bl	8006fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006c46:	f000 fceb 	bl	8007620 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c4c:	f000 fa12 	bl	8007074 <prvIsQueueEmpty>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	f43f af6f 	beq.w	8006b36 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3730      	adds	r7, #48	; 0x30
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	e000ed04 	.word	0xe000ed04

08006c68 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08e      	sub	sp, #56	; 0x38
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c72:	2300      	movs	r3, #0
 8006c74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d10a      	bne.n	8006c9a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c88:	f383 8811 	msr	BASEPRI, r3
 8006c8c:	f3bf 8f6f 	isb	sy
 8006c90:	f3bf 8f4f 	dsb	sy
 8006c94:	623b      	str	r3, [r7, #32]
}
 8006c96:	bf00      	nop
 8006c98:	e7fe      	b.n	8006c98 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	61fb      	str	r3, [r7, #28]
}
 8006cb4:	bf00      	nop
 8006cb6:	e7fe      	b.n	8006cb6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cb8:	f001 f896 	bl	8007de8 <xTaskGetSchedulerState>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d102      	bne.n	8006cc8 <xQueueSemaphoreTake+0x60>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d101      	bne.n	8006ccc <xQueueSemaphoreTake+0x64>
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e000      	b.n	8006cce <xQueueSemaphoreTake+0x66>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10a      	bne.n	8006ce8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	61bb      	str	r3, [r7, #24]
}
 8006ce4:	bf00      	nop
 8006ce6:	e7fe      	b.n	8006ce6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006ce8:	f001 fed4 	bl	8008a94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d024      	beq.n	8006d42 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	1e5a      	subs	r2, r3, #1
 8006cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cfe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d104      	bne.n	8006d12 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006d08:	f001 f9e4 	bl	80080d4 <pvTaskIncrementMutexHeldCount>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d10:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00f      	beq.n	8006d3a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1c:	3310      	adds	r3, #16
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fe94 	bl	8007a4c <xTaskRemoveFromEventList>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d007      	beq.n	8006d3a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d2a:	4b54      	ldr	r3, [pc, #336]	; (8006e7c <xQueueSemaphoreTake+0x214>)
 8006d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d30:	601a      	str	r2, [r3, #0]
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006d3a:	f001 fedb 	bl	8008af4 <vPortExitCritical>
				return pdPASS;
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e097      	b.n	8006e72 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d111      	bne.n	8006d6c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d00a      	beq.n	8006d64 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	617b      	str	r3, [r7, #20]
}
 8006d60:	bf00      	nop
 8006d62:	e7fe      	b.n	8006d62 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006d64:	f001 fec6 	bl	8008af4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e082      	b.n	8006e72 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006d72:	f107 030c 	add.w	r3, r7, #12
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 fecc 	bl	8007b14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d80:	f001 feb8 	bl	8008af4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d84:	f000 fc3e 	bl	8007604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d88:	f001 fe84 	bl	8008a94 <vPortEnterCritical>
 8006d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d92:	b25b      	sxtb	r3, r3
 8006d94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d98:	d103      	bne.n	8006da2 <xQueueSemaphoreTake+0x13a>
 8006d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006da8:	b25b      	sxtb	r3, r3
 8006daa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dae:	d103      	bne.n	8006db8 <xQueueSemaphoreTake+0x150>
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006db8:	f001 fe9c 	bl	8008af4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dbc:	463a      	mov	r2, r7
 8006dbe:	f107 030c 	add.w	r3, r7, #12
 8006dc2:	4611      	mov	r1, r2
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f000 febb 	bl	8007b40 <xTaskCheckForTimeOut>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d132      	bne.n	8006e36 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006dd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006dd2:	f000 f94f 	bl	8007074 <prvIsQueueEmpty>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d026      	beq.n	8006e2a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d109      	bne.n	8006df8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006de4:	f001 fe56 	bl	8008a94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f001 f819 	bl	8007e24 <xTaskPriorityInherit>
 8006df2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006df4:	f001 fe7e 	bl	8008af4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfa:	3324      	adds	r3, #36	; 0x24
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	4611      	mov	r1, r2
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 fdd3 	bl	80079ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e08:	f000 f8e2 	bl	8006fd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e0c:	f000 fc08 	bl	8007620 <xTaskResumeAll>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f47f af68 	bne.w	8006ce8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006e18:	4b18      	ldr	r3, [pc, #96]	; (8006e7c <xQueueSemaphoreTake+0x214>)
 8006e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	e75e      	b.n	8006ce8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006e2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e2c:	f000 f8d0 	bl	8006fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e30:	f000 fbf6 	bl	8007620 <xTaskResumeAll>
 8006e34:	e758      	b.n	8006ce8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e38:	f000 f8ca 	bl	8006fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e3c:	f000 fbf0 	bl	8007620 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e42:	f000 f917 	bl	8007074 <prvIsQueueEmpty>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f43f af4d 	beq.w	8006ce8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00d      	beq.n	8006e70 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006e54:	f001 fe1e 	bl	8008a94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006e58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006e5a:	f000 f811 	bl	8006e80 <prvGetDisinheritPriorityAfterTimeout>
 8006e5e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 f8b2 	bl	8007fd0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006e6c:	f001 fe42 	bl	8008af4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3738      	adds	r7, #56	; 0x38
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	e000ed04 	.word	0xe000ed04

08006e80 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d006      	beq.n	8006e9e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	e001      	b.n	8006ea2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
	}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b086      	sub	sp, #24
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10d      	bne.n	8006eea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d14d      	bne.n	8006f72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f001 f80a 	bl	8007ef4 <xTaskPriorityDisinherit>
 8006ee0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	609a      	str	r2, [r3, #8]
 8006ee8:	e043      	b.n	8006f72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d119      	bne.n	8006f24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6858      	ldr	r0, [r3, #4]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	461a      	mov	r2, r3
 8006efa:	68b9      	ldr	r1, [r7, #8]
 8006efc:	f002 f92a 	bl	8009154 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	685a      	ldr	r2, [r3, #4]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	441a      	add	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	685a      	ldr	r2, [r3, #4]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d32b      	bcc.n	8006f72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	605a      	str	r2, [r3, #4]
 8006f22:	e026      	b.n	8006f72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	68d8      	ldr	r0, [r3, #12]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	68b9      	ldr	r1, [r7, #8]
 8006f30:	f002 f910 	bl	8009154 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	68da      	ldr	r2, [r3, #12]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3c:	425b      	negs	r3, r3
 8006f3e:	441a      	add	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	68da      	ldr	r2, [r3, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d207      	bcs.n	8006f60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	689a      	ldr	r2, [r3, #8]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f58:	425b      	negs	r3, r3
 8006f5a:	441a      	add	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d105      	bne.n	8006f72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	1c5a      	adds	r2, r3, #1
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f7a:	697b      	ldr	r3, [r7, #20]
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3718      	adds	r7, #24
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d018      	beq.n	8006fc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9e:	441a      	add	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d303      	bcc.n	8006fb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68d9      	ldr	r1, [r3, #12]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc0:	461a      	mov	r2, r3
 8006fc2:	6838      	ldr	r0, [r7, #0]
 8006fc4:	f002 f8c6 	bl	8009154 <memcpy>
	}
}
 8006fc8:	bf00      	nop
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fd8:	f001 fd5c 	bl	8008a94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fe2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fe4:	e011      	b.n	800700a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d012      	beq.n	8007014 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	3324      	adds	r3, #36	; 0x24
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 fd2a 	bl	8007a4c <xTaskRemoveFromEventList>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ffe:	f000 fe01 	bl	8007c04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007002:	7bfb      	ldrb	r3, [r7, #15]
 8007004:	3b01      	subs	r3, #1
 8007006:	b2db      	uxtb	r3, r3
 8007008:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800700a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800700e:	2b00      	cmp	r3, #0
 8007010:	dce9      	bgt.n	8006fe6 <prvUnlockQueue+0x16>
 8007012:	e000      	b.n	8007016 <prvUnlockQueue+0x46>
					break;
 8007014:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	22ff      	movs	r2, #255	; 0xff
 800701a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800701e:	f001 fd69 	bl	8008af4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007022:	f001 fd37 	bl	8008a94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800702c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800702e:	e011      	b.n	8007054 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d012      	beq.n	800705e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	3310      	adds	r3, #16
 800703c:	4618      	mov	r0, r3
 800703e:	f000 fd05 	bl	8007a4c <xTaskRemoveFromEventList>
 8007042:	4603      	mov	r3, r0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d001      	beq.n	800704c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007048:	f000 fddc 	bl	8007c04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800704c:	7bbb      	ldrb	r3, [r7, #14]
 800704e:	3b01      	subs	r3, #1
 8007050:	b2db      	uxtb	r3, r3
 8007052:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007058:	2b00      	cmp	r3, #0
 800705a:	dce9      	bgt.n	8007030 <prvUnlockQueue+0x60>
 800705c:	e000      	b.n	8007060 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800705e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	22ff      	movs	r2, #255	; 0xff
 8007064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007068:	f001 fd44 	bl	8008af4 <vPortExitCritical>
}
 800706c:	bf00      	nop
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800707c:	f001 fd0a 	bl	8008a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007084:	2b00      	cmp	r3, #0
 8007086:	d102      	bne.n	800708e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007088:	2301      	movs	r3, #1
 800708a:	60fb      	str	r3, [r7, #12]
 800708c:	e001      	b.n	8007092 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800708e:	2300      	movs	r3, #0
 8007090:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007092:	f001 fd2f 	bl	8008af4 <vPortExitCritical>

	return xReturn;
 8007096:	68fb      	ldr	r3, [r7, #12]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070a8:	f001 fcf4 	bl	8008a94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d102      	bne.n	80070be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070b8:	2301      	movs	r3, #1
 80070ba:	60fb      	str	r3, [r7, #12]
 80070bc:	e001      	b.n	80070c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070be:	2300      	movs	r3, #0
 80070c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070c2:	f001 fd17 	bl	8008af4 <vPortExitCritical>

	return xReturn;
 80070c6:	68fb      	ldr	r3, [r7, #12]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070da:	2300      	movs	r3, #0
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	e014      	b.n	800710a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070e0:	4a0f      	ldr	r2, [pc, #60]	; (8007120 <vQueueAddToRegistry+0x50>)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10b      	bne.n	8007104 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070ec:	490c      	ldr	r1, [pc, #48]	; (8007120 <vQueueAddToRegistry+0x50>)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	683a      	ldr	r2, [r7, #0]
 80070f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070f6:	4a0a      	ldr	r2, [pc, #40]	; (8007120 <vQueueAddToRegistry+0x50>)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	00db      	lsls	r3, r3, #3
 80070fc:	4413      	add	r3, r2
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007102:	e006      	b.n	8007112 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	3301      	adds	r3, #1
 8007108:	60fb      	str	r3, [r7, #12]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2b07      	cmp	r3, #7
 800710e:	d9e7      	bls.n	80070e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007110:	bf00      	nop
 8007112:	bf00      	nop
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	200008fc 	.word	0x200008fc

08007124 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007134:	f001 fcae 	bl	8008a94 <vPortEnterCritical>
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800713e:	b25b      	sxtb	r3, r3
 8007140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007144:	d103      	bne.n	800714e <vQueueWaitForMessageRestricted+0x2a>
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007154:	b25b      	sxtb	r3, r3
 8007156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800715a:	d103      	bne.n	8007164 <vQueueWaitForMessageRestricted+0x40>
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007164:	f001 fcc6 	bl	8008af4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	3324      	adds	r3, #36	; 0x24
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	68b9      	ldr	r1, [r7, #8]
 8007178:	4618      	mov	r0, r3
 800717a:	f000 fc3b 	bl	80079f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800717e:	6978      	ldr	r0, [r7, #20]
 8007180:	f7ff ff26 	bl	8006fd0 <prvUnlockQueue>
	}
 8007184:	bf00      	nop
 8007186:	3718      	adds	r7, #24
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08e      	sub	sp, #56	; 0x38
 8007190:	af04      	add	r7, sp, #16
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10a      	bne.n	80071b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	623b      	str	r3, [r7, #32]
}
 80071b2:	bf00      	nop
 80071b4:	e7fe      	b.n	80071b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	61fb      	str	r3, [r7, #28]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071d2:	235c      	movs	r3, #92	; 0x5c
 80071d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	2b5c      	cmp	r3, #92	; 0x5c
 80071da:	d00a      	beq.n	80071f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	61bb      	str	r3, [r7, #24]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80071f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d01e      	beq.n	8007238 <xTaskCreateStatic+0xac>
 80071fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01b      	beq.n	8007238 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007202:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007208:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	2202      	movs	r2, #2
 800720e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007212:	2300      	movs	r3, #0
 8007214:	9303      	str	r3, [sp, #12]
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	9302      	str	r3, [sp, #8]
 800721a:	f107 0314 	add.w	r3, r7, #20
 800721e:	9301      	str	r3, [sp, #4]
 8007220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	68b9      	ldr	r1, [r7, #8]
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 f850 	bl	80072d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007232:	f000 f8dd 	bl	80073f0 <prvAddNewTaskToReadyList>
 8007236:	e001      	b.n	800723c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800723c:	697b      	ldr	r3, [r7, #20]
	}
 800723e:	4618      	mov	r0, r3
 8007240:	3728      	adds	r7, #40	; 0x28
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007246:	b580      	push	{r7, lr}
 8007248:	b08c      	sub	sp, #48	; 0x30
 800724a:	af04      	add	r7, sp, #16
 800724c:	60f8      	str	r0, [r7, #12]
 800724e:	60b9      	str	r1, [r7, #8]
 8007250:	603b      	str	r3, [r7, #0]
 8007252:	4613      	mov	r3, r2
 8007254:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007256:	88fb      	ldrh	r3, [r7, #6]
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4618      	mov	r0, r3
 800725c:	f001 fd3c 	bl	8008cd8 <pvPortMalloc>
 8007260:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d00e      	beq.n	8007286 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007268:	205c      	movs	r0, #92	; 0x5c
 800726a:	f001 fd35 	bl	8008cd8 <pvPortMalloc>
 800726e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	631a      	str	r2, [r3, #48]	; 0x30
 800727c:	e005      	b.n	800728a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800727e:	6978      	ldr	r0, [r7, #20]
 8007280:	f001 fdf6 	bl	8008e70 <vPortFree>
 8007284:	e001      	b.n	800728a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007286:	2300      	movs	r3, #0
 8007288:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d017      	beq.n	80072c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	2200      	movs	r2, #0
 8007294:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007298:	88fa      	ldrh	r2, [r7, #6]
 800729a:	2300      	movs	r3, #0
 800729c:	9303      	str	r3, [sp, #12]
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	9302      	str	r3, [sp, #8]
 80072a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a4:	9301      	str	r3, [sp, #4]
 80072a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	68b9      	ldr	r1, [r7, #8]
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f80e 	bl	80072d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072b4:	69f8      	ldr	r0, [r7, #28]
 80072b6:	f000 f89b 	bl	80073f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072ba:	2301      	movs	r3, #1
 80072bc:	61bb      	str	r3, [r7, #24]
 80072be:	e002      	b.n	80072c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80072c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072c6:	69bb      	ldr	r3, [r7, #24]
	}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3720      	adds	r7, #32
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b088      	sub	sp, #32
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	461a      	mov	r2, r3
 80072e8:	21a5      	movs	r1, #165	; 0xa5
 80072ea:	f001 feff 	bl	80090ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072f8:	3b01      	subs	r3, #1
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	4413      	add	r3, r2
 80072fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	f023 0307 	bic.w	r3, r3, #7
 8007306:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	f003 0307 	and.w	r3, r3, #7
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007316:	f383 8811 	msr	BASEPRI, r3
 800731a:	f3bf 8f6f 	isb	sy
 800731e:	f3bf 8f4f 	dsb	sy
 8007322:	617b      	str	r3, [r7, #20]
}
 8007324:	bf00      	nop
 8007326:	e7fe      	b.n	8007326 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d01f      	beq.n	800736e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800732e:	2300      	movs	r3, #0
 8007330:	61fb      	str	r3, [r7, #28]
 8007332:	e012      	b.n	800735a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	4413      	add	r3, r2
 800733a:	7819      	ldrb	r1, [r3, #0]
 800733c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800733e:	69fb      	ldr	r3, [r7, #28]
 8007340:	4413      	add	r3, r2
 8007342:	3334      	adds	r3, #52	; 0x34
 8007344:	460a      	mov	r2, r1
 8007346:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	4413      	add	r3, r2
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d006      	beq.n	8007362 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	3301      	adds	r3, #1
 8007358:	61fb      	str	r3, [r7, #28]
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	2b0f      	cmp	r3, #15
 800735e:	d9e9      	bls.n	8007334 <prvInitialiseNewTask+0x64>
 8007360:	e000      	b.n	8007364 <prvInitialiseNewTask+0x94>
			{
				break;
 8007362:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800736c:	e003      	b.n	8007376 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007378:	2b37      	cmp	r3, #55	; 0x37
 800737a:	d901      	bls.n	8007380 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800737c:	2337      	movs	r3, #55	; 0x37
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007384:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800738a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	2200      	movs	r2, #0
 8007390:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007394:	3304      	adds	r3, #4
 8007396:	4618      	mov	r0, r3
 8007398:	f7fe ff64 	bl	8006264 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800739c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739e:	3318      	adds	r3, #24
 80073a0:	4618      	mov	r0, r3
 80073a2:	f7fe ff5f 	bl	8006264 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80073b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	2200      	movs	r2, #0
 80073c0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	68f9      	ldr	r1, [r7, #12]
 80073ce:	69b8      	ldr	r0, [r7, #24]
 80073d0:	f001 fa36 	bl	8008840 <pxPortInitialiseStack>
 80073d4:	4602      	mov	r2, r0
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80073da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073e6:	bf00      	nop
 80073e8:	3720      	adds	r7, #32
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
	...

080073f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073f8:	f001 fb4c 	bl	8008a94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073fc:	4b2d      	ldr	r3, [pc, #180]	; (80074b4 <prvAddNewTaskToReadyList+0xc4>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	3301      	adds	r3, #1
 8007402:	4a2c      	ldr	r2, [pc, #176]	; (80074b4 <prvAddNewTaskToReadyList+0xc4>)
 8007404:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007406:	4b2c      	ldr	r3, [pc, #176]	; (80074b8 <prvAddNewTaskToReadyList+0xc8>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d109      	bne.n	8007422 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800740e:	4a2a      	ldr	r2, [pc, #168]	; (80074b8 <prvAddNewTaskToReadyList+0xc8>)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007414:	4b27      	ldr	r3, [pc, #156]	; (80074b4 <prvAddNewTaskToReadyList+0xc4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b01      	cmp	r3, #1
 800741a:	d110      	bne.n	800743e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800741c:	f000 fc16 	bl	8007c4c <prvInitialiseTaskLists>
 8007420:	e00d      	b.n	800743e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007422:	4b26      	ldr	r3, [pc, #152]	; (80074bc <prvAddNewTaskToReadyList+0xcc>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d109      	bne.n	800743e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800742a:	4b23      	ldr	r3, [pc, #140]	; (80074b8 <prvAddNewTaskToReadyList+0xc8>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	429a      	cmp	r2, r3
 8007436:	d802      	bhi.n	800743e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007438:	4a1f      	ldr	r2, [pc, #124]	; (80074b8 <prvAddNewTaskToReadyList+0xc8>)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800743e:	4b20      	ldr	r3, [pc, #128]	; (80074c0 <prvAddNewTaskToReadyList+0xd0>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	3301      	adds	r3, #1
 8007444:	4a1e      	ldr	r2, [pc, #120]	; (80074c0 <prvAddNewTaskToReadyList+0xd0>)
 8007446:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007448:	4b1d      	ldr	r3, [pc, #116]	; (80074c0 <prvAddNewTaskToReadyList+0xd0>)
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007454:	4b1b      	ldr	r3, [pc, #108]	; (80074c4 <prvAddNewTaskToReadyList+0xd4>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	429a      	cmp	r2, r3
 800745a:	d903      	bls.n	8007464 <prvAddNewTaskToReadyList+0x74>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007460:	4a18      	ldr	r2, [pc, #96]	; (80074c4 <prvAddNewTaskToReadyList+0xd4>)
 8007462:	6013      	str	r3, [r2, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007468:	4613      	mov	r3, r2
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4a15      	ldr	r2, [pc, #84]	; (80074c8 <prvAddNewTaskToReadyList+0xd8>)
 8007472:	441a      	add	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3304      	adds	r3, #4
 8007478:	4619      	mov	r1, r3
 800747a:	4610      	mov	r0, r2
 800747c:	f7fe feff 	bl	800627e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007480:	f001 fb38 	bl	8008af4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007484:	4b0d      	ldr	r3, [pc, #52]	; (80074bc <prvAddNewTaskToReadyList+0xcc>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00e      	beq.n	80074aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800748c:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <prvAddNewTaskToReadyList+0xc8>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007496:	429a      	cmp	r2, r3
 8007498:	d207      	bcs.n	80074aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800749a:	4b0c      	ldr	r3, [pc, #48]	; (80074cc <prvAddNewTaskToReadyList+0xdc>)
 800749c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	f3bf 8f4f 	dsb	sy
 80074a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074aa:	bf00      	nop
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	20000e10 	.word	0x20000e10
 80074b8:	2000093c 	.word	0x2000093c
 80074bc:	20000e1c 	.word	0x20000e1c
 80074c0:	20000e2c 	.word	0x20000e2c
 80074c4:	20000e18 	.word	0x20000e18
 80074c8:	20000940 	.word	0x20000940
 80074cc:	e000ed04 	.word	0xe000ed04

080074d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074d8:	2300      	movs	r3, #0
 80074da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d017      	beq.n	8007512 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074e2:	4b13      	ldr	r3, [pc, #76]	; (8007530 <vTaskDelay+0x60>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00a      	beq.n	8007500 <vTaskDelay+0x30>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	60bb      	str	r3, [r7, #8]
}
 80074fc:	bf00      	nop
 80074fe:	e7fe      	b.n	80074fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007500:	f000 f880 	bl	8007604 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007504:	2100      	movs	r1, #0
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 fdf8 	bl	80080fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800750c:	f000 f888 	bl	8007620 <xTaskResumeAll>
 8007510:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d107      	bne.n	8007528 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007518:	4b06      	ldr	r3, [pc, #24]	; (8007534 <vTaskDelay+0x64>)
 800751a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007528:	bf00      	nop
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	20000e38 	.word	0x20000e38
 8007534:	e000ed04 	.word	0xe000ed04

08007538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08a      	sub	sp, #40	; 0x28
 800753c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800753e:	2300      	movs	r3, #0
 8007540:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007542:	2300      	movs	r3, #0
 8007544:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007546:	463a      	mov	r2, r7
 8007548:	1d39      	adds	r1, r7, #4
 800754a:	f107 0308 	add.w	r3, r7, #8
 800754e:	4618      	mov	r0, r3
 8007550:	f7fe fe34 	bl	80061bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007554:	6839      	ldr	r1, [r7, #0]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	9202      	str	r2, [sp, #8]
 800755c:	9301      	str	r3, [sp, #4]
 800755e:	2300      	movs	r3, #0
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	2300      	movs	r3, #0
 8007564:	460a      	mov	r2, r1
 8007566:	4921      	ldr	r1, [pc, #132]	; (80075ec <vTaskStartScheduler+0xb4>)
 8007568:	4821      	ldr	r0, [pc, #132]	; (80075f0 <vTaskStartScheduler+0xb8>)
 800756a:	f7ff fe0f 	bl	800718c <xTaskCreateStatic>
 800756e:	4603      	mov	r3, r0
 8007570:	4a20      	ldr	r2, [pc, #128]	; (80075f4 <vTaskStartScheduler+0xbc>)
 8007572:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007574:	4b1f      	ldr	r3, [pc, #124]	; (80075f4 <vTaskStartScheduler+0xbc>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d002      	beq.n	8007582 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800757c:	2301      	movs	r3, #1
 800757e:	617b      	str	r3, [r7, #20]
 8007580:	e001      	b.n	8007586 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007582:	2300      	movs	r3, #0
 8007584:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2b01      	cmp	r3, #1
 800758a:	d102      	bne.n	8007592 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800758c:	f000 fe0a 	bl	80081a4 <xTimerCreateTimerTask>
 8007590:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d116      	bne.n	80075c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759c:	f383 8811 	msr	BASEPRI, r3
 80075a0:	f3bf 8f6f 	isb	sy
 80075a4:	f3bf 8f4f 	dsb	sy
 80075a8:	613b      	str	r3, [r7, #16]
}
 80075aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80075ac:	4b12      	ldr	r3, [pc, #72]	; (80075f8 <vTaskStartScheduler+0xc0>)
 80075ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80075b4:	4b11      	ldr	r3, [pc, #68]	; (80075fc <vTaskStartScheduler+0xc4>)
 80075b6:	2201      	movs	r2, #1
 80075b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075ba:	4b11      	ldr	r3, [pc, #68]	; (8007600 <vTaskStartScheduler+0xc8>)
 80075bc:	2200      	movs	r2, #0
 80075be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80075c0:	f001 f9c6 	bl	8008950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075c4:	e00e      	b.n	80075e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075cc:	d10a      	bne.n	80075e4 <vTaskStartScheduler+0xac>
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	60fb      	str	r3, [r7, #12]
}
 80075e0:	bf00      	nop
 80075e2:	e7fe      	b.n	80075e2 <vTaskStartScheduler+0xaa>
}
 80075e4:	bf00      	nop
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	08009a94 	.word	0x08009a94
 80075f0:	08007c1d 	.word	0x08007c1d
 80075f4:	20000e34 	.word	0x20000e34
 80075f8:	20000e30 	.word	0x20000e30
 80075fc:	20000e1c 	.word	0x20000e1c
 8007600:	20000e14 	.word	0x20000e14

08007604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007604:	b480      	push	{r7}
 8007606:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007608:	4b04      	ldr	r3, [pc, #16]	; (800761c <vTaskSuspendAll+0x18>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	3301      	adds	r3, #1
 800760e:	4a03      	ldr	r2, [pc, #12]	; (800761c <vTaskSuspendAll+0x18>)
 8007610:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007612:	bf00      	nop
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr
 800761c:	20000e38 	.word	0x20000e38

08007620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007626:	2300      	movs	r3, #0
 8007628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800762a:	2300      	movs	r3, #0
 800762c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800762e:	4b42      	ldr	r3, [pc, #264]	; (8007738 <xTaskResumeAll+0x118>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <xTaskResumeAll+0x2c>
	__asm volatile
 8007636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800763a:	f383 8811 	msr	BASEPRI, r3
 800763e:	f3bf 8f6f 	isb	sy
 8007642:	f3bf 8f4f 	dsb	sy
 8007646:	603b      	str	r3, [r7, #0]
}
 8007648:	bf00      	nop
 800764a:	e7fe      	b.n	800764a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800764c:	f001 fa22 	bl	8008a94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007650:	4b39      	ldr	r3, [pc, #228]	; (8007738 <xTaskResumeAll+0x118>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	3b01      	subs	r3, #1
 8007656:	4a38      	ldr	r2, [pc, #224]	; (8007738 <xTaskResumeAll+0x118>)
 8007658:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800765a:	4b37      	ldr	r3, [pc, #220]	; (8007738 <xTaskResumeAll+0x118>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d162      	bne.n	8007728 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007662:	4b36      	ldr	r3, [pc, #216]	; (800773c <xTaskResumeAll+0x11c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d05e      	beq.n	8007728 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800766a:	e02f      	b.n	80076cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766c:	4b34      	ldr	r3, [pc, #208]	; (8007740 <xTaskResumeAll+0x120>)
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	3318      	adds	r3, #24
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe fe5d 	bl	8006338 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3304      	adds	r3, #4
 8007682:	4618      	mov	r0, r3
 8007684:	f7fe fe58 	bl	8006338 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800768c:	4b2d      	ldr	r3, [pc, #180]	; (8007744 <xTaskResumeAll+0x124>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	429a      	cmp	r2, r3
 8007692:	d903      	bls.n	800769c <xTaskResumeAll+0x7c>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007698:	4a2a      	ldr	r2, [pc, #168]	; (8007744 <xTaskResumeAll+0x124>)
 800769a:	6013      	str	r3, [r2, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076a0:	4613      	mov	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4a27      	ldr	r2, [pc, #156]	; (8007748 <xTaskResumeAll+0x128>)
 80076aa:	441a      	add	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3304      	adds	r3, #4
 80076b0:	4619      	mov	r1, r3
 80076b2:	4610      	mov	r0, r2
 80076b4:	f7fe fde3 	bl	800627e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076bc:	4b23      	ldr	r3, [pc, #140]	; (800774c <xTaskResumeAll+0x12c>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d302      	bcc.n	80076cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80076c6:	4b22      	ldr	r3, [pc, #136]	; (8007750 <xTaskResumeAll+0x130>)
 80076c8:	2201      	movs	r2, #1
 80076ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076cc:	4b1c      	ldr	r3, [pc, #112]	; (8007740 <xTaskResumeAll+0x120>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d1cb      	bne.n	800766c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076da:	f000 fb55 	bl	8007d88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80076de:	4b1d      	ldr	r3, [pc, #116]	; (8007754 <xTaskResumeAll+0x134>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d010      	beq.n	800770c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076ea:	f000 f847 	bl	800777c <xTaskIncrementTick>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d002      	beq.n	80076fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80076f4:	4b16      	ldr	r3, [pc, #88]	; (8007750 <xTaskResumeAll+0x130>)
 80076f6:	2201      	movs	r2, #1
 80076f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1f1      	bne.n	80076ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007706:	4b13      	ldr	r3, [pc, #76]	; (8007754 <xTaskResumeAll+0x134>)
 8007708:	2200      	movs	r2, #0
 800770a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800770c:	4b10      	ldr	r3, [pc, #64]	; (8007750 <xTaskResumeAll+0x130>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d009      	beq.n	8007728 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007714:	2301      	movs	r3, #1
 8007716:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007718:	4b0f      	ldr	r3, [pc, #60]	; (8007758 <xTaskResumeAll+0x138>)
 800771a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007728:	f001 f9e4 	bl	8008af4 <vPortExitCritical>

	return xAlreadyYielded;
 800772c:	68bb      	ldr	r3, [r7, #8]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	20000e38 	.word	0x20000e38
 800773c:	20000e10 	.word	0x20000e10
 8007740:	20000dd0 	.word	0x20000dd0
 8007744:	20000e18 	.word	0x20000e18
 8007748:	20000940 	.word	0x20000940
 800774c:	2000093c 	.word	0x2000093c
 8007750:	20000e24 	.word	0x20000e24
 8007754:	20000e20 	.word	0x20000e20
 8007758:	e000ed04 	.word	0xe000ed04

0800775c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007762:	4b05      	ldr	r3, [pc, #20]	; (8007778 <xTaskGetTickCount+0x1c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007768:	687b      	ldr	r3, [r7, #4]
}
 800776a:	4618      	mov	r0, r3
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	20000e14 	.word	0x20000e14

0800777c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007782:	2300      	movs	r3, #0
 8007784:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007786:	4b4f      	ldr	r3, [pc, #316]	; (80078c4 <xTaskIncrementTick+0x148>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	f040 808f 	bne.w	80078ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007790:	4b4d      	ldr	r3, [pc, #308]	; (80078c8 <xTaskIncrementTick+0x14c>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3301      	adds	r3, #1
 8007796:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007798:	4a4b      	ldr	r2, [pc, #300]	; (80078c8 <xTaskIncrementTick+0x14c>)
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d120      	bne.n	80077e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80077a4:	4b49      	ldr	r3, [pc, #292]	; (80078cc <xTaskIncrementTick+0x150>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	603b      	str	r3, [r7, #0]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <xTaskIncrementTick+0x46>
 80077c4:	4b41      	ldr	r3, [pc, #260]	; (80078cc <xTaskIncrementTick+0x150>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	4b41      	ldr	r3, [pc, #260]	; (80078d0 <xTaskIncrementTick+0x154>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a3f      	ldr	r2, [pc, #252]	; (80078cc <xTaskIncrementTick+0x150>)
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	4a3f      	ldr	r2, [pc, #252]	; (80078d0 <xTaskIncrementTick+0x154>)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	4b3e      	ldr	r3, [pc, #248]	; (80078d4 <xTaskIncrementTick+0x158>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	3301      	adds	r3, #1
 80077de:	4a3d      	ldr	r2, [pc, #244]	; (80078d4 <xTaskIncrementTick+0x158>)
 80077e0:	6013      	str	r3, [r2, #0]
 80077e2:	f000 fad1 	bl	8007d88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80077e6:	4b3c      	ldr	r3, [pc, #240]	; (80078d8 <xTaskIncrementTick+0x15c>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d349      	bcc.n	8007884 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077f0:	4b36      	ldr	r3, [pc, #216]	; (80078cc <xTaskIncrementTick+0x150>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d104      	bne.n	8007804 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077fa:	4b37      	ldr	r3, [pc, #220]	; (80078d8 <xTaskIncrementTick+0x15c>)
 80077fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007800:	601a      	str	r2, [r3, #0]
					break;
 8007802:	e03f      	b.n	8007884 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007804:	4b31      	ldr	r3, [pc, #196]	; (80078cc <xTaskIncrementTick+0x150>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007814:	693a      	ldr	r2, [r7, #16]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	429a      	cmp	r2, r3
 800781a:	d203      	bcs.n	8007824 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800781c:	4a2e      	ldr	r2, [pc, #184]	; (80078d8 <xTaskIncrementTick+0x15c>)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007822:	e02f      	b.n	8007884 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	3304      	adds	r3, #4
 8007828:	4618      	mov	r0, r3
 800782a:	f7fe fd85 	bl	8006338 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007832:	2b00      	cmp	r3, #0
 8007834:	d004      	beq.n	8007840 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	3318      	adds	r3, #24
 800783a:	4618      	mov	r0, r3
 800783c:	f7fe fd7c 	bl	8006338 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007844:	4b25      	ldr	r3, [pc, #148]	; (80078dc <xTaskIncrementTick+0x160>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	429a      	cmp	r2, r3
 800784a:	d903      	bls.n	8007854 <xTaskIncrementTick+0xd8>
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007850:	4a22      	ldr	r2, [pc, #136]	; (80078dc <xTaskIncrementTick+0x160>)
 8007852:	6013      	str	r3, [r2, #0]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007858:	4613      	mov	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	4413      	add	r3, r2
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4a1f      	ldr	r2, [pc, #124]	; (80078e0 <xTaskIncrementTick+0x164>)
 8007862:	441a      	add	r2, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	3304      	adds	r3, #4
 8007868:	4619      	mov	r1, r3
 800786a:	4610      	mov	r0, r2
 800786c:	f7fe fd07 	bl	800627e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007874:	4b1b      	ldr	r3, [pc, #108]	; (80078e4 <xTaskIncrementTick+0x168>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787a:	429a      	cmp	r2, r3
 800787c:	d3b8      	bcc.n	80077f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800787e:	2301      	movs	r3, #1
 8007880:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007882:	e7b5      	b.n	80077f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007884:	4b17      	ldr	r3, [pc, #92]	; (80078e4 <xTaskIncrementTick+0x168>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788a:	4915      	ldr	r1, [pc, #84]	; (80078e0 <xTaskIncrementTick+0x164>)
 800788c:	4613      	mov	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	440b      	add	r3, r1
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d901      	bls.n	80078a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800789c:	2301      	movs	r3, #1
 800789e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80078a0:	4b11      	ldr	r3, [pc, #68]	; (80078e8 <xTaskIncrementTick+0x16c>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d007      	beq.n	80078b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80078a8:	2301      	movs	r3, #1
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	e004      	b.n	80078b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80078ae:	4b0f      	ldr	r3, [pc, #60]	; (80078ec <xTaskIncrementTick+0x170>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	3301      	adds	r3, #1
 80078b4:	4a0d      	ldr	r2, [pc, #52]	; (80078ec <xTaskIncrementTick+0x170>)
 80078b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80078b8:	697b      	ldr	r3, [r7, #20]
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20000e38 	.word	0x20000e38
 80078c8:	20000e14 	.word	0x20000e14
 80078cc:	20000dc8 	.word	0x20000dc8
 80078d0:	20000dcc 	.word	0x20000dcc
 80078d4:	20000e28 	.word	0x20000e28
 80078d8:	20000e30 	.word	0x20000e30
 80078dc:	20000e18 	.word	0x20000e18
 80078e0:	20000940 	.word	0x20000940
 80078e4:	2000093c 	.word	0x2000093c
 80078e8:	20000e24 	.word	0x20000e24
 80078ec:	20000e20 	.word	0x20000e20

080078f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078f6:	4b28      	ldr	r3, [pc, #160]	; (8007998 <vTaskSwitchContext+0xa8>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d003      	beq.n	8007906 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80078fe:	4b27      	ldr	r3, [pc, #156]	; (800799c <vTaskSwitchContext+0xac>)
 8007900:	2201      	movs	r2, #1
 8007902:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007904:	e041      	b.n	800798a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007906:	4b25      	ldr	r3, [pc, #148]	; (800799c <vTaskSwitchContext+0xac>)
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800790c:	4b24      	ldr	r3, [pc, #144]	; (80079a0 <vTaskSwitchContext+0xb0>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	60fb      	str	r3, [r7, #12]
 8007912:	e010      	b.n	8007936 <vTaskSwitchContext+0x46>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10a      	bne.n	8007930 <vTaskSwitchContext+0x40>
	__asm volatile
 800791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	607b      	str	r3, [r7, #4]
}
 800792c:	bf00      	nop
 800792e:	e7fe      	b.n	800792e <vTaskSwitchContext+0x3e>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	3b01      	subs	r3, #1
 8007934:	60fb      	str	r3, [r7, #12]
 8007936:	491b      	ldr	r1, [pc, #108]	; (80079a4 <vTaskSwitchContext+0xb4>)
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	440b      	add	r3, r1
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0e4      	beq.n	8007914 <vTaskSwitchContext+0x24>
 800794a:	68fa      	ldr	r2, [r7, #12]
 800794c:	4613      	mov	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	4413      	add	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4a13      	ldr	r2, [pc, #76]	; (80079a4 <vTaskSwitchContext+0xb4>)
 8007956:	4413      	add	r3, r2
 8007958:	60bb      	str	r3, [r7, #8]
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	605a      	str	r2, [r3, #4]
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	3308      	adds	r3, #8
 800796c:	429a      	cmp	r2, r3
 800796e:	d104      	bne.n	800797a <vTaskSwitchContext+0x8a>
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	605a      	str	r2, [r3, #4]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	68db      	ldr	r3, [r3, #12]
 8007980:	4a09      	ldr	r2, [pc, #36]	; (80079a8 <vTaskSwitchContext+0xb8>)
 8007982:	6013      	str	r3, [r2, #0]
 8007984:	4a06      	ldr	r2, [pc, #24]	; (80079a0 <vTaskSwitchContext+0xb0>)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6013      	str	r3, [r2, #0]
}
 800798a:	bf00      	nop
 800798c:	3714      	adds	r7, #20
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	20000e38 	.word	0x20000e38
 800799c:	20000e24 	.word	0x20000e24
 80079a0:	20000e18 	.word	0x20000e18
 80079a4:	20000940 	.word	0x20000940
 80079a8:	2000093c 	.word	0x2000093c

080079ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10a      	bne.n	80079d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	60fb      	str	r3, [r7, #12]
}
 80079ce:	bf00      	nop
 80079d0:	e7fe      	b.n	80079d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079d2:	4b07      	ldr	r3, [pc, #28]	; (80079f0 <vTaskPlaceOnEventList+0x44>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3318      	adds	r3, #24
 80079d8:	4619      	mov	r1, r3
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f7fe fc73 	bl	80062c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079e0:	2101      	movs	r1, #1
 80079e2:	6838      	ldr	r0, [r7, #0]
 80079e4:	f000 fb8a 	bl	80080fc <prvAddCurrentTaskToDelayedList>
}
 80079e8:	bf00      	nop
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	2000093c 	.word	0x2000093c

080079f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b086      	sub	sp, #24
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d10a      	bne.n	8007a1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a0a:	f383 8811 	msr	BASEPRI, r3
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f3bf 8f4f 	dsb	sy
 8007a16:	617b      	str	r3, [r7, #20]
}
 8007a18:	bf00      	nop
 8007a1a:	e7fe      	b.n	8007a1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a1c:	4b0a      	ldr	r3, [pc, #40]	; (8007a48 <vTaskPlaceOnEventListRestricted+0x54>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3318      	adds	r3, #24
 8007a22:	4619      	mov	r1, r3
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f7fe fc2a 	bl	800627e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d002      	beq.n	8007a36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a36:	6879      	ldr	r1, [r7, #4]
 8007a38:	68b8      	ldr	r0, [r7, #8]
 8007a3a:	f000 fb5f 	bl	80080fc <prvAddCurrentTaskToDelayedList>
	}
 8007a3e:	bf00      	nop
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	2000093c 	.word	0x2000093c

08007a4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68db      	ldr	r3, [r3, #12]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10a      	bne.n	8007a78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	60fb      	str	r3, [r7, #12]
}
 8007a74:	bf00      	nop
 8007a76:	e7fe      	b.n	8007a76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	3318      	adds	r3, #24
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fe fc5b 	bl	8006338 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a82:	4b1e      	ldr	r3, [pc, #120]	; (8007afc <xTaskRemoveFromEventList+0xb0>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d11d      	bne.n	8007ac6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	3304      	adds	r3, #4
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fe fc52 	bl	8006338 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a98:	4b19      	ldr	r3, [pc, #100]	; (8007b00 <xTaskRemoveFromEventList+0xb4>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	429a      	cmp	r2, r3
 8007a9e:	d903      	bls.n	8007aa8 <xTaskRemoveFromEventList+0x5c>
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa4:	4a16      	ldr	r2, [pc, #88]	; (8007b00 <xTaskRemoveFromEventList+0xb4>)
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aac:	4613      	mov	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	4413      	add	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4a13      	ldr	r2, [pc, #76]	; (8007b04 <xTaskRemoveFromEventList+0xb8>)
 8007ab6:	441a      	add	r2, r3
 8007ab8:	693b      	ldr	r3, [r7, #16]
 8007aba:	3304      	adds	r3, #4
 8007abc:	4619      	mov	r1, r3
 8007abe:	4610      	mov	r0, r2
 8007ac0:	f7fe fbdd 	bl	800627e <vListInsertEnd>
 8007ac4:	e005      	b.n	8007ad2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	3318      	adds	r3, #24
 8007aca:	4619      	mov	r1, r3
 8007acc:	480e      	ldr	r0, [pc, #56]	; (8007b08 <xTaskRemoveFromEventList+0xbc>)
 8007ace:	f7fe fbd6 	bl	800627e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad6:	4b0d      	ldr	r3, [pc, #52]	; (8007b0c <xTaskRemoveFromEventList+0xc0>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d905      	bls.n	8007aec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ae4:	4b0a      	ldr	r3, [pc, #40]	; (8007b10 <xTaskRemoveFromEventList+0xc4>)
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	e001      	b.n	8007af0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007aec:	2300      	movs	r3, #0
 8007aee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007af0:	697b      	ldr	r3, [r7, #20]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3718      	adds	r7, #24
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	20000e38 	.word	0x20000e38
 8007b00:	20000e18 	.word	0x20000e18
 8007b04:	20000940 	.word	0x20000940
 8007b08:	20000dd0 	.word	0x20000dd0
 8007b0c:	2000093c 	.word	0x2000093c
 8007b10:	20000e24 	.word	0x20000e24

08007b14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b1c:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <vTaskInternalSetTimeOutState+0x24>)
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b24:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <vTaskInternalSetTimeOutState+0x28>)
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	605a      	str	r2, [r3, #4]
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr
 8007b38:	20000e28 	.word	0x20000e28
 8007b3c:	20000e14 	.word	0x20000e14

08007b40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b088      	sub	sp, #32
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10a      	bne.n	8007b66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	613b      	str	r3, [r7, #16]
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10a      	bne.n	8007b82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b70:	f383 8811 	msr	BASEPRI, r3
 8007b74:	f3bf 8f6f 	isb	sy
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	60fb      	str	r3, [r7, #12]
}
 8007b7e:	bf00      	nop
 8007b80:	e7fe      	b.n	8007b80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007b82:	f000 ff87 	bl	8008a94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b86:	4b1d      	ldr	r3, [pc, #116]	; (8007bfc <xTaskCheckForTimeOut+0xbc>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	69ba      	ldr	r2, [r7, #24]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b9e:	d102      	bne.n	8007ba6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	61fb      	str	r3, [r7, #28]
 8007ba4:	e023      	b.n	8007bee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	4b15      	ldr	r3, [pc, #84]	; (8007c00 <xTaskCheckForTimeOut+0xc0>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d007      	beq.n	8007bc2 <xTaskCheckForTimeOut+0x82>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d302      	bcc.n	8007bc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	61fb      	str	r3, [r7, #28]
 8007bc0:	e015      	b.n	8007bee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	697a      	ldr	r2, [r7, #20]
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	d20b      	bcs.n	8007be4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	1ad2      	subs	r2, r2, r3
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f7ff ff9b 	bl	8007b14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007bde:	2300      	movs	r3, #0
 8007be0:	61fb      	str	r3, [r7, #28]
 8007be2:	e004      	b.n	8007bee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2200      	movs	r2, #0
 8007be8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007bea:	2301      	movs	r3, #1
 8007bec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007bee:	f000 ff81 	bl	8008af4 <vPortExitCritical>

	return xReturn;
 8007bf2:	69fb      	ldr	r3, [r7, #28]
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3720      	adds	r7, #32
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	20000e14 	.word	0x20000e14
 8007c00:	20000e28 	.word	0x20000e28

08007c04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c04:	b480      	push	{r7}
 8007c06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c08:	4b03      	ldr	r3, [pc, #12]	; (8007c18 <vTaskMissedYield+0x14>)
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	601a      	str	r2, [r3, #0]
}
 8007c0e:	bf00      	nop
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr
 8007c18:	20000e24 	.word	0x20000e24

08007c1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c24:	f000 f852 	bl	8007ccc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c28:	4b06      	ldr	r3, [pc, #24]	; (8007c44 <prvIdleTask+0x28>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d9f9      	bls.n	8007c24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c30:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <prvIdleTask+0x2c>)
 8007c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c36:	601a      	str	r2, [r3, #0]
 8007c38:	f3bf 8f4f 	dsb	sy
 8007c3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c40:	e7f0      	b.n	8007c24 <prvIdleTask+0x8>
 8007c42:	bf00      	nop
 8007c44:	20000940 	.word	0x20000940
 8007c48:	e000ed04 	.word	0xe000ed04

08007c4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c52:	2300      	movs	r3, #0
 8007c54:	607b      	str	r3, [r7, #4]
 8007c56:	e00c      	b.n	8007c72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	009b      	lsls	r3, r3, #2
 8007c5e:	4413      	add	r3, r2
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4a12      	ldr	r2, [pc, #72]	; (8007cac <prvInitialiseTaskLists+0x60>)
 8007c64:	4413      	add	r3, r2
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fe fadc 	bl	8006224 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	607b      	str	r3, [r7, #4]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2b37      	cmp	r3, #55	; 0x37
 8007c76:	d9ef      	bls.n	8007c58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c78:	480d      	ldr	r0, [pc, #52]	; (8007cb0 <prvInitialiseTaskLists+0x64>)
 8007c7a:	f7fe fad3 	bl	8006224 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c7e:	480d      	ldr	r0, [pc, #52]	; (8007cb4 <prvInitialiseTaskLists+0x68>)
 8007c80:	f7fe fad0 	bl	8006224 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c84:	480c      	ldr	r0, [pc, #48]	; (8007cb8 <prvInitialiseTaskLists+0x6c>)
 8007c86:	f7fe facd 	bl	8006224 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c8a:	480c      	ldr	r0, [pc, #48]	; (8007cbc <prvInitialiseTaskLists+0x70>)
 8007c8c:	f7fe faca 	bl	8006224 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c90:	480b      	ldr	r0, [pc, #44]	; (8007cc0 <prvInitialiseTaskLists+0x74>)
 8007c92:	f7fe fac7 	bl	8006224 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c96:	4b0b      	ldr	r3, [pc, #44]	; (8007cc4 <prvInitialiseTaskLists+0x78>)
 8007c98:	4a05      	ldr	r2, [pc, #20]	; (8007cb0 <prvInitialiseTaskLists+0x64>)
 8007c9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c9c:	4b0a      	ldr	r3, [pc, #40]	; (8007cc8 <prvInitialiseTaskLists+0x7c>)
 8007c9e:	4a05      	ldr	r2, [pc, #20]	; (8007cb4 <prvInitialiseTaskLists+0x68>)
 8007ca0:	601a      	str	r2, [r3, #0]
}
 8007ca2:	bf00      	nop
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	20000940 	.word	0x20000940
 8007cb0:	20000da0 	.word	0x20000da0
 8007cb4:	20000db4 	.word	0x20000db4
 8007cb8:	20000dd0 	.word	0x20000dd0
 8007cbc:	20000de4 	.word	0x20000de4
 8007cc0:	20000dfc 	.word	0x20000dfc
 8007cc4:	20000dc8 	.word	0x20000dc8
 8007cc8:	20000dcc 	.word	0x20000dcc

08007ccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cd2:	e019      	b.n	8007d08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007cd4:	f000 fede 	bl	8008a94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cd8:	4b10      	ldr	r3, [pc, #64]	; (8007d1c <prvCheckTasksWaitingTermination+0x50>)
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f7fe fb27 	bl	8006338 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007cea:	4b0d      	ldr	r3, [pc, #52]	; (8007d20 <prvCheckTasksWaitingTermination+0x54>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3b01      	subs	r3, #1
 8007cf0:	4a0b      	ldr	r2, [pc, #44]	; (8007d20 <prvCheckTasksWaitingTermination+0x54>)
 8007cf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007cf4:	4b0b      	ldr	r3, [pc, #44]	; (8007d24 <prvCheckTasksWaitingTermination+0x58>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3b01      	subs	r3, #1
 8007cfa:	4a0a      	ldr	r2, [pc, #40]	; (8007d24 <prvCheckTasksWaitingTermination+0x58>)
 8007cfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007cfe:	f000 fef9 	bl	8008af4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f810 	bl	8007d28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d08:	4b06      	ldr	r3, [pc, #24]	; (8007d24 <prvCheckTasksWaitingTermination+0x58>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1e1      	bne.n	8007cd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d10:	bf00      	nop
 8007d12:	bf00      	nop
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	20000de4 	.word	0x20000de4
 8007d20:	20000e10 	.word	0x20000e10
 8007d24:	20000df8 	.word	0x20000df8

08007d28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d108      	bne.n	8007d4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f001 f896 	bl	8008e70 <vPortFree>
				vPortFree( pxTCB );
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 f893 	bl	8008e70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d4a:	e018      	b.n	8007d7e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d103      	bne.n	8007d5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f001 f88a 	bl	8008e70 <vPortFree>
	}
 8007d5c:	e00f      	b.n	8007d7e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d00a      	beq.n	8007d7e <prvDeleteTCB+0x56>
	__asm volatile
 8007d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	60fb      	str	r3, [r7, #12]
}
 8007d7a:	bf00      	nop
 8007d7c:	e7fe      	b.n	8007d7c <prvDeleteTCB+0x54>
	}
 8007d7e:	bf00      	nop
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
	...

08007d88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d8e:	4b0c      	ldr	r3, [pc, #48]	; (8007dc0 <prvResetNextTaskUnblockTime+0x38>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d104      	bne.n	8007da2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d98:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <prvResetNextTaskUnblockTime+0x3c>)
 8007d9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007da0:	e008      	b.n	8007db4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007da2:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <prvResetNextTaskUnblockTime+0x38>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	4a04      	ldr	r2, [pc, #16]	; (8007dc4 <prvResetNextTaskUnblockTime+0x3c>)
 8007db2:	6013      	str	r3, [r2, #0]
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	20000dc8 	.word	0x20000dc8
 8007dc4:	20000e30 	.word	0x20000e30

08007dc8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007dce:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <xTaskGetCurrentTaskHandle+0x1c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007dd4:	687b      	ldr	r3, [r7, #4]
	}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr
 8007de2:	bf00      	nop
 8007de4:	2000093c 	.word	0x2000093c

08007de8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007dee:	4b0b      	ldr	r3, [pc, #44]	; (8007e1c <xTaskGetSchedulerState+0x34>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d102      	bne.n	8007dfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007df6:	2301      	movs	r3, #1
 8007df8:	607b      	str	r3, [r7, #4]
 8007dfa:	e008      	b.n	8007e0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dfc:	4b08      	ldr	r3, [pc, #32]	; (8007e20 <xTaskGetSchedulerState+0x38>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d102      	bne.n	8007e0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007e04:	2302      	movs	r3, #2
 8007e06:	607b      	str	r3, [r7, #4]
 8007e08:	e001      	b.n	8007e0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e0e:	687b      	ldr	r3, [r7, #4]
	}
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	20000e1c 	.word	0x20000e1c
 8007e20:	20000e38 	.word	0x20000e38

08007e24 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007e30:	2300      	movs	r3, #0
 8007e32:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d051      	beq.n	8007ede <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e3e:	4b2a      	ldr	r3, [pc, #168]	; (8007ee8 <xTaskPriorityInherit+0xc4>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d241      	bcs.n	8007ecc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	699b      	ldr	r3, [r3, #24]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	db06      	blt.n	8007e5e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e50:	4b25      	ldr	r3, [pc, #148]	; (8007ee8 <xTaskPriorityInherit+0xc4>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	6959      	ldr	r1, [r3, #20]
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e66:	4613      	mov	r3, r2
 8007e68:	009b      	lsls	r3, r3, #2
 8007e6a:	4413      	add	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4a1f      	ldr	r2, [pc, #124]	; (8007eec <xTaskPriorityInherit+0xc8>)
 8007e70:	4413      	add	r3, r2
 8007e72:	4299      	cmp	r1, r3
 8007e74:	d122      	bne.n	8007ebc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	3304      	adds	r3, #4
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fe fa5c 	bl	8006338 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007e80:	4b19      	ldr	r3, [pc, #100]	; (8007ee8 <xTaskPriorityInherit+0xc4>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8e:	4b18      	ldr	r3, [pc, #96]	; (8007ef0 <xTaskPriorityInherit+0xcc>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d903      	bls.n	8007e9e <xTaskPriorityInherit+0x7a>
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e9a:	4a15      	ldr	r2, [pc, #84]	; (8007ef0 <xTaskPriorityInherit+0xcc>)
 8007e9c:	6013      	str	r3, [r2, #0]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	4a10      	ldr	r2, [pc, #64]	; (8007eec <xTaskPriorityInherit+0xc8>)
 8007eac:	441a      	add	r2, r3
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	3304      	adds	r3, #4
 8007eb2:	4619      	mov	r1, r3
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	f7fe f9e2 	bl	800627e <vListInsertEnd>
 8007eba:	e004      	b.n	8007ec6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007ebc:	4b0a      	ldr	r3, [pc, #40]	; (8007ee8 <xTaskPriorityInherit+0xc4>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	e008      	b.n	8007ede <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ed0:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <xTaskPriorityInherit+0xc4>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d201      	bcs.n	8007ede <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007eda:	2301      	movs	r3, #1
 8007edc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ede:	68fb      	ldr	r3, [r7, #12]
	}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	2000093c 	.word	0x2000093c
 8007eec:	20000940 	.word	0x20000940
 8007ef0:	20000e18 	.word	0x20000e18

08007ef4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007f00:	2300      	movs	r3, #0
 8007f02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d056      	beq.n	8007fb8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007f0a:	4b2e      	ldr	r3, [pc, #184]	; (8007fc4 <xTaskPriorityDisinherit+0xd0>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	693a      	ldr	r2, [r7, #16]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d00a      	beq.n	8007f2a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	60fb      	str	r3, [r7, #12]
}
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007f2a:	693b      	ldr	r3, [r7, #16]
 8007f2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10a      	bne.n	8007f48 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f36:	f383 8811 	msr	BASEPRI, r3
 8007f3a:	f3bf 8f6f 	isb	sy
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	60bb      	str	r3, [r7, #8]
}
 8007f44:	bf00      	nop
 8007f46:	e7fe      	b.n	8007f46 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4c:	1e5a      	subs	r2, r3, #1
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d02c      	beq.n	8007fb8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d128      	bne.n	8007fb8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	3304      	adds	r3, #4
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fe f9e4 	bl	8006338 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f88:	4b0f      	ldr	r3, [pc, #60]	; (8007fc8 <xTaskPriorityDisinherit+0xd4>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d903      	bls.n	8007f98 <xTaskPriorityDisinherit+0xa4>
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f94:	4a0c      	ldr	r2, [pc, #48]	; (8007fc8 <xTaskPriorityDisinherit+0xd4>)
 8007f96:	6013      	str	r3, [r2, #0]
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f9c:	4613      	mov	r3, r2
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	4413      	add	r3, r2
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4a09      	ldr	r2, [pc, #36]	; (8007fcc <xTaskPriorityDisinherit+0xd8>)
 8007fa6:	441a      	add	r2, r3
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	3304      	adds	r3, #4
 8007fac:	4619      	mov	r1, r3
 8007fae:	4610      	mov	r0, r2
 8007fb0:	f7fe f965 	bl	800627e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007fb8:	697b      	ldr	r3, [r7, #20]
	}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	2000093c 	.word	0x2000093c
 8007fc8:	20000e18 	.word	0x20000e18
 8007fcc:	20000940 	.word	0x20000940

08007fd0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d06a      	beq.n	80080be <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10a      	bne.n	8008006 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	60fb      	str	r3, [r7, #12]
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008006:	69bb      	ldr	r3, [r7, #24]
 8008008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d902      	bls.n	8008016 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	61fb      	str	r3, [r7, #28]
 8008014:	e002      	b.n	800801c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800801a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800801c:	69bb      	ldr	r3, [r7, #24]
 800801e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008020:	69fa      	ldr	r2, [r7, #28]
 8008022:	429a      	cmp	r2, r3
 8008024:	d04b      	beq.n	80080be <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	429a      	cmp	r2, r3
 800802e:	d146      	bne.n	80080be <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008030:	4b25      	ldr	r3, [pc, #148]	; (80080c8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	69ba      	ldr	r2, [r7, #24]
 8008036:	429a      	cmp	r2, r3
 8008038:	d10a      	bne.n	8008050 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800803a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803e:	f383 8811 	msr	BASEPRI, r3
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	f3bf 8f4f 	dsb	sy
 800804a:	60bb      	str	r3, [r7, #8]
}
 800804c:	bf00      	nop
 800804e:	e7fe      	b.n	800804e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008050:	69bb      	ldr	r3, [r7, #24]
 8008052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008054:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	69fa      	ldr	r2, [r7, #28]
 800805a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	2b00      	cmp	r3, #0
 8008062:	db04      	blt.n	800806e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	6959      	ldr	r1, [r3, #20]
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	4a13      	ldr	r2, [pc, #76]	; (80080cc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800807e:	4413      	add	r3, r2
 8008080:	4299      	cmp	r1, r3
 8008082:	d11c      	bne.n	80080be <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008084:	69bb      	ldr	r3, [r7, #24]
 8008086:	3304      	adds	r3, #4
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe f955 	bl	8006338 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800808e:	69bb      	ldr	r3, [r7, #24]
 8008090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008092:	4b0f      	ldr	r3, [pc, #60]	; (80080d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	429a      	cmp	r2, r3
 8008098:	d903      	bls.n	80080a2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809e:	4a0c      	ldr	r2, [pc, #48]	; (80080d0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80080a0:	6013      	str	r3, [r2, #0]
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080a6:	4613      	mov	r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4a07      	ldr	r2, [pc, #28]	; (80080cc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80080b0:	441a      	add	r2, r3
 80080b2:	69bb      	ldr	r3, [r7, #24]
 80080b4:	3304      	adds	r3, #4
 80080b6:	4619      	mov	r1, r3
 80080b8:	4610      	mov	r0, r2
 80080ba:	f7fe f8e0 	bl	800627e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80080be:	bf00      	nop
 80080c0:	3720      	adds	r7, #32
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	2000093c 	.word	0x2000093c
 80080cc:	20000940 	.word	0x20000940
 80080d0:	20000e18 	.word	0x20000e18

080080d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80080d4:	b480      	push	{r7}
 80080d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80080d8:	4b07      	ldr	r3, [pc, #28]	; (80080f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d004      	beq.n	80080ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80080e0:	4b05      	ldr	r3, [pc, #20]	; (80080f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080e6:	3201      	adds	r2, #1
 80080e8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80080ea:	4b03      	ldr	r3, [pc, #12]	; (80080f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80080ec:	681b      	ldr	r3, [r3, #0]
	}
 80080ee:	4618      	mov	r0, r3
 80080f0:	46bd      	mov	sp, r7
 80080f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f6:	4770      	bx	lr
 80080f8:	2000093c 	.word	0x2000093c

080080fc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008106:	4b21      	ldr	r3, [pc, #132]	; (800818c <prvAddCurrentTaskToDelayedList+0x90>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800810c:	4b20      	ldr	r3, [pc, #128]	; (8008190 <prvAddCurrentTaskToDelayedList+0x94>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3304      	adds	r3, #4
 8008112:	4618      	mov	r0, r3
 8008114:	f7fe f910 	bl	8006338 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800811e:	d10a      	bne.n	8008136 <prvAddCurrentTaskToDelayedList+0x3a>
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d007      	beq.n	8008136 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008126:	4b1a      	ldr	r3, [pc, #104]	; (8008190 <prvAddCurrentTaskToDelayedList+0x94>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3304      	adds	r3, #4
 800812c:	4619      	mov	r1, r3
 800812e:	4819      	ldr	r0, [pc, #100]	; (8008194 <prvAddCurrentTaskToDelayedList+0x98>)
 8008130:	f7fe f8a5 	bl	800627e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008134:	e026      	b.n	8008184 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008136:	68fa      	ldr	r2, [r7, #12]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4413      	add	r3, r2
 800813c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800813e:	4b14      	ldr	r3, [pc, #80]	; (8008190 <prvAddCurrentTaskToDelayedList+0x94>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	429a      	cmp	r2, r3
 800814c:	d209      	bcs.n	8008162 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800814e:	4b12      	ldr	r3, [pc, #72]	; (8008198 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	4b0f      	ldr	r3, [pc, #60]	; (8008190 <prvAddCurrentTaskToDelayedList+0x94>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3304      	adds	r3, #4
 8008158:	4619      	mov	r1, r3
 800815a:	4610      	mov	r0, r2
 800815c:	f7fe f8b3 	bl	80062c6 <vListInsert>
}
 8008160:	e010      	b.n	8008184 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008162:	4b0e      	ldr	r3, [pc, #56]	; (800819c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008164:	681a      	ldr	r2, [r3, #0]
 8008166:	4b0a      	ldr	r3, [pc, #40]	; (8008190 <prvAddCurrentTaskToDelayedList+0x94>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3304      	adds	r3, #4
 800816c:	4619      	mov	r1, r3
 800816e:	4610      	mov	r0, r2
 8008170:	f7fe f8a9 	bl	80062c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008174:	4b0a      	ldr	r3, [pc, #40]	; (80081a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	429a      	cmp	r2, r3
 800817c:	d202      	bcs.n	8008184 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800817e:	4a08      	ldr	r2, [pc, #32]	; (80081a0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	6013      	str	r3, [r2, #0]
}
 8008184:	bf00      	nop
 8008186:	3710      	adds	r7, #16
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}
 800818c:	20000e14 	.word	0x20000e14
 8008190:	2000093c 	.word	0x2000093c
 8008194:	20000dfc 	.word	0x20000dfc
 8008198:	20000dcc 	.word	0x20000dcc
 800819c:	20000dc8 	.word	0x20000dc8
 80081a0:	20000e30 	.word	0x20000e30

080081a4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b08a      	sub	sp, #40	; 0x28
 80081a8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80081aa:	2300      	movs	r3, #0
 80081ac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80081ae:	f000 fb07 	bl	80087c0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80081b2:	4b1c      	ldr	r3, [pc, #112]	; (8008224 <xTimerCreateTimerTask+0x80>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d021      	beq.n	80081fe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80081ba:	2300      	movs	r3, #0
 80081bc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80081be:	2300      	movs	r3, #0
 80081c0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80081c2:	1d3a      	adds	r2, r7, #4
 80081c4:	f107 0108 	add.w	r1, r7, #8
 80081c8:	f107 030c 	add.w	r3, r7, #12
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7fe f80f 	bl	80061f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80081d2:	6879      	ldr	r1, [r7, #4]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	9202      	str	r2, [sp, #8]
 80081da:	9301      	str	r3, [sp, #4]
 80081dc:	2302      	movs	r3, #2
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	2300      	movs	r3, #0
 80081e2:	460a      	mov	r2, r1
 80081e4:	4910      	ldr	r1, [pc, #64]	; (8008228 <xTimerCreateTimerTask+0x84>)
 80081e6:	4811      	ldr	r0, [pc, #68]	; (800822c <xTimerCreateTimerTask+0x88>)
 80081e8:	f7fe ffd0 	bl	800718c <xTaskCreateStatic>
 80081ec:	4603      	mov	r3, r0
 80081ee:	4a10      	ldr	r2, [pc, #64]	; (8008230 <xTimerCreateTimerTask+0x8c>)
 80081f0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80081f2:	4b0f      	ldr	r3, [pc, #60]	; (8008230 <xTimerCreateTimerTask+0x8c>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d001      	beq.n	80081fe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80081fa:	2301      	movs	r3, #1
 80081fc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008208:	f383 8811 	msr	BASEPRI, r3
 800820c:	f3bf 8f6f 	isb	sy
 8008210:	f3bf 8f4f 	dsb	sy
 8008214:	613b      	str	r3, [r7, #16]
}
 8008216:	bf00      	nop
 8008218:	e7fe      	b.n	8008218 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800821a:	697b      	ldr	r3, [r7, #20]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	20000e6c 	.word	0x20000e6c
 8008228:	08009a9c 	.word	0x08009a9c
 800822c:	08008369 	.word	0x08008369
 8008230:	20000e70 	.word	0x20000e70

08008234 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b08a      	sub	sp, #40	; 0x28
 8008238:	af00      	add	r7, sp, #0
 800823a:	60f8      	str	r0, [r7, #12]
 800823c:	60b9      	str	r1, [r7, #8]
 800823e:	607a      	str	r2, [r7, #4]
 8008240:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008242:	2300      	movs	r3, #0
 8008244:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10a      	bne.n	8008262 <xTimerGenericCommand+0x2e>
	__asm volatile
 800824c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008250:	f383 8811 	msr	BASEPRI, r3
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	f3bf 8f4f 	dsb	sy
 800825c:	623b      	str	r3, [r7, #32]
}
 800825e:	bf00      	nop
 8008260:	e7fe      	b.n	8008260 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008262:	4b1a      	ldr	r3, [pc, #104]	; (80082cc <xTimerGenericCommand+0x98>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d02a      	beq.n	80082c0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b05      	cmp	r3, #5
 800827a:	dc18      	bgt.n	80082ae <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800827c:	f7ff fdb4 	bl	8007de8 <xTaskGetSchedulerState>
 8008280:	4603      	mov	r3, r0
 8008282:	2b02      	cmp	r3, #2
 8008284:	d109      	bne.n	800829a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008286:	4b11      	ldr	r3, [pc, #68]	; (80082cc <xTimerGenericCommand+0x98>)
 8008288:	6818      	ldr	r0, [r3, #0]
 800828a:	f107 0110 	add.w	r1, r7, #16
 800828e:	2300      	movs	r3, #0
 8008290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008292:	f7fe fa6f 	bl	8006774 <xQueueGenericSend>
 8008296:	6278      	str	r0, [r7, #36]	; 0x24
 8008298:	e012      	b.n	80082c0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800829a:	4b0c      	ldr	r3, [pc, #48]	; (80082cc <xTimerGenericCommand+0x98>)
 800829c:	6818      	ldr	r0, [r3, #0]
 800829e:	f107 0110 	add.w	r1, r7, #16
 80082a2:	2300      	movs	r3, #0
 80082a4:	2200      	movs	r2, #0
 80082a6:	f7fe fa65 	bl	8006774 <xQueueGenericSend>
 80082aa:	6278      	str	r0, [r7, #36]	; 0x24
 80082ac:	e008      	b.n	80082c0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082ae:	4b07      	ldr	r3, [pc, #28]	; (80082cc <xTimerGenericCommand+0x98>)
 80082b0:	6818      	ldr	r0, [r3, #0]
 80082b2:	f107 0110 	add.w	r1, r7, #16
 80082b6:	2300      	movs	r3, #0
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	f7fe fb59 	bl	8006970 <xQueueGenericSendFromISR>
 80082be:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80082c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3728      	adds	r7, #40	; 0x28
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000e6c 	.word	0x20000e6c

080082d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b088      	sub	sp, #32
 80082d4:	af02      	add	r7, sp, #8
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082da:	4b22      	ldr	r3, [pc, #136]	; (8008364 <prvProcessExpiredTimer+0x94>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	3304      	adds	r3, #4
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fe f825 	bl	8006338 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082f4:	f003 0304 	and.w	r3, r3, #4
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d022      	beq.n	8008342 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	699a      	ldr	r2, [r3, #24]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	18d1      	adds	r1, r2, r3
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	6978      	ldr	r0, [r7, #20]
 800830a:	f000 f8d1 	bl	80084b0 <prvInsertTimerInActiveList>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d01f      	beq.n	8008354 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008314:	2300      	movs	r3, #0
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	2300      	movs	r3, #0
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	2100      	movs	r1, #0
 800831e:	6978      	ldr	r0, [r7, #20]
 8008320:	f7ff ff88 	bl	8008234 <xTimerGenericCommand>
 8008324:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d113      	bne.n	8008354 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	60fb      	str	r3, [r7, #12]
}
 800833e:	bf00      	nop
 8008340:	e7fe      	b.n	8008340 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008348:	f023 0301 	bic.w	r3, r3, #1
 800834c:	b2da      	uxtb	r2, r3
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	6a1b      	ldr	r3, [r3, #32]
 8008358:	6978      	ldr	r0, [r7, #20]
 800835a:	4798      	blx	r3
}
 800835c:	bf00      	nop
 800835e:	3718      	adds	r7, #24
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	20000e64 	.word	0x20000e64

08008368 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b084      	sub	sp, #16
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008370:	f107 0308 	add.w	r3, r7, #8
 8008374:	4618      	mov	r0, r3
 8008376:	f000 f857 	bl	8008428 <prvGetNextExpireTime>
 800837a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	4619      	mov	r1, r3
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f000 f803 	bl	800838c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008386:	f000 f8d5 	bl	8008534 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800838a:	e7f1      	b.n	8008370 <prvTimerTask+0x8>

0800838c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008396:	f7ff f935 	bl	8007604 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800839a:	f107 0308 	add.w	r3, r7, #8
 800839e:	4618      	mov	r0, r3
 80083a0:	f000 f866 	bl	8008470 <prvSampleTimeNow>
 80083a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d130      	bne.n	800840e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d10a      	bne.n	80083c8 <prvProcessTimerOrBlockTask+0x3c>
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d806      	bhi.n	80083c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80083ba:	f7ff f931 	bl	8007620 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80083be:	68f9      	ldr	r1, [r7, #12]
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f7ff ff85 	bl	80082d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80083c6:	e024      	b.n	8008412 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d008      	beq.n	80083e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80083ce:	4b13      	ldr	r3, [pc, #76]	; (800841c <prvProcessTimerOrBlockTask+0x90>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <prvProcessTimerOrBlockTask+0x50>
 80083d8:	2301      	movs	r3, #1
 80083da:	e000      	b.n	80083de <prvProcessTimerOrBlockTask+0x52>
 80083dc:	2300      	movs	r3, #0
 80083de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80083e0:	4b0f      	ldr	r3, [pc, #60]	; (8008420 <prvProcessTimerOrBlockTask+0x94>)
 80083e2:	6818      	ldr	r0, [r3, #0]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	1ad3      	subs	r3, r2, r3
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	4619      	mov	r1, r3
 80083ee:	f7fe fe99 	bl	8007124 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80083f2:	f7ff f915 	bl	8007620 <xTaskResumeAll>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80083fc:	4b09      	ldr	r3, [pc, #36]	; (8008424 <prvProcessTimerOrBlockTask+0x98>)
 80083fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	f3bf 8f6f 	isb	sy
}
 800840c:	e001      	b.n	8008412 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800840e:	f7ff f907 	bl	8007620 <xTaskResumeAll>
}
 8008412:	bf00      	nop
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	20000e68 	.word	0x20000e68
 8008420:	20000e6c 	.word	0x20000e6c
 8008424:	e000ed04 	.word	0xe000ed04

08008428 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008430:	4b0e      	ldr	r3, [pc, #56]	; (800846c <prvGetNextExpireTime+0x44>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <prvGetNextExpireTime+0x16>
 800843a:	2201      	movs	r2, #1
 800843c:	e000      	b.n	8008440 <prvGetNextExpireTime+0x18>
 800843e:	2200      	movs	r2, #0
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d105      	bne.n	8008458 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800844c:	4b07      	ldr	r3, [pc, #28]	; (800846c <prvGetNextExpireTime+0x44>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68db      	ldr	r3, [r3, #12]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	60fb      	str	r3, [r7, #12]
 8008456:	e001      	b.n	800845c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008458:	2300      	movs	r3, #0
 800845a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800845c:	68fb      	ldr	r3, [r7, #12]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3714      	adds	r7, #20
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	20000e64 	.word	0x20000e64

08008470 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008478:	f7ff f970 	bl	800775c <xTaskGetTickCount>
 800847c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800847e:	4b0b      	ldr	r3, [pc, #44]	; (80084ac <prvSampleTimeNow+0x3c>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	429a      	cmp	r2, r3
 8008486:	d205      	bcs.n	8008494 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008488:	f000 f936 	bl	80086f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	601a      	str	r2, [r3, #0]
 8008492:	e002      	b.n	800849a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800849a:	4a04      	ldr	r2, [pc, #16]	; (80084ac <prvSampleTimeNow+0x3c>)
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80084a0:	68fb      	ldr	r3, [r7, #12]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop
 80084ac:	20000e74 	.word	0x20000e74

080084b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b086      	sub	sp, #24
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	60b9      	str	r1, [r7, #8]
 80084ba:	607a      	str	r2, [r7, #4]
 80084bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80084be:	2300      	movs	r3, #0
 80084c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	68ba      	ldr	r2, [r7, #8]
 80084c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80084ce:	68ba      	ldr	r2, [r7, #8]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d812      	bhi.n	80084fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	1ad2      	subs	r2, r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d302      	bcc.n	80084ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80084e4:	2301      	movs	r3, #1
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	e01b      	b.n	8008522 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80084ea:	4b10      	ldr	r3, [pc, #64]	; (800852c <prvInsertTimerInActiveList+0x7c>)
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	3304      	adds	r3, #4
 80084f2:	4619      	mov	r1, r3
 80084f4:	4610      	mov	r0, r2
 80084f6:	f7fd fee6 	bl	80062c6 <vListInsert>
 80084fa:	e012      	b.n	8008522 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	429a      	cmp	r2, r3
 8008502:	d206      	bcs.n	8008512 <prvInsertTimerInActiveList+0x62>
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	429a      	cmp	r2, r3
 800850a:	d302      	bcc.n	8008512 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800850c:	2301      	movs	r3, #1
 800850e:	617b      	str	r3, [r7, #20]
 8008510:	e007      	b.n	8008522 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008512:	4b07      	ldr	r3, [pc, #28]	; (8008530 <prvInsertTimerInActiveList+0x80>)
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	3304      	adds	r3, #4
 800851a:	4619      	mov	r1, r3
 800851c:	4610      	mov	r0, r2
 800851e:	f7fd fed2 	bl	80062c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008522:	697b      	ldr	r3, [r7, #20]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20000e68 	.word	0x20000e68
 8008530:	20000e64 	.word	0x20000e64

08008534 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08e      	sub	sp, #56	; 0x38
 8008538:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800853a:	e0ca      	b.n	80086d2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	da18      	bge.n	8008574 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008542:	1d3b      	adds	r3, r7, #4
 8008544:	3304      	adds	r3, #4
 8008546:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800854a:	2b00      	cmp	r3, #0
 800854c:	d10a      	bne.n	8008564 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	61fb      	str	r3, [r7, #28]
}
 8008560:	bf00      	nop
 8008562:	e7fe      	b.n	8008562 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800856a:	6850      	ldr	r0, [r2, #4]
 800856c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800856e:	6892      	ldr	r2, [r2, #8]
 8008570:	4611      	mov	r1, r2
 8008572:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2b00      	cmp	r3, #0
 8008578:	f2c0 80ab 	blt.w	80086d2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008582:	695b      	ldr	r3, [r3, #20]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d004      	beq.n	8008592 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	3304      	adds	r3, #4
 800858c:	4618      	mov	r0, r3
 800858e:	f7fd fed3 	bl	8006338 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008592:	463b      	mov	r3, r7
 8008594:	4618      	mov	r0, r3
 8008596:	f7ff ff6b 	bl	8008470 <prvSampleTimeNow>
 800859a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b09      	cmp	r3, #9
 80085a0:	f200 8096 	bhi.w	80086d0 <prvProcessReceivedCommands+0x19c>
 80085a4:	a201      	add	r2, pc, #4	; (adr r2, 80085ac <prvProcessReceivedCommands+0x78>)
 80085a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085aa:	bf00      	nop
 80085ac:	080085d5 	.word	0x080085d5
 80085b0:	080085d5 	.word	0x080085d5
 80085b4:	080085d5 	.word	0x080085d5
 80085b8:	08008649 	.word	0x08008649
 80085bc:	0800865d 	.word	0x0800865d
 80085c0:	080086a7 	.word	0x080086a7
 80085c4:	080085d5 	.word	0x080085d5
 80085c8:	080085d5 	.word	0x080085d5
 80085cc:	08008649 	.word	0x08008649
 80085d0:	0800865d 	.word	0x0800865d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085da:	f043 0301 	orr.w	r3, r3, #1
 80085de:	b2da      	uxtb	r2, r3
 80085e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	18d1      	adds	r1, r2, r3
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085f4:	f7ff ff5c 	bl	80084b0 <prvInsertTimerInActiveList>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d069      	beq.n	80086d2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008604:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d05e      	beq.n	80086d2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	699b      	ldr	r3, [r3, #24]
 800861a:	441a      	add	r2, r3
 800861c:	2300      	movs	r3, #0
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	2300      	movs	r3, #0
 8008622:	2100      	movs	r1, #0
 8008624:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008626:	f7ff fe05 	bl	8008234 <xTimerGenericCommand>
 800862a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800862c:	6a3b      	ldr	r3, [r7, #32]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d14f      	bne.n	80086d2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	61bb      	str	r3, [r7, #24]
}
 8008644:	bf00      	nop
 8008646:	e7fe      	b.n	8008646 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800864e:	f023 0301 	bic.w	r3, r3, #1
 8008652:	b2da      	uxtb	r2, r3
 8008654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008656:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800865a:	e03a      	b.n	80086d2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800865c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008662:	f043 0301 	orr.w	r3, r3, #1
 8008666:	b2da      	uxtb	r2, r3
 8008668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008672:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d10a      	bne.n	8008692 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800867c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008680:	f383 8811 	msr	BASEPRI, r3
 8008684:	f3bf 8f6f 	isb	sy
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	617b      	str	r3, [r7, #20]
}
 800868e:	bf00      	nop
 8008690:	e7fe      	b.n	8008690 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	699a      	ldr	r2, [r3, #24]
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	18d1      	adds	r1, r2, r3
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800869e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086a0:	f7ff ff06 	bl	80084b0 <prvInsertTimerInActiveList>
					break;
 80086a4:	e015      	b.n	80086d2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80086a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d103      	bne.n	80086bc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80086b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086b6:	f000 fbdb 	bl	8008e70 <vPortFree>
 80086ba:	e00a      	b.n	80086d2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80086bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086c2:	f023 0301 	bic.w	r3, r3, #1
 80086c6:	b2da      	uxtb	r2, r3
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80086ce:	e000      	b.n	80086d2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80086d0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086d2:	4b08      	ldr	r3, [pc, #32]	; (80086f4 <prvProcessReceivedCommands+0x1c0>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	1d39      	adds	r1, r7, #4
 80086d8:	2200      	movs	r2, #0
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fe f9e4 	bl	8006aa8 <xQueueReceive>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	f47f af2a 	bne.w	800853c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	3730      	adds	r7, #48	; 0x30
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	20000e6c 	.word	0x20000e6c

080086f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b088      	sub	sp, #32
 80086fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80086fe:	e048      	b.n	8008792 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008700:	4b2d      	ldr	r3, [pc, #180]	; (80087b8 <prvSwitchTimerLists+0xc0>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800870a:	4b2b      	ldr	r3, [pc, #172]	; (80087b8 <prvSwitchTimerLists+0xc0>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	3304      	adds	r3, #4
 8008718:	4618      	mov	r0, r3
 800871a:	f7fd fe0d 	bl	8006338 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6a1b      	ldr	r3, [r3, #32]
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800872c:	f003 0304 	and.w	r3, r3, #4
 8008730:	2b00      	cmp	r3, #0
 8008732:	d02e      	beq.n	8008792 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	693a      	ldr	r2, [r7, #16]
 800873a:	4413      	add	r3, r2
 800873c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800873e:	68ba      	ldr	r2, [r7, #8]
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	429a      	cmp	r2, r3
 8008744:	d90e      	bls.n	8008764 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008752:	4b19      	ldr	r3, [pc, #100]	; (80087b8 <prvSwitchTimerLists+0xc0>)
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3304      	adds	r3, #4
 800875a:	4619      	mov	r1, r3
 800875c:	4610      	mov	r0, r2
 800875e:	f7fd fdb2 	bl	80062c6 <vListInsert>
 8008762:	e016      	b.n	8008792 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008764:	2300      	movs	r3, #0
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	2300      	movs	r3, #0
 800876a:	693a      	ldr	r2, [r7, #16]
 800876c:	2100      	movs	r1, #0
 800876e:	68f8      	ldr	r0, [r7, #12]
 8008770:	f7ff fd60 	bl	8008234 <xTimerGenericCommand>
 8008774:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10a      	bne.n	8008792 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	603b      	str	r3, [r7, #0]
}
 800878e:	bf00      	nop
 8008790:	e7fe      	b.n	8008790 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008792:	4b09      	ldr	r3, [pc, #36]	; (80087b8 <prvSwitchTimerLists+0xc0>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1b1      	bne.n	8008700 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800879c:	4b06      	ldr	r3, [pc, #24]	; (80087b8 <prvSwitchTimerLists+0xc0>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80087a2:	4b06      	ldr	r3, [pc, #24]	; (80087bc <prvSwitchTimerLists+0xc4>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a04      	ldr	r2, [pc, #16]	; (80087b8 <prvSwitchTimerLists+0xc0>)
 80087a8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80087aa:	4a04      	ldr	r2, [pc, #16]	; (80087bc <prvSwitchTimerLists+0xc4>)
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	6013      	str	r3, [r2, #0]
}
 80087b0:	bf00      	nop
 80087b2:	3718      	adds	r7, #24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	20000e64 	.word	0x20000e64
 80087bc:	20000e68 	.word	0x20000e68

080087c0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80087c6:	f000 f965 	bl	8008a94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80087ca:	4b15      	ldr	r3, [pc, #84]	; (8008820 <prvCheckForValidListAndQueue+0x60>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d120      	bne.n	8008814 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80087d2:	4814      	ldr	r0, [pc, #80]	; (8008824 <prvCheckForValidListAndQueue+0x64>)
 80087d4:	f7fd fd26 	bl	8006224 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80087d8:	4813      	ldr	r0, [pc, #76]	; (8008828 <prvCheckForValidListAndQueue+0x68>)
 80087da:	f7fd fd23 	bl	8006224 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80087de:	4b13      	ldr	r3, [pc, #76]	; (800882c <prvCheckForValidListAndQueue+0x6c>)
 80087e0:	4a10      	ldr	r2, [pc, #64]	; (8008824 <prvCheckForValidListAndQueue+0x64>)
 80087e2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80087e4:	4b12      	ldr	r3, [pc, #72]	; (8008830 <prvCheckForValidListAndQueue+0x70>)
 80087e6:	4a10      	ldr	r2, [pc, #64]	; (8008828 <prvCheckForValidListAndQueue+0x68>)
 80087e8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80087ea:	2300      	movs	r3, #0
 80087ec:	9300      	str	r3, [sp, #0]
 80087ee:	4b11      	ldr	r3, [pc, #68]	; (8008834 <prvCheckForValidListAndQueue+0x74>)
 80087f0:	4a11      	ldr	r2, [pc, #68]	; (8008838 <prvCheckForValidListAndQueue+0x78>)
 80087f2:	2110      	movs	r1, #16
 80087f4:	200a      	movs	r0, #10
 80087f6:	f7fd fe31 	bl	800645c <xQueueGenericCreateStatic>
 80087fa:	4603      	mov	r3, r0
 80087fc:	4a08      	ldr	r2, [pc, #32]	; (8008820 <prvCheckForValidListAndQueue+0x60>)
 80087fe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008800:	4b07      	ldr	r3, [pc, #28]	; (8008820 <prvCheckForValidListAndQueue+0x60>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d005      	beq.n	8008814 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008808:	4b05      	ldr	r3, [pc, #20]	; (8008820 <prvCheckForValidListAndQueue+0x60>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	490b      	ldr	r1, [pc, #44]	; (800883c <prvCheckForValidListAndQueue+0x7c>)
 800880e:	4618      	mov	r0, r3
 8008810:	f7fe fc5e 	bl	80070d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008814:	f000 f96e 	bl	8008af4 <vPortExitCritical>
}
 8008818:	bf00      	nop
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20000e6c 	.word	0x20000e6c
 8008824:	20000e3c 	.word	0x20000e3c
 8008828:	20000e50 	.word	0x20000e50
 800882c:	20000e64 	.word	0x20000e64
 8008830:	20000e68 	.word	0x20000e68
 8008834:	20000f18 	.word	0x20000f18
 8008838:	20000e78 	.word	0x20000e78
 800883c:	08009aa4 	.word	0x08009aa4

08008840 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	3b04      	subs	r3, #4
 8008850:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008858:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3b04      	subs	r3, #4
 800885e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f023 0201 	bic.w	r2, r3, #1
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	3b04      	subs	r3, #4
 800886e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008870:	4a0c      	ldr	r2, [pc, #48]	; (80088a4 <pxPortInitialiseStack+0x64>)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	3b14      	subs	r3, #20
 800887a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800887c:	687a      	ldr	r2, [r7, #4]
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	3b04      	subs	r3, #4
 8008886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f06f 0202 	mvn.w	r2, #2
 800888e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3b20      	subs	r3, #32
 8008894:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008896:	68fb      	ldr	r3, [r7, #12]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3714      	adds	r7, #20
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	080088a9 	.word	0x080088a9

080088a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80088b2:	4b12      	ldr	r3, [pc, #72]	; (80088fc <prvTaskExitError+0x54>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80088ba:	d00a      	beq.n	80088d2 <prvTaskExitError+0x2a>
	__asm volatile
 80088bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	60fb      	str	r3, [r7, #12]
}
 80088ce:	bf00      	nop
 80088d0:	e7fe      	b.n	80088d0 <prvTaskExitError+0x28>
	__asm volatile
 80088d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d6:	f383 8811 	msr	BASEPRI, r3
 80088da:	f3bf 8f6f 	isb	sy
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	60bb      	str	r3, [r7, #8]
}
 80088e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80088e6:	bf00      	nop
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d0fc      	beq.n	80088e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80088ee:	bf00      	nop
 80088f0:	bf00      	nop
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	2000000c 	.word	0x2000000c

08008900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008900:	4b07      	ldr	r3, [pc, #28]	; (8008920 <pxCurrentTCBConst2>)
 8008902:	6819      	ldr	r1, [r3, #0]
 8008904:	6808      	ldr	r0, [r1, #0]
 8008906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800890a:	f380 8809 	msr	PSP, r0
 800890e:	f3bf 8f6f 	isb	sy
 8008912:	f04f 0000 	mov.w	r0, #0
 8008916:	f380 8811 	msr	BASEPRI, r0
 800891a:	4770      	bx	lr
 800891c:	f3af 8000 	nop.w

08008920 <pxCurrentTCBConst2>:
 8008920:	2000093c 	.word	0x2000093c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008924:	bf00      	nop
 8008926:	bf00      	nop

08008928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008928:	4808      	ldr	r0, [pc, #32]	; (800894c <prvPortStartFirstTask+0x24>)
 800892a:	6800      	ldr	r0, [r0, #0]
 800892c:	6800      	ldr	r0, [r0, #0]
 800892e:	f380 8808 	msr	MSP, r0
 8008932:	f04f 0000 	mov.w	r0, #0
 8008936:	f380 8814 	msr	CONTROL, r0
 800893a:	b662      	cpsie	i
 800893c:	b661      	cpsie	f
 800893e:	f3bf 8f4f 	dsb	sy
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	df00      	svc	0
 8008948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800894a:	bf00      	nop
 800894c:	e000ed08 	.word	0xe000ed08

08008950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b086      	sub	sp, #24
 8008954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008956:	4b46      	ldr	r3, [pc, #280]	; (8008a70 <xPortStartScheduler+0x120>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a46      	ldr	r2, [pc, #280]	; (8008a74 <xPortStartScheduler+0x124>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d10a      	bne.n	8008976 <xPortStartScheduler+0x26>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	613b      	str	r3, [r7, #16]
}
 8008972:	bf00      	nop
 8008974:	e7fe      	b.n	8008974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008976:	4b3e      	ldr	r3, [pc, #248]	; (8008a70 <xPortStartScheduler+0x120>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a3f      	ldr	r2, [pc, #252]	; (8008a78 <xPortStartScheduler+0x128>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d10a      	bne.n	8008996 <xPortStartScheduler+0x46>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	60fb      	str	r3, [r7, #12]
}
 8008992:	bf00      	nop
 8008994:	e7fe      	b.n	8008994 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008996:	4b39      	ldr	r3, [pc, #228]	; (8008a7c <xPortStartScheduler+0x12c>)
 8008998:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	b2db      	uxtb	r3, r3
 80089a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	22ff      	movs	r2, #255	; 0xff
 80089a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80089b0:	78fb      	ldrb	r3, [r7, #3]
 80089b2:	b2db      	uxtb	r3, r3
 80089b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	4b31      	ldr	r3, [pc, #196]	; (8008a80 <xPortStartScheduler+0x130>)
 80089bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80089be:	4b31      	ldr	r3, [pc, #196]	; (8008a84 <xPortStartScheduler+0x134>)
 80089c0:	2207      	movs	r2, #7
 80089c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089c4:	e009      	b.n	80089da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80089c6:	4b2f      	ldr	r3, [pc, #188]	; (8008a84 <xPortStartScheduler+0x134>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	4a2d      	ldr	r2, [pc, #180]	; (8008a84 <xPortStartScheduler+0x134>)
 80089ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	005b      	lsls	r3, r3, #1
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80089da:	78fb      	ldrb	r3, [r7, #3]
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e2:	2b80      	cmp	r3, #128	; 0x80
 80089e4:	d0ef      	beq.n	80089c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80089e6:	4b27      	ldr	r3, [pc, #156]	; (8008a84 <xPortStartScheduler+0x134>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f1c3 0307 	rsb	r3, r3, #7
 80089ee:	2b04      	cmp	r3, #4
 80089f0:	d00a      	beq.n	8008a08 <xPortStartScheduler+0xb8>
	__asm volatile
 80089f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f6:	f383 8811 	msr	BASEPRI, r3
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	f3bf 8f4f 	dsb	sy
 8008a02:	60bb      	str	r3, [r7, #8]
}
 8008a04:	bf00      	nop
 8008a06:	e7fe      	b.n	8008a06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008a08:	4b1e      	ldr	r3, [pc, #120]	; (8008a84 <xPortStartScheduler+0x134>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	021b      	lsls	r3, r3, #8
 8008a0e:	4a1d      	ldr	r2, [pc, #116]	; (8008a84 <xPortStartScheduler+0x134>)
 8008a10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008a12:	4b1c      	ldr	r3, [pc, #112]	; (8008a84 <xPortStartScheduler+0x134>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008a1a:	4a1a      	ldr	r2, [pc, #104]	; (8008a84 <xPortStartScheduler+0x134>)
 8008a1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a26:	4b18      	ldr	r3, [pc, #96]	; (8008a88 <xPortStartScheduler+0x138>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a17      	ldr	r2, [pc, #92]	; (8008a88 <xPortStartScheduler+0x138>)
 8008a2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008a30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a32:	4b15      	ldr	r3, [pc, #84]	; (8008a88 <xPortStartScheduler+0x138>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a14      	ldr	r2, [pc, #80]	; (8008a88 <xPortStartScheduler+0x138>)
 8008a38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008a3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a3e:	f000 f8dd 	bl	8008bfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a42:	4b12      	ldr	r3, [pc, #72]	; (8008a8c <xPortStartScheduler+0x13c>)
 8008a44:	2200      	movs	r2, #0
 8008a46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008a48:	f000 f8fc 	bl	8008c44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008a4c:	4b10      	ldr	r3, [pc, #64]	; (8008a90 <xPortStartScheduler+0x140>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a0f      	ldr	r2, [pc, #60]	; (8008a90 <xPortStartScheduler+0x140>)
 8008a52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008a56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008a58:	f7ff ff66 	bl	8008928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a5c:	f7fe ff48 	bl	80078f0 <vTaskSwitchContext>
	prvTaskExitError();
 8008a60:	f7ff ff22 	bl	80088a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3718      	adds	r7, #24
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	e000ed00 	.word	0xe000ed00
 8008a74:	410fc271 	.word	0x410fc271
 8008a78:	410fc270 	.word	0x410fc270
 8008a7c:	e000e400 	.word	0xe000e400
 8008a80:	20000f68 	.word	0x20000f68
 8008a84:	20000f6c 	.word	0x20000f6c
 8008a88:	e000ed20 	.word	0xe000ed20
 8008a8c:	2000000c 	.word	0x2000000c
 8008a90:	e000ef34 	.word	0xe000ef34

08008a94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
	__asm volatile
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	607b      	str	r3, [r7, #4]
}
 8008aac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008aae:	4b0f      	ldr	r3, [pc, #60]	; (8008aec <vPortEnterCritical+0x58>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	4a0d      	ldr	r2, [pc, #52]	; (8008aec <vPortEnterCritical+0x58>)
 8008ab6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008ab8:	4b0c      	ldr	r3, [pc, #48]	; (8008aec <vPortEnterCritical+0x58>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d10f      	bne.n	8008ae0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ac0:	4b0b      	ldr	r3, [pc, #44]	; (8008af0 <vPortEnterCritical+0x5c>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00a      	beq.n	8008ae0 <vPortEnterCritical+0x4c>
	__asm volatile
 8008aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	603b      	str	r3, [r7, #0]
}
 8008adc:	bf00      	nop
 8008ade:	e7fe      	b.n	8008ade <vPortEnterCritical+0x4a>
	}
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	2000000c 	.word	0x2000000c
 8008af0:	e000ed04 	.word	0xe000ed04

08008af4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008afa:	4b12      	ldr	r3, [pc, #72]	; (8008b44 <vPortExitCritical+0x50>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10a      	bne.n	8008b18 <vPortExitCritical+0x24>
	__asm volatile
 8008b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b06:	f383 8811 	msr	BASEPRI, r3
 8008b0a:	f3bf 8f6f 	isb	sy
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	607b      	str	r3, [r7, #4]
}
 8008b14:	bf00      	nop
 8008b16:	e7fe      	b.n	8008b16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008b18:	4b0a      	ldr	r3, [pc, #40]	; (8008b44 <vPortExitCritical+0x50>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	4a09      	ldr	r2, [pc, #36]	; (8008b44 <vPortExitCritical+0x50>)
 8008b20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008b22:	4b08      	ldr	r3, [pc, #32]	; (8008b44 <vPortExitCritical+0x50>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d105      	bne.n	8008b36 <vPortExitCritical+0x42>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	f383 8811 	msr	BASEPRI, r3
}
 8008b34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008b36:	bf00      	nop
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr
 8008b42:	bf00      	nop
 8008b44:	2000000c 	.word	0x2000000c
	...

08008b50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b50:	f3ef 8009 	mrs	r0, PSP
 8008b54:	f3bf 8f6f 	isb	sy
 8008b58:	4b15      	ldr	r3, [pc, #84]	; (8008bb0 <pxCurrentTCBConst>)
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	f01e 0f10 	tst.w	lr, #16
 8008b60:	bf08      	it	eq
 8008b62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6a:	6010      	str	r0, [r2, #0]
 8008b6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b74:	f380 8811 	msr	BASEPRI, r0
 8008b78:	f3bf 8f4f 	dsb	sy
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f7fe feb6 	bl	80078f0 <vTaskSwitchContext>
 8008b84:	f04f 0000 	mov.w	r0, #0
 8008b88:	f380 8811 	msr	BASEPRI, r0
 8008b8c:	bc09      	pop	{r0, r3}
 8008b8e:	6819      	ldr	r1, [r3, #0]
 8008b90:	6808      	ldr	r0, [r1, #0]
 8008b92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b96:	f01e 0f10 	tst.w	lr, #16
 8008b9a:	bf08      	it	eq
 8008b9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008ba0:	f380 8809 	msr	PSP, r0
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	f3af 8000 	nop.w

08008bb0 <pxCurrentTCBConst>:
 8008bb0:	2000093c 	.word	0x2000093c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008bb4:	bf00      	nop
 8008bb6:	bf00      	nop

08008bb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
	__asm volatile
 8008bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bc2:	f383 8811 	msr	BASEPRI, r3
 8008bc6:	f3bf 8f6f 	isb	sy
 8008bca:	f3bf 8f4f 	dsb	sy
 8008bce:	607b      	str	r3, [r7, #4]
}
 8008bd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008bd2:	f7fe fdd3 	bl	800777c <xTaskIncrementTick>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d003      	beq.n	8008be4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008bdc:	4b06      	ldr	r3, [pc, #24]	; (8008bf8 <xPortSysTickHandler+0x40>)
 8008bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008be2:	601a      	str	r2, [r3, #0]
 8008be4:	2300      	movs	r3, #0
 8008be6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	f383 8811 	msr	BASEPRI, r3
}
 8008bee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008bf0:	bf00      	nop
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	e000ed04 	.word	0xe000ed04

08008bfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c00:	4b0b      	ldr	r3, [pc, #44]	; (8008c30 <vPortSetupTimerInterrupt+0x34>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c06:	4b0b      	ldr	r3, [pc, #44]	; (8008c34 <vPortSetupTimerInterrupt+0x38>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c0c:	4b0a      	ldr	r3, [pc, #40]	; (8008c38 <vPortSetupTimerInterrupt+0x3c>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a0a      	ldr	r2, [pc, #40]	; (8008c3c <vPortSetupTimerInterrupt+0x40>)
 8008c12:	fba2 2303 	umull	r2, r3, r2, r3
 8008c16:	099b      	lsrs	r3, r3, #6
 8008c18:	4a09      	ldr	r2, [pc, #36]	; (8008c40 <vPortSetupTimerInterrupt+0x44>)
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c1e:	4b04      	ldr	r3, [pc, #16]	; (8008c30 <vPortSetupTimerInterrupt+0x34>)
 8008c20:	2207      	movs	r2, #7
 8008c22:	601a      	str	r2, [r3, #0]
}
 8008c24:	bf00      	nop
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	e000e010 	.word	0xe000e010
 8008c34:	e000e018 	.word	0xe000e018
 8008c38:	20000000 	.word	0x20000000
 8008c3c:	10624dd3 	.word	0x10624dd3
 8008c40:	e000e014 	.word	0xe000e014

08008c44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008c44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008c54 <vPortEnableVFP+0x10>
 8008c48:	6801      	ldr	r1, [r0, #0]
 8008c4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008c4e:	6001      	str	r1, [r0, #0]
 8008c50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008c52:	bf00      	nop
 8008c54:	e000ed88 	.word	0xe000ed88

08008c58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008c5e:	f3ef 8305 	mrs	r3, IPSR
 8008c62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2b0f      	cmp	r3, #15
 8008c68:	d914      	bls.n	8008c94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c6a:	4a17      	ldr	r2, [pc, #92]	; (8008cc8 <vPortValidateInterruptPriority+0x70>)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	4413      	add	r3, r2
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c74:	4b15      	ldr	r3, [pc, #84]	; (8008ccc <vPortValidateInterruptPriority+0x74>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	7afa      	ldrb	r2, [r7, #11]
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d20a      	bcs.n	8008c94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	607b      	str	r3, [r7, #4]
}
 8008c90:	bf00      	nop
 8008c92:	e7fe      	b.n	8008c92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c94:	4b0e      	ldr	r3, [pc, #56]	; (8008cd0 <vPortValidateInterruptPriority+0x78>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c9c:	4b0d      	ldr	r3, [pc, #52]	; (8008cd4 <vPortValidateInterruptPriority+0x7c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	429a      	cmp	r2, r3
 8008ca2:	d90a      	bls.n	8008cba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	603b      	str	r3, [r7, #0]
}
 8008cb6:	bf00      	nop
 8008cb8:	e7fe      	b.n	8008cb8 <vPortValidateInterruptPriority+0x60>
	}
 8008cba:	bf00      	nop
 8008cbc:	3714      	adds	r7, #20
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	e000e3f0 	.word	0xe000e3f0
 8008ccc:	20000f68 	.word	0x20000f68
 8008cd0:	e000ed0c 	.word	0xe000ed0c
 8008cd4:	20000f6c 	.word	0x20000f6c

08008cd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b08a      	sub	sp, #40	; 0x28
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ce4:	f7fe fc8e 	bl	8007604 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ce8:	4b5b      	ldr	r3, [pc, #364]	; (8008e58 <pvPortMalloc+0x180>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d101      	bne.n	8008cf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008cf0:	f000 f920 	bl	8008f34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008cf4:	4b59      	ldr	r3, [pc, #356]	; (8008e5c <pvPortMalloc+0x184>)
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	f040 8093 	bne.w	8008e28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d01d      	beq.n	8008d44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d08:	2208      	movs	r2, #8
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f003 0307 	and.w	r3, r3, #7
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d014      	beq.n	8008d44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f023 0307 	bic.w	r3, r3, #7
 8008d20:	3308      	adds	r3, #8
 8008d22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <pvPortMalloc+0x6c>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	617b      	str	r3, [r7, #20]
}
 8008d40:	bf00      	nop
 8008d42:	e7fe      	b.n	8008d42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d06e      	beq.n	8008e28 <pvPortMalloc+0x150>
 8008d4a:	4b45      	ldr	r3, [pc, #276]	; (8008e60 <pvPortMalloc+0x188>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d869      	bhi.n	8008e28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008d54:	4b43      	ldr	r3, [pc, #268]	; (8008e64 <pvPortMalloc+0x18c>)
 8008d56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008d58:	4b42      	ldr	r3, [pc, #264]	; (8008e64 <pvPortMalloc+0x18c>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d5e:	e004      	b.n	8008d6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d903      	bls.n	8008d7c <pvPortMalloc+0xa4>
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d1f1      	bne.n	8008d60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d7c:	4b36      	ldr	r3, [pc, #216]	; (8008e58 <pvPortMalloc+0x180>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d050      	beq.n	8008e28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	2208      	movs	r2, #8
 8008d8c:	4413      	add	r3, r2
 8008d8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	6a3b      	ldr	r3, [r7, #32]
 8008d96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	1ad2      	subs	r2, r2, r3
 8008da0:	2308      	movs	r3, #8
 8008da2:	005b      	lsls	r3, r3, #1
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d91f      	bls.n	8008de8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4413      	add	r3, r2
 8008dae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	f003 0307 	and.w	r3, r3, #7
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00a      	beq.n	8008dd0 <pvPortMalloc+0xf8>
	__asm volatile
 8008dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbe:	f383 8811 	msr	BASEPRI, r3
 8008dc2:	f3bf 8f6f 	isb	sy
 8008dc6:	f3bf 8f4f 	dsb	sy
 8008dca:	613b      	str	r3, [r7, #16]
}
 8008dcc:	bf00      	nop
 8008dce:	e7fe      	b.n	8008dce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd2:	685a      	ldr	r2, [r3, #4]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	1ad2      	subs	r2, r2, r3
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	687a      	ldr	r2, [r7, #4]
 8008de0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008de2:	69b8      	ldr	r0, [r7, #24]
 8008de4:	f000 f908 	bl	8008ff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008de8:	4b1d      	ldr	r3, [pc, #116]	; (8008e60 <pvPortMalloc+0x188>)
 8008dea:	681a      	ldr	r2, [r3, #0]
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	4a1b      	ldr	r2, [pc, #108]	; (8008e60 <pvPortMalloc+0x188>)
 8008df4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008df6:	4b1a      	ldr	r3, [pc, #104]	; (8008e60 <pvPortMalloc+0x188>)
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	4b1b      	ldr	r3, [pc, #108]	; (8008e68 <pvPortMalloc+0x190>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d203      	bcs.n	8008e0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e02:	4b17      	ldr	r3, [pc, #92]	; (8008e60 <pvPortMalloc+0x188>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a18      	ldr	r2, [pc, #96]	; (8008e68 <pvPortMalloc+0x190>)
 8008e08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	4b13      	ldr	r3, [pc, #76]	; (8008e5c <pvPortMalloc+0x184>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	431a      	orrs	r2, r3
 8008e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008e1e:	4b13      	ldr	r3, [pc, #76]	; (8008e6c <pvPortMalloc+0x194>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	3301      	adds	r3, #1
 8008e24:	4a11      	ldr	r2, [pc, #68]	; (8008e6c <pvPortMalloc+0x194>)
 8008e26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e28:	f7fe fbfa 	bl	8007620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	f003 0307 	and.w	r3, r3, #7
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00a      	beq.n	8008e4c <pvPortMalloc+0x174>
	__asm volatile
 8008e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e3a:	f383 8811 	msr	BASEPRI, r3
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	f3bf 8f4f 	dsb	sy
 8008e46:	60fb      	str	r3, [r7, #12]
}
 8008e48:	bf00      	nop
 8008e4a:	e7fe      	b.n	8008e4a <pvPortMalloc+0x172>
	return pvReturn;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3728      	adds	r7, #40	; 0x28
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	20001b30 	.word	0x20001b30
 8008e5c:	20001b44 	.word	0x20001b44
 8008e60:	20001b34 	.word	0x20001b34
 8008e64:	20001b28 	.word	0x20001b28
 8008e68:	20001b38 	.word	0x20001b38
 8008e6c:	20001b3c 	.word	0x20001b3c

08008e70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b086      	sub	sp, #24
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d04d      	beq.n	8008f1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e82:	2308      	movs	r3, #8
 8008e84:	425b      	negs	r3, r3
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	4413      	add	r3, r2
 8008e8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	685a      	ldr	r2, [r3, #4]
 8008e94:	4b24      	ldr	r3, [pc, #144]	; (8008f28 <vPortFree+0xb8>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4013      	ands	r3, r2
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d10a      	bne.n	8008eb4 <vPortFree+0x44>
	__asm volatile
 8008e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea2:	f383 8811 	msr	BASEPRI, r3
 8008ea6:	f3bf 8f6f 	isb	sy
 8008eaa:	f3bf 8f4f 	dsb	sy
 8008eae:	60fb      	str	r3, [r7, #12]
}
 8008eb0:	bf00      	nop
 8008eb2:	e7fe      	b.n	8008eb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d00a      	beq.n	8008ed2 <vPortFree+0x62>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	60bb      	str	r3, [r7, #8]
}
 8008ece:	bf00      	nop
 8008ed0:	e7fe      	b.n	8008ed0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	685a      	ldr	r2, [r3, #4]
 8008ed6:	4b14      	ldr	r3, [pc, #80]	; (8008f28 <vPortFree+0xb8>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4013      	ands	r3, r2
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d01e      	beq.n	8008f1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d11a      	bne.n	8008f1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	685a      	ldr	r2, [r3, #4]
 8008eec:	4b0e      	ldr	r3, [pc, #56]	; (8008f28 <vPortFree+0xb8>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	43db      	mvns	r3, r3
 8008ef2:	401a      	ands	r2, r3
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008ef8:	f7fe fb84 	bl	8007604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <vPortFree+0xbc>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4413      	add	r3, r2
 8008f06:	4a09      	ldr	r2, [pc, #36]	; (8008f2c <vPortFree+0xbc>)
 8008f08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f0a:	6938      	ldr	r0, [r7, #16]
 8008f0c:	f000 f874 	bl	8008ff8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008f10:	4b07      	ldr	r3, [pc, #28]	; (8008f30 <vPortFree+0xc0>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	3301      	adds	r3, #1
 8008f16:	4a06      	ldr	r2, [pc, #24]	; (8008f30 <vPortFree+0xc0>)
 8008f18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008f1a:	f7fe fb81 	bl	8007620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f1e:	bf00      	nop
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20001b44 	.word	0x20001b44
 8008f2c:	20001b34 	.word	0x20001b34
 8008f30:	20001b40 	.word	0x20001b40

08008f34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f34:	b480      	push	{r7}
 8008f36:	b085      	sub	sp, #20
 8008f38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f3a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008f3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f40:	4b27      	ldr	r3, [pc, #156]	; (8008fe0 <prvHeapInit+0xac>)
 8008f42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00c      	beq.n	8008f68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	3307      	adds	r3, #7
 8008f52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f023 0307 	bic.w	r3, r3, #7
 8008f5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	4a1f      	ldr	r2, [pc, #124]	; (8008fe0 <prvHeapInit+0xac>)
 8008f64:	4413      	add	r3, r2
 8008f66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f6c:	4a1d      	ldr	r2, [pc, #116]	; (8008fe4 <prvHeapInit+0xb0>)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f72:	4b1c      	ldr	r3, [pc, #112]	; (8008fe4 <prvHeapInit+0xb0>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f80:	2208      	movs	r2, #8
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	1a9b      	subs	r3, r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0307 	bic.w	r3, r3, #7
 8008f8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	4a15      	ldr	r2, [pc, #84]	; (8008fe8 <prvHeapInit+0xb4>)
 8008f94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f96:	4b14      	ldr	r3, [pc, #80]	; (8008fe8 <prvHeapInit+0xb4>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f9e:	4b12      	ldr	r3, [pc, #72]	; (8008fe8 <prvHeapInit+0xb4>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	1ad2      	subs	r2, r2, r3
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fb4:	4b0c      	ldr	r3, [pc, #48]	; (8008fe8 <prvHeapInit+0xb4>)
 8008fb6:	681a      	ldr	r2, [r3, #0]
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	4a0a      	ldr	r2, [pc, #40]	; (8008fec <prvHeapInit+0xb8>)
 8008fc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	4a09      	ldr	r2, [pc, #36]	; (8008ff0 <prvHeapInit+0xbc>)
 8008fca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008fcc:	4b09      	ldr	r3, [pc, #36]	; (8008ff4 <prvHeapInit+0xc0>)
 8008fce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008fd2:	601a      	str	r2, [r3, #0]
}
 8008fd4:	bf00      	nop
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fde:	4770      	bx	lr
 8008fe0:	20000f70 	.word	0x20000f70
 8008fe4:	20001b28 	.word	0x20001b28
 8008fe8:	20001b30 	.word	0x20001b30
 8008fec:	20001b38 	.word	0x20001b38
 8008ff0:	20001b34 	.word	0x20001b34
 8008ff4:	20001b44 	.word	0x20001b44

08008ff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009000:	4b28      	ldr	r3, [pc, #160]	; (80090a4 <prvInsertBlockIntoFreeList+0xac>)
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	e002      	b.n	800900c <prvInsertBlockIntoFreeList+0x14>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	60fb      	str	r3, [r7, #12]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	429a      	cmp	r2, r3
 8009014:	d8f7      	bhi.n	8009006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	685b      	ldr	r3, [r3, #4]
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	4413      	add	r3, r2
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	429a      	cmp	r2, r3
 8009026:	d108      	bne.n	800903a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	685a      	ldr	r2, [r3, #4]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	685b      	ldr	r3, [r3, #4]
 8009030:	441a      	add	r2, r3
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	441a      	add	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	429a      	cmp	r2, r3
 800904c:	d118      	bne.n	8009080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	4b15      	ldr	r3, [pc, #84]	; (80090a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	429a      	cmp	r2, r3
 8009058:	d00d      	beq.n	8009076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685a      	ldr	r2, [r3, #4]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	441a      	add	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	e008      	b.n	8009088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009076:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <prvInsertBlockIntoFreeList+0xb0>)
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	601a      	str	r2, [r3, #0]
 800907e:	e003      	b.n	8009088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	429a      	cmp	r2, r3
 800908e:	d002      	beq.n	8009096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009096:	bf00      	nop
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20001b28 	.word	0x20001b28
 80090a8:	20001b30 	.word	0x20001b30

080090ac <siprintf>:
 80090ac:	b40e      	push	{r1, r2, r3}
 80090ae:	b500      	push	{lr}
 80090b0:	b09c      	sub	sp, #112	; 0x70
 80090b2:	ab1d      	add	r3, sp, #116	; 0x74
 80090b4:	9002      	str	r0, [sp, #8]
 80090b6:	9006      	str	r0, [sp, #24]
 80090b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090bc:	4809      	ldr	r0, [pc, #36]	; (80090e4 <siprintf+0x38>)
 80090be:	9107      	str	r1, [sp, #28]
 80090c0:	9104      	str	r1, [sp, #16]
 80090c2:	4909      	ldr	r1, [pc, #36]	; (80090e8 <siprintf+0x3c>)
 80090c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090c8:	9105      	str	r1, [sp, #20]
 80090ca:	6800      	ldr	r0, [r0, #0]
 80090cc:	9301      	str	r3, [sp, #4]
 80090ce:	a902      	add	r1, sp, #8
 80090d0:	f000 f9a0 	bl	8009414 <_svfiprintf_r>
 80090d4:	9b02      	ldr	r3, [sp, #8]
 80090d6:	2200      	movs	r2, #0
 80090d8:	701a      	strb	r2, [r3, #0]
 80090da:	b01c      	add	sp, #112	; 0x70
 80090dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80090e0:	b003      	add	sp, #12
 80090e2:	4770      	bx	lr
 80090e4:	2000005c 	.word	0x2000005c
 80090e8:	ffff0208 	.word	0xffff0208

080090ec <memset>:
 80090ec:	4402      	add	r2, r0
 80090ee:	4603      	mov	r3, r0
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d100      	bne.n	80090f6 <memset+0xa>
 80090f4:	4770      	bx	lr
 80090f6:	f803 1b01 	strb.w	r1, [r3], #1
 80090fa:	e7f9      	b.n	80090f0 <memset+0x4>

080090fc <__errno>:
 80090fc:	4b01      	ldr	r3, [pc, #4]	; (8009104 <__errno+0x8>)
 80090fe:	6818      	ldr	r0, [r3, #0]
 8009100:	4770      	bx	lr
 8009102:	bf00      	nop
 8009104:	2000005c 	.word	0x2000005c

08009108 <__libc_init_array>:
 8009108:	b570      	push	{r4, r5, r6, lr}
 800910a:	4d0d      	ldr	r5, [pc, #52]	; (8009140 <__libc_init_array+0x38>)
 800910c:	4c0d      	ldr	r4, [pc, #52]	; (8009144 <__libc_init_array+0x3c>)
 800910e:	1b64      	subs	r4, r4, r5
 8009110:	10a4      	asrs	r4, r4, #2
 8009112:	2600      	movs	r6, #0
 8009114:	42a6      	cmp	r6, r4
 8009116:	d109      	bne.n	800912c <__libc_init_array+0x24>
 8009118:	4d0b      	ldr	r5, [pc, #44]	; (8009148 <__libc_init_array+0x40>)
 800911a:	4c0c      	ldr	r4, [pc, #48]	; (800914c <__libc_init_array+0x44>)
 800911c:	f000 fc6a 	bl	80099f4 <_init>
 8009120:	1b64      	subs	r4, r4, r5
 8009122:	10a4      	asrs	r4, r4, #2
 8009124:	2600      	movs	r6, #0
 8009126:	42a6      	cmp	r6, r4
 8009128:	d105      	bne.n	8009136 <__libc_init_array+0x2e>
 800912a:	bd70      	pop	{r4, r5, r6, pc}
 800912c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009130:	4798      	blx	r3
 8009132:	3601      	adds	r6, #1
 8009134:	e7ee      	b.n	8009114 <__libc_init_array+0xc>
 8009136:	f855 3b04 	ldr.w	r3, [r5], #4
 800913a:	4798      	blx	r3
 800913c:	3601      	adds	r6, #1
 800913e:	e7f2      	b.n	8009126 <__libc_init_array+0x1e>
 8009140:	08009b78 	.word	0x08009b78
 8009144:	08009b78 	.word	0x08009b78
 8009148:	08009b78 	.word	0x08009b78
 800914c:	08009b7c 	.word	0x08009b7c

08009150 <__retarget_lock_acquire_recursive>:
 8009150:	4770      	bx	lr

08009152 <__retarget_lock_release_recursive>:
 8009152:	4770      	bx	lr

08009154 <memcpy>:
 8009154:	440a      	add	r2, r1
 8009156:	4291      	cmp	r1, r2
 8009158:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800915c:	d100      	bne.n	8009160 <memcpy+0xc>
 800915e:	4770      	bx	lr
 8009160:	b510      	push	{r4, lr}
 8009162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800916a:	4291      	cmp	r1, r2
 800916c:	d1f9      	bne.n	8009162 <memcpy+0xe>
 800916e:	bd10      	pop	{r4, pc}

08009170 <_free_r>:
 8009170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009172:	2900      	cmp	r1, #0
 8009174:	d044      	beq.n	8009200 <_free_r+0x90>
 8009176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800917a:	9001      	str	r0, [sp, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	f1a1 0404 	sub.w	r4, r1, #4
 8009182:	bfb8      	it	lt
 8009184:	18e4      	addlt	r4, r4, r3
 8009186:	f000 f8df 	bl	8009348 <__malloc_lock>
 800918a:	4a1e      	ldr	r2, [pc, #120]	; (8009204 <_free_r+0x94>)
 800918c:	9801      	ldr	r0, [sp, #4]
 800918e:	6813      	ldr	r3, [r2, #0]
 8009190:	b933      	cbnz	r3, 80091a0 <_free_r+0x30>
 8009192:	6063      	str	r3, [r4, #4]
 8009194:	6014      	str	r4, [r2, #0]
 8009196:	b003      	add	sp, #12
 8009198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800919c:	f000 b8da 	b.w	8009354 <__malloc_unlock>
 80091a0:	42a3      	cmp	r3, r4
 80091a2:	d908      	bls.n	80091b6 <_free_r+0x46>
 80091a4:	6825      	ldr	r5, [r4, #0]
 80091a6:	1961      	adds	r1, r4, r5
 80091a8:	428b      	cmp	r3, r1
 80091aa:	bf01      	itttt	eq
 80091ac:	6819      	ldreq	r1, [r3, #0]
 80091ae:	685b      	ldreq	r3, [r3, #4]
 80091b0:	1949      	addeq	r1, r1, r5
 80091b2:	6021      	streq	r1, [r4, #0]
 80091b4:	e7ed      	b.n	8009192 <_free_r+0x22>
 80091b6:	461a      	mov	r2, r3
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	b10b      	cbz	r3, 80091c0 <_free_r+0x50>
 80091bc:	42a3      	cmp	r3, r4
 80091be:	d9fa      	bls.n	80091b6 <_free_r+0x46>
 80091c0:	6811      	ldr	r1, [r2, #0]
 80091c2:	1855      	adds	r5, r2, r1
 80091c4:	42a5      	cmp	r5, r4
 80091c6:	d10b      	bne.n	80091e0 <_free_r+0x70>
 80091c8:	6824      	ldr	r4, [r4, #0]
 80091ca:	4421      	add	r1, r4
 80091cc:	1854      	adds	r4, r2, r1
 80091ce:	42a3      	cmp	r3, r4
 80091d0:	6011      	str	r1, [r2, #0]
 80091d2:	d1e0      	bne.n	8009196 <_free_r+0x26>
 80091d4:	681c      	ldr	r4, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	6053      	str	r3, [r2, #4]
 80091da:	440c      	add	r4, r1
 80091dc:	6014      	str	r4, [r2, #0]
 80091de:	e7da      	b.n	8009196 <_free_r+0x26>
 80091e0:	d902      	bls.n	80091e8 <_free_r+0x78>
 80091e2:	230c      	movs	r3, #12
 80091e4:	6003      	str	r3, [r0, #0]
 80091e6:	e7d6      	b.n	8009196 <_free_r+0x26>
 80091e8:	6825      	ldr	r5, [r4, #0]
 80091ea:	1961      	adds	r1, r4, r5
 80091ec:	428b      	cmp	r3, r1
 80091ee:	bf04      	itt	eq
 80091f0:	6819      	ldreq	r1, [r3, #0]
 80091f2:	685b      	ldreq	r3, [r3, #4]
 80091f4:	6063      	str	r3, [r4, #4]
 80091f6:	bf04      	itt	eq
 80091f8:	1949      	addeq	r1, r1, r5
 80091fa:	6021      	streq	r1, [r4, #0]
 80091fc:	6054      	str	r4, [r2, #4]
 80091fe:	e7ca      	b.n	8009196 <_free_r+0x26>
 8009200:	b003      	add	sp, #12
 8009202:	bd30      	pop	{r4, r5, pc}
 8009204:	20001c88 	.word	0x20001c88

08009208 <sbrk_aligned>:
 8009208:	b570      	push	{r4, r5, r6, lr}
 800920a:	4e0e      	ldr	r6, [pc, #56]	; (8009244 <sbrk_aligned+0x3c>)
 800920c:	460c      	mov	r4, r1
 800920e:	6831      	ldr	r1, [r6, #0]
 8009210:	4605      	mov	r5, r0
 8009212:	b911      	cbnz	r1, 800921a <sbrk_aligned+0x12>
 8009214:	f000 fba6 	bl	8009964 <_sbrk_r>
 8009218:	6030      	str	r0, [r6, #0]
 800921a:	4621      	mov	r1, r4
 800921c:	4628      	mov	r0, r5
 800921e:	f000 fba1 	bl	8009964 <_sbrk_r>
 8009222:	1c43      	adds	r3, r0, #1
 8009224:	d00a      	beq.n	800923c <sbrk_aligned+0x34>
 8009226:	1cc4      	adds	r4, r0, #3
 8009228:	f024 0403 	bic.w	r4, r4, #3
 800922c:	42a0      	cmp	r0, r4
 800922e:	d007      	beq.n	8009240 <sbrk_aligned+0x38>
 8009230:	1a21      	subs	r1, r4, r0
 8009232:	4628      	mov	r0, r5
 8009234:	f000 fb96 	bl	8009964 <_sbrk_r>
 8009238:	3001      	adds	r0, #1
 800923a:	d101      	bne.n	8009240 <sbrk_aligned+0x38>
 800923c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009240:	4620      	mov	r0, r4
 8009242:	bd70      	pop	{r4, r5, r6, pc}
 8009244:	20001c8c 	.word	0x20001c8c

08009248 <_malloc_r>:
 8009248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800924c:	1ccd      	adds	r5, r1, #3
 800924e:	f025 0503 	bic.w	r5, r5, #3
 8009252:	3508      	adds	r5, #8
 8009254:	2d0c      	cmp	r5, #12
 8009256:	bf38      	it	cc
 8009258:	250c      	movcc	r5, #12
 800925a:	2d00      	cmp	r5, #0
 800925c:	4607      	mov	r7, r0
 800925e:	db01      	blt.n	8009264 <_malloc_r+0x1c>
 8009260:	42a9      	cmp	r1, r5
 8009262:	d905      	bls.n	8009270 <_malloc_r+0x28>
 8009264:	230c      	movs	r3, #12
 8009266:	603b      	str	r3, [r7, #0]
 8009268:	2600      	movs	r6, #0
 800926a:	4630      	mov	r0, r6
 800926c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009270:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009344 <_malloc_r+0xfc>
 8009274:	f000 f868 	bl	8009348 <__malloc_lock>
 8009278:	f8d8 3000 	ldr.w	r3, [r8]
 800927c:	461c      	mov	r4, r3
 800927e:	bb5c      	cbnz	r4, 80092d8 <_malloc_r+0x90>
 8009280:	4629      	mov	r1, r5
 8009282:	4638      	mov	r0, r7
 8009284:	f7ff ffc0 	bl	8009208 <sbrk_aligned>
 8009288:	1c43      	adds	r3, r0, #1
 800928a:	4604      	mov	r4, r0
 800928c:	d155      	bne.n	800933a <_malloc_r+0xf2>
 800928e:	f8d8 4000 	ldr.w	r4, [r8]
 8009292:	4626      	mov	r6, r4
 8009294:	2e00      	cmp	r6, #0
 8009296:	d145      	bne.n	8009324 <_malloc_r+0xdc>
 8009298:	2c00      	cmp	r4, #0
 800929a:	d048      	beq.n	800932e <_malloc_r+0xe6>
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	4631      	mov	r1, r6
 80092a0:	4638      	mov	r0, r7
 80092a2:	eb04 0903 	add.w	r9, r4, r3
 80092a6:	f000 fb5d 	bl	8009964 <_sbrk_r>
 80092aa:	4581      	cmp	r9, r0
 80092ac:	d13f      	bne.n	800932e <_malloc_r+0xe6>
 80092ae:	6821      	ldr	r1, [r4, #0]
 80092b0:	1a6d      	subs	r5, r5, r1
 80092b2:	4629      	mov	r1, r5
 80092b4:	4638      	mov	r0, r7
 80092b6:	f7ff ffa7 	bl	8009208 <sbrk_aligned>
 80092ba:	3001      	adds	r0, #1
 80092bc:	d037      	beq.n	800932e <_malloc_r+0xe6>
 80092be:	6823      	ldr	r3, [r4, #0]
 80092c0:	442b      	add	r3, r5
 80092c2:	6023      	str	r3, [r4, #0]
 80092c4:	f8d8 3000 	ldr.w	r3, [r8]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d038      	beq.n	800933e <_malloc_r+0xf6>
 80092cc:	685a      	ldr	r2, [r3, #4]
 80092ce:	42a2      	cmp	r2, r4
 80092d0:	d12b      	bne.n	800932a <_malloc_r+0xe2>
 80092d2:	2200      	movs	r2, #0
 80092d4:	605a      	str	r2, [r3, #4]
 80092d6:	e00f      	b.n	80092f8 <_malloc_r+0xb0>
 80092d8:	6822      	ldr	r2, [r4, #0]
 80092da:	1b52      	subs	r2, r2, r5
 80092dc:	d41f      	bmi.n	800931e <_malloc_r+0xd6>
 80092de:	2a0b      	cmp	r2, #11
 80092e0:	d917      	bls.n	8009312 <_malloc_r+0xca>
 80092e2:	1961      	adds	r1, r4, r5
 80092e4:	42a3      	cmp	r3, r4
 80092e6:	6025      	str	r5, [r4, #0]
 80092e8:	bf18      	it	ne
 80092ea:	6059      	strne	r1, [r3, #4]
 80092ec:	6863      	ldr	r3, [r4, #4]
 80092ee:	bf08      	it	eq
 80092f0:	f8c8 1000 	streq.w	r1, [r8]
 80092f4:	5162      	str	r2, [r4, r5]
 80092f6:	604b      	str	r3, [r1, #4]
 80092f8:	4638      	mov	r0, r7
 80092fa:	f104 060b 	add.w	r6, r4, #11
 80092fe:	f000 f829 	bl	8009354 <__malloc_unlock>
 8009302:	f026 0607 	bic.w	r6, r6, #7
 8009306:	1d23      	adds	r3, r4, #4
 8009308:	1af2      	subs	r2, r6, r3
 800930a:	d0ae      	beq.n	800926a <_malloc_r+0x22>
 800930c:	1b9b      	subs	r3, r3, r6
 800930e:	50a3      	str	r3, [r4, r2]
 8009310:	e7ab      	b.n	800926a <_malloc_r+0x22>
 8009312:	42a3      	cmp	r3, r4
 8009314:	6862      	ldr	r2, [r4, #4]
 8009316:	d1dd      	bne.n	80092d4 <_malloc_r+0x8c>
 8009318:	f8c8 2000 	str.w	r2, [r8]
 800931c:	e7ec      	b.n	80092f8 <_malloc_r+0xb0>
 800931e:	4623      	mov	r3, r4
 8009320:	6864      	ldr	r4, [r4, #4]
 8009322:	e7ac      	b.n	800927e <_malloc_r+0x36>
 8009324:	4634      	mov	r4, r6
 8009326:	6876      	ldr	r6, [r6, #4]
 8009328:	e7b4      	b.n	8009294 <_malloc_r+0x4c>
 800932a:	4613      	mov	r3, r2
 800932c:	e7cc      	b.n	80092c8 <_malloc_r+0x80>
 800932e:	230c      	movs	r3, #12
 8009330:	603b      	str	r3, [r7, #0]
 8009332:	4638      	mov	r0, r7
 8009334:	f000 f80e 	bl	8009354 <__malloc_unlock>
 8009338:	e797      	b.n	800926a <_malloc_r+0x22>
 800933a:	6025      	str	r5, [r4, #0]
 800933c:	e7dc      	b.n	80092f8 <_malloc_r+0xb0>
 800933e:	605b      	str	r3, [r3, #4]
 8009340:	deff      	udf	#255	; 0xff
 8009342:	bf00      	nop
 8009344:	20001c88 	.word	0x20001c88

08009348 <__malloc_lock>:
 8009348:	4801      	ldr	r0, [pc, #4]	; (8009350 <__malloc_lock+0x8>)
 800934a:	f7ff bf01 	b.w	8009150 <__retarget_lock_acquire_recursive>
 800934e:	bf00      	nop
 8009350:	20001c84 	.word	0x20001c84

08009354 <__malloc_unlock>:
 8009354:	4801      	ldr	r0, [pc, #4]	; (800935c <__malloc_unlock+0x8>)
 8009356:	f7ff befc 	b.w	8009152 <__retarget_lock_release_recursive>
 800935a:	bf00      	nop
 800935c:	20001c84 	.word	0x20001c84

08009360 <__ssputs_r>:
 8009360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009364:	688e      	ldr	r6, [r1, #8]
 8009366:	461f      	mov	r7, r3
 8009368:	42be      	cmp	r6, r7
 800936a:	680b      	ldr	r3, [r1, #0]
 800936c:	4682      	mov	sl, r0
 800936e:	460c      	mov	r4, r1
 8009370:	4690      	mov	r8, r2
 8009372:	d82c      	bhi.n	80093ce <__ssputs_r+0x6e>
 8009374:	898a      	ldrh	r2, [r1, #12]
 8009376:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800937a:	d026      	beq.n	80093ca <__ssputs_r+0x6a>
 800937c:	6965      	ldr	r5, [r4, #20]
 800937e:	6909      	ldr	r1, [r1, #16]
 8009380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009384:	eba3 0901 	sub.w	r9, r3, r1
 8009388:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800938c:	1c7b      	adds	r3, r7, #1
 800938e:	444b      	add	r3, r9
 8009390:	106d      	asrs	r5, r5, #1
 8009392:	429d      	cmp	r5, r3
 8009394:	bf38      	it	cc
 8009396:	461d      	movcc	r5, r3
 8009398:	0553      	lsls	r3, r2, #21
 800939a:	d527      	bpl.n	80093ec <__ssputs_r+0x8c>
 800939c:	4629      	mov	r1, r5
 800939e:	f7ff ff53 	bl	8009248 <_malloc_r>
 80093a2:	4606      	mov	r6, r0
 80093a4:	b360      	cbz	r0, 8009400 <__ssputs_r+0xa0>
 80093a6:	6921      	ldr	r1, [r4, #16]
 80093a8:	464a      	mov	r2, r9
 80093aa:	f7ff fed3 	bl	8009154 <memcpy>
 80093ae:	89a3      	ldrh	r3, [r4, #12]
 80093b0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80093b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093b8:	81a3      	strh	r3, [r4, #12]
 80093ba:	6126      	str	r6, [r4, #16]
 80093bc:	6165      	str	r5, [r4, #20]
 80093be:	444e      	add	r6, r9
 80093c0:	eba5 0509 	sub.w	r5, r5, r9
 80093c4:	6026      	str	r6, [r4, #0]
 80093c6:	60a5      	str	r5, [r4, #8]
 80093c8:	463e      	mov	r6, r7
 80093ca:	42be      	cmp	r6, r7
 80093cc:	d900      	bls.n	80093d0 <__ssputs_r+0x70>
 80093ce:	463e      	mov	r6, r7
 80093d0:	6820      	ldr	r0, [r4, #0]
 80093d2:	4632      	mov	r2, r6
 80093d4:	4641      	mov	r1, r8
 80093d6:	f000 faab 	bl	8009930 <memmove>
 80093da:	68a3      	ldr	r3, [r4, #8]
 80093dc:	1b9b      	subs	r3, r3, r6
 80093de:	60a3      	str	r3, [r4, #8]
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	4433      	add	r3, r6
 80093e4:	6023      	str	r3, [r4, #0]
 80093e6:	2000      	movs	r0, #0
 80093e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ec:	462a      	mov	r2, r5
 80093ee:	f000 fac9 	bl	8009984 <_realloc_r>
 80093f2:	4606      	mov	r6, r0
 80093f4:	2800      	cmp	r0, #0
 80093f6:	d1e0      	bne.n	80093ba <__ssputs_r+0x5a>
 80093f8:	6921      	ldr	r1, [r4, #16]
 80093fa:	4650      	mov	r0, sl
 80093fc:	f7ff feb8 	bl	8009170 <_free_r>
 8009400:	230c      	movs	r3, #12
 8009402:	f8ca 3000 	str.w	r3, [sl]
 8009406:	89a3      	ldrh	r3, [r4, #12]
 8009408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800940c:	81a3      	strh	r3, [r4, #12]
 800940e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009412:	e7e9      	b.n	80093e8 <__ssputs_r+0x88>

08009414 <_svfiprintf_r>:
 8009414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009418:	4698      	mov	r8, r3
 800941a:	898b      	ldrh	r3, [r1, #12]
 800941c:	061b      	lsls	r3, r3, #24
 800941e:	b09d      	sub	sp, #116	; 0x74
 8009420:	4607      	mov	r7, r0
 8009422:	460d      	mov	r5, r1
 8009424:	4614      	mov	r4, r2
 8009426:	d50e      	bpl.n	8009446 <_svfiprintf_r+0x32>
 8009428:	690b      	ldr	r3, [r1, #16]
 800942a:	b963      	cbnz	r3, 8009446 <_svfiprintf_r+0x32>
 800942c:	2140      	movs	r1, #64	; 0x40
 800942e:	f7ff ff0b 	bl	8009248 <_malloc_r>
 8009432:	6028      	str	r0, [r5, #0]
 8009434:	6128      	str	r0, [r5, #16]
 8009436:	b920      	cbnz	r0, 8009442 <_svfiprintf_r+0x2e>
 8009438:	230c      	movs	r3, #12
 800943a:	603b      	str	r3, [r7, #0]
 800943c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009440:	e0d0      	b.n	80095e4 <_svfiprintf_r+0x1d0>
 8009442:	2340      	movs	r3, #64	; 0x40
 8009444:	616b      	str	r3, [r5, #20]
 8009446:	2300      	movs	r3, #0
 8009448:	9309      	str	r3, [sp, #36]	; 0x24
 800944a:	2320      	movs	r3, #32
 800944c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009450:	f8cd 800c 	str.w	r8, [sp, #12]
 8009454:	2330      	movs	r3, #48	; 0x30
 8009456:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80095fc <_svfiprintf_r+0x1e8>
 800945a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800945e:	f04f 0901 	mov.w	r9, #1
 8009462:	4623      	mov	r3, r4
 8009464:	469a      	mov	sl, r3
 8009466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800946a:	b10a      	cbz	r2, 8009470 <_svfiprintf_r+0x5c>
 800946c:	2a25      	cmp	r2, #37	; 0x25
 800946e:	d1f9      	bne.n	8009464 <_svfiprintf_r+0x50>
 8009470:	ebba 0b04 	subs.w	fp, sl, r4
 8009474:	d00b      	beq.n	800948e <_svfiprintf_r+0x7a>
 8009476:	465b      	mov	r3, fp
 8009478:	4622      	mov	r2, r4
 800947a:	4629      	mov	r1, r5
 800947c:	4638      	mov	r0, r7
 800947e:	f7ff ff6f 	bl	8009360 <__ssputs_r>
 8009482:	3001      	adds	r0, #1
 8009484:	f000 80a9 	beq.w	80095da <_svfiprintf_r+0x1c6>
 8009488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800948a:	445a      	add	r2, fp
 800948c:	9209      	str	r2, [sp, #36]	; 0x24
 800948e:	f89a 3000 	ldrb.w	r3, [sl]
 8009492:	2b00      	cmp	r3, #0
 8009494:	f000 80a1 	beq.w	80095da <_svfiprintf_r+0x1c6>
 8009498:	2300      	movs	r3, #0
 800949a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800949e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094a2:	f10a 0a01 	add.w	sl, sl, #1
 80094a6:	9304      	str	r3, [sp, #16]
 80094a8:	9307      	str	r3, [sp, #28]
 80094aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094ae:	931a      	str	r3, [sp, #104]	; 0x68
 80094b0:	4654      	mov	r4, sl
 80094b2:	2205      	movs	r2, #5
 80094b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094b8:	4850      	ldr	r0, [pc, #320]	; (80095fc <_svfiprintf_r+0x1e8>)
 80094ba:	f7f6 fea1 	bl	8000200 <memchr>
 80094be:	9a04      	ldr	r2, [sp, #16]
 80094c0:	b9d8      	cbnz	r0, 80094fa <_svfiprintf_r+0xe6>
 80094c2:	06d0      	lsls	r0, r2, #27
 80094c4:	bf44      	itt	mi
 80094c6:	2320      	movmi	r3, #32
 80094c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094cc:	0711      	lsls	r1, r2, #28
 80094ce:	bf44      	itt	mi
 80094d0:	232b      	movmi	r3, #43	; 0x2b
 80094d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094d6:	f89a 3000 	ldrb.w	r3, [sl]
 80094da:	2b2a      	cmp	r3, #42	; 0x2a
 80094dc:	d015      	beq.n	800950a <_svfiprintf_r+0xf6>
 80094de:	9a07      	ldr	r2, [sp, #28]
 80094e0:	4654      	mov	r4, sl
 80094e2:	2000      	movs	r0, #0
 80094e4:	f04f 0c0a 	mov.w	ip, #10
 80094e8:	4621      	mov	r1, r4
 80094ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094ee:	3b30      	subs	r3, #48	; 0x30
 80094f0:	2b09      	cmp	r3, #9
 80094f2:	d94d      	bls.n	8009590 <_svfiprintf_r+0x17c>
 80094f4:	b1b0      	cbz	r0, 8009524 <_svfiprintf_r+0x110>
 80094f6:	9207      	str	r2, [sp, #28]
 80094f8:	e014      	b.n	8009524 <_svfiprintf_r+0x110>
 80094fa:	eba0 0308 	sub.w	r3, r0, r8
 80094fe:	fa09 f303 	lsl.w	r3, r9, r3
 8009502:	4313      	orrs	r3, r2
 8009504:	9304      	str	r3, [sp, #16]
 8009506:	46a2      	mov	sl, r4
 8009508:	e7d2      	b.n	80094b0 <_svfiprintf_r+0x9c>
 800950a:	9b03      	ldr	r3, [sp, #12]
 800950c:	1d19      	adds	r1, r3, #4
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	9103      	str	r1, [sp, #12]
 8009512:	2b00      	cmp	r3, #0
 8009514:	bfbb      	ittet	lt
 8009516:	425b      	neglt	r3, r3
 8009518:	f042 0202 	orrlt.w	r2, r2, #2
 800951c:	9307      	strge	r3, [sp, #28]
 800951e:	9307      	strlt	r3, [sp, #28]
 8009520:	bfb8      	it	lt
 8009522:	9204      	strlt	r2, [sp, #16]
 8009524:	7823      	ldrb	r3, [r4, #0]
 8009526:	2b2e      	cmp	r3, #46	; 0x2e
 8009528:	d10c      	bne.n	8009544 <_svfiprintf_r+0x130>
 800952a:	7863      	ldrb	r3, [r4, #1]
 800952c:	2b2a      	cmp	r3, #42	; 0x2a
 800952e:	d134      	bne.n	800959a <_svfiprintf_r+0x186>
 8009530:	9b03      	ldr	r3, [sp, #12]
 8009532:	1d1a      	adds	r2, r3, #4
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	9203      	str	r2, [sp, #12]
 8009538:	2b00      	cmp	r3, #0
 800953a:	bfb8      	it	lt
 800953c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009540:	3402      	adds	r4, #2
 8009542:	9305      	str	r3, [sp, #20]
 8009544:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800960c <_svfiprintf_r+0x1f8>
 8009548:	7821      	ldrb	r1, [r4, #0]
 800954a:	2203      	movs	r2, #3
 800954c:	4650      	mov	r0, sl
 800954e:	f7f6 fe57 	bl	8000200 <memchr>
 8009552:	b138      	cbz	r0, 8009564 <_svfiprintf_r+0x150>
 8009554:	9b04      	ldr	r3, [sp, #16]
 8009556:	eba0 000a 	sub.w	r0, r0, sl
 800955a:	2240      	movs	r2, #64	; 0x40
 800955c:	4082      	lsls	r2, r0
 800955e:	4313      	orrs	r3, r2
 8009560:	3401      	adds	r4, #1
 8009562:	9304      	str	r3, [sp, #16]
 8009564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009568:	4825      	ldr	r0, [pc, #148]	; (8009600 <_svfiprintf_r+0x1ec>)
 800956a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800956e:	2206      	movs	r2, #6
 8009570:	f7f6 fe46 	bl	8000200 <memchr>
 8009574:	2800      	cmp	r0, #0
 8009576:	d038      	beq.n	80095ea <_svfiprintf_r+0x1d6>
 8009578:	4b22      	ldr	r3, [pc, #136]	; (8009604 <_svfiprintf_r+0x1f0>)
 800957a:	bb1b      	cbnz	r3, 80095c4 <_svfiprintf_r+0x1b0>
 800957c:	9b03      	ldr	r3, [sp, #12]
 800957e:	3307      	adds	r3, #7
 8009580:	f023 0307 	bic.w	r3, r3, #7
 8009584:	3308      	adds	r3, #8
 8009586:	9303      	str	r3, [sp, #12]
 8009588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800958a:	4433      	add	r3, r6
 800958c:	9309      	str	r3, [sp, #36]	; 0x24
 800958e:	e768      	b.n	8009462 <_svfiprintf_r+0x4e>
 8009590:	fb0c 3202 	mla	r2, ip, r2, r3
 8009594:	460c      	mov	r4, r1
 8009596:	2001      	movs	r0, #1
 8009598:	e7a6      	b.n	80094e8 <_svfiprintf_r+0xd4>
 800959a:	2300      	movs	r3, #0
 800959c:	3401      	adds	r4, #1
 800959e:	9305      	str	r3, [sp, #20]
 80095a0:	4619      	mov	r1, r3
 80095a2:	f04f 0c0a 	mov.w	ip, #10
 80095a6:	4620      	mov	r0, r4
 80095a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095ac:	3a30      	subs	r2, #48	; 0x30
 80095ae:	2a09      	cmp	r2, #9
 80095b0:	d903      	bls.n	80095ba <_svfiprintf_r+0x1a6>
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d0c6      	beq.n	8009544 <_svfiprintf_r+0x130>
 80095b6:	9105      	str	r1, [sp, #20]
 80095b8:	e7c4      	b.n	8009544 <_svfiprintf_r+0x130>
 80095ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80095be:	4604      	mov	r4, r0
 80095c0:	2301      	movs	r3, #1
 80095c2:	e7f0      	b.n	80095a6 <_svfiprintf_r+0x192>
 80095c4:	ab03      	add	r3, sp, #12
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	462a      	mov	r2, r5
 80095ca:	4b0f      	ldr	r3, [pc, #60]	; (8009608 <_svfiprintf_r+0x1f4>)
 80095cc:	a904      	add	r1, sp, #16
 80095ce:	4638      	mov	r0, r7
 80095d0:	f3af 8000 	nop.w
 80095d4:	1c42      	adds	r2, r0, #1
 80095d6:	4606      	mov	r6, r0
 80095d8:	d1d6      	bne.n	8009588 <_svfiprintf_r+0x174>
 80095da:	89ab      	ldrh	r3, [r5, #12]
 80095dc:	065b      	lsls	r3, r3, #25
 80095de:	f53f af2d 	bmi.w	800943c <_svfiprintf_r+0x28>
 80095e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095e4:	b01d      	add	sp, #116	; 0x74
 80095e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ea:	ab03      	add	r3, sp, #12
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	462a      	mov	r2, r5
 80095f0:	4b05      	ldr	r3, [pc, #20]	; (8009608 <_svfiprintf_r+0x1f4>)
 80095f2:	a904      	add	r1, sp, #16
 80095f4:	4638      	mov	r0, r7
 80095f6:	f000 f879 	bl	80096ec <_printf_i>
 80095fa:	e7eb      	b.n	80095d4 <_svfiprintf_r+0x1c0>
 80095fc:	08009b3c 	.word	0x08009b3c
 8009600:	08009b46 	.word	0x08009b46
 8009604:	00000000 	.word	0x00000000
 8009608:	08009361 	.word	0x08009361
 800960c:	08009b42 	.word	0x08009b42

08009610 <_printf_common>:
 8009610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009614:	4616      	mov	r6, r2
 8009616:	4699      	mov	r9, r3
 8009618:	688a      	ldr	r2, [r1, #8]
 800961a:	690b      	ldr	r3, [r1, #16]
 800961c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009620:	4293      	cmp	r3, r2
 8009622:	bfb8      	it	lt
 8009624:	4613      	movlt	r3, r2
 8009626:	6033      	str	r3, [r6, #0]
 8009628:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800962c:	4607      	mov	r7, r0
 800962e:	460c      	mov	r4, r1
 8009630:	b10a      	cbz	r2, 8009636 <_printf_common+0x26>
 8009632:	3301      	adds	r3, #1
 8009634:	6033      	str	r3, [r6, #0]
 8009636:	6823      	ldr	r3, [r4, #0]
 8009638:	0699      	lsls	r1, r3, #26
 800963a:	bf42      	ittt	mi
 800963c:	6833      	ldrmi	r3, [r6, #0]
 800963e:	3302      	addmi	r3, #2
 8009640:	6033      	strmi	r3, [r6, #0]
 8009642:	6825      	ldr	r5, [r4, #0]
 8009644:	f015 0506 	ands.w	r5, r5, #6
 8009648:	d106      	bne.n	8009658 <_printf_common+0x48>
 800964a:	f104 0a19 	add.w	sl, r4, #25
 800964e:	68e3      	ldr	r3, [r4, #12]
 8009650:	6832      	ldr	r2, [r6, #0]
 8009652:	1a9b      	subs	r3, r3, r2
 8009654:	42ab      	cmp	r3, r5
 8009656:	dc26      	bgt.n	80096a6 <_printf_common+0x96>
 8009658:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800965c:	1e13      	subs	r3, r2, #0
 800965e:	6822      	ldr	r2, [r4, #0]
 8009660:	bf18      	it	ne
 8009662:	2301      	movne	r3, #1
 8009664:	0692      	lsls	r2, r2, #26
 8009666:	d42b      	bmi.n	80096c0 <_printf_common+0xb0>
 8009668:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800966c:	4649      	mov	r1, r9
 800966e:	4638      	mov	r0, r7
 8009670:	47c0      	blx	r8
 8009672:	3001      	adds	r0, #1
 8009674:	d01e      	beq.n	80096b4 <_printf_common+0xa4>
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	6922      	ldr	r2, [r4, #16]
 800967a:	f003 0306 	and.w	r3, r3, #6
 800967e:	2b04      	cmp	r3, #4
 8009680:	bf02      	ittt	eq
 8009682:	68e5      	ldreq	r5, [r4, #12]
 8009684:	6833      	ldreq	r3, [r6, #0]
 8009686:	1aed      	subeq	r5, r5, r3
 8009688:	68a3      	ldr	r3, [r4, #8]
 800968a:	bf0c      	ite	eq
 800968c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009690:	2500      	movne	r5, #0
 8009692:	4293      	cmp	r3, r2
 8009694:	bfc4      	itt	gt
 8009696:	1a9b      	subgt	r3, r3, r2
 8009698:	18ed      	addgt	r5, r5, r3
 800969a:	2600      	movs	r6, #0
 800969c:	341a      	adds	r4, #26
 800969e:	42b5      	cmp	r5, r6
 80096a0:	d11a      	bne.n	80096d8 <_printf_common+0xc8>
 80096a2:	2000      	movs	r0, #0
 80096a4:	e008      	b.n	80096b8 <_printf_common+0xa8>
 80096a6:	2301      	movs	r3, #1
 80096a8:	4652      	mov	r2, sl
 80096aa:	4649      	mov	r1, r9
 80096ac:	4638      	mov	r0, r7
 80096ae:	47c0      	blx	r8
 80096b0:	3001      	adds	r0, #1
 80096b2:	d103      	bne.n	80096bc <_printf_common+0xac>
 80096b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096bc:	3501      	adds	r5, #1
 80096be:	e7c6      	b.n	800964e <_printf_common+0x3e>
 80096c0:	18e1      	adds	r1, r4, r3
 80096c2:	1c5a      	adds	r2, r3, #1
 80096c4:	2030      	movs	r0, #48	; 0x30
 80096c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80096ca:	4422      	add	r2, r4
 80096cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80096d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80096d4:	3302      	adds	r3, #2
 80096d6:	e7c7      	b.n	8009668 <_printf_common+0x58>
 80096d8:	2301      	movs	r3, #1
 80096da:	4622      	mov	r2, r4
 80096dc:	4649      	mov	r1, r9
 80096de:	4638      	mov	r0, r7
 80096e0:	47c0      	blx	r8
 80096e2:	3001      	adds	r0, #1
 80096e4:	d0e6      	beq.n	80096b4 <_printf_common+0xa4>
 80096e6:	3601      	adds	r6, #1
 80096e8:	e7d9      	b.n	800969e <_printf_common+0x8e>
	...

080096ec <_printf_i>:
 80096ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096f0:	7e0f      	ldrb	r7, [r1, #24]
 80096f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80096f4:	2f78      	cmp	r7, #120	; 0x78
 80096f6:	4691      	mov	r9, r2
 80096f8:	4680      	mov	r8, r0
 80096fa:	460c      	mov	r4, r1
 80096fc:	469a      	mov	sl, r3
 80096fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009702:	d807      	bhi.n	8009714 <_printf_i+0x28>
 8009704:	2f62      	cmp	r7, #98	; 0x62
 8009706:	d80a      	bhi.n	800971e <_printf_i+0x32>
 8009708:	2f00      	cmp	r7, #0
 800970a:	f000 80d4 	beq.w	80098b6 <_printf_i+0x1ca>
 800970e:	2f58      	cmp	r7, #88	; 0x58
 8009710:	f000 80c0 	beq.w	8009894 <_printf_i+0x1a8>
 8009714:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009718:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800971c:	e03a      	b.n	8009794 <_printf_i+0xa8>
 800971e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009722:	2b15      	cmp	r3, #21
 8009724:	d8f6      	bhi.n	8009714 <_printf_i+0x28>
 8009726:	a101      	add	r1, pc, #4	; (adr r1, 800972c <_printf_i+0x40>)
 8009728:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800972c:	08009785 	.word	0x08009785
 8009730:	08009799 	.word	0x08009799
 8009734:	08009715 	.word	0x08009715
 8009738:	08009715 	.word	0x08009715
 800973c:	08009715 	.word	0x08009715
 8009740:	08009715 	.word	0x08009715
 8009744:	08009799 	.word	0x08009799
 8009748:	08009715 	.word	0x08009715
 800974c:	08009715 	.word	0x08009715
 8009750:	08009715 	.word	0x08009715
 8009754:	08009715 	.word	0x08009715
 8009758:	0800989d 	.word	0x0800989d
 800975c:	080097c5 	.word	0x080097c5
 8009760:	08009857 	.word	0x08009857
 8009764:	08009715 	.word	0x08009715
 8009768:	08009715 	.word	0x08009715
 800976c:	080098bf 	.word	0x080098bf
 8009770:	08009715 	.word	0x08009715
 8009774:	080097c5 	.word	0x080097c5
 8009778:	08009715 	.word	0x08009715
 800977c:	08009715 	.word	0x08009715
 8009780:	0800985f 	.word	0x0800985f
 8009784:	682b      	ldr	r3, [r5, #0]
 8009786:	1d1a      	adds	r2, r3, #4
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	602a      	str	r2, [r5, #0]
 800978c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009790:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009794:	2301      	movs	r3, #1
 8009796:	e09f      	b.n	80098d8 <_printf_i+0x1ec>
 8009798:	6820      	ldr	r0, [r4, #0]
 800979a:	682b      	ldr	r3, [r5, #0]
 800979c:	0607      	lsls	r7, r0, #24
 800979e:	f103 0104 	add.w	r1, r3, #4
 80097a2:	6029      	str	r1, [r5, #0]
 80097a4:	d501      	bpl.n	80097aa <_printf_i+0xbe>
 80097a6:	681e      	ldr	r6, [r3, #0]
 80097a8:	e003      	b.n	80097b2 <_printf_i+0xc6>
 80097aa:	0646      	lsls	r6, r0, #25
 80097ac:	d5fb      	bpl.n	80097a6 <_printf_i+0xba>
 80097ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80097b2:	2e00      	cmp	r6, #0
 80097b4:	da03      	bge.n	80097be <_printf_i+0xd2>
 80097b6:	232d      	movs	r3, #45	; 0x2d
 80097b8:	4276      	negs	r6, r6
 80097ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097be:	485a      	ldr	r0, [pc, #360]	; (8009928 <_printf_i+0x23c>)
 80097c0:	230a      	movs	r3, #10
 80097c2:	e012      	b.n	80097ea <_printf_i+0xfe>
 80097c4:	682b      	ldr	r3, [r5, #0]
 80097c6:	6820      	ldr	r0, [r4, #0]
 80097c8:	1d19      	adds	r1, r3, #4
 80097ca:	6029      	str	r1, [r5, #0]
 80097cc:	0605      	lsls	r5, r0, #24
 80097ce:	d501      	bpl.n	80097d4 <_printf_i+0xe8>
 80097d0:	681e      	ldr	r6, [r3, #0]
 80097d2:	e002      	b.n	80097da <_printf_i+0xee>
 80097d4:	0641      	lsls	r1, r0, #25
 80097d6:	d5fb      	bpl.n	80097d0 <_printf_i+0xe4>
 80097d8:	881e      	ldrh	r6, [r3, #0]
 80097da:	4853      	ldr	r0, [pc, #332]	; (8009928 <_printf_i+0x23c>)
 80097dc:	2f6f      	cmp	r7, #111	; 0x6f
 80097de:	bf0c      	ite	eq
 80097e0:	2308      	moveq	r3, #8
 80097e2:	230a      	movne	r3, #10
 80097e4:	2100      	movs	r1, #0
 80097e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80097ea:	6865      	ldr	r5, [r4, #4]
 80097ec:	60a5      	str	r5, [r4, #8]
 80097ee:	2d00      	cmp	r5, #0
 80097f0:	bfa2      	ittt	ge
 80097f2:	6821      	ldrge	r1, [r4, #0]
 80097f4:	f021 0104 	bicge.w	r1, r1, #4
 80097f8:	6021      	strge	r1, [r4, #0]
 80097fa:	b90e      	cbnz	r6, 8009800 <_printf_i+0x114>
 80097fc:	2d00      	cmp	r5, #0
 80097fe:	d04b      	beq.n	8009898 <_printf_i+0x1ac>
 8009800:	4615      	mov	r5, r2
 8009802:	fbb6 f1f3 	udiv	r1, r6, r3
 8009806:	fb03 6711 	mls	r7, r3, r1, r6
 800980a:	5dc7      	ldrb	r7, [r0, r7]
 800980c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009810:	4637      	mov	r7, r6
 8009812:	42bb      	cmp	r3, r7
 8009814:	460e      	mov	r6, r1
 8009816:	d9f4      	bls.n	8009802 <_printf_i+0x116>
 8009818:	2b08      	cmp	r3, #8
 800981a:	d10b      	bne.n	8009834 <_printf_i+0x148>
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	07de      	lsls	r6, r3, #31
 8009820:	d508      	bpl.n	8009834 <_printf_i+0x148>
 8009822:	6923      	ldr	r3, [r4, #16]
 8009824:	6861      	ldr	r1, [r4, #4]
 8009826:	4299      	cmp	r1, r3
 8009828:	bfde      	ittt	le
 800982a:	2330      	movle	r3, #48	; 0x30
 800982c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009830:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009834:	1b52      	subs	r2, r2, r5
 8009836:	6122      	str	r2, [r4, #16]
 8009838:	f8cd a000 	str.w	sl, [sp]
 800983c:	464b      	mov	r3, r9
 800983e:	aa03      	add	r2, sp, #12
 8009840:	4621      	mov	r1, r4
 8009842:	4640      	mov	r0, r8
 8009844:	f7ff fee4 	bl	8009610 <_printf_common>
 8009848:	3001      	adds	r0, #1
 800984a:	d14a      	bne.n	80098e2 <_printf_i+0x1f6>
 800984c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009850:	b004      	add	sp, #16
 8009852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009856:	6823      	ldr	r3, [r4, #0]
 8009858:	f043 0320 	orr.w	r3, r3, #32
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	4833      	ldr	r0, [pc, #204]	; (800992c <_printf_i+0x240>)
 8009860:	2778      	movs	r7, #120	; 0x78
 8009862:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009866:	6823      	ldr	r3, [r4, #0]
 8009868:	6829      	ldr	r1, [r5, #0]
 800986a:	061f      	lsls	r7, r3, #24
 800986c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009870:	d402      	bmi.n	8009878 <_printf_i+0x18c>
 8009872:	065f      	lsls	r7, r3, #25
 8009874:	bf48      	it	mi
 8009876:	b2b6      	uxthmi	r6, r6
 8009878:	07df      	lsls	r7, r3, #31
 800987a:	bf48      	it	mi
 800987c:	f043 0320 	orrmi.w	r3, r3, #32
 8009880:	6029      	str	r1, [r5, #0]
 8009882:	bf48      	it	mi
 8009884:	6023      	strmi	r3, [r4, #0]
 8009886:	b91e      	cbnz	r6, 8009890 <_printf_i+0x1a4>
 8009888:	6823      	ldr	r3, [r4, #0]
 800988a:	f023 0320 	bic.w	r3, r3, #32
 800988e:	6023      	str	r3, [r4, #0]
 8009890:	2310      	movs	r3, #16
 8009892:	e7a7      	b.n	80097e4 <_printf_i+0xf8>
 8009894:	4824      	ldr	r0, [pc, #144]	; (8009928 <_printf_i+0x23c>)
 8009896:	e7e4      	b.n	8009862 <_printf_i+0x176>
 8009898:	4615      	mov	r5, r2
 800989a:	e7bd      	b.n	8009818 <_printf_i+0x12c>
 800989c:	682b      	ldr	r3, [r5, #0]
 800989e:	6826      	ldr	r6, [r4, #0]
 80098a0:	6961      	ldr	r1, [r4, #20]
 80098a2:	1d18      	adds	r0, r3, #4
 80098a4:	6028      	str	r0, [r5, #0]
 80098a6:	0635      	lsls	r5, r6, #24
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	d501      	bpl.n	80098b0 <_printf_i+0x1c4>
 80098ac:	6019      	str	r1, [r3, #0]
 80098ae:	e002      	b.n	80098b6 <_printf_i+0x1ca>
 80098b0:	0670      	lsls	r0, r6, #25
 80098b2:	d5fb      	bpl.n	80098ac <_printf_i+0x1c0>
 80098b4:	8019      	strh	r1, [r3, #0]
 80098b6:	2300      	movs	r3, #0
 80098b8:	6123      	str	r3, [r4, #16]
 80098ba:	4615      	mov	r5, r2
 80098bc:	e7bc      	b.n	8009838 <_printf_i+0x14c>
 80098be:	682b      	ldr	r3, [r5, #0]
 80098c0:	1d1a      	adds	r2, r3, #4
 80098c2:	602a      	str	r2, [r5, #0]
 80098c4:	681d      	ldr	r5, [r3, #0]
 80098c6:	6862      	ldr	r2, [r4, #4]
 80098c8:	2100      	movs	r1, #0
 80098ca:	4628      	mov	r0, r5
 80098cc:	f7f6 fc98 	bl	8000200 <memchr>
 80098d0:	b108      	cbz	r0, 80098d6 <_printf_i+0x1ea>
 80098d2:	1b40      	subs	r0, r0, r5
 80098d4:	6060      	str	r0, [r4, #4]
 80098d6:	6863      	ldr	r3, [r4, #4]
 80098d8:	6123      	str	r3, [r4, #16]
 80098da:	2300      	movs	r3, #0
 80098dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80098e0:	e7aa      	b.n	8009838 <_printf_i+0x14c>
 80098e2:	6923      	ldr	r3, [r4, #16]
 80098e4:	462a      	mov	r2, r5
 80098e6:	4649      	mov	r1, r9
 80098e8:	4640      	mov	r0, r8
 80098ea:	47d0      	blx	sl
 80098ec:	3001      	adds	r0, #1
 80098ee:	d0ad      	beq.n	800984c <_printf_i+0x160>
 80098f0:	6823      	ldr	r3, [r4, #0]
 80098f2:	079b      	lsls	r3, r3, #30
 80098f4:	d413      	bmi.n	800991e <_printf_i+0x232>
 80098f6:	68e0      	ldr	r0, [r4, #12]
 80098f8:	9b03      	ldr	r3, [sp, #12]
 80098fa:	4298      	cmp	r0, r3
 80098fc:	bfb8      	it	lt
 80098fe:	4618      	movlt	r0, r3
 8009900:	e7a6      	b.n	8009850 <_printf_i+0x164>
 8009902:	2301      	movs	r3, #1
 8009904:	4632      	mov	r2, r6
 8009906:	4649      	mov	r1, r9
 8009908:	4640      	mov	r0, r8
 800990a:	47d0      	blx	sl
 800990c:	3001      	adds	r0, #1
 800990e:	d09d      	beq.n	800984c <_printf_i+0x160>
 8009910:	3501      	adds	r5, #1
 8009912:	68e3      	ldr	r3, [r4, #12]
 8009914:	9903      	ldr	r1, [sp, #12]
 8009916:	1a5b      	subs	r3, r3, r1
 8009918:	42ab      	cmp	r3, r5
 800991a:	dcf2      	bgt.n	8009902 <_printf_i+0x216>
 800991c:	e7eb      	b.n	80098f6 <_printf_i+0x20a>
 800991e:	2500      	movs	r5, #0
 8009920:	f104 0619 	add.w	r6, r4, #25
 8009924:	e7f5      	b.n	8009912 <_printf_i+0x226>
 8009926:	bf00      	nop
 8009928:	08009b4d 	.word	0x08009b4d
 800992c:	08009b5e 	.word	0x08009b5e

08009930 <memmove>:
 8009930:	4288      	cmp	r0, r1
 8009932:	b510      	push	{r4, lr}
 8009934:	eb01 0402 	add.w	r4, r1, r2
 8009938:	d902      	bls.n	8009940 <memmove+0x10>
 800993a:	4284      	cmp	r4, r0
 800993c:	4623      	mov	r3, r4
 800993e:	d807      	bhi.n	8009950 <memmove+0x20>
 8009940:	1e43      	subs	r3, r0, #1
 8009942:	42a1      	cmp	r1, r4
 8009944:	d008      	beq.n	8009958 <memmove+0x28>
 8009946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800994a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800994e:	e7f8      	b.n	8009942 <memmove+0x12>
 8009950:	4402      	add	r2, r0
 8009952:	4601      	mov	r1, r0
 8009954:	428a      	cmp	r2, r1
 8009956:	d100      	bne.n	800995a <memmove+0x2a>
 8009958:	bd10      	pop	{r4, pc}
 800995a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800995e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009962:	e7f7      	b.n	8009954 <memmove+0x24>

08009964 <_sbrk_r>:
 8009964:	b538      	push	{r3, r4, r5, lr}
 8009966:	4d06      	ldr	r5, [pc, #24]	; (8009980 <_sbrk_r+0x1c>)
 8009968:	2300      	movs	r3, #0
 800996a:	4604      	mov	r4, r0
 800996c:	4608      	mov	r0, r1
 800996e:	602b      	str	r3, [r5, #0]
 8009970:	f7f7 fba4 	bl	80010bc <_sbrk>
 8009974:	1c43      	adds	r3, r0, #1
 8009976:	d102      	bne.n	800997e <_sbrk_r+0x1a>
 8009978:	682b      	ldr	r3, [r5, #0]
 800997a:	b103      	cbz	r3, 800997e <_sbrk_r+0x1a>
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	bd38      	pop	{r3, r4, r5, pc}
 8009980:	20001c80 	.word	0x20001c80

08009984 <_realloc_r>:
 8009984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009988:	4680      	mov	r8, r0
 800998a:	4614      	mov	r4, r2
 800998c:	460e      	mov	r6, r1
 800998e:	b921      	cbnz	r1, 800999a <_realloc_r+0x16>
 8009990:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009994:	4611      	mov	r1, r2
 8009996:	f7ff bc57 	b.w	8009248 <_malloc_r>
 800999a:	b92a      	cbnz	r2, 80099a8 <_realloc_r+0x24>
 800999c:	f7ff fbe8 	bl	8009170 <_free_r>
 80099a0:	4625      	mov	r5, r4
 80099a2:	4628      	mov	r0, r5
 80099a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a8:	f000 f81b 	bl	80099e2 <_malloc_usable_size_r>
 80099ac:	4284      	cmp	r4, r0
 80099ae:	4607      	mov	r7, r0
 80099b0:	d802      	bhi.n	80099b8 <_realloc_r+0x34>
 80099b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099b6:	d812      	bhi.n	80099de <_realloc_r+0x5a>
 80099b8:	4621      	mov	r1, r4
 80099ba:	4640      	mov	r0, r8
 80099bc:	f7ff fc44 	bl	8009248 <_malloc_r>
 80099c0:	4605      	mov	r5, r0
 80099c2:	2800      	cmp	r0, #0
 80099c4:	d0ed      	beq.n	80099a2 <_realloc_r+0x1e>
 80099c6:	42bc      	cmp	r4, r7
 80099c8:	4622      	mov	r2, r4
 80099ca:	4631      	mov	r1, r6
 80099cc:	bf28      	it	cs
 80099ce:	463a      	movcs	r2, r7
 80099d0:	f7ff fbc0 	bl	8009154 <memcpy>
 80099d4:	4631      	mov	r1, r6
 80099d6:	4640      	mov	r0, r8
 80099d8:	f7ff fbca 	bl	8009170 <_free_r>
 80099dc:	e7e1      	b.n	80099a2 <_realloc_r+0x1e>
 80099de:	4635      	mov	r5, r6
 80099e0:	e7df      	b.n	80099a2 <_realloc_r+0x1e>

080099e2 <_malloc_usable_size_r>:
 80099e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099e6:	1f18      	subs	r0, r3, #4
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	bfbc      	itt	lt
 80099ec:	580b      	ldrlt	r3, [r1, r0]
 80099ee:	18c0      	addlt	r0, r0, r3
 80099f0:	4770      	bx	lr
	...

080099f4 <_init>:
 80099f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099f6:	bf00      	nop
 80099f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099fa:	bc08      	pop	{r3}
 80099fc:	469e      	mov	lr, r3
 80099fe:	4770      	bx	lr

08009a00 <_fini>:
 8009a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a02:	bf00      	nop
 8009a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a06:	bc08      	pop	{r3}
 8009a08:	469e      	mov	lr, r3
 8009a0a:	4770      	bx	lr
