
VigiWheels_Fire_Detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005590  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005720  08005720  00015720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005800  08005800  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005800  08005800  00015800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005808  08005808  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800580c  0800580c  0001580c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005810  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  2000005c  0800586c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  0800586c  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f5e3  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ffb  00000000  00000000  0002f6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  000316b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009e8  00000000  00000000  00032390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279d3  00000000  00000000  00032d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e804  00000000  00000000  0005a74b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fabcd  00000000  00000000  00068f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003a98  00000000  00000000  00163b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001675b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005708 	.word	0x08005708

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08005708 	.word	0x08005708

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <reading_analog_sensor>:
uint16_t smoke_sensor2; // digital port D4

char msg[100];

void reading_analog_sensor(ADC_HandleTypeDef *hadc, uint16_t *sensorValue)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	6039      	str	r1, [r7, #0]
    HAL_ADC_Start(hadc);
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f001 f856 	bl	8001638 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, 100);
 800058c:	2164      	movs	r1, #100	; 0x64
 800058e:	6878      	ldr	r0, [r7, #4]
 8000590:	f001 f940 	bl	8001814 <HAL_ADC_PollForConversion>
    *sensorValue = HAL_ADC_GetValue(hadc);
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f001 fa15 	bl	80019c4 <HAL_ADC_GetValue>
 800059a:	4603      	mov	r3, r0
 800059c:	b29a      	uxth	r2, r3
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	801a      	strh	r2, [r3, #0]
    HAL_ADC_Stop(hadc);
 80005a2:	6878      	ldr	r0, [r7, #4]
 80005a4:	f001 f902 	bl	80017ac <HAL_ADC_Stop>
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <reading_digital_sensor>:

void reading_digital_sensor(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint16_t *sensorValue)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	460b      	mov	r3, r1
 80005ba:	607a      	str	r2, [r7, #4]
 80005bc:	817b      	strh	r3, [r7, #10]
    *sensorValue = !HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80005be:	897b      	ldrh	r3, [r7, #10]
 80005c0:	4619      	mov	r1, r3
 80005c2:	68f8      	ldr	r0, [r7, #12]
 80005c4:	f002 fb06 	bl	8002bd4 <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	bf0c      	ite	eq
 80005ce:	2301      	moveq	r3, #1
 80005d0:	2300      	movne	r3, #0
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	801a      	strh	r2, [r3, #0]
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <reading_sensor_values>:

void reading_sensor_values()
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
    reading_analog_sensor(&hadc1, &ir_sensor1);
 80005e8:	490e      	ldr	r1, [pc, #56]	; (8000624 <reading_sensor_values+0x40>)
 80005ea:	480f      	ldr	r0, [pc, #60]	; (8000628 <reading_sensor_values+0x44>)
 80005ec:	f7ff ffc6 	bl	800057c <reading_analog_sensor>
    reading_digital_sensor(GPIOA, GPIO_PIN_10, &ir_sensor2);
 80005f0:	4a0e      	ldr	r2, [pc, #56]	; (800062c <reading_sensor_values+0x48>)
 80005f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f7ff ffd9 	bl	80005b0 <reading_digital_sensor>
    reading_analog_sensor(&hadc1, &ir_sensor3);
 80005fe:	490c      	ldr	r1, [pc, #48]	; (8000630 <reading_sensor_values+0x4c>)
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <reading_sensor_values+0x44>)
 8000602:	f7ff ffbb 	bl	800057c <reading_analog_sensor>
    reading_digital_sensor(GPIOB, GPIO_PIN_5, &ir_sensor4);
 8000606:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <reading_sensor_values+0x50>)
 8000608:	2120      	movs	r1, #32
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <reading_sensor_values+0x54>)
 800060c:	f7ff ffd0 	bl	80005b0 <reading_digital_sensor>
    reading_analog_sensor(&hadc1, &smoke_sensor1);
 8000610:	490a      	ldr	r1, [pc, #40]	; (800063c <reading_sensor_values+0x58>)
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <reading_sensor_values+0x44>)
 8000614:	f7ff ffb2 	bl	800057c <reading_analog_sensor>
    reading_analog_sensor(&hadc1, &smoke_sensor2);
 8000618:	4909      	ldr	r1, [pc, #36]	; (8000640 <reading_sensor_values+0x5c>)
 800061a:	4803      	ldr	r0, [pc, #12]	; (8000628 <reading_sensor_values+0x44>)
 800061c:	f7ff ffae 	bl	800057c <reading_analog_sensor>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000078 	.word	0x20000078
 8000628:	200000e8 	.word	0x200000e8
 800062c:	2000007a 	.word	0x2000007a
 8000630:	2000007c 	.word	0x2000007c
 8000634:	2000007e 	.word	0x2000007e
 8000638:	48000400 	.word	0x48000400
 800063c:	20000080 	.word	0x20000080
 8000640:	20000082 	.word	0x20000082

08000644 <sending_data_uart>:

void sending_data_uart()
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
    reading_sensor_values();
 8000648:	f7ff ffcc 	bl	80005e4 <reading_sensor_values>

    sprintf(msg, "#IR_SENSOR1=%hu|IR_SENSOR2=%u|IR_SENSOR3=4095|IR_SENSOR4=0|SMOKE_SENSOR1=4095|SMOKE_SENSOR2=4095\r\n", ir_sensor1, ir_sensor2);
 800064c:	4b0b      	ldr	r3, [pc, #44]	; (800067c <sending_data_uart+0x38>)
 800064e:	881b      	ldrh	r3, [r3, #0]
 8000650:	461a      	mov	r2, r3
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <sending_data_uart+0x3c>)
 8000654:	881b      	ldrh	r3, [r3, #0]
 8000656:	490b      	ldr	r1, [pc, #44]	; (8000684 <sending_data_uart+0x40>)
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <sending_data_uart+0x44>)
 800065a:	f004 fbb1 	bl	8004dc0 <siprintf>

    HAL_UART_Transmit(&huart2, (const uint8_t *)msg, strlen(msg), 100);
 800065e:	480a      	ldr	r0, [pc, #40]	; (8000688 <sending_data_uart+0x44>)
 8000660:	f7ff fdb6 	bl	80001d0 <strlen>
 8000664:	4603      	mov	r3, r0
 8000666:	b29a      	uxth	r2, r3
 8000668:	2364      	movs	r3, #100	; 0x64
 800066a:	4907      	ldr	r1, [pc, #28]	; (8000688 <sending_data_uart+0x44>)
 800066c:	4807      	ldr	r0, [pc, #28]	; (800068c <sending_data_uart+0x48>)
 800066e:	f003 fe4f 	bl	8004310 <HAL_UART_Transmit>

    HAL_Delay(250);
 8000672:	20fa      	movs	r0, #250	; 0xfa
 8000674:	f000 fc3a 	bl	8000eec <HAL_Delay>
}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000078 	.word	0x20000078
 8000680:	2000007a 	.word	0x2000007a
 8000684:	08005720 	.word	0x08005720
 8000688:	20000084 	.word	0x20000084
 800068c:	200001b0 	.word	0x200001b0

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000694:	f000 fbae 	bl	8000df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000698:	f000 f80d 	bl	80006b6 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800069c:	f000 f85c 	bl	8000758 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 f990 	bl	80009c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a4:	f000 f95e 	bl	8000964 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80006a8:	f000 f882 	bl	80007b0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80006ac:	f000 f8f6 	bl	800089c <MX_ADC2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sending_data_uart();
 80006b0:	f7ff ffc8 	bl	8000644 <sending_data_uart>
 80006b4:	e7fc      	b.n	80006b0 <main+0x20>

080006b6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b6:	b580      	push	{r7, lr}
 80006b8:	b096      	sub	sp, #88	; 0x58
 80006ba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006bc:	f107 0314 	add.w	r3, r7, #20
 80006c0:	2244      	movs	r2, #68	; 0x44
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f004 fb9b 	bl	8004e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ca:	463b      	mov	r3, r7
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006dc:	f002 fab8 	bl	8002c50 <HAL_PWREx_ControlVoltageScaling>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006e6:	f000 f9e3 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ea:	2302      	movs	r3, #2
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f4:	2310      	movs	r3, #16
 80006f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f8:	2302      	movs	r3, #2
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000700:	2301      	movs	r3, #1
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000704:	230a      	movs	r3, #10
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000708:	2307      	movs	r3, #7
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4618      	mov	r0, r3
 800071a:	f002 faef 	bl	8002cfc <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000724:	f000 f9c4 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2303      	movs	r3, #3
 800072e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	2104      	movs	r1, #4
 8000740:	4618      	mov	r0, r3
 8000742:	f002 feb7 	bl	80034b4 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800074c:	f000 f9b0 	bl	8000ab0 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	3758      	adds	r7, #88	; 0x58
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b0a2      	sub	sp, #136	; 0x88
 800075c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2288      	movs	r2, #136	; 0x88
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f004 fb4b 	bl	8004e00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800076a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800076e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000770:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000774:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000776:	2302      	movs	r3, #2
 8000778:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800077a:	2301      	movs	r3, #1
 800077c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800077e:	2308      	movs	r3, #8
 8000780:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000782:	2307      	movs	r3, #7
 8000784:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800078a:	2302      	movs	r3, #2
 800078c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800078e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000792:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000794:	463b      	mov	r3, r7
 8000796:	4618      	mov	r0, r3
 8000798:	f003 f8b0 	bl	80038fc <HAL_RCCEx_PeriphCLKConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 80007a2:	f000 f985 	bl	8000ab0 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3788      	adds	r7, #136	; 0x88
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
 80007d0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d2:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <MX_ADC1_Init+0xe0>)
 80007d4:	4a2f      	ldr	r2, [pc, #188]	; (8000894 <MX_ADC1_Init+0xe4>)
 80007d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007d8:	4b2d      	ldr	r3, [pc, #180]	; (8000890 <MX_ADC1_Init+0xe0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007de:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_ADC1_Init+0xe0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e4:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <MX_ADC1_Init+0xe0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_ADC1_Init+0xe0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_ADC1_Init+0xe0>)
 80007f2:	2204      	movs	r2, #4
 80007f4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_ADC1_Init+0xe0>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007fc:	4b24      	ldr	r3, [pc, #144]	; (8000890 <MX_ADC1_Init+0xe0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000802:	4b23      	ldr	r3, [pc, #140]	; (8000890 <MX_ADC1_Init+0xe0>)
 8000804:	2201      	movs	r2, #1
 8000806:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <MX_ADC1_Init+0xe0>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_ADC1_Init+0xe0>)
 8000812:	2200      	movs	r2, #0
 8000814:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000816:	4b1e      	ldr	r3, [pc, #120]	; (8000890 <MX_ADC1_Init+0xe0>)
 8000818:	2200      	movs	r2, #0
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_ADC1_Init+0xe0>)
 800081e:	2200      	movs	r2, #0
 8000820:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_ADC1_Init+0xe0>)
 8000826:	2200      	movs	r2, #0
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <MX_ADC1_Init+0xe0>)
 800082c:	2200      	movs	r2, #0
 800082e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000832:	4817      	ldr	r0, [pc, #92]	; (8000890 <MX_ADC1_Init+0xe0>)
 8000834:	f000 fdb0 	bl	8001398 <HAL_ADC_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800083e:	f000 f937 	bl	8000ab0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4810      	ldr	r0, [pc, #64]	; (8000890 <MX_ADC1_Init+0xe0>)
 800084e:	f001 fe81 	bl	8002554 <HAL_ADCEx_MultiModeConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000858:	f000 f92a 	bl	8000ab0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_ADC1_Init+0xe8>)
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000860:	2306      	movs	r3, #6
 8000862:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000868:	237f      	movs	r3, #127	; 0x7f
 800086a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086c:	2304      	movs	r3, #4
 800086e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	; (8000890 <MX_ADC1_Init+0xe0>)
 800087a:	f001 f8b1 	bl	80019e0 <HAL_ADC_ConfigChannel>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000884:	f000 f914 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	; 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	200000e8 	.word	0x200000e8
 8000894:	50040000 	.word	0x50040000
 8000898:	14f00020 	.word	0x14f00020

0800089c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008a2:	463b      	mov	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	601a      	str	r2, [r3, #0]
 80008a8:	605a      	str	r2, [r3, #4]
 80008aa:	609a      	str	r2, [r3, #8]
 80008ac:	60da      	str	r2, [r3, #12]
 80008ae:	611a      	str	r2, [r3, #16]
 80008b0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008b2:	4b29      	ldr	r3, [pc, #164]	; (8000958 <MX_ADC2_Init+0xbc>)
 80008b4:	4a29      	ldr	r2, [pc, #164]	; (800095c <MX_ADC2_Init+0xc0>)
 80008b6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008b8:	4b27      	ldr	r3, [pc, #156]	; (8000958 <MX_ADC2_Init+0xbc>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008be:	4b26      	ldr	r3, [pc, #152]	; (8000958 <MX_ADC2_Init+0xbc>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c4:	4b24      	ldr	r3, [pc, #144]	; (8000958 <MX_ADC2_Init+0xbc>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ca:	4b23      	ldr	r3, [pc, #140]	; (8000958 <MX_ADC2_Init+0xbc>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d0:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_ADC2_Init+0xbc>)
 80008d2:	2204      	movs	r2, #4
 80008d4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008d6:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_ADC2_Init+0xbc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_ADC2_Init+0xbc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_ADC2_Init+0xbc>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_ADC2_Init+0xbc>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_ADC2_Init+0xbc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f6:	4b18      	ldr	r3, [pc, #96]	; (8000958 <MX_ADC2_Init+0xbc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008fc:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_ADC2_Init+0xbc>)
 80008fe:	2200      	movs	r2, #0
 8000900:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_ADC2_Init+0xbc>)
 8000906:	2200      	movs	r2, #0
 8000908:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_ADC2_Init+0xbc>)
 800090c:	2200      	movs	r2, #0
 800090e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000912:	4811      	ldr	r0, [pc, #68]	; (8000958 <MX_ADC2_Init+0xbc>)
 8000914:	f000 fd40 	bl	8001398 <HAL_ADC_Init>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800091e:	f000 f8c7 	bl	8000ab0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_ADC2_Init+0xc4>)
 8000924:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000926:	2306      	movs	r3, #6
 8000928:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800092e:	237f      	movs	r3, #127	; 0x7f
 8000930:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000932:	2304      	movs	r3, #4
 8000934:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	4619      	mov	r1, r3
 800093e:	4806      	ldr	r0, [pc, #24]	; (8000958 <MX_ADC2_Init+0xbc>)
 8000940:	f001 f84e 	bl	80019e0 <HAL_ADC_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800094a:	f000 f8b1 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	2000014c 	.word	0x2000014c
 800095c:	50040100 	.word	0x50040100
 8000960:	04300002 	.word	0x04300002

08000964 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_USART2_UART_Init+0x58>)
 800096a:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <MX_USART2_UART_Init+0x5c>)
 800096c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_USART2_UART_Init+0x58>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_USART2_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_USART2_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_USART2_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_USART2_UART_Init+0x58>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_USART2_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_USART2_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_USART2_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_USART2_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_USART2_UART_Init+0x58>)
 80009a8:	f003 fc64 	bl	8004274 <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009b2:	f000 f87d 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200001b0 	.word	0x200001b0
 80009c0:	40004400 	.word	0x40004400

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 030c 	add.w	r3, r7, #12
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	4b32      	ldr	r3, [pc, #200]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	4a31      	ldr	r2, [pc, #196]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e6:	4b2f      	ldr	r3, [pc, #188]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	60bb      	str	r3, [r7, #8]
 80009f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b2c      	ldr	r3, [pc, #176]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a2b      	ldr	r2, [pc, #172]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b29      	ldr	r3, [pc, #164]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b26      	ldr	r3, [pc, #152]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a25      	ldr	r2, [pc, #148]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <MX_GPIO_Init+0xe0>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2120      	movs	r1, #32
 8000a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2a:	f002 f8eb 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a34:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	4619      	mov	r1, r3
 8000a44:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <MX_GPIO_Init+0xe4>)
 8000a46:	f001 ff1b 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a4a:	2320      	movs	r3, #32
 8000a4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	4619      	mov	r1, r3
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f001 ff0c 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a80:	f001 fefe 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a84:	2308      	movs	r3, #8
 8000a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4619      	mov	r1, r3
 8000a96:	4805      	ldr	r0, [pc, #20]	; (8000aac <MX_GPIO_Init+0xe8>)
 8000a98:	f001 fef2 	bl	8002880 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a9c:	bf00      	nop
 8000a9e:	3720      	adds	r7, #32
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	48000800 	.word	0x48000800
 8000aac:	48000400 	.word	0x48000400

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_MspInit+0x44>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x44>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08c      	sub	sp, #48	; 0x30
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 031c 	add.w	r3, r7, #28
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a33      	ldr	r2, [pc, #204]	; (8000bf0 <HAL_ADC_MspInit+0xec>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d12e      	bne.n	8000b84 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000b26:	4b33      	ldr	r3, [pc, #204]	; (8000bf4 <HAL_ADC_MspInit+0xf0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	4a31      	ldr	r2, [pc, #196]	; (8000bf4 <HAL_ADC_MspInit+0xf0>)
 8000b2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000b30:	4b30      	ldr	r3, [pc, #192]	; (8000bf4 <HAL_ADC_MspInit+0xf0>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d10b      	bne.n	8000b50 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000b38:	4b2f      	ldr	r3, [pc, #188]	; (8000bf8 <HAL_ADC_MspInit+0xf4>)
 8000b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b3c:	4a2e      	ldr	r2, [pc, #184]	; (8000bf8 <HAL_ADC_MspInit+0xf4>)
 8000b3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b44:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <HAL_ADC_MspInit+0xf4>)
 8000b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b4c:	61bb      	str	r3, [r7, #24]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b50:	4b29      	ldr	r3, [pc, #164]	; (8000bf8 <HAL_ADC_MspInit+0xf4>)
 8000b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b54:	4a28      	ldr	r2, [pc, #160]	; (8000bf8 <HAL_ADC_MspInit+0xf4>)
 8000b56:	f043 0301 	orr.w	r3, r3, #1
 8000b5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b5c:	4b26      	ldr	r3, [pc, #152]	; (8000bf8 <HAL_ADC_MspInit+0xf4>)
 8000b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b60:	f003 0301 	and.w	r3, r3, #1
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b6c:	230b      	movs	r3, #11
 8000b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b70:	2300      	movs	r3, #0
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 031c 	add.w	r3, r7, #28
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7e:	f001 fe7f 	bl	8002880 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000b82:	e031      	b.n	8000be8 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a1c      	ldr	r2, [pc, #112]	; (8000bfc <HAL_ADC_MspInit+0xf8>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d12c      	bne.n	8000be8 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <HAL_ADC_MspInit+0xf0>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	3301      	adds	r3, #1
 8000b94:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <HAL_ADC_MspInit+0xf0>)
 8000b96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_ADC_MspInit+0xf0>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d10b      	bne.n	8000bb8 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <HAL_ADC_MspInit+0xf4>)
 8000ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba4:	4a14      	ldr	r2, [pc, #80]	; (8000bf8 <HAL_ADC_MspInit+0xf4>)
 8000ba6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_ADC_MspInit+0xf4>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb8:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_ADC_MspInit+0xf4>)
 8000bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	; (8000bf8 <HAL_ADC_MspInit+0xf4>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	; (8000bf8 <HAL_ADC_MspInit+0xf4>)
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc8:	f003 0304 	and.w	r3, r3, #4
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bd4:	230b      	movs	r3, #11
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bdc:	f107 031c 	add.w	r3, r7, #28
 8000be0:	4619      	mov	r1, r3
 8000be2:	4807      	ldr	r0, [pc, #28]	; (8000c00 <HAL_ADC_MspInit+0xfc>)
 8000be4:	f001 fe4c 	bl	8002880 <HAL_GPIO_Init>
}
 8000be8:	bf00      	nop
 8000bea:	3730      	adds	r7, #48	; 0x30
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	50040000 	.word	0x50040000
 8000bf4:	20000238 	.word	0x20000238
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	50040100 	.word	0x50040100
 8000c00:	48000800 	.word	0x48000800

08000c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b0ac      	sub	sp, #176	; 0xb0
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
 8000c16:	609a      	str	r2, [r3, #8]
 8000c18:	60da      	str	r2, [r3, #12]
 8000c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2288      	movs	r2, #136	; 0x88
 8000c22:	2100      	movs	r1, #0
 8000c24:	4618      	mov	r0, r3
 8000c26:	f004 f8eb 	bl	8004e00 <memset>
  if(huart->Instance==USART2)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a21      	ldr	r2, [pc, #132]	; (8000cb4 <HAL_UART_MspInit+0xb0>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d13b      	bne.n	8000cac <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 fe5b 	bl	80038fc <HAL_RCCEx_PeriphCLKConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c4c:	f7ff ff30 	bl	8000ab0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c50:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <HAL_UART_MspInit+0xb4>)
 8000c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c54:	4a18      	ldr	r2, [pc, #96]	; (8000cb8 <HAL_UART_MspInit+0xb4>)
 8000c56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c5c:	4b16      	ldr	r3, [pc, #88]	; (8000cb8 <HAL_UART_MspInit+0xb4>)
 8000c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <HAL_UART_MspInit+0xb4>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6c:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <HAL_UART_MspInit+0xb4>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c74:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_UART_MspInit+0xb4>)
 8000c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c80:	230c      	movs	r3, #12
 8000c82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c98:	2307      	movs	r3, #7
 8000c9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ca8:	f001 fdea 	bl	8002880 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	37b0      	adds	r7, #176	; 0xb0
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40004400 	.word	0x40004400
 8000cb8:	40021000 	.word	0x40021000

08000cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <NMI_Handler+0x4>

08000cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cc6:	e7fe      	b.n	8000cc6 <HardFault_Handler+0x4>

08000cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <MemManage_Handler+0x4>

08000cce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <BusFault_Handler+0x4>

08000cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <UsageFault_Handler+0x4>

08000cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d08:	f000 f8d0 	bl	8000eac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d18:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <_sbrk+0x5c>)
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <_sbrk+0x60>)
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d24:	4b13      	ldr	r3, [pc, #76]	; (8000d74 <_sbrk+0x64>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <_sbrk+0x64>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <_sbrk+0x68>)
 8000d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d207      	bcs.n	8000d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d40:	f004 f866 	bl	8004e10 <__errno>
 8000d44:	4603      	mov	r3, r0
 8000d46:	220c      	movs	r2, #12
 8000d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d4e:	e009      	b.n	8000d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <_sbrk+0x64>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <_sbrk+0x64>)
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	4a05      	ldr	r2, [pc, #20]	; (8000d74 <_sbrk+0x64>)
 8000d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3718      	adds	r7, #24
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	20018000 	.word	0x20018000
 8000d70:	00000400 	.word	0x00000400
 8000d74:	2000023c 	.word	0x2000023c
 8000d78:	20000390 	.word	0x20000390

08000d7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <SystemInit+0x20>)
 8000d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d86:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <SystemInit+0x20>)
 8000d88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000da0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000da4:	f7ff ffea 	bl	8000d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000da8:	480c      	ldr	r0, [pc, #48]	; (8000ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8000daa:	490d      	ldr	r1, [pc, #52]	; (8000de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <LoopForever+0xe>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db0:	e002      	b.n	8000db8 <LoopCopyDataInit>

08000db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000db6:	3304      	adds	r3, #4

08000db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dbc:	d3f9      	bcc.n	8000db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dc0:	4c0a      	ldr	r4, [pc, #40]	; (8000dec <LoopForever+0x16>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc4:	e001      	b.n	8000dca <LoopFillZerobss>

08000dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dc8:	3204      	adds	r2, #4

08000dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dcc:	d3fb      	bcc.n	8000dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dce:	f004 f825 	bl	8004e1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dd2:	f7ff fc5d 	bl	8000690 <main>

08000dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000dd6:	e7fe      	b.n	8000dd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000de4:	08005810 	.word	0x08005810
  ldr r2, =_sbss
 8000de8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000dec:	2000038c 	.word	0x2000038c

08000df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000df0:	e7fe      	b.n	8000df0 <ADC1_2_IRQHandler>
	...

08000df4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <HAL_Init+0x3c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <HAL_Init+0x3c>)
 8000e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0a:	2003      	movs	r0, #3
 8000e0c:	f001 fd04 	bl	8002818 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e10:	2000      	movs	r0, #0
 8000e12:	f000 f80f 	bl	8000e34 <HAL_InitTick>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d002      	beq.n	8000e22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	71fb      	strb	r3, [r7, #7]
 8000e20:	e001      	b.n	8000e26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e22:	f7ff fe4b 	bl	8000abc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e26:	79fb      	ldrb	r3, [r7, #7]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40022000 	.word	0x40022000

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e40:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <HAL_InitTick+0x6c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d023      	beq.n	8000e90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <HAL_InitTick+0x70>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <HAL_InitTick+0x6c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 fd01 	bl	8002866 <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d10f      	bne.n	8000e8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2b0f      	cmp	r3, #15
 8000e6e:	d809      	bhi.n	8000e84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e70:	2200      	movs	r2, #0
 8000e72:	6879      	ldr	r1, [r7, #4]
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e78:	f001 fcd9 	bl	800282e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <HAL_InitTick+0x74>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	e007      	b.n	8000e94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
 8000e88:	e004      	b.n	8000e94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e001      	b.n	8000e94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000000 	.word	0x20000000
 8000ea8:	20000004 	.word	0x20000004

08000eac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x20>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_IncTick+0x24>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4413      	add	r3, r2
 8000ebc:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <HAL_IncTick+0x24>)
 8000ebe:	6013      	str	r3, [r2, #0]
}
 8000ec0:	bf00      	nop
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000240 	.word	0x20000240

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <HAL_GetTick+0x14>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	20000240 	.word	0x20000240

08000eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ef4:	f7ff ffee 	bl	8000ed4 <HAL_GetTick>
 8000ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f04:	d005      	beq.n	8000f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f06:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <HAL_Delay+0x44>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f12:	bf00      	nop
 8000f14:	f7ff ffde 	bl	8000ed4 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68bb      	ldr	r3, [r7, #8]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8f7      	bhi.n	8000f14 <HAL_Delay+0x28>
  {
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000008 	.word	0x20000008

08000f34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	609a      	str	r2, [r3, #8]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3360      	adds	r3, #96	; 0x60
 8000fae:	461a      	mov	r2, r3
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <LL_ADC_SetOffset+0x44>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000fd4:	bf00      	nop
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr
 8000fe0:	03fff000 	.word	0x03fff000

08000fe4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3360      	adds	r3, #96	; 0x60
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	4413      	add	r3, r2
 8000ffa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001010:	b480      	push	{r7}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	3360      	adds	r3, #96	; 0x60
 8001020:	461a      	mov	r2, r3
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	431a      	orrs	r2, r3
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800103a:	bf00      	nop
 800103c:	371c      	adds	r7, #28
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	3330      	adds	r3, #48	; 0x30
 800107c:	461a      	mov	r2, r3
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	0a1b      	lsrs	r3, r3, #8
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	f003 030c 	and.w	r3, r3, #12
 8001088:	4413      	add	r3, r2
 800108a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	f003 031f 	and.w	r3, r3, #31
 8001096:	211f      	movs	r1, #31
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	401a      	ands	r2, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	0e9b      	lsrs	r3, r3, #26
 80010a4:	f003 011f 	and.w	r1, r3, #31
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	f003 031f 	and.w	r3, r3, #31
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	431a      	orrs	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80010b8:	bf00      	nop
 80010ba:	371c      	adds	r7, #28
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	3314      	adds	r3, #20
 80010d4:	461a      	mov	r2, r3
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	0e5b      	lsrs	r3, r3, #25
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	4413      	add	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	0d1b      	lsrs	r3, r3, #20
 80010ec:	f003 031f 	and.w	r3, r3, #31
 80010f0:	2107      	movs	r1, #7
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	401a      	ands	r2, r3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	0d1b      	lsrs	r3, r3, #20
 80010fe:	f003 031f 	and.w	r3, r3, #31
 8001102:	6879      	ldr	r1, [r7, #4]
 8001104:	fa01 f303 	lsl.w	r3, r1, r3
 8001108:	431a      	orrs	r2, r3
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800110e:	bf00      	nop
 8001110:	371c      	adds	r7, #28
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
	...

0800111c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001134:	43db      	mvns	r3, r3
 8001136:	401a      	ands	r2, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0318 	and.w	r3, r3, #24
 800113e:	4908      	ldr	r1, [pc, #32]	; (8001160 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001140:	40d9      	lsrs	r1, r3
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	400b      	ands	r3, r1
 8001146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800114a:	431a      	orrs	r2, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	0007ffff 	.word	0x0007ffff

08001164 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	f003 031f 	and.w	r3, r3, #31
}
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	6093      	str	r3, [r2, #8]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011d4:	d101      	bne.n	80011da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80011f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011fc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001220:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001224:	d101      	bne.n	800122a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001226:	2301      	movs	r3, #1
 8001228:	e000      	b.n	800122c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001248:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800124c:	f043 0201 	orr.w	r2, r3, #1
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001274:	f043 0202 	orr.w	r2, r3, #2
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b01      	cmp	r3, #1
 800129a:	d101      	bne.n	80012a0 <LL_ADC_IsEnabled+0x18>
 800129c:	2301      	movs	r3, #1
 800129e:	e000      	b.n	80012a2 <LL_ADC_IsEnabled+0x1a>
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr

080012ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d101      	bne.n	80012c6 <LL_ADC_IsDisableOngoing+0x18>
 80012c2:	2301      	movs	r3, #1
 80012c4:	e000      	b.n	80012c8 <LL_ADC_IsDisableOngoing+0x1a>
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr

080012d4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012e8:	f043 0204 	orr.w	r2, r3, #4
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800130c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001310:	f043 0210 	orr.w	r2, r3, #16
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b04      	cmp	r3, #4
 8001336:	d101      	bne.n	800133c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	370c      	adds	r7, #12
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr

0800134a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800135a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800135e:	f043 0220 	orr.w	r2, r3, #32
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b08      	cmp	r3, #8
 8001384:	d101      	bne.n	800138a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e130      	b.n	8001614 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	691b      	ldr	r3, [r3, #16]
 80013b6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d109      	bne.n	80013d4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff fb9f 	bl	8000b04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2200      	movs	r2, #0
 80013ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fef1 	bl	80011c0 <LL_ADC_IsDeepPowerDownEnabled>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d004      	beq.n	80013ee <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fed7 	bl	800119c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff0c 	bl	8001210 <LL_ADC_IsInternalRegulatorEnabled>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d115      	bne.n	800142a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fef0 	bl	80011e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001408:	4b84      	ldr	r3, [pc, #528]	; (800161c <HAL_ADC_Init+0x284>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	099b      	lsrs	r3, r3, #6
 800140e:	4a84      	ldr	r2, [pc, #528]	; (8001620 <HAL_ADC_Init+0x288>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	099b      	lsrs	r3, r3, #6
 8001416:	3301      	adds	r3, #1
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800141c:	e002      	b.n	8001424 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3b01      	subs	r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f9      	bne.n	800141e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff feee 	bl	8001210 <LL_ADC_IsInternalRegulatorEnabled>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10d      	bne.n	8001456 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800143e:	f043 0210 	orr.w	r2, r3, #16
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	f043 0201 	orr.w	r2, r3, #1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff ff62 	bl	8001324 <LL_ADC_REG_IsConversionOngoing>
 8001460:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	2b00      	cmp	r3, #0
 800146c:	f040 80c9 	bne.w	8001602 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	2b00      	cmp	r3, #0
 8001474:	f040 80c5 	bne.w	8001602 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001480:	f043 0202 	orr.w	r2, r3, #2
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fefb 	bl	8001288 <LL_ADC_IsEnabled>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d115      	bne.n	80014c4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001498:	4862      	ldr	r0, [pc, #392]	; (8001624 <HAL_ADC_Init+0x28c>)
 800149a:	f7ff fef5 	bl	8001288 <LL_ADC_IsEnabled>
 800149e:	4604      	mov	r4, r0
 80014a0:	4861      	ldr	r0, [pc, #388]	; (8001628 <HAL_ADC_Init+0x290>)
 80014a2:	f7ff fef1 	bl	8001288 <LL_ADC_IsEnabled>
 80014a6:	4603      	mov	r3, r0
 80014a8:	431c      	orrs	r4, r3
 80014aa:	4860      	ldr	r0, [pc, #384]	; (800162c <HAL_ADC_Init+0x294>)
 80014ac:	f7ff feec 	bl	8001288 <LL_ADC_IsEnabled>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4323      	orrs	r3, r4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d105      	bne.n	80014c4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4619      	mov	r1, r3
 80014be:	485c      	ldr	r0, [pc, #368]	; (8001630 <HAL_ADC_Init+0x298>)
 80014c0:	f7ff fd38 	bl	8000f34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	7e5b      	ldrb	r3, [r3, #25]
 80014c8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014ce:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80014d4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80014da:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d106      	bne.n	8001500 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f6:	3b01      	subs	r3, #1
 80014f8:	045b      	lsls	r3, r3, #17
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	2b00      	cmp	r3, #0
 8001506:	d009      	beq.n	800151c <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001514:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68da      	ldr	r2, [r3, #12]
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <HAL_ADC_Init+0x29c>)
 8001524:	4013      	ands	r3, r2
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	69b9      	ldr	r1, [r7, #24]
 800152c:	430b      	orrs	r3, r1
 800152e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff1c 	bl	8001372 <LL_ADC_INJ_IsConversionOngoing>
 800153a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d13d      	bne.n	80015be <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d13a      	bne.n	80015be <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800154c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001554:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001564:	f023 0302 	bic.w	r3, r3, #2
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	69b9      	ldr	r1, [r7, #24]
 800156e:	430b      	orrs	r3, r1
 8001570:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001578:	2b01      	cmp	r3, #1
 800157a:	d118      	bne.n	80015ae <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001586:	f023 0304 	bic.w	r3, r3, #4
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001592:	4311      	orrs	r1, r2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001598:	4311      	orrs	r1, r2
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800159e:	430a      	orrs	r2, r1
 80015a0:	431a      	orrs	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0201 	orr.w	r2, r2, #1
 80015aa:	611a      	str	r2, [r3, #16]
 80015ac:	e007      	b.n	80015be <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	691a      	ldr	r2, [r3, #16]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0201 	bic.w	r2, r2, #1
 80015bc:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d10c      	bne.n	80015e0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015cc:	f023 010f 	bic.w	r1, r3, #15
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	1e5a      	subs	r2, r3, #1
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	430a      	orrs	r2, r1
 80015dc:	631a      	str	r2, [r3, #48]	; 0x30
 80015de:	e007      	b.n	80015f0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 020f 	bic.w	r2, r2, #15
 80015ee:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f4:	f023 0303 	bic.w	r3, r3, #3
 80015f8:	f043 0201 	orr.w	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	655a      	str	r2, [r3, #84]	; 0x54
 8001600:	e007      	b.n	8001612 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001606:	f043 0210 	orr.w	r2, r3, #16
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001612:	7ffb      	ldrb	r3, [r7, #31]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3724      	adds	r7, #36	; 0x24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd90      	pop	{r4, r7, pc}
 800161c:	20000000 	.word	0x20000000
 8001620:	053e2d63 	.word	0x053e2d63
 8001624:	50040000 	.word	0x50040000
 8001628:	50040100 	.word	0x50040100
 800162c:	50040200 	.word	0x50040200
 8001630:	50040300 	.word	0x50040300
 8001634:	fff0c007 	.word	0xfff0c007

08001638 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001640:	4857      	ldr	r0, [pc, #348]	; (80017a0 <HAL_ADC_Start+0x168>)
 8001642:	f7ff fd8f 	bl	8001164 <LL_ADC_GetMultimode>
 8001646:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fe69 	bl	8001324 <LL_ADC_REG_IsConversionOngoing>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	f040 809c 	bne.w	8001792 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001660:	2b01      	cmp	r3, #1
 8001662:	d101      	bne.n	8001668 <HAL_ADC_Start+0x30>
 8001664:	2302      	movs	r3, #2
 8001666:	e097      	b.n	8001798 <HAL_ADC_Start+0x160>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2201      	movs	r2, #1
 800166c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f000 fe63 	bl	800233c <ADC_Enable>
 8001676:	4603      	mov	r3, r0
 8001678:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800167a:	7dfb      	ldrb	r3, [r7, #23]
 800167c:	2b00      	cmp	r3, #0
 800167e:	f040 8083 	bne.w	8001788 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001686:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a42      	ldr	r2, [pc, #264]	; (80017a4 <HAL_ADC_Start+0x16c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d002      	beq.n	80016a6 <HAL_ADC_Start+0x6e>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	e000      	b.n	80016a8 <HAL_ADC_Start+0x70>
 80016a6:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <HAL_ADC_Start+0x170>)
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d002      	beq.n	80016b6 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d105      	bne.n	80016c2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ce:	d106      	bne.n	80016de <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	f023 0206 	bic.w	r2, r3, #6
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	659a      	str	r2, [r3, #88]	; 0x58
 80016dc:	e002      	b.n	80016e4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	221c      	movs	r2, #28
 80016ea:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a2a      	ldr	r2, [pc, #168]	; (80017a4 <HAL_ADC_Start+0x16c>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d002      	beq.n	8001704 <HAL_ADC_Start+0xcc>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	e000      	b.n	8001706 <HAL_ADC_Start+0xce>
 8001704:	4b28      	ldr	r3, [pc, #160]	; (80017a8 <HAL_ADC_Start+0x170>)
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	4293      	cmp	r3, r2
 800170c:	d008      	beq.n	8001720 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	2b05      	cmp	r3, #5
 8001718:	d002      	beq.n	8001720 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	2b09      	cmp	r3, #9
 800171e:	d114      	bne.n	800174a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d007      	beq.n	800173e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001732:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001736:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fdc6 	bl	80012d4 <LL_ADC_REG_StartConversion>
 8001748:	e025      	b.n	8001796 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <HAL_ADC_Start+0x16c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d002      	beq.n	8001766 <HAL_ADC_Start+0x12e>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	e000      	b.n	8001768 <HAL_ADC_Start+0x130>
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <HAL_ADC_Start+0x170>)
 8001768:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00f      	beq.n	8001796 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800177e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	655a      	str	r2, [r3, #84]	; 0x54
 8001786:	e006      	b.n	8001796 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001790:	e001      	b.n	8001796 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001792:	2302      	movs	r3, #2
 8001794:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001796:	7dfb      	ldrb	r3, [r7, #23]
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	50040300 	.word	0x50040300
 80017a4:	50040100 	.word	0x50040100
 80017a8:	50040000 	.word	0x50040000

080017ac <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d101      	bne.n	80017c2 <HAL_ADC_Stop+0x16>
 80017be:	2302      	movs	r3, #2
 80017c0:	e023      	b.n	800180a <HAL_ADC_Stop+0x5e>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2201      	movs	r2, #1
 80017c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80017ca:	2103      	movs	r1, #3
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f000 fcf9 	bl	80021c4 <ADC_ConversionStop>
 80017d2:	4603      	mov	r3, r0
 80017d4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d111      	bne.n	8001800 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f000 fe33 	bl	8002448 <ADC_Disable>
 80017e2:	4603      	mov	r3, r0
 80017e4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d109      	bne.n	8001800 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017f4:	f023 0301 	bic.w	r3, r3, #1
 80017f8:	f043 0201 	orr.w	r2, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001808:	7bfb      	ldrb	r3, [r7, #15]
}
 800180a:	4618      	mov	r0, r3
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
	...

08001814 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b088      	sub	sp, #32
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800181e:	4866      	ldr	r0, [pc, #408]	; (80019b8 <HAL_ADC_PollForConversion+0x1a4>)
 8001820:	f7ff fca0 	bl	8001164 <LL_ADC_GetMultimode>
 8001824:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	2b08      	cmp	r3, #8
 800182c:	d102      	bne.n	8001834 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800182e:	2308      	movs	r3, #8
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	e02a      	b.n	800188a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d005      	beq.n	8001846 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d002      	beq.n	8001846 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	2b09      	cmp	r3, #9
 8001844:	d111      	bne.n	800186a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b00      	cmp	r3, #0
 8001852:	d007      	beq.n	8001864 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001858:	f043 0220 	orr.w	r2, r3, #32
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0a4      	b.n	80019ae <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001864:	2304      	movs	r3, #4
 8001866:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001868:	e00f      	b.n	800188a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800186a:	4853      	ldr	r0, [pc, #332]	; (80019b8 <HAL_ADC_PollForConversion+0x1a4>)
 800186c:	f7ff fc88 	bl	8001180 <LL_ADC_GetMultiDMATransfer>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d007      	beq.n	8001886 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187a:	f043 0220 	orr.w	r2, r3, #32
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e093      	b.n	80019ae <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001886:	2304      	movs	r3, #4
 8001888:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800188a:	f7ff fb23 	bl	8000ed4 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001890:	e021      	b.n	80018d6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001898:	d01d      	beq.n	80018d6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800189a:	f7ff fb1b 	bl	8000ed4 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d302      	bcc.n	80018b0 <HAL_ADC_PollForConversion+0x9c>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d112      	bne.n	80018d6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	4013      	ands	r3, r2
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10b      	bne.n	80018d6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c2:	f043 0204 	orr.w	r2, r3, #4
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e06b      	b.n	80019ae <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	4013      	ands	r3, r2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0d6      	beq.n	8001892 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff fba6 	bl	8001046 <LL_ADC_REG_IsTriggerSourceSWStart>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d01c      	beq.n	800193a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7e5b      	ldrb	r3, [r3, #25]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d118      	bne.n	800193a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	2b08      	cmp	r3, #8
 8001914:	d111      	bne.n	800193a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800191a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001926:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d105      	bne.n	800193a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001932:	f043 0201 	orr.w	r2, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a1f      	ldr	r2, [pc, #124]	; (80019bc <HAL_ADC_PollForConversion+0x1a8>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d002      	beq.n	800194a <HAL_ADC_PollForConversion+0x136>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	e000      	b.n	800194c <HAL_ADC_PollForConversion+0x138>
 800194a:	4b1d      	ldr	r3, [pc, #116]	; (80019c0 <HAL_ADC_PollForConversion+0x1ac>)
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	4293      	cmp	r3, r2
 8001952:	d008      	beq.n	8001966 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	2b05      	cmp	r3, #5
 800195e:	d002      	beq.n	8001966 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2b09      	cmp	r3, #9
 8001964:	d104      	bne.n	8001970 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	e00c      	b.n	800198a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a11      	ldr	r2, [pc, #68]	; (80019bc <HAL_ADC_PollForConversion+0x1a8>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d002      	beq.n	8001980 <HAL_ADC_PollForConversion+0x16c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	e000      	b.n	8001982 <HAL_ADC_PollForConversion+0x16e>
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_ADC_PollForConversion+0x1ac>)
 8001982:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	2b08      	cmp	r3, #8
 800198e:	d104      	bne.n	800199a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2208      	movs	r2, #8
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	e008      	b.n	80019ac <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d103      	bne.n	80019ac <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	220c      	movs	r2, #12
 80019aa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	50040300 	.word	0x50040300
 80019bc:	50040100 	.word	0x50040100
 80019c0:	50040000 	.word	0x50040000

080019c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b0b6      	sub	sp, #216	; 0xd8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x22>
 80019fe:	2302      	movs	r3, #2
 8001a00:	e3c9      	b.n	8002196 <HAL_ADC_ConfigChannel+0x7b6>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fc88 	bl	8001324 <LL_ADC_REG_IsConversionOngoing>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f040 83aa 	bne.w	8002170 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d824      	bhi.n	8001a76 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	3b02      	subs	r3, #2
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d81b      	bhi.n	8001a6e <HAL_ADC_ConfigChannel+0x8e>
 8001a36:	a201      	add	r2, pc, #4	; (adr r2, 8001a3c <HAL_ADC_ConfigChannel+0x5c>)
 8001a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a3c:	08001a4d 	.word	0x08001a4d
 8001a40:	08001a55 	.word	0x08001a55
 8001a44:	08001a5d 	.word	0x08001a5d
 8001a48:	08001a65 	.word	0x08001a65
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001a4c:	230c      	movs	r3, #12
 8001a4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a52:	e010      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001a54:	2312      	movs	r3, #18
 8001a56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a5a:	e00c      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001a5c:	2318      	movs	r3, #24
 8001a5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a62:	e008      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a6c:	e003      	b.n	8001a76 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001a6e:	2306      	movs	r3, #6
 8001a70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001a74:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6818      	ldr	r0, [r3, #0]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001a84:	f7ff faf2 	bl	800106c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff fc49 	bl	8001324 <LL_ADC_REG_IsConversionOngoing>
 8001a92:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fc69 	bl	8001372 <LL_ADC_INJ_IsConversionOngoing>
 8001aa0:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001aa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f040 81a4 	bne.w	8001df6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001aae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f040 819f 	bne.w	8001df6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6818      	ldr	r0, [r3, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6819      	ldr	r1, [r3, #0]
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	f7ff fafd 	bl	80010c4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	08db      	lsrs	r3, r3, #3
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d00a      	beq.n	8001b02 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6818      	ldr	r0, [r3, #0]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	6919      	ldr	r1, [r3, #16]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001afc:	f7ff fa4e 	bl	8000f9c <LL_ADC_SetOffset>
 8001b00:	e179      	b.n	8001df6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2100      	movs	r1, #0
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fa6b 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10a      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x14e>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fa60 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	0e9b      	lsrs	r3, r3, #26
 8001b28:	f003 021f 	and.w	r2, r3, #31
 8001b2c:	e01e      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x18c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2100      	movs	r1, #0
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff fa55 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001b44:	fa93 f3a3 	rbit	r3, r3
 8001b48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001b5c:	2320      	movs	r3, #32
 8001b5e:	e004      	b.n	8001b6a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001b60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b64:	fab3 f383 	clz	r3, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d105      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x1a4>
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0e9b      	lsrs	r3, r3, #26
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	e018      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x1d6>
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001b90:	fa93 f3a3 	rbit	r3, r3
 8001b94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001ba0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d101      	bne.n	8001bac <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001ba8:	2320      	movs	r3, #32
 8001baa:	e004      	b.n	8001bb6 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001bac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d106      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fa24 	bl	8001010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2101      	movs	r1, #1
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fa08 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10a      	bne.n	8001bf4 <HAL_ADC_ConfigChannel+0x214>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2101      	movs	r1, #1
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff f9fd 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	0e9b      	lsrs	r3, r3, #26
 8001bee:	f003 021f 	and.w	r2, r3, #31
 8001bf2:	e01e      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x252>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7ff f9f2 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001c00:	4603      	mov	r3, r0
 8001c02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001c12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001c16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001c1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001c22:	2320      	movs	r3, #32
 8001c24:	e004      	b.n	8001c30 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001c26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c2a:	fab3 f383 	clz	r3, r3
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d105      	bne.n	8001c4a <HAL_ADC_ConfigChannel+0x26a>
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	0e9b      	lsrs	r3, r3, #26
 8001c44:	f003 031f 	and.w	r3, r3, #31
 8001c48:	e018      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x29c>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001c56:	fa93 f3a3 	rbit	r3, r3
 8001c5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001c5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001c62:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001c66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001c6e:	2320      	movs	r3, #32
 8001c70:	e004      	b.n	8001c7c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001c72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001c76:	fab3 f383 	clz	r3, r3
 8001c7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d106      	bne.n	8001c8e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2200      	movs	r2, #0
 8001c86:	2101      	movs	r1, #1
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff f9c1 	bl	8001010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2102      	movs	r1, #2
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff f9a5 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10a      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x2da>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2102      	movs	r1, #2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f99a 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	0e9b      	lsrs	r3, r3, #26
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	e01e      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0x318>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2102      	movs	r1, #2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f98f 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001cd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001cdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001ce0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001ce8:	2320      	movs	r3, #32
 8001cea:	e004      	b.n	8001cf6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001cec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cf0:	fab3 f383 	clz	r3, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <HAL_ADC_ConfigChannel+0x330>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	0e9b      	lsrs	r3, r3, #26
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	e014      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x35a>
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d16:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001d18:	fa93 f3a3 	rbit	r3, r3
 8001d1c:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001d1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001d20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001d24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001d2c:	2320      	movs	r3, #32
 8001d2e:	e004      	b.n	8001d3a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001d30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001d34:	fab3 f383 	clz	r3, r3
 8001d38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d106      	bne.n	8001d4c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2200      	movs	r2, #0
 8001d44:	2102      	movs	r1, #2
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff f962 	bl	8001010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2103      	movs	r1, #3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff f946 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10a      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x398>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2103      	movs	r1, #3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff f93b 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	0e9b      	lsrs	r3, r3, #26
 8001d72:	f003 021f 	and.w	r2, r3, #31
 8001d76:	e017      	b.n	8001da8 <HAL_ADC_ConfigChannel+0x3c8>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2103      	movs	r1, #3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff f930 	bl	8000fe4 <LL_ADC_GetOffsetChannel>
 8001d84:	4603      	mov	r3, r0
 8001d86:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d88:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d8a:	fa93 f3a3 	rbit	r3, r3
 8001d8e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d92:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001d94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	e003      	b.n	8001da6 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001d9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d105      	bne.n	8001dc0 <HAL_ADC_ConfigChannel+0x3e0>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	0e9b      	lsrs	r3, r3, #26
 8001dba:	f003 031f 	and.w	r3, r3, #31
 8001dbe:	e011      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x404>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001dc8:	fa93 f3a3 	rbit	r3, r3
 8001dcc:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dd0:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001dd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001dd8:	2320      	movs	r3, #32
 8001dda:	e003      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001ddc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d106      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2200      	movs	r2, #0
 8001dee:	2103      	movs	r1, #3
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f90d 	bl	8001010 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fa44 	bl	8001288 <LL_ADC_IsEnabled>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f040 8140 	bne.w	8002088 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6818      	ldr	r0, [r3, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	6819      	ldr	r1, [r3, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	461a      	mov	r2, r3
 8001e16:	f7ff f981 	bl	800111c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	4a8f      	ldr	r2, [pc, #572]	; (800205c <HAL_ADC_ConfigChannel+0x67c>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	f040 8131 	bne.w	8002088 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10b      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x46e>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	0e9b      	lsrs	r3, r3, #26
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	2b09      	cmp	r3, #9
 8001e44:	bf94      	ite	ls
 8001e46:	2301      	movls	r3, #1
 8001e48:	2300      	movhi	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	e019      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x4a2>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001e60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001e66:	2320      	movs	r3, #32
 8001e68:	e003      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	3301      	adds	r3, #1
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	2b09      	cmp	r3, #9
 8001e7a:	bf94      	ite	ls
 8001e7c:	2301      	movls	r3, #1
 8001e7e:	2300      	movhi	r3, #0
 8001e80:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d079      	beq.n	8001f7a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d107      	bne.n	8001ea2 <HAL_ADC_ConfigChannel+0x4c2>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	0e9b      	lsrs	r3, r3, #26
 8001e98:	3301      	adds	r3, #1
 8001e9a:	069b      	lsls	r3, r3, #26
 8001e9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ea0:	e015      	b.n	8001ece <HAL_ADC_ConfigChannel+0x4ee>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001eaa:	fa93 f3a3 	rbit	r3, r3
 8001eae:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eb2:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001eb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001eba:	2320      	movs	r3, #32
 8001ebc:	e003      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	069b      	lsls	r3, r3, #26
 8001eca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x50e>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	0e9b      	lsrs	r3, r3, #26
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	f003 031f 	and.w	r3, r3, #31
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	e017      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x53e>
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001efe:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001f00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001f06:	2320      	movs	r3, #32
 8001f08:	e003      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f0c:	fab3 f383 	clz	r3, r3
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	3301      	adds	r3, #1
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	2101      	movs	r1, #1
 8001f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1e:	ea42 0103 	orr.w	r1, r2, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10a      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x564>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	0e9b      	lsrs	r3, r3, #26
 8001f34:	3301      	adds	r3, #1
 8001f36:	f003 021f 	and.w	r2, r3, #31
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	005b      	lsls	r3, r3, #1
 8001f3e:	4413      	add	r3, r2
 8001f40:	051b      	lsls	r3, r3, #20
 8001f42:	e018      	b.n	8001f76 <HAL_ADC_ConfigChannel+0x596>
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f4c:	fa93 f3a3 	rbit	r3, r3
 8001f50:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f54:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	e003      	b.n	8001f68 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f62:	fab3 f383 	clz	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	3301      	adds	r3, #1
 8001f6a:	f003 021f 	and.w	r2, r3, #31
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f76:	430b      	orrs	r3, r1
 8001f78:	e081      	b.n	800207e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d107      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x5b6>
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	0e9b      	lsrs	r3, r3, #26
 8001f8c:	3301      	adds	r3, #1
 8001f8e:	069b      	lsls	r3, r3, #26
 8001f90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f94:	e015      	b.n	8001fc2 <HAL_ADC_ConfigChannel+0x5e2>
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9e:	fa93 f3a3 	rbit	r3, r3
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d101      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001fae:	2320      	movs	r3, #32
 8001fb0:	e003      	b.n	8001fba <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb4:	fab3 f383 	clz	r3, r3
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	3301      	adds	r3, #1
 8001fbc:	069b      	lsls	r3, r3, #26
 8001fbe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x602>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	0e9b      	lsrs	r3, r3, #26
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f003 031f 	and.w	r3, r3, #31
 8001fda:	2101      	movs	r1, #1
 8001fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe0:	e017      	b.n	8002012 <HAL_ADC_ConfigChannel+0x632>
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	61bb      	str	r3, [r7, #24]
  return result;
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001ff4:	6a3b      	ldr	r3, [r7, #32]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001ffa:	2320      	movs	r3, #32
 8001ffc:	e003      	b.n	8002006 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	3301      	adds	r3, #1
 8002008:	f003 031f 	and.w	r3, r3, #31
 800200c:	2101      	movs	r1, #1
 800200e:	fa01 f303 	lsl.w	r3, r1, r3
 8002012:	ea42 0103 	orr.w	r1, r2, r3
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10d      	bne.n	800203e <HAL_ADC_ConfigChannel+0x65e>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	0e9b      	lsrs	r3, r3, #26
 8002028:	3301      	adds	r3, #1
 800202a:	f003 021f 	and.w	r2, r3, #31
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	3b1e      	subs	r3, #30
 8002036:	051b      	lsls	r3, r3, #20
 8002038:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800203c:	e01e      	b.n	800207c <HAL_ADC_ConfigChannel+0x69c>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	60fb      	str	r3, [r7, #12]
  return result;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d104      	bne.n	8002060 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002056:	2320      	movs	r3, #32
 8002058:	e006      	b.n	8002068 <HAL_ADC_ConfigChannel+0x688>
 800205a:	bf00      	nop
 800205c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fab3 f383 	clz	r3, r3
 8002066:	b2db      	uxtb	r3, r3
 8002068:	3301      	adds	r3, #1
 800206a:	f003 021f 	and.w	r2, r3, #31
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	3b1e      	subs	r3, #30
 8002076:	051b      	lsls	r3, r3, #20
 8002078:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800207c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002082:	4619      	mov	r1, r3
 8002084:	f7ff f81e 	bl	80010c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b44      	ldr	r3, [pc, #272]	; (80021a0 <HAL_ADC_ConfigChannel+0x7c0>)
 800208e:	4013      	ands	r3, r2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d07a      	beq.n	800218a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002094:	4843      	ldr	r0, [pc, #268]	; (80021a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002096:	f7fe ff73 	bl	8000f80 <LL_ADC_GetCommonPathInternalCh>
 800209a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a41      	ldr	r2, [pc, #260]	; (80021a8 <HAL_ADC_ConfigChannel+0x7c8>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d12c      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d126      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a3c      	ldr	r2, [pc, #240]	; (80021ac <HAL_ADC_ConfigChannel+0x7cc>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d004      	beq.n	80020c8 <HAL_ADC_ConfigChannel+0x6e8>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a3b      	ldr	r2, [pc, #236]	; (80021b0 <HAL_ADC_ConfigChannel+0x7d0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d15d      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80020c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80020cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020d0:	4619      	mov	r1, r3
 80020d2:	4834      	ldr	r0, [pc, #208]	; (80021a4 <HAL_ADC_ConfigChannel+0x7c4>)
 80020d4:	f7fe ff41 	bl	8000f5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020d8:	4b36      	ldr	r3, [pc, #216]	; (80021b4 <HAL_ADC_ConfigChannel+0x7d4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	099b      	lsrs	r3, r3, #6
 80020de:	4a36      	ldr	r2, [pc, #216]	; (80021b8 <HAL_ADC_ConfigChannel+0x7d8>)
 80020e0:	fba2 2303 	umull	r2, r3, r2, r3
 80020e4:	099b      	lsrs	r3, r3, #6
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80020f2:	e002      	b.n	80020fa <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f9      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002100:	e040      	b.n	8002184 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <HAL_ADC_ConfigChannel+0x7dc>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d118      	bne.n	800213e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800210c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002110:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d112      	bne.n	800213e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a23      	ldr	r2, [pc, #140]	; (80021ac <HAL_ADC_ConfigChannel+0x7cc>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d004      	beq.n	800212c <HAL_ADC_ConfigChannel+0x74c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a22      	ldr	r2, [pc, #136]	; (80021b0 <HAL_ADC_ConfigChannel+0x7d0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d12d      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800212c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002130:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002134:	4619      	mov	r1, r3
 8002136:	481b      	ldr	r0, [pc, #108]	; (80021a4 <HAL_ADC_ConfigChannel+0x7c4>)
 8002138:	f7fe ff0f 	bl	8000f5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800213c:	e024      	b.n	8002188 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a1f      	ldr	r2, [pc, #124]	; (80021c0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d120      	bne.n	800218a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002148:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800214c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d11a      	bne.n	800218a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <HAL_ADC_ConfigChannel+0x7cc>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d115      	bne.n	800218a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800215e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002162:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002166:	4619      	mov	r1, r3
 8002168:	480e      	ldr	r0, [pc, #56]	; (80021a4 <HAL_ADC_ConfigChannel+0x7c4>)
 800216a:	f7fe fef6 	bl	8000f5a <LL_ADC_SetCommonPathInternalCh>
 800216e:	e00c      	b.n	800218a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002174:	f043 0220 	orr.w	r2, r3, #32
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002182:	e002      	b.n	800218a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002184:	bf00      	nop
 8002186:	e000      	b.n	800218a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002188:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002192:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002196:	4618      	mov	r0, r3
 8002198:	37d8      	adds	r7, #216	; 0xd8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	80080000 	.word	0x80080000
 80021a4:	50040300 	.word	0x50040300
 80021a8:	c7520000 	.word	0xc7520000
 80021ac:	50040000 	.word	0x50040000
 80021b0:	50040200 	.word	0x50040200
 80021b4:	20000000 	.word	0x20000000
 80021b8:	053e2d63 	.word	0x053e2d63
 80021bc:	cb840000 	.word	0xcb840000
 80021c0:	80000001 	.word	0x80000001

080021c4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f8a2 	bl	8001324 <LL_ADC_REG_IsConversionOngoing>
 80021e0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff f8c3 	bl	8001372 <LL_ADC_INJ_IsConversionOngoing>
 80021ec:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d103      	bne.n	80021fc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f000 8098 	beq.w	800232c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d02a      	beq.n	8002260 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	7e5b      	ldrb	r3, [r3, #25]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d126      	bne.n	8002260 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7e1b      	ldrb	r3, [r3, #24]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d122      	bne.n	8002260 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800221a:	2301      	movs	r3, #1
 800221c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800221e:	e014      	b.n	800224a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	4a45      	ldr	r2, [pc, #276]	; (8002338 <ADC_ConversionStop+0x174>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d90d      	bls.n	8002244 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222c:	f043 0210 	orr.w	r2, r3, #16
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e074      	b.n	800232e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	3301      	adds	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002254:	2b40      	cmp	r3, #64	; 0x40
 8002256:	d1e3      	bne.n	8002220 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2240      	movs	r2, #64	; 0x40
 800225e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2b02      	cmp	r3, #2
 8002264:	d014      	beq.n	8002290 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f85a 	bl	8001324 <LL_ADC_REG_IsConversionOngoing>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00c      	beq.n	8002290 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff f817 	bl	80012ae <LL_ADC_IsDisableOngoing>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d104      	bne.n	8002290 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f836 	bl	80012fc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d014      	beq.n	80022c0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff f869 	bl	8001372 <LL_ADC_INJ_IsConversionOngoing>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d00c      	beq.n	80022c0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe ffff 	bl	80012ae <LL_ADC_IsDisableOngoing>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d104      	bne.n	80022c0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff f845 	bl	800134a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d005      	beq.n	80022d2 <ADC_ConversionStop+0x10e>
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d105      	bne.n	80022d8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80022cc:	230c      	movs	r3, #12
 80022ce:	617b      	str	r3, [r7, #20]
        break;
 80022d0:	e005      	b.n	80022de <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80022d2:	2308      	movs	r3, #8
 80022d4:	617b      	str	r3, [r7, #20]
        break;
 80022d6:	e002      	b.n	80022de <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80022d8:	2304      	movs	r3, #4
 80022da:	617b      	str	r3, [r7, #20]
        break;
 80022dc:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80022de:	f7fe fdf9 	bl	8000ed4 <HAL_GetTick>
 80022e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80022e4:	e01b      	b.n	800231e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80022e6:	f7fe fdf5 	bl	8000ed4 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d914      	bls.n	800231e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	689a      	ldr	r2, [r3, #8]
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	4013      	ands	r3, r2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00d      	beq.n	800231e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002306:	f043 0210 	orr.w	r2, r3, #16
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002312:	f043 0201 	orr.w	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e007      	b.n	800232e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	4013      	ands	r3, r2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1dc      	bne.n	80022e6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3720      	adds	r7, #32
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	a33fffff 	.word	0xa33fffff

0800233c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002344:	2300      	movs	r3, #0
 8002346:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe ff9b 	bl	8001288 <LL_ADC_IsEnabled>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d169      	bne.n	800242c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	4b36      	ldr	r3, [pc, #216]	; (8002438 <ADC_Enable+0xfc>)
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00d      	beq.n	8002382 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236a:	f043 0210 	orr.w	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	f043 0201 	orr.w	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e055      	b.n	800242e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe ff56 	bl	8001238 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800238c:	482b      	ldr	r0, [pc, #172]	; (800243c <ADC_Enable+0x100>)
 800238e:	f7fe fdf7 	bl	8000f80 <LL_ADC_GetCommonPathInternalCh>
 8002392:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002394:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002398:	2b00      	cmp	r3, #0
 800239a:	d013      	beq.n	80023c4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800239c:	4b28      	ldr	r3, [pc, #160]	; (8002440 <ADC_Enable+0x104>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	099b      	lsrs	r3, r3, #6
 80023a2:	4a28      	ldr	r2, [pc, #160]	; (8002444 <ADC_Enable+0x108>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	099b      	lsrs	r3, r3, #6
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	4613      	mov	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023b6:	e002      	b.n	80023be <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f9      	bne.n	80023b8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80023c4:	f7fe fd86 	bl	8000ed4 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023ca:	e028      	b.n	800241e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe ff59 	bl	8001288 <LL_ADC_IsEnabled>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d104      	bne.n	80023e6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe ff29 	bl	8001238 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023e6:	f7fe fd75 	bl	8000ed4 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d914      	bls.n	800241e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d00d      	beq.n	800241e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002406:	f043 0210 	orr.w	r2, r3, #16
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002412:	f043 0201 	orr.w	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e007      	b.n	800242e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b01      	cmp	r3, #1
 800242a:	d1cf      	bne.n	80023cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	8000003f 	.word	0x8000003f
 800243c:	50040300 	.word	0x50040300
 8002440:	20000000 	.word	0x20000000
 8002444:	053e2d63 	.word	0x053e2d63

08002448 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe ff2a 	bl	80012ae <LL_ADC_IsDisableOngoing>
 800245a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4618      	mov	r0, r3
 8002462:	f7fe ff11 	bl	8001288 <LL_ADC_IsEnabled>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d047      	beq.n	80024fc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d144      	bne.n	80024fc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 030d 	and.w	r3, r3, #13
 800247c:	2b01      	cmp	r3, #1
 800247e:	d10c      	bne.n	800249a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7fe feeb 	bl	8001260 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2203      	movs	r2, #3
 8002490:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002492:	f7fe fd1f 	bl	8000ed4 <HAL_GetTick>
 8002496:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002498:	e029      	b.n	80024ee <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249e:	f043 0210 	orr.w	r2, r3, #16
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024aa:	f043 0201 	orr.w	r2, r3, #1
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e023      	b.n	80024fe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024b6:	f7fe fd0d 	bl	8000ed4 <HAL_GetTick>
 80024ba:	4602      	mov	r2, r0
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d914      	bls.n	80024ee <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00d      	beq.n	80024ee <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d6:	f043 0210 	orr.w	r2, r3, #16
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	f043 0201 	orr.w	r2, r3, #1
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e007      	b.n	80024fe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d1dc      	bne.n	80024b6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <LL_ADC_IsEnabled>:
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <LL_ADC_IsEnabled+0x18>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <LL_ADC_IsEnabled+0x1a>
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <LL_ADC_REG_IsConversionOngoing>:
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b04      	cmp	r3, #4
 800253e:	d101      	bne.n	8002544 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002540:	2301      	movs	r3, #1
 8002542:	e000      	b.n	8002546 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b09f      	sub	sp, #124	; 0x7c
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800256e:	2302      	movs	r3, #2
 8002570:	e093      	b.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800257a:	2300      	movs	r3, #0
 800257c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800257e:	2300      	movs	r3, #0
 8002580:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a47      	ldr	r2, [pc, #284]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d102      	bne.n	8002592 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800258c:	4b46      	ldr	r3, [pc, #280]	; (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	e001      	b.n	8002596 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10b      	bne.n	80025b4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a0:	f043 0220 	orr.w	r2, r3, #32
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e072      	b.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ffb8 	bl	800252c <LL_ADC_REG_IsConversionOngoing>
 80025bc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff ffb2 	bl	800252c <LL_ADC_REG_IsConversionOngoing>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d154      	bne.n	8002678 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80025ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d151      	bne.n	8002678 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025d4:	4b35      	ldr	r3, [pc, #212]	; (80026ac <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80025d6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d02c      	beq.n	800263a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	6859      	ldr	r1, [r3, #4]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025f2:	035b      	lsls	r3, r3, #13
 80025f4:	430b      	orrs	r3, r1
 80025f6:	431a      	orrs	r2, r3
 80025f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025fa:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025fc:	4829      	ldr	r0, [pc, #164]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80025fe:	f7ff ff82 	bl	8002506 <LL_ADC_IsEnabled>
 8002602:	4604      	mov	r4, r0
 8002604:	4828      	ldr	r0, [pc, #160]	; (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002606:	f7ff ff7e 	bl	8002506 <LL_ADC_IsEnabled>
 800260a:	4603      	mov	r3, r0
 800260c:	431c      	orrs	r4, r3
 800260e:	4828      	ldr	r0, [pc, #160]	; (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002610:	f7ff ff79 	bl	8002506 <LL_ADC_IsEnabled>
 8002614:	4603      	mov	r3, r0
 8002616:	4323      	orrs	r3, r4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d137      	bne.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800261c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002624:	f023 030f 	bic.w	r3, r3, #15
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	6811      	ldr	r1, [r2, #0]
 800262c:	683a      	ldr	r2, [r7, #0]
 800262e:	6892      	ldr	r2, [r2, #8]
 8002630:	430a      	orrs	r2, r1
 8002632:	431a      	orrs	r2, r3
 8002634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002636:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002638:	e028      	b.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800263a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002644:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002646:	4817      	ldr	r0, [pc, #92]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002648:	f7ff ff5d 	bl	8002506 <LL_ADC_IsEnabled>
 800264c:	4604      	mov	r4, r0
 800264e:	4816      	ldr	r0, [pc, #88]	; (80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002650:	f7ff ff59 	bl	8002506 <LL_ADC_IsEnabled>
 8002654:	4603      	mov	r3, r0
 8002656:	431c      	orrs	r4, r3
 8002658:	4815      	ldr	r0, [pc, #84]	; (80026b0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800265a:	f7ff ff54 	bl	8002506 <LL_ADC_IsEnabled>
 800265e:	4603      	mov	r3, r0
 8002660:	4323      	orrs	r3, r4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d112      	bne.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800266e:	f023 030f 	bic.w	r3, r3, #15
 8002672:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002674:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002676:	e009      	b.n	800268c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267c:	f043 0220 	orr.w	r2, r3, #32
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800268a:	e000      	b.n	800268e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800268c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002696:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800269a:	4618      	mov	r0, r3
 800269c:	377c      	adds	r7, #124	; 0x7c
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd90      	pop	{r4, r7, pc}
 80026a2:	bf00      	nop
 80026a4:	50040000 	.word	0x50040000
 80026a8:	50040100 	.word	0x50040100
 80026ac:	50040300 	.word	0x50040300
 80026b0:	50040200 	.word	0x50040200

080026b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026c4:	4b0c      	ldr	r3, [pc, #48]	; (80026f8 <__NVIC_SetPriorityGrouping+0x44>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d0:	4013      	ands	r3, r2
 80026d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026e6:	4a04      	ldr	r2, [pc, #16]	; (80026f8 <__NVIC_SetPriorityGrouping+0x44>)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	60d3      	str	r3, [r2, #12]
}
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002700:	4b04      	ldr	r3, [pc, #16]	; (8002714 <__NVIC_GetPriorityGrouping+0x18>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	0a1b      	lsrs	r3, r3, #8
 8002706:	f003 0307 	and.w	r3, r3, #7
}
 800270a:	4618      	mov	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	2b00      	cmp	r3, #0
 800272a:	db0a      	blt.n	8002742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	490c      	ldr	r1, [pc, #48]	; (8002764 <__NVIC_SetPriority+0x4c>)
 8002732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	440b      	add	r3, r1
 800273c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002740:	e00a      	b.n	8002758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4908      	ldr	r1, [pc, #32]	; (8002768 <__NVIC_SetPriority+0x50>)
 8002748:	79fb      	ldrb	r3, [r7, #7]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	3b04      	subs	r3, #4
 8002750:	0112      	lsls	r2, r2, #4
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	440b      	add	r3, r1
 8002756:	761a      	strb	r2, [r3, #24]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000e100 	.word	0xe000e100
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f1c3 0307 	rsb	r3, r3, #7
 8002786:	2b04      	cmp	r3, #4
 8002788:	bf28      	it	cs
 800278a:	2304      	movcs	r3, #4
 800278c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3304      	adds	r3, #4
 8002792:	2b06      	cmp	r3, #6
 8002794:	d902      	bls.n	800279c <NVIC_EncodePriority+0x30>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3b03      	subs	r3, #3
 800279a:	e000      	b.n	800279e <NVIC_EncodePriority+0x32>
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43da      	mvns	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	401a      	ands	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	43d9      	mvns	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	4313      	orrs	r3, r2
         );
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3724      	adds	r7, #36	; 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e4:	d301      	bcc.n	80027ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00f      	b.n	800280a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <SysTick_Config+0x40>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f2:	210f      	movs	r1, #15
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027f8:	f7ff ff8e 	bl	8002718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <SysTick_Config+0x40>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002802:	4b04      	ldr	r3, [pc, #16]	; (8002814 <SysTick_Config+0x40>)
 8002804:	2207      	movs	r2, #7
 8002806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	e000e010 	.word	0xe000e010

08002818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ff47 	bl	80026b4 <__NVIC_SetPriorityGrouping>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b086      	sub	sp, #24
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002840:	f7ff ff5c 	bl	80026fc <__NVIC_GetPriorityGrouping>
 8002844:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68b9      	ldr	r1, [r7, #8]
 800284a:	6978      	ldr	r0, [r7, #20]
 800284c:	f7ff ff8e 	bl	800276c <NVIC_EncodePriority>
 8002850:	4602      	mov	r2, r0
 8002852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002856:	4611      	mov	r1, r2
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff5d 	bl	8002718 <__NVIC_SetPriority>
}
 800285e:	bf00      	nop
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ffb0 	bl	80027d4 <SysTick_Config>
 8002874:	4603      	mov	r3, r0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800288e:	e17f      	b.n	8002b90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2101      	movs	r1, #1
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	fa01 f303 	lsl.w	r3, r1, r3
 800289c:	4013      	ands	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 8171 	beq.w	8002b8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f003 0303 	and.w	r3, r3, #3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d005      	beq.n	80028c0 <HAL_GPIO_Init+0x40>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f003 0303 	and.w	r3, r3, #3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d130      	bne.n	8002922 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4013      	ands	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028f6:	2201      	movs	r2, #1
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4013      	ands	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	f003 0201 	and.w	r2, r3, #1
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f003 0303 	and.w	r3, r3, #3
 800292a:	2b03      	cmp	r3, #3
 800292c:	d118      	bne.n	8002960 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002934:	2201      	movs	r2, #1
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	43db      	mvns	r3, r3
 800293e:	693a      	ldr	r2, [r7, #16]
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	08db      	lsrs	r3, r3, #3
 800294a:	f003 0201 	and.w	r2, r3, #1
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b03      	cmp	r3, #3
 800296a:	d017      	beq.n	800299c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	2203      	movs	r2, #3
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	4313      	orrs	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d123      	bne.n	80029f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	08da      	lsrs	r2, r3, #3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3208      	adds	r2, #8
 80029b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	220f      	movs	r2, #15
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	4313      	orrs	r3, r2
 80029e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	08da      	lsrs	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3208      	adds	r2, #8
 80029ea:	6939      	ldr	r1, [r7, #16]
 80029ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	2203      	movs	r2, #3
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4013      	ands	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 0203 	and.w	r2, r3, #3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80ac 	beq.w	8002b8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a32:	4b5f      	ldr	r3, [pc, #380]	; (8002bb0 <HAL_GPIO_Init+0x330>)
 8002a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a36:	4a5e      	ldr	r2, [pc, #376]	; (8002bb0 <HAL_GPIO_Init+0x330>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6613      	str	r3, [r2, #96]	; 0x60
 8002a3e:	4b5c      	ldr	r3, [pc, #368]	; (8002bb0 <HAL_GPIO_Init+0x330>)
 8002a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a4a:	4a5a      	ldr	r2, [pc, #360]	; (8002bb4 <HAL_GPIO_Init+0x334>)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	089b      	lsrs	r3, r3, #2
 8002a50:	3302      	adds	r3, #2
 8002a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a56:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	220f      	movs	r2, #15
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a74:	d025      	beq.n	8002ac2 <HAL_GPIO_Init+0x242>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4f      	ldr	r2, [pc, #316]	; (8002bb8 <HAL_GPIO_Init+0x338>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01f      	beq.n	8002abe <HAL_GPIO_Init+0x23e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a4e      	ldr	r2, [pc, #312]	; (8002bbc <HAL_GPIO_Init+0x33c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d019      	beq.n	8002aba <HAL_GPIO_Init+0x23a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a4d      	ldr	r2, [pc, #308]	; (8002bc0 <HAL_GPIO_Init+0x340>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d013      	beq.n	8002ab6 <HAL_GPIO_Init+0x236>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a4c      	ldr	r2, [pc, #304]	; (8002bc4 <HAL_GPIO_Init+0x344>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d00d      	beq.n	8002ab2 <HAL_GPIO_Init+0x232>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a4b      	ldr	r2, [pc, #300]	; (8002bc8 <HAL_GPIO_Init+0x348>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d007      	beq.n	8002aae <HAL_GPIO_Init+0x22e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a4a      	ldr	r2, [pc, #296]	; (8002bcc <HAL_GPIO_Init+0x34c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d101      	bne.n	8002aaa <HAL_GPIO_Init+0x22a>
 8002aa6:	2306      	movs	r3, #6
 8002aa8:	e00c      	b.n	8002ac4 <HAL_GPIO_Init+0x244>
 8002aaa:	2307      	movs	r3, #7
 8002aac:	e00a      	b.n	8002ac4 <HAL_GPIO_Init+0x244>
 8002aae:	2305      	movs	r3, #5
 8002ab0:	e008      	b.n	8002ac4 <HAL_GPIO_Init+0x244>
 8002ab2:	2304      	movs	r3, #4
 8002ab4:	e006      	b.n	8002ac4 <HAL_GPIO_Init+0x244>
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e004      	b.n	8002ac4 <HAL_GPIO_Init+0x244>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e002      	b.n	8002ac4 <HAL_GPIO_Init+0x244>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_GPIO_Init+0x244>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	f002 0203 	and.w	r2, r2, #3
 8002aca:	0092      	lsls	r2, r2, #2
 8002acc:	4093      	lsls	r3, r2
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ad4:	4937      	ldr	r1, [pc, #220]	; (8002bb4 <HAL_GPIO_Init+0x334>)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	089b      	lsrs	r3, r3, #2
 8002ada:	3302      	adds	r3, #2
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ae2:	4b3b      	ldr	r3, [pc, #236]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b06:	4a32      	ldr	r2, [pc, #200]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b0c:	4b30      	ldr	r3, [pc, #192]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b30:	4a27      	ldr	r2, [pc, #156]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4013      	ands	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b5a:	4a1d      	ldr	r2, [pc, #116]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b60:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	693a      	ldr	r2, [r7, #16]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b84:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <HAL_GPIO_Init+0x350>)
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f47f ae78 	bne.w	8002890 <HAL_GPIO_Init+0x10>
  }
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	40010000 	.word	0x40010000
 8002bb8:	48000400 	.word	0x48000400
 8002bbc:	48000800 	.word	0x48000800
 8002bc0:	48000c00 	.word	0x48000c00
 8002bc4:	48001000 	.word	0x48001000
 8002bc8:	48001400 	.word	0x48001400
 8002bcc:	48001800 	.word	0x48001800
 8002bd0:	40010400 	.word	0x40010400

08002bd4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	691a      	ldr	r2, [r3, #16]
 8002be4:	887b      	ldrh	r3, [r7, #2]
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d002      	beq.n	8002bf2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	e001      	b.n	8002bf6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3714      	adds	r7, #20
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	807b      	strh	r3, [r7, #2]
 8002c10:	4613      	mov	r3, r2
 8002c12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c14:	787b      	ldrb	r3, [r7, #1]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c1a:	887a      	ldrh	r2, [r7, #2]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c20:	e002      	b.n	8002c28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c22:	887a      	ldrh	r2, [r7, #2]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c38:	4b04      	ldr	r3, [pc, #16]	; (8002c4c <HAL_PWREx_GetVoltageRange+0x18>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40007000 	.word	0x40007000

08002c50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c5e:	d130      	bne.n	8002cc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c60:	4b23      	ldr	r3, [pc, #140]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c6c:	d038      	beq.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c6e:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c76:	4a1e      	ldr	r2, [pc, #120]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c7e:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2232      	movs	r2, #50	; 0x32
 8002c84:	fb02 f303 	mul.w	r3, r2, r3
 8002c88:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8e:	0c9b      	lsrs	r3, r3, #18
 8002c90:	3301      	adds	r3, #1
 8002c92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c94:	e002      	b.n	8002c9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c9c:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca8:	d102      	bne.n	8002cb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f2      	bne.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cbc:	d110      	bne.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e00f      	b.n	8002ce2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cc2:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cce:	d007      	beq.n	8002ce0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002cd0:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cd8:	4a05      	ldr	r2, [pc, #20]	; (8002cf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	40007000 	.word	0x40007000
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	431bde83 	.word	0x431bde83

08002cfc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d101      	bne.n	8002d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e3ca      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d0e:	4b97      	ldr	r3, [pc, #604]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d18:	4b94      	ldr	r3, [pc, #592]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0303 	and.w	r3, r3, #3
 8002d20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 80e4 	beq.w	8002ef8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <HAL_RCC_OscConfig+0x4a>
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	2b0c      	cmp	r3, #12
 8002d3a:	f040 808b 	bne.w	8002e54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	f040 8087 	bne.w	8002e54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d46:	4b89      	ldr	r3, [pc, #548]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d005      	beq.n	8002d5e <HAL_RCC_OscConfig+0x62>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e3a2      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1a      	ldr	r2, [r3, #32]
 8002d62:	4b82      	ldr	r3, [pc, #520]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d004      	beq.n	8002d78 <HAL_RCC_OscConfig+0x7c>
 8002d6e:	4b7f      	ldr	r3, [pc, #508]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d76:	e005      	b.n	8002d84 <HAL_RCC_OscConfig+0x88>
 8002d78:	4b7c      	ldr	r3, [pc, #496]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d223      	bcs.n	8002dd0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f000 fd55 	bl	800383c <RCC_SetFlashLatencyFromMSIRange>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e383      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d9c:	4b73      	ldr	r3, [pc, #460]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a72      	ldr	r2, [pc, #456]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002da2:	f043 0308 	orr.w	r3, r3, #8
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	4b70      	ldr	r3, [pc, #448]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	496d      	ldr	r1, [pc, #436]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dba:	4b6c      	ldr	r3, [pc, #432]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	021b      	lsls	r3, r3, #8
 8002dc8:	4968      	ldr	r1, [pc, #416]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	604b      	str	r3, [r1, #4]
 8002dce:	e025      	b.n	8002e1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dd0:	4b66      	ldr	r3, [pc, #408]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a65      	ldr	r2, [pc, #404]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dd6:	f043 0308 	orr.w	r3, r3, #8
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	4b63      	ldr	r3, [pc, #396]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	4960      	ldr	r1, [pc, #384]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dee:	4b5f      	ldr	r3, [pc, #380]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	021b      	lsls	r3, r3, #8
 8002dfc:	495b      	ldr	r1, [pc, #364]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a1b      	ldr	r3, [r3, #32]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fd15 	bl	800383c <RCC_SetFlashLatencyFromMSIRange>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e343      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e1c:	f000 fc4a 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8002e20:	4602      	mov	r2, r0
 8002e22:	4b52      	ldr	r3, [pc, #328]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	091b      	lsrs	r3, r3, #4
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	4950      	ldr	r1, [pc, #320]	; (8002f70 <HAL_RCC_OscConfig+0x274>)
 8002e2e:	5ccb      	ldrb	r3, [r1, r3]
 8002e30:	f003 031f 	and.w	r3, r3, #31
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
 8002e38:	4a4e      	ldr	r2, [pc, #312]	; (8002f74 <HAL_RCC_OscConfig+0x278>)
 8002e3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e3c:	4b4e      	ldr	r3, [pc, #312]	; (8002f78 <HAL_RCC_OscConfig+0x27c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7fd fff7 	bl	8000e34 <HAL_InitTick>
 8002e46:	4603      	mov	r3, r0
 8002e48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e4a:	7bfb      	ldrb	r3, [r7, #15]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d052      	beq.n	8002ef6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	e327      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d032      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e5c:	4b43      	ldr	r3, [pc, #268]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a42      	ldr	r2, [pc, #264]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e68:	f7fe f834 	bl	8000ed4 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e70:	f7fe f830 	bl	8000ed4 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e310      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e82:	4b3a      	ldr	r3, [pc, #232]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e8e:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a36      	ldr	r2, [pc, #216]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e94:	f043 0308 	orr.w	r3, r3, #8
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	4b34      	ldr	r3, [pc, #208]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	4931      	ldr	r1, [pc, #196]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002eac:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	492c      	ldr	r1, [pc, #176]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	604b      	str	r3, [r1, #4]
 8002ec0:	e01a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ec2:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a29      	ldr	r2, [pc, #164]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002ec8:	f023 0301 	bic.w	r3, r3, #1
 8002ecc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ece:	f7fe f801 	bl	8000ed4 <HAL_GetTick>
 8002ed2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ed4:	e008      	b.n	8002ee8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ed6:	f7fd fffd 	bl	8000ed4 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e2dd      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ee8:	4b20      	ldr	r3, [pc, #128]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f0      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x1da>
 8002ef4:	e000      	b.n	8002ef8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ef6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d074      	beq.n	8002fee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d005      	beq.n	8002f16 <HAL_RCC_OscConfig+0x21a>
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	2b0c      	cmp	r3, #12
 8002f0e:	d10e      	bne.n	8002f2e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d10b      	bne.n	8002f2e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d064      	beq.n	8002fec <HAL_RCC_OscConfig+0x2f0>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d160      	bne.n	8002fec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e2ba      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f36:	d106      	bne.n	8002f46 <HAL_RCC_OscConfig+0x24a>
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a0b      	ldr	r2, [pc, #44]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	e026      	b.n	8002f94 <HAL_RCC_OscConfig+0x298>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f4e:	d115      	bne.n	8002f7c <HAL_RCC_OscConfig+0x280>
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a05      	ldr	r2, [pc, #20]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002f56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a02      	ldr	r2, [pc, #8]	; (8002f6c <HAL_RCC_OscConfig+0x270>)
 8002f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	e014      	b.n	8002f94 <HAL_RCC_OscConfig+0x298>
 8002f6a:	bf00      	nop
 8002f6c:	40021000 	.word	0x40021000
 8002f70:	08005784 	.word	0x08005784
 8002f74:	20000000 	.word	0x20000000
 8002f78:	20000004 	.word	0x20000004
 8002f7c:	4ba0      	ldr	r3, [pc, #640]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a9f      	ldr	r2, [pc, #636]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8002f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f86:	6013      	str	r3, [r2, #0]
 8002f88:	4b9d      	ldr	r3, [pc, #628]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a9c      	ldr	r2, [pc, #624]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8002f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fd ff9a 	bl	8000ed4 <HAL_GetTick>
 8002fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fa2:	e008      	b.n	8002fb6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa4:	f7fd ff96 	bl	8000ed4 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	2b64      	cmp	r3, #100	; 0x64
 8002fb0:	d901      	bls.n	8002fb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	e276      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fb6:	4b92      	ldr	r3, [pc, #584]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d0f0      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x2a8>
 8002fc2:	e014      	b.n	8002fee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc4:	f7fd ff86 	bl	8000ed4 <HAL_GetTick>
 8002fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7fd ff82 	bl	8000ed4 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b64      	cmp	r3, #100	; 0x64
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e262      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fde:	4b88      	ldr	r3, [pc, #544]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f0      	bne.n	8002fcc <HAL_RCC_OscConfig+0x2d0>
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d060      	beq.n	80030bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d005      	beq.n	800300c <HAL_RCC_OscConfig+0x310>
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b0c      	cmp	r3, #12
 8003004:	d119      	bne.n	800303a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d116      	bne.n	800303a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800300c:	4b7c      	ldr	r3, [pc, #496]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_OscConfig+0x328>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d101      	bne.n	8003024 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e23f      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003024:	4b76      	ldr	r3, [pc, #472]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	061b      	lsls	r3, r3, #24
 8003032:	4973      	ldr	r1, [pc, #460]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8003034:	4313      	orrs	r3, r2
 8003036:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003038:	e040      	b.n	80030bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d023      	beq.n	800308a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003042:	4b6f      	ldr	r3, [pc, #444]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a6e      	ldr	r2, [pc, #440]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8003048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304e:	f7fd ff41 	bl	8000ed4 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003056:	f7fd ff3d 	bl	8000ed4 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e21d      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003068:	4b65      	ldr	r3, [pc, #404]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003074:	4b62      	ldr	r3, [pc, #392]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	691b      	ldr	r3, [r3, #16]
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	495f      	ldr	r1, [pc, #380]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8003084:	4313      	orrs	r3, r2
 8003086:	604b      	str	r3, [r1, #4]
 8003088:	e018      	b.n	80030bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800308a:	4b5d      	ldr	r3, [pc, #372]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a5c      	ldr	r2, [pc, #368]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8003090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003094:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003096:	f7fd ff1d 	bl	8000ed4 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309e:	f7fd ff19 	bl	8000ed4 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e1f9      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030b0:	4b53      	ldr	r3, [pc, #332]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f0      	bne.n	800309e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d03c      	beq.n	8003142 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01c      	beq.n	800310a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d0:	4b4b      	ldr	r3, [pc, #300]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 80030d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d6:	4a4a      	ldr	r2, [pc, #296]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030e0:	f7fd fef8 	bl	8000ed4 <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030e8:	f7fd fef4 	bl	8000ed4 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e1d4      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030fa:	4b41      	ldr	r3, [pc, #260]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 80030fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d0ef      	beq.n	80030e8 <HAL_RCC_OscConfig+0x3ec>
 8003108:	e01b      	b.n	8003142 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800310a:	4b3d      	ldr	r3, [pc, #244]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 800310c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003110:	4a3b      	ldr	r2, [pc, #236]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8003112:	f023 0301 	bic.w	r3, r3, #1
 8003116:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311a:	f7fd fedb 	bl	8000ed4 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003122:	f7fd fed7 	bl	8000ed4 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e1b7      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003134:	4b32      	ldr	r3, [pc, #200]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8003136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1ef      	bne.n	8003122 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	f000 80a6 	beq.w	800329c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003150:	2300      	movs	r3, #0
 8003152:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003154:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8003156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10d      	bne.n	800317c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003160:	4b27      	ldr	r3, [pc, #156]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8003162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003164:	4a26      	ldr	r2, [pc, #152]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 8003166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800316a:	6593      	str	r3, [r2, #88]	; 0x58
 800316c:	4b24      	ldr	r3, [pc, #144]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003178:	2301      	movs	r3, #1
 800317a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800317c:	4b21      	ldr	r3, [pc, #132]	; (8003204 <HAL_RCC_OscConfig+0x508>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d118      	bne.n	80031ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003188:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <HAL_RCC_OscConfig+0x508>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <HAL_RCC_OscConfig+0x508>)
 800318e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003192:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003194:	f7fd fe9e 	bl	8000ed4 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319c:	f7fd fe9a 	bl	8000ed4 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e17a      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031ae:	4b15      	ldr	r3, [pc, #84]	; (8003204 <HAL_RCC_OscConfig+0x508>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d108      	bne.n	80031d4 <HAL_RCC_OscConfig+0x4d8>
 80031c2:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c8:	4a0d      	ldr	r2, [pc, #52]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 80031ca:	f043 0301 	orr.w	r3, r3, #1
 80031ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031d2:	e029      	b.n	8003228 <HAL_RCC_OscConfig+0x52c>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b05      	cmp	r3, #5
 80031da:	d115      	bne.n	8003208 <HAL_RCC_OscConfig+0x50c>
 80031dc:	4b08      	ldr	r3, [pc, #32]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	4a07      	ldr	r2, [pc, #28]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 80031e4:	f043 0304 	orr.w	r3, r3, #4
 80031e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	4a03      	ldr	r2, [pc, #12]	; (8003200 <HAL_RCC_OscConfig+0x504>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031fc:	e014      	b.n	8003228 <HAL_RCC_OscConfig+0x52c>
 80031fe:	bf00      	nop
 8003200:	40021000 	.word	0x40021000
 8003204:	40007000 	.word	0x40007000
 8003208:	4b9c      	ldr	r3, [pc, #624]	; (800347c <HAL_RCC_OscConfig+0x780>)
 800320a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800320e:	4a9b      	ldr	r2, [pc, #620]	; (800347c <HAL_RCC_OscConfig+0x780>)
 8003210:	f023 0301 	bic.w	r3, r3, #1
 8003214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003218:	4b98      	ldr	r3, [pc, #608]	; (800347c <HAL_RCC_OscConfig+0x780>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	4a97      	ldr	r2, [pc, #604]	; (800347c <HAL_RCC_OscConfig+0x780>)
 8003220:	f023 0304 	bic.w	r3, r3, #4
 8003224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d016      	beq.n	800325e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fd fe50 	bl	8000ed4 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003236:	e00a      	b.n	800324e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003238:	f7fd fe4c 	bl	8000ed4 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	f241 3288 	movw	r2, #5000	; 0x1388
 8003246:	4293      	cmp	r3, r2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e12a      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800324e:	4b8b      	ldr	r3, [pc, #556]	; (800347c <HAL_RCC_OscConfig+0x780>)
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d0ed      	beq.n	8003238 <HAL_RCC_OscConfig+0x53c>
 800325c:	e015      	b.n	800328a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325e:	f7fd fe39 	bl	8000ed4 <HAL_GetTick>
 8003262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003264:	e00a      	b.n	800327c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003266:	f7fd fe35 	bl	8000ed4 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	f241 3288 	movw	r2, #5000	; 0x1388
 8003274:	4293      	cmp	r3, r2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e113      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800327c:	4b7f      	ldr	r3, [pc, #508]	; (800347c <HAL_RCC_OscConfig+0x780>)
 800327e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1ed      	bne.n	8003266 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800328a:	7ffb      	ldrb	r3, [r7, #31]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d105      	bne.n	800329c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003290:	4b7a      	ldr	r3, [pc, #488]	; (800347c <HAL_RCC_OscConfig+0x780>)
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	4a79      	ldr	r2, [pc, #484]	; (800347c <HAL_RCC_OscConfig+0x780>)
 8003296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800329a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80fe 	beq.w	80034a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	f040 80d0 	bne.w	8003450 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032b0:	4b72      	ldr	r3, [pc, #456]	; (800347c <HAL_RCC_OscConfig+0x780>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f003 0203 	and.w	r2, r3, #3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d130      	bne.n	8003326 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	3b01      	subs	r3, #1
 80032d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d127      	bne.n	8003326 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d11f      	bne.n	8003326 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032f0:	2a07      	cmp	r2, #7
 80032f2:	bf14      	ite	ne
 80032f4:	2201      	movne	r2, #1
 80032f6:	2200      	moveq	r2, #0
 80032f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d113      	bne.n	8003326 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	3b01      	subs	r3, #1
 800330c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d109      	bne.n	8003326 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	3b01      	subs	r3, #1
 8003320:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003322:	429a      	cmp	r2, r3
 8003324:	d06e      	beq.n	8003404 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b0c      	cmp	r3, #12
 800332a:	d069      	beq.n	8003400 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800332c:	4b53      	ldr	r3, [pc, #332]	; (800347c <HAL_RCC_OscConfig+0x780>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d105      	bne.n	8003344 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003338:	4b50      	ldr	r3, [pc, #320]	; (800347c <HAL_RCC_OscConfig+0x780>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0ad      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003348:	4b4c      	ldr	r3, [pc, #304]	; (800347c <HAL_RCC_OscConfig+0x780>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a4b      	ldr	r2, [pc, #300]	; (800347c <HAL_RCC_OscConfig+0x780>)
 800334e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003352:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003354:	f7fd fdbe 	bl	8000ed4 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7fd fdba 	bl	8000ed4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e09a      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800336e:	4b43      	ldr	r3, [pc, #268]	; (800347c <HAL_RCC_OscConfig+0x780>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800337a:	4b40      	ldr	r3, [pc, #256]	; (800347c <HAL_RCC_OscConfig+0x780>)
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	4b40      	ldr	r3, [pc, #256]	; (8003480 <HAL_RCC_OscConfig+0x784>)
 8003380:	4013      	ands	r3, r2
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800338a:	3a01      	subs	r2, #1
 800338c:	0112      	lsls	r2, r2, #4
 800338e:	4311      	orrs	r1, r2
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003394:	0212      	lsls	r2, r2, #8
 8003396:	4311      	orrs	r1, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800339c:	0852      	lsrs	r2, r2, #1
 800339e:	3a01      	subs	r2, #1
 80033a0:	0552      	lsls	r2, r2, #21
 80033a2:	4311      	orrs	r1, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033a8:	0852      	lsrs	r2, r2, #1
 80033aa:	3a01      	subs	r2, #1
 80033ac:	0652      	lsls	r2, r2, #25
 80033ae:	4311      	orrs	r1, r2
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033b4:	0912      	lsrs	r2, r2, #4
 80033b6:	0452      	lsls	r2, r2, #17
 80033b8:	430a      	orrs	r2, r1
 80033ba:	4930      	ldr	r1, [pc, #192]	; (800347c <HAL_RCC_OscConfig+0x780>)
 80033bc:	4313      	orrs	r3, r2
 80033be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033c0:	4b2e      	ldr	r3, [pc, #184]	; (800347c <HAL_RCC_OscConfig+0x780>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a2d      	ldr	r2, [pc, #180]	; (800347c <HAL_RCC_OscConfig+0x780>)
 80033c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033cc:	4b2b      	ldr	r3, [pc, #172]	; (800347c <HAL_RCC_OscConfig+0x780>)
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	4a2a      	ldr	r2, [pc, #168]	; (800347c <HAL_RCC_OscConfig+0x780>)
 80033d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033d8:	f7fd fd7c 	bl	8000ed4 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033e0:	f7fd fd78 	bl	8000ed4 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e058      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033f2:	4b22      	ldr	r3, [pc, #136]	; (800347c <HAL_RCC_OscConfig+0x780>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033fe:	e050      	b.n	80034a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e04f      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003404:	4b1d      	ldr	r3, [pc, #116]	; (800347c <HAL_RCC_OscConfig+0x780>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d148      	bne.n	80034a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003410:	4b1a      	ldr	r3, [pc, #104]	; (800347c <HAL_RCC_OscConfig+0x780>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a19      	ldr	r2, [pc, #100]	; (800347c <HAL_RCC_OscConfig+0x780>)
 8003416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800341a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800341c:	4b17      	ldr	r3, [pc, #92]	; (800347c <HAL_RCC_OscConfig+0x780>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4a16      	ldr	r2, [pc, #88]	; (800347c <HAL_RCC_OscConfig+0x780>)
 8003422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003426:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003428:	f7fd fd54 	bl	8000ed4 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003430:	f7fd fd50 	bl	8000ed4 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e030      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003442:	4b0e      	ldr	r3, [pc, #56]	; (800347c <HAL_RCC_OscConfig+0x780>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x734>
 800344e:	e028      	b.n	80034a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	2b0c      	cmp	r3, #12
 8003454:	d023      	beq.n	800349e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b09      	ldr	r3, [pc, #36]	; (800347c <HAL_RCC_OscConfig+0x780>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a08      	ldr	r2, [pc, #32]	; (800347c <HAL_RCC_OscConfig+0x780>)
 800345c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003460:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003462:	f7fd fd37 	bl	8000ed4 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003468:	e00c      	b.n	8003484 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346a:	f7fd fd33 	bl	8000ed4 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d905      	bls.n	8003484 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e013      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
 800347c:	40021000 	.word	0x40021000
 8003480:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003484:	4b09      	ldr	r3, [pc, #36]	; (80034ac <HAL_RCC_OscConfig+0x7b0>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1ec      	bne.n	800346a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003490:	4b06      	ldr	r3, [pc, #24]	; (80034ac <HAL_RCC_OscConfig+0x7b0>)
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	4905      	ldr	r1, [pc, #20]	; (80034ac <HAL_RCC_OscConfig+0x7b0>)
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_RCC_OscConfig+0x7b4>)
 8003498:	4013      	ands	r3, r2
 800349a:	60cb      	str	r3, [r1, #12]
 800349c:	e001      	b.n	80034a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3720      	adds	r7, #32
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40021000 	.word	0x40021000
 80034b0:	feeefffc 	.word	0xfeeefffc

080034b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0e7      	b.n	8003698 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034c8:	4b75      	ldr	r3, [pc, #468]	; (80036a0 <HAL_RCC_ClockConfig+0x1ec>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d910      	bls.n	80034f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b72      	ldr	r3, [pc, #456]	; (80036a0 <HAL_RCC_ClockConfig+0x1ec>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 0207 	bic.w	r2, r3, #7
 80034de:	4970      	ldr	r1, [pc, #448]	; (80036a0 <HAL_RCC_ClockConfig+0x1ec>)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b6e      	ldr	r3, [pc, #440]	; (80036a0 <HAL_RCC_ClockConfig+0x1ec>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0cf      	b.n	8003698 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d010      	beq.n	8003526 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	4b66      	ldr	r3, [pc, #408]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003510:	429a      	cmp	r2, r3
 8003512:	d908      	bls.n	8003526 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003514:	4b63      	ldr	r3, [pc, #396]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4960      	ldr	r1, [pc, #384]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003522:	4313      	orrs	r3, r2
 8003524:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	d04c      	beq.n	80035cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b03      	cmp	r3, #3
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800353a:	4b5a      	ldr	r3, [pc, #360]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d121      	bne.n	800358a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0a6      	b.n	8003698 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d107      	bne.n	8003562 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003552:	4b54      	ldr	r3, [pc, #336]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d115      	bne.n	800358a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e09a      	b.n	8003698 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d107      	bne.n	800357a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800356a:	4b4e      	ldr	r3, [pc, #312]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d109      	bne.n	800358a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e08e      	b.n	8003698 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800357a:	4b4a      	ldr	r3, [pc, #296]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003582:	2b00      	cmp	r3, #0
 8003584:	d101      	bne.n	800358a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e086      	b.n	8003698 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800358a:	4b46      	ldr	r3, [pc, #280]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f023 0203 	bic.w	r2, r3, #3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	4943      	ldr	r1, [pc, #268]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003598:	4313      	orrs	r3, r2
 800359a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800359c:	f7fd fc9a 	bl	8000ed4 <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035a4:	f7fd fc96 	bl	8000ed4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e06e      	b.n	8003698 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	4b3a      	ldr	r3, [pc, #232]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 020c 	and.w	r2, r3, #12
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d1eb      	bne.n	80035a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d010      	beq.n	80035fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	4b31      	ldr	r3, [pc, #196]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d208      	bcs.n	80035fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e8:	4b2e      	ldr	r3, [pc, #184]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	492b      	ldr	r1, [pc, #172]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035fa:	4b29      	ldr	r3, [pc, #164]	; (80036a0 <HAL_RCC_ClockConfig+0x1ec>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d210      	bcs.n	800362a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003608:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <HAL_RCC_ClockConfig+0x1ec>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f023 0207 	bic.w	r2, r3, #7
 8003610:	4923      	ldr	r1, [pc, #140]	; (80036a0 <HAL_RCC_ClockConfig+0x1ec>)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	4313      	orrs	r3, r2
 8003616:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003618:	4b21      	ldr	r3, [pc, #132]	; (80036a0 <HAL_RCC_ClockConfig+0x1ec>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d001      	beq.n	800362a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e036      	b.n	8003698 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b00      	cmp	r3, #0
 8003634:	d008      	beq.n	8003648 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003636:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	4918      	ldr	r1, [pc, #96]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003644:	4313      	orrs	r3, r2
 8003646:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d009      	beq.n	8003668 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003654:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4910      	ldr	r1, [pc, #64]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003664:	4313      	orrs	r3, r2
 8003666:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003668:	f000 f824 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <HAL_RCC_ClockConfig+0x1f0>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	490b      	ldr	r1, [pc, #44]	; (80036a8 <HAL_RCC_ClockConfig+0x1f4>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	f003 031f 	and.w	r3, r3, #31
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
 8003684:	4a09      	ldr	r2, [pc, #36]	; (80036ac <HAL_RCC_ClockConfig+0x1f8>)
 8003686:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003688:	4b09      	ldr	r3, [pc, #36]	; (80036b0 <HAL_RCC_ClockConfig+0x1fc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7fd fbd1 	bl	8000e34 <HAL_InitTick>
 8003692:	4603      	mov	r3, r0
 8003694:	72fb      	strb	r3, [r7, #11]

  return status;
 8003696:	7afb      	ldrb	r3, [r7, #11]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40022000 	.word	0x40022000
 80036a4:	40021000 	.word	0x40021000
 80036a8:	08005784 	.word	0x08005784
 80036ac:	20000000 	.word	0x20000000
 80036b0:	20000004 	.word	0x20000004

080036b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b089      	sub	sp, #36	; 0x24
 80036b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036c2:	4b3e      	ldr	r3, [pc, #248]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
 80036ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036cc:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_RCC_GetSysClockFreq+0x34>
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	2b0c      	cmp	r3, #12
 80036e0:	d121      	bne.n	8003726 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d11e      	bne.n	8003726 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036e8:	4b34      	ldr	r3, [pc, #208]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d107      	bne.n	8003704 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036f4:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 80036f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	e005      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003704:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003710:	4a2b      	ldr	r2, [pc, #172]	; (80037c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003718:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10d      	bne.n	800373c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003724:	e00a      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b04      	cmp	r3, #4
 800372a:	d102      	bne.n	8003732 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800372c:	4b25      	ldr	r3, [pc, #148]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800372e:	61bb      	str	r3, [r7, #24]
 8003730:	e004      	b.n	800373c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b08      	cmp	r3, #8
 8003736:	d101      	bne.n	800373c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003738:	4b23      	ldr	r3, [pc, #140]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800373a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	2b0c      	cmp	r3, #12
 8003740:	d134      	bne.n	80037ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003742:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b02      	cmp	r3, #2
 8003750:	d003      	beq.n	800375a <HAL_RCC_GetSysClockFreq+0xa6>
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	2b03      	cmp	r3, #3
 8003756:	d003      	beq.n	8003760 <HAL_RCC_GetSysClockFreq+0xac>
 8003758:	e005      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800375a:	4b1a      	ldr	r3, [pc, #104]	; (80037c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800375c:	617b      	str	r3, [r7, #20]
      break;
 800375e:	e005      	b.n	800376c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003760:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003762:	617b      	str	r3, [r7, #20]
      break;
 8003764:	e002      	b.n	800376c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	617b      	str	r3, [r7, #20]
      break;
 800376a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800376c:	4b13      	ldr	r3, [pc, #76]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	091b      	lsrs	r3, r3, #4
 8003772:	f003 0307 	and.w	r3, r3, #7
 8003776:	3301      	adds	r3, #1
 8003778:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	0a1b      	lsrs	r3, r3, #8
 8003780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	fb03 f202 	mul.w	r2, r3, r2
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003790:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003792:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	0e5b      	lsrs	r3, r3, #25
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	3301      	adds	r3, #1
 800379e:	005b      	lsls	r3, r3, #1
 80037a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80037aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037ac:	69bb      	ldr	r3, [r7, #24]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3724      	adds	r7, #36	; 0x24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40021000 	.word	0x40021000
 80037c0:	0800579c 	.word	0x0800579c
 80037c4:	00f42400 	.word	0x00f42400
 80037c8:	007a1200 	.word	0x007a1200

080037cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80037d2:	681b      	ldr	r3, [r3, #0]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	20000000 	.word	0x20000000

080037e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037e8:	f7ff fff0 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 80037ec:	4602      	mov	r2, r0
 80037ee:	4b06      	ldr	r3, [pc, #24]	; (8003808 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	0a1b      	lsrs	r3, r3, #8
 80037f4:	f003 0307 	and.w	r3, r3, #7
 80037f8:	4904      	ldr	r1, [pc, #16]	; (800380c <HAL_RCC_GetPCLK1Freq+0x28>)
 80037fa:	5ccb      	ldrb	r3, [r1, r3]
 80037fc:	f003 031f 	and.w	r3, r3, #31
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003804:	4618      	mov	r0, r3
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40021000 	.word	0x40021000
 800380c:	08005794 	.word	0x08005794

08003810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003814:	f7ff ffda 	bl	80037cc <HAL_RCC_GetHCLKFreq>
 8003818:	4602      	mov	r2, r0
 800381a:	4b06      	ldr	r3, [pc, #24]	; (8003834 <HAL_RCC_GetPCLK2Freq+0x24>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	0adb      	lsrs	r3, r3, #11
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	4904      	ldr	r1, [pc, #16]	; (8003838 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003826:	5ccb      	ldrb	r3, [r1, r3]
 8003828:	f003 031f 	and.w	r3, r3, #31
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40021000 	.word	0x40021000
 8003838:	08005794 	.word	0x08005794

0800383c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003844:	2300      	movs	r3, #0
 8003846:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003848:	4b2a      	ldr	r3, [pc, #168]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800384c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d003      	beq.n	800385c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003854:	f7ff f9ee 	bl	8002c34 <HAL_PWREx_GetVoltageRange>
 8003858:	6178      	str	r0, [r7, #20]
 800385a:	e014      	b.n	8003886 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800385c:	4b25      	ldr	r3, [pc, #148]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003860:	4a24      	ldr	r2, [pc, #144]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003866:	6593      	str	r3, [r2, #88]	; 0x58
 8003868:	4b22      	ldr	r3, [pc, #136]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800386a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003874:	f7ff f9de 	bl	8002c34 <HAL_PWREx_GetVoltageRange>
 8003878:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800387a:	4b1e      	ldr	r3, [pc, #120]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800387c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387e:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003884:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800388c:	d10b      	bne.n	80038a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b80      	cmp	r3, #128	; 0x80
 8003892:	d919      	bls.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2ba0      	cmp	r3, #160	; 0xa0
 8003898:	d902      	bls.n	80038a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800389a:	2302      	movs	r3, #2
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	e013      	b.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038a0:	2301      	movs	r3, #1
 80038a2:	613b      	str	r3, [r7, #16]
 80038a4:	e010      	b.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b80      	cmp	r3, #128	; 0x80
 80038aa:	d902      	bls.n	80038b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038ac:	2303      	movs	r3, #3
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	e00a      	b.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b80      	cmp	r3, #128	; 0x80
 80038b6:	d102      	bne.n	80038be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038b8:	2302      	movs	r3, #2
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	e004      	b.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b70      	cmp	r3, #112	; 0x70
 80038c2:	d101      	bne.n	80038c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038c4:	2301      	movs	r3, #1
 80038c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80038c8:	4b0b      	ldr	r3, [pc, #44]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f023 0207 	bic.w	r2, r3, #7
 80038d0:	4909      	ldr	r1, [pc, #36]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038d8:	4b07      	ldr	r3, [pc, #28]	; (80038f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d001      	beq.n	80038ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e000      	b.n	80038ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40022000 	.word	0x40022000

080038fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003904:	2300      	movs	r3, #0
 8003906:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003908:	2300      	movs	r3, #0
 800390a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003914:	2b00      	cmp	r3, #0
 8003916:	d041      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800391c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003920:	d02a      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003922:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003926:	d824      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003928:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800392c:	d008      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800392e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003932:	d81e      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d00a      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003938:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800393c:	d010      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800393e:	e018      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003940:	4b86      	ldr	r3, [pc, #536]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	4a85      	ldr	r2, [pc, #532]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800394c:	e015      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fabb 	bl	8003ed0 <RCCEx_PLLSAI1_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800395e:	e00c      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3320      	adds	r3, #32
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f000 fba6 	bl	80040b8 <RCCEx_PLLSAI2_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003970:	e003      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	74fb      	strb	r3, [r7, #19]
      break;
 8003976:	e000      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003978:	bf00      	nop
    }

    if(ret == HAL_OK)
 800397a:	7cfb      	ldrb	r3, [r7, #19]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10b      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003980:	4b76      	ldr	r3, [pc, #472]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003986:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800398e:	4973      	ldr	r1, [pc, #460]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003990:	4313      	orrs	r3, r2
 8003992:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003996:	e001      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003998:	7cfb      	ldrb	r3, [r7, #19]
 800399a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d041      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039b0:	d02a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80039b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039b6:	d824      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039bc:	d008      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80039be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039c2:	d81e      	bhi.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80039c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039cc:	d010      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039ce:	e018      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039d0:	4b62      	ldr	r3, [pc, #392]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4a61      	ldr	r2, [pc, #388]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039dc:	e015      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3304      	adds	r3, #4
 80039e2:	2100      	movs	r1, #0
 80039e4:	4618      	mov	r0, r3
 80039e6:	f000 fa73 	bl	8003ed0 <RCCEx_PLLSAI1_Config>
 80039ea:	4603      	mov	r3, r0
 80039ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039ee:	e00c      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3320      	adds	r3, #32
 80039f4:	2100      	movs	r1, #0
 80039f6:	4618      	mov	r0, r3
 80039f8:	f000 fb5e 	bl	80040b8 <RCCEx_PLLSAI2_Config>
 80039fc:	4603      	mov	r3, r0
 80039fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003a00:	e003      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	74fb      	strb	r3, [r7, #19]
      break;
 8003a06:	e000      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a0a:	7cfb      	ldrb	r3, [r7, #19]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10b      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a10:	4b52      	ldr	r3, [pc, #328]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a1e:	494f      	ldr	r1, [pc, #316]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003a26:	e001      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a28:	7cfb      	ldrb	r3, [r7, #19]
 8003a2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 80a0 	beq.w	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a3e:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00d      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a54:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a58:	4a40      	ldr	r2, [pc, #256]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a5e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a60:	4b3e      	ldr	r3, [pc, #248]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a70:	4b3b      	ldr	r3, [pc, #236]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a3a      	ldr	r2, [pc, #232]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a7c:	f7fd fa2a 	bl	8000ed4 <HAL_GetTick>
 8003a80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a82:	e009      	b.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a84:	f7fd fa26 	bl	8000ed4 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d902      	bls.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	74fb      	strb	r3, [r7, #19]
        break;
 8003a96:	e005      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a98:	4b31      	ldr	r3, [pc, #196]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d0ef      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d15c      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003aaa:	4b2c      	ldr	r3, [pc, #176]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ab4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01f      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d019      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ac8:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ad4:	4b21      	ldr	r3, [pc, #132]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ada:	4a20      	ldr	r2, [pc, #128]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	4a1c      	ldr	r2, [pc, #112]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003af4:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d016      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b06:	f7fd f9e5 	bl	8000ed4 <HAL_GetTick>
 8003b0a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b0c:	e00b      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b0e:	f7fd f9e1 	bl	8000ed4 <HAL_GetTick>
 8003b12:	4602      	mov	r2, r0
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d902      	bls.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	74fb      	strb	r3, [r7, #19]
            break;
 8003b24:	e006      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b26:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0ec      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b34:	7cfb      	ldrb	r3, [r7, #19]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10c      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b3a:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b4a:	4904      	ldr	r1, [pc, #16]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b52:	e009      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b54:	7cfb      	ldrb	r3, [r7, #19]
 8003b56:	74bb      	strb	r3, [r7, #18]
 8003b58:	e006      	b.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b68:	7c7b      	ldrb	r3, [r7, #17]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d105      	bne.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b6e:	4b9e      	ldr	r3, [pc, #632]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b72:	4a9d      	ldr	r2, [pc, #628]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b86:	4b98      	ldr	r3, [pc, #608]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8c:	f023 0203 	bic.w	r2, r3, #3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b94:	4994      	ldr	r1, [pc, #592]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0302 	and.w	r3, r3, #2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ba8:	4b8f      	ldr	r3, [pc, #572]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bae:	f023 020c 	bic.w	r2, r3, #12
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb6:	498c      	ldr	r1, [pc, #560]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bca:	4b87      	ldr	r3, [pc, #540]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	4983      	ldr	r1, [pc, #524]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bec:	4b7e      	ldr	r3, [pc, #504]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bfa:	497b      	ldr	r1, [pc, #492]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0310 	and.w	r3, r3, #16
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c0e:	4b76      	ldr	r3, [pc, #472]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c1c:	4972      	ldr	r1, [pc, #456]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c30:	4b6d      	ldr	r3, [pc, #436]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3e:	496a      	ldr	r1, [pc, #424]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00a      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c52:	4b65      	ldr	r3, [pc, #404]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	4961      	ldr	r1, [pc, #388]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d00a      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c74:	4b5c      	ldr	r3, [pc, #368]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c82:	4959      	ldr	r1, [pc, #356]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00a      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c96:	4b54      	ldr	r3, [pc, #336]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca4:	4950      	ldr	r1, [pc, #320]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00a      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cb8:	4b4b      	ldr	r3, [pc, #300]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc6:	4948      	ldr	r1, [pc, #288]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00a      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cda:	4b43      	ldr	r3, [pc, #268]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce8:	493f      	ldr	r1, [pc, #252]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d028      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cfc:	4b3a      	ldr	r3, [pc, #232]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d0a:	4937      	ldr	r1, [pc, #220]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d1a:	d106      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d1c:	4b32      	ldr	r3, [pc, #200]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4a31      	ldr	r2, [pc, #196]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d26:	60d3      	str	r3, [r2, #12]
 8003d28:	e011      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d32:	d10c      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3304      	adds	r3, #4
 8003d38:	2101      	movs	r1, #1
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f8c8 	bl	8003ed0 <RCCEx_PLLSAI1_Config>
 8003d40:	4603      	mov	r3, r0
 8003d42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d44:	7cfb      	ldrb	r3, [r7, #19]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d028      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d5a:	4b23      	ldr	r3, [pc, #140]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	491f      	ldr	r1, [pc, #124]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d78:	d106      	bne.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d7a:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	4a1a      	ldr	r2, [pc, #104]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d84:	60d3      	str	r3, [r2, #12]
 8003d86:	e011      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d90:	d10c      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3304      	adds	r3, #4
 8003d96:	2101      	movs	r1, #1
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 f899 	bl	8003ed0 <RCCEx_PLLSAI1_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003da2:	7cfb      	ldrb	r3, [r7, #19]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003da8:	7cfb      	ldrb	r3, [r7, #19]
 8003daa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d02b      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc6:	4908      	ldr	r1, [pc, #32]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd6:	d109      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dd8:	4b03      	ldr	r3, [pc, #12]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4a02      	ldr	r2, [pc, #8]	; (8003de8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003de2:	60d3      	str	r3, [r2, #12]
 8003de4:	e014      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	3304      	adds	r3, #4
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 f867 	bl	8003ed0 <RCCEx_PLLSAI1_Config>
 8003e02:	4603      	mov	r3, r0
 8003e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e06:	7cfb      	ldrb	r3, [r7, #19]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003e0c:	7cfb      	ldrb	r3, [r7, #19]
 8003e0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d02f      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e1c:	4b2b      	ldr	r3, [pc, #172]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e2a:	4928      	ldr	r1, [pc, #160]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e3a:	d10d      	bne.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	2102      	movs	r1, #2
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 f844 	bl	8003ed0 <RCCEx_PLLSAI1_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e4c:	7cfb      	ldrb	r3, [r7, #19]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d014      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e52:	7cfb      	ldrb	r3, [r7, #19]
 8003e54:	74bb      	strb	r3, [r7, #18]
 8003e56:	e011      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e60:	d10c      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	3320      	adds	r3, #32
 8003e66:	2102      	movs	r1, #2
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f925 	bl	80040b8 <RCCEx_PLLSAI2_Config>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e72:	7cfb      	ldrb	r3, [r7, #19]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e78:	7cfb      	ldrb	r3, [r7, #19]
 8003e7a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e88:	4b10      	ldr	r3, [pc, #64]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e8e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e96:	490d      	ldr	r1, [pc, #52]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00b      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003eaa:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eba:	4904      	ldr	r1, [pc, #16]	; (8003ecc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003ec2:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40021000 	.word	0x40021000

08003ed0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ede:	4b75      	ldr	r3, [pc, #468]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d018      	beq.n	8003f1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003eea:	4b72      	ldr	r3, [pc, #456]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f003 0203 	and.w	r2, r3, #3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d10d      	bne.n	8003f16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
       ||
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f02:	4b6c      	ldr	r3, [pc, #432]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
       ||
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d047      	beq.n	8003fa6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
 8003f1a:	e044      	b.n	8003fa6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d018      	beq.n	8003f56 <RCCEx_PLLSAI1_Config+0x86>
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d825      	bhi.n	8003f74 <RCCEx_PLLSAI1_Config+0xa4>
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d002      	beq.n	8003f32 <RCCEx_PLLSAI1_Config+0x62>
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d009      	beq.n	8003f44 <RCCEx_PLLSAI1_Config+0x74>
 8003f30:	e020      	b.n	8003f74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f32:	4b60      	ldr	r3, [pc, #384]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d11d      	bne.n	8003f7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f42:	e01a      	b.n	8003f7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f44:	4b5b      	ldr	r3, [pc, #364]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d116      	bne.n	8003f7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f54:	e013      	b.n	8003f7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f56:	4b57      	ldr	r3, [pc, #348]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10f      	bne.n	8003f82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f62:	4b54      	ldr	r3, [pc, #336]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f72:	e006      	b.n	8003f82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
      break;
 8003f78:	e004      	b.n	8003f84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f7a:	bf00      	nop
 8003f7c:	e002      	b.n	8003f84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f7e:	bf00      	nop
 8003f80:	e000      	b.n	8003f84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f82:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10d      	bne.n	8003fa6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f8a:	4b4a      	ldr	r3, [pc, #296]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6819      	ldr	r1, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	430b      	orrs	r3, r1
 8003fa0:	4944      	ldr	r1, [pc, #272]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d17d      	bne.n	80040a8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003fac:	4b41      	ldr	r3, [pc, #260]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a40      	ldr	r2, [pc, #256]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb8:	f7fc ff8c 	bl	8000ed4 <HAL_GetTick>
 8003fbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fbe:	e009      	b.n	8003fd4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fc0:	f7fc ff88 	bl	8000ed4 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d902      	bls.n	8003fd4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	73fb      	strb	r3, [r7, #15]
        break;
 8003fd2:	e005      	b.n	8003fe0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fd4:	4b37      	ldr	r3, [pc, #220]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1ef      	bne.n	8003fc0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fe0:	7bfb      	ldrb	r3, [r7, #15]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d160      	bne.n	80040a8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d111      	bne.n	8004010 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fec:	4b31      	ldr	r3, [pc, #196]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6892      	ldr	r2, [r2, #8]
 8003ffc:	0211      	lsls	r1, r2, #8
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	68d2      	ldr	r2, [r2, #12]
 8004002:	0912      	lsrs	r2, r2, #4
 8004004:	0452      	lsls	r2, r2, #17
 8004006:	430a      	orrs	r2, r1
 8004008:	492a      	ldr	r1, [pc, #168]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400a:	4313      	orrs	r3, r2
 800400c:	610b      	str	r3, [r1, #16]
 800400e:	e027      	b.n	8004060 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d112      	bne.n	800403c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004016:	4b27      	ldr	r3, [pc, #156]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800401e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6892      	ldr	r2, [r2, #8]
 8004026:	0211      	lsls	r1, r2, #8
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	6912      	ldr	r2, [r2, #16]
 800402c:	0852      	lsrs	r2, r2, #1
 800402e:	3a01      	subs	r2, #1
 8004030:	0552      	lsls	r2, r2, #21
 8004032:	430a      	orrs	r2, r1
 8004034:	491f      	ldr	r1, [pc, #124]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004036:	4313      	orrs	r3, r2
 8004038:	610b      	str	r3, [r1, #16]
 800403a:	e011      	b.n	8004060 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800403c:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004044:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6892      	ldr	r2, [r2, #8]
 800404c:	0211      	lsls	r1, r2, #8
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6952      	ldr	r2, [r2, #20]
 8004052:	0852      	lsrs	r2, r2, #1
 8004054:	3a01      	subs	r2, #1
 8004056:	0652      	lsls	r2, r2, #25
 8004058:	430a      	orrs	r2, r1
 800405a:	4916      	ldr	r1, [pc, #88]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405c:	4313      	orrs	r3, r2
 800405e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004060:	4b14      	ldr	r3, [pc, #80]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a13      	ldr	r2, [pc, #76]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004066:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800406a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406c:	f7fc ff32 	bl	8000ed4 <HAL_GetTick>
 8004070:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004072:	e009      	b.n	8004088 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004074:	f7fc ff2e 	bl	8000ed4 <HAL_GetTick>
 8004078:	4602      	mov	r2, r0
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	1ad3      	subs	r3, r2, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d902      	bls.n	8004088 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	73fb      	strb	r3, [r7, #15]
          break;
 8004086:	e005      	b.n	8004094 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004088:	4b0a      	ldr	r3, [pc, #40]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0ef      	beq.n	8004074 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004094:	7bfb      	ldrb	r3, [r7, #15]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d106      	bne.n	80040a8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800409a:	4b06      	ldr	r3, [pc, #24]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800409c:	691a      	ldr	r2, [r3, #16]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	4904      	ldr	r1, [pc, #16]	; (80040b4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80040a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40021000 	.word	0x40021000

080040b8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80040c6:	4b6a      	ldr	r3, [pc, #424]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	f003 0303 	and.w	r3, r3, #3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d018      	beq.n	8004104 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040d2:	4b67      	ldr	r3, [pc, #412]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0203 	and.w	r2, r3, #3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d10d      	bne.n	80040fe <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
       ||
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040ea:	4b61      	ldr	r3, [pc, #388]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	091b      	lsrs	r3, r3, #4
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
       ||
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d047      	beq.n	800418e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	73fb      	strb	r3, [r7, #15]
 8004102:	e044      	b.n	800418e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b03      	cmp	r3, #3
 800410a:	d018      	beq.n	800413e <RCCEx_PLLSAI2_Config+0x86>
 800410c:	2b03      	cmp	r3, #3
 800410e:	d825      	bhi.n	800415c <RCCEx_PLLSAI2_Config+0xa4>
 8004110:	2b01      	cmp	r3, #1
 8004112:	d002      	beq.n	800411a <RCCEx_PLLSAI2_Config+0x62>
 8004114:	2b02      	cmp	r3, #2
 8004116:	d009      	beq.n	800412c <RCCEx_PLLSAI2_Config+0x74>
 8004118:	e020      	b.n	800415c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800411a:	4b55      	ldr	r3, [pc, #340]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d11d      	bne.n	8004162 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800412a:	e01a      	b.n	8004162 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800412c:	4b50      	ldr	r3, [pc, #320]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004134:	2b00      	cmp	r3, #0
 8004136:	d116      	bne.n	8004166 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800413c:	e013      	b.n	8004166 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800413e:	4b4c      	ldr	r3, [pc, #304]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10f      	bne.n	800416a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800414a:	4b49      	ldr	r3, [pc, #292]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800415a:	e006      	b.n	800416a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
      break;
 8004160:	e004      	b.n	800416c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004162:	bf00      	nop
 8004164:	e002      	b.n	800416c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004166:	bf00      	nop
 8004168:	e000      	b.n	800416c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800416a:	bf00      	nop
    }

    if(status == HAL_OK)
 800416c:	7bfb      	ldrb	r3, [r7, #15]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10d      	bne.n	800418e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004172:	4b3f      	ldr	r3, [pc, #252]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6819      	ldr	r1, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	3b01      	subs	r3, #1
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	430b      	orrs	r3, r1
 8004188:	4939      	ldr	r1, [pc, #228]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 800418a:	4313      	orrs	r3, r2
 800418c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800418e:	7bfb      	ldrb	r3, [r7, #15]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d167      	bne.n	8004264 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004194:	4b36      	ldr	r3, [pc, #216]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a35      	ldr	r2, [pc, #212]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 800419a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800419e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041a0:	f7fc fe98 	bl	8000ed4 <HAL_GetTick>
 80041a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041a6:	e009      	b.n	80041bc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80041a8:	f7fc fe94 	bl	8000ed4 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d902      	bls.n	80041bc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	73fb      	strb	r3, [r7, #15]
        break;
 80041ba:	e005      	b.n	80041c8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80041bc:	4b2c      	ldr	r3, [pc, #176]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ef      	bne.n	80041a8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d14a      	bne.n	8004264 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d111      	bne.n	80041f8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041d4:	4b26      	ldr	r3, [pc, #152]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041d6:	695b      	ldr	r3, [r3, #20]
 80041d8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80041dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6892      	ldr	r2, [r2, #8]
 80041e4:	0211      	lsls	r1, r2, #8
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68d2      	ldr	r2, [r2, #12]
 80041ea:	0912      	lsrs	r2, r2, #4
 80041ec:	0452      	lsls	r2, r2, #17
 80041ee:	430a      	orrs	r2, r1
 80041f0:	491f      	ldr	r1, [pc, #124]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	614b      	str	r3, [r1, #20]
 80041f6:	e011      	b.n	800421c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041f8:	4b1d      	ldr	r3, [pc, #116]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041fa:	695b      	ldr	r3, [r3, #20]
 80041fc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004200:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6892      	ldr	r2, [r2, #8]
 8004208:	0211      	lsls	r1, r2, #8
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6912      	ldr	r2, [r2, #16]
 800420e:	0852      	lsrs	r2, r2, #1
 8004210:	3a01      	subs	r2, #1
 8004212:	0652      	lsls	r2, r2, #25
 8004214:	430a      	orrs	r2, r1
 8004216:	4916      	ldr	r1, [pc, #88]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004218:	4313      	orrs	r3, r2
 800421a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800421c:	4b14      	ldr	r3, [pc, #80]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a13      	ldr	r2, [pc, #76]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004226:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004228:	f7fc fe54 	bl	8000ed4 <HAL_GetTick>
 800422c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800422e:	e009      	b.n	8004244 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004230:	f7fc fe50 	bl	8000ed4 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	2b02      	cmp	r3, #2
 800423c:	d902      	bls.n	8004244 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	73fb      	strb	r3, [r7, #15]
          break;
 8004242:	e005      	b.n	8004250 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004244:	4b0a      	ldr	r3, [pc, #40]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d0ef      	beq.n	8004230 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004250:	7bfb      	ldrb	r3, [r7, #15]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d106      	bne.n	8004264 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004256:	4b06      	ldr	r3, [pc, #24]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004258:	695a      	ldr	r2, [r3, #20]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	4904      	ldr	r1, [pc, #16]	; (8004270 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004260:	4313      	orrs	r3, r2
 8004262:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004264:	7bfb      	ldrb	r3, [r7, #15]
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40021000 	.word	0x40021000

08004274 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b082      	sub	sp, #8
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e040      	b.n	8004308 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fc fcb4 	bl	8000c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2224      	movs	r2, #36	; 0x24
 80042a0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f022 0201 	bic.w	r2, r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fb6a 	bl	8004994 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f8af 	bl	8004424 <UART_SetConfig>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e01b      	b.n	8004308 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685a      	ldr	r2, [r3, #4]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fbe9 	bl	8004ad8 <UART_CheckIdleState>
 8004306:	4603      	mov	r3, r0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08a      	sub	sp, #40	; 0x28
 8004314:	af02      	add	r7, sp, #8
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	4613      	mov	r3, r2
 800431e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004324:	2b20      	cmp	r3, #32
 8004326:	d178      	bne.n	800441a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_UART_Transmit+0x24>
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e071      	b.n	800441c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2221      	movs	r2, #33	; 0x21
 8004344:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004346:	f7fc fdc5 	bl	8000ed4 <HAL_GetTick>
 800434a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	88fa      	ldrh	r2, [r7, #6]
 8004350:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	88fa      	ldrh	r2, [r7, #6]
 8004358:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004364:	d108      	bne.n	8004378 <HAL_UART_Transmit+0x68>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d104      	bne.n	8004378 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800436e:	2300      	movs	r3, #0
 8004370:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	61bb      	str	r3, [r7, #24]
 8004376:	e003      	b.n	8004380 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800437c:	2300      	movs	r3, #0
 800437e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004380:	e030      	b.n	80043e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2200      	movs	r2, #0
 800438a:	2180      	movs	r1, #128	; 0x80
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 fc4b 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d004      	beq.n	80043a2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e03c      	b.n	800441c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10b      	bne.n	80043c0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	881a      	ldrh	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b4:	b292      	uxth	r2, r2
 80043b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	3302      	adds	r3, #2
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	e008      	b.n	80043d2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	781a      	ldrb	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	b292      	uxth	r2, r2
 80043ca:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	3301      	adds	r3, #1
 80043d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1c8      	bne.n	8004382 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2200      	movs	r2, #0
 80043f8:	2140      	movs	r1, #64	; 0x40
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fc14 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e005      	b.n	800441c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2220      	movs	r2, #32
 8004414:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004416:	2300      	movs	r3, #0
 8004418:	e000      	b.n	800441c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800441a:	2302      	movs	r3, #2
  }
}
 800441c:	4618      	mov	r0, r3
 800441e:	3720      	adds	r7, #32
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004424:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004428:	b08a      	sub	sp, #40	; 0x28
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800442e:	2300      	movs	r3, #0
 8004430:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	431a      	orrs	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	431a      	orrs	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	69db      	ldr	r3, [r3, #28]
 8004448:	4313      	orrs	r3, r2
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	4ba4      	ldr	r3, [pc, #656]	; (80046e4 <UART_SetConfig+0x2c0>)
 8004454:	4013      	ands	r3, r2
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800445c:	430b      	orrs	r3, r1
 800445e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a99      	ldr	r2, [pc, #612]	; (80046e8 <UART_SetConfig+0x2c4>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d004      	beq.n	8004490 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800448c:	4313      	orrs	r3, r2
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a0:	430a      	orrs	r2, r1
 80044a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a90      	ldr	r2, [pc, #576]	; (80046ec <UART_SetConfig+0x2c8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d126      	bne.n	80044fc <UART_SetConfig+0xd8>
 80044ae:	4b90      	ldr	r3, [pc, #576]	; (80046f0 <UART_SetConfig+0x2cc>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	2b03      	cmp	r3, #3
 80044ba:	d81b      	bhi.n	80044f4 <UART_SetConfig+0xd0>
 80044bc:	a201      	add	r2, pc, #4	; (adr r2, 80044c4 <UART_SetConfig+0xa0>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	080044d5 	.word	0x080044d5
 80044c8:	080044e5 	.word	0x080044e5
 80044cc:	080044dd 	.word	0x080044dd
 80044d0:	080044ed 	.word	0x080044ed
 80044d4:	2301      	movs	r3, #1
 80044d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044da:	e116      	b.n	800470a <UART_SetConfig+0x2e6>
 80044dc:	2302      	movs	r3, #2
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e2:	e112      	b.n	800470a <UART_SetConfig+0x2e6>
 80044e4:	2304      	movs	r3, #4
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ea:	e10e      	b.n	800470a <UART_SetConfig+0x2e6>
 80044ec:	2308      	movs	r3, #8
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f2:	e10a      	b.n	800470a <UART_SetConfig+0x2e6>
 80044f4:	2310      	movs	r3, #16
 80044f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fa:	e106      	b.n	800470a <UART_SetConfig+0x2e6>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a7c      	ldr	r2, [pc, #496]	; (80046f4 <UART_SetConfig+0x2d0>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d138      	bne.n	8004578 <UART_SetConfig+0x154>
 8004506:	4b7a      	ldr	r3, [pc, #488]	; (80046f0 <UART_SetConfig+0x2cc>)
 8004508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800450c:	f003 030c 	and.w	r3, r3, #12
 8004510:	2b0c      	cmp	r3, #12
 8004512:	d82d      	bhi.n	8004570 <UART_SetConfig+0x14c>
 8004514:	a201      	add	r2, pc, #4	; (adr r2, 800451c <UART_SetConfig+0xf8>)
 8004516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451a:	bf00      	nop
 800451c:	08004551 	.word	0x08004551
 8004520:	08004571 	.word	0x08004571
 8004524:	08004571 	.word	0x08004571
 8004528:	08004571 	.word	0x08004571
 800452c:	08004561 	.word	0x08004561
 8004530:	08004571 	.word	0x08004571
 8004534:	08004571 	.word	0x08004571
 8004538:	08004571 	.word	0x08004571
 800453c:	08004559 	.word	0x08004559
 8004540:	08004571 	.word	0x08004571
 8004544:	08004571 	.word	0x08004571
 8004548:	08004571 	.word	0x08004571
 800454c:	08004569 	.word	0x08004569
 8004550:	2300      	movs	r3, #0
 8004552:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004556:	e0d8      	b.n	800470a <UART_SetConfig+0x2e6>
 8004558:	2302      	movs	r3, #2
 800455a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800455e:	e0d4      	b.n	800470a <UART_SetConfig+0x2e6>
 8004560:	2304      	movs	r3, #4
 8004562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004566:	e0d0      	b.n	800470a <UART_SetConfig+0x2e6>
 8004568:	2308      	movs	r3, #8
 800456a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800456e:	e0cc      	b.n	800470a <UART_SetConfig+0x2e6>
 8004570:	2310      	movs	r3, #16
 8004572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004576:	e0c8      	b.n	800470a <UART_SetConfig+0x2e6>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a5e      	ldr	r2, [pc, #376]	; (80046f8 <UART_SetConfig+0x2d4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d125      	bne.n	80045ce <UART_SetConfig+0x1aa>
 8004582:	4b5b      	ldr	r3, [pc, #364]	; (80046f0 <UART_SetConfig+0x2cc>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004588:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800458c:	2b30      	cmp	r3, #48	; 0x30
 800458e:	d016      	beq.n	80045be <UART_SetConfig+0x19a>
 8004590:	2b30      	cmp	r3, #48	; 0x30
 8004592:	d818      	bhi.n	80045c6 <UART_SetConfig+0x1a2>
 8004594:	2b20      	cmp	r3, #32
 8004596:	d00a      	beq.n	80045ae <UART_SetConfig+0x18a>
 8004598:	2b20      	cmp	r3, #32
 800459a:	d814      	bhi.n	80045c6 <UART_SetConfig+0x1a2>
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <UART_SetConfig+0x182>
 80045a0:	2b10      	cmp	r3, #16
 80045a2:	d008      	beq.n	80045b6 <UART_SetConfig+0x192>
 80045a4:	e00f      	b.n	80045c6 <UART_SetConfig+0x1a2>
 80045a6:	2300      	movs	r3, #0
 80045a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ac:	e0ad      	b.n	800470a <UART_SetConfig+0x2e6>
 80045ae:	2302      	movs	r3, #2
 80045b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045b4:	e0a9      	b.n	800470a <UART_SetConfig+0x2e6>
 80045b6:	2304      	movs	r3, #4
 80045b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045bc:	e0a5      	b.n	800470a <UART_SetConfig+0x2e6>
 80045be:	2308      	movs	r3, #8
 80045c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045c4:	e0a1      	b.n	800470a <UART_SetConfig+0x2e6>
 80045c6:	2310      	movs	r3, #16
 80045c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045cc:	e09d      	b.n	800470a <UART_SetConfig+0x2e6>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a4a      	ldr	r2, [pc, #296]	; (80046fc <UART_SetConfig+0x2d8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d125      	bne.n	8004624 <UART_SetConfig+0x200>
 80045d8:	4b45      	ldr	r3, [pc, #276]	; (80046f0 <UART_SetConfig+0x2cc>)
 80045da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045e2:	2bc0      	cmp	r3, #192	; 0xc0
 80045e4:	d016      	beq.n	8004614 <UART_SetConfig+0x1f0>
 80045e6:	2bc0      	cmp	r3, #192	; 0xc0
 80045e8:	d818      	bhi.n	800461c <UART_SetConfig+0x1f8>
 80045ea:	2b80      	cmp	r3, #128	; 0x80
 80045ec:	d00a      	beq.n	8004604 <UART_SetConfig+0x1e0>
 80045ee:	2b80      	cmp	r3, #128	; 0x80
 80045f0:	d814      	bhi.n	800461c <UART_SetConfig+0x1f8>
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <UART_SetConfig+0x1d8>
 80045f6:	2b40      	cmp	r3, #64	; 0x40
 80045f8:	d008      	beq.n	800460c <UART_SetConfig+0x1e8>
 80045fa:	e00f      	b.n	800461c <UART_SetConfig+0x1f8>
 80045fc:	2300      	movs	r3, #0
 80045fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004602:	e082      	b.n	800470a <UART_SetConfig+0x2e6>
 8004604:	2302      	movs	r3, #2
 8004606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460a:	e07e      	b.n	800470a <UART_SetConfig+0x2e6>
 800460c:	2304      	movs	r3, #4
 800460e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004612:	e07a      	b.n	800470a <UART_SetConfig+0x2e6>
 8004614:	2308      	movs	r3, #8
 8004616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800461a:	e076      	b.n	800470a <UART_SetConfig+0x2e6>
 800461c:	2310      	movs	r3, #16
 800461e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004622:	e072      	b.n	800470a <UART_SetConfig+0x2e6>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a35      	ldr	r2, [pc, #212]	; (8004700 <UART_SetConfig+0x2dc>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d12a      	bne.n	8004684 <UART_SetConfig+0x260>
 800462e:	4b30      	ldr	r3, [pc, #192]	; (80046f0 <UART_SetConfig+0x2cc>)
 8004630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004634:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004638:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800463c:	d01a      	beq.n	8004674 <UART_SetConfig+0x250>
 800463e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004642:	d81b      	bhi.n	800467c <UART_SetConfig+0x258>
 8004644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004648:	d00c      	beq.n	8004664 <UART_SetConfig+0x240>
 800464a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800464e:	d815      	bhi.n	800467c <UART_SetConfig+0x258>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <UART_SetConfig+0x238>
 8004654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004658:	d008      	beq.n	800466c <UART_SetConfig+0x248>
 800465a:	e00f      	b.n	800467c <UART_SetConfig+0x258>
 800465c:	2300      	movs	r3, #0
 800465e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004662:	e052      	b.n	800470a <UART_SetConfig+0x2e6>
 8004664:	2302      	movs	r3, #2
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466a:	e04e      	b.n	800470a <UART_SetConfig+0x2e6>
 800466c:	2304      	movs	r3, #4
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004672:	e04a      	b.n	800470a <UART_SetConfig+0x2e6>
 8004674:	2308      	movs	r3, #8
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467a:	e046      	b.n	800470a <UART_SetConfig+0x2e6>
 800467c:	2310      	movs	r3, #16
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004682:	e042      	b.n	800470a <UART_SetConfig+0x2e6>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a17      	ldr	r2, [pc, #92]	; (80046e8 <UART_SetConfig+0x2c4>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d13a      	bne.n	8004704 <UART_SetConfig+0x2e0>
 800468e:	4b18      	ldr	r3, [pc, #96]	; (80046f0 <UART_SetConfig+0x2cc>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004698:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800469c:	d01a      	beq.n	80046d4 <UART_SetConfig+0x2b0>
 800469e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80046a2:	d81b      	bhi.n	80046dc <UART_SetConfig+0x2b8>
 80046a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046a8:	d00c      	beq.n	80046c4 <UART_SetConfig+0x2a0>
 80046aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ae:	d815      	bhi.n	80046dc <UART_SetConfig+0x2b8>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <UART_SetConfig+0x298>
 80046b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b8:	d008      	beq.n	80046cc <UART_SetConfig+0x2a8>
 80046ba:	e00f      	b.n	80046dc <UART_SetConfig+0x2b8>
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046c2:	e022      	b.n	800470a <UART_SetConfig+0x2e6>
 80046c4:	2302      	movs	r3, #2
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ca:	e01e      	b.n	800470a <UART_SetConfig+0x2e6>
 80046cc:	2304      	movs	r3, #4
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046d2:	e01a      	b.n	800470a <UART_SetConfig+0x2e6>
 80046d4:	2308      	movs	r3, #8
 80046d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046da:	e016      	b.n	800470a <UART_SetConfig+0x2e6>
 80046dc:	2310      	movs	r3, #16
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046e2:	e012      	b.n	800470a <UART_SetConfig+0x2e6>
 80046e4:	efff69f3 	.word	0xefff69f3
 80046e8:	40008000 	.word	0x40008000
 80046ec:	40013800 	.word	0x40013800
 80046f0:	40021000 	.word	0x40021000
 80046f4:	40004400 	.word	0x40004400
 80046f8:	40004800 	.word	0x40004800
 80046fc:	40004c00 	.word	0x40004c00
 8004700:	40005000 	.word	0x40005000
 8004704:	2310      	movs	r3, #16
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a9f      	ldr	r2, [pc, #636]	; (800498c <UART_SetConfig+0x568>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d17a      	bne.n	800480a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004714:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004718:	2b08      	cmp	r3, #8
 800471a:	d824      	bhi.n	8004766 <UART_SetConfig+0x342>
 800471c:	a201      	add	r2, pc, #4	; (adr r2, 8004724 <UART_SetConfig+0x300>)
 800471e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004722:	bf00      	nop
 8004724:	08004749 	.word	0x08004749
 8004728:	08004767 	.word	0x08004767
 800472c:	08004751 	.word	0x08004751
 8004730:	08004767 	.word	0x08004767
 8004734:	08004757 	.word	0x08004757
 8004738:	08004767 	.word	0x08004767
 800473c:	08004767 	.word	0x08004767
 8004740:	08004767 	.word	0x08004767
 8004744:	0800475f 	.word	0x0800475f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004748:	f7ff f84c 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 800474c:	61f8      	str	r0, [r7, #28]
        break;
 800474e:	e010      	b.n	8004772 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004750:	4b8f      	ldr	r3, [pc, #572]	; (8004990 <UART_SetConfig+0x56c>)
 8004752:	61fb      	str	r3, [r7, #28]
        break;
 8004754:	e00d      	b.n	8004772 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004756:	f7fe ffad 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 800475a:	61f8      	str	r0, [r7, #28]
        break;
 800475c:	e009      	b.n	8004772 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800475e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004762:	61fb      	str	r3, [r7, #28]
        break;
 8004764:	e005      	b.n	8004772 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004766:	2300      	movs	r3, #0
 8004768:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004770:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	2b00      	cmp	r3, #0
 8004776:	f000 80fb 	beq.w	8004970 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	4613      	mov	r3, r2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	4413      	add	r3, r2
 8004784:	69fa      	ldr	r2, [r7, #28]
 8004786:	429a      	cmp	r2, r3
 8004788:	d305      	bcc.n	8004796 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004790:	69fa      	ldr	r2, [r7, #28]
 8004792:	429a      	cmp	r2, r3
 8004794:	d903      	bls.n	800479e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800479c:	e0e8      	b.n	8004970 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	2200      	movs	r2, #0
 80047a2:	461c      	mov	r4, r3
 80047a4:	4615      	mov	r5, r2
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	022b      	lsls	r3, r5, #8
 80047b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80047b4:	0222      	lsls	r2, r4, #8
 80047b6:	68f9      	ldr	r1, [r7, #12]
 80047b8:	6849      	ldr	r1, [r1, #4]
 80047ba:	0849      	lsrs	r1, r1, #1
 80047bc:	2000      	movs	r0, #0
 80047be:	4688      	mov	r8, r1
 80047c0:	4681      	mov	r9, r0
 80047c2:	eb12 0a08 	adds.w	sl, r2, r8
 80047c6:	eb43 0b09 	adc.w	fp, r3, r9
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	603b      	str	r3, [r7, #0]
 80047d2:	607a      	str	r2, [r7, #4]
 80047d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047d8:	4650      	mov	r0, sl
 80047da:	4659      	mov	r1, fp
 80047dc:	f7fb fd50 	bl	8000280 <__aeabi_uldivmod>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4613      	mov	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ee:	d308      	bcc.n	8004802 <UART_SetConfig+0x3de>
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047f6:	d204      	bcs.n	8004802 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	60da      	str	r2, [r3, #12]
 8004800:	e0b6      	b.n	8004970 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004808:	e0b2      	b.n	8004970 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004812:	d15e      	bne.n	80048d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004814:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004818:	2b08      	cmp	r3, #8
 800481a:	d828      	bhi.n	800486e <UART_SetConfig+0x44a>
 800481c:	a201      	add	r2, pc, #4	; (adr r2, 8004824 <UART_SetConfig+0x400>)
 800481e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004822:	bf00      	nop
 8004824:	08004849 	.word	0x08004849
 8004828:	08004851 	.word	0x08004851
 800482c:	08004859 	.word	0x08004859
 8004830:	0800486f 	.word	0x0800486f
 8004834:	0800485f 	.word	0x0800485f
 8004838:	0800486f 	.word	0x0800486f
 800483c:	0800486f 	.word	0x0800486f
 8004840:	0800486f 	.word	0x0800486f
 8004844:	08004867 	.word	0x08004867
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004848:	f7fe ffcc 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 800484c:	61f8      	str	r0, [r7, #28]
        break;
 800484e:	e014      	b.n	800487a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004850:	f7fe ffde 	bl	8003810 <HAL_RCC_GetPCLK2Freq>
 8004854:	61f8      	str	r0, [r7, #28]
        break;
 8004856:	e010      	b.n	800487a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004858:	4b4d      	ldr	r3, [pc, #308]	; (8004990 <UART_SetConfig+0x56c>)
 800485a:	61fb      	str	r3, [r7, #28]
        break;
 800485c:	e00d      	b.n	800487a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800485e:	f7fe ff29 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 8004862:	61f8      	str	r0, [r7, #28]
        break;
 8004864:	e009      	b.n	800487a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004866:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800486a:	61fb      	str	r3, [r7, #28]
        break;
 800486c:	e005      	b.n	800487a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004878:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d077      	beq.n	8004970 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	005a      	lsls	r2, r3, #1
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	085b      	lsrs	r3, r3, #1
 800488a:	441a      	add	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	2b0f      	cmp	r3, #15
 800489a:	d916      	bls.n	80048ca <UART_SetConfig+0x4a6>
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048a2:	d212      	bcs.n	80048ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	f023 030f 	bic.w	r3, r3, #15
 80048ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	085b      	lsrs	r3, r3, #1
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f003 0307 	and.w	r3, r3, #7
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	8afb      	ldrh	r3, [r7, #22]
 80048bc:	4313      	orrs	r3, r2
 80048be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	8afa      	ldrh	r2, [r7, #22]
 80048c6:	60da      	str	r2, [r3, #12]
 80048c8:	e052      	b.n	8004970 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048d0:	e04e      	b.n	8004970 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d827      	bhi.n	800492a <UART_SetConfig+0x506>
 80048da:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <UART_SetConfig+0x4bc>)
 80048dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e0:	08004905 	.word	0x08004905
 80048e4:	0800490d 	.word	0x0800490d
 80048e8:	08004915 	.word	0x08004915
 80048ec:	0800492b 	.word	0x0800492b
 80048f0:	0800491b 	.word	0x0800491b
 80048f4:	0800492b 	.word	0x0800492b
 80048f8:	0800492b 	.word	0x0800492b
 80048fc:	0800492b 	.word	0x0800492b
 8004900:	08004923 	.word	0x08004923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004904:	f7fe ff6e 	bl	80037e4 <HAL_RCC_GetPCLK1Freq>
 8004908:	61f8      	str	r0, [r7, #28]
        break;
 800490a:	e014      	b.n	8004936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800490c:	f7fe ff80 	bl	8003810 <HAL_RCC_GetPCLK2Freq>
 8004910:	61f8      	str	r0, [r7, #28]
        break;
 8004912:	e010      	b.n	8004936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004914:	4b1e      	ldr	r3, [pc, #120]	; (8004990 <UART_SetConfig+0x56c>)
 8004916:	61fb      	str	r3, [r7, #28]
        break;
 8004918:	e00d      	b.n	8004936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800491a:	f7fe fecb 	bl	80036b4 <HAL_RCC_GetSysClockFreq>
 800491e:	61f8      	str	r0, [r7, #28]
        break;
 8004920:	e009      	b.n	8004936 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004926:	61fb      	str	r3, [r7, #28]
        break;
 8004928:	e005      	b.n	8004936 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004934:	bf00      	nop
    }

    if (pclk != 0U)
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d019      	beq.n	8004970 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	085a      	lsrs	r2, r3, #1
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	441a      	add	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	fbb2 f3f3 	udiv	r3, r2, r3
 800494e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2b0f      	cmp	r3, #15
 8004954:	d909      	bls.n	800496a <UART_SetConfig+0x546>
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495c:	d205      	bcs.n	800496a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60da      	str	r2, [r3, #12]
 8004968:	e002      	b.n	8004970 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800497c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004980:	4618      	mov	r0, r3
 8004982:	3728      	adds	r7, #40	; 0x28
 8004984:	46bd      	mov	sp, r7
 8004986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800498a:	bf00      	nop
 800498c:	40008000 	.word	0x40008000
 8004990:	00f42400 	.word	0x00f42400

08004994 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00a      	beq.n	80049be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00a      	beq.n	80049e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d00a      	beq.n	8004a02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	430a      	orrs	r2, r1
 8004a00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	f003 0304 	and.w	r3, r3, #4
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00a      	beq.n	8004a24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	f003 0310 	and.w	r3, r3, #16
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	f003 0320 	and.w	r3, r3, #32
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00a      	beq.n	8004a68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	430a      	orrs	r2, r1
 8004a66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01a      	beq.n	8004aaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a92:	d10a      	bne.n	8004aaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d00a      	beq.n	8004acc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	605a      	str	r2, [r3, #4]
  }
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b098      	sub	sp, #96	; 0x60
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ae8:	f7fc f9f4 	bl	8000ed4 <HAL_GetTick>
 8004aec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d12e      	bne.n	8004b5a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b04:	2200      	movs	r2, #0
 8004b06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f88c 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d021      	beq.n	8004b5a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1e:	e853 3f00 	ldrex	r3, [r3]
 8004b22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b2a:	653b      	str	r3, [r7, #80]	; 0x50
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	461a      	mov	r2, r3
 8004b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b34:	647b      	str	r3, [r7, #68]	; 0x44
 8004b36:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b3c:	e841 2300 	strex	r3, r2, [r1]
 8004b40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1e6      	bne.n	8004b16 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e062      	b.n	8004c20 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d149      	bne.n	8004bfc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b70:	2200      	movs	r2, #0
 8004b72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f856 	bl	8004c28 <UART_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d03c      	beq.n	8004bfc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ba2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e6      	bne.n	8004b82 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3308      	adds	r3, #8
 8004bba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 0301 	bic.w	r3, r3, #1
 8004bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bd4:	61fa      	str	r2, [r7, #28]
 8004bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	69b9      	ldr	r1, [r7, #24]
 8004bda:	69fa      	ldr	r2, [r7, #28]
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	617b      	str	r3, [r7, #20]
   return(result);
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e5      	bne.n	8004bb4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2220      	movs	r2, #32
 8004bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e011      	b.n	8004c20 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2220      	movs	r2, #32
 8004c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3758      	adds	r7, #88	; 0x58
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	603b      	str	r3, [r7, #0]
 8004c34:	4613      	mov	r3, r2
 8004c36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c38:	e049      	b.n	8004cce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c40:	d045      	beq.n	8004cce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c42:	f7fc f947 	bl	8000ed4 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d302      	bcc.n	8004c58 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e048      	b.n	8004cee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0304 	and.w	r3, r3, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d031      	beq.n	8004cce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69db      	ldr	r3, [r3, #28]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d110      	bne.n	8004c9a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2208      	movs	r2, #8
 8004c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f838 	bl	8004cf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2208      	movs	r2, #8
 8004c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e029      	b.n	8004cee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca8:	d111      	bne.n	8004cce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f000 f81e 	bl	8004cf6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e00f      	b.n	8004cee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	bf0c      	ite	eq
 8004cde:	2301      	moveq	r3, #1
 8004ce0:	2300      	movne	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d0a6      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b095      	sub	sp, #84	; 0x54
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e6      	bne.n	8004cfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3308      	adds	r3, #8
 8004d36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	f023 0301 	bic.w	r3, r3, #1
 8004d46:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e5      	bne.n	8004d30 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d118      	bne.n	8004d9e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f023 0310 	bic.w	r3, r3, #16
 8004d80:	647b      	str	r3, [r7, #68]	; 0x44
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8a:	61bb      	str	r3, [r7, #24]
 8004d8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8e:	6979      	ldr	r1, [r7, #20]
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	613b      	str	r3, [r7, #16]
   return(result);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e6      	bne.n	8004d6c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004db2:	bf00      	nop
 8004db4:	3754      	adds	r7, #84	; 0x54
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <siprintf>:
 8004dc0:	b40e      	push	{r1, r2, r3}
 8004dc2:	b500      	push	{lr}
 8004dc4:	b09c      	sub	sp, #112	; 0x70
 8004dc6:	ab1d      	add	r3, sp, #116	; 0x74
 8004dc8:	9002      	str	r0, [sp, #8]
 8004dca:	9006      	str	r0, [sp, #24]
 8004dcc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004dd0:	4809      	ldr	r0, [pc, #36]	; (8004df8 <siprintf+0x38>)
 8004dd2:	9107      	str	r1, [sp, #28]
 8004dd4:	9104      	str	r1, [sp, #16]
 8004dd6:	4909      	ldr	r1, [pc, #36]	; (8004dfc <siprintf+0x3c>)
 8004dd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ddc:	9105      	str	r1, [sp, #20]
 8004dde:	6800      	ldr	r0, [r0, #0]
 8004de0:	9301      	str	r3, [sp, #4]
 8004de2:	a902      	add	r1, sp, #8
 8004de4:	f000 f992 	bl	800510c <_svfiprintf_r>
 8004de8:	9b02      	ldr	r3, [sp, #8]
 8004dea:	2200      	movs	r2, #0
 8004dec:	701a      	strb	r2, [r3, #0]
 8004dee:	b01c      	add	sp, #112	; 0x70
 8004df0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004df4:	b003      	add	sp, #12
 8004df6:	4770      	bx	lr
 8004df8:	20000058 	.word	0x20000058
 8004dfc:	ffff0208 	.word	0xffff0208

08004e00 <memset>:
 8004e00:	4402      	add	r2, r0
 8004e02:	4603      	mov	r3, r0
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d100      	bne.n	8004e0a <memset+0xa>
 8004e08:	4770      	bx	lr
 8004e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e0e:	e7f9      	b.n	8004e04 <memset+0x4>

08004e10 <__errno>:
 8004e10:	4b01      	ldr	r3, [pc, #4]	; (8004e18 <__errno+0x8>)
 8004e12:	6818      	ldr	r0, [r3, #0]
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	20000058 	.word	0x20000058

08004e1c <__libc_init_array>:
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	4d0d      	ldr	r5, [pc, #52]	; (8004e54 <__libc_init_array+0x38>)
 8004e20:	4c0d      	ldr	r4, [pc, #52]	; (8004e58 <__libc_init_array+0x3c>)
 8004e22:	1b64      	subs	r4, r4, r5
 8004e24:	10a4      	asrs	r4, r4, #2
 8004e26:	2600      	movs	r6, #0
 8004e28:	42a6      	cmp	r6, r4
 8004e2a:	d109      	bne.n	8004e40 <__libc_init_array+0x24>
 8004e2c:	4d0b      	ldr	r5, [pc, #44]	; (8004e5c <__libc_init_array+0x40>)
 8004e2e:	4c0c      	ldr	r4, [pc, #48]	; (8004e60 <__libc_init_array+0x44>)
 8004e30:	f000 fc6a 	bl	8005708 <_init>
 8004e34:	1b64      	subs	r4, r4, r5
 8004e36:	10a4      	asrs	r4, r4, #2
 8004e38:	2600      	movs	r6, #0
 8004e3a:	42a6      	cmp	r6, r4
 8004e3c:	d105      	bne.n	8004e4a <__libc_init_array+0x2e>
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}
 8004e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e44:	4798      	blx	r3
 8004e46:	3601      	adds	r6, #1
 8004e48:	e7ee      	b.n	8004e28 <__libc_init_array+0xc>
 8004e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e4e:	4798      	blx	r3
 8004e50:	3601      	adds	r6, #1
 8004e52:	e7f2      	b.n	8004e3a <__libc_init_array+0x1e>
 8004e54:	08005808 	.word	0x08005808
 8004e58:	08005808 	.word	0x08005808
 8004e5c:	08005808 	.word	0x08005808
 8004e60:	0800580c 	.word	0x0800580c

08004e64 <__retarget_lock_acquire_recursive>:
 8004e64:	4770      	bx	lr

08004e66 <__retarget_lock_release_recursive>:
 8004e66:	4770      	bx	lr

08004e68 <_free_r>:
 8004e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e6a:	2900      	cmp	r1, #0
 8004e6c:	d044      	beq.n	8004ef8 <_free_r+0x90>
 8004e6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e72:	9001      	str	r0, [sp, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f1a1 0404 	sub.w	r4, r1, #4
 8004e7a:	bfb8      	it	lt
 8004e7c:	18e4      	addlt	r4, r4, r3
 8004e7e:	f000 f8df 	bl	8005040 <__malloc_lock>
 8004e82:	4a1e      	ldr	r2, [pc, #120]	; (8004efc <_free_r+0x94>)
 8004e84:	9801      	ldr	r0, [sp, #4]
 8004e86:	6813      	ldr	r3, [r2, #0]
 8004e88:	b933      	cbnz	r3, 8004e98 <_free_r+0x30>
 8004e8a:	6063      	str	r3, [r4, #4]
 8004e8c:	6014      	str	r4, [r2, #0]
 8004e8e:	b003      	add	sp, #12
 8004e90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e94:	f000 b8da 	b.w	800504c <__malloc_unlock>
 8004e98:	42a3      	cmp	r3, r4
 8004e9a:	d908      	bls.n	8004eae <_free_r+0x46>
 8004e9c:	6825      	ldr	r5, [r4, #0]
 8004e9e:	1961      	adds	r1, r4, r5
 8004ea0:	428b      	cmp	r3, r1
 8004ea2:	bf01      	itttt	eq
 8004ea4:	6819      	ldreq	r1, [r3, #0]
 8004ea6:	685b      	ldreq	r3, [r3, #4]
 8004ea8:	1949      	addeq	r1, r1, r5
 8004eaa:	6021      	streq	r1, [r4, #0]
 8004eac:	e7ed      	b.n	8004e8a <_free_r+0x22>
 8004eae:	461a      	mov	r2, r3
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	b10b      	cbz	r3, 8004eb8 <_free_r+0x50>
 8004eb4:	42a3      	cmp	r3, r4
 8004eb6:	d9fa      	bls.n	8004eae <_free_r+0x46>
 8004eb8:	6811      	ldr	r1, [r2, #0]
 8004eba:	1855      	adds	r5, r2, r1
 8004ebc:	42a5      	cmp	r5, r4
 8004ebe:	d10b      	bne.n	8004ed8 <_free_r+0x70>
 8004ec0:	6824      	ldr	r4, [r4, #0]
 8004ec2:	4421      	add	r1, r4
 8004ec4:	1854      	adds	r4, r2, r1
 8004ec6:	42a3      	cmp	r3, r4
 8004ec8:	6011      	str	r1, [r2, #0]
 8004eca:	d1e0      	bne.n	8004e8e <_free_r+0x26>
 8004ecc:	681c      	ldr	r4, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	6053      	str	r3, [r2, #4]
 8004ed2:	440c      	add	r4, r1
 8004ed4:	6014      	str	r4, [r2, #0]
 8004ed6:	e7da      	b.n	8004e8e <_free_r+0x26>
 8004ed8:	d902      	bls.n	8004ee0 <_free_r+0x78>
 8004eda:	230c      	movs	r3, #12
 8004edc:	6003      	str	r3, [r0, #0]
 8004ede:	e7d6      	b.n	8004e8e <_free_r+0x26>
 8004ee0:	6825      	ldr	r5, [r4, #0]
 8004ee2:	1961      	adds	r1, r4, r5
 8004ee4:	428b      	cmp	r3, r1
 8004ee6:	bf04      	itt	eq
 8004ee8:	6819      	ldreq	r1, [r3, #0]
 8004eea:	685b      	ldreq	r3, [r3, #4]
 8004eec:	6063      	str	r3, [r4, #4]
 8004eee:	bf04      	itt	eq
 8004ef0:	1949      	addeq	r1, r1, r5
 8004ef2:	6021      	streq	r1, [r4, #0]
 8004ef4:	6054      	str	r4, [r2, #4]
 8004ef6:	e7ca      	b.n	8004e8e <_free_r+0x26>
 8004ef8:	b003      	add	sp, #12
 8004efa:	bd30      	pop	{r4, r5, pc}
 8004efc:	20000384 	.word	0x20000384

08004f00 <sbrk_aligned>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	4e0e      	ldr	r6, [pc, #56]	; (8004f3c <sbrk_aligned+0x3c>)
 8004f04:	460c      	mov	r4, r1
 8004f06:	6831      	ldr	r1, [r6, #0]
 8004f08:	4605      	mov	r5, r0
 8004f0a:	b911      	cbnz	r1, 8004f12 <sbrk_aligned+0x12>
 8004f0c:	f000 fba6 	bl	800565c <_sbrk_r>
 8004f10:	6030      	str	r0, [r6, #0]
 8004f12:	4621      	mov	r1, r4
 8004f14:	4628      	mov	r0, r5
 8004f16:	f000 fba1 	bl	800565c <_sbrk_r>
 8004f1a:	1c43      	adds	r3, r0, #1
 8004f1c:	d00a      	beq.n	8004f34 <sbrk_aligned+0x34>
 8004f1e:	1cc4      	adds	r4, r0, #3
 8004f20:	f024 0403 	bic.w	r4, r4, #3
 8004f24:	42a0      	cmp	r0, r4
 8004f26:	d007      	beq.n	8004f38 <sbrk_aligned+0x38>
 8004f28:	1a21      	subs	r1, r4, r0
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	f000 fb96 	bl	800565c <_sbrk_r>
 8004f30:	3001      	adds	r0, #1
 8004f32:	d101      	bne.n	8004f38 <sbrk_aligned+0x38>
 8004f34:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004f38:	4620      	mov	r0, r4
 8004f3a:	bd70      	pop	{r4, r5, r6, pc}
 8004f3c:	20000388 	.word	0x20000388

08004f40 <_malloc_r>:
 8004f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f44:	1ccd      	adds	r5, r1, #3
 8004f46:	f025 0503 	bic.w	r5, r5, #3
 8004f4a:	3508      	adds	r5, #8
 8004f4c:	2d0c      	cmp	r5, #12
 8004f4e:	bf38      	it	cc
 8004f50:	250c      	movcc	r5, #12
 8004f52:	2d00      	cmp	r5, #0
 8004f54:	4607      	mov	r7, r0
 8004f56:	db01      	blt.n	8004f5c <_malloc_r+0x1c>
 8004f58:	42a9      	cmp	r1, r5
 8004f5a:	d905      	bls.n	8004f68 <_malloc_r+0x28>
 8004f5c:	230c      	movs	r3, #12
 8004f5e:	603b      	str	r3, [r7, #0]
 8004f60:	2600      	movs	r6, #0
 8004f62:	4630      	mov	r0, r6
 8004f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800503c <_malloc_r+0xfc>
 8004f6c:	f000 f868 	bl	8005040 <__malloc_lock>
 8004f70:	f8d8 3000 	ldr.w	r3, [r8]
 8004f74:	461c      	mov	r4, r3
 8004f76:	bb5c      	cbnz	r4, 8004fd0 <_malloc_r+0x90>
 8004f78:	4629      	mov	r1, r5
 8004f7a:	4638      	mov	r0, r7
 8004f7c:	f7ff ffc0 	bl	8004f00 <sbrk_aligned>
 8004f80:	1c43      	adds	r3, r0, #1
 8004f82:	4604      	mov	r4, r0
 8004f84:	d155      	bne.n	8005032 <_malloc_r+0xf2>
 8004f86:	f8d8 4000 	ldr.w	r4, [r8]
 8004f8a:	4626      	mov	r6, r4
 8004f8c:	2e00      	cmp	r6, #0
 8004f8e:	d145      	bne.n	800501c <_malloc_r+0xdc>
 8004f90:	2c00      	cmp	r4, #0
 8004f92:	d048      	beq.n	8005026 <_malloc_r+0xe6>
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	4631      	mov	r1, r6
 8004f98:	4638      	mov	r0, r7
 8004f9a:	eb04 0903 	add.w	r9, r4, r3
 8004f9e:	f000 fb5d 	bl	800565c <_sbrk_r>
 8004fa2:	4581      	cmp	r9, r0
 8004fa4:	d13f      	bne.n	8005026 <_malloc_r+0xe6>
 8004fa6:	6821      	ldr	r1, [r4, #0]
 8004fa8:	1a6d      	subs	r5, r5, r1
 8004faa:	4629      	mov	r1, r5
 8004fac:	4638      	mov	r0, r7
 8004fae:	f7ff ffa7 	bl	8004f00 <sbrk_aligned>
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	d037      	beq.n	8005026 <_malloc_r+0xe6>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	442b      	add	r3, r5
 8004fba:	6023      	str	r3, [r4, #0]
 8004fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d038      	beq.n	8005036 <_malloc_r+0xf6>
 8004fc4:	685a      	ldr	r2, [r3, #4]
 8004fc6:	42a2      	cmp	r2, r4
 8004fc8:	d12b      	bne.n	8005022 <_malloc_r+0xe2>
 8004fca:	2200      	movs	r2, #0
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	e00f      	b.n	8004ff0 <_malloc_r+0xb0>
 8004fd0:	6822      	ldr	r2, [r4, #0]
 8004fd2:	1b52      	subs	r2, r2, r5
 8004fd4:	d41f      	bmi.n	8005016 <_malloc_r+0xd6>
 8004fd6:	2a0b      	cmp	r2, #11
 8004fd8:	d917      	bls.n	800500a <_malloc_r+0xca>
 8004fda:	1961      	adds	r1, r4, r5
 8004fdc:	42a3      	cmp	r3, r4
 8004fde:	6025      	str	r5, [r4, #0]
 8004fe0:	bf18      	it	ne
 8004fe2:	6059      	strne	r1, [r3, #4]
 8004fe4:	6863      	ldr	r3, [r4, #4]
 8004fe6:	bf08      	it	eq
 8004fe8:	f8c8 1000 	streq.w	r1, [r8]
 8004fec:	5162      	str	r2, [r4, r5]
 8004fee:	604b      	str	r3, [r1, #4]
 8004ff0:	4638      	mov	r0, r7
 8004ff2:	f104 060b 	add.w	r6, r4, #11
 8004ff6:	f000 f829 	bl	800504c <__malloc_unlock>
 8004ffa:	f026 0607 	bic.w	r6, r6, #7
 8004ffe:	1d23      	adds	r3, r4, #4
 8005000:	1af2      	subs	r2, r6, r3
 8005002:	d0ae      	beq.n	8004f62 <_malloc_r+0x22>
 8005004:	1b9b      	subs	r3, r3, r6
 8005006:	50a3      	str	r3, [r4, r2]
 8005008:	e7ab      	b.n	8004f62 <_malloc_r+0x22>
 800500a:	42a3      	cmp	r3, r4
 800500c:	6862      	ldr	r2, [r4, #4]
 800500e:	d1dd      	bne.n	8004fcc <_malloc_r+0x8c>
 8005010:	f8c8 2000 	str.w	r2, [r8]
 8005014:	e7ec      	b.n	8004ff0 <_malloc_r+0xb0>
 8005016:	4623      	mov	r3, r4
 8005018:	6864      	ldr	r4, [r4, #4]
 800501a:	e7ac      	b.n	8004f76 <_malloc_r+0x36>
 800501c:	4634      	mov	r4, r6
 800501e:	6876      	ldr	r6, [r6, #4]
 8005020:	e7b4      	b.n	8004f8c <_malloc_r+0x4c>
 8005022:	4613      	mov	r3, r2
 8005024:	e7cc      	b.n	8004fc0 <_malloc_r+0x80>
 8005026:	230c      	movs	r3, #12
 8005028:	603b      	str	r3, [r7, #0]
 800502a:	4638      	mov	r0, r7
 800502c:	f000 f80e 	bl	800504c <__malloc_unlock>
 8005030:	e797      	b.n	8004f62 <_malloc_r+0x22>
 8005032:	6025      	str	r5, [r4, #0]
 8005034:	e7dc      	b.n	8004ff0 <_malloc_r+0xb0>
 8005036:	605b      	str	r3, [r3, #4]
 8005038:	deff      	udf	#255	; 0xff
 800503a:	bf00      	nop
 800503c:	20000384 	.word	0x20000384

08005040 <__malloc_lock>:
 8005040:	4801      	ldr	r0, [pc, #4]	; (8005048 <__malloc_lock+0x8>)
 8005042:	f7ff bf0f 	b.w	8004e64 <__retarget_lock_acquire_recursive>
 8005046:	bf00      	nop
 8005048:	20000380 	.word	0x20000380

0800504c <__malloc_unlock>:
 800504c:	4801      	ldr	r0, [pc, #4]	; (8005054 <__malloc_unlock+0x8>)
 800504e:	f7ff bf0a 	b.w	8004e66 <__retarget_lock_release_recursive>
 8005052:	bf00      	nop
 8005054:	20000380 	.word	0x20000380

08005058 <__ssputs_r>:
 8005058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800505c:	688e      	ldr	r6, [r1, #8]
 800505e:	461f      	mov	r7, r3
 8005060:	42be      	cmp	r6, r7
 8005062:	680b      	ldr	r3, [r1, #0]
 8005064:	4682      	mov	sl, r0
 8005066:	460c      	mov	r4, r1
 8005068:	4690      	mov	r8, r2
 800506a:	d82c      	bhi.n	80050c6 <__ssputs_r+0x6e>
 800506c:	898a      	ldrh	r2, [r1, #12]
 800506e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005072:	d026      	beq.n	80050c2 <__ssputs_r+0x6a>
 8005074:	6965      	ldr	r5, [r4, #20]
 8005076:	6909      	ldr	r1, [r1, #16]
 8005078:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800507c:	eba3 0901 	sub.w	r9, r3, r1
 8005080:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005084:	1c7b      	adds	r3, r7, #1
 8005086:	444b      	add	r3, r9
 8005088:	106d      	asrs	r5, r5, #1
 800508a:	429d      	cmp	r5, r3
 800508c:	bf38      	it	cc
 800508e:	461d      	movcc	r5, r3
 8005090:	0553      	lsls	r3, r2, #21
 8005092:	d527      	bpl.n	80050e4 <__ssputs_r+0x8c>
 8005094:	4629      	mov	r1, r5
 8005096:	f7ff ff53 	bl	8004f40 <_malloc_r>
 800509a:	4606      	mov	r6, r0
 800509c:	b360      	cbz	r0, 80050f8 <__ssputs_r+0xa0>
 800509e:	6921      	ldr	r1, [r4, #16]
 80050a0:	464a      	mov	r2, r9
 80050a2:	f000 faeb 	bl	800567c <memcpy>
 80050a6:	89a3      	ldrh	r3, [r4, #12]
 80050a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050b0:	81a3      	strh	r3, [r4, #12]
 80050b2:	6126      	str	r6, [r4, #16]
 80050b4:	6165      	str	r5, [r4, #20]
 80050b6:	444e      	add	r6, r9
 80050b8:	eba5 0509 	sub.w	r5, r5, r9
 80050bc:	6026      	str	r6, [r4, #0]
 80050be:	60a5      	str	r5, [r4, #8]
 80050c0:	463e      	mov	r6, r7
 80050c2:	42be      	cmp	r6, r7
 80050c4:	d900      	bls.n	80050c8 <__ssputs_r+0x70>
 80050c6:	463e      	mov	r6, r7
 80050c8:	6820      	ldr	r0, [r4, #0]
 80050ca:	4632      	mov	r2, r6
 80050cc:	4641      	mov	r1, r8
 80050ce:	f000 faab 	bl	8005628 <memmove>
 80050d2:	68a3      	ldr	r3, [r4, #8]
 80050d4:	1b9b      	subs	r3, r3, r6
 80050d6:	60a3      	str	r3, [r4, #8]
 80050d8:	6823      	ldr	r3, [r4, #0]
 80050da:	4433      	add	r3, r6
 80050dc:	6023      	str	r3, [r4, #0]
 80050de:	2000      	movs	r0, #0
 80050e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e4:	462a      	mov	r2, r5
 80050e6:	f000 fad7 	bl	8005698 <_realloc_r>
 80050ea:	4606      	mov	r6, r0
 80050ec:	2800      	cmp	r0, #0
 80050ee:	d1e0      	bne.n	80050b2 <__ssputs_r+0x5a>
 80050f0:	6921      	ldr	r1, [r4, #16]
 80050f2:	4650      	mov	r0, sl
 80050f4:	f7ff feb8 	bl	8004e68 <_free_r>
 80050f8:	230c      	movs	r3, #12
 80050fa:	f8ca 3000 	str.w	r3, [sl]
 80050fe:	89a3      	ldrh	r3, [r4, #12]
 8005100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005104:	81a3      	strh	r3, [r4, #12]
 8005106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800510a:	e7e9      	b.n	80050e0 <__ssputs_r+0x88>

0800510c <_svfiprintf_r>:
 800510c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005110:	4698      	mov	r8, r3
 8005112:	898b      	ldrh	r3, [r1, #12]
 8005114:	061b      	lsls	r3, r3, #24
 8005116:	b09d      	sub	sp, #116	; 0x74
 8005118:	4607      	mov	r7, r0
 800511a:	460d      	mov	r5, r1
 800511c:	4614      	mov	r4, r2
 800511e:	d50e      	bpl.n	800513e <_svfiprintf_r+0x32>
 8005120:	690b      	ldr	r3, [r1, #16]
 8005122:	b963      	cbnz	r3, 800513e <_svfiprintf_r+0x32>
 8005124:	2140      	movs	r1, #64	; 0x40
 8005126:	f7ff ff0b 	bl	8004f40 <_malloc_r>
 800512a:	6028      	str	r0, [r5, #0]
 800512c:	6128      	str	r0, [r5, #16]
 800512e:	b920      	cbnz	r0, 800513a <_svfiprintf_r+0x2e>
 8005130:	230c      	movs	r3, #12
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005138:	e0d0      	b.n	80052dc <_svfiprintf_r+0x1d0>
 800513a:	2340      	movs	r3, #64	; 0x40
 800513c:	616b      	str	r3, [r5, #20]
 800513e:	2300      	movs	r3, #0
 8005140:	9309      	str	r3, [sp, #36]	; 0x24
 8005142:	2320      	movs	r3, #32
 8005144:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005148:	f8cd 800c 	str.w	r8, [sp, #12]
 800514c:	2330      	movs	r3, #48	; 0x30
 800514e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80052f4 <_svfiprintf_r+0x1e8>
 8005152:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005156:	f04f 0901 	mov.w	r9, #1
 800515a:	4623      	mov	r3, r4
 800515c:	469a      	mov	sl, r3
 800515e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005162:	b10a      	cbz	r2, 8005168 <_svfiprintf_r+0x5c>
 8005164:	2a25      	cmp	r2, #37	; 0x25
 8005166:	d1f9      	bne.n	800515c <_svfiprintf_r+0x50>
 8005168:	ebba 0b04 	subs.w	fp, sl, r4
 800516c:	d00b      	beq.n	8005186 <_svfiprintf_r+0x7a>
 800516e:	465b      	mov	r3, fp
 8005170:	4622      	mov	r2, r4
 8005172:	4629      	mov	r1, r5
 8005174:	4638      	mov	r0, r7
 8005176:	f7ff ff6f 	bl	8005058 <__ssputs_r>
 800517a:	3001      	adds	r0, #1
 800517c:	f000 80a9 	beq.w	80052d2 <_svfiprintf_r+0x1c6>
 8005180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005182:	445a      	add	r2, fp
 8005184:	9209      	str	r2, [sp, #36]	; 0x24
 8005186:	f89a 3000 	ldrb.w	r3, [sl]
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 80a1 	beq.w	80052d2 <_svfiprintf_r+0x1c6>
 8005190:	2300      	movs	r3, #0
 8005192:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800519a:	f10a 0a01 	add.w	sl, sl, #1
 800519e:	9304      	str	r3, [sp, #16]
 80051a0:	9307      	str	r3, [sp, #28]
 80051a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051a6:	931a      	str	r3, [sp, #104]	; 0x68
 80051a8:	4654      	mov	r4, sl
 80051aa:	2205      	movs	r2, #5
 80051ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b0:	4850      	ldr	r0, [pc, #320]	; (80052f4 <_svfiprintf_r+0x1e8>)
 80051b2:	f7fb f815 	bl	80001e0 <memchr>
 80051b6:	9a04      	ldr	r2, [sp, #16]
 80051b8:	b9d8      	cbnz	r0, 80051f2 <_svfiprintf_r+0xe6>
 80051ba:	06d0      	lsls	r0, r2, #27
 80051bc:	bf44      	itt	mi
 80051be:	2320      	movmi	r3, #32
 80051c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051c4:	0711      	lsls	r1, r2, #28
 80051c6:	bf44      	itt	mi
 80051c8:	232b      	movmi	r3, #43	; 0x2b
 80051ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051ce:	f89a 3000 	ldrb.w	r3, [sl]
 80051d2:	2b2a      	cmp	r3, #42	; 0x2a
 80051d4:	d015      	beq.n	8005202 <_svfiprintf_r+0xf6>
 80051d6:	9a07      	ldr	r2, [sp, #28]
 80051d8:	4654      	mov	r4, sl
 80051da:	2000      	movs	r0, #0
 80051dc:	f04f 0c0a 	mov.w	ip, #10
 80051e0:	4621      	mov	r1, r4
 80051e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051e6:	3b30      	subs	r3, #48	; 0x30
 80051e8:	2b09      	cmp	r3, #9
 80051ea:	d94d      	bls.n	8005288 <_svfiprintf_r+0x17c>
 80051ec:	b1b0      	cbz	r0, 800521c <_svfiprintf_r+0x110>
 80051ee:	9207      	str	r2, [sp, #28]
 80051f0:	e014      	b.n	800521c <_svfiprintf_r+0x110>
 80051f2:	eba0 0308 	sub.w	r3, r0, r8
 80051f6:	fa09 f303 	lsl.w	r3, r9, r3
 80051fa:	4313      	orrs	r3, r2
 80051fc:	9304      	str	r3, [sp, #16]
 80051fe:	46a2      	mov	sl, r4
 8005200:	e7d2      	b.n	80051a8 <_svfiprintf_r+0x9c>
 8005202:	9b03      	ldr	r3, [sp, #12]
 8005204:	1d19      	adds	r1, r3, #4
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	9103      	str	r1, [sp, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	bfbb      	ittet	lt
 800520e:	425b      	neglt	r3, r3
 8005210:	f042 0202 	orrlt.w	r2, r2, #2
 8005214:	9307      	strge	r3, [sp, #28]
 8005216:	9307      	strlt	r3, [sp, #28]
 8005218:	bfb8      	it	lt
 800521a:	9204      	strlt	r2, [sp, #16]
 800521c:	7823      	ldrb	r3, [r4, #0]
 800521e:	2b2e      	cmp	r3, #46	; 0x2e
 8005220:	d10c      	bne.n	800523c <_svfiprintf_r+0x130>
 8005222:	7863      	ldrb	r3, [r4, #1]
 8005224:	2b2a      	cmp	r3, #42	; 0x2a
 8005226:	d134      	bne.n	8005292 <_svfiprintf_r+0x186>
 8005228:	9b03      	ldr	r3, [sp, #12]
 800522a:	1d1a      	adds	r2, r3, #4
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	9203      	str	r2, [sp, #12]
 8005230:	2b00      	cmp	r3, #0
 8005232:	bfb8      	it	lt
 8005234:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005238:	3402      	adds	r4, #2
 800523a:	9305      	str	r3, [sp, #20]
 800523c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005304 <_svfiprintf_r+0x1f8>
 8005240:	7821      	ldrb	r1, [r4, #0]
 8005242:	2203      	movs	r2, #3
 8005244:	4650      	mov	r0, sl
 8005246:	f7fa ffcb 	bl	80001e0 <memchr>
 800524a:	b138      	cbz	r0, 800525c <_svfiprintf_r+0x150>
 800524c:	9b04      	ldr	r3, [sp, #16]
 800524e:	eba0 000a 	sub.w	r0, r0, sl
 8005252:	2240      	movs	r2, #64	; 0x40
 8005254:	4082      	lsls	r2, r0
 8005256:	4313      	orrs	r3, r2
 8005258:	3401      	adds	r4, #1
 800525a:	9304      	str	r3, [sp, #16]
 800525c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005260:	4825      	ldr	r0, [pc, #148]	; (80052f8 <_svfiprintf_r+0x1ec>)
 8005262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005266:	2206      	movs	r2, #6
 8005268:	f7fa ffba 	bl	80001e0 <memchr>
 800526c:	2800      	cmp	r0, #0
 800526e:	d038      	beq.n	80052e2 <_svfiprintf_r+0x1d6>
 8005270:	4b22      	ldr	r3, [pc, #136]	; (80052fc <_svfiprintf_r+0x1f0>)
 8005272:	bb1b      	cbnz	r3, 80052bc <_svfiprintf_r+0x1b0>
 8005274:	9b03      	ldr	r3, [sp, #12]
 8005276:	3307      	adds	r3, #7
 8005278:	f023 0307 	bic.w	r3, r3, #7
 800527c:	3308      	adds	r3, #8
 800527e:	9303      	str	r3, [sp, #12]
 8005280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005282:	4433      	add	r3, r6
 8005284:	9309      	str	r3, [sp, #36]	; 0x24
 8005286:	e768      	b.n	800515a <_svfiprintf_r+0x4e>
 8005288:	fb0c 3202 	mla	r2, ip, r2, r3
 800528c:	460c      	mov	r4, r1
 800528e:	2001      	movs	r0, #1
 8005290:	e7a6      	b.n	80051e0 <_svfiprintf_r+0xd4>
 8005292:	2300      	movs	r3, #0
 8005294:	3401      	adds	r4, #1
 8005296:	9305      	str	r3, [sp, #20]
 8005298:	4619      	mov	r1, r3
 800529a:	f04f 0c0a 	mov.w	ip, #10
 800529e:	4620      	mov	r0, r4
 80052a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052a4:	3a30      	subs	r2, #48	; 0x30
 80052a6:	2a09      	cmp	r2, #9
 80052a8:	d903      	bls.n	80052b2 <_svfiprintf_r+0x1a6>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0c6      	beq.n	800523c <_svfiprintf_r+0x130>
 80052ae:	9105      	str	r1, [sp, #20]
 80052b0:	e7c4      	b.n	800523c <_svfiprintf_r+0x130>
 80052b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80052b6:	4604      	mov	r4, r0
 80052b8:	2301      	movs	r3, #1
 80052ba:	e7f0      	b.n	800529e <_svfiprintf_r+0x192>
 80052bc:	ab03      	add	r3, sp, #12
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	462a      	mov	r2, r5
 80052c2:	4b0f      	ldr	r3, [pc, #60]	; (8005300 <_svfiprintf_r+0x1f4>)
 80052c4:	a904      	add	r1, sp, #16
 80052c6:	4638      	mov	r0, r7
 80052c8:	f3af 8000 	nop.w
 80052cc:	1c42      	adds	r2, r0, #1
 80052ce:	4606      	mov	r6, r0
 80052d0:	d1d6      	bne.n	8005280 <_svfiprintf_r+0x174>
 80052d2:	89ab      	ldrh	r3, [r5, #12]
 80052d4:	065b      	lsls	r3, r3, #25
 80052d6:	f53f af2d 	bmi.w	8005134 <_svfiprintf_r+0x28>
 80052da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052dc:	b01d      	add	sp, #116	; 0x74
 80052de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e2:	ab03      	add	r3, sp, #12
 80052e4:	9300      	str	r3, [sp, #0]
 80052e6:	462a      	mov	r2, r5
 80052e8:	4b05      	ldr	r3, [pc, #20]	; (8005300 <_svfiprintf_r+0x1f4>)
 80052ea:	a904      	add	r1, sp, #16
 80052ec:	4638      	mov	r0, r7
 80052ee:	f000 f879 	bl	80053e4 <_printf_i>
 80052f2:	e7eb      	b.n	80052cc <_svfiprintf_r+0x1c0>
 80052f4:	080057cc 	.word	0x080057cc
 80052f8:	080057d6 	.word	0x080057d6
 80052fc:	00000000 	.word	0x00000000
 8005300:	08005059 	.word	0x08005059
 8005304:	080057d2 	.word	0x080057d2

08005308 <_printf_common>:
 8005308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800530c:	4616      	mov	r6, r2
 800530e:	4699      	mov	r9, r3
 8005310:	688a      	ldr	r2, [r1, #8]
 8005312:	690b      	ldr	r3, [r1, #16]
 8005314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005318:	4293      	cmp	r3, r2
 800531a:	bfb8      	it	lt
 800531c:	4613      	movlt	r3, r2
 800531e:	6033      	str	r3, [r6, #0]
 8005320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005324:	4607      	mov	r7, r0
 8005326:	460c      	mov	r4, r1
 8005328:	b10a      	cbz	r2, 800532e <_printf_common+0x26>
 800532a:	3301      	adds	r3, #1
 800532c:	6033      	str	r3, [r6, #0]
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	0699      	lsls	r1, r3, #26
 8005332:	bf42      	ittt	mi
 8005334:	6833      	ldrmi	r3, [r6, #0]
 8005336:	3302      	addmi	r3, #2
 8005338:	6033      	strmi	r3, [r6, #0]
 800533a:	6825      	ldr	r5, [r4, #0]
 800533c:	f015 0506 	ands.w	r5, r5, #6
 8005340:	d106      	bne.n	8005350 <_printf_common+0x48>
 8005342:	f104 0a19 	add.w	sl, r4, #25
 8005346:	68e3      	ldr	r3, [r4, #12]
 8005348:	6832      	ldr	r2, [r6, #0]
 800534a:	1a9b      	subs	r3, r3, r2
 800534c:	42ab      	cmp	r3, r5
 800534e:	dc26      	bgt.n	800539e <_printf_common+0x96>
 8005350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005354:	1e13      	subs	r3, r2, #0
 8005356:	6822      	ldr	r2, [r4, #0]
 8005358:	bf18      	it	ne
 800535a:	2301      	movne	r3, #1
 800535c:	0692      	lsls	r2, r2, #26
 800535e:	d42b      	bmi.n	80053b8 <_printf_common+0xb0>
 8005360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005364:	4649      	mov	r1, r9
 8005366:	4638      	mov	r0, r7
 8005368:	47c0      	blx	r8
 800536a:	3001      	adds	r0, #1
 800536c:	d01e      	beq.n	80053ac <_printf_common+0xa4>
 800536e:	6823      	ldr	r3, [r4, #0]
 8005370:	6922      	ldr	r2, [r4, #16]
 8005372:	f003 0306 	and.w	r3, r3, #6
 8005376:	2b04      	cmp	r3, #4
 8005378:	bf02      	ittt	eq
 800537a:	68e5      	ldreq	r5, [r4, #12]
 800537c:	6833      	ldreq	r3, [r6, #0]
 800537e:	1aed      	subeq	r5, r5, r3
 8005380:	68a3      	ldr	r3, [r4, #8]
 8005382:	bf0c      	ite	eq
 8005384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005388:	2500      	movne	r5, #0
 800538a:	4293      	cmp	r3, r2
 800538c:	bfc4      	itt	gt
 800538e:	1a9b      	subgt	r3, r3, r2
 8005390:	18ed      	addgt	r5, r5, r3
 8005392:	2600      	movs	r6, #0
 8005394:	341a      	adds	r4, #26
 8005396:	42b5      	cmp	r5, r6
 8005398:	d11a      	bne.n	80053d0 <_printf_common+0xc8>
 800539a:	2000      	movs	r0, #0
 800539c:	e008      	b.n	80053b0 <_printf_common+0xa8>
 800539e:	2301      	movs	r3, #1
 80053a0:	4652      	mov	r2, sl
 80053a2:	4649      	mov	r1, r9
 80053a4:	4638      	mov	r0, r7
 80053a6:	47c0      	blx	r8
 80053a8:	3001      	adds	r0, #1
 80053aa:	d103      	bne.n	80053b4 <_printf_common+0xac>
 80053ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b4:	3501      	adds	r5, #1
 80053b6:	e7c6      	b.n	8005346 <_printf_common+0x3e>
 80053b8:	18e1      	adds	r1, r4, r3
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	2030      	movs	r0, #48	; 0x30
 80053be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053c2:	4422      	add	r2, r4
 80053c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053cc:	3302      	adds	r3, #2
 80053ce:	e7c7      	b.n	8005360 <_printf_common+0x58>
 80053d0:	2301      	movs	r3, #1
 80053d2:	4622      	mov	r2, r4
 80053d4:	4649      	mov	r1, r9
 80053d6:	4638      	mov	r0, r7
 80053d8:	47c0      	blx	r8
 80053da:	3001      	adds	r0, #1
 80053dc:	d0e6      	beq.n	80053ac <_printf_common+0xa4>
 80053de:	3601      	adds	r6, #1
 80053e0:	e7d9      	b.n	8005396 <_printf_common+0x8e>
	...

080053e4 <_printf_i>:
 80053e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053e8:	7e0f      	ldrb	r7, [r1, #24]
 80053ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053ec:	2f78      	cmp	r7, #120	; 0x78
 80053ee:	4691      	mov	r9, r2
 80053f0:	4680      	mov	r8, r0
 80053f2:	460c      	mov	r4, r1
 80053f4:	469a      	mov	sl, r3
 80053f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053fa:	d807      	bhi.n	800540c <_printf_i+0x28>
 80053fc:	2f62      	cmp	r7, #98	; 0x62
 80053fe:	d80a      	bhi.n	8005416 <_printf_i+0x32>
 8005400:	2f00      	cmp	r7, #0
 8005402:	f000 80d4 	beq.w	80055ae <_printf_i+0x1ca>
 8005406:	2f58      	cmp	r7, #88	; 0x58
 8005408:	f000 80c0 	beq.w	800558c <_printf_i+0x1a8>
 800540c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005414:	e03a      	b.n	800548c <_printf_i+0xa8>
 8005416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800541a:	2b15      	cmp	r3, #21
 800541c:	d8f6      	bhi.n	800540c <_printf_i+0x28>
 800541e:	a101      	add	r1, pc, #4	; (adr r1, 8005424 <_printf_i+0x40>)
 8005420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005424:	0800547d 	.word	0x0800547d
 8005428:	08005491 	.word	0x08005491
 800542c:	0800540d 	.word	0x0800540d
 8005430:	0800540d 	.word	0x0800540d
 8005434:	0800540d 	.word	0x0800540d
 8005438:	0800540d 	.word	0x0800540d
 800543c:	08005491 	.word	0x08005491
 8005440:	0800540d 	.word	0x0800540d
 8005444:	0800540d 	.word	0x0800540d
 8005448:	0800540d 	.word	0x0800540d
 800544c:	0800540d 	.word	0x0800540d
 8005450:	08005595 	.word	0x08005595
 8005454:	080054bd 	.word	0x080054bd
 8005458:	0800554f 	.word	0x0800554f
 800545c:	0800540d 	.word	0x0800540d
 8005460:	0800540d 	.word	0x0800540d
 8005464:	080055b7 	.word	0x080055b7
 8005468:	0800540d 	.word	0x0800540d
 800546c:	080054bd 	.word	0x080054bd
 8005470:	0800540d 	.word	0x0800540d
 8005474:	0800540d 	.word	0x0800540d
 8005478:	08005557 	.word	0x08005557
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	1d1a      	adds	r2, r3, #4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	602a      	str	r2, [r5, #0]
 8005484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800548c:	2301      	movs	r3, #1
 800548e:	e09f      	b.n	80055d0 <_printf_i+0x1ec>
 8005490:	6820      	ldr	r0, [r4, #0]
 8005492:	682b      	ldr	r3, [r5, #0]
 8005494:	0607      	lsls	r7, r0, #24
 8005496:	f103 0104 	add.w	r1, r3, #4
 800549a:	6029      	str	r1, [r5, #0]
 800549c:	d501      	bpl.n	80054a2 <_printf_i+0xbe>
 800549e:	681e      	ldr	r6, [r3, #0]
 80054a0:	e003      	b.n	80054aa <_printf_i+0xc6>
 80054a2:	0646      	lsls	r6, r0, #25
 80054a4:	d5fb      	bpl.n	800549e <_printf_i+0xba>
 80054a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054aa:	2e00      	cmp	r6, #0
 80054ac:	da03      	bge.n	80054b6 <_printf_i+0xd2>
 80054ae:	232d      	movs	r3, #45	; 0x2d
 80054b0:	4276      	negs	r6, r6
 80054b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b6:	485a      	ldr	r0, [pc, #360]	; (8005620 <_printf_i+0x23c>)
 80054b8:	230a      	movs	r3, #10
 80054ba:	e012      	b.n	80054e2 <_printf_i+0xfe>
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	6820      	ldr	r0, [r4, #0]
 80054c0:	1d19      	adds	r1, r3, #4
 80054c2:	6029      	str	r1, [r5, #0]
 80054c4:	0605      	lsls	r5, r0, #24
 80054c6:	d501      	bpl.n	80054cc <_printf_i+0xe8>
 80054c8:	681e      	ldr	r6, [r3, #0]
 80054ca:	e002      	b.n	80054d2 <_printf_i+0xee>
 80054cc:	0641      	lsls	r1, r0, #25
 80054ce:	d5fb      	bpl.n	80054c8 <_printf_i+0xe4>
 80054d0:	881e      	ldrh	r6, [r3, #0]
 80054d2:	4853      	ldr	r0, [pc, #332]	; (8005620 <_printf_i+0x23c>)
 80054d4:	2f6f      	cmp	r7, #111	; 0x6f
 80054d6:	bf0c      	ite	eq
 80054d8:	2308      	moveq	r3, #8
 80054da:	230a      	movne	r3, #10
 80054dc:	2100      	movs	r1, #0
 80054de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054e2:	6865      	ldr	r5, [r4, #4]
 80054e4:	60a5      	str	r5, [r4, #8]
 80054e6:	2d00      	cmp	r5, #0
 80054e8:	bfa2      	ittt	ge
 80054ea:	6821      	ldrge	r1, [r4, #0]
 80054ec:	f021 0104 	bicge.w	r1, r1, #4
 80054f0:	6021      	strge	r1, [r4, #0]
 80054f2:	b90e      	cbnz	r6, 80054f8 <_printf_i+0x114>
 80054f4:	2d00      	cmp	r5, #0
 80054f6:	d04b      	beq.n	8005590 <_printf_i+0x1ac>
 80054f8:	4615      	mov	r5, r2
 80054fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80054fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005502:	5dc7      	ldrb	r7, [r0, r7]
 8005504:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005508:	4637      	mov	r7, r6
 800550a:	42bb      	cmp	r3, r7
 800550c:	460e      	mov	r6, r1
 800550e:	d9f4      	bls.n	80054fa <_printf_i+0x116>
 8005510:	2b08      	cmp	r3, #8
 8005512:	d10b      	bne.n	800552c <_printf_i+0x148>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	07de      	lsls	r6, r3, #31
 8005518:	d508      	bpl.n	800552c <_printf_i+0x148>
 800551a:	6923      	ldr	r3, [r4, #16]
 800551c:	6861      	ldr	r1, [r4, #4]
 800551e:	4299      	cmp	r1, r3
 8005520:	bfde      	ittt	le
 8005522:	2330      	movle	r3, #48	; 0x30
 8005524:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005528:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800552c:	1b52      	subs	r2, r2, r5
 800552e:	6122      	str	r2, [r4, #16]
 8005530:	f8cd a000 	str.w	sl, [sp]
 8005534:	464b      	mov	r3, r9
 8005536:	aa03      	add	r2, sp, #12
 8005538:	4621      	mov	r1, r4
 800553a:	4640      	mov	r0, r8
 800553c:	f7ff fee4 	bl	8005308 <_printf_common>
 8005540:	3001      	adds	r0, #1
 8005542:	d14a      	bne.n	80055da <_printf_i+0x1f6>
 8005544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005548:	b004      	add	sp, #16
 800554a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	f043 0320 	orr.w	r3, r3, #32
 8005554:	6023      	str	r3, [r4, #0]
 8005556:	4833      	ldr	r0, [pc, #204]	; (8005624 <_printf_i+0x240>)
 8005558:	2778      	movs	r7, #120	; 0x78
 800555a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800555e:	6823      	ldr	r3, [r4, #0]
 8005560:	6829      	ldr	r1, [r5, #0]
 8005562:	061f      	lsls	r7, r3, #24
 8005564:	f851 6b04 	ldr.w	r6, [r1], #4
 8005568:	d402      	bmi.n	8005570 <_printf_i+0x18c>
 800556a:	065f      	lsls	r7, r3, #25
 800556c:	bf48      	it	mi
 800556e:	b2b6      	uxthmi	r6, r6
 8005570:	07df      	lsls	r7, r3, #31
 8005572:	bf48      	it	mi
 8005574:	f043 0320 	orrmi.w	r3, r3, #32
 8005578:	6029      	str	r1, [r5, #0]
 800557a:	bf48      	it	mi
 800557c:	6023      	strmi	r3, [r4, #0]
 800557e:	b91e      	cbnz	r6, 8005588 <_printf_i+0x1a4>
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	f023 0320 	bic.w	r3, r3, #32
 8005586:	6023      	str	r3, [r4, #0]
 8005588:	2310      	movs	r3, #16
 800558a:	e7a7      	b.n	80054dc <_printf_i+0xf8>
 800558c:	4824      	ldr	r0, [pc, #144]	; (8005620 <_printf_i+0x23c>)
 800558e:	e7e4      	b.n	800555a <_printf_i+0x176>
 8005590:	4615      	mov	r5, r2
 8005592:	e7bd      	b.n	8005510 <_printf_i+0x12c>
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	6826      	ldr	r6, [r4, #0]
 8005598:	6961      	ldr	r1, [r4, #20]
 800559a:	1d18      	adds	r0, r3, #4
 800559c:	6028      	str	r0, [r5, #0]
 800559e:	0635      	lsls	r5, r6, #24
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	d501      	bpl.n	80055a8 <_printf_i+0x1c4>
 80055a4:	6019      	str	r1, [r3, #0]
 80055a6:	e002      	b.n	80055ae <_printf_i+0x1ca>
 80055a8:	0670      	lsls	r0, r6, #25
 80055aa:	d5fb      	bpl.n	80055a4 <_printf_i+0x1c0>
 80055ac:	8019      	strh	r1, [r3, #0]
 80055ae:	2300      	movs	r3, #0
 80055b0:	6123      	str	r3, [r4, #16]
 80055b2:	4615      	mov	r5, r2
 80055b4:	e7bc      	b.n	8005530 <_printf_i+0x14c>
 80055b6:	682b      	ldr	r3, [r5, #0]
 80055b8:	1d1a      	adds	r2, r3, #4
 80055ba:	602a      	str	r2, [r5, #0]
 80055bc:	681d      	ldr	r5, [r3, #0]
 80055be:	6862      	ldr	r2, [r4, #4]
 80055c0:	2100      	movs	r1, #0
 80055c2:	4628      	mov	r0, r5
 80055c4:	f7fa fe0c 	bl	80001e0 <memchr>
 80055c8:	b108      	cbz	r0, 80055ce <_printf_i+0x1ea>
 80055ca:	1b40      	subs	r0, r0, r5
 80055cc:	6060      	str	r0, [r4, #4]
 80055ce:	6863      	ldr	r3, [r4, #4]
 80055d0:	6123      	str	r3, [r4, #16]
 80055d2:	2300      	movs	r3, #0
 80055d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055d8:	e7aa      	b.n	8005530 <_printf_i+0x14c>
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	462a      	mov	r2, r5
 80055de:	4649      	mov	r1, r9
 80055e0:	4640      	mov	r0, r8
 80055e2:	47d0      	blx	sl
 80055e4:	3001      	adds	r0, #1
 80055e6:	d0ad      	beq.n	8005544 <_printf_i+0x160>
 80055e8:	6823      	ldr	r3, [r4, #0]
 80055ea:	079b      	lsls	r3, r3, #30
 80055ec:	d413      	bmi.n	8005616 <_printf_i+0x232>
 80055ee:	68e0      	ldr	r0, [r4, #12]
 80055f0:	9b03      	ldr	r3, [sp, #12]
 80055f2:	4298      	cmp	r0, r3
 80055f4:	bfb8      	it	lt
 80055f6:	4618      	movlt	r0, r3
 80055f8:	e7a6      	b.n	8005548 <_printf_i+0x164>
 80055fa:	2301      	movs	r3, #1
 80055fc:	4632      	mov	r2, r6
 80055fe:	4649      	mov	r1, r9
 8005600:	4640      	mov	r0, r8
 8005602:	47d0      	blx	sl
 8005604:	3001      	adds	r0, #1
 8005606:	d09d      	beq.n	8005544 <_printf_i+0x160>
 8005608:	3501      	adds	r5, #1
 800560a:	68e3      	ldr	r3, [r4, #12]
 800560c:	9903      	ldr	r1, [sp, #12]
 800560e:	1a5b      	subs	r3, r3, r1
 8005610:	42ab      	cmp	r3, r5
 8005612:	dcf2      	bgt.n	80055fa <_printf_i+0x216>
 8005614:	e7eb      	b.n	80055ee <_printf_i+0x20a>
 8005616:	2500      	movs	r5, #0
 8005618:	f104 0619 	add.w	r6, r4, #25
 800561c:	e7f5      	b.n	800560a <_printf_i+0x226>
 800561e:	bf00      	nop
 8005620:	080057dd 	.word	0x080057dd
 8005624:	080057ee 	.word	0x080057ee

08005628 <memmove>:
 8005628:	4288      	cmp	r0, r1
 800562a:	b510      	push	{r4, lr}
 800562c:	eb01 0402 	add.w	r4, r1, r2
 8005630:	d902      	bls.n	8005638 <memmove+0x10>
 8005632:	4284      	cmp	r4, r0
 8005634:	4623      	mov	r3, r4
 8005636:	d807      	bhi.n	8005648 <memmove+0x20>
 8005638:	1e43      	subs	r3, r0, #1
 800563a:	42a1      	cmp	r1, r4
 800563c:	d008      	beq.n	8005650 <memmove+0x28>
 800563e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005642:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005646:	e7f8      	b.n	800563a <memmove+0x12>
 8005648:	4402      	add	r2, r0
 800564a:	4601      	mov	r1, r0
 800564c:	428a      	cmp	r2, r1
 800564e:	d100      	bne.n	8005652 <memmove+0x2a>
 8005650:	bd10      	pop	{r4, pc}
 8005652:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005656:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800565a:	e7f7      	b.n	800564c <memmove+0x24>

0800565c <_sbrk_r>:
 800565c:	b538      	push	{r3, r4, r5, lr}
 800565e:	4d06      	ldr	r5, [pc, #24]	; (8005678 <_sbrk_r+0x1c>)
 8005660:	2300      	movs	r3, #0
 8005662:	4604      	mov	r4, r0
 8005664:	4608      	mov	r0, r1
 8005666:	602b      	str	r3, [r5, #0]
 8005668:	f7fb fb52 	bl	8000d10 <_sbrk>
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	d102      	bne.n	8005676 <_sbrk_r+0x1a>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	b103      	cbz	r3, 8005676 <_sbrk_r+0x1a>
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	bd38      	pop	{r3, r4, r5, pc}
 8005678:	2000037c 	.word	0x2000037c

0800567c <memcpy>:
 800567c:	440a      	add	r2, r1
 800567e:	4291      	cmp	r1, r2
 8005680:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005684:	d100      	bne.n	8005688 <memcpy+0xc>
 8005686:	4770      	bx	lr
 8005688:	b510      	push	{r4, lr}
 800568a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800568e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005692:	4291      	cmp	r1, r2
 8005694:	d1f9      	bne.n	800568a <memcpy+0xe>
 8005696:	bd10      	pop	{r4, pc}

08005698 <_realloc_r>:
 8005698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800569c:	4680      	mov	r8, r0
 800569e:	4614      	mov	r4, r2
 80056a0:	460e      	mov	r6, r1
 80056a2:	b921      	cbnz	r1, 80056ae <_realloc_r+0x16>
 80056a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056a8:	4611      	mov	r1, r2
 80056aa:	f7ff bc49 	b.w	8004f40 <_malloc_r>
 80056ae:	b92a      	cbnz	r2, 80056bc <_realloc_r+0x24>
 80056b0:	f7ff fbda 	bl	8004e68 <_free_r>
 80056b4:	4625      	mov	r5, r4
 80056b6:	4628      	mov	r0, r5
 80056b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056bc:	f000 f81b 	bl	80056f6 <_malloc_usable_size_r>
 80056c0:	4284      	cmp	r4, r0
 80056c2:	4607      	mov	r7, r0
 80056c4:	d802      	bhi.n	80056cc <_realloc_r+0x34>
 80056c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056ca:	d812      	bhi.n	80056f2 <_realloc_r+0x5a>
 80056cc:	4621      	mov	r1, r4
 80056ce:	4640      	mov	r0, r8
 80056d0:	f7ff fc36 	bl	8004f40 <_malloc_r>
 80056d4:	4605      	mov	r5, r0
 80056d6:	2800      	cmp	r0, #0
 80056d8:	d0ed      	beq.n	80056b6 <_realloc_r+0x1e>
 80056da:	42bc      	cmp	r4, r7
 80056dc:	4622      	mov	r2, r4
 80056de:	4631      	mov	r1, r6
 80056e0:	bf28      	it	cs
 80056e2:	463a      	movcs	r2, r7
 80056e4:	f7ff ffca 	bl	800567c <memcpy>
 80056e8:	4631      	mov	r1, r6
 80056ea:	4640      	mov	r0, r8
 80056ec:	f7ff fbbc 	bl	8004e68 <_free_r>
 80056f0:	e7e1      	b.n	80056b6 <_realloc_r+0x1e>
 80056f2:	4635      	mov	r5, r6
 80056f4:	e7df      	b.n	80056b6 <_realloc_r+0x1e>

080056f6 <_malloc_usable_size_r>:
 80056f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056fa:	1f18      	subs	r0, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	bfbc      	itt	lt
 8005700:	580b      	ldrlt	r3, [r1, r0]
 8005702:	18c0      	addlt	r0, r0, r3
 8005704:	4770      	bx	lr
	...

08005708 <_init>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	bf00      	nop
 800570c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570e:	bc08      	pop	{r3}
 8005710:	469e      	mov	lr, r3
 8005712:	4770      	bx	lr

08005714 <_fini>:
 8005714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005716:	bf00      	nop
 8005718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571a:	bc08      	pop	{r3}
 800571c:	469e      	mov	lr, r3
 800571e:	4770      	bx	lr
