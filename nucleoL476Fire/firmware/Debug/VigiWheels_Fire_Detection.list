
VigiWheels_Fire_Detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  0800b73c  0800b73c  0001b73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ba50  0800ba50  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800ba50  0800ba50  0001ba50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ba58  0800ba58  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ba58  0800ba58  0001ba58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ba5c  0800ba5c  0001ba5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800ba60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c18  2000006c  0800bacc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c84  0800bacc  00021c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ef04  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003df9  00000000  00000000  0003efe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b50  00000000  00000000  00042de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000153f  00000000  00000000  00044930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b9c7  00000000  00000000  00045e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d0b1  00000000  00000000  00071836  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111f6a  00000000  00000000  0008e8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000081e0  00000000  00000000  001a0854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001a8a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b724 	.word	0x0800b724

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800b724 	.word	0x0800b724

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <msToTicks>:

#define SIZE_RX 10
#define SIZE_TX 100

TickType_t msToTicks(TickType_t ms)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	TickType_t tmp = ms;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	60fb      	str	r3, [r7, #12]

	if (ms<(1000/configTICK_RATE_HZ))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <msToTicks+0x18>
		tmp = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	e001      	b.n	8000d94 <msToTicks+0x1c>
	else {
		tmp = ms/(1000/configTICK_RATE_HZ);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	60fb      	str	r3, [r7, #12]

		if (ms % (1000/configTICK_RATE_HZ))
			tmp ++;
	}
	return tmp;
 8000d94:	68fb      	ldr	r3, [r7, #12]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <reading_analog_ir_sensor1>:


void reading_analog_ir_sensor1(uint16_t *sensorValue)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000dac:	f107 0308 	add.w	r3, r7, #8
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	615a      	str	r2, [r3, #20]

    // Configure and start ADC conversions for A0
    sConfig.Channel = ADC_CHANNEL_5;
 8000dbe:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <reading_analog_ir_sensor1+0x64>)
 8000dc0:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dc2:	2306      	movs	r3, #6
 8000dc4:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dca:	237f      	movs	r3, #127	; 0x7f
 8000dcc:	617b      	str	r3, [r7, #20]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	61bb      	str	r3, [r7, #24]
    sConfig.Offset = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]

    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000dd6:	f107 0308 	add.w	r3, r7, #8
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480b      	ldr	r0, [pc, #44]	; (8000e0c <reading_analog_ir_sensor1+0x68>)
 8000dde:	f001 fd3b 	bl	8002858 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc1);
 8000de2:	480a      	ldr	r0, [pc, #40]	; (8000e0c <reading_analog_ir_sensor1+0x68>)
 8000de4:	f001 fb98 	bl	8002518 <HAL_ADC_Start>

    // Wait for conversion to complete
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dec:	4807      	ldr	r0, [pc, #28]	; (8000e0c <reading_analog_ir_sensor1+0x68>)
 8000dee:	f001 fc4d 	bl	800268c <HAL_ADC_PollForConversion>

    // Read ADC value for A0
    *sensorValue = HAL_ADC_GetValue(&hadc1);
 8000df2:	4806      	ldr	r0, [pc, #24]	; (8000e0c <reading_analog_ir_sensor1+0x68>)
 8000df4:	f001 fd22 	bl	800283c <HAL_ADC_GetValue>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	801a      	strh	r2, [r3, #0]

}
 8000e00:	bf00      	nop
 8000e02:	3720      	adds	r7, #32
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	14f00020 	.word	0x14f00020
 8000e0c:	200000a0 	.word	0x200000a0

08000e10 <reading_analog_ir_sensor3>:

void reading_analog_ir_sensor3(uint16_t *sensorValue)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000e18:	f107 0308 	add.w	r3, r7, #8
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
 8000e28:	615a      	str	r2, [r3, #20]

    // Configure and start ADC conversions for A1
    sConfig.Channel = ADC_CHANNEL_6;
 8000e2a:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <reading_analog_ir_sensor3+0x64>)
 8000e2c:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e2e:	2306      	movs	r3, #6
 8000e30:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e36:	237f      	movs	r3, #127	; 0x7f
 8000e38:	617b      	str	r3, [r7, #20]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e3a:	2304      	movs	r3, #4
 8000e3c:	61bb      	str	r3, [r7, #24]
    sConfig.Offset = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]

    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	4619      	mov	r1, r3
 8000e48:	480b      	ldr	r0, [pc, #44]	; (8000e78 <reading_analog_ir_sensor3+0x68>)
 8000e4a:	f001 fd05 	bl	8002858 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc1);
 8000e4e:	480a      	ldr	r0, [pc, #40]	; (8000e78 <reading_analog_ir_sensor3+0x68>)
 8000e50:	f001 fb62 	bl	8002518 <HAL_ADC_Start>

    // Wait for conversion to complete
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <reading_analog_ir_sensor3+0x68>)
 8000e5a:	f001 fc17 	bl	800268c <HAL_ADC_PollForConversion>

    // Read ADC value for A0
    *sensorValue = HAL_ADC_GetValue(&hadc1);
 8000e5e:	4806      	ldr	r0, [pc, #24]	; (8000e78 <reading_analog_ir_sensor3+0x68>)
 8000e60:	f001 fcec 	bl	800283c <HAL_ADC_GetValue>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	801a      	strh	r2, [r3, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	3720      	adds	r7, #32
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	19200040 	.word	0x19200040
 8000e78:	200000a0 	.word	0x200000a0

08000e7c <reading_analog_smoke_sensor1>:

void reading_analog_smoke_sensor1(uint16_t *sensorValue)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b088      	sub	sp, #32
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000e84:	f107 0308 	add.w	r3, r7, #8
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
 8000e94:	615a      	str	r2, [r3, #20]

    // Configure and start ADC conversions for A2
    sConfig.Channel = ADC_CHANNEL_9;
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <reading_analog_smoke_sensor1+0x64>)
 8000e98:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	613b      	str	r3, [r7, #16]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ea2:	237f      	movs	r3, #127	; 0x7f
 8000ea4:	617b      	str	r3, [r7, #20]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
    sConfig.Offset = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]

    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000eae:	f107 0308 	add.w	r3, r7, #8
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	480b      	ldr	r0, [pc, #44]	; (8000ee4 <reading_analog_smoke_sensor1+0x68>)
 8000eb6:	f001 fccf 	bl	8002858 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc1);
 8000eba:	480a      	ldr	r0, [pc, #40]	; (8000ee4 <reading_analog_smoke_sensor1+0x68>)
 8000ebc:	f001 fb2c 	bl	8002518 <HAL_ADC_Start>

    // Wait for conversion to complete
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ec4:	4807      	ldr	r0, [pc, #28]	; (8000ee4 <reading_analog_smoke_sensor1+0x68>)
 8000ec6:	f001 fbe1 	bl	800268c <HAL_ADC_PollForConversion>

    // Read ADC value for A0
    *sensorValue = HAL_ADC_GetValue(&hadc1);
 8000eca:	4806      	ldr	r0, [pc, #24]	; (8000ee4 <reading_analog_smoke_sensor1+0x68>)
 8000ecc:	f001 fcb6 	bl	800283c <HAL_ADC_GetValue>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	801a      	strh	r2, [r3, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	25b00200 	.word	0x25b00200
 8000ee4:	200000a0 	.word	0x200000a0

08000ee8 <reading_analog_smoke_sensor2>:

void reading_analog_smoke_sensor2(uint16_t *sensorValue)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000ef0:	f107 0308 	add.w	r3, r7, #8
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
 8000f00:	615a      	str	r2, [r3, #20]

    // Configure and start ADC conversions for A3
    sConfig.Channel = ADC_CHANNEL_15;
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <reading_analog_smoke_sensor2+0x64>)
 8000f04:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f06:	2306      	movs	r3, #6
 8000f08:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
    sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f0e:	237f      	movs	r3, #127	; 0x7f
 8000f10:	617b      	str	r3, [r7, #20]
    sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f12:	2304      	movs	r3, #4
 8000f14:	61bb      	str	r3, [r7, #24]
    sConfig.Offset = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]

    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480b      	ldr	r0, [pc, #44]	; (8000f50 <reading_analog_smoke_sensor2+0x68>)
 8000f22:	f001 fc99 	bl	8002858 <HAL_ADC_ConfigChannel>
    HAL_ADC_Start(&hadc1);
 8000f26:	480a      	ldr	r0, [pc, #40]	; (8000f50 <reading_analog_smoke_sensor2+0x68>)
 8000f28:	f001 faf6 	bl	8002518 <HAL_ADC_Start>

    // Wait for conversion to complete
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f30:	4807      	ldr	r0, [pc, #28]	; (8000f50 <reading_analog_smoke_sensor2+0x68>)
 8000f32:	f001 fbab 	bl	800268c <HAL_ADC_PollForConversion>

    // Read ADC value for A0
    *sensorValue = HAL_ADC_GetValue(&hadc1);
 8000f36:	4806      	ldr	r0, [pc, #24]	; (8000f50 <reading_analog_smoke_sensor2+0x68>)
 8000f38:	f001 fc80 	bl	800283c <HAL_ADC_GetValue>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	801a      	strh	r2, [r3, #0]
}
 8000f44:	bf00      	nop
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	3ef08000 	.word	0x3ef08000
 8000f50:	200000a0 	.word	0x200000a0

08000f54 <reading_digital_sensor>:

// Function to read digital sensor values
void reading_digital_sensor(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint16_t *sensorValue)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	817b      	strh	r3, [r7, #10]
	*sensorValue = !HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000f62:	897b      	ldrh	r3, [r7, #10]
 8000f64:	4619      	mov	r1, r3
 8000f66:	68f8      	ldr	r0, [r7, #12]
 8000f68:	f002 fc54 	bl	8003814 <HAL_GPIO_ReadPin>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	bf0c      	ite	eq
 8000f72:	2301      	moveq	r3, #1
 8000f74:	2300      	movne	r3, #0
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	801a      	strh	r2, [r3, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <reading_sensor_values>:

// Function to read all sensor values
void reading_sensor_values()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	reading_analog_ir_sensor1(&ir_sensor1);
 8000f8c:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <reading_sensor_values+0x38>)
 8000f8e:	f7ff ff09 	bl	8000da4 <reading_analog_ir_sensor1>
	reading_digital_sensor(GPIOA, GPIO_PIN_10, &ir_sensor2);
 8000f92:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <reading_sensor_values+0x3c>)
 8000f94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f9c:	f7ff ffda 	bl	8000f54 <reading_digital_sensor>
	reading_analog_ir_sensor3(&ir_sensor3);
 8000fa0:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <reading_sensor_values+0x40>)
 8000fa2:	f7ff ff35 	bl	8000e10 <reading_analog_ir_sensor3>
	reading_digital_sensor(GPIOB, GPIO_PIN_3, &ir_sensor4);
 8000fa6:	4a09      	ldr	r2, [pc, #36]	; (8000fcc <reading_sensor_values+0x44>)
 8000fa8:	2108      	movs	r1, #8
 8000faa:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <reading_sensor_values+0x48>)
 8000fac:	f7ff ffd2 	bl	8000f54 <reading_digital_sensor>
	reading_analog_smoke_sensor1(&smoke_sensor1);
 8000fb0:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <reading_sensor_values+0x4c>)
 8000fb2:	f7ff ff63 	bl	8000e7c <reading_analog_smoke_sensor1>
	reading_analog_smoke_sensor2(&smoke_sensor2);
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <reading_sensor_values+0x50>)
 8000fb8:	f7ff ff96 	bl	8000ee8 <reading_analog_smoke_sensor2>
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000088 	.word	0x20000088
 8000fc4:	2000008a 	.word	0x2000008a
 8000fc8:	2000008c 	.word	0x2000008c
 8000fcc:	2000008e 	.word	0x2000008e
 8000fd0:	48000400 	.word	0x48000400
 8000fd4:	20000090 	.word	0x20000090
 8000fd8:	20000092 	.word	0x20000092

08000fdc <sending_data_uart>:
    return 0; // Timeout occurred
}

// Frame format: "#[ID]=[Value]|[ID]=[Value]|[ID]=[Value]\n"
void sending_data_uart(void *argument)
{
 8000fdc:	b5b0      	push	{r4, r5, r7, lr}
 8000fde:	b0a0      	sub	sp, #128	; 0x80
 8000fe0:	af04      	add	r7, sp, #16
 8000fe2:	6078      	str	r0, [r7, #4]
	char tx[SIZE_TX + 1];

	while (1)
	{
		osMutexAcquire(uartMutex, osWaitForever);
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <sending_data_uart+0x80>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fec:	4618      	mov	r0, r3
 8000fee:	f006 f926 	bl	800723e <osMutexAcquire>

		reading_sensor_values();
 8000ff2:	f7ff ffc9 	bl	8000f88 <reading_sensor_values>

		// Create and transmit the frame
		sprintf(tx, "#IR_SENSOR1=%hu|IR_SENSOR2=%u|IR_SENSOR3=4095|IR_SENSOR4=%u|SMOKE_SENSOR1=%hu|SMOKE_SENSOR2=%hu\n", ir_sensor1, ir_sensor2, ir_sensor4, smoke_sensor1, smoke_sensor2);
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	; (8001060 <sending_data_uart+0x84>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	461c      	mov	r4, r3
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <sending_data_uart+0x88>)
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	461d      	mov	r5, r3
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <sending_data_uart+0x8c>)
 8001004:	881b      	ldrh	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <sending_data_uart+0x90>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	4b18      	ldr	r3, [pc, #96]	; (8001070 <sending_data_uart+0x94>)
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	f107 0008 	add.w	r0, r7, #8
 8001016:	9302      	str	r3, [sp, #8]
 8001018:	9101      	str	r1, [sp, #4]
 800101a:	9200      	str	r2, [sp, #0]
 800101c:	462b      	mov	r3, r5
 800101e:	4622      	mov	r2, r4
 8001020:	4914      	ldr	r1, [pc, #80]	; (8001074 <sending_data_uart+0x98>)
 8001022:	f009 fa65 	bl	800a4f0 <siprintf>

		HAL_UART_Transmit(&huart2, (const uint8_t *)tx, strlen(tx), 100);
 8001026:	f107 0308 	add.w	r3, r7, #8
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff f8da 	bl	80001e4 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	b29a      	uxth	r2, r3
 8001034:	f107 0108 	add.w	r1, r7, #8
 8001038:	2364      	movs	r3, #100	; 0x64
 800103a:	480f      	ldr	r0, [pc, #60]	; (8001078 <sending_data_uart+0x9c>)
 800103c:	f005 f92c 	bl	8006298 <HAL_UART_Transmit>

		osMutexRelease(uartMutex);
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <sending_data_uart+0x80>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f006 f945 	bl	80072d4 <osMutexRelease>

        osDelay(msToTicks(500));
 800104a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800104e:	f7ff fe93 	bl	8000d78 <msToTicks>
 8001052:	4603      	mov	r3, r0
 8001054:	4618      	mov	r0, r3
 8001056:	f006 f851 	bl	80070fc <osDelay>
		osMutexAcquire(uartMutex, osWaitForever);
 800105a:	e7c3      	b.n	8000fe4 <sending_data_uart+0x8>
 800105c:	20000094 	.word	0x20000094
 8001060:	20000088 	.word	0x20000088
 8001064:	2000008a 	.word	0x2000008a
 8001068:	2000008e 	.word	0x2000008e
 800106c:	20000090 	.word	0x20000090
 8001070:	20000092 	.word	0x20000092
 8001074:	0800b744 	.word	0x0800b744
 8001078:	2000019c 	.word	0x2000019c

0800107c <receiving_data_uart>:
}


// Frame format: "#[ID]=[Value]\n"
void receiving_data_uart()
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
    char buf[1];
    char rx[SIZE_RX + 1];

    while (1)
    {
        osMutexAcquire(uartMutex, osWaitForever);
 8001082:	4b3d      	ldr	r3, [pc, #244]	; (8001178 <receiving_data_uart+0xfc>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800108a:	4618      	mov	r0, r3
 800108c:	f006 f8d7 	bl	800723e <osMutexAcquire>

        // Wait for "START_OF_FRAME"
        do
        {
            HAL_UART_Receive(&huart2, (uint8_t *)buf, 1, 100);
 8001090:	f107 010c 	add.w	r1, r7, #12
 8001094:	2364      	movs	r3, #100	; 0x64
 8001096:	2201      	movs	r2, #1
 8001098:	4838      	ldr	r0, [pc, #224]	; (800117c <receiving_data_uart+0x100>)
 800109a:	f005 f987 	bl	80063ac <HAL_UART_Receive>
        } while (*buf != START_OF_FRAME);
 800109e:	7b3b      	ldrb	r3, [r7, #12]
 80010a0:	2b23      	cmp	r3, #35	; 0x23
 80010a2:	d1f5      	bne.n	8001090 <receiving_data_uart+0x14>

        // Receive data until "END_OF_FRAME"
        int i = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
        do
        {
            HAL_UART_Receive(&huart2, (uint8_t *)buf, 1, 100);
 80010a8:	f107 010c 	add.w	r1, r7, #12
 80010ac:	2364      	movs	r3, #100	; 0x64
 80010ae:	2201      	movs	r2, #1
 80010b0:	4832      	ldr	r0, [pc, #200]	; (800117c <receiving_data_uart+0x100>)
 80010b2:	f005 f97b 	bl	80063ac <HAL_UART_Receive>
            rx[i++] = *buf;
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	61fa      	str	r2, [r7, #28]
 80010bc:	7b3a      	ldrb	r2, [r7, #12]
 80010be:	3320      	adds	r3, #32
 80010c0:	443b      	add	r3, r7
 80010c2:	f803 2c20 	strb.w	r2, [r3, #-32]

        } while (*buf != END_OF_FRAME);
 80010c6:	7b3b      	ldrb	r3, [r7, #12]
 80010c8:	2b0a      	cmp	r3, #10
 80010ca:	d1ed      	bne.n	80010a8 <receiving_data_uart+0x2c>

        rx[i] = '\0';
 80010cc:	463a      	mov	r2, r7
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	4413      	add	r3, r2
 80010d2:	2200      	movs	r2, #0
 80010d4:	701a      	strb	r2, [r3, #0]

        // Extract ID and Value from the received frame
        char *id = strtok(rx, "=");    // ID
 80010d6:	463b      	mov	r3, r7
 80010d8:	4929      	ldr	r1, [pc, #164]	; (8001180 <receiving_data_uart+0x104>)
 80010da:	4618      	mov	r0, r3
 80010dc:	f009 fa74 	bl	800a5c8 <strtok>
 80010e0:	61b8      	str	r0, [r7, #24]
        char *value = strtok(NULL, "="); // Value
 80010e2:	4927      	ldr	r1, [pc, #156]	; (8001180 <receiving_data_uart+0x104>)
 80010e4:	2000      	movs	r0, #0
 80010e6:	f009 fa6f 	bl	800a5c8 <strtok>
 80010ea:	6178      	str	r0, [r7, #20]

        // Process based on ID and Value
        if (id != NULL && value != NULL)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d03b      	beq.n	800116a <receiving_data_uart+0xee>
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d038      	beq.n	800116a <receiving_data_uart+0xee>
        {
            if (strcmp(id, "fire") == 0)
 80010f8:	4922      	ldr	r1, [pc, #136]	; (8001184 <receiving_data_uart+0x108>)
 80010fa:	69b8      	ldr	r0, [r7, #24]
 80010fc:	f7ff f868 	bl	80001d0 <strcmp>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d121      	bne.n	800114a <receiving_data_uart+0xce>
            {
                // Handle Fire sensor value
                if (atoi(value) == 1)
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f009 f8a0 	bl	800a24c <atoi>
 800110c:	4603      	mov	r3, r0
 800110e:	2b01      	cmp	r3, #1
 8001110:	d10a      	bne.n	8001128 <receiving_data_uart+0xac>
                {
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001112:	2201      	movs	r2, #1
 8001114:	2110      	movs	r1, #16
 8001116:	481c      	ldr	r0, [pc, #112]	; (8001188 <receiving_data_uart+0x10c>)
 8001118:	f002 fb94 	bl	8003844 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	2120      	movs	r1, #32
 8001120:	4819      	ldr	r0, [pc, #100]	; (8001188 <receiving_data_uart+0x10c>)
 8001122:	f002 fb8f 	bl	8003844 <HAL_GPIO_WritePin>
 8001126:	e020      	b.n	800116a <receiving_data_uart+0xee>
                }
                else if (atoi(value) == 0)
 8001128:	6978      	ldr	r0, [r7, #20]
 800112a:	f009 f88f 	bl	800a24c <atoi>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d11a      	bne.n	800116a <receiving_data_uart+0xee>
                {
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2110      	movs	r1, #16
 8001138:	4813      	ldr	r0, [pc, #76]	; (8001188 <receiving_data_uart+0x10c>)
 800113a:	f002 fb83 	bl	8003844 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800113e:	2200      	movs	r2, #0
 8001140:	2120      	movs	r1, #32
 8001142:	4811      	ldr	r0, [pc, #68]	; (8001188 <receiving_data_uart+0x10c>)
 8001144:	f002 fb7e 	bl	8003844 <HAL_GPIO_WritePin>
 8001148:	e00f      	b.n	800116a <receiving_data_uart+0xee>
                else
                {
                    // Handle error
                }
            }
            else if (strcmp(id, "c") == 0)
 800114a:	4910      	ldr	r1, [pc, #64]	; (800118c <receiving_data_uart+0x110>)
 800114c:	69b8      	ldr	r0, [r7, #24]
 800114e:	f7ff f83f 	bl	80001d0 <strcmp>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d108      	bne.n	800116a <receiving_data_uart+0xee>
            {
                // Handle PWM value
                uint32_t cmd_angle = atoi(value);
 8001158:	6978      	ldr	r0, [r7, #20]
 800115a:	f009 f877 	bl	800a24c <atoi>
 800115e:	4603      	mov	r3, r0
 8001160:	613b      	str	r3, [r7, #16]
                update_CCR_timer_PWM(cmd_angle, &htim3);
 8001162:	490b      	ldr	r1, [pc, #44]	; (8001190 <receiving_data_uart+0x114>)
 8001164:	6938      	ldr	r0, [r7, #16]
 8001166:	f000 f817 	bl	8001198 <update_CCR_timer_PWM>
            {
                // Handle other IDs or report error
            }
        }

        osMutexRelease(uartMutex);
 800116a:	4b03      	ldr	r3, [pc, #12]	; (8001178 <receiving_data_uart+0xfc>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f006 f8b0 	bl	80072d4 <osMutexRelease>
    {
 8001174:	e785      	b.n	8001082 <receiving_data_uart+0x6>
 8001176:	bf00      	nop
 8001178:	20000094 	.word	0x20000094
 800117c:	2000019c 	.word	0x2000019c
 8001180:	0800b7a8 	.word	0x0800b7a8
 8001184:	0800b7ac 	.word	0x0800b7ac
 8001188:	48000400 	.word	0x48000400
 800118c:	0800b7b4 	.word	0x0800b7b4
 8001190:	20000150 	.word	0x20000150
 8001194:	00000000 	.word	0x00000000

08001198 <update_CCR_timer_PWM>:
    }
}


void update_CCR_timer_PWM(uint32_t cmd_angle_deg, TIM_HandleTypeDef * htim)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
	if (cmd_angle_deg < 0)
	{
		cmd_angle_deg = 0;
	} else if (cmd_angle_deg > 180)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2bb4      	cmp	r3, #180	; 0xb4
 80011a6:	d901      	bls.n	80011ac <update_CCR_timer_PWM+0x14>
	{
		cmd_angle_deg = 180;
 80011a8:	23b4      	movs	r3, #180	; 0xb4
 80011aa:	607b      	str	r3, [r7, #4]
	}
	uint32_t ARR_timer = htim->Instance->ARR;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b2:	613b      	str	r3, [r7, #16]

	uint32_t CCR_value_180_deg = angle_180_duty_ratio_PWM*ARR_timer/100; //2100 here
 80011b4:	6938      	ldr	r0, [r7, #16]
 80011b6:	f7ff f9b5 	bl	8000524 <__aeabi_ui2d>
 80011ba:	a32d      	add	r3, pc, #180	; (adr r3, 8001270 <update_CCR_timer_PWM+0xd8>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fa2a 	bl	8000618 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b25      	ldr	r3, [pc, #148]	; (8001268 <update_CCR_timer_PWM+0xd0>)
 80011d2:	f7ff fb4b 	bl	800086c <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f7ff fc2d 	bl	8000a3c <__aeabi_d2uiz>
 80011e2:	4603      	mov	r3, r0
 80011e4:	60fb      	str	r3, [r7, #12]
	uint32_t CCR_value_0_deg = angle_0_duty_ratio_PWM*ARR_timer/100; // 450 here
 80011e6:	6938      	ldr	r0, [r7, #16]
 80011e8:	f7ff f99c 	bl	8000524 <__aeabi_ui2d>
 80011ec:	a31c      	add	r3, pc, #112	; (adr r3, 8001260 <update_CCR_timer_PWM+0xc8>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff fa11 	bl	8000618 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f04f 0200 	mov.w	r2, #0
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <update_CCR_timer_PWM+0xd0>)
 8001204:	f7ff fb32 	bl	800086c <__aeabi_ddiv>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fc14 	bl	8000a3c <__aeabi_d2uiz>
 8001214:	4603      	mov	r3, r0
 8001216:	60bb      	str	r3, [r7, #8]

	int CCR_required = (CCR_value_180_deg-CCR_value_0_deg) * cmd_angle_deg / 180 + CCR_value_0_deg;
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	fb02 f303 	mul.w	r3, r2, r3
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	4a11      	ldr	r2, [pc, #68]	; (800126c <update_CCR_timer_PWM+0xd4>)
 8001228:	fba2 2303 	umull	r2, r3, r2, r3
 800122c:	089a      	lsrs	r2, r3, #2
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	4413      	add	r3, r2
 8001232:	617b      	str	r3, [r7, #20]

	if (CCR_required > CCR_value_180_deg)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	429a      	cmp	r2, r3
 800123a:	d202      	bcs.n	8001242 <update_CCR_timer_PWM+0xaa>
	{
		CCR_required = CCR_value_180_deg ;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	e005      	b.n	800124e <update_CCR_timer_PWM+0xb6>
	} else if (CCR_required < CCR_value_0_deg)
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	68ba      	ldr	r2, [r7, #8]
 8001246:	429a      	cmp	r2, r3
 8001248:	d901      	bls.n	800124e <update_CCR_timer_PWM+0xb6>
	{
		CCR_required = CCR_value_0_deg;
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	617b      	str	r3, [r7, #20]
	}
	htim->Instance->CCR1=CCR_required;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001256:	bf00      	nop
 8001258:	3718      	adds	r7, #24
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	47ae147b 	.word	0x47ae147b
 8001264:	40067ae1 	.word	0x40067ae1
 8001268:	40590000 	.word	0x40590000
 800126c:	16c16c17 	.word	0x16c16c17
 8001270:	5c28f5c3 	.word	0x5c28f5c3
 8001274:	402a428f 	.word	0x402a428f

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127c:	f000 fd9c 	bl	8001db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001280:	f000 f84c 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001284:	f000 fa28 	bl	80016d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001288:	f000 f9f6 	bl	8001678 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800128c:	f000 f898 	bl	80013c0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001290:	f000 f8ea 	bl	8001468 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001294:	f000 f978 	bl	8001588 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim3);
 8001298:	4816      	ldr	r0, [pc, #88]	; (80012f4 <main+0x7c>)
 800129a:	f003 feb9 	bl	8005010 <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800129e:	2100      	movs	r1, #0
 80012a0:	4814      	ldr	r0, [pc, #80]	; (80012f4 <main+0x7c>)
 80012a2:	f003 ff17 	bl	80050d4 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012a6:	f005 fe4d 	bl	8006f44 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  uartMutex = osMutexNew(NULL);
 80012aa:	2000      	movs	r0, #0
 80012ac:	f005 ff41 	bl	8007132 <osMutexNew>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a11      	ldr	r2, [pc, #68]	; (80012f8 <main+0x80>)
 80012b4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012b6:	4a11      	ldr	r2, [pc, #68]	; (80012fc <main+0x84>)
 80012b8:	2100      	movs	r1, #0
 80012ba:	4811      	ldr	r0, [pc, #68]	; (8001300 <main+0x88>)
 80012bc:	f005 fe8c 	bl	8006fd8 <osThreadNew>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4a10      	ldr	r2, [pc, #64]	; (8001304 <main+0x8c>)
 80012c4:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* Create tasks */
  senderThreadId = osThreadNew(sending_data_uart, NULL, &senderTask_attributes);
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <main+0x90>)
 80012c8:	2100      	movs	r1, #0
 80012ca:	4810      	ldr	r0, [pc, #64]	; (800130c <main+0x94>)
 80012cc:	f005 fe84 	bl	8006fd8 <osThreadNew>
 80012d0:	4603      	mov	r3, r0
 80012d2:	4a0f      	ldr	r2, [pc, #60]	; (8001310 <main+0x98>)
 80012d4:	6013      	str	r3, [r2, #0]
  receiverThreadId = osThreadNew(receiving_data_uart, NULL, NULL);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	480e      	ldr	r0, [pc, #56]	; (8001314 <main+0x9c>)
 80012dc:	f005 fe7c 	bl	8006fd8 <osThreadNew>
 80012e0:	4603      	mov	r3, r0
 80012e2:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <main+0xa0>)
 80012e4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  update_CCR_timer_PWM(90,&htim3);
 80012e6:	4903      	ldr	r1, [pc, #12]	; (80012f4 <main+0x7c>)
 80012e8:	205a      	movs	r0, #90	; 0x5a
 80012ea:	f7ff ff55 	bl	8001198 <update_CCR_timer_PWM>
//update_CCR_timer_PWM(0,&htim3);
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80012ee:	f005 fe4d 	bl	8006f8c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <main+0x7a>
 80012f4:	20000150 	.word	0x20000150
 80012f8:	20000094 	.word	0x20000094
 80012fc:	0800b800 	.word	0x0800b800
 8001300:	08001809 	.word	0x08001809
 8001304:	20000224 	.word	0x20000224
 8001308:	0800b7dc 	.word	0x0800b7dc
 800130c:	08000fdd 	.word	0x08000fdd
 8001310:	20000098 	.word	0x20000098
 8001314:	0800107d 	.word	0x0800107d
 8001318:	2000009c 	.word	0x2000009c

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b096      	sub	sp, #88	; 0x58
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0314 	add.w	r3, r7, #20
 8001326:	2244      	movs	r2, #68	; 0x44
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f009 f943 	bl	800a5b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
 800133c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800133e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001342:	f002 faa5 	bl	8003890 <HAL_PWREx_ControlVoltageScaling>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800134c:	f000 fa64 	bl	8001818 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001350:	2302      	movs	r3, #2
 8001352:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001358:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800135a:	2310      	movs	r3, #16
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800135e:	2302      	movs	r3, #2
 8001360:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001362:	2302      	movs	r3, #2
 8001364:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001366:	2301      	movs	r3, #1
 8001368:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800136a:	230a      	movs	r3, #10
 800136c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800136e:	2307      	movs	r3, #7
 8001370:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001372:	2302      	movs	r3, #2
 8001374:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001376:	2302      	movs	r3, #2
 8001378:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	4618      	mov	r0, r3
 8001380:	f002 fadc 	bl	800393c <HAL_RCC_OscConfig>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800138a:	f000 fa45 	bl	8001818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800138e:	230f      	movs	r3, #15
 8001390:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001392:	2303      	movs	r3, #3
 8001394:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013a2:	463b      	mov	r3, r7
 80013a4:	2104      	movs	r1, #4
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fea4 	bl	80040f4 <HAL_RCC_ClockConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013b2:	f000 fa31 	bl	8001818 <Error_Handler>
  }
}
 80013b6:	bf00      	nop
 80013b8:	3758      	adds	r7, #88	; 0x58
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013d0:	4b23      	ldr	r3, [pc, #140]	; (8001460 <MX_ADC1_Init+0xa0>)
 80013d2:	4a24      	ldr	r2, [pc, #144]	; (8001464 <MX_ADC1_Init+0xa4>)
 80013d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80013d6:	4b22      	ldr	r3, [pc, #136]	; (8001460 <MX_ADC1_Init+0xa0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013dc:	4b20      	ldr	r3, [pc, #128]	; (8001460 <MX_ADC1_Init+0xa0>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <MX_ADC1_Init+0xa0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013e8:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <MX_ADC1_Init+0xa0>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <MX_ADC1_Init+0xa0>)
 80013f0:	2204      	movs	r2, #4
 80013f2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <MX_ADC1_Init+0xa0>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <MX_ADC1_Init+0xa0>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <MX_ADC1_Init+0xa0>)
 8001402:	2201      	movs	r2, #1
 8001404:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001406:	4b16      	ldr	r3, [pc, #88]	; (8001460 <MX_ADC1_Init+0xa0>)
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800140e:	4b14      	ldr	r3, [pc, #80]	; (8001460 <MX_ADC1_Init+0xa0>)
 8001410:	2200      	movs	r2, #0
 8001412:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <MX_ADC1_Init+0xa0>)
 8001416:	2200      	movs	r2, #0
 8001418:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <MX_ADC1_Init+0xa0>)
 800141c:	2200      	movs	r2, #0
 800141e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <MX_ADC1_Init+0xa0>)
 8001424:	2200      	movs	r2, #0
 8001426:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001428:	4b0d      	ldr	r3, [pc, #52]	; (8001460 <MX_ADC1_Init+0xa0>)
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001430:	480b      	ldr	r0, [pc, #44]	; (8001460 <MX_ADC1_Init+0xa0>)
 8001432:	f000 ff21 	bl	8002278 <HAL_ADC_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 800143c:	f000 f9ec 	bl	8001818 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001440:	2300      	movs	r3, #0
 8001442:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	4619      	mov	r1, r3
 8001448:	4805      	ldr	r0, [pc, #20]	; (8001460 <MX_ADC1_Init+0xa0>)
 800144a:	f001 fea3 	bl	8003194 <HAL_ADCEx_MultiModeConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001454:	f000 f9e0 	bl	8001818 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200000a0 	.word	0x200000a0
 8001464:	50040000 	.word	0x50040000

08001468 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b096      	sub	sp, #88	; 0x58
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800147a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	615a      	str	r2, [r3, #20]
 800148c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	222c      	movs	r2, #44	; 0x2c
 8001492:	2100      	movs	r1, #0
 8001494:	4618      	mov	r0, r3
 8001496:	f009 f88e 	bl	800a5b6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800149a:	4b39      	ldr	r3, [pc, #228]	; (8001580 <MX_TIM1_Init+0x118>)
 800149c:	4a39      	ldr	r2, [pc, #228]	; (8001584 <MX_TIM1_Init+0x11c>)
 800149e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014a0:	4b37      	ldr	r3, [pc, #220]	; (8001580 <MX_TIM1_Init+0x118>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a6:	4b36      	ldr	r3, [pc, #216]	; (8001580 <MX_TIM1_Init+0x118>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <MX_TIM1_Init+0x118>)
 80014ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b4:	4b32      	ldr	r3, [pc, #200]	; (8001580 <MX_TIM1_Init+0x118>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ba:	4b31      	ldr	r3, [pc, #196]	; (8001580 <MX_TIM1_Init+0x118>)
 80014bc:	2200      	movs	r2, #0
 80014be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c0:	4b2f      	ldr	r3, [pc, #188]	; (8001580 <MX_TIM1_Init+0x118>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80014c6:	482e      	ldr	r0, [pc, #184]	; (8001580 <MX_TIM1_Init+0x118>)
 80014c8:	f003 fd4b 	bl	8004f62 <HAL_TIM_OC_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80014d2:	f000 f9a1 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80014da:	2300      	movs	r3, #0
 80014dc:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014de:	2300      	movs	r3, #0
 80014e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014e6:	4619      	mov	r1, r3
 80014e8:	4825      	ldr	r0, [pc, #148]	; (8001580 <MX_TIM1_Init+0x118>)
 80014ea:	f004 fd81 	bl	8005ff0 <HAL_TIMEx_MasterConfigSynchronization>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014f4:	f000 f990 	bl	8001818 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001500:	2300      	movs	r3, #0
 8001502:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001504:	2300      	movs	r3, #0
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001514:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001518:	2200      	movs	r2, #0
 800151a:	4619      	mov	r1, r3
 800151c:	4818      	ldr	r0, [pc, #96]	; (8001580 <MX_TIM1_Init+0x118>)
 800151e:	f003 fedf 	bl	80052e0 <HAL_TIM_OC_ConfigChannel>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001528:	f000 f976 	bl	8001818 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001530:	2300      	movs	r3, #0
 8001532:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001544:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800154e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	4807      	ldr	r0, [pc, #28]	; (8001580 <MX_TIM1_Init+0x118>)
 8001562:	f004 fdcd 	bl	8006100 <HAL_TIMEx_ConfigBreakDeadTime>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800156c:	f000 f954 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001570:	4803      	ldr	r0, [pc, #12]	; (8001580 <MX_TIM1_Init+0x118>)
 8001572:	f000 fa45 	bl	8001a00 <HAL_TIM_MspPostInit>

}
 8001576:	bf00      	nop
 8001578:	3758      	adds	r7, #88	; 0x58
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000104 	.word	0x20000104
 8001584:	40012c00 	.word	0x40012c00

08001588 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08e      	sub	sp, #56	; 0x38
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	605a      	str	r2, [r3, #4]
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a8:	463b      	mov	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
 80015b6:	615a      	str	r2, [r3, #20]
 80015b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015ba:	4b2d      	ldr	r3, [pc, #180]	; (8001670 <MX_TIM3_Init+0xe8>)
 80015bc:	4a2d      	ldr	r2, [pc, #180]	; (8001674 <MX_TIM3_Init+0xec>)
 80015be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80015c0:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <MX_TIM3_Init+0xe8>)
 80015c2:	2263      	movs	r2, #99	; 0x63
 80015c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b2a      	ldr	r3, [pc, #168]	; (8001670 <MX_TIM3_Init+0xe8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16000;
 80015cc:	4b28      	ldr	r3, [pc, #160]	; (8001670 <MX_TIM3_Init+0xe8>)
 80015ce:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80015d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d4:	4b26      	ldr	r3, [pc, #152]	; (8001670 <MX_TIM3_Init+0xe8>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b25      	ldr	r3, [pc, #148]	; (8001670 <MX_TIM3_Init+0xe8>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015e0:	4823      	ldr	r0, [pc, #140]	; (8001670 <MX_TIM3_Init+0xe8>)
 80015e2:	f003 fc67 	bl	8004eb4 <HAL_TIM_Base_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80015ec:	f000 f914 	bl	8001818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015fa:	4619      	mov	r1, r3
 80015fc:	481c      	ldr	r0, [pc, #112]	; (8001670 <MX_TIM3_Init+0xe8>)
 80015fe:	f003 fffd 	bl	80055fc <HAL_TIM_ConfigClockSource>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001608:	f000 f906 	bl	8001818 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800160c:	4818      	ldr	r0, [pc, #96]	; (8001670 <MX_TIM3_Init+0xe8>)
 800160e:	f003 fcff 	bl	8005010 <HAL_TIM_PWM_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001618:	f000 f8fe 	bl	8001818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800161c:	2300      	movs	r3, #0
 800161e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	4811      	ldr	r0, [pc, #68]	; (8001670 <MX_TIM3_Init+0xe8>)
 800162c:	f004 fce0 	bl	8005ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001636:	f000 f8ef 	bl	8001818 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800163a:	2360      	movs	r3, #96	; 0x60
 800163c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800163e:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001642:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800164c:	463b      	mov	r3, r7
 800164e:	2200      	movs	r2, #0
 8001650:	4619      	mov	r1, r3
 8001652:	4807      	ldr	r0, [pc, #28]	; (8001670 <MX_TIM3_Init+0xe8>)
 8001654:	f003 febe 	bl	80053d4 <HAL_TIM_PWM_ConfigChannel>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800165e:	f000 f8db 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001662:	4803      	ldr	r0, [pc, #12]	; (8001670 <MX_TIM3_Init+0xe8>)
 8001664:	f000 f9cc 	bl	8001a00 <HAL_TIM_MspPostInit>

}
 8001668:	bf00      	nop
 800166a:	3738      	adds	r7, #56	; 0x38
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000150 	.word	0x20000150
 8001674:	40000400 	.word	0x40000400

08001678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <MX_USART2_UART_Init+0x5c>)
 8001680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 8001684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016bc:	f004 fd9e 	bl	80061fc <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016c6:	f000 f8a7 	bl	8001818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000019c 	.word	0x2000019c
 80016d4:	40004400 	.word	0x40004400

080016d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	605a      	str	r2, [r3, #4]
 80016e8:	609a      	str	r2, [r3, #8]
 80016ea:	60da      	str	r2, [r3, #12]
 80016ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ee:	4b43      	ldr	r3, [pc, #268]	; (80017fc <MX_GPIO_Init+0x124>)
 80016f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f2:	4a42      	ldr	r2, [pc, #264]	; (80017fc <MX_GPIO_Init+0x124>)
 80016f4:	f043 0304 	orr.w	r3, r3, #4
 80016f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fa:	4b40      	ldr	r3, [pc, #256]	; (80017fc <MX_GPIO_Init+0x124>)
 80016fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fe:	f003 0304 	and.w	r3, r3, #4
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <MX_GPIO_Init+0x124>)
 8001708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170a:	4a3c      	ldr	r2, [pc, #240]	; (80017fc <MX_GPIO_Init+0x124>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001712:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <MX_GPIO_Init+0x124>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <MX_GPIO_Init+0x124>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	4a36      	ldr	r2, [pc, #216]	; (80017fc <MX_GPIO_Init+0x124>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172a:	4b34      	ldr	r3, [pc, #208]	; (80017fc <MX_GPIO_Init+0x124>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2120      	movs	r1, #32
 800173a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173e:	f002 f881 	bl	8003844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6___BUZZER_PRESSURE_Pin|D5___BUZZER_FIRE_Pin|D4___RELAIS_Pin, GPIO_PIN_RESET);
 8001742:	2200      	movs	r2, #0
 8001744:	f44f 6186 	mov.w	r1, #1072	; 0x430
 8001748:	482d      	ldr	r0, [pc, #180]	; (8001800 <MX_GPIO_Init+0x128>)
 800174a:	f002 f87b 	bl	8003844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800174e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001752:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001754:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800175e:	f107 030c 	add.w	r3, r7, #12
 8001762:	4619      	mov	r1, r3
 8001764:	4827      	ldr	r0, [pc, #156]	; (8001804 <MX_GPIO_Init+0x12c>)
 8001766:	f001 feab 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : A2___SMOKE_SENSOR1_Pin */
  GPIO_InitStruct.Pin = A2___SMOKE_SENSOR1_Pin;
 800176a:	2310      	movs	r3, #16
 800176c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800176e:	230b      	movs	r3, #11
 8001770:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(A2___SMOKE_SENSOR1_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	4619      	mov	r1, r3
 800177c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001780:	f001 fe9e 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001784:	2320      	movs	r3, #32
 8001786:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	4619      	mov	r1, r3
 800179a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179e:	f001 fe8f 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6___BUZZER_PRESSURE_Pin D5___BUZZER_FIRE_Pin D4___RELAIS_Pin */
  GPIO_InitStruct.Pin = D6___BUZZER_PRESSURE_Pin|D5___BUZZER_FIRE_Pin|D4___RELAIS_Pin;
 80017a2:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80017a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a8:	2301      	movs	r3, #1
 80017aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	4619      	mov	r1, r3
 80017ba:	4811      	ldr	r0, [pc, #68]	; (8001800 <MX_GPIO_Init+0x128>)
 80017bc:	f001 fe80 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2___IR_SENSOR2_Pin */
  GPIO_InitStruct.Pin = D2___IR_SENSOR2_Pin;
 80017c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D2___IR_SENSOR2_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	4619      	mov	r1, r3
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d8:	f001 fe72 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D3___IR_SENSOR4_Pin */
  GPIO_InitStruct.Pin = D3___IR_SENSOR4_Pin;
 80017dc:	2308      	movs	r3, #8
 80017de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e0:	2300      	movs	r3, #0
 80017e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D3___IR_SENSOR4_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	4619      	mov	r1, r3
 80017ee:	4804      	ldr	r0, [pc, #16]	; (8001800 <MX_GPIO_Init+0x128>)
 80017f0:	f001 fe66 	bl	80034c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40021000 	.word	0x40021000
 8001800:	48000400 	.word	0x48000400
 8001804:	48000800 	.word	0x48000800

08001808 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001810:	2001      	movs	r0, #1
 8001812:	f005 fc73 	bl	80070fc <osDelay>
 8001816:	e7fb      	b.n	8001810 <StartDefaultTask+0x8>

08001818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800181c:	b672      	cpsid	i
}
 800181e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001820:	e7fe      	b.n	8001820 <Error_Handler+0x8>
	...

08001824 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_MspInit+0x4c>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	4a10      	ldr	r2, [pc, #64]	; (8001870 <HAL_MspInit+0x4c>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6613      	str	r3, [r2, #96]	; 0x60
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <HAL_MspInit+0x4c>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_MspInit+0x4c>)
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_MspInit+0x4c>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	6593      	str	r3, [r2, #88]	; 0x58
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_MspInit+0x4c>)
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	210f      	movs	r1, #15
 800185e:	f06f 0001 	mvn.w	r0, #1
 8001862:	f001 fe04 	bl	800346e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000

08001874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b0ac      	sub	sp, #176	; 0xb0
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2288      	movs	r2, #136	; 0x88
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f008 fe8e 	bl	800a5b6 <memset>
  if(hadc->Instance==ADC1)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a35      	ldr	r2, [pc, #212]	; (8001974 <HAL_ADC_MspInit+0x100>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d162      	bne.n	800196a <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80018a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018a8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80018aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80018b2:	2302      	movs	r3, #2
 80018b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80018b6:	2301      	movs	r3, #1
 80018b8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80018ba:	2308      	movs	r3, #8
 80018bc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80018be:	2307      	movs	r3, #7
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80018c2:	2302      	movs	r3, #2
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80018c6:	2302      	movs	r3, #2
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80018ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	4618      	mov	r0, r3
 80018d6:	f002 fe31 	bl	800453c <HAL_RCCEx_PeriphCLKConfig>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80018e0:	f7ff ff9a 	bl	8001818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80018e4:	4b24      	ldr	r3, [pc, #144]	; (8001978 <HAL_ADC_MspInit+0x104>)
 80018e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e8:	4a23      	ldr	r2, [pc, #140]	; (8001978 <HAL_ADC_MspInit+0x104>)
 80018ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f0:	4b21      	ldr	r3, [pc, #132]	; (8001978 <HAL_ADC_MspInit+0x104>)
 80018f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fc:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <HAL_ADC_MspInit+0x104>)
 80018fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001900:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <HAL_ADC_MspInit+0x104>)
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <HAL_ADC_MspInit+0x104>)
 800190a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001914:	4b18      	ldr	r3, [pc, #96]	; (8001978 <HAL_ADC_MspInit+0x104>)
 8001916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001918:	4a17      	ldr	r2, [pc, #92]	; (8001978 <HAL_ADC_MspInit+0x104>)
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001920:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_ADC_MspInit+0x104>)
 8001922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = A0___IR_SENSOR1_Pin|A0___IR_SENSOR3_Pin|A2___SMOKE_SENSOR1_Pin;
 800192c:	2313      	movs	r3, #19
 800192e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001932:	230b      	movs	r3, #11
 8001934:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001948:	f001 fdba 	bl	80034c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A2___SMOKE_SENSOR2_Pin;
 800194c:	2301      	movs	r3, #1
 800194e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001952:	230b      	movs	r3, #11
 8001954:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(A2___SMOKE_SENSOR2_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <HAL_ADC_MspInit+0x108>)
 8001966:	f001 fdab 	bl	80034c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800196a:	bf00      	nop
 800196c:	37b0      	adds	r7, #176	; 0xb0
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	50040000 	.word	0x50040000
 8001978:	40021000 	.word	0x40021000
 800197c:	48000400 	.word	0x48000400

08001980 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <HAL_TIM_OC_MspInit+0x38>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d10b      	bne.n	80019aa <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001992:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_TIM_OC_MspInit+0x3c>)
 8001994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001996:	4a09      	ldr	r2, [pc, #36]	; (80019bc <HAL_TIM_OC_MspInit+0x3c>)
 8001998:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800199c:	6613      	str	r3, [r2, #96]	; 0x60
 800199e:	4b07      	ldr	r3, [pc, #28]	; (80019bc <HAL_TIM_OC_MspInit+0x3c>)
 80019a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40012c00 	.word	0x40012c00
 80019bc:	40021000 	.word	0x40021000

080019c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <HAL_TIM_Base_MspInit+0x38>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d10b      	bne.n	80019ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019d2:	4b0a      	ldr	r3, [pc, #40]	; (80019fc <HAL_TIM_Base_MspInit+0x3c>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	4a09      	ldr	r2, [pc, #36]	; (80019fc <HAL_TIM_Base_MspInit+0x3c>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6593      	str	r3, [r2, #88]	; 0x58
 80019de:	4b07      	ldr	r3, [pc, #28]	; (80019fc <HAL_TIM_Base_MspInit+0x3c>)
 80019e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019ea:	bf00      	nop
 80019ec:	3714      	adds	r7, #20
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40000400 	.word	0x40000400
 80019fc:	40021000 	.word	0x40021000

08001a00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a23      	ldr	r2, [pc, #140]	; (8001aac <HAL_TIM_MspPostInit+0xac>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d11e      	bne.n	8001a60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <HAL_TIM_MspPostInit+0xb0>)
 8001a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a26:	4a22      	ldr	r2, [pc, #136]	; (8001ab0 <HAL_TIM_MspPostInit+0xb0>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_TIM_MspPostInit+0xb0>)
 8001a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5a:	f001 fd31 	bl	80034c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a5e:	e021      	b.n	8001aa4 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <HAL_TIM_MspPostInit+0xb4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d11c      	bne.n	8001aa4 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_TIM_MspPostInit+0xb0>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	4a10      	ldr	r2, [pc, #64]	; (8001ab0 <HAL_TIM_MspPostInit+0xb0>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a76:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_TIM_MspPostInit+0xb0>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a82:	2340      	movs	r3, #64	; 0x40
 8001a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a92:	2302      	movs	r3, #2
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa0:	f001 fd0e 	bl	80034c0 <HAL_GPIO_Init>
}
 8001aa4:	bf00      	nop
 8001aa6:	3728      	adds	r7, #40	; 0x28
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40012c00 	.word	0x40012c00
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40000400 	.word	0x40000400

08001ab8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b0ac      	sub	sp, #176	; 0xb0
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	2288      	movs	r2, #136	; 0x88
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f008 fd6c 	bl	800a5b6 <memset>
  if(huart->Instance==USART2)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a21      	ldr	r2, [pc, #132]	; (8001b68 <HAL_UART_MspInit+0xb0>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d13b      	bne.n	8001b60 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ae8:	2302      	movs	r3, #2
 8001aea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001af0:	f107 0314 	add.w	r3, r7, #20
 8001af4:	4618      	mov	r0, r3
 8001af6:	f002 fd21 	bl	800453c <HAL_RCCEx_PeriphCLKConfig>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b00:	f7ff fe8a 	bl	8001818 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_UART_MspInit+0xb4>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	4a18      	ldr	r2, [pc, #96]	; (8001b6c <HAL_UART_MspInit+0xb4>)
 8001b0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8001b10:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <HAL_UART_MspInit+0xb4>)
 8001b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_UART_MspInit+0xb4>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <HAL_UART_MspInit+0xb4>)
 8001b22:	f043 0301 	orr.w	r3, r3, #1
 8001b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b28:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_UART_MspInit+0xb4>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	60fb      	str	r3, [r7, #12]
 8001b32:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b34:	230c      	movs	r3, #12
 8001b36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b4c:	2307      	movs	r3, #7
 8001b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b52:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b56:	4619      	mov	r1, r3
 8001b58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5c:	f001 fcb0 	bl	80034c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b60:	bf00      	nop
 8001b62:	37b0      	adds	r7, #176	; 0xb0
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40004400 	.word	0x40004400
 8001b6c:	40021000 	.word	0x40021000

08001b70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b74:	e7fe      	b.n	8001b74 <NMI_Handler+0x4>

08001b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7a:	e7fe      	b.n	8001b7a <HardFault_Handler+0x4>

08001b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <MemManage_Handler+0x4>

08001b82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <BusFault_Handler+0x4>

08001b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <UsageFault_Handler+0x4>

08001b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ba0:	f000 f966 	bl	8001e70 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ba4:	f007 f9ea 	bl	8008f7c <xTaskGetSchedulerState>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d001      	beq.n	8001bb2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001bae:	f008 f8d3 	bl	8009d58 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  return 1;
 8001bba:	2301      	movs	r3, #1
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <_kill>:

int _kill(int pid, int sig)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bd0:	f008 fd9c 	bl	800a70c <__errno>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2216      	movs	r2, #22
 8001bd8:	601a      	str	r2, [r3, #0]
  return -1;
 8001bda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <_exit>:

void _exit (int status)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b082      	sub	sp, #8
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f7ff ffe7 	bl	8001bc6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bf8:	e7fe      	b.n	8001bf8 <_exit+0x12>

08001bfa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
 8001c0a:	e00a      	b.n	8001c22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c0c:	f3af 8000 	nop.w
 8001c10:	4601      	mov	r1, r0
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1c5a      	adds	r2, r3, #1
 8001c16:	60ba      	str	r2, [r7, #8]
 8001c18:	b2ca      	uxtb	r2, r1
 8001c1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	dbf0      	blt.n	8001c0c <_read+0x12>
  }

  return len;
 8001c2a:	687b      	ldr	r3, [r7, #4]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	e009      	b.n	8001c5a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1c5a      	adds	r2, r3, #1
 8001c4a:	60ba      	str	r2, [r7, #8]
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	3301      	adds	r3, #1
 8001c58:	617b      	str	r3, [r7, #20]
 8001c5a:	697a      	ldr	r2, [r7, #20]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	dbf1      	blt.n	8001c46 <_write+0x12>
  }
  return len;
 8001c62:	687b      	ldr	r3, [r7, #4]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_close>:

int _close(int file)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c94:	605a      	str	r2, [r3, #4]
  return 0;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <_isatty>:

int _isatty(int file)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cac:	2301      	movs	r3, #1
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3714      	adds	r7, #20
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b086      	sub	sp, #24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cdc:	4a14      	ldr	r2, [pc, #80]	; (8001d30 <_sbrk+0x5c>)
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <_sbrk+0x60>)
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ce8:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <_sbrk+0x64>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d102      	bne.n	8001cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <_sbrk+0x64>)
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <_sbrk+0x68>)
 8001cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cf6:	4b10      	ldr	r3, [pc, #64]	; (8001d38 <_sbrk+0x64>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4413      	add	r3, r2
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d207      	bcs.n	8001d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d04:	f008 fd02 	bl	800a70c <__errno>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d12:	e009      	b.n	8001d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d14:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	4a05      	ldr	r2, [pc, #20]	; (8001d38 <_sbrk+0x64>)
 8001d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d26:	68fb      	ldr	r3, [r7, #12]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20018000 	.word	0x20018000
 8001d34:	00000400 	.word	0x00000400
 8001d38:	20000228 	.word	0x20000228
 8001d3c:	20001c88 	.word	0x20001c88

08001d40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <SystemInit+0x20>)
 8001d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4a:	4a05      	ldr	r2, [pc, #20]	; (8001d60 <SystemInit+0x20>)
 8001d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed00 	.word	0xe000ed00

08001d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d68:	f7ff ffea 	bl	8001d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d6c:	480c      	ldr	r0, [pc, #48]	; (8001da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d6e:	490d      	ldr	r1, [pc, #52]	; (8001da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <LoopForever+0xe>)
  movs r3, #0
 8001d72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d74:	e002      	b.n	8001d7c <LoopCopyDataInit>

08001d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d7a:	3304      	adds	r3, #4

08001d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d80:	d3f9      	bcc.n	8001d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d84:	4c0a      	ldr	r4, [pc, #40]	; (8001db0 <LoopForever+0x16>)
  movs r3, #0
 8001d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d88:	e001      	b.n	8001d8e <LoopFillZerobss>

08001d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d8c:	3204      	adds	r2, #4

08001d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d90:	d3fb      	bcc.n	8001d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d92:	f008 fcc1 	bl	800a718 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d96:	f7ff fa6f 	bl	8001278 <main>

08001d9a <LoopForever>:

LoopForever:
    b LoopForever
 8001d9a:	e7fe      	b.n	8001d9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001da8:	0800ba60 	.word	0x0800ba60
  ldr r2, =_sbss
 8001dac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001db0:	20001c84 	.word	0x20001c84

08001db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001db4:	e7fe      	b.n	8001db4 <ADC1_2_IRQHandler>
	...

08001db8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_Init+0x3c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	; (8001df4 <HAL_Init+0x3c>)
 8001dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dcc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dce:	2003      	movs	r0, #3
 8001dd0:	f001 fb42 	bl	8003458 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dd4:	200f      	movs	r0, #15
 8001dd6:	f000 f80f 	bl	8001df8 <HAL_InitTick>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	71fb      	strb	r3, [r7, #7]
 8001de4:	e001      	b.n	8001dea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001de6:	f7ff fd1d 	bl	8001824 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dea:	79fb      	ldrb	r3, [r7, #7]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40022000 	.word	0x40022000

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e00:	2300      	movs	r3, #0
 8001e02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_InitTick+0x6c>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d023      	beq.n	8001e54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e0c:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_InitTick+0x70>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_InitTick+0x6c>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	4619      	mov	r1, r3
 8001e16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	f001 fb3f 	bl	80034a6 <HAL_SYSTICK_Config>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10f      	bne.n	8001e4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2b0f      	cmp	r3, #15
 8001e32:	d809      	bhi.n	8001e48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e34:	2200      	movs	r2, #0
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e3c:	f001 fb17 	bl	800346e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e40:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <HAL_InitTick+0x74>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e007      	b.n	8001e58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	73fb      	strb	r3, [r7, #15]
 8001e4c:	e004      	b.n	8001e58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e001      	b.n	8001e58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000008 	.word	0x20000008
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	20000004 	.word	0x20000004

08001e70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <HAL_IncTick+0x20>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_IncTick+0x24>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	4a04      	ldr	r2, [pc, #16]	; (8001e94 <HAL_IncTick+0x24>)
 8001e82:	6013      	str	r3, [r2, #0]
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	20000008 	.word	0x20000008
 8001e94:	2000022c 	.word	0x2000022c

08001e98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e9c:	4b03      	ldr	r3, [pc, #12]	; (8001eac <HAL_GetTick+0x14>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000022c 	.word	0x2000022c

08001eb0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	609a      	str	r2, [r3, #8]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b087      	sub	sp, #28
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	60f8      	str	r0, [r7, #12]
 8001f20:	60b9      	str	r1, [r7, #8]
 8001f22:	607a      	str	r2, [r7, #4]
 8001f24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	3360      	adds	r3, #96	; 0x60
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	4413      	add	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <LL_ADC_SetOffset+0x44>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	430a      	orrs	r2, r1
 8001f46:	4313      	orrs	r3, r2
 8001f48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f50:	bf00      	nop
 8001f52:	371c      	adds	r7, #28
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr
 8001f5c:	03fff000 	.word	0x03fff000

08001f60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3360      	adds	r3, #96	; 0x60
 8001f6e:	461a      	mov	r2, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	3360      	adds	r3, #96	; 0x60
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	431a      	orrs	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fb6:	bf00      	nop
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b083      	sub	sp, #12
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b087      	sub	sp, #28
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	3330      	adds	r3, #48	; 0x30
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	f003 030c 	and.w	r3, r3, #12
 8002004:	4413      	add	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	f003 031f 	and.w	r3, r3, #31
 8002012:	211f      	movs	r1, #31
 8002014:	fa01 f303 	lsl.w	r3, r1, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	401a      	ands	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	0e9b      	lsrs	r3, r3, #26
 8002020:	f003 011f 	and.w	r1, r3, #31
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 031f 	and.w	r3, r3, #31
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	431a      	orrs	r2, r3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002034:	bf00      	nop
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	3314      	adds	r3, #20
 8002050:	461a      	mov	r2, r3
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	0e5b      	lsrs	r3, r3, #25
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	4413      	add	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	0d1b      	lsrs	r3, r3, #20
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	2107      	movs	r1, #7
 800206e:	fa01 f303 	lsl.w	r3, r1, r3
 8002072:	43db      	mvns	r3, r3
 8002074:	401a      	ands	r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	0d1b      	lsrs	r3, r3, #20
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	431a      	orrs	r2, r3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800208a:	bf00      	nop
 800208c:	371c      	adds	r7, #28
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
	...

08002098 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b0:	43db      	mvns	r3, r3
 80020b2:	401a      	ands	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f003 0318 	and.w	r3, r3, #24
 80020ba:	4908      	ldr	r1, [pc, #32]	; (80020dc <LL_ADC_SetChannelSingleDiff+0x44>)
 80020bc:	40d9      	lsrs	r1, r3
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	400b      	ands	r3, r1
 80020c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c6:	431a      	orrs	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020ce:	bf00      	nop
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	0007ffff 	.word	0x0007ffff

080020e0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 031f 	and.w	r3, r3, #31
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002128:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6093      	str	r3, [r2, #8]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800214c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002150:	d101      	bne.n	8002156 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002174:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002178:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021a0:	d101      	bne.n	80021a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <LL_ADC_IsEnabled+0x18>
 80021f0:	2301      	movs	r3, #1
 80021f2:	e000      	b.n	80021f6 <LL_ADC_IsEnabled+0x1a>
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002212:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002216:	f043 0204 	orr.w	r2, r3, #4
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 0304 	and.w	r3, r3, #4
 800223a:	2b04      	cmp	r3, #4
 800223c:	d101      	bne.n	8002242 <LL_ADC_REG_IsConversionOngoing+0x18>
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	2b08      	cmp	r3, #8
 8002262:	d101      	bne.n	8002268 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
	...

08002278 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b089      	sub	sp, #36	; 0x24
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002284:	2300      	movs	r3, #0
 8002286:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e130      	b.n	80024f4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	2b00      	cmp	r3, #0
 800229e:	d109      	bne.n	80022b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff fae7 	bl	8001874 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2200      	movs	r2, #0
 80022aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff3f 	bl	800213c <LL_ADC_IsDeepPowerDownEnabled>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d004      	beq.n	80022ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff ff25 	bl	8002118 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff ff5a 	bl	800218c <LL_ADC_IsInternalRegulatorEnabled>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d115      	bne.n	800230a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff ff3e 	bl	8002164 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022e8:	4b84      	ldr	r3, [pc, #528]	; (80024fc <HAL_ADC_Init+0x284>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	099b      	lsrs	r3, r3, #6
 80022ee:	4a84      	ldr	r2, [pc, #528]	; (8002500 <HAL_ADC_Init+0x288>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	099b      	lsrs	r3, r3, #6
 80022f6:	3301      	adds	r3, #1
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022fc:	e002      	b.n	8002304 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	3b01      	subs	r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f9      	bne.n	80022fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff ff3c 	bl	800218c <LL_ADC_IsInternalRegulatorEnabled>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10d      	bne.n	8002336 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231e:	f043 0210 	orr.w	r2, r3, #16
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232a:	f043 0201 	orr.w	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ff75 	bl	800222a <LL_ADC_REG_IsConversionOngoing>
 8002340:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 80c9 	bne.w	80024e2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f040 80c5 	bne.w	80024e2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002360:	f043 0202 	orr.w	r2, r3, #2
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff35 	bl	80021dc <LL_ADC_IsEnabled>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d115      	bne.n	80023a4 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002378:	4862      	ldr	r0, [pc, #392]	; (8002504 <HAL_ADC_Init+0x28c>)
 800237a:	f7ff ff2f 	bl	80021dc <LL_ADC_IsEnabled>
 800237e:	4604      	mov	r4, r0
 8002380:	4861      	ldr	r0, [pc, #388]	; (8002508 <HAL_ADC_Init+0x290>)
 8002382:	f7ff ff2b 	bl	80021dc <LL_ADC_IsEnabled>
 8002386:	4603      	mov	r3, r0
 8002388:	431c      	orrs	r4, r3
 800238a:	4860      	ldr	r0, [pc, #384]	; (800250c <HAL_ADC_Init+0x294>)
 800238c:	f7ff ff26 	bl	80021dc <LL_ADC_IsEnabled>
 8002390:	4603      	mov	r3, r0
 8002392:	4323      	orrs	r3, r4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d105      	bne.n	80023a4 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	4619      	mov	r1, r3
 800239e:	485c      	ldr	r0, [pc, #368]	; (8002510 <HAL_ADC_Init+0x298>)
 80023a0:	f7ff fd86 	bl	8001eb0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7e5b      	ldrb	r3, [r3, #25]
 80023a8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ae:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80023b4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80023ba:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d106      	bne.n	80023e0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	3b01      	subs	r3, #1
 80023d8:	045b      	lsls	r3, r3, #17
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d009      	beq.n	80023fc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ec:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	4b44      	ldr	r3, [pc, #272]	; (8002514 <HAL_ADC_Init+0x29c>)
 8002404:	4013      	ands	r3, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	69b9      	ldr	r1, [r7, #24]
 800240c:	430b      	orrs	r3, r1
 800240e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff1b 	bl	8002250 <LL_ADC_INJ_IsConversionOngoing>
 800241a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d13d      	bne.n	800249e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d13a      	bne.n	800249e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800242c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002434:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002444:	f023 0302 	bic.w	r3, r3, #2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	69b9      	ldr	r1, [r7, #24]
 800244e:	430b      	orrs	r3, r1
 8002450:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002458:	2b01      	cmp	r3, #1
 800245a:	d118      	bne.n	800248e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002466:	f023 0304 	bic.w	r3, r3, #4
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002472:	4311      	orrs	r1, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002478:	4311      	orrs	r1, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800247e:	430a      	orrs	r2, r1
 8002480:	431a      	orrs	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0201 	orr.w	r2, r2, #1
 800248a:	611a      	str	r2, [r3, #16]
 800248c:	e007      	b.n	800249e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	691a      	ldr	r2, [r3, #16]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f022 0201 	bic.w	r2, r2, #1
 800249c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d10c      	bne.n	80024c0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ac:	f023 010f 	bic.w	r1, r3, #15
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	1e5a      	subs	r2, r3, #1
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30
 80024be:	e007      	b.n	80024d0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f022 020f 	bic.w	r2, r2, #15
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d4:	f023 0303 	bic.w	r3, r3, #3
 80024d8:	f043 0201 	orr.w	r2, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	655a      	str	r2, [r3, #84]	; 0x54
 80024e0:	e007      	b.n	80024f2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e6:	f043 0210 	orr.w	r2, r3, #16
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3724      	adds	r7, #36	; 0x24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd90      	pop	{r4, r7, pc}
 80024fc:	20000000 	.word	0x20000000
 8002500:	053e2d63 	.word	0x053e2d63
 8002504:	50040000 	.word	0x50040000
 8002508:	50040100 	.word	0x50040100
 800250c:	50040200 	.word	0x50040200
 8002510:	50040300 	.word	0x50040300
 8002514:	fff0c007 	.word	0xfff0c007

08002518 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002520:	4857      	ldr	r0, [pc, #348]	; (8002680 <HAL_ADC_Start+0x168>)
 8002522:	f7ff fddd 	bl	80020e0 <LL_ADC_GetMultimode>
 8002526:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fe7c 	bl	800222a <LL_ADC_REG_IsConversionOngoing>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	f040 809c 	bne.w	8002672 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <HAL_ADC_Start+0x30>
 8002544:	2302      	movs	r3, #2
 8002546:	e097      	b.n	8002678 <HAL_ADC_Start+0x160>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 fd73 	bl	800303c <ADC_Enable>
 8002556:	4603      	mov	r3, r0
 8002558:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800255a:	7dfb      	ldrb	r3, [r7, #23]
 800255c:	2b00      	cmp	r3, #0
 800255e:	f040 8083 	bne.w	8002668 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002566:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800256a:	f023 0301 	bic.w	r3, r3, #1
 800256e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a42      	ldr	r2, [pc, #264]	; (8002684 <HAL_ADC_Start+0x16c>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d002      	beq.n	8002586 <HAL_ADC_Start+0x6e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	e000      	b.n	8002588 <HAL_ADC_Start+0x70>
 8002586:	4b40      	ldr	r3, [pc, #256]	; (8002688 <HAL_ADC_Start+0x170>)
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6812      	ldr	r2, [r2, #0]
 800258c:	4293      	cmp	r3, r2
 800258e:	d002      	beq.n	8002596 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d105      	bne.n	80025a2 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ae:	d106      	bne.n	80025be <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b4:	f023 0206 	bic.w	r2, r3, #6
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	659a      	str	r2, [r3, #88]	; 0x58
 80025bc:	e002      	b.n	80025c4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2200      	movs	r2, #0
 80025c2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	221c      	movs	r2, #28
 80025ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a2a      	ldr	r2, [pc, #168]	; (8002684 <HAL_ADC_Start+0x16c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d002      	beq.n	80025e4 <HAL_ADC_Start+0xcc>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	e000      	b.n	80025e6 <HAL_ADC_Start+0xce>
 80025e4:	4b28      	ldr	r3, [pc, #160]	; (8002688 <HAL_ADC_Start+0x170>)
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6812      	ldr	r2, [r2, #0]
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d008      	beq.n	8002600 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	2b05      	cmp	r3, #5
 80025f8:	d002      	beq.n	8002600 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b09      	cmp	r3, #9
 80025fe:	d114      	bne.n	800262a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002612:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002616:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fded 	bl	8002202 <LL_ADC_REG_StartConversion>
 8002628:	e025      	b.n	8002676 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a12      	ldr	r2, [pc, #72]	; (8002684 <HAL_ADC_Start+0x16c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d002      	beq.n	8002646 <HAL_ADC_Start+0x12e>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	e000      	b.n	8002648 <HAL_ADC_Start+0x130>
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_ADC_Start+0x170>)
 8002648:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00f      	beq.n	8002676 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800265e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	655a      	str	r2, [r3, #84]	; 0x54
 8002666:	e006      	b.n	8002676 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002670:	e001      	b.n	8002676 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002672:	2302      	movs	r3, #2
 8002674:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002676:	7dfb      	ldrb	r3, [r7, #23]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	50040300 	.word	0x50040300
 8002684:	50040100 	.word	0x50040100
 8002688:	50040000 	.word	0x50040000

0800268c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002696:	4866      	ldr	r0, [pc, #408]	; (8002830 <HAL_ADC_PollForConversion+0x1a4>)
 8002698:	f7ff fd22 	bl	80020e0 <LL_ADC_GetMultimode>
 800269c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	d102      	bne.n	80026ac <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80026a6:	2308      	movs	r3, #8
 80026a8:	61fb      	str	r3, [r7, #28]
 80026aa:	e02a      	b.n	8002702 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d005      	beq.n	80026be <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	2b05      	cmp	r3, #5
 80026b6:	d002      	beq.n	80026be <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b09      	cmp	r3, #9
 80026bc:	d111      	bne.n	80026e2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d007      	beq.n	80026dc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d0:	f043 0220 	orr.w	r2, r3, #32
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0a4      	b.n	8002826 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026dc:	2304      	movs	r3, #4
 80026de:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80026e0:	e00f      	b.n	8002702 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80026e2:	4853      	ldr	r0, [pc, #332]	; (8002830 <HAL_ADC_PollForConversion+0x1a4>)
 80026e4:	f7ff fd0a 	bl	80020fc <LL_ADC_GetMultiDMATransfer>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d007      	beq.n	80026fe <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f2:	f043 0220 	orr.w	r2, r3, #32
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e093      	b.n	8002826 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80026fe:	2304      	movs	r3, #4
 8002700:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002702:	f7ff fbc9 	bl	8001e98 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002708:	e021      	b.n	800274e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002710:	d01d      	beq.n	800274e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002712:	f7ff fbc1 	bl	8001e98 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	429a      	cmp	r2, r3
 8002720:	d302      	bcc.n	8002728 <HAL_ADC_PollForConversion+0x9c>
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d112      	bne.n	800274e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10b      	bne.n	800274e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273a:	f043 0204 	orr.w	r2, r3, #4
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e06b      	b.n	8002826 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0d6      	beq.n	800270a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002760:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff fc28 	bl	8001fc2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01c      	beq.n	80027b2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7e5b      	ldrb	r3, [r3, #25]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d118      	bne.n	80027b2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b08      	cmp	r3, #8
 800278c:	d111      	bne.n	80027b2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002792:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800279e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	f043 0201 	orr.w	r2, r3, #1
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a1f      	ldr	r2, [pc, #124]	; (8002834 <HAL_ADC_PollForConversion+0x1a8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d002      	beq.n	80027c2 <HAL_ADC_PollForConversion+0x136>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	e000      	b.n	80027c4 <HAL_ADC_PollForConversion+0x138>
 80027c2:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_ADC_PollForConversion+0x1ac>)
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d008      	beq.n	80027de <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2b05      	cmp	r3, #5
 80027d6:	d002      	beq.n	80027de <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	2b09      	cmp	r3, #9
 80027dc:	d104      	bne.n	80027e8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	e00c      	b.n	8002802 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a11      	ldr	r2, [pc, #68]	; (8002834 <HAL_ADC_PollForConversion+0x1a8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d002      	beq.n	80027f8 <HAL_ADC_PollForConversion+0x16c>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	e000      	b.n	80027fa <HAL_ADC_PollForConversion+0x16e>
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_ADC_PollForConversion+0x1ac>)
 80027fa:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	2b08      	cmp	r3, #8
 8002806:	d104      	bne.n	8002812 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2208      	movs	r2, #8
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	e008      	b.n	8002824 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d103      	bne.n	8002824 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	220c      	movs	r2, #12
 8002822:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3720      	adds	r7, #32
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	50040300 	.word	0x50040300
 8002834:	50040100 	.word	0x50040100
 8002838:	50040000 	.word	0x50040000

0800283c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800284a:	4618      	mov	r0, r3
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
	...

08002858 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b0b6      	sub	sp, #216	; 0xd8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_ADC_ConfigChannel+0x22>
 8002876:	2302      	movs	r3, #2
 8002878:	e3c9      	b.n	800300e <HAL_ADC_ConfigChannel+0x7b6>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff fccf 	bl	800222a <LL_ADC_REG_IsConversionOngoing>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 83aa 	bne.w	8002fe8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d824      	bhi.n	80028ee <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	3b02      	subs	r3, #2
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d81b      	bhi.n	80028e6 <HAL_ADC_ConfigChannel+0x8e>
 80028ae:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <HAL_ADC_ConfigChannel+0x5c>)
 80028b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b4:	080028c5 	.word	0x080028c5
 80028b8:	080028cd 	.word	0x080028cd
 80028bc:	080028d5 	.word	0x080028d5
 80028c0:	080028dd 	.word	0x080028dd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80028c4:	230c      	movs	r3, #12
 80028c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80028ca:	e010      	b.n	80028ee <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80028cc:	2312      	movs	r3, #18
 80028ce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80028d2:	e00c      	b.n	80028ee <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80028d4:	2318      	movs	r3, #24
 80028d6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80028da:	e008      	b.n	80028ee <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80028dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80028e4:	e003      	b.n	80028ee <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80028e6:	2306      	movs	r3, #6
 80028e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80028ec:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80028fc:	f7ff fb74 	bl	8001fe8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fc90 	bl	800222a <LL_ADC_REG_IsConversionOngoing>
 800290a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fc9c 	bl	8002250 <LL_ADC_INJ_IsConversionOngoing>
 8002918:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800291c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002920:	2b00      	cmp	r3, #0
 8002922:	f040 81a4 	bne.w	8002c6e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002926:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800292a:	2b00      	cmp	r3, #0
 800292c:	f040 819f 	bne.w	8002c6e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	6819      	ldr	r1, [r3, #0]
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	461a      	mov	r2, r3
 800293e:	f7ff fb7f 	bl	8002040 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	08db      	lsrs	r3, r3, #3
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	2b04      	cmp	r3, #4
 8002962:	d00a      	beq.n	800297a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	6919      	ldr	r1, [r3, #16]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002974:	f7ff fad0 	bl	8001f18 <LL_ADC_SetOffset>
 8002978:	e179      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2100      	movs	r1, #0
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff faed 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002986:	4603      	mov	r3, r0
 8002988:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10a      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x14e>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff fae2 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 800299c:	4603      	mov	r3, r0
 800299e:	0e9b      	lsrs	r3, r3, #26
 80029a0:	f003 021f 	and.w	r2, r3, #31
 80029a4:	e01e      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x18c>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fad7 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 80029b2:	4603      	mov	r3, r0
 80029b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029bc:	fa93 f3a3 	rbit	r3, r3
 80029c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80029c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80029c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80029cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80029d4:	2320      	movs	r3, #32
 80029d6:	e004      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80029d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80029dc:	fab3 f383 	clz	r3, r3
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d105      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x1a4>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	e018      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x1d6>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a08:	fa93 f3a3 	rbit	r3, r3
 8002a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002a10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002a18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002a20:	2320      	movs	r3, #32
 8002a22:	e004      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002a24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a28:	fab3 f383 	clz	r3, r3
 8002a2c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d106      	bne.n	8002a40 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2200      	movs	r2, #0
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff faa6 	bl	8001f8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2101      	movs	r1, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7ff fa8a 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10a      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x214>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f7ff fa7f 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002a62:	4603      	mov	r3, r0
 8002a64:	0e9b      	lsrs	r3, r3, #26
 8002a66:	f003 021f 	and.w	r2, r3, #31
 8002a6a:	e01e      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x252>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2101      	movs	r1, #1
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fa74 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a82:	fa93 f3a3 	rbit	r3, r3
 8002a86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002a8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002a92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002a9a:	2320      	movs	r3, #32
 8002a9c:	e004      	b.n	8002aa8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002aa2:	fab3 f383 	clz	r3, r3
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d105      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x26a>
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	0e9b      	lsrs	r3, r3, #26
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	e018      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x29c>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002ad6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ada:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002ade:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	e004      	b.n	8002af4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002aea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d106      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2200      	movs	r2, #0
 8002afe:	2101      	movs	r1, #1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fa43 	bl	8001f8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2102      	movs	r1, #2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fa27 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10a      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x2da>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	2102      	movs	r1, #2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fa1c 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	0e9b      	lsrs	r3, r3, #26
 8002b2c:	f003 021f 	and.w	r2, r3, #31
 8002b30:	e01e      	b.n	8002b70 <HAL_ADC_ConfigChannel+0x318>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2102      	movs	r1, #2
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fa11 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002b50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002b60:	2320      	movs	r3, #32
 8002b62:	e004      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <HAL_ADC_ConfigChannel+0x330>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	0e9b      	lsrs	r3, r3, #26
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	e014      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x35a>
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b90:	fa93 f3a3 	rbit	r3, r3
 8002b94:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002b96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002b9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002ba4:	2320      	movs	r3, #32
 8002ba6:	e004      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002ba8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bac:	fab3 f383 	clz	r3, r3
 8002bb0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d106      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2102      	movs	r1, #2
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7ff f9e4 	bl	8001f8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2103      	movs	r1, #3
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff f9c8 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10a      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x398>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2103      	movs	r1, #3
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff f9bd 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002be6:	4603      	mov	r3, r0
 8002be8:	0e9b      	lsrs	r3, r3, #26
 8002bea:	f003 021f 	and.w	r2, r3, #31
 8002bee:	e017      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x3c8>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2103      	movs	r1, #3
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f9b2 	bl	8001f60 <LL_ADC_GetOffsetChannel>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c02:	fa93 f3a3 	rbit	r3, r3
 8002c06:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c0a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002c12:	2320      	movs	r3, #32
 8002c14:	e003      	b.n	8002c1e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c18:	fab3 f383 	clz	r3, r3
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <HAL_ADC_ConfigChannel+0x3e0>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	0e9b      	lsrs	r3, r3, #26
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	e011      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x404>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c40:	fa93 f3a3 	rbit	r3, r3
 8002c44:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002c46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c48:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002c4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002c50:	2320      	movs	r3, #32
 8002c52:	e003      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002c54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d106      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2200      	movs	r2, #0
 8002c66:	2103      	movs	r1, #3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff f98f 	bl	8001f8c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fab2 	bl	80021dc <LL_ADC_IsEnabled>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f040 8140 	bne.w	8002f00 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	6819      	ldr	r1, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	f7ff fa03 	bl	8002098 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	4a8f      	ldr	r2, [pc, #572]	; (8002ed4 <HAL_ADC_ConfigChannel+0x67c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	f040 8131 	bne.w	8002f00 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10b      	bne.n	8002cc6 <HAL_ADC_ConfigChannel+0x46e>
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	0e9b      	lsrs	r3, r3, #26
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	2b09      	cmp	r3, #9
 8002cbc:	bf94      	ite	ls
 8002cbe:	2301      	movls	r3, #1
 8002cc0:	2300      	movhi	r3, #0
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	e019      	b.n	8002cfa <HAL_ADC_ConfigChannel+0x4a2>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002cd6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002cd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002cde:	2320      	movs	r3, #32
 8002ce0:	e003      	b.n	8002cea <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ce4:	fab3 f383 	clz	r3, r3
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	3301      	adds	r3, #1
 8002cec:	f003 031f 	and.w	r3, r3, #31
 8002cf0:	2b09      	cmp	r3, #9
 8002cf2:	bf94      	ite	ls
 8002cf4:	2301      	movls	r3, #1
 8002cf6:	2300      	movhi	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d079      	beq.n	8002df2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d107      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x4c2>
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	0e9b      	lsrs	r3, r3, #26
 8002d10:	3301      	adds	r3, #1
 8002d12:	069b      	lsls	r3, r3, #26
 8002d14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d18:	e015      	b.n	8002d46 <HAL_ADC_ConfigChannel+0x4ee>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002d28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d2a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002d32:	2320      	movs	r3, #32
 8002d34:	e003      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	069b      	lsls	r3, r3, #26
 8002d42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d109      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x50e>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	0e9b      	lsrs	r3, r3, #26
 8002d58:	3301      	adds	r3, #1
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	2101      	movs	r1, #1
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	e017      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x53e>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d76:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002d7e:	2320      	movs	r3, #32
 8002d80:	e003      	b.n	8002d8a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d84:	fab3 f383 	clz	r3, r3
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	2101      	movs	r1, #1
 8002d92:	fa01 f303 	lsl.w	r3, r1, r3
 8002d96:	ea42 0103 	orr.w	r1, r2, r3
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10a      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x564>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	0e9b      	lsrs	r3, r3, #26
 8002dac:	3301      	adds	r3, #1
 8002dae:	f003 021f 	and.w	r2, r3, #31
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	051b      	lsls	r3, r3, #20
 8002dba:	e018      	b.n	8002dee <HAL_ADC_ConfigChannel+0x596>
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002dd4:	2320      	movs	r3, #32
 8002dd6:	e003      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	3301      	adds	r3, #1
 8002de2:	f003 021f 	and.w	r2, r3, #31
 8002de6:	4613      	mov	r3, r2
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4413      	add	r3, r2
 8002dec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dee:	430b      	orrs	r3, r1
 8002df0:	e081      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d107      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x5b6>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	0e9b      	lsrs	r3, r3, #26
 8002e04:	3301      	adds	r3, #1
 8002e06:	069b      	lsls	r3, r3, #26
 8002e08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e0c:	e015      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x5e2>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e16:	fa93 f3a3 	rbit	r3, r3
 8002e1a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002e26:	2320      	movs	r3, #32
 8002e28:	e003      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2c:	fab3 f383 	clz	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	3301      	adds	r3, #1
 8002e34:	069b      	lsls	r3, r3, #26
 8002e36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x602>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	0e9b      	lsrs	r3, r3, #26
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	f003 031f 	and.w	r3, r3, #31
 8002e52:	2101      	movs	r1, #1
 8002e54:	fa01 f303 	lsl.w	r3, r1, r3
 8002e58:	e017      	b.n	8002e8a <HAL_ADC_ConfigChannel+0x632>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	61bb      	str	r3, [r7, #24]
  return result;
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d101      	bne.n	8002e76 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002e72:	2320      	movs	r3, #32
 8002e74:	e003      	b.n	8002e7e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	fab3 f383 	clz	r3, r3
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	3301      	adds	r3, #1
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	2101      	movs	r1, #1
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	ea42 0103 	orr.w	r1, r2, r3
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10d      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x65e>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	0e9b      	lsrs	r3, r3, #26
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	f003 021f 	and.w	r2, r3, #31
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	3b1e      	subs	r3, #30
 8002eae:	051b      	lsls	r3, r3, #20
 8002eb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eb4:	e01e      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x69c>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	fa93 f3a3 	rbit	r3, r3
 8002ec2:	60fb      	str	r3, [r7, #12]
  return result;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d104      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002ece:	2320      	movs	r3, #32
 8002ed0:	e006      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x688>
 8002ed2:	bf00      	nop
 8002ed4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f003 021f 	and.w	r2, r3, #31
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	4413      	add	r3, r2
 8002eec:	3b1e      	subs	r3, #30
 8002eee:	051b      	lsls	r3, r3, #20
 8002ef0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ef4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002efa:	4619      	mov	r1, r3
 8002efc:	f7ff f8a0 	bl	8002040 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	4b44      	ldr	r3, [pc, #272]	; (8003018 <HAL_ADC_ConfigChannel+0x7c0>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d07a      	beq.n	8003002 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f0c:	4843      	ldr	r0, [pc, #268]	; (800301c <HAL_ADC_ConfigChannel+0x7c4>)
 8002f0e:	f7fe fff5 	bl	8001efc <LL_ADC_GetCommonPathInternalCh>
 8002f12:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a41      	ldr	r2, [pc, #260]	; (8003020 <HAL_ADC_ConfigChannel+0x7c8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d12c      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d126      	bne.n	8002f7a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a3c      	ldr	r2, [pc, #240]	; (8003024 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d004      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0x6e8>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a3b      	ldr	r2, [pc, #236]	; (8003028 <HAL_ADC_ConfigChannel+0x7d0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d15d      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4834      	ldr	r0, [pc, #208]	; (800301c <HAL_ADC_ConfigChannel+0x7c4>)
 8002f4c:	f7fe ffc3 	bl	8001ed6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f50:	4b36      	ldr	r3, [pc, #216]	; (800302c <HAL_ADC_ConfigChannel+0x7d4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	099b      	lsrs	r3, r3, #6
 8002f56:	4a36      	ldr	r2, [pc, #216]	; (8003030 <HAL_ADC_ConfigChannel+0x7d8>)
 8002f58:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5c:	099b      	lsrs	r3, r3, #6
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	4613      	mov	r3, r2
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f6a:	e002      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f9      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f78:	e040      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a2d      	ldr	r2, [pc, #180]	; (8003034 <HAL_ADC_ConfigChannel+0x7dc>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d118      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002f84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d112      	bne.n	8002fb6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a23      	ldr	r2, [pc, #140]	; (8003024 <HAL_ADC_ConfigChannel+0x7cc>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <HAL_ADC_ConfigChannel+0x74c>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a22      	ldr	r2, [pc, #136]	; (8003028 <HAL_ADC_ConfigChannel+0x7d0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d12d      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fa4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fa8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fac:	4619      	mov	r1, r3
 8002fae:	481b      	ldr	r0, [pc, #108]	; (800301c <HAL_ADC_ConfigChannel+0x7c4>)
 8002fb0:	f7fe ff91 	bl	8001ed6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fb4:	e024      	b.n	8003000 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a1f      	ldr	r2, [pc, #124]	; (8003038 <HAL_ADC_ConfigChannel+0x7e0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d120      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fc0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d11a      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a14      	ldr	r2, [pc, #80]	; (8003024 <HAL_ADC_ConfigChannel+0x7cc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d115      	bne.n	8003002 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fd6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fde:	4619      	mov	r1, r3
 8002fe0:	480e      	ldr	r0, [pc, #56]	; (800301c <HAL_ADC_ConfigChannel+0x7c4>)
 8002fe2:	f7fe ff78 	bl	8001ed6 <LL_ADC_SetCommonPathInternalCh>
 8002fe6:	e00c      	b.n	8003002 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002ffa:	e002      	b.n	8003002 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ffc:	bf00      	nop
 8002ffe:	e000      	b.n	8003002 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003000:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800300a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800300e:	4618      	mov	r0, r3
 8003010:	37d8      	adds	r7, #216	; 0xd8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	80080000 	.word	0x80080000
 800301c:	50040300 	.word	0x50040300
 8003020:	c7520000 	.word	0xc7520000
 8003024:	50040000 	.word	0x50040000
 8003028:	50040200 	.word	0x50040200
 800302c:	20000000 	.word	0x20000000
 8003030:	053e2d63 	.word	0x053e2d63
 8003034:	cb840000 	.word	0xcb840000
 8003038:	80000001 	.word	0x80000001

0800303c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003044:	2300      	movs	r3, #0
 8003046:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff f8c5 	bl	80021dc <LL_ADC_IsEnabled>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d169      	bne.n	800312c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	4b36      	ldr	r3, [pc, #216]	; (8003138 <ADC_Enable+0xfc>)
 8003060:	4013      	ands	r3, r2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00d      	beq.n	8003082 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306a:	f043 0210 	orr.w	r2, r3, #16
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	f043 0201 	orr.w	r2, r3, #1
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e055      	b.n	800312e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff f894 	bl	80021b4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800308c:	482b      	ldr	r0, [pc, #172]	; (800313c <ADC_Enable+0x100>)
 800308e:	f7fe ff35 	bl	8001efc <LL_ADC_GetCommonPathInternalCh>
 8003092:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003098:	2b00      	cmp	r3, #0
 800309a:	d013      	beq.n	80030c4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800309c:	4b28      	ldr	r3, [pc, #160]	; (8003140 <ADC_Enable+0x104>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	099b      	lsrs	r3, r3, #6
 80030a2:	4a28      	ldr	r2, [pc, #160]	; (8003144 <ADC_Enable+0x108>)
 80030a4:	fba2 2303 	umull	r2, r3, r2, r3
 80030a8:	099b      	lsrs	r3, r3, #6
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030b6:	e002      	b.n	80030be <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f9      	bne.n	80030b8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030c4:	f7fe fee8 	bl	8001e98 <HAL_GetTick>
 80030c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030ca:	e028      	b.n	800311e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff f883 	bl	80021dc <LL_ADC_IsEnabled>
 80030d6:	4603      	mov	r3, r0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d104      	bne.n	80030e6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff f867 	bl	80021b4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80030e6:	f7fe fed7 	bl	8001e98 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d914      	bls.n	800311e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d00d      	beq.n	800311e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003106:	f043 0210 	orr.w	r2, r3, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003112:	f043 0201 	orr.w	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e007      	b.n	800312e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b01      	cmp	r3, #1
 800312a:	d1cf      	bne.n	80030cc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	8000003f 	.word	0x8000003f
 800313c:	50040300 	.word	0x50040300
 8003140:	20000000 	.word	0x20000000
 8003144:	053e2d63 	.word	0x053e2d63

08003148 <LL_ADC_IsEnabled>:
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <LL_ADC_IsEnabled+0x18>
 800315c:	2301      	movs	r3, #1
 800315e:	e000      	b.n	8003162 <LL_ADC_IsEnabled+0x1a>
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <LL_ADC_REG_IsConversionOngoing>:
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b04      	cmp	r3, #4
 8003180:	d101      	bne.n	8003186 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	370c      	adds	r7, #12
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003194:	b590      	push	{r4, r7, lr}
 8003196:	b09f      	sub	sp, #124	; 0x7c
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800319e:	2300      	movs	r3, #0
 80031a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d101      	bne.n	80031b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80031ae:	2302      	movs	r3, #2
 80031b0:	e093      	b.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80031ba:	2300      	movs	r3, #0
 80031bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80031be:	2300      	movs	r3, #0
 80031c0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a47      	ldr	r2, [pc, #284]	; (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d102      	bne.n	80031d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80031cc:	4b46      	ldr	r3, [pc, #280]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80031ce:	60bb      	str	r3, [r7, #8]
 80031d0:	e001      	b.n	80031d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e0:	f043 0220 	orr.w	r2, r3, #32
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e072      	b.n	80032da <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff ffb9 	bl	800316e <LL_ADC_REG_IsConversionOngoing>
 80031fc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f7ff ffb3 	bl	800316e <LL_ADC_REG_IsConversionOngoing>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d154      	bne.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800320e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003210:	2b00      	cmp	r3, #0
 8003212:	d151      	bne.n	80032b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003214:	4b35      	ldr	r3, [pc, #212]	; (80032ec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003216:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d02c      	beq.n	800327a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	6859      	ldr	r1, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003232:	035b      	lsls	r3, r3, #13
 8003234:	430b      	orrs	r3, r1
 8003236:	431a      	orrs	r2, r3
 8003238:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800323a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800323c:	4829      	ldr	r0, [pc, #164]	; (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800323e:	f7ff ff83 	bl	8003148 <LL_ADC_IsEnabled>
 8003242:	4604      	mov	r4, r0
 8003244:	4828      	ldr	r0, [pc, #160]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003246:	f7ff ff7f 	bl	8003148 <LL_ADC_IsEnabled>
 800324a:	4603      	mov	r3, r0
 800324c:	431c      	orrs	r4, r3
 800324e:	4828      	ldr	r0, [pc, #160]	; (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003250:	f7ff ff7a 	bl	8003148 <LL_ADC_IsEnabled>
 8003254:	4603      	mov	r3, r0
 8003256:	4323      	orrs	r3, r4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d137      	bne.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800325c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003264:	f023 030f 	bic.w	r3, r3, #15
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	6811      	ldr	r1, [r2, #0]
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	6892      	ldr	r2, [r2, #8]
 8003270:	430a      	orrs	r2, r1
 8003272:	431a      	orrs	r2, r3
 8003274:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003276:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003278:	e028      	b.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800327a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003284:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003286:	4817      	ldr	r0, [pc, #92]	; (80032e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003288:	f7ff ff5e 	bl	8003148 <LL_ADC_IsEnabled>
 800328c:	4604      	mov	r4, r0
 800328e:	4816      	ldr	r0, [pc, #88]	; (80032e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003290:	f7ff ff5a 	bl	8003148 <LL_ADC_IsEnabled>
 8003294:	4603      	mov	r3, r0
 8003296:	431c      	orrs	r4, r3
 8003298:	4815      	ldr	r0, [pc, #84]	; (80032f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800329a:	f7ff ff55 	bl	8003148 <LL_ADC_IsEnabled>
 800329e:	4603      	mov	r3, r0
 80032a0:	4323      	orrs	r3, r4
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d112      	bne.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80032a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80032ae:	f023 030f 	bic.w	r3, r3, #15
 80032b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032b4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032b6:	e009      	b.n	80032cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032bc:	f043 0220 	orr.w	r2, r3, #32
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80032ca:	e000      	b.n	80032ce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80032cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80032d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80032da:	4618      	mov	r0, r3
 80032dc:	377c      	adds	r7, #124	; 0x7c
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd90      	pop	{r4, r7, pc}
 80032e2:	bf00      	nop
 80032e4:	50040000 	.word	0x50040000
 80032e8:	50040100 	.word	0x50040100
 80032ec:	50040300 	.word	0x50040300
 80032f0:	50040200 	.word	0x50040200

080032f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003310:	4013      	ands	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800331c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003326:	4a04      	ldr	r2, [pc, #16]	; (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	60d3      	str	r3, [r2, #12]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <__NVIC_GetPriorityGrouping+0x18>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	f003 0307 	and.w	r3, r3, #7
}
 800334a:	4618      	mov	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003368:	2b00      	cmp	r3, #0
 800336a:	db0a      	blt.n	8003382 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	b2da      	uxtb	r2, r3
 8003370:	490c      	ldr	r1, [pc, #48]	; (80033a4 <__NVIC_SetPriority+0x4c>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	0112      	lsls	r2, r2, #4
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	440b      	add	r3, r1
 800337c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003380:	e00a      	b.n	8003398 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	4908      	ldr	r1, [pc, #32]	; (80033a8 <__NVIC_SetPriority+0x50>)
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	3b04      	subs	r3, #4
 8003390:	0112      	lsls	r2, r2, #4
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	440b      	add	r3, r1
 8003396:	761a      	strb	r2, [r3, #24]
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000e100 	.word	0xe000e100
 80033a8:	e000ed00 	.word	0xe000ed00

080033ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b089      	sub	sp, #36	; 0x24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f1c3 0307 	rsb	r3, r3, #7
 80033c6:	2b04      	cmp	r3, #4
 80033c8:	bf28      	it	cs
 80033ca:	2304      	movcs	r3, #4
 80033cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	3304      	adds	r3, #4
 80033d2:	2b06      	cmp	r3, #6
 80033d4:	d902      	bls.n	80033dc <NVIC_EncodePriority+0x30>
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	3b03      	subs	r3, #3
 80033da:	e000      	b.n	80033de <NVIC_EncodePriority+0x32>
 80033dc:	2300      	movs	r3, #0
 80033de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43da      	mvns	r2, r3
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	401a      	ands	r2, r3
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	fa01 f303 	lsl.w	r3, r1, r3
 80033fe:	43d9      	mvns	r1, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003404:	4313      	orrs	r3, r2
         );
}
 8003406:	4618      	mov	r0, r3
 8003408:	3724      	adds	r7, #36	; 0x24
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr
	...

08003414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3b01      	subs	r3, #1
 8003420:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003424:	d301      	bcc.n	800342a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003426:	2301      	movs	r3, #1
 8003428:	e00f      	b.n	800344a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800342a:	4a0a      	ldr	r2, [pc, #40]	; (8003454 <SysTick_Config+0x40>)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	3b01      	subs	r3, #1
 8003430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003432:	210f      	movs	r1, #15
 8003434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003438:	f7ff ff8e 	bl	8003358 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800343c:	4b05      	ldr	r3, [pc, #20]	; (8003454 <SysTick_Config+0x40>)
 800343e:	2200      	movs	r2, #0
 8003440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003442:	4b04      	ldr	r3, [pc, #16]	; (8003454 <SysTick_Config+0x40>)
 8003444:	2207      	movs	r2, #7
 8003446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	e000e010 	.word	0xe000e010

08003458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f7ff ff47 	bl	80032f4 <__NVIC_SetPriorityGrouping>
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	4603      	mov	r3, r0
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800347c:	2300      	movs	r3, #0
 800347e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003480:	f7ff ff5c 	bl	800333c <__NVIC_GetPriorityGrouping>
 8003484:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	6978      	ldr	r0, [r7, #20]
 800348c:	f7ff ff8e 	bl	80033ac <NVIC_EncodePriority>
 8003490:	4602      	mov	r2, r0
 8003492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003496:	4611      	mov	r1, r2
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff ff5d 	bl	8003358 <__NVIC_SetPriority>
}
 800349e:	bf00      	nop
 80034a0:	3718      	adds	r7, #24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}

080034a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034a6:	b580      	push	{r7, lr}
 80034a8:	b082      	sub	sp, #8
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ffb0 	bl	8003414 <SysTick_Config>
 80034b4:	4603      	mov	r3, r0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ce:	e17f      	b.n	80037d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	2101      	movs	r1, #1
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	fa01 f303 	lsl.w	r3, r1, r3
 80034dc:	4013      	ands	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8171 	beq.w	80037ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d005      	beq.n	8003500 <HAL_GPIO_Init+0x40>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d130      	bne.n	8003562 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	2203      	movs	r2, #3
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4013      	ands	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003536:	2201      	movs	r2, #1
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4013      	ands	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	f003 0201 	and.w	r2, r3, #1
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b03      	cmp	r3, #3
 800356c:	d118      	bne.n	80035a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003572:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003574:	2201      	movs	r2, #1
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4013      	ands	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	08db      	lsrs	r3, r3, #3
 800358a:	f003 0201 	and.w	r2, r3, #1
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d017      	beq.n	80035dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	2203      	movs	r2, #3
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d123      	bne.n	8003630 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	08da      	lsrs	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3208      	adds	r2, #8
 80035f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	220f      	movs	r2, #15
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4013      	ands	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	08da      	lsrs	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3208      	adds	r2, #8
 800362a:	6939      	ldr	r1, [r7, #16]
 800362c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2203      	movs	r2, #3
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0203 	and.w	r2, r3, #3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80ac 	beq.w	80037ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003672:	4b5f      	ldr	r3, [pc, #380]	; (80037f0 <HAL_GPIO_Init+0x330>)
 8003674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003676:	4a5e      	ldr	r2, [pc, #376]	; (80037f0 <HAL_GPIO_Init+0x330>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6613      	str	r3, [r2, #96]	; 0x60
 800367e:	4b5c      	ldr	r3, [pc, #368]	; (80037f0 <HAL_GPIO_Init+0x330>)
 8003680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800368a:	4a5a      	ldr	r2, [pc, #360]	; (80037f4 <HAL_GPIO_Init+0x334>)
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	089b      	lsrs	r3, r3, #2
 8003690:	3302      	adds	r3, #2
 8003692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003696:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	220f      	movs	r2, #15
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036b4:	d025      	beq.n	8003702 <HAL_GPIO_Init+0x242>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a4f      	ldr	r2, [pc, #316]	; (80037f8 <HAL_GPIO_Init+0x338>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01f      	beq.n	80036fe <HAL_GPIO_Init+0x23e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a4e      	ldr	r2, [pc, #312]	; (80037fc <HAL_GPIO_Init+0x33c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d019      	beq.n	80036fa <HAL_GPIO_Init+0x23a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4d      	ldr	r2, [pc, #308]	; (8003800 <HAL_GPIO_Init+0x340>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_GPIO_Init+0x236>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4c      	ldr	r2, [pc, #304]	; (8003804 <HAL_GPIO_Init+0x344>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00d      	beq.n	80036f2 <HAL_GPIO_Init+0x232>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4b      	ldr	r2, [pc, #300]	; (8003808 <HAL_GPIO_Init+0x348>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d007      	beq.n	80036ee <HAL_GPIO_Init+0x22e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4a      	ldr	r2, [pc, #296]	; (800380c <HAL_GPIO_Init+0x34c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <HAL_GPIO_Init+0x22a>
 80036e6:	2306      	movs	r3, #6
 80036e8:	e00c      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036ea:	2307      	movs	r3, #7
 80036ec:	e00a      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036ee:	2305      	movs	r3, #5
 80036f0:	e008      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036f2:	2304      	movs	r3, #4
 80036f4:	e006      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036f6:	2303      	movs	r3, #3
 80036f8:	e004      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e002      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_GPIO_Init+0x244>
 8003702:	2300      	movs	r3, #0
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	f002 0203 	and.w	r2, r2, #3
 800370a:	0092      	lsls	r2, r2, #2
 800370c:	4093      	lsls	r3, r2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003714:	4937      	ldr	r1, [pc, #220]	; (80037f4 <HAL_GPIO_Init+0x334>)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	3302      	adds	r3, #2
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003722:	4b3b      	ldr	r3, [pc, #236]	; (8003810 <HAL_GPIO_Init+0x350>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	43db      	mvns	r3, r3
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003746:	4a32      	ldr	r2, [pc, #200]	; (8003810 <HAL_GPIO_Init+0x350>)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800374c:	4b30      	ldr	r3, [pc, #192]	; (8003810 <HAL_GPIO_Init+0x350>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	43db      	mvns	r3, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003770:	4a27      	ldr	r2, [pc, #156]	; (8003810 <HAL_GPIO_Init+0x350>)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003776:	4b26      	ldr	r3, [pc, #152]	; (8003810 <HAL_GPIO_Init+0x350>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	43db      	mvns	r3, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800379a:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <HAL_GPIO_Init+0x350>)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037a0:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_GPIO_Init+0x350>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4013      	ands	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037c4:	4a12      	ldr	r2, [pc, #72]	; (8003810 <HAL_GPIO_Init+0x350>)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	3301      	adds	r3, #1
 80037ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fa22 f303 	lsr.w	r3, r2, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f47f ae78 	bne.w	80034d0 <HAL_GPIO_Init+0x10>
  }
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40010000 	.word	0x40010000
 80037f8:	48000400 	.word	0x48000400
 80037fc:	48000800 	.word	0x48000800
 8003800:	48000c00 	.word	0x48000c00
 8003804:	48001000 	.word	0x48001000
 8003808:	48001400 	.word	0x48001400
 800380c:	48001800 	.word	0x48001800
 8003810:	40010400 	.word	0x40010400

08003814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	887b      	ldrh	r3, [r7, #2]
 8003826:	4013      	ands	r3, r2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
 8003830:	e001      	b.n	8003836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003832:	2300      	movs	r3, #0
 8003834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003836:	7bfb      	ldrb	r3, [r7, #15]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	807b      	strh	r3, [r7, #2]
 8003850:	4613      	mov	r3, r2
 8003852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003854:	787b      	ldrb	r3, [r7, #1]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800385a:	887a      	ldrh	r2, [r7, #2]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003860:	e002      	b.n	8003868 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003862:	887a      	ldrh	r2, [r7, #2]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003878:	4b04      	ldr	r3, [pc, #16]	; (800388c <HAL_PWREx_GetVoltageRange+0x18>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003880:	4618      	mov	r0, r3
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40007000 	.word	0x40007000

08003890 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800389e:	d130      	bne.n	8003902 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038a0:	4b23      	ldr	r3, [pc, #140]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ac:	d038      	beq.n	8003920 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038b6:	4a1e      	ldr	r2, [pc, #120]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038be:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2232      	movs	r2, #50	; 0x32
 80038c4:	fb02 f303 	mul.w	r3, r2, r3
 80038c8:	4a1b      	ldr	r2, [pc, #108]	; (8003938 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	0c9b      	lsrs	r3, r3, #18
 80038d0:	3301      	adds	r3, #1
 80038d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038d4:	e002      	b.n	80038dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	3b01      	subs	r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038dc:	4b14      	ldr	r3, [pc, #80]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e8:	d102      	bne.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1f2      	bne.n	80038d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038f0:	4b0f      	ldr	r3, [pc, #60]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038f2:	695b      	ldr	r3, [r3, #20]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038fc:	d110      	bne.n	8003920 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e00f      	b.n	8003922 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003902:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800390a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800390e:	d007      	beq.n	8003920 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003910:	4b07      	ldr	r3, [pc, #28]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003918:	4a05      	ldr	r2, [pc, #20]	; (8003930 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800391e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3714      	adds	r7, #20
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	40007000 	.word	0x40007000
 8003934:	20000000 	.word	0x20000000
 8003938:	431bde83 	.word	0x431bde83

0800393c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b088      	sub	sp, #32
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e3ca      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800394e:	4b97      	ldr	r3, [pc, #604]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003958:	4b94      	ldr	r3, [pc, #592]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0310 	and.w	r3, r3, #16
 800396a:	2b00      	cmp	r3, #0
 800396c:	f000 80e4 	beq.w	8003b38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d007      	beq.n	8003986 <HAL_RCC_OscConfig+0x4a>
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	2b0c      	cmp	r3, #12
 800397a:	f040 808b 	bne.w	8003a94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b01      	cmp	r3, #1
 8003982:	f040 8087 	bne.w	8003a94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003986:	4b89      	ldr	r3, [pc, #548]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d005      	beq.n	800399e <HAL_RCC_OscConfig+0x62>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e3a2      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1a      	ldr	r2, [r3, #32]
 80039a2:	4b82      	ldr	r3, [pc, #520]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d004      	beq.n	80039b8 <HAL_RCC_OscConfig+0x7c>
 80039ae:	4b7f      	ldr	r3, [pc, #508]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039b6:	e005      	b.n	80039c4 <HAL_RCC_OscConfig+0x88>
 80039b8:	4b7c      	ldr	r3, [pc, #496]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039be:	091b      	lsrs	r3, r3, #4
 80039c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d223      	bcs.n	8003a10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fd55 	bl	800447c <RCC_SetFlashLatencyFromMSIRange>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e383      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80039dc:	4b73      	ldr	r3, [pc, #460]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a72      	ldr	r2, [pc, #456]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039e2:	f043 0308 	orr.w	r3, r3, #8
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	4b70      	ldr	r3, [pc, #448]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	496d      	ldr	r1, [pc, #436]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80039fa:	4b6c      	ldr	r3, [pc, #432]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	4968      	ldr	r1, [pc, #416]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	604b      	str	r3, [r1, #4]
 8003a0e:	e025      	b.n	8003a5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a10:	4b66      	ldr	r3, [pc, #408]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a65      	ldr	r2, [pc, #404]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a16:	f043 0308 	orr.w	r3, r3, #8
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	4b63      	ldr	r3, [pc, #396]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a1b      	ldr	r3, [r3, #32]
 8003a28:	4960      	ldr	r1, [pc, #384]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a2e:	4b5f      	ldr	r3, [pc, #380]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	021b      	lsls	r3, r3, #8
 8003a3c:	495b      	ldr	r1, [pc, #364]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d109      	bne.n	8003a5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a1b      	ldr	r3, [r3, #32]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f000 fd15 	bl	800447c <RCC_SetFlashLatencyFromMSIRange>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e343      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a5c:	f000 fc4a 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 8003a60:	4602      	mov	r2, r0
 8003a62:	4b52      	ldr	r3, [pc, #328]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	091b      	lsrs	r3, r3, #4
 8003a68:	f003 030f 	and.w	r3, r3, #15
 8003a6c:	4950      	ldr	r1, [pc, #320]	; (8003bb0 <HAL_RCC_OscConfig+0x274>)
 8003a6e:	5ccb      	ldrb	r3, [r1, r3]
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	fa22 f303 	lsr.w	r3, r2, r3
 8003a78:	4a4e      	ldr	r2, [pc, #312]	; (8003bb4 <HAL_RCC_OscConfig+0x278>)
 8003a7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003a7c:	4b4e      	ldr	r3, [pc, #312]	; (8003bb8 <HAL_RCC_OscConfig+0x27c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7fe f9b9 	bl	8001df8 <HAL_InitTick>
 8003a86:	4603      	mov	r3, r0
 8003a88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d052      	beq.n	8003b36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
 8003a92:	e327      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d032      	beq.n	8003b02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003a9c:	4b43      	ldr	r3, [pc, #268]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a42      	ldr	r2, [pc, #264]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aa8:	f7fe f9f6 	bl	8001e98 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ab0:	f7fe f9f2 	bl	8001e98 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e310      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ac2:	4b3a      	ldr	r3, [pc, #232]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ace:	4b37      	ldr	r3, [pc, #220]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a36      	ldr	r2, [pc, #216]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003ad4:	f043 0308 	orr.w	r3, r3, #8
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	4b34      	ldr	r3, [pc, #208]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	4931      	ldr	r1, [pc, #196]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aec:	4b2f      	ldr	r3, [pc, #188]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	021b      	lsls	r3, r3, #8
 8003afa:	492c      	ldr	r1, [pc, #176]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003afc:	4313      	orrs	r3, r2
 8003afe:	604b      	str	r3, [r1, #4]
 8003b00:	e01a      	b.n	8003b38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b02:	4b2a      	ldr	r3, [pc, #168]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a29      	ldr	r2, [pc, #164]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b08:	f023 0301 	bic.w	r3, r3, #1
 8003b0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b0e:	f7fe f9c3 	bl	8001e98 <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b16:	f7fe f9bf 	bl	8001e98 <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e2dd      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b28:	4b20      	ldr	r3, [pc, #128]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1f0      	bne.n	8003b16 <HAL_RCC_OscConfig+0x1da>
 8003b34:	e000      	b.n	8003b38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d074      	beq.n	8003c2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d005      	beq.n	8003b56 <HAL_RCC_OscConfig+0x21a>
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b0c      	cmp	r3, #12
 8003b4e:	d10e      	bne.n	8003b6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d10b      	bne.n	8003b6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b56:	4b15      	ldr	r3, [pc, #84]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d064      	beq.n	8003c2c <HAL_RCC_OscConfig+0x2f0>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d160      	bne.n	8003c2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e2ba      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b76:	d106      	bne.n	8003b86 <HAL_RCC_OscConfig+0x24a>
 8003b78:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a0b      	ldr	r2, [pc, #44]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	e026      	b.n	8003bd4 <HAL_RCC_OscConfig+0x298>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b8e:	d115      	bne.n	8003bbc <HAL_RCC_OscConfig+0x280>
 8003b90:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a05      	ldr	r2, [pc, #20]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	4b03      	ldr	r3, [pc, #12]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a02      	ldr	r2, [pc, #8]	; (8003bac <HAL_RCC_OscConfig+0x270>)
 8003ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	e014      	b.n	8003bd4 <HAL_RCC_OscConfig+0x298>
 8003baa:	bf00      	nop
 8003bac:	40021000 	.word	0x40021000
 8003bb0:	0800b824 	.word	0x0800b824
 8003bb4:	20000000 	.word	0x20000000
 8003bb8:	20000004 	.word	0x20000004
 8003bbc:	4ba0      	ldr	r3, [pc, #640]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a9f      	ldr	r2, [pc, #636]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	4b9d      	ldr	r3, [pc, #628]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a9c      	ldr	r2, [pc, #624]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d013      	beq.n	8003c04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7fe f95c 	bl	8001e98 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fe f958 	bl	8001e98 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	; 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e276      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bf6:	4b92      	ldr	r3, [pc, #584]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0x2a8>
 8003c02:	e014      	b.n	8003c2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c04:	f7fe f948 	bl	8001e98 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c0c:	f7fe f944 	bl	8001e98 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b64      	cmp	r3, #100	; 0x64
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e262      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c1e:	4b88      	ldr	r3, [pc, #544]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x2d0>
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d060      	beq.n	8003cfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_OscConfig+0x310>
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b0c      	cmp	r3, #12
 8003c44:	d119      	bne.n	8003c7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d116      	bne.n	8003c7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c4c:	4b7c      	ldr	r3, [pc, #496]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_OscConfig+0x328>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e23f      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c64:	4b76      	ldr	r3, [pc, #472]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	061b      	lsls	r3, r3, #24
 8003c72:	4973      	ldr	r1, [pc, #460]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c78:	e040      	b.n	8003cfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d023      	beq.n	8003cca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c82:	4b6f      	ldr	r3, [pc, #444]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a6e      	ldr	r2, [pc, #440]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8e:	f7fe f903 	bl	8001e98 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c96:	f7fe f8ff 	bl	8001e98 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e21d      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ca8:	4b65      	ldr	r3, [pc, #404]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb4:	4b62      	ldr	r3, [pc, #392]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	061b      	lsls	r3, r3, #24
 8003cc2:	495f      	ldr	r1, [pc, #380]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	604b      	str	r3, [r1, #4]
 8003cc8:	e018      	b.n	8003cfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cca:	4b5d      	ldr	r3, [pc, #372]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a5c      	ldr	r2, [pc, #368]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003cd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd6:	f7fe f8df 	bl	8001e98 <HAL_GetTick>
 8003cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cdc:	e008      	b.n	8003cf0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cde:	f7fe f8db 	bl	8001e98 <HAL_GetTick>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d901      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e1f9      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003cf0:	4b53      	ldr	r3, [pc, #332]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1f0      	bne.n	8003cde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d03c      	beq.n	8003d82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01c      	beq.n	8003d4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d10:	4b4b      	ldr	r3, [pc, #300]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003d12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d16:	4a4a      	ldr	r2, [pc, #296]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003d18:	f043 0301 	orr.w	r3, r3, #1
 8003d1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d20:	f7fe f8ba 	bl	8001e98 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d28:	f7fe f8b6 	bl	8001e98 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e1d4      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d3a:	4b41      	ldr	r3, [pc, #260]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003d3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0ef      	beq.n	8003d28 <HAL_RCC_OscConfig+0x3ec>
 8003d48:	e01b      	b.n	8003d82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4a:	4b3d      	ldr	r3, [pc, #244]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d50:	4a3b      	ldr	r2, [pc, #236]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003d52:	f023 0301 	bic.w	r3, r3, #1
 8003d56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d5a:	f7fe f89d 	bl	8001e98 <HAL_GetTick>
 8003d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d60:	e008      	b.n	8003d74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d62:	f7fe f899 	bl	8001e98 <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d901      	bls.n	8003d74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e1b7      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d74:	4b32      	ldr	r3, [pc, #200]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1ef      	bne.n	8003d62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0304 	and.w	r3, r3, #4
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f000 80a6 	beq.w	8003edc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d90:	2300      	movs	r3, #0
 8003d92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003d94:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10d      	bne.n	8003dbc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da0:	4b27      	ldr	r3, [pc, #156]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da4:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003da6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003daa:	6593      	str	r3, [r2, #88]	; 0x58
 8003dac:	4b24      	ldr	r3, [pc, #144]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db8:	2301      	movs	r3, #1
 8003dba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dbc:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <HAL_RCC_OscConfig+0x508>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d118      	bne.n	8003dfa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dc8:	4b1e      	ldr	r3, [pc, #120]	; (8003e44 <HAL_RCC_OscConfig+0x508>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1d      	ldr	r2, [pc, #116]	; (8003e44 <HAL_RCC_OscConfig+0x508>)
 8003dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dd4:	f7fe f860 	bl	8001e98 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ddc:	f7fe f85c 	bl	8001e98 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e17a      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dee:	4b15      	ldr	r3, [pc, #84]	; (8003e44 <HAL_RCC_OscConfig+0x508>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d108      	bne.n	8003e14 <HAL_RCC_OscConfig+0x4d8>
 8003e02:	4b0f      	ldr	r3, [pc, #60]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e08:	4a0d      	ldr	r2, [pc, #52]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e12:	e029      	b.n	8003e68 <HAL_RCC_OscConfig+0x52c>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	2b05      	cmp	r3, #5
 8003e1a:	d115      	bne.n	8003e48 <HAL_RCC_OscConfig+0x50c>
 8003e1c:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e22:	4a07      	ldr	r2, [pc, #28]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003e24:	f043 0304 	orr.w	r3, r3, #4
 8003e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e2c:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e32:	4a03      	ldr	r2, [pc, #12]	; (8003e40 <HAL_RCC_OscConfig+0x504>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e3c:	e014      	b.n	8003e68 <HAL_RCC_OscConfig+0x52c>
 8003e3e:	bf00      	nop
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40007000 	.word	0x40007000
 8003e48:	4b9c      	ldr	r3, [pc, #624]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	4a9b      	ldr	r2, [pc, #620]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8003e50:	f023 0301 	bic.w	r3, r3, #1
 8003e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e58:	4b98      	ldr	r3, [pc, #608]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8003e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5e:	4a97      	ldr	r2, [pc, #604]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8003e60:	f023 0304 	bic.w	r3, r3, #4
 8003e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d016      	beq.n	8003e9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e70:	f7fe f812 	bl	8001e98 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e76:	e00a      	b.n	8003e8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e78:	f7fe f80e 	bl	8001e98 <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e12a      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e8e:	4b8b      	ldr	r3, [pc, #556]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8003e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0ed      	beq.n	8003e78 <HAL_RCC_OscConfig+0x53c>
 8003e9c:	e015      	b.n	8003eca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9e:	f7fd fffb 	bl	8001e98 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea6:	f7fd fff7 	bl	8001e98 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e113      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ebc:	4b7f      	ldr	r3, [pc, #508]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1ed      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eca:	7ffb      	ldrb	r3, [r7, #31]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d105      	bne.n	8003edc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ed0:	4b7a      	ldr	r3, [pc, #488]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8003ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed4:	4a79      	ldr	r2, [pc, #484]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8003ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 80fe 	beq.w	80040e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	f040 80d0 	bne.w	8004090 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ef0:	4b72      	ldr	r3, [pc, #456]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	f003 0203 	and.w	r2, r3, #3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d130      	bne.n	8003f66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d127      	bne.n	8003f66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f20:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d11f      	bne.n	8003f66 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f30:	2a07      	cmp	r2, #7
 8003f32:	bf14      	ite	ne
 8003f34:	2201      	movne	r2, #1
 8003f36:	2200      	moveq	r2, #0
 8003f38:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d113      	bne.n	8003f66 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f48:	085b      	lsrs	r3, r3, #1
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d109      	bne.n	8003f66 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	085b      	lsrs	r3, r3, #1
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d06e      	beq.n	8004044 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b0c      	cmp	r3, #12
 8003f6a:	d069      	beq.n	8004040 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003f6c:	4b53      	ldr	r3, [pc, #332]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d105      	bne.n	8003f84 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003f78:	4b50      	ldr	r3, [pc, #320]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0ad      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003f88:	4b4c      	ldr	r3, [pc, #304]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a4b      	ldr	r2, [pc, #300]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8003f8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f92:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003f94:	f7fd ff80 	bl	8001e98 <HAL_GetTick>
 8003f98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f9a:	e008      	b.n	8003fae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f9c:	f7fd ff7c 	bl	8001e98 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e09a      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003fae:	4b43      	ldr	r3, [pc, #268]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f0      	bne.n	8003f9c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fba:	4b40      	ldr	r3, [pc, #256]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	4b40      	ldr	r3, [pc, #256]	; (80040c0 <HAL_RCC_OscConfig+0x784>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003fca:	3a01      	subs	r2, #1
 8003fcc:	0112      	lsls	r2, r2, #4
 8003fce:	4311      	orrs	r1, r2
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003fd4:	0212      	lsls	r2, r2, #8
 8003fd6:	4311      	orrs	r1, r2
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fdc:	0852      	lsrs	r2, r2, #1
 8003fde:	3a01      	subs	r2, #1
 8003fe0:	0552      	lsls	r2, r2, #21
 8003fe2:	4311      	orrs	r1, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fe8:	0852      	lsrs	r2, r2, #1
 8003fea:	3a01      	subs	r2, #1
 8003fec:	0652      	lsls	r2, r2, #25
 8003fee:	4311      	orrs	r1, r2
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ff4:	0912      	lsrs	r2, r2, #4
 8003ff6:	0452      	lsls	r2, r2, #17
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	4930      	ldr	r1, [pc, #192]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004000:	4b2e      	ldr	r3, [pc, #184]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a2d      	ldr	r2, [pc, #180]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8004006:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800400a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800400c:	4b2b      	ldr	r3, [pc, #172]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a2a      	ldr	r2, [pc, #168]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8004012:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004016:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004018:	f7fd ff3e 	bl	8001e98 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004020:	f7fd ff3a 	bl	8001e98 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e058      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004032:	4b22      	ldr	r3, [pc, #136]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800403e:	e050      	b.n	80040e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e04f      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004044:	4b1d      	ldr	r3, [pc, #116]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d148      	bne.n	80040e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004050:	4b1a      	ldr	r3, [pc, #104]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a19      	ldr	r2, [pc, #100]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8004056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800405a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800405c:	4b17      	ldr	r3, [pc, #92]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	4a16      	ldr	r2, [pc, #88]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8004062:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004066:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004068:	f7fd ff16 	bl	8001e98 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004070:	f7fd ff12 	bl	8001e98 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e030      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004082:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x734>
 800408e:	e028      	b.n	80040e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	2b0c      	cmp	r3, #12
 8004094:	d023      	beq.n	80040de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004096:	4b09      	ldr	r3, [pc, #36]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a08      	ldr	r2, [pc, #32]	; (80040bc <HAL_RCC_OscConfig+0x780>)
 800409c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a2:	f7fd fef9 	bl	8001e98 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a8:	e00c      	b.n	80040c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fd fef5 	bl	8001e98 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d905      	bls.n	80040c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e013      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
 80040bc:	40021000 	.word	0x40021000
 80040c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c4:	4b09      	ldr	r3, [pc, #36]	; (80040ec <HAL_RCC_OscConfig+0x7b0>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1ec      	bne.n	80040aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80040d0:	4b06      	ldr	r3, [pc, #24]	; (80040ec <HAL_RCC_OscConfig+0x7b0>)
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	4905      	ldr	r1, [pc, #20]	; (80040ec <HAL_RCC_OscConfig+0x7b0>)
 80040d6:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <HAL_RCC_OscConfig+0x7b4>)
 80040d8:	4013      	ands	r3, r2
 80040da:	60cb      	str	r3, [r1, #12]
 80040dc:	e001      	b.n	80040e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3720      	adds	r7, #32
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40021000 	.word	0x40021000
 80040f0:	feeefffc 	.word	0xfeeefffc

080040f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e0e7      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004108:	4b75      	ldr	r3, [pc, #468]	; (80042e0 <HAL_RCC_ClockConfig+0x1ec>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	429a      	cmp	r2, r3
 8004114:	d910      	bls.n	8004138 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004116:	4b72      	ldr	r3, [pc, #456]	; (80042e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f023 0207 	bic.w	r2, r3, #7
 800411e:	4970      	ldr	r1, [pc, #448]	; (80042e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004126:	4b6e      	ldr	r3, [pc, #440]	; (80042e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0307 	and.w	r3, r3, #7
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	429a      	cmp	r2, r3
 8004132:	d001      	beq.n	8004138 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0cf      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d010      	beq.n	8004166 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	4b66      	ldr	r3, [pc, #408]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004150:	429a      	cmp	r2, r3
 8004152:	d908      	bls.n	8004166 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004154:	4b63      	ldr	r3, [pc, #396]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	4960      	ldr	r1, [pc, #384]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004162:	4313      	orrs	r3, r2
 8004164:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0301 	and.w	r3, r3, #1
 800416e:	2b00      	cmp	r3, #0
 8004170:	d04c      	beq.n	800420c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b03      	cmp	r3, #3
 8004178:	d107      	bne.n	800418a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800417a:	4b5a      	ldr	r3, [pc, #360]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d121      	bne.n	80041ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e0a6      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	2b02      	cmp	r3, #2
 8004190:	d107      	bne.n	80041a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004192:	4b54      	ldr	r3, [pc, #336]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d115      	bne.n	80041ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e09a      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d107      	bne.n	80041ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041aa:	4b4e      	ldr	r3, [pc, #312]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e08e      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041ba:	4b4a      	ldr	r3, [pc, #296]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e086      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80041ca:	4b46      	ldr	r3, [pc, #280]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f023 0203 	bic.w	r2, r3, #3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4943      	ldr	r1, [pc, #268]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041dc:	f7fd fe5c 	bl	8001e98 <HAL_GetTick>
 80041e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041e2:	e00a      	b.n	80041fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041e4:	f7fd fe58 	bl	8001e98 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e06e      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fa:	4b3a      	ldr	r3, [pc, #232]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f003 020c 	and.w	r2, r3, #12
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	429a      	cmp	r2, r3
 800420a:	d1eb      	bne.n	80041e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d010      	beq.n	800423a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	4b31      	ldr	r3, [pc, #196]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004224:	429a      	cmp	r2, r3
 8004226:	d208      	bcs.n	800423a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004228:	4b2e      	ldr	r3, [pc, #184]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	492b      	ldr	r1, [pc, #172]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004236:	4313      	orrs	r3, r2
 8004238:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800423a:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <HAL_RCC_ClockConfig+0x1ec>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d210      	bcs.n	800426a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004248:	4b25      	ldr	r3, [pc, #148]	; (80042e0 <HAL_RCC_ClockConfig+0x1ec>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f023 0207 	bic.w	r2, r3, #7
 8004250:	4923      	ldr	r1, [pc, #140]	; (80042e0 <HAL_RCC_ClockConfig+0x1ec>)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	4313      	orrs	r3, r2
 8004256:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004258:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <HAL_RCC_ClockConfig+0x1ec>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d001      	beq.n	800426a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e036      	b.n	80042d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	d008      	beq.n	8004288 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004276:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	4918      	ldr	r1, [pc, #96]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004284:	4313      	orrs	r3, r2
 8004286:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b00      	cmp	r3, #0
 8004292:	d009      	beq.n	80042a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004294:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4910      	ldr	r1, [pc, #64]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80042a8:	f000 f824 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 80042ac:	4602      	mov	r2, r0
 80042ae:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <HAL_RCC_ClockConfig+0x1f0>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	091b      	lsrs	r3, r3, #4
 80042b4:	f003 030f 	and.w	r3, r3, #15
 80042b8:	490b      	ldr	r1, [pc, #44]	; (80042e8 <HAL_RCC_ClockConfig+0x1f4>)
 80042ba:	5ccb      	ldrb	r3, [r1, r3]
 80042bc:	f003 031f 	and.w	r3, r3, #31
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
 80042c4:	4a09      	ldr	r2, [pc, #36]	; (80042ec <HAL_RCC_ClockConfig+0x1f8>)
 80042c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80042c8:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <HAL_RCC_ClockConfig+0x1fc>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fd fd93 	bl	8001df8 <HAL_InitTick>
 80042d2:	4603      	mov	r3, r0
 80042d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80042d6:	7afb      	ldrb	r3, [r7, #11]
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40022000 	.word	0x40022000
 80042e4:	40021000 	.word	0x40021000
 80042e8:	0800b824 	.word	0x0800b824
 80042ec:	20000000 	.word	0x20000000
 80042f0:	20000004 	.word	0x20000004

080042f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b089      	sub	sp, #36	; 0x24
 80042f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
 80042fe:	2300      	movs	r3, #0
 8004300:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004302:	4b3e      	ldr	r3, [pc, #248]	; (80043fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800430c:	4b3b      	ldr	r3, [pc, #236]	; (80043fc <HAL_RCC_GetSysClockFreq+0x108>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	f003 0303 	and.w	r3, r3, #3
 8004314:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x34>
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	2b0c      	cmp	r3, #12
 8004320:	d121      	bne.n	8004366 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d11e      	bne.n	8004366 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004328:	4b34      	ldr	r3, [pc, #208]	; (80043fc <HAL_RCC_GetSysClockFreq+0x108>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0308 	and.w	r3, r3, #8
 8004330:	2b00      	cmp	r3, #0
 8004332:	d107      	bne.n	8004344 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004334:	4b31      	ldr	r3, [pc, #196]	; (80043fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800433a:	0a1b      	lsrs	r3, r3, #8
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	61fb      	str	r3, [r7, #28]
 8004342:	e005      	b.n	8004350 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004344:	4b2d      	ldr	r3, [pc, #180]	; (80043fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	091b      	lsrs	r3, r3, #4
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004350:	4a2b      	ldr	r2, [pc, #172]	; (8004400 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004358:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10d      	bne.n	800437c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004364:	e00a      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	2b04      	cmp	r3, #4
 800436a:	d102      	bne.n	8004372 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800436c:	4b25      	ldr	r3, [pc, #148]	; (8004404 <HAL_RCC_GetSysClockFreq+0x110>)
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	e004      	b.n	800437c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d101      	bne.n	800437c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004378:	4b23      	ldr	r3, [pc, #140]	; (8004408 <HAL_RCC_GetSysClockFreq+0x114>)
 800437a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	2b0c      	cmp	r3, #12
 8004380:	d134      	bne.n	80043ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004382:	4b1e      	ldr	r3, [pc, #120]	; (80043fc <HAL_RCC_GetSysClockFreq+0x108>)
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b02      	cmp	r3, #2
 8004390:	d003      	beq.n	800439a <HAL_RCC_GetSysClockFreq+0xa6>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b03      	cmp	r3, #3
 8004396:	d003      	beq.n	80043a0 <HAL_RCC_GetSysClockFreq+0xac>
 8004398:	e005      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800439a:	4b1a      	ldr	r3, [pc, #104]	; (8004404 <HAL_RCC_GetSysClockFreq+0x110>)
 800439c:	617b      	str	r3, [r7, #20]
      break;
 800439e:	e005      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80043a0:	4b19      	ldr	r3, [pc, #100]	; (8004408 <HAL_RCC_GetSysClockFreq+0x114>)
 80043a2:	617b      	str	r3, [r7, #20]
      break;
 80043a4:	e002      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	617b      	str	r3, [r7, #20]
      break;
 80043aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043ac:	4b13      	ldr	r3, [pc, #76]	; (80043fc <HAL_RCC_GetSysClockFreq+0x108>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	091b      	lsrs	r3, r3, #4
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	3301      	adds	r3, #1
 80043b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80043ba:	4b10      	ldr	r3, [pc, #64]	; (80043fc <HAL_RCC_GetSysClockFreq+0x108>)
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	0a1b      	lsrs	r3, r3, #8
 80043c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	fb03 f202 	mul.w	r2, r3, r2
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043d2:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <HAL_RCC_GetSysClockFreq+0x108>)
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	0e5b      	lsrs	r3, r3, #25
 80043d8:	f003 0303 	and.w	r3, r3, #3
 80043dc:	3301      	adds	r3, #1
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80043e2:	697a      	ldr	r2, [r7, #20]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80043ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80043ec:	69bb      	ldr	r3, [r7, #24]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3724      	adds	r7, #36	; 0x24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40021000 	.word	0x40021000
 8004400:	0800b83c 	.word	0x0800b83c
 8004404:	00f42400 	.word	0x00f42400
 8004408:	007a1200 	.word	0x007a1200

0800440c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800440c:	b480      	push	{r7}
 800440e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004410:	4b03      	ldr	r3, [pc, #12]	; (8004420 <HAL_RCC_GetHCLKFreq+0x14>)
 8004412:	681b      	ldr	r3, [r3, #0]
}
 8004414:	4618      	mov	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20000000 	.word	0x20000000

08004424 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004428:	f7ff fff0 	bl	800440c <HAL_RCC_GetHCLKFreq>
 800442c:	4602      	mov	r2, r0
 800442e:	4b06      	ldr	r3, [pc, #24]	; (8004448 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	4904      	ldr	r1, [pc, #16]	; (800444c <HAL_RCC_GetPCLK1Freq+0x28>)
 800443a:	5ccb      	ldrb	r3, [r1, r3]
 800443c:	f003 031f 	and.w	r3, r3, #31
 8004440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004444:	4618      	mov	r0, r3
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40021000 	.word	0x40021000
 800444c:	0800b834 	.word	0x0800b834

08004450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004454:	f7ff ffda 	bl	800440c <HAL_RCC_GetHCLKFreq>
 8004458:	4602      	mov	r2, r0
 800445a:	4b06      	ldr	r3, [pc, #24]	; (8004474 <HAL_RCC_GetPCLK2Freq+0x24>)
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	0adb      	lsrs	r3, r3, #11
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	4904      	ldr	r1, [pc, #16]	; (8004478 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004466:	5ccb      	ldrb	r3, [r1, r3]
 8004468:	f003 031f 	and.w	r3, r3, #31
 800446c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004470:	4618      	mov	r0, r3
 8004472:	bd80      	pop	{r7, pc}
 8004474:	40021000 	.word	0x40021000
 8004478:	0800b834 	.word	0x0800b834

0800447c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b086      	sub	sp, #24
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004484:	2300      	movs	r3, #0
 8004486:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004488:	4b2a      	ldr	r3, [pc, #168]	; (8004534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800448a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800448c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004494:	f7ff f9ee 	bl	8003874 <HAL_PWREx_GetVoltageRange>
 8004498:	6178      	str	r0, [r7, #20]
 800449a:	e014      	b.n	80044c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800449c:	4b25      	ldr	r3, [pc, #148]	; (8004534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800449e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a0:	4a24      	ldr	r2, [pc, #144]	; (8004534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a6:	6593      	str	r3, [r2, #88]	; 0x58
 80044a8:	4b22      	ldr	r3, [pc, #136]	; (8004534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80044b4:	f7ff f9de 	bl	8003874 <HAL_PWREx_GetVoltageRange>
 80044b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80044ba:	4b1e      	ldr	r3, [pc, #120]	; (8004534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044be:	4a1d      	ldr	r2, [pc, #116]	; (8004534 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80044c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044cc:	d10b      	bne.n	80044e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b80      	cmp	r3, #128	; 0x80
 80044d2:	d919      	bls.n	8004508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2ba0      	cmp	r3, #160	; 0xa0
 80044d8:	d902      	bls.n	80044e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044da:	2302      	movs	r3, #2
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	e013      	b.n	8004508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80044e0:	2301      	movs	r3, #1
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	e010      	b.n	8004508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b80      	cmp	r3, #128	; 0x80
 80044ea:	d902      	bls.n	80044f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80044ec:	2303      	movs	r3, #3
 80044ee:	613b      	str	r3, [r7, #16]
 80044f0:	e00a      	b.n	8004508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b80      	cmp	r3, #128	; 0x80
 80044f6:	d102      	bne.n	80044fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80044f8:	2302      	movs	r3, #2
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	e004      	b.n	8004508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b70      	cmp	r3, #112	; 0x70
 8004502:	d101      	bne.n	8004508 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004504:	2301      	movs	r3, #1
 8004506:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004508:	4b0b      	ldr	r3, [pc, #44]	; (8004538 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f023 0207 	bic.w	r2, r3, #7
 8004510:	4909      	ldr	r1, [pc, #36]	; (8004538 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	4313      	orrs	r3, r2
 8004516:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004518:	4b07      	ldr	r3, [pc, #28]	; (8004538 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	429a      	cmp	r2, r3
 8004524:	d001      	beq.n	800452a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3718      	adds	r7, #24
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40021000 	.word	0x40021000
 8004538:	40022000 	.word	0x40022000

0800453c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004544:	2300      	movs	r3, #0
 8004546:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004548:	2300      	movs	r3, #0
 800454a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004554:	2b00      	cmp	r3, #0
 8004556:	d041      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800455c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004560:	d02a      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004562:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004566:	d824      	bhi.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004568:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800456c:	d008      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800456e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004572:	d81e      	bhi.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004578:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800457c:	d010      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800457e:	e018      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004580:	4b86      	ldr	r3, [pc, #536]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4a85      	ldr	r2, [pc, #532]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800458a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800458c:	e015      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3304      	adds	r3, #4
 8004592:	2100      	movs	r1, #0
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fabb 	bl	8004b10 <RCCEx_PLLSAI1_Config>
 800459a:	4603      	mov	r3, r0
 800459c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800459e:	e00c      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3320      	adds	r3, #32
 80045a4:	2100      	movs	r1, #0
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fba6 	bl	8004cf8 <RCCEx_PLLSAI2_Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045b0:	e003      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	74fb      	strb	r3, [r7, #19]
      break;
 80045b6:	e000      	b.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80045b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045ba:	7cfb      	ldrb	r3, [r7, #19]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10b      	bne.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045c0:	4b76      	ldr	r3, [pc, #472]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ce:	4973      	ldr	r1, [pc, #460]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80045d6:	e001      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d8:	7cfb      	ldrb	r3, [r7, #19]
 80045da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d041      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045f0:	d02a      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80045f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80045f6:	d824      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80045f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80045fc:	d008      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80045fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004602:	d81e      	bhi.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800460c:	d010      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800460e:	e018      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004610:	4b62      	ldr	r3, [pc, #392]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004612:	68db      	ldr	r3, [r3, #12]
 8004614:	4a61      	ldr	r2, [pc, #388]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800461c:	e015      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f000 fa73 	bl	8004b10 <RCCEx_PLLSAI1_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800462e:	e00c      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3320      	adds	r3, #32
 8004634:	2100      	movs	r1, #0
 8004636:	4618      	mov	r0, r3
 8004638:	f000 fb5e 	bl	8004cf8 <RCCEx_PLLSAI2_Config>
 800463c:	4603      	mov	r3, r0
 800463e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004640:	e003      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	74fb      	strb	r3, [r7, #19]
      break;
 8004646:	e000      	b.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004648:	bf00      	nop
    }

    if(ret == HAL_OK)
 800464a:	7cfb      	ldrb	r3, [r7, #19]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d10b      	bne.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004650:	4b52      	ldr	r3, [pc, #328]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004656:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800465e:	494f      	ldr	r1, [pc, #316]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004660:	4313      	orrs	r3, r2
 8004662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004666:	e001      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004668:	7cfb      	ldrb	r3, [r7, #19]
 800466a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 80a0 	beq.w	80047ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800467a:	2300      	movs	r3, #0
 800467c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800467e:	4b47      	ldr	r3, [pc, #284]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d101      	bne.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800468e:	2300      	movs	r3, #0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00d      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004694:	4b41      	ldr	r3, [pc, #260]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	4a40      	ldr	r2, [pc, #256]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800469a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469e:	6593      	str	r3, [r2, #88]	; 0x58
 80046a0:	4b3e      	ldr	r3, [pc, #248]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a8:	60bb      	str	r3, [r7, #8]
 80046aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ac:	2301      	movs	r3, #1
 80046ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046b0:	4b3b      	ldr	r3, [pc, #236]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a3a      	ldr	r2, [pc, #232]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80046bc:	f7fd fbec 	bl	8001e98 <HAL_GetTick>
 80046c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046c2:	e009      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c4:	f7fd fbe8 	bl	8001e98 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d902      	bls.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	74fb      	strb	r3, [r7, #19]
        break;
 80046d6:	e005      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046d8:	4b31      	ldr	r3, [pc, #196]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0ef      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80046e4:	7cfb      	ldrb	r3, [r7, #19]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d15c      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046ea:	4b2c      	ldr	r3, [pc, #176]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01f      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	429a      	cmp	r2, r3
 8004706:	d019      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004708:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004712:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004714:	4b21      	ldr	r3, [pc, #132]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471a:	4a20      	ldr	r2, [pc, #128]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004724:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	4a1c      	ldr	r2, [pc, #112]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004734:	4a19      	ldr	r2, [pc, #100]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d016      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004746:	f7fd fba7 	bl	8001e98 <HAL_GetTick>
 800474a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800474c:	e00b      	b.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800474e:	f7fd fba3 	bl	8001e98 <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	f241 3288 	movw	r2, #5000	; 0x1388
 800475c:	4293      	cmp	r3, r2
 800475e:	d902      	bls.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	74fb      	strb	r3, [r7, #19]
            break;
 8004764:	e006      	b.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004766:	4b0d      	ldr	r3, [pc, #52]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0ec      	beq.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004774:	7cfb      	ldrb	r3, [r7, #19]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10c      	bne.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800477a:	4b08      	ldr	r3, [pc, #32]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800478a:	4904      	ldr	r1, [pc, #16]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478c:	4313      	orrs	r3, r2
 800478e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004792:	e009      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004794:	7cfb      	ldrb	r3, [r7, #19]
 8004796:	74bb      	strb	r3, [r7, #18]
 8004798:	e006      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800479a:	bf00      	nop
 800479c:	40021000 	.word	0x40021000
 80047a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a4:	7cfb      	ldrb	r3, [r7, #19]
 80047a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047a8:	7c7b      	ldrb	r3, [r7, #17]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d105      	bne.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ae:	4b9e      	ldr	r3, [pc, #632]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b2:	4a9d      	ldr	r2, [pc, #628]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80047c6:	4b98      	ldr	r3, [pc, #608]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047cc:	f023 0203 	bic.w	r2, r3, #3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	4994      	ldr	r1, [pc, #592]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047e8:	4b8f      	ldr	r3, [pc, #572]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ee:	f023 020c 	bic.w	r2, r3, #12
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f6:	498c      	ldr	r1, [pc, #560]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0304 	and.w	r3, r3, #4
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800480a:	4b87      	ldr	r3, [pc, #540]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004810:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004818:	4983      	ldr	r1, [pc, #524]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481a:	4313      	orrs	r3, r2
 800481c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800482c:	4b7e      	ldr	r3, [pc, #504]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004832:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	497b      	ldr	r1, [pc, #492]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800483c:	4313      	orrs	r3, r2
 800483e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0310 	and.w	r3, r3, #16
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800484e:	4b76      	ldr	r3, [pc, #472]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004854:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485c:	4972      	ldr	r1, [pc, #456]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485e:	4313      	orrs	r3, r2
 8004860:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004870:	4b6d      	ldr	r3, [pc, #436]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004876:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487e:	496a      	ldr	r1, [pc, #424]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004880:	4313      	orrs	r3, r2
 8004882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004892:	4b65      	ldr	r3, [pc, #404]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004898:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048a0:	4961      	ldr	r1, [pc, #388]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00a      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048b4:	4b5c      	ldr	r3, [pc, #368]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048c2:	4959      	ldr	r1, [pc, #356]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00a      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048d6:	4b54      	ldr	r3, [pc, #336]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e4:	4950      	ldr	r1, [pc, #320]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00a      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048f8:	4b4b      	ldr	r3, [pc, #300]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004906:	4948      	ldr	r1, [pc, #288]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004916:	2b00      	cmp	r3, #0
 8004918:	d00a      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800491a:	4b43      	ldr	r3, [pc, #268]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004920:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004928:	493f      	ldr	r1, [pc, #252]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492a:	4313      	orrs	r3, r2
 800492c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d028      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800493c:	4b3a      	ldr	r3, [pc, #232]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004942:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800494a:	4937      	ldr	r1, [pc, #220]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494c:	4313      	orrs	r3, r2
 800494e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004956:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800495a:	d106      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800495c:	4b32      	ldr	r3, [pc, #200]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	4a31      	ldr	r2, [pc, #196]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004962:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004966:	60d3      	str	r3, [r2, #12]
 8004968:	e011      	b.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800496e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004972:	d10c      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	3304      	adds	r3, #4
 8004978:	2101      	movs	r1, #1
 800497a:	4618      	mov	r0, r3
 800497c:	f000 f8c8 	bl	8004b10 <RCCEx_PLLSAI1_Config>
 8004980:	4603      	mov	r3, r0
 8004982:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004984:	7cfb      	ldrb	r3, [r7, #19]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800498a:	7cfb      	ldrb	r3, [r7, #19]
 800498c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d028      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800499a:	4b23      	ldr	r3, [pc, #140]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a8:	491f      	ldr	r1, [pc, #124]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b8:	d106      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ba:	4b1b      	ldr	r3, [pc, #108]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	4a1a      	ldr	r2, [pc, #104]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049c4:	60d3      	str	r3, [r2, #12]
 80049c6:	e011      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049d0:	d10c      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3304      	adds	r3, #4
 80049d6:	2101      	movs	r1, #1
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 f899 	bl	8004b10 <RCCEx_PLLSAI1_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049e2:	7cfb      	ldrb	r3, [r7, #19]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80049e8:	7cfb      	ldrb	r3, [r7, #19]
 80049ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d02b      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049f8:	4b0b      	ldr	r3, [pc, #44]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a06:	4908      	ldr	r1, [pc, #32]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a16:	d109      	bne.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a18:	4b03      	ldr	r3, [pc, #12]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4a02      	ldr	r2, [pc, #8]	; (8004a28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a22:	60d3      	str	r3, [r2, #12]
 8004a24:	e014      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004a26:	bf00      	nop
 8004a28:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a34:	d10c      	bne.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3304      	adds	r3, #4
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f000 f867 	bl	8004b10 <RCCEx_PLLSAI1_Config>
 8004a42:	4603      	mov	r3, r0
 8004a44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d02f      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a5c:	4b2b      	ldr	r3, [pc, #172]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a6a:	4928      	ldr	r1, [pc, #160]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a7a:	d10d      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	3304      	adds	r3, #4
 8004a80:	2102      	movs	r1, #2
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f844 	bl	8004b10 <RCCEx_PLLSAI1_Config>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a8c:	7cfb      	ldrb	r3, [r7, #19]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d014      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004a92:	7cfb      	ldrb	r3, [r7, #19]
 8004a94:	74bb      	strb	r3, [r7, #18]
 8004a96:	e011      	b.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3320      	adds	r3, #32
 8004aa6:	2102      	movs	r1, #2
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f000 f925 	bl	8004cf8 <RCCEx_PLLSAI2_Config>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ab2:	7cfb      	ldrb	r3, [r7, #19]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d001      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ab8:	7cfb      	ldrb	r3, [r7, #19]
 8004aba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00a      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ac8:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ace:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ad6:	490d      	ldr	r1, [pc, #52]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004aea:	4b08      	ldr	r3, [pc, #32]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004afa:	4904      	ldr	r1, [pc, #16]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b02:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40021000 	.word	0x40021000

08004b10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b1e:	4b75      	ldr	r3, [pc, #468]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d018      	beq.n	8004b5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b2a:	4b72      	ldr	r3, [pc, #456]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f003 0203 	and.w	r2, r3, #3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d10d      	bne.n	8004b56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
       ||
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b42:	4b6c      	ldr	r3, [pc, #432]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	091b      	lsrs	r3, r3, #4
 8004b48:	f003 0307 	and.w	r3, r3, #7
 8004b4c:	1c5a      	adds	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
       ||
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d047      	beq.n	8004be6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
 8004b5a:	e044      	b.n	8004be6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b03      	cmp	r3, #3
 8004b62:	d018      	beq.n	8004b96 <RCCEx_PLLSAI1_Config+0x86>
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d825      	bhi.n	8004bb4 <RCCEx_PLLSAI1_Config+0xa4>
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d002      	beq.n	8004b72 <RCCEx_PLLSAI1_Config+0x62>
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d009      	beq.n	8004b84 <RCCEx_PLLSAI1_Config+0x74>
 8004b70:	e020      	b.n	8004bb4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b72:	4b60      	ldr	r3, [pc, #384]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d11d      	bne.n	8004bba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b82:	e01a      	b.n	8004bba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b84:	4b5b      	ldr	r3, [pc, #364]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d116      	bne.n	8004bbe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b94:	e013      	b.n	8004bbe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b96:	4b57      	ldr	r3, [pc, #348]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10f      	bne.n	8004bc2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ba2:	4b54      	ldr	r3, [pc, #336]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d109      	bne.n	8004bc2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bb2:	e006      	b.n	8004bc2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bb8:	e004      	b.n	8004bc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bba:	bf00      	nop
 8004bbc:	e002      	b.n	8004bc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bbe:	bf00      	nop
 8004bc0:	e000      	b.n	8004bc4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004bc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10d      	bne.n	8004be6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004bca:	4b4a      	ldr	r3, [pc, #296]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6819      	ldr	r1, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	011b      	lsls	r3, r3, #4
 8004bde:	430b      	orrs	r3, r1
 8004be0:	4944      	ldr	r1, [pc, #272]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d17d      	bne.n	8004ce8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004bec:	4b41      	ldr	r3, [pc, #260]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a40      	ldr	r2, [pc, #256]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bf6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf8:	f7fd f94e 	bl	8001e98 <HAL_GetTick>
 8004bfc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004bfe:	e009      	b.n	8004c14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c00:	f7fd f94a 	bl	8001e98 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d902      	bls.n	8004c14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	73fb      	strb	r3, [r7, #15]
        break;
 8004c12:	e005      	b.n	8004c20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c14:	4b37      	ldr	r3, [pc, #220]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1ef      	bne.n	8004c00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c20:	7bfb      	ldrb	r3, [r7, #15]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d160      	bne.n	8004ce8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d111      	bne.n	8004c50 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c2c:	4b31      	ldr	r3, [pc, #196]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	6892      	ldr	r2, [r2, #8]
 8004c3c:	0211      	lsls	r1, r2, #8
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	68d2      	ldr	r2, [r2, #12]
 8004c42:	0912      	lsrs	r2, r2, #4
 8004c44:	0452      	lsls	r2, r2, #17
 8004c46:	430a      	orrs	r2, r1
 8004c48:	492a      	ldr	r1, [pc, #168]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	610b      	str	r3, [r1, #16]
 8004c4e:	e027      	b.n	8004ca0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d112      	bne.n	8004c7c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c56:	4b27      	ldr	r3, [pc, #156]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004c5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6892      	ldr	r2, [r2, #8]
 8004c66:	0211      	lsls	r1, r2, #8
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6912      	ldr	r2, [r2, #16]
 8004c6c:	0852      	lsrs	r2, r2, #1
 8004c6e:	3a01      	subs	r2, #1
 8004c70:	0552      	lsls	r2, r2, #21
 8004c72:	430a      	orrs	r2, r1
 8004c74:	491f      	ldr	r1, [pc, #124]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	610b      	str	r3, [r1, #16]
 8004c7a:	e011      	b.n	8004ca0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c7c:	4b1d      	ldr	r3, [pc, #116]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	6892      	ldr	r2, [r2, #8]
 8004c8c:	0211      	lsls	r1, r2, #8
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6952      	ldr	r2, [r2, #20]
 8004c92:	0852      	lsrs	r2, r2, #1
 8004c94:	3a01      	subs	r2, #1
 8004c96:	0652      	lsls	r2, r2, #25
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	4916      	ldr	r1, [pc, #88]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004ca0:	4b14      	ldr	r3, [pc, #80]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a13      	ldr	r2, [pc, #76]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004caa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cac:	f7fd f8f4 	bl	8001e98 <HAL_GetTick>
 8004cb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cb2:	e009      	b.n	8004cc8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cb4:	f7fd f8f0 	bl	8001e98 <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d902      	bls.n	8004cc8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	73fb      	strb	r3, [r7, #15]
          break;
 8004cc6:	e005      	b.n	8004cd4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0ef      	beq.n	8004cb4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004cda:	4b06      	ldr	r3, [pc, #24]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	4904      	ldr	r1, [pc, #16]	; (8004cf4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000

08004cf8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d06:	4b6a      	ldr	r3, [pc, #424]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d018      	beq.n	8004d44 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004d12:	4b67      	ldr	r3, [pc, #412]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f003 0203 	and.w	r2, r3, #3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d10d      	bne.n	8004d3e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
       ||
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d009      	beq.n	8004d3e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004d2a:	4b61      	ldr	r3, [pc, #388]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	091b      	lsrs	r3, r3, #4
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
       ||
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d047      	beq.n	8004dce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	73fb      	strb	r3, [r7, #15]
 8004d42:	e044      	b.n	8004dce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2b03      	cmp	r3, #3
 8004d4a:	d018      	beq.n	8004d7e <RCCEx_PLLSAI2_Config+0x86>
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d825      	bhi.n	8004d9c <RCCEx_PLLSAI2_Config+0xa4>
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d002      	beq.n	8004d5a <RCCEx_PLLSAI2_Config+0x62>
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d009      	beq.n	8004d6c <RCCEx_PLLSAI2_Config+0x74>
 8004d58:	e020      	b.n	8004d9c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d5a:	4b55      	ldr	r3, [pc, #340]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d11d      	bne.n	8004da2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d6a:	e01a      	b.n	8004da2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d6c:	4b50      	ldr	r3, [pc, #320]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d116      	bne.n	8004da6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d7c:	e013      	b.n	8004da6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d7e:	4b4c      	ldr	r3, [pc, #304]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10f      	bne.n	8004daa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d8a:	4b49      	ldr	r3, [pc, #292]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d109      	bne.n	8004daa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d9a:	e006      	b.n	8004daa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004da0:	e004      	b.n	8004dac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004da2:	bf00      	nop
 8004da4:	e002      	b.n	8004dac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004da6:	bf00      	nop
 8004da8:	e000      	b.n	8004dac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004daa:	bf00      	nop
    }

    if(status == HAL_OK)
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10d      	bne.n	8004dce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004db2:	4b3f      	ldr	r3, [pc, #252]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6819      	ldr	r1, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	011b      	lsls	r3, r3, #4
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	4939      	ldr	r1, [pc, #228]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dce:	7bfb      	ldrb	r3, [r7, #15]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d167      	bne.n	8004ea4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004dd4:	4b36      	ldr	r3, [pc, #216]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a35      	ldr	r2, [pc, #212]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de0:	f7fd f85a 	bl	8001e98 <HAL_GetTick>
 8004de4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004de6:	e009      	b.n	8004dfc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004de8:	f7fd f856 	bl	8001e98 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d902      	bls.n	8004dfc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	73fb      	strb	r3, [r7, #15]
        break;
 8004dfa:	e005      	b.n	8004e08 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004dfc:	4b2c      	ldr	r3, [pc, #176]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1ef      	bne.n	8004de8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d14a      	bne.n	8004ea4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d111      	bne.n	8004e38 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e14:	4b26      	ldr	r3, [pc, #152]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e16:	695b      	ldr	r3, [r3, #20]
 8004e18:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	6892      	ldr	r2, [r2, #8]
 8004e24:	0211      	lsls	r1, r2, #8
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	68d2      	ldr	r2, [r2, #12]
 8004e2a:	0912      	lsrs	r2, r2, #4
 8004e2c:	0452      	lsls	r2, r2, #17
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	491f      	ldr	r1, [pc, #124]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	614b      	str	r3, [r1, #20]
 8004e36:	e011      	b.n	8004e5c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004e38:	4b1d      	ldr	r3, [pc, #116]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e40:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	6892      	ldr	r2, [r2, #8]
 8004e48:	0211      	lsls	r1, r2, #8
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6912      	ldr	r2, [r2, #16]
 8004e4e:	0852      	lsrs	r2, r2, #1
 8004e50:	3a01      	subs	r2, #1
 8004e52:	0652      	lsls	r2, r2, #25
 8004e54:	430a      	orrs	r2, r1
 8004e56:	4916      	ldr	r1, [pc, #88]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e5c:	4b14      	ldr	r3, [pc, #80]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e66:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e68:	f7fd f816 	bl	8001e98 <HAL_GetTick>
 8004e6c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e6e:	e009      	b.n	8004e84 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e70:	f7fd f812 	bl	8001e98 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d902      	bls.n	8004e84 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	73fb      	strb	r3, [r7, #15]
          break;
 8004e82:	e005      	b.n	8004e90 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e84:	4b0a      	ldr	r3, [pc, #40]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0ef      	beq.n	8004e70 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d106      	bne.n	8004ea4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e98:	695a      	ldr	r2, [r3, #20]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	4904      	ldr	r1, [pc, #16]	; (8004eb0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	40021000 	.word	0x40021000

08004eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e049      	b.n	8004f5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d106      	bne.n	8004ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7fc fd70 	bl	80019c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4610      	mov	r0, r2
 8004ef4:	f000 fc4c 	bl	8005790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e049      	b.n	8005008 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d106      	bne.n	8004f8e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7fc fcf9 	bl	8001980 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2202      	movs	r2, #2
 8004f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	f000 fbf5 	bl	8005790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2201      	movs	r2, #1
 8004fea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e049      	b.n	80050b6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f841 	bl	80050be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3304      	adds	r3, #4
 800504c:	4619      	mov	r1, r3
 800504e:	4610      	mov	r0, r2
 8005050:	f000 fb9e 	bl	8005790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2201      	movs	r2, #1
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d109      	bne.n	80050f8 <HAL_TIM_PWM_Start+0x24>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	bf14      	ite	ne
 80050f0:	2301      	movne	r3, #1
 80050f2:	2300      	moveq	r3, #0
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	e03c      	b.n	8005172 <HAL_TIM_PWM_Start+0x9e>
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2b04      	cmp	r3, #4
 80050fc:	d109      	bne.n	8005112 <HAL_TIM_PWM_Start+0x3e>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b01      	cmp	r3, #1
 8005108:	bf14      	ite	ne
 800510a:	2301      	movne	r3, #1
 800510c:	2300      	moveq	r3, #0
 800510e:	b2db      	uxtb	r3, r3
 8005110:	e02f      	b.n	8005172 <HAL_TIM_PWM_Start+0x9e>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b08      	cmp	r3, #8
 8005116:	d109      	bne.n	800512c <HAL_TIM_PWM_Start+0x58>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b01      	cmp	r3, #1
 8005122:	bf14      	ite	ne
 8005124:	2301      	movne	r3, #1
 8005126:	2300      	moveq	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	e022      	b.n	8005172 <HAL_TIM_PWM_Start+0x9e>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	2b0c      	cmp	r3, #12
 8005130:	d109      	bne.n	8005146 <HAL_TIM_PWM_Start+0x72>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b01      	cmp	r3, #1
 800513c:	bf14      	ite	ne
 800513e:	2301      	movne	r3, #1
 8005140:	2300      	moveq	r3, #0
 8005142:	b2db      	uxtb	r3, r3
 8005144:	e015      	b.n	8005172 <HAL_TIM_PWM_Start+0x9e>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b10      	cmp	r3, #16
 800514a:	d109      	bne.n	8005160 <HAL_TIM_PWM_Start+0x8c>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	bf14      	ite	ne
 8005158:	2301      	movne	r3, #1
 800515a:	2300      	moveq	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	e008      	b.n	8005172 <HAL_TIM_PWM_Start+0x9e>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b01      	cmp	r3, #1
 800516a:	bf14      	ite	ne
 800516c:	2301      	movne	r3, #1
 800516e:	2300      	moveq	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d001      	beq.n	800517a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e09c      	b.n	80052b4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d104      	bne.n	800518a <HAL_TIM_PWM_Start+0xb6>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005188:	e023      	b.n	80051d2 <HAL_TIM_PWM_Start+0xfe>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b04      	cmp	r3, #4
 800518e:	d104      	bne.n	800519a <HAL_TIM_PWM_Start+0xc6>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2202      	movs	r2, #2
 8005194:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005198:	e01b      	b.n	80051d2 <HAL_TIM_PWM_Start+0xfe>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d104      	bne.n	80051aa <HAL_TIM_PWM_Start+0xd6>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2202      	movs	r2, #2
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a8:	e013      	b.n	80051d2 <HAL_TIM_PWM_Start+0xfe>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b0c      	cmp	r3, #12
 80051ae:	d104      	bne.n	80051ba <HAL_TIM_PWM_Start+0xe6>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2202      	movs	r2, #2
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b8:	e00b      	b.n	80051d2 <HAL_TIM_PWM_Start+0xfe>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d104      	bne.n	80051ca <HAL_TIM_PWM_Start+0xf6>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051c8:	e003      	b.n	80051d2 <HAL_TIM_PWM_Start+0xfe>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2201      	movs	r2, #1
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fee2 	bl	8005fa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a35      	ldr	r2, [pc, #212]	; (80052bc <HAL_TIM_PWM_Start+0x1e8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d013      	beq.n	8005212 <HAL_TIM_PWM_Start+0x13e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a34      	ldr	r2, [pc, #208]	; (80052c0 <HAL_TIM_PWM_Start+0x1ec>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d00e      	beq.n	8005212 <HAL_TIM_PWM_Start+0x13e>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a32      	ldr	r2, [pc, #200]	; (80052c4 <HAL_TIM_PWM_Start+0x1f0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d009      	beq.n	8005212 <HAL_TIM_PWM_Start+0x13e>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a31      	ldr	r2, [pc, #196]	; (80052c8 <HAL_TIM_PWM_Start+0x1f4>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d004      	beq.n	8005212 <HAL_TIM_PWM_Start+0x13e>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a2f      	ldr	r2, [pc, #188]	; (80052cc <HAL_TIM_PWM_Start+0x1f8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d101      	bne.n	8005216 <HAL_TIM_PWM_Start+0x142>
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <HAL_TIM_PWM_Start+0x144>
 8005216:	2300      	movs	r3, #0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d007      	beq.n	800522c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800522a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a22      	ldr	r2, [pc, #136]	; (80052bc <HAL_TIM_PWM_Start+0x1e8>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d01d      	beq.n	8005272 <HAL_TIM_PWM_Start+0x19e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800523e:	d018      	beq.n	8005272 <HAL_TIM_PWM_Start+0x19e>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a22      	ldr	r2, [pc, #136]	; (80052d0 <HAL_TIM_PWM_Start+0x1fc>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d013      	beq.n	8005272 <HAL_TIM_PWM_Start+0x19e>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a21      	ldr	r2, [pc, #132]	; (80052d4 <HAL_TIM_PWM_Start+0x200>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00e      	beq.n	8005272 <HAL_TIM_PWM_Start+0x19e>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a1f      	ldr	r2, [pc, #124]	; (80052d8 <HAL_TIM_PWM_Start+0x204>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d009      	beq.n	8005272 <HAL_TIM_PWM_Start+0x19e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <HAL_TIM_PWM_Start+0x1ec>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d004      	beq.n	8005272 <HAL_TIM_PWM_Start+0x19e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a15      	ldr	r2, [pc, #84]	; (80052c4 <HAL_TIM_PWM_Start+0x1f0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d115      	bne.n	800529e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	4b18      	ldr	r3, [pc, #96]	; (80052dc <HAL_TIM_PWM_Start+0x208>)
 800527a:	4013      	ands	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2b06      	cmp	r3, #6
 8005282:	d015      	beq.n	80052b0 <HAL_TIM_PWM_Start+0x1dc>
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528a:	d011      	beq.n	80052b0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f042 0201 	orr.w	r2, r2, #1
 800529a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529c:	e008      	b.n	80052b0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0201 	orr.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	e000      	b.n	80052b2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	40012c00 	.word	0x40012c00
 80052c0:	40013400 	.word	0x40013400
 80052c4:	40014000 	.word	0x40014000
 80052c8:	40014400 	.word	0x40014400
 80052cc:	40014800 	.word	0x40014800
 80052d0:	40000400 	.word	0x40000400
 80052d4:	40000800 	.word	0x40000800
 80052d8:	40000c00 	.word	0x40000c00
 80052dc:	00010007 	.word	0x00010007

080052e0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052ec:	2300      	movs	r3, #0
 80052ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <HAL_TIM_OC_ConfigChannel+0x1e>
 80052fa:	2302      	movs	r3, #2
 80052fc:	e066      	b.n	80053cc <HAL_TIM_OC_ConfigChannel+0xec>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2201      	movs	r2, #1
 8005302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b14      	cmp	r3, #20
 800530a:	d857      	bhi.n	80053bc <HAL_TIM_OC_ConfigChannel+0xdc>
 800530c:	a201      	add	r2, pc, #4	; (adr r2, 8005314 <HAL_TIM_OC_ConfigChannel+0x34>)
 800530e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005312:	bf00      	nop
 8005314:	08005369 	.word	0x08005369
 8005318:	080053bd 	.word	0x080053bd
 800531c:	080053bd 	.word	0x080053bd
 8005320:	080053bd 	.word	0x080053bd
 8005324:	08005377 	.word	0x08005377
 8005328:	080053bd 	.word	0x080053bd
 800532c:	080053bd 	.word	0x080053bd
 8005330:	080053bd 	.word	0x080053bd
 8005334:	08005385 	.word	0x08005385
 8005338:	080053bd 	.word	0x080053bd
 800533c:	080053bd 	.word	0x080053bd
 8005340:	080053bd 	.word	0x080053bd
 8005344:	08005393 	.word	0x08005393
 8005348:	080053bd 	.word	0x080053bd
 800534c:	080053bd 	.word	0x080053bd
 8005350:	080053bd 	.word	0x080053bd
 8005354:	080053a1 	.word	0x080053a1
 8005358:	080053bd 	.word	0x080053bd
 800535c:	080053bd 	.word	0x080053bd
 8005360:	080053bd 	.word	0x080053bd
 8005364:	080053af 	.word	0x080053af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	4618      	mov	r0, r3
 8005370:	f000 faa8 	bl	80058c4 <TIM_OC1_SetConfig>
      break;
 8005374:	e025      	b.n	80053c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	4618      	mov	r0, r3
 800537e:	f000 fb31 	bl	80059e4 <TIM_OC2_SetConfig>
      break;
 8005382:	e01e      	b.n	80053c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fbb4 	bl	8005af8 <TIM_OC3_SetConfig>
      break;
 8005390:	e017      	b.n	80053c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68b9      	ldr	r1, [r7, #8]
 8005398:	4618      	mov	r0, r3
 800539a:	f000 fc35 	bl	8005c08 <TIM_OC4_SetConfig>
      break;
 800539e:	e010      	b.n	80053c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68b9      	ldr	r1, [r7, #8]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fc98 	bl	8005cdc <TIM_OC5_SetConfig>
      break;
 80053ac:	e009      	b.n	80053c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68b9      	ldr	r1, [r7, #8]
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fcf5 	bl	8005da4 <TIM_OC6_SetConfig>
      break;
 80053ba:	e002      	b.n	80053c2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	75fb      	strb	r3, [r7, #23]
      break;
 80053c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2200      	movs	r2, #0
 80053c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3718      	adds	r7, #24
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053e0:	2300      	movs	r3, #0
 80053e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053ee:	2302      	movs	r3, #2
 80053f0:	e0ff      	b.n	80055f2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b14      	cmp	r3, #20
 80053fe:	f200 80f0 	bhi.w	80055e2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005402:	a201      	add	r2, pc, #4	; (adr r2, 8005408 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005408:	0800545d 	.word	0x0800545d
 800540c:	080055e3 	.word	0x080055e3
 8005410:	080055e3 	.word	0x080055e3
 8005414:	080055e3 	.word	0x080055e3
 8005418:	0800549d 	.word	0x0800549d
 800541c:	080055e3 	.word	0x080055e3
 8005420:	080055e3 	.word	0x080055e3
 8005424:	080055e3 	.word	0x080055e3
 8005428:	080054df 	.word	0x080054df
 800542c:	080055e3 	.word	0x080055e3
 8005430:	080055e3 	.word	0x080055e3
 8005434:	080055e3 	.word	0x080055e3
 8005438:	0800551f 	.word	0x0800551f
 800543c:	080055e3 	.word	0x080055e3
 8005440:	080055e3 	.word	0x080055e3
 8005444:	080055e3 	.word	0x080055e3
 8005448:	08005561 	.word	0x08005561
 800544c:	080055e3 	.word	0x080055e3
 8005450:	080055e3 	.word	0x080055e3
 8005454:	080055e3 	.word	0x080055e3
 8005458:	080055a1 	.word	0x080055a1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68b9      	ldr	r1, [r7, #8]
 8005462:	4618      	mov	r0, r3
 8005464:	f000 fa2e 	bl	80058c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699a      	ldr	r2, [r3, #24]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f042 0208 	orr.w	r2, r2, #8
 8005476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699a      	ldr	r2, [r3, #24]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0204 	bic.w	r2, r2, #4
 8005486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6999      	ldr	r1, [r3, #24]
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	691a      	ldr	r2, [r3, #16]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	430a      	orrs	r2, r1
 8005498:	619a      	str	r2, [r3, #24]
      break;
 800549a:	e0a5      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68b9      	ldr	r1, [r7, #8]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f000 fa9e 	bl	80059e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	699a      	ldr	r2, [r3, #24]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6999      	ldr	r1, [r3, #24]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	021a      	lsls	r2, r3, #8
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	430a      	orrs	r2, r1
 80054da:	619a      	str	r2, [r3, #24]
      break;
 80054dc:	e084      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68b9      	ldr	r1, [r7, #8]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f000 fb07 	bl	8005af8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	69da      	ldr	r2, [r3, #28]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f042 0208 	orr.w	r2, r2, #8
 80054f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0204 	bic.w	r2, r2, #4
 8005508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69d9      	ldr	r1, [r3, #28]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	430a      	orrs	r2, r1
 800551a:	61da      	str	r2, [r3, #28]
      break;
 800551c:	e064      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68b9      	ldr	r1, [r7, #8]
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fb6f 	bl	8005c08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	69da      	ldr	r2, [r3, #28]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69d9      	ldr	r1, [r3, #28]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	021a      	lsls	r2, r3, #8
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	430a      	orrs	r2, r1
 800555c:	61da      	str	r2, [r3, #28]
      break;
 800555e:	e043      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68b9      	ldr	r1, [r7, #8]
 8005566:	4618      	mov	r0, r3
 8005568:	f000 fbb8 	bl	8005cdc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f042 0208 	orr.w	r2, r2, #8
 800557a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0204 	bic.w	r2, r2, #4
 800558a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	691a      	ldr	r2, [r3, #16]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800559e:	e023      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68b9      	ldr	r1, [r7, #8]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 fbfc 	bl	8005da4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	021a      	lsls	r2, r3, #8
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	430a      	orrs	r2, r1
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055e0:	e002      	b.n	80055e8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
 80055e4:	75fb      	strb	r3, [r7, #23]
      break;
 80055e6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3718      	adds	r7, #24
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop

080055fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b084      	sub	sp, #16
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_TIM_ConfigClockSource+0x1c>
 8005614:	2302      	movs	r3, #2
 8005616:	e0b6      	b.n	8005786 <HAL_TIM_ConfigClockSource+0x18a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005636:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800563a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005642:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005654:	d03e      	beq.n	80056d4 <HAL_TIM_ConfigClockSource+0xd8>
 8005656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800565a:	f200 8087 	bhi.w	800576c <HAL_TIM_ConfigClockSource+0x170>
 800565e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005662:	f000 8086 	beq.w	8005772 <HAL_TIM_ConfigClockSource+0x176>
 8005666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800566a:	d87f      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x170>
 800566c:	2b70      	cmp	r3, #112	; 0x70
 800566e:	d01a      	beq.n	80056a6 <HAL_TIM_ConfigClockSource+0xaa>
 8005670:	2b70      	cmp	r3, #112	; 0x70
 8005672:	d87b      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x170>
 8005674:	2b60      	cmp	r3, #96	; 0x60
 8005676:	d050      	beq.n	800571a <HAL_TIM_ConfigClockSource+0x11e>
 8005678:	2b60      	cmp	r3, #96	; 0x60
 800567a:	d877      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x170>
 800567c:	2b50      	cmp	r3, #80	; 0x50
 800567e:	d03c      	beq.n	80056fa <HAL_TIM_ConfigClockSource+0xfe>
 8005680:	2b50      	cmp	r3, #80	; 0x50
 8005682:	d873      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x170>
 8005684:	2b40      	cmp	r3, #64	; 0x40
 8005686:	d058      	beq.n	800573a <HAL_TIM_ConfigClockSource+0x13e>
 8005688:	2b40      	cmp	r3, #64	; 0x40
 800568a:	d86f      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x170>
 800568c:	2b30      	cmp	r3, #48	; 0x30
 800568e:	d064      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x15e>
 8005690:	2b30      	cmp	r3, #48	; 0x30
 8005692:	d86b      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x170>
 8005694:	2b20      	cmp	r3, #32
 8005696:	d060      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x15e>
 8005698:	2b20      	cmp	r3, #32
 800569a:	d867      	bhi.n	800576c <HAL_TIM_ConfigClockSource+0x170>
 800569c:	2b00      	cmp	r3, #0
 800569e:	d05c      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x15e>
 80056a0:	2b10      	cmp	r3, #16
 80056a2:	d05a      	beq.n	800575a <HAL_TIM_ConfigClockSource+0x15e>
 80056a4:	e062      	b.n	800576c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056b6:	f000 fc55 	bl	8005f64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80056c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68ba      	ldr	r2, [r7, #8]
 80056d0:	609a      	str	r2, [r3, #8]
      break;
 80056d2:	e04f      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80056e4:	f000 fc3e 	bl	8005f64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80056f6:	609a      	str	r2, [r3, #8]
      break;
 80056f8:	e03c      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005706:	461a      	mov	r2, r3
 8005708:	f000 fbb2 	bl	8005e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2150      	movs	r1, #80	; 0x50
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fc0b 	bl	8005f2e <TIM_ITRx_SetConfig>
      break;
 8005718:	e02c      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005726:	461a      	mov	r2, r3
 8005728:	f000 fbd1 	bl	8005ece <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2160      	movs	r1, #96	; 0x60
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fbfb 	bl	8005f2e <TIM_ITRx_SetConfig>
      break;
 8005738:	e01c      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005746:	461a      	mov	r2, r3
 8005748:	f000 fb92 	bl	8005e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2140      	movs	r1, #64	; 0x40
 8005752:	4618      	mov	r0, r3
 8005754:	f000 fbeb 	bl	8005f2e <TIM_ITRx_SetConfig>
      break;
 8005758:	e00c      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4619      	mov	r1, r3
 8005764:	4610      	mov	r0, r2
 8005766:	f000 fbe2 	bl	8005f2e <TIM_ITRx_SetConfig>
      break;
 800576a:	e003      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	73fb      	strb	r3, [r7, #15]
      break;
 8005770:	e000      	b.n	8005774 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005772:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
	...

08005790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a40      	ldr	r2, [pc, #256]	; (80058a4 <TIM_Base_SetConfig+0x114>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d013      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ae:	d00f      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a3d      	ldr	r2, [pc, #244]	; (80058a8 <TIM_Base_SetConfig+0x118>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d00b      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a3c      	ldr	r2, [pc, #240]	; (80058ac <TIM_Base_SetConfig+0x11c>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d007      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a3b      	ldr	r2, [pc, #236]	; (80058b0 <TIM_Base_SetConfig+0x120>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_Base_SetConfig+0x40>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a3a      	ldr	r2, [pc, #232]	; (80058b4 <TIM_Base_SetConfig+0x124>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d108      	bne.n	80057e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a2f      	ldr	r2, [pc, #188]	; (80058a4 <TIM_Base_SetConfig+0x114>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d01f      	beq.n	800582a <TIM_Base_SetConfig+0x9a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f0:	d01b      	beq.n	800582a <TIM_Base_SetConfig+0x9a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2c      	ldr	r2, [pc, #176]	; (80058a8 <TIM_Base_SetConfig+0x118>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d017      	beq.n	800582a <TIM_Base_SetConfig+0x9a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2b      	ldr	r2, [pc, #172]	; (80058ac <TIM_Base_SetConfig+0x11c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <TIM_Base_SetConfig+0x9a>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2a      	ldr	r2, [pc, #168]	; (80058b0 <TIM_Base_SetConfig+0x120>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d00f      	beq.n	800582a <TIM_Base_SetConfig+0x9a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a29      	ldr	r2, [pc, #164]	; (80058b4 <TIM_Base_SetConfig+0x124>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d00b      	beq.n	800582a <TIM_Base_SetConfig+0x9a>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a28      	ldr	r2, [pc, #160]	; (80058b8 <TIM_Base_SetConfig+0x128>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d007      	beq.n	800582a <TIM_Base_SetConfig+0x9a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a27      	ldr	r2, [pc, #156]	; (80058bc <TIM_Base_SetConfig+0x12c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d003      	beq.n	800582a <TIM_Base_SetConfig+0x9a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a26      	ldr	r2, [pc, #152]	; (80058c0 <TIM_Base_SetConfig+0x130>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d108      	bne.n	800583c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4313      	orrs	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4a10      	ldr	r2, [pc, #64]	; (80058a4 <TIM_Base_SetConfig+0x114>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d00f      	beq.n	8005888 <TIM_Base_SetConfig+0xf8>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a12      	ldr	r2, [pc, #72]	; (80058b4 <TIM_Base_SetConfig+0x124>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d00b      	beq.n	8005888 <TIM_Base_SetConfig+0xf8>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	4a11      	ldr	r2, [pc, #68]	; (80058b8 <TIM_Base_SetConfig+0x128>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d007      	beq.n	8005888 <TIM_Base_SetConfig+0xf8>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	4a10      	ldr	r2, [pc, #64]	; (80058bc <TIM_Base_SetConfig+0x12c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d003      	beq.n	8005888 <TIM_Base_SetConfig+0xf8>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a0f      	ldr	r2, [pc, #60]	; (80058c0 <TIM_Base_SetConfig+0x130>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d103      	bne.n	8005890 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	615a      	str	r2, [r3, #20]
}
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40012c00 	.word	0x40012c00
 80058a8:	40000400 	.word	0x40000400
 80058ac:	40000800 	.word	0x40000800
 80058b0:	40000c00 	.word	0x40000c00
 80058b4:	40013400 	.word	0x40013400
 80058b8:	40014000 	.word	0x40014000
 80058bc:	40014400 	.word	0x40014400
 80058c0:	40014800 	.word	0x40014800

080058c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f023 0201 	bic.w	r2, r3, #1
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	699b      	ldr	r3, [r3, #24]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0303 	bic.w	r3, r3, #3
 80058fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f023 0302 	bic.w	r3, r3, #2
 8005910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	4313      	orrs	r3, r2
 800591a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a2c      	ldr	r2, [pc, #176]	; (80059d0 <TIM_OC1_SetConfig+0x10c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00f      	beq.n	8005944 <TIM_OC1_SetConfig+0x80>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a2b      	ldr	r2, [pc, #172]	; (80059d4 <TIM_OC1_SetConfig+0x110>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00b      	beq.n	8005944 <TIM_OC1_SetConfig+0x80>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a2a      	ldr	r2, [pc, #168]	; (80059d8 <TIM_OC1_SetConfig+0x114>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d007      	beq.n	8005944 <TIM_OC1_SetConfig+0x80>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a29      	ldr	r2, [pc, #164]	; (80059dc <TIM_OC1_SetConfig+0x118>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d003      	beq.n	8005944 <TIM_OC1_SetConfig+0x80>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a28      	ldr	r2, [pc, #160]	; (80059e0 <TIM_OC1_SetConfig+0x11c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d10c      	bne.n	800595e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	f023 0308 	bic.w	r3, r3, #8
 800594a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	697a      	ldr	r2, [r7, #20]
 8005952:	4313      	orrs	r3, r2
 8005954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	f023 0304 	bic.w	r3, r3, #4
 800595c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a1b      	ldr	r2, [pc, #108]	; (80059d0 <TIM_OC1_SetConfig+0x10c>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d00f      	beq.n	8005986 <TIM_OC1_SetConfig+0xc2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a1a      	ldr	r2, [pc, #104]	; (80059d4 <TIM_OC1_SetConfig+0x110>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d00b      	beq.n	8005986 <TIM_OC1_SetConfig+0xc2>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a19      	ldr	r2, [pc, #100]	; (80059d8 <TIM_OC1_SetConfig+0x114>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d007      	beq.n	8005986 <TIM_OC1_SetConfig+0xc2>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a18      	ldr	r2, [pc, #96]	; (80059dc <TIM_OC1_SetConfig+0x118>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d003      	beq.n	8005986 <TIM_OC1_SetConfig+0xc2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a17      	ldr	r2, [pc, #92]	; (80059e0 <TIM_OC1_SetConfig+0x11c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d111      	bne.n	80059aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800598c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	693a      	ldr	r2, [r7, #16]
 800599c:	4313      	orrs	r3, r2
 800599e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	621a      	str	r2, [r3, #32]
}
 80059c4:	bf00      	nop
 80059c6:	371c      	adds	r7, #28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr
 80059d0:	40012c00 	.word	0x40012c00
 80059d4:	40013400 	.word	0x40013400
 80059d8:	40014000 	.word	0x40014000
 80059dc:	40014400 	.word	0x40014400
 80059e0:	40014800 	.word	0x40014800

080059e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f023 0210 	bic.w	r2, r3, #16
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	021b      	lsls	r3, r3, #8
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	f023 0320 	bic.w	r3, r3, #32
 8005a32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	011b      	lsls	r3, r3, #4
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a28      	ldr	r2, [pc, #160]	; (8005ae4 <TIM_OC2_SetConfig+0x100>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_OC2_SetConfig+0x6c>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a27      	ldr	r2, [pc, #156]	; (8005ae8 <TIM_OC2_SetConfig+0x104>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d10d      	bne.n	8005a6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	011b      	lsls	r3, r3, #4
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <TIM_OC2_SetConfig+0x100>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d00f      	beq.n	8005a94 <TIM_OC2_SetConfig+0xb0>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a1c      	ldr	r2, [pc, #112]	; (8005ae8 <TIM_OC2_SetConfig+0x104>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d00b      	beq.n	8005a94 <TIM_OC2_SetConfig+0xb0>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a1b      	ldr	r2, [pc, #108]	; (8005aec <TIM_OC2_SetConfig+0x108>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d007      	beq.n	8005a94 <TIM_OC2_SetConfig+0xb0>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a1a      	ldr	r2, [pc, #104]	; (8005af0 <TIM_OC2_SetConfig+0x10c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d003      	beq.n	8005a94 <TIM_OC2_SetConfig+0xb0>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a19      	ldr	r2, [pc, #100]	; (8005af4 <TIM_OC2_SetConfig+0x110>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d113      	bne.n	8005abc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	693a      	ldr	r2, [r7, #16]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	699b      	ldr	r3, [r3, #24]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	621a      	str	r2, [r3, #32]
}
 8005ad6:	bf00      	nop
 8005ad8:	371c      	adds	r7, #28
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40012c00 	.word	0x40012c00
 8005ae8:	40013400 	.word	0x40013400
 8005aec:	40014000 	.word	0x40014000
 8005af0:	40014400 	.word	0x40014400
 8005af4:	40014800 	.word	0x40014800

08005af8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b087      	sub	sp, #28
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0303 	bic.w	r3, r3, #3
 8005b32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4a27      	ldr	r2, [pc, #156]	; (8005bf4 <TIM_OC3_SetConfig+0xfc>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d003      	beq.n	8005b62 <TIM_OC3_SetConfig+0x6a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a26      	ldr	r2, [pc, #152]	; (8005bf8 <TIM_OC3_SetConfig+0x100>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d10d      	bne.n	8005b7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	021b      	lsls	r3, r3, #8
 8005b70:	697a      	ldr	r2, [r7, #20]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a1c      	ldr	r2, [pc, #112]	; (8005bf4 <TIM_OC3_SetConfig+0xfc>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00f      	beq.n	8005ba6 <TIM_OC3_SetConfig+0xae>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a1b      	ldr	r2, [pc, #108]	; (8005bf8 <TIM_OC3_SetConfig+0x100>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d00b      	beq.n	8005ba6 <TIM_OC3_SetConfig+0xae>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a1a      	ldr	r2, [pc, #104]	; (8005bfc <TIM_OC3_SetConfig+0x104>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d007      	beq.n	8005ba6 <TIM_OC3_SetConfig+0xae>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a19      	ldr	r2, [pc, #100]	; (8005c00 <TIM_OC3_SetConfig+0x108>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d003      	beq.n	8005ba6 <TIM_OC3_SetConfig+0xae>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a18      	ldr	r2, [pc, #96]	; (8005c04 <TIM_OC3_SetConfig+0x10c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d113      	bne.n	8005bce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	011b      	lsls	r3, r3, #4
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	697a      	ldr	r2, [r7, #20]
 8005be6:	621a      	str	r2, [r3, #32]
}
 8005be8:	bf00      	nop
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	40012c00 	.word	0x40012c00
 8005bf8:	40013400 	.word	0x40013400
 8005bfc:	40014000 	.word	0x40014000
 8005c00:	40014400 	.word	0x40014400
 8005c04:	40014800 	.word	0x40014800

08005c08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b087      	sub	sp, #28
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	69db      	ldr	r3, [r3, #28]
 8005c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	021b      	lsls	r3, r3, #8
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	031b      	lsls	r3, r3, #12
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a18      	ldr	r2, [pc, #96]	; (8005cc8 <TIM_OC4_SetConfig+0xc0>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00f      	beq.n	8005c8c <TIM_OC4_SetConfig+0x84>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a17      	ldr	r2, [pc, #92]	; (8005ccc <TIM_OC4_SetConfig+0xc4>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00b      	beq.n	8005c8c <TIM_OC4_SetConfig+0x84>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a16      	ldr	r2, [pc, #88]	; (8005cd0 <TIM_OC4_SetConfig+0xc8>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d007      	beq.n	8005c8c <TIM_OC4_SetConfig+0x84>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a15      	ldr	r2, [pc, #84]	; (8005cd4 <TIM_OC4_SetConfig+0xcc>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d003      	beq.n	8005c8c <TIM_OC4_SetConfig+0x84>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a14      	ldr	r2, [pc, #80]	; (8005cd8 <TIM_OC4_SetConfig+0xd0>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d109      	bne.n	8005ca0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	019b      	lsls	r3, r3, #6
 8005c9a:	697a      	ldr	r2, [r7, #20]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	621a      	str	r2, [r3, #32]
}
 8005cba:	bf00      	nop
 8005cbc:	371c      	adds	r7, #28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40012c00 	.word	0x40012c00
 8005ccc:	40013400 	.word	0x40013400
 8005cd0:	40014000 	.word	0x40014000
 8005cd4:	40014400 	.word	0x40014400
 8005cd8:	40014800 	.word	0x40014800

08005cdc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	041b      	lsls	r3, r3, #16
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a17      	ldr	r2, [pc, #92]	; (8005d90 <TIM_OC5_SetConfig+0xb4>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00f      	beq.n	8005d56 <TIM_OC5_SetConfig+0x7a>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a16      	ldr	r2, [pc, #88]	; (8005d94 <TIM_OC5_SetConfig+0xb8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d00b      	beq.n	8005d56 <TIM_OC5_SetConfig+0x7a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a15      	ldr	r2, [pc, #84]	; (8005d98 <TIM_OC5_SetConfig+0xbc>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d007      	beq.n	8005d56 <TIM_OC5_SetConfig+0x7a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a14      	ldr	r2, [pc, #80]	; (8005d9c <TIM_OC5_SetConfig+0xc0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d003      	beq.n	8005d56 <TIM_OC5_SetConfig+0x7a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a13      	ldr	r2, [pc, #76]	; (8005da0 <TIM_OC5_SetConfig+0xc4>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d109      	bne.n	8005d6a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	695b      	ldr	r3, [r3, #20]
 8005d62:	021b      	lsls	r3, r3, #8
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	621a      	str	r2, [r3, #32]
}
 8005d84:	bf00      	nop
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40012c00 	.word	0x40012c00
 8005d94:	40013400 	.word	0x40013400
 8005d98:	40014000 	.word	0x40014000
 8005d9c:	40014400 	.word	0x40014400
 8005da0:	40014800 	.word	0x40014800

08005da4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	021b      	lsls	r3, r3, #8
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005dea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	051b      	lsls	r3, r3, #20
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a18      	ldr	r2, [pc, #96]	; (8005e5c <TIM_OC6_SetConfig+0xb8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00f      	beq.n	8005e20 <TIM_OC6_SetConfig+0x7c>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a17      	ldr	r2, [pc, #92]	; (8005e60 <TIM_OC6_SetConfig+0xbc>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d00b      	beq.n	8005e20 <TIM_OC6_SetConfig+0x7c>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a16      	ldr	r2, [pc, #88]	; (8005e64 <TIM_OC6_SetConfig+0xc0>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d007      	beq.n	8005e20 <TIM_OC6_SetConfig+0x7c>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a15      	ldr	r2, [pc, #84]	; (8005e68 <TIM_OC6_SetConfig+0xc4>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d003      	beq.n	8005e20 <TIM_OC6_SetConfig+0x7c>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a14      	ldr	r2, [pc, #80]	; (8005e6c <TIM_OC6_SetConfig+0xc8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d109      	bne.n	8005e34 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	029b      	lsls	r3, r3, #10
 8005e2e:	697a      	ldr	r2, [r7, #20]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	693a      	ldr	r2, [r7, #16]
 8005e4c:	621a      	str	r2, [r3, #32]
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop
 8005e5c:	40012c00 	.word	0x40012c00
 8005e60:	40013400 	.word	0x40013400
 8005e64:	40014000 	.word	0x40014000
 8005e68:	40014400 	.word	0x40014400
 8005e6c:	40014800 	.word	0x40014800

08005e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b087      	sub	sp, #28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6a1b      	ldr	r3, [r3, #32]
 8005e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f023 0201 	bic.w	r2, r3, #1
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	693a      	ldr	r2, [r7, #16]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f023 030a 	bic.w	r3, r3, #10
 8005eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005eae:	697a      	ldr	r2, [r7, #20]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	693a      	ldr	r2, [r7, #16]
 8005eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	621a      	str	r2, [r3, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	371c      	adds	r7, #28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b087      	sub	sp, #28
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	60f8      	str	r0, [r7, #12]
 8005ed6:	60b9      	str	r1, [r7, #8]
 8005ed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a1b      	ldr	r3, [r3, #32]
 8005ee4:	f023 0210 	bic.w	r2, r3, #16
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ef8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	031b      	lsls	r3, r3, #12
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	011b      	lsls	r3, r3, #4
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	693a      	ldr	r2, [r7, #16]
 8005f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	621a      	str	r2, [r3, #32]
}
 8005f22:	bf00      	nop
 8005f24:	371c      	adds	r7, #28
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f043 0307 	orr.w	r3, r3, #7
 8005f50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	609a      	str	r2, [r3, #8]
}
 8005f58:	bf00      	nop
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	021a      	lsls	r2, r3, #8
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	431a      	orrs	r2, r3
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	609a      	str	r2, [r3, #8]
}
 8005f98:	bf00      	nop
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b087      	sub	sp, #28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f003 031f 	and.w	r3, r3, #31
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6a1a      	ldr	r2, [r3, #32]
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	43db      	mvns	r3, r3
 8005fc6:	401a      	ands	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6a1a      	ldr	r2, [r3, #32]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	f003 031f 	and.w	r3, r3, #31
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fdc:	431a      	orrs	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	621a      	str	r2, [r3, #32]
}
 8005fe2:	bf00      	nop
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
	...

08005ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
 8005ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006004:	2302      	movs	r3, #2
 8006006:	e068      	b.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2202      	movs	r2, #2
 8006014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a2e      	ldr	r2, [pc, #184]	; (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d004      	beq.n	800603c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a2d      	ldr	r2, [pc, #180]	; (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d108      	bne.n	800604e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006042:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006054:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	4313      	orrs	r3, r2
 800605e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68fa      	ldr	r2, [r7, #12]
 8006066:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a1e      	ldr	r2, [pc, #120]	; (80060e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d01d      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800607a:	d018      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a1b      	ldr	r2, [pc, #108]	; (80060f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d013      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a1a      	ldr	r2, [pc, #104]	; (80060f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00e      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a18      	ldr	r2, [pc, #96]	; (80060f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d009      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a13      	ldr	r2, [pc, #76]	; (80060ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d004      	beq.n	80060ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a14      	ldr	r2, [pc, #80]	; (80060fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d10c      	bne.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	4313      	orrs	r3, r2
 80060be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	40012c00 	.word	0x40012c00
 80060ec:	40013400 	.word	0x40013400
 80060f0:	40000400 	.word	0x40000400
 80060f4:	40000800 	.word	0x40000800
 80060f8:	40000c00 	.word	0x40000c00
 80060fc:	40014000 	.word	0x40014000

08006100 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006100:	b480      	push	{r7}
 8006102:	b085      	sub	sp, #20
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006118:	2302      	movs	r3, #2
 800611a:	e065      	b.n	80061e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	4313      	orrs	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4313      	orrs	r3, r2
 800615a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	695b      	ldr	r3, [r3, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	4313      	orrs	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	041b      	lsls	r3, r3, #16
 8006192:	4313      	orrs	r3, r2
 8006194:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a16      	ldr	r2, [pc, #88]	; (80061f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d004      	beq.n	80061aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a14      	ldr	r2, [pc, #80]	; (80061f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d115      	bne.n	80061d6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	051b      	lsls	r3, r3, #20
 80061b6:	4313      	orrs	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	69db      	ldr	r3, [r3, #28]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3714      	adds	r7, #20
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr
 80061f4:	40012c00 	.word	0x40012c00
 80061f8:	40013400 	.word	0x40013400

080061fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e040      	b.n	8006290 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d106      	bne.n	8006224 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7fb fc4a 	bl	8001ab8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2224      	movs	r2, #36	; 0x24
 8006228:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0201 	bic.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 fc34 	bl	8006ab0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f979 	bl	8006540 <UART_SetConfig>
 800624e:	4603      	mov	r3, r0
 8006250:	2b01      	cmp	r3, #1
 8006252:	d101      	bne.n	8006258 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	e01b      	b.n	8006290 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685a      	ldr	r2, [r3, #4]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	689a      	ldr	r2, [r3, #8]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006276:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f042 0201 	orr.w	r2, r2, #1
 8006286:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 fcb3 	bl	8006bf4 <UART_CheckIdleState>
 800628e:	4603      	mov	r3, r0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b08a      	sub	sp, #40	; 0x28
 800629c:	af02      	add	r7, sp, #8
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	603b      	str	r3, [r7, #0]
 80062a4:	4613      	mov	r3, r2
 80062a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d178      	bne.n	80063a2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_UART_Transmit+0x24>
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e071      	b.n	80063a4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2221      	movs	r2, #33	; 0x21
 80062cc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062ce:	f7fb fde3 	bl	8001e98 <HAL_GetTick>
 80062d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	88fa      	ldrh	r2, [r7, #6]
 80062d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	88fa      	ldrh	r2, [r7, #6]
 80062e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ec:	d108      	bne.n	8006300 <HAL_UART_Transmit+0x68>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d104      	bne.n	8006300 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	61bb      	str	r3, [r7, #24]
 80062fe:	e003      	b.n	8006308 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006304:	2300      	movs	r3, #0
 8006306:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006308:	e030      	b.n	800636c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2200      	movs	r2, #0
 8006312:	2180      	movs	r1, #128	; 0x80
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 fd15 	bl	8006d44 <UART_WaitOnFlagUntilTimeout>
 800631a:	4603      	mov	r3, r0
 800631c:	2b00      	cmp	r3, #0
 800631e:	d004      	beq.n	800632a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2220      	movs	r2, #32
 8006324:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e03c      	b.n	80063a4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10b      	bne.n	8006348 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	881a      	ldrh	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800633c:	b292      	uxth	r2, r2
 800633e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	3302      	adds	r3, #2
 8006344:	61bb      	str	r3, [r7, #24]
 8006346:	e008      	b.n	800635a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	781a      	ldrb	r2, [r3, #0]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	b292      	uxth	r2, r2
 8006352:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	3301      	adds	r3, #1
 8006358:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006360:	b29b      	uxth	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006372:	b29b      	uxth	r3, r3
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1c8      	bne.n	800630a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	2200      	movs	r2, #0
 8006380:	2140      	movs	r1, #64	; 0x40
 8006382:	68f8      	ldr	r0, [r7, #12]
 8006384:	f000 fcde 	bl	8006d44 <UART_WaitOnFlagUntilTimeout>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d004      	beq.n	8006398 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2220      	movs	r2, #32
 8006392:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e005      	b.n	80063a4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2220      	movs	r2, #32
 800639c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800639e:	2300      	movs	r3, #0
 80063a0:	e000      	b.n	80063a4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80063a2:	2302      	movs	r3, #2
  }
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3720      	adds	r7, #32
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}

080063ac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08a      	sub	sp, #40	; 0x28
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	603b      	str	r3, [r7, #0]
 80063b8:	4613      	mov	r3, r2
 80063ba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063c2:	2b20      	cmp	r3, #32
 80063c4:	f040 80b6 	bne.w	8006534 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d002      	beq.n	80063d4 <HAL_UART_Receive+0x28>
 80063ce:	88fb      	ldrh	r3, [r7, #6]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e0ae      	b.n	8006536 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2222      	movs	r2, #34	; 0x22
 80063e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063ee:	f7fb fd53 	bl	8001e98 <HAL_GetTick>
 80063f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	88fa      	ldrh	r2, [r7, #6]
 80063f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	88fa      	ldrh	r2, [r7, #6]
 8006400:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640c:	d10e      	bne.n	800642c <HAL_UART_Receive+0x80>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d105      	bne.n	8006422 <HAL_UART_Receive+0x76>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f240 12ff 	movw	r2, #511	; 0x1ff
 800641c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006420:	e02d      	b.n	800647e <HAL_UART_Receive+0xd2>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	22ff      	movs	r2, #255	; 0xff
 8006426:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800642a:	e028      	b.n	800647e <HAL_UART_Receive+0xd2>
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10d      	bne.n	8006450 <HAL_UART_Receive+0xa4>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d104      	bne.n	8006446 <HAL_UART_Receive+0x9a>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	22ff      	movs	r2, #255	; 0xff
 8006440:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006444:	e01b      	b.n	800647e <HAL_UART_Receive+0xd2>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	227f      	movs	r2, #127	; 0x7f
 800644a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800644e:	e016      	b.n	800647e <HAL_UART_Receive+0xd2>
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006458:	d10d      	bne.n	8006476 <HAL_UART_Receive+0xca>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d104      	bne.n	800646c <HAL_UART_Receive+0xc0>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	227f      	movs	r2, #127	; 0x7f
 8006466:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800646a:	e008      	b.n	800647e <HAL_UART_Receive+0xd2>
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	223f      	movs	r2, #63	; 0x3f
 8006470:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006474:	e003      	b.n	800647e <HAL_UART_Receive+0xd2>
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006484:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800648e:	d108      	bne.n	80064a2 <HAL_UART_Receive+0xf6>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d104      	bne.n	80064a2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006498:	2300      	movs	r3, #0
 800649a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	61bb      	str	r3, [r7, #24]
 80064a0:	e003      	b.n	80064aa <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064a6:	2300      	movs	r3, #0
 80064a8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80064aa:	e037      	b.n	800651c <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2200      	movs	r2, #0
 80064b4:	2120      	movs	r1, #32
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f000 fc44 	bl	8006d44 <UART_WaitOnFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d005      	beq.n	80064ce <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e033      	b.n	8006536 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10c      	bne.n	80064ee <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80064da:	b29a      	uxth	r2, r3
 80064dc:	8a7b      	ldrh	r3, [r7, #18]
 80064de:	4013      	ands	r3, r2
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	3302      	adds	r3, #2
 80064ea:	61bb      	str	r3, [r7, #24]
 80064ec:	e00d      	b.n	800650a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80064f4:	b29b      	uxth	r3, r3
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	8a7b      	ldrh	r3, [r7, #18]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	4013      	ands	r3, r2
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	3301      	adds	r3, #1
 8006508:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006510:	b29b      	uxth	r3, r3
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006522:	b29b      	uxth	r3, r3
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1c1      	bne.n	80064ac <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2220      	movs	r2, #32
 800652c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	e000      	b.n	8006536 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006534:	2302      	movs	r3, #2
  }
}
 8006536:	4618      	mov	r0, r3
 8006538:	3720      	adds	r7, #32
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006544:	b08a      	sub	sp, #40	; 0x28
 8006546:	af00      	add	r7, sp, #0
 8006548:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	431a      	orrs	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	431a      	orrs	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	69db      	ldr	r3, [r3, #28]
 8006564:	4313      	orrs	r3, r2
 8006566:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	4ba4      	ldr	r3, [pc, #656]	; (8006800 <UART_SetConfig+0x2c0>)
 8006570:	4013      	ands	r3, r2
 8006572:	68fa      	ldr	r2, [r7, #12]
 8006574:	6812      	ldr	r2, [r2, #0]
 8006576:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006578:	430b      	orrs	r3, r1
 800657a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	68da      	ldr	r2, [r3, #12]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a99      	ldr	r2, [pc, #612]	; (8006804 <UART_SetConfig+0x2c4>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d004      	beq.n	80065ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065a8:	4313      	orrs	r3, r2
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065bc:	430a      	orrs	r2, r1
 80065be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a90      	ldr	r2, [pc, #576]	; (8006808 <UART_SetConfig+0x2c8>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d126      	bne.n	8006618 <UART_SetConfig+0xd8>
 80065ca:	4b90      	ldr	r3, [pc, #576]	; (800680c <UART_SetConfig+0x2cc>)
 80065cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065d0:	f003 0303 	and.w	r3, r3, #3
 80065d4:	2b03      	cmp	r3, #3
 80065d6:	d81b      	bhi.n	8006610 <UART_SetConfig+0xd0>
 80065d8:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <UART_SetConfig+0xa0>)
 80065da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065de:	bf00      	nop
 80065e0:	080065f1 	.word	0x080065f1
 80065e4:	08006601 	.word	0x08006601
 80065e8:	080065f9 	.word	0x080065f9
 80065ec:	08006609 	.word	0x08006609
 80065f0:	2301      	movs	r3, #1
 80065f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065f6:	e116      	b.n	8006826 <UART_SetConfig+0x2e6>
 80065f8:	2302      	movs	r3, #2
 80065fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80065fe:	e112      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006600:	2304      	movs	r3, #4
 8006602:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006606:	e10e      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006608:	2308      	movs	r3, #8
 800660a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800660e:	e10a      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006610:	2310      	movs	r3, #16
 8006612:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006616:	e106      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a7c      	ldr	r2, [pc, #496]	; (8006810 <UART_SetConfig+0x2d0>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d138      	bne.n	8006694 <UART_SetConfig+0x154>
 8006622:	4b7a      	ldr	r3, [pc, #488]	; (800680c <UART_SetConfig+0x2cc>)
 8006624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006628:	f003 030c 	and.w	r3, r3, #12
 800662c:	2b0c      	cmp	r3, #12
 800662e:	d82d      	bhi.n	800668c <UART_SetConfig+0x14c>
 8006630:	a201      	add	r2, pc, #4	; (adr r2, 8006638 <UART_SetConfig+0xf8>)
 8006632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006636:	bf00      	nop
 8006638:	0800666d 	.word	0x0800666d
 800663c:	0800668d 	.word	0x0800668d
 8006640:	0800668d 	.word	0x0800668d
 8006644:	0800668d 	.word	0x0800668d
 8006648:	0800667d 	.word	0x0800667d
 800664c:	0800668d 	.word	0x0800668d
 8006650:	0800668d 	.word	0x0800668d
 8006654:	0800668d 	.word	0x0800668d
 8006658:	08006675 	.word	0x08006675
 800665c:	0800668d 	.word	0x0800668d
 8006660:	0800668d 	.word	0x0800668d
 8006664:	0800668d 	.word	0x0800668d
 8006668:	08006685 	.word	0x08006685
 800666c:	2300      	movs	r3, #0
 800666e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006672:	e0d8      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006674:	2302      	movs	r3, #2
 8006676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800667a:	e0d4      	b.n	8006826 <UART_SetConfig+0x2e6>
 800667c:	2304      	movs	r3, #4
 800667e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006682:	e0d0      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006684:	2308      	movs	r3, #8
 8006686:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800668a:	e0cc      	b.n	8006826 <UART_SetConfig+0x2e6>
 800668c:	2310      	movs	r3, #16
 800668e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006692:	e0c8      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a5e      	ldr	r2, [pc, #376]	; (8006814 <UART_SetConfig+0x2d4>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d125      	bne.n	80066ea <UART_SetConfig+0x1aa>
 800669e:	4b5b      	ldr	r3, [pc, #364]	; (800680c <UART_SetConfig+0x2cc>)
 80066a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066a8:	2b30      	cmp	r3, #48	; 0x30
 80066aa:	d016      	beq.n	80066da <UART_SetConfig+0x19a>
 80066ac:	2b30      	cmp	r3, #48	; 0x30
 80066ae:	d818      	bhi.n	80066e2 <UART_SetConfig+0x1a2>
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d00a      	beq.n	80066ca <UART_SetConfig+0x18a>
 80066b4:	2b20      	cmp	r3, #32
 80066b6:	d814      	bhi.n	80066e2 <UART_SetConfig+0x1a2>
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <UART_SetConfig+0x182>
 80066bc:	2b10      	cmp	r3, #16
 80066be:	d008      	beq.n	80066d2 <UART_SetConfig+0x192>
 80066c0:	e00f      	b.n	80066e2 <UART_SetConfig+0x1a2>
 80066c2:	2300      	movs	r3, #0
 80066c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c8:	e0ad      	b.n	8006826 <UART_SetConfig+0x2e6>
 80066ca:	2302      	movs	r3, #2
 80066cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d0:	e0a9      	b.n	8006826 <UART_SetConfig+0x2e6>
 80066d2:	2304      	movs	r3, #4
 80066d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d8:	e0a5      	b.n	8006826 <UART_SetConfig+0x2e6>
 80066da:	2308      	movs	r3, #8
 80066dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066e0:	e0a1      	b.n	8006826 <UART_SetConfig+0x2e6>
 80066e2:	2310      	movs	r3, #16
 80066e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066e8:	e09d      	b.n	8006826 <UART_SetConfig+0x2e6>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a4a      	ldr	r2, [pc, #296]	; (8006818 <UART_SetConfig+0x2d8>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d125      	bne.n	8006740 <UART_SetConfig+0x200>
 80066f4:	4b45      	ldr	r3, [pc, #276]	; (800680c <UART_SetConfig+0x2cc>)
 80066f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006700:	d016      	beq.n	8006730 <UART_SetConfig+0x1f0>
 8006702:	2bc0      	cmp	r3, #192	; 0xc0
 8006704:	d818      	bhi.n	8006738 <UART_SetConfig+0x1f8>
 8006706:	2b80      	cmp	r3, #128	; 0x80
 8006708:	d00a      	beq.n	8006720 <UART_SetConfig+0x1e0>
 800670a:	2b80      	cmp	r3, #128	; 0x80
 800670c:	d814      	bhi.n	8006738 <UART_SetConfig+0x1f8>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <UART_SetConfig+0x1d8>
 8006712:	2b40      	cmp	r3, #64	; 0x40
 8006714:	d008      	beq.n	8006728 <UART_SetConfig+0x1e8>
 8006716:	e00f      	b.n	8006738 <UART_SetConfig+0x1f8>
 8006718:	2300      	movs	r3, #0
 800671a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671e:	e082      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006720:	2302      	movs	r3, #2
 8006722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006726:	e07e      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006728:	2304      	movs	r3, #4
 800672a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672e:	e07a      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006730:	2308      	movs	r3, #8
 8006732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006736:	e076      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006738:	2310      	movs	r3, #16
 800673a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673e:	e072      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a35      	ldr	r2, [pc, #212]	; (800681c <UART_SetConfig+0x2dc>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d12a      	bne.n	80067a0 <UART_SetConfig+0x260>
 800674a:	4b30      	ldr	r3, [pc, #192]	; (800680c <UART_SetConfig+0x2cc>)
 800674c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006750:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006754:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006758:	d01a      	beq.n	8006790 <UART_SetConfig+0x250>
 800675a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800675e:	d81b      	bhi.n	8006798 <UART_SetConfig+0x258>
 8006760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006764:	d00c      	beq.n	8006780 <UART_SetConfig+0x240>
 8006766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800676a:	d815      	bhi.n	8006798 <UART_SetConfig+0x258>
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <UART_SetConfig+0x238>
 8006770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006774:	d008      	beq.n	8006788 <UART_SetConfig+0x248>
 8006776:	e00f      	b.n	8006798 <UART_SetConfig+0x258>
 8006778:	2300      	movs	r3, #0
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677e:	e052      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006780:	2302      	movs	r3, #2
 8006782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006786:	e04e      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006788:	2304      	movs	r3, #4
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678e:	e04a      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006790:	2308      	movs	r3, #8
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006796:	e046      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006798:	2310      	movs	r3, #16
 800679a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679e:	e042      	b.n	8006826 <UART_SetConfig+0x2e6>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a17      	ldr	r2, [pc, #92]	; (8006804 <UART_SetConfig+0x2c4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d13a      	bne.n	8006820 <UART_SetConfig+0x2e0>
 80067aa:	4b18      	ldr	r3, [pc, #96]	; (800680c <UART_SetConfig+0x2cc>)
 80067ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067b8:	d01a      	beq.n	80067f0 <UART_SetConfig+0x2b0>
 80067ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067be:	d81b      	bhi.n	80067f8 <UART_SetConfig+0x2b8>
 80067c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c4:	d00c      	beq.n	80067e0 <UART_SetConfig+0x2a0>
 80067c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ca:	d815      	bhi.n	80067f8 <UART_SetConfig+0x2b8>
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <UART_SetConfig+0x298>
 80067d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d4:	d008      	beq.n	80067e8 <UART_SetConfig+0x2a8>
 80067d6:	e00f      	b.n	80067f8 <UART_SetConfig+0x2b8>
 80067d8:	2300      	movs	r3, #0
 80067da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067de:	e022      	b.n	8006826 <UART_SetConfig+0x2e6>
 80067e0:	2302      	movs	r3, #2
 80067e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e6:	e01e      	b.n	8006826 <UART_SetConfig+0x2e6>
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ee:	e01a      	b.n	8006826 <UART_SetConfig+0x2e6>
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f6:	e016      	b.n	8006826 <UART_SetConfig+0x2e6>
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fe:	e012      	b.n	8006826 <UART_SetConfig+0x2e6>
 8006800:	efff69f3 	.word	0xefff69f3
 8006804:	40008000 	.word	0x40008000
 8006808:	40013800 	.word	0x40013800
 800680c:	40021000 	.word	0x40021000
 8006810:	40004400 	.word	0x40004400
 8006814:	40004800 	.word	0x40004800
 8006818:	40004c00 	.word	0x40004c00
 800681c:	40005000 	.word	0x40005000
 8006820:	2310      	movs	r3, #16
 8006822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a9f      	ldr	r2, [pc, #636]	; (8006aa8 <UART_SetConfig+0x568>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d17a      	bne.n	8006926 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006834:	2b08      	cmp	r3, #8
 8006836:	d824      	bhi.n	8006882 <UART_SetConfig+0x342>
 8006838:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <UART_SetConfig+0x300>)
 800683a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800683e:	bf00      	nop
 8006840:	08006865 	.word	0x08006865
 8006844:	08006883 	.word	0x08006883
 8006848:	0800686d 	.word	0x0800686d
 800684c:	08006883 	.word	0x08006883
 8006850:	08006873 	.word	0x08006873
 8006854:	08006883 	.word	0x08006883
 8006858:	08006883 	.word	0x08006883
 800685c:	08006883 	.word	0x08006883
 8006860:	0800687b 	.word	0x0800687b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006864:	f7fd fdde 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8006868:	61f8      	str	r0, [r7, #28]
        break;
 800686a:	e010      	b.n	800688e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800686c:	4b8f      	ldr	r3, [pc, #572]	; (8006aac <UART_SetConfig+0x56c>)
 800686e:	61fb      	str	r3, [r7, #28]
        break;
 8006870:	e00d      	b.n	800688e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006872:	f7fd fd3f 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 8006876:	61f8      	str	r0, [r7, #28]
        break;
 8006878:	e009      	b.n	800688e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800687a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800687e:	61fb      	str	r3, [r7, #28]
        break;
 8006880:	e005      	b.n	800688e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006882:	2300      	movs	r3, #0
 8006884:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800688c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 80fb 	beq.w	8006a8c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	4613      	mov	r3, r2
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	4413      	add	r3, r2
 80068a0:	69fa      	ldr	r2, [r7, #28]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d305      	bcc.n	80068b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068ac:	69fa      	ldr	r2, [r7, #28]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d903      	bls.n	80068ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80068b8:	e0e8      	b.n	8006a8c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	2200      	movs	r2, #0
 80068be:	461c      	mov	r4, r3
 80068c0:	4615      	mov	r5, r2
 80068c2:	f04f 0200 	mov.w	r2, #0
 80068c6:	f04f 0300 	mov.w	r3, #0
 80068ca:	022b      	lsls	r3, r5, #8
 80068cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80068d0:	0222      	lsls	r2, r4, #8
 80068d2:	68f9      	ldr	r1, [r7, #12]
 80068d4:	6849      	ldr	r1, [r1, #4]
 80068d6:	0849      	lsrs	r1, r1, #1
 80068d8:	2000      	movs	r0, #0
 80068da:	4688      	mov	r8, r1
 80068dc:	4681      	mov	r9, r0
 80068de:	eb12 0a08 	adds.w	sl, r2, r8
 80068e2:	eb43 0b09 	adc.w	fp, r3, r9
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	603b      	str	r3, [r7, #0]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068f4:	4650      	mov	r0, sl
 80068f6:	4659      	mov	r1, fp
 80068f8:	f7fa f8c0 	bl	8000a7c <__aeabi_uldivmod>
 80068fc:	4602      	mov	r2, r0
 80068fe:	460b      	mov	r3, r1
 8006900:	4613      	mov	r3, r2
 8006902:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800690a:	d308      	bcc.n	800691e <UART_SetConfig+0x3de>
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006912:	d204      	bcs.n	800691e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	69ba      	ldr	r2, [r7, #24]
 800691a:	60da      	str	r2, [r3, #12]
 800691c:	e0b6      	b.n	8006a8c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006924:	e0b2      	b.n	8006a8c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	69db      	ldr	r3, [r3, #28]
 800692a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800692e:	d15e      	bne.n	80069ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006930:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006934:	2b08      	cmp	r3, #8
 8006936:	d828      	bhi.n	800698a <UART_SetConfig+0x44a>
 8006938:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <UART_SetConfig+0x400>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	08006965 	.word	0x08006965
 8006944:	0800696d 	.word	0x0800696d
 8006948:	08006975 	.word	0x08006975
 800694c:	0800698b 	.word	0x0800698b
 8006950:	0800697b 	.word	0x0800697b
 8006954:	0800698b 	.word	0x0800698b
 8006958:	0800698b 	.word	0x0800698b
 800695c:	0800698b 	.word	0x0800698b
 8006960:	08006983 	.word	0x08006983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006964:	f7fd fd5e 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8006968:	61f8      	str	r0, [r7, #28]
        break;
 800696a:	e014      	b.n	8006996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800696c:	f7fd fd70 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 8006970:	61f8      	str	r0, [r7, #28]
        break;
 8006972:	e010      	b.n	8006996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006974:	4b4d      	ldr	r3, [pc, #308]	; (8006aac <UART_SetConfig+0x56c>)
 8006976:	61fb      	str	r3, [r7, #28]
        break;
 8006978:	e00d      	b.n	8006996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800697a:	f7fd fcbb 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 800697e:	61f8      	str	r0, [r7, #28]
        break;
 8006980:	e009      	b.n	8006996 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006986:	61fb      	str	r3, [r7, #28]
        break;
 8006988:	e005      	b.n	8006996 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d077      	beq.n	8006a8c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	005a      	lsls	r2, r3, #1
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	085b      	lsrs	r3, r3, #1
 80069a6:	441a      	add	r2, r3
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80069b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	2b0f      	cmp	r3, #15
 80069b6:	d916      	bls.n	80069e6 <UART_SetConfig+0x4a6>
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069be:	d212      	bcs.n	80069e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	f023 030f 	bic.w	r3, r3, #15
 80069c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	085b      	lsrs	r3, r3, #1
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	f003 0307 	and.w	r3, r3, #7
 80069d4:	b29a      	uxth	r2, r3
 80069d6:	8afb      	ldrh	r3, [r7, #22]
 80069d8:	4313      	orrs	r3, r2
 80069da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	8afa      	ldrh	r2, [r7, #22]
 80069e2:	60da      	str	r2, [r3, #12]
 80069e4:	e052      	b.n	8006a8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069ec:	e04e      	b.n	8006a8c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069f2:	2b08      	cmp	r3, #8
 80069f4:	d827      	bhi.n	8006a46 <UART_SetConfig+0x506>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <UART_SetConfig+0x4bc>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a21 	.word	0x08006a21
 8006a00:	08006a29 	.word	0x08006a29
 8006a04:	08006a31 	.word	0x08006a31
 8006a08:	08006a47 	.word	0x08006a47
 8006a0c:	08006a37 	.word	0x08006a37
 8006a10:	08006a47 	.word	0x08006a47
 8006a14:	08006a47 	.word	0x08006a47
 8006a18:	08006a47 	.word	0x08006a47
 8006a1c:	08006a3f 	.word	0x08006a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a20:	f7fd fd00 	bl	8004424 <HAL_RCC_GetPCLK1Freq>
 8006a24:	61f8      	str	r0, [r7, #28]
        break;
 8006a26:	e014      	b.n	8006a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a28:	f7fd fd12 	bl	8004450 <HAL_RCC_GetPCLK2Freq>
 8006a2c:	61f8      	str	r0, [r7, #28]
        break;
 8006a2e:	e010      	b.n	8006a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a30:	4b1e      	ldr	r3, [pc, #120]	; (8006aac <UART_SetConfig+0x56c>)
 8006a32:	61fb      	str	r3, [r7, #28]
        break;
 8006a34:	e00d      	b.n	8006a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a36:	f7fd fc5d 	bl	80042f4 <HAL_RCC_GetSysClockFreq>
 8006a3a:	61f8      	str	r0, [r7, #28]
        break;
 8006a3c:	e009      	b.n	8006a52 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a42:	61fb      	str	r3, [r7, #28]
        break;
 8006a44:	e005      	b.n	8006a52 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a50:	bf00      	nop
    }

    if (pclk != 0U)
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d019      	beq.n	8006a8c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	085a      	lsrs	r2, r3, #1
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	441a      	add	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	2b0f      	cmp	r3, #15
 8006a70:	d909      	bls.n	8006a86 <UART_SetConfig+0x546>
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a78:	d205      	bcs.n	8006a86 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60da      	str	r2, [r3, #12]
 8006a84:	e002      	b.n	8006a8c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006a98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3728      	adds	r7, #40	; 0x28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aa6:	bf00      	nop
 8006aa8:	40008000 	.word	0x40008000
 8006aac:	00f42400 	.word	0x00f42400

08006ab0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	f003 0308 	and.w	r3, r3, #8
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d00a      	beq.n	8006ada <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	430a      	orrs	r2, r1
 8006ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00a      	beq.n	8006afc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	430a      	orrs	r2, r1
 8006afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00a      	beq.n	8006b1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	f003 0310 	and.w	r3, r3, #16
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d01a      	beq.n	8006bc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006baa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bae:	d10a      	bne.n	8006bc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00a      	beq.n	8006be8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	605a      	str	r2, [r3, #4]
  }
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b098      	sub	sp, #96	; 0x60
 8006bf8:	af02      	add	r7, sp, #8
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c04:	f7fb f948 	bl	8001e98 <HAL_GetTick>
 8006c08:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d12e      	bne.n	8006c76 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c20:	2200      	movs	r2, #0
 8006c22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f88c 	bl	8006d44 <UART_WaitOnFlagUntilTimeout>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d021      	beq.n	8006c76 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c3a:	e853 3f00 	ldrex	r3, [r3]
 8006c3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c46:	653b      	str	r3, [r7, #80]	; 0x50
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c50:	647b      	str	r3, [r7, #68]	; 0x44
 8006c52:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c58:	e841 2300 	strex	r3, r2, [r1]
 8006c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e6      	bne.n	8006c32 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e062      	b.n	8006d3c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d149      	bne.n	8006d18 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f856 	bl	8006d44 <UART_WaitOnFlagUntilTimeout>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d03c      	beq.n	8006d18 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	e853 3f00 	ldrex	r3, [r3]
 8006caa:	623b      	str	r3, [r7, #32]
   return(result);
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8006cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e6      	bne.n	8006c9e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 0301 	bic.w	r3, r3, #1
 8006ce6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3308      	adds	r3, #8
 8006cee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cf0:	61fa      	str	r2, [r7, #28]
 8006cf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	69b9      	ldr	r1, [r7, #24]
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	e841 2300 	strex	r3, r2, [r1]
 8006cfc:	617b      	str	r3, [r7, #20]
   return(result);
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e5      	bne.n	8006cd0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2220      	movs	r2, #32
 8006d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d14:	2303      	movs	r3, #3
 8006d16:	e011      	b.n	8006d3c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2220      	movs	r2, #32
 8006d1c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2220      	movs	r2, #32
 8006d22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3758      	adds	r7, #88	; 0x58
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	4613      	mov	r3, r2
 8006d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d54:	e049      	b.n	8006dea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d5c:	d045      	beq.n	8006dea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d5e:	f7fb f89b 	bl	8001e98 <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	69ba      	ldr	r2, [r7, #24]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d302      	bcc.n	8006d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d101      	bne.n	8006d78 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e048      	b.n	8006e0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0304 	and.w	r3, r3, #4
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d031      	beq.n	8006dea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69db      	ldr	r3, [r3, #28]
 8006d8c:	f003 0308 	and.w	r3, r3, #8
 8006d90:	2b08      	cmp	r3, #8
 8006d92:	d110      	bne.n	8006db6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2208      	movs	r2, #8
 8006d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 f838 	bl	8006e12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2208      	movs	r2, #8
 8006da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e029      	b.n	8006e0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dc0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dc4:	d111      	bne.n	8006dea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f000 f81e 	bl	8006e12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006de6:	2303      	movs	r3, #3
 8006de8:	e00f      	b.n	8006e0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69da      	ldr	r2, [r3, #28]
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	4013      	ands	r3, r2
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	bf0c      	ite	eq
 8006dfa:	2301      	moveq	r3, #1
 8006dfc:	2300      	movne	r3, #0
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	461a      	mov	r2, r3
 8006e02:	79fb      	ldrb	r3, [r7, #7]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d0a6      	beq.n	8006d56 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e12:	b480      	push	{r7}
 8006e14:	b095      	sub	sp, #84	; 0x54
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e22:	e853 3f00 	ldrex	r3, [r3]
 8006e26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	461a      	mov	r2, r3
 8006e36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e38:	643b      	str	r3, [r7, #64]	; 0x40
 8006e3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e40:	e841 2300 	strex	r3, r2, [r1]
 8006e44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d1e6      	bne.n	8006e1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3308      	adds	r3, #8
 8006e52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e5c:	69fb      	ldr	r3, [r7, #28]
 8006e5e:	f023 0301 	bic.w	r3, r3, #1
 8006e62:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3308      	adds	r3, #8
 8006e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e5      	bne.n	8006e4c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d118      	bne.n	8006eba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f023 0310 	bic.w	r3, r3, #16
 8006e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ea6:	61bb      	str	r3, [r7, #24]
 8006ea8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	6979      	ldr	r1, [r7, #20]
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e6      	bne.n	8006e88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2220      	movs	r2, #32
 8006ebe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006ece:	bf00      	nop
 8006ed0:	3754      	adds	r7, #84	; 0x54
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
	...

08006edc <__NVIC_SetPriority>:
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	6039      	str	r1, [r7, #0]
 8006ee6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	db0a      	blt.n	8006f06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	b2da      	uxtb	r2, r3
 8006ef4:	490c      	ldr	r1, [pc, #48]	; (8006f28 <__NVIC_SetPriority+0x4c>)
 8006ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006efa:	0112      	lsls	r2, r2, #4
 8006efc:	b2d2      	uxtb	r2, r2
 8006efe:	440b      	add	r3, r1
 8006f00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f04:	e00a      	b.n	8006f1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	4908      	ldr	r1, [pc, #32]	; (8006f2c <__NVIC_SetPriority+0x50>)
 8006f0c:	79fb      	ldrb	r3, [r7, #7]
 8006f0e:	f003 030f 	and.w	r3, r3, #15
 8006f12:	3b04      	subs	r3, #4
 8006f14:	0112      	lsls	r2, r2, #4
 8006f16:	b2d2      	uxtb	r2, r2
 8006f18:	440b      	add	r3, r1
 8006f1a:	761a      	strb	r2, [r3, #24]
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr
 8006f28:	e000e100 	.word	0xe000e100
 8006f2c:	e000ed00 	.word	0xe000ed00

08006f30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006f34:	2100      	movs	r1, #0
 8006f36:	f06f 0004 	mvn.w	r0, #4
 8006f3a:	f7ff ffcf 	bl	8006edc <__NVIC_SetPriority>
#endif
}
 8006f3e:	bf00      	nop
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f4a:	f3ef 8305 	mrs	r3, IPSR
 8006f4e:	603b      	str	r3, [r7, #0]
  return(result);
 8006f50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d003      	beq.n	8006f5e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006f56:	f06f 0305 	mvn.w	r3, #5
 8006f5a:	607b      	str	r3, [r7, #4]
 8006f5c:	e00c      	b.n	8006f78 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006f5e:	4b0a      	ldr	r3, [pc, #40]	; (8006f88 <osKernelInitialize+0x44>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d105      	bne.n	8006f72 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006f66:	4b08      	ldr	r3, [pc, #32]	; (8006f88 <osKernelInitialize+0x44>)
 8006f68:	2201      	movs	r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	607b      	str	r3, [r7, #4]
 8006f70:	e002      	b.n	8006f78 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006f72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f78:	687b      	ldr	r3, [r7, #4]
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	20000230 	.word	0x20000230

08006f8c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f92:	f3ef 8305 	mrs	r3, IPSR
 8006f96:	603b      	str	r3, [r7, #0]
  return(result);
 8006f98:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d003      	beq.n	8006fa6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006f9e:	f06f 0305 	mvn.w	r3, #5
 8006fa2:	607b      	str	r3, [r7, #4]
 8006fa4:	e010      	b.n	8006fc8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006fa6:	4b0b      	ldr	r3, [pc, #44]	; (8006fd4 <osKernelStart+0x48>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d109      	bne.n	8006fc2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006fae:	f7ff ffbf 	bl	8006f30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006fb2:	4b08      	ldr	r3, [pc, #32]	; (8006fd4 <osKernelStart+0x48>)
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006fb8:	f001 fb88 	bl	80086cc <vTaskStartScheduler>
      stat = osOK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	607b      	str	r3, [r7, #4]
 8006fc0:	e002      	b.n	8006fc8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fc6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006fc8:	687b      	ldr	r3, [r7, #4]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20000230 	.word	0x20000230

08006fd8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b08e      	sub	sp, #56	; 0x38
 8006fdc:	af04      	add	r7, sp, #16
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fe8:	f3ef 8305 	mrs	r3, IPSR
 8006fec:	617b      	str	r3, [r7, #20]
  return(result);
 8006fee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d17e      	bne.n	80070f2 <osThreadNew+0x11a>
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d07b      	beq.n	80070f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006ffa:	2380      	movs	r3, #128	; 0x80
 8006ffc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006ffe:	2318      	movs	r3, #24
 8007000:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007002:	2300      	movs	r3, #0
 8007004:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8007006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800700a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d045      	beq.n	800709e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d002      	beq.n	8007020 <osThreadNew+0x48>
        name = attr->name;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d008      	beq.n	8007046 <osThreadNew+0x6e>
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	2b38      	cmp	r3, #56	; 0x38
 8007038:	d805      	bhi.n	8007046 <osThreadNew+0x6e>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	f003 0301 	and.w	r3, r3, #1
 8007042:	2b00      	cmp	r3, #0
 8007044:	d001      	beq.n	800704a <osThreadNew+0x72>
        return (NULL);
 8007046:	2300      	movs	r3, #0
 8007048:	e054      	b.n	80070f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	695b      	ldr	r3, [r3, #20]
 8007056:	089b      	lsrs	r3, r3, #2
 8007058:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00e      	beq.n	8007080 <osThreadNew+0xa8>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	2b5b      	cmp	r3, #91	; 0x5b
 8007068:	d90a      	bls.n	8007080 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800706e:	2b00      	cmp	r3, #0
 8007070:	d006      	beq.n	8007080 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	695b      	ldr	r3, [r3, #20]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d002      	beq.n	8007080 <osThreadNew+0xa8>
        mem = 1;
 800707a:	2301      	movs	r3, #1
 800707c:	61bb      	str	r3, [r7, #24]
 800707e:	e010      	b.n	80070a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10c      	bne.n	80070a2 <osThreadNew+0xca>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d108      	bne.n	80070a2 <osThreadNew+0xca>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d104      	bne.n	80070a2 <osThreadNew+0xca>
          mem = 0;
 8007098:	2300      	movs	r3, #0
 800709a:	61bb      	str	r3, [r7, #24]
 800709c:	e001      	b.n	80070a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800709e:	2300      	movs	r3, #0
 80070a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d110      	bne.n	80070ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070b0:	9202      	str	r2, [sp, #8]
 80070b2:	9301      	str	r3, [sp, #4]
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	6a3a      	ldr	r2, [r7, #32]
 80070bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070be:	68f8      	ldr	r0, [r7, #12]
 80070c0:	f001 f92e 	bl	8008320 <xTaskCreateStatic>
 80070c4:	4603      	mov	r3, r0
 80070c6:	613b      	str	r3, [r7, #16]
 80070c8:	e013      	b.n	80070f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d110      	bne.n	80070f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	f107 0310 	add.w	r3, r7, #16
 80070d8:	9301      	str	r3, [sp, #4]
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f001 f979 	bl	80083da <xTaskCreate>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d001      	beq.n	80070f2 <osThreadNew+0x11a>
            hTask = NULL;
 80070ee:	2300      	movs	r3, #0
 80070f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80070f2:	693b      	ldr	r3, [r7, #16]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3728      	adds	r7, #40	; 0x28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b084      	sub	sp, #16
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007104:	f3ef 8305 	mrs	r3, IPSR
 8007108:	60bb      	str	r3, [r7, #8]
  return(result);
 800710a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <osDelay+0x1c>
    stat = osErrorISR;
 8007110:	f06f 0305 	mvn.w	r3, #5
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	e007      	b.n	8007128 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007118:	2300      	movs	r3, #0
 800711a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 fa9e 	bl	8008664 <vTaskDelay>
    }
  }

  return (stat);
 8007128:	68fb      	ldr	r3, [r7, #12]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007132:	b580      	push	{r7, lr}
 8007134:	b088      	sub	sp, #32
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800713a:	2300      	movs	r3, #0
 800713c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800713e:	f3ef 8305 	mrs	r3, IPSR
 8007142:	60bb      	str	r3, [r7, #8]
  return(result);
 8007144:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007146:	2b00      	cmp	r3, #0
 8007148:	d174      	bne.n	8007234 <osMutexNew+0x102>
    if (attr != NULL) {
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d003      	beq.n	8007158 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	61bb      	str	r3, [r7, #24]
 8007156:	e001      	b.n	800715c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007158:	2300      	movs	r3, #0
 800715a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d002      	beq.n	800716c <osMutexNew+0x3a>
      rmtx = 1U;
 8007166:	2301      	movs	r3, #1
 8007168:	617b      	str	r3, [r7, #20]
 800716a:	e001      	b.n	8007170 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800716c:	2300      	movs	r3, #0
 800716e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	f003 0308 	and.w	r3, r3, #8
 8007176:	2b00      	cmp	r3, #0
 8007178:	d15c      	bne.n	8007234 <osMutexNew+0x102>
      mem = -1;
 800717a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800717e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d015      	beq.n	80071b2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	689b      	ldr	r3, [r3, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d006      	beq.n	800719c <osMutexNew+0x6a>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	2b4f      	cmp	r3, #79	; 0x4f
 8007194:	d902      	bls.n	800719c <osMutexNew+0x6a>
          mem = 1;
 8007196:	2301      	movs	r3, #1
 8007198:	613b      	str	r3, [r7, #16]
 800719a:	e00c      	b.n	80071b6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d108      	bne.n	80071b6 <osMutexNew+0x84>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d104      	bne.n	80071b6 <osMutexNew+0x84>
            mem = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	613b      	str	r3, [r7, #16]
 80071b0:	e001      	b.n	80071b6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80071b2:	2300      	movs	r3, #0
 80071b4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d112      	bne.n	80071e2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	689b      	ldr	r3, [r3, #8]
 80071c6:	4619      	mov	r1, r3
 80071c8:	2004      	movs	r0, #4
 80071ca:	f000 fb18 	bl	80077fe <xQueueCreateMutexStatic>
 80071ce:	61f8      	str	r0, [r7, #28]
 80071d0:	e016      	b.n	8007200 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	4619      	mov	r1, r3
 80071d8:	2001      	movs	r0, #1
 80071da:	f000 fb10 	bl	80077fe <xQueueCreateMutexStatic>
 80071de:	61f8      	str	r0, [r7, #28]
 80071e0:	e00e      	b.n	8007200 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80071e2:	693b      	ldr	r3, [r7, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10b      	bne.n	8007200 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d004      	beq.n	80071f8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80071ee:	2004      	movs	r0, #4
 80071f0:	f000 faed 	bl	80077ce <xQueueCreateMutex>
 80071f4:	61f8      	str	r0, [r7, #28]
 80071f6:	e003      	b.n	8007200 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80071f8:	2001      	movs	r0, #1
 80071fa:	f000 fae8 	bl	80077ce <xQueueCreateMutex>
 80071fe:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00c      	beq.n	8007220 <osMutexNew+0xee>
        if (attr != NULL) {
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <osMutexNew+0xe2>
          name = attr->name;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	e001      	b.n	8007218 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007214:	2300      	movs	r3, #0
 8007216:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007218:	68f9      	ldr	r1, [r7, #12]
 800721a:	69f8      	ldr	r0, [r7, #28]
 800721c:	f001 f822 	bl	8008264 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d006      	beq.n	8007234 <osMutexNew+0x102>
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	f043 0301 	orr.w	r3, r3, #1
 8007232:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007234:	69fb      	ldr	r3, [r7, #28]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3720      	adds	r7, #32
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800723e:	b580      	push	{r7, lr}
 8007240:	b086      	sub	sp, #24
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f023 0301 	bic.w	r3, r3, #1
 800724e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007258:	2300      	movs	r3, #0
 800725a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800725c:	f3ef 8305 	mrs	r3, IPSR
 8007260:	60bb      	str	r3, [r7, #8]
  return(result);
 8007262:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007268:	f06f 0305 	mvn.w	r3, #5
 800726c:	617b      	str	r3, [r7, #20]
 800726e:	e02c      	b.n	80072ca <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d103      	bne.n	800727e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007276:	f06f 0303 	mvn.w	r3, #3
 800727a:	617b      	str	r3, [r7, #20]
 800727c:	e025      	b.n	80072ca <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d011      	beq.n	80072a8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007284:	6839      	ldr	r1, [r7, #0]
 8007286:	6938      	ldr	r0, [r7, #16]
 8007288:	f000 fb08 	bl	800789c <xQueueTakeMutexRecursive>
 800728c:	4603      	mov	r3, r0
 800728e:	2b01      	cmp	r3, #1
 8007290:	d01b      	beq.n	80072ca <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007298:	f06f 0301 	mvn.w	r3, #1
 800729c:	617b      	str	r3, [r7, #20]
 800729e:	e014      	b.n	80072ca <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80072a0:	f06f 0302 	mvn.w	r3, #2
 80072a4:	617b      	str	r3, [r7, #20]
 80072a6:	e010      	b.n	80072ca <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80072a8:	6839      	ldr	r1, [r7, #0]
 80072aa:	6938      	ldr	r0, [r7, #16]
 80072ac:	f000 fda6 	bl	8007dfc <xQueueSemaphoreTake>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d009      	beq.n	80072ca <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80072bc:	f06f 0301 	mvn.w	r3, #1
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	e002      	b.n	80072ca <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80072c4:	f06f 0302 	mvn.w	r3, #2
 80072c8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80072ca:	697b      	ldr	r3, [r7, #20]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f023 0301 	bic.w	r3, r3, #1
 80072e2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80072ec:	2300      	movs	r3, #0
 80072ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072f0:	f3ef 8305 	mrs	r3, IPSR
 80072f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80072f6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <osMutexRelease+0x30>
    stat = osErrorISR;
 80072fc:	f06f 0305 	mvn.w	r3, #5
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	e01f      	b.n	8007344 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d103      	bne.n	8007312 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800730a:	f06f 0303 	mvn.w	r3, #3
 800730e:	617b      	str	r3, [r7, #20]
 8007310:	e018      	b.n	8007344 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d009      	beq.n	800732c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007318:	6938      	ldr	r0, [r7, #16]
 800731a:	f000 fa8b 	bl	8007834 <xQueueGiveMutexRecursive>
 800731e:	4603      	mov	r3, r0
 8007320:	2b01      	cmp	r3, #1
 8007322:	d00f      	beq.n	8007344 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007324:	f06f 0302 	mvn.w	r3, #2
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	e00b      	b.n	8007344 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800732c:	2300      	movs	r3, #0
 800732e:	2200      	movs	r2, #0
 8007330:	2100      	movs	r1, #0
 8007332:	6938      	ldr	r0, [r7, #16]
 8007334:	f000 fae8 	bl	8007908 <xQueueGenericSend>
 8007338:	4603      	mov	r3, r0
 800733a:	2b01      	cmp	r3, #1
 800733c:	d002      	beq.n	8007344 <osMutexRelease+0x70>
        stat = osErrorResource;
 800733e:	f06f 0302 	mvn.w	r3, #2
 8007342:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007344:	697b      	ldr	r3, [r7, #20]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
	...

08007350 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4a07      	ldr	r2, [pc, #28]	; (800737c <vApplicationGetIdleTaskMemory+0x2c>)
 8007360:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	4a06      	ldr	r2, [pc, #24]	; (8007380 <vApplicationGetIdleTaskMemory+0x30>)
 8007366:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2280      	movs	r2, #128	; 0x80
 800736c:	601a      	str	r2, [r3, #0]
}
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	20000234 	.word	0x20000234
 8007380:	20000290 	.word	0x20000290

08007384 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	60f8      	str	r0, [r7, #12]
 800738c:	60b9      	str	r1, [r7, #8]
 800738e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4a07      	ldr	r2, [pc, #28]	; (80073b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007394:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	4a06      	ldr	r2, [pc, #24]	; (80073b4 <vApplicationGetTimerTaskMemory+0x30>)
 800739a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073a2:	601a      	str	r2, [r3, #0]
}
 80073a4:	bf00      	nop
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	20000490 	.word	0x20000490
 80073b4:	200004ec 	.word	0x200004ec

080073b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f103 0208 	add.w	r2, r3, #8
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f103 0208 	add.w	r2, r3, #8
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f103 0208 	add.w	r2, r3, #8
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007406:	bf00      	nop
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007412:	b480      	push	{r7}
 8007414:	b085      	sub	sp, #20
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	689a      	ldr	r2, [r3, #8]
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	601a      	str	r2, [r3, #0]
}
 800744e:	bf00      	nop
 8007450:	3714      	adds	r7, #20
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800745a:	b480      	push	{r7}
 800745c:	b085      	sub	sp, #20
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007470:	d103      	bne.n	800747a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	e00c      	b.n	8007494 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3308      	adds	r3, #8
 800747e:	60fb      	str	r3, [r7, #12]
 8007480:	e002      	b.n	8007488 <vListInsert+0x2e>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	60fb      	str	r3, [r7, #12]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	429a      	cmp	r2, r3
 8007492:	d2f6      	bcs.n	8007482 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	68fa      	ldr	r2, [r7, #12]
 80074a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	1c5a      	adds	r2, r3, #1
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	601a      	str	r2, [r3, #0]
}
 80074c0:	bf00      	nop
 80074c2:	3714      	adds	r7, #20
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	691b      	ldr	r3, [r3, #16]
 80074d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6892      	ldr	r2, [r2, #8]
 80074e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	6852      	ldr	r2, [r2, #4]
 80074ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d103      	bne.n	8007500 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	689a      	ldr	r2, [r3, #8]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	1e5a      	subs	r2, r3, #1
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800754a:	f002 fb73 	bl	8009c34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007556:	68f9      	ldr	r1, [r7, #12]
 8007558:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800755a:	fb01 f303 	mul.w	r3, r1, r3
 800755e:	441a      	add	r2, r3
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2200      	movs	r2, #0
 8007568:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800757a:	3b01      	subs	r3, #1
 800757c:	68f9      	ldr	r1, [r7, #12]
 800757e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007580:	fb01 f303 	mul.w	r3, r1, r3
 8007584:	441a      	add	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	22ff      	movs	r2, #255	; 0xff
 800758e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	22ff      	movs	r2, #255	; 0xff
 8007596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d114      	bne.n	80075ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d01a      	beq.n	80075de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	3310      	adds	r3, #16
 80075ac:	4618      	mov	r0, r3
 80075ae:	f001 fb17 	bl	8008be0 <xTaskRemoveFromEventList>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d012      	beq.n	80075de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075b8:	4b0c      	ldr	r3, [pc, #48]	; (80075ec <xQueueGenericReset+0xcc>)
 80075ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075be:	601a      	str	r2, [r3, #0]
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	e009      	b.n	80075de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3310      	adds	r3, #16
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7ff fef2 	bl	80073b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3324      	adds	r3, #36	; 0x24
 80075d8:	4618      	mov	r0, r3
 80075da:	f7ff feed 	bl	80073b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075de:	f002 fb59 	bl	8009c94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075e2:	2301      	movs	r3, #1
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	e000ed04 	.word	0xe000ed04

080075f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b08e      	sub	sp, #56	; 0x38
 80075f4:	af02      	add	r7, sp, #8
 80075f6:	60f8      	str	r0, [r7, #12]
 80075f8:	60b9      	str	r1, [r7, #8]
 80075fa:	607a      	str	r2, [r7, #4]
 80075fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d10a      	bne.n	8007636 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007624:	f383 8811 	msr	BASEPRI, r3
 8007628:	f3bf 8f6f 	isb	sy
 800762c:	f3bf 8f4f 	dsb	sy
 8007630:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007632:	bf00      	nop
 8007634:	e7fe      	b.n	8007634 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d002      	beq.n	8007642 <xQueueGenericCreateStatic+0x52>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d001      	beq.n	8007646 <xQueueGenericCreateStatic+0x56>
 8007642:	2301      	movs	r3, #1
 8007644:	e000      	b.n	8007648 <xQueueGenericCreateStatic+0x58>
 8007646:	2300      	movs	r3, #0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10a      	bne.n	8007662 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	623b      	str	r3, [r7, #32]
}
 800765e:	bf00      	nop
 8007660:	e7fe      	b.n	8007660 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d102      	bne.n	800766e <xQueueGenericCreateStatic+0x7e>
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d101      	bne.n	8007672 <xQueueGenericCreateStatic+0x82>
 800766e:	2301      	movs	r3, #1
 8007670:	e000      	b.n	8007674 <xQueueGenericCreateStatic+0x84>
 8007672:	2300      	movs	r3, #0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d10a      	bne.n	800768e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	61fb      	str	r3, [r7, #28]
}
 800768a:	bf00      	nop
 800768c:	e7fe      	b.n	800768c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800768e:	2350      	movs	r3, #80	; 0x50
 8007690:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	2b50      	cmp	r3, #80	; 0x50
 8007696:	d00a      	beq.n	80076ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	61bb      	str	r3, [r7, #24]
}
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80076b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00d      	beq.n	80076d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80076ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80076c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	4613      	mov	r3, r2
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 f83f 	bl	8007754 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80076d8:	4618      	mov	r0, r3
 80076da:	3730      	adds	r7, #48	; 0x30
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}

080076e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b08a      	sub	sp, #40	; 0x28
 80076e4:	af02      	add	r7, sp, #8
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	4613      	mov	r3, r2
 80076ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <xQueueGenericCreate+0x2a>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	613b      	str	r3, [r7, #16]
}
 8007706:	bf00      	nop
 8007708:	e7fe      	b.n	8007708 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	fb02 f303 	mul.w	r3, r2, r3
 8007712:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	3350      	adds	r3, #80	; 0x50
 8007718:	4618      	mov	r0, r3
 800771a:	f002 fbad 	bl	8009e78 <pvPortMalloc>
 800771e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d011      	beq.n	800774a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	3350      	adds	r3, #80	; 0x50
 800772e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	2200      	movs	r2, #0
 8007734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007738:	79fa      	ldrb	r2, [r7, #7]
 800773a:	69bb      	ldr	r3, [r7, #24]
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	4613      	mov	r3, r2
 8007740:	697a      	ldr	r2, [r7, #20]
 8007742:	68b9      	ldr	r1, [r7, #8]
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 f805 	bl	8007754 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800774a:	69bb      	ldr	r3, [r7, #24]
	}
 800774c:	4618      	mov	r0, r3
 800774e:	3720      	adds	r7, #32
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d103      	bne.n	8007770 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	e002      	b.n	8007776 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	68ba      	ldr	r2, [r7, #8]
 8007780:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007782:	2101      	movs	r1, #1
 8007784:	69b8      	ldr	r0, [r7, #24]
 8007786:	f7ff fecb 	bl	8007520 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	78fa      	ldrb	r2, [r7, #3]
 800778e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007792:	bf00      	nop
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800779a:	b580      	push	{r7, lr}
 800779c:	b082      	sub	sp, #8
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00e      	beq.n	80077c6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80077ba:	2300      	movs	r3, #0
 80077bc:	2200      	movs	r2, #0
 80077be:	2100      	movs	r1, #0
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 f8a1 	bl	8007908 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80077c6:	bf00      	nop
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b086      	sub	sp, #24
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	4603      	mov	r3, r0
 80077d6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80077d8:	2301      	movs	r3, #1
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	2300      	movs	r3, #0
 80077de:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80077e0:	79fb      	ldrb	r3, [r7, #7]
 80077e2:	461a      	mov	r2, r3
 80077e4:	6939      	ldr	r1, [r7, #16]
 80077e6:	6978      	ldr	r0, [r7, #20]
 80077e8:	f7ff ff7a 	bl	80076e0 <xQueueGenericCreate>
 80077ec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80077ee:	68f8      	ldr	r0, [r7, #12]
 80077f0:	f7ff ffd3 	bl	800779a <prvInitialiseMutex>

		return xNewQueue;
 80077f4:	68fb      	ldr	r3, [r7, #12]
	}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3718      	adds	r7, #24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b088      	sub	sp, #32
 8007802:	af02      	add	r7, sp, #8
 8007804:	4603      	mov	r3, r0
 8007806:	6039      	str	r1, [r7, #0]
 8007808:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800780a:	2301      	movs	r3, #1
 800780c:	617b      	str	r3, [r7, #20]
 800780e:	2300      	movs	r3, #0
 8007810:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007812:	79fb      	ldrb	r3, [r7, #7]
 8007814:	9300      	str	r3, [sp, #0]
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	2200      	movs	r2, #0
 800781a:	6939      	ldr	r1, [r7, #16]
 800781c:	6978      	ldr	r0, [r7, #20]
 800781e:	f7ff fee7 	bl	80075f0 <xQueueGenericCreateStatic>
 8007822:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f7ff ffb8 	bl	800779a <prvInitialiseMutex>

		return xNewQueue;
 800782a:	68fb      	ldr	r3, [r7, #12]
	}
 800782c:	4618      	mov	r0, r3
 800782e:	3718      	adds	r7, #24
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007834:	b590      	push	{r4, r7, lr}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d10a      	bne.n	800785c <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	60fb      	str	r3, [r7, #12]
}
 8007858:	bf00      	nop
 800785a:	e7fe      	b.n	800785a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	689c      	ldr	r4, [r3, #8]
 8007860:	f001 fb7c 	bl	8008f5c <xTaskGetCurrentTaskHandle>
 8007864:	4603      	mov	r3, r0
 8007866:	429c      	cmp	r4, r3
 8007868:	d111      	bne.n	800788e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	1e5a      	subs	r2, r3, #1
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	68db      	ldr	r3, [r3, #12]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d105      	bne.n	8007888 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800787c:	2300      	movs	r3, #0
 800787e:	2200      	movs	r2, #0
 8007880:	2100      	movs	r1, #0
 8007882:	6938      	ldr	r0, [r7, #16]
 8007884:	f000 f840 	bl	8007908 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007888:	2301      	movs	r3, #1
 800788a:	617b      	str	r3, [r7, #20]
 800788c:	e001      	b.n	8007892 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800788e:	2300      	movs	r3, #0
 8007890:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007892:	697b      	ldr	r3, [r7, #20]
	}
 8007894:	4618      	mov	r0, r3
 8007896:	371c      	adds	r7, #28
 8007898:	46bd      	mov	sp, r7
 800789a:	bd90      	pop	{r4, r7, pc}

0800789c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800789c:	b590      	push	{r4, r7, lr}
 800789e:	b087      	sub	sp, #28
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d10a      	bne.n	80078c6 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	60fb      	str	r3, [r7, #12]
}
 80078c2:	bf00      	nop
 80078c4:	e7fe      	b.n	80078c4 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	689c      	ldr	r4, [r3, #8]
 80078ca:	f001 fb47 	bl	8008f5c <xTaskGetCurrentTaskHandle>
 80078ce:	4603      	mov	r3, r0
 80078d0:	429c      	cmp	r4, r3
 80078d2:	d107      	bne.n	80078e4 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	1c5a      	adds	r2, r3, #1
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80078de:	2301      	movs	r3, #1
 80078e0:	617b      	str	r3, [r7, #20]
 80078e2:	e00c      	b.n	80078fe <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6938      	ldr	r0, [r7, #16]
 80078e8:	f000 fa88 	bl	8007dfc <xQueueSemaphoreTake>
 80078ec:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d004      	beq.n	80078fe <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80078fe:	697b      	ldr	r3, [r7, #20]
	}
 8007900:	4618      	mov	r0, r3
 8007902:	371c      	adds	r7, #28
 8007904:	46bd      	mov	sp, r7
 8007906:	bd90      	pop	{r4, r7, pc}

08007908 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b08e      	sub	sp, #56	; 0x38
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	607a      	str	r2, [r7, #4]
 8007914:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007916:	2300      	movs	r3, #0
 8007918:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800791e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10a      	bne.n	800793a <xQueueGenericSend+0x32>
	__asm volatile
 8007924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007936:	bf00      	nop
 8007938:	e7fe      	b.n	8007938 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d103      	bne.n	8007948 <xQueueGenericSend+0x40>
 8007940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <xQueueGenericSend+0x44>
 8007948:	2301      	movs	r3, #1
 800794a:	e000      	b.n	800794e <xQueueGenericSend+0x46>
 800794c:	2300      	movs	r3, #0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d10a      	bne.n	8007968 <xQueueGenericSend+0x60>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2b02      	cmp	r3, #2
 800796c:	d103      	bne.n	8007976 <xQueueGenericSend+0x6e>
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007972:	2b01      	cmp	r3, #1
 8007974:	d101      	bne.n	800797a <xQueueGenericSend+0x72>
 8007976:	2301      	movs	r3, #1
 8007978:	e000      	b.n	800797c <xQueueGenericSend+0x74>
 800797a:	2300      	movs	r3, #0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d10a      	bne.n	8007996 <xQueueGenericSend+0x8e>
	__asm volatile
 8007980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007984:	f383 8811 	msr	BASEPRI, r3
 8007988:	f3bf 8f6f 	isb	sy
 800798c:	f3bf 8f4f 	dsb	sy
 8007990:	623b      	str	r3, [r7, #32]
}
 8007992:	bf00      	nop
 8007994:	e7fe      	b.n	8007994 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007996:	f001 faf1 	bl	8008f7c <xTaskGetSchedulerState>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d102      	bne.n	80079a6 <xQueueGenericSend+0x9e>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <xQueueGenericSend+0xa2>
 80079a6:	2301      	movs	r3, #1
 80079a8:	e000      	b.n	80079ac <xQueueGenericSend+0xa4>
 80079aa:	2300      	movs	r3, #0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d10a      	bne.n	80079c6 <xQueueGenericSend+0xbe>
	__asm volatile
 80079b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b4:	f383 8811 	msr	BASEPRI, r3
 80079b8:	f3bf 8f6f 	isb	sy
 80079bc:	f3bf 8f4f 	dsb	sy
 80079c0:	61fb      	str	r3, [r7, #28]
}
 80079c2:	bf00      	nop
 80079c4:	e7fe      	b.n	80079c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079c6:	f002 f935 	bl	8009c34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d302      	bcc.n	80079dc <xQueueGenericSend+0xd4>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d129      	bne.n	8007a30 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	68b9      	ldr	r1, [r7, #8]
 80079e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079e2:	f000 fb2f 	bl	8008044 <prvCopyDataToQueue>
 80079e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d010      	beq.n	8007a12 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f2:	3324      	adds	r3, #36	; 0x24
 80079f4:	4618      	mov	r0, r3
 80079f6:	f001 f8f3 	bl	8008be0 <xTaskRemoveFromEventList>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d013      	beq.n	8007a28 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007a00:	4b3f      	ldr	r3, [pc, #252]	; (8007b00 <xQueueGenericSend+0x1f8>)
 8007a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	e00a      	b.n	8007a28 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d007      	beq.n	8007a28 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007a18:	4b39      	ldr	r3, [pc, #228]	; (8007b00 <xQueueGenericSend+0x1f8>)
 8007a1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a1e:	601a      	str	r2, [r3, #0]
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007a28:	f002 f934 	bl	8009c94 <vPortExitCritical>
				return pdPASS;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e063      	b.n	8007af8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d103      	bne.n	8007a3e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a36:	f002 f92d 	bl	8009c94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	e05c      	b.n	8007af8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d106      	bne.n	8007a52 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a44:	f107 0314 	add.w	r3, r7, #20
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f001 f92d 	bl	8008ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a52:	f002 f91f 	bl	8009c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a56:	f000 fe9f 	bl	8008798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a5a:	f002 f8eb 	bl	8009c34 <vPortEnterCritical>
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a64:	b25b      	sxtb	r3, r3
 8007a66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a6a:	d103      	bne.n	8007a74 <xQueueGenericSend+0x16c>
 8007a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a7a:	b25b      	sxtb	r3, r3
 8007a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a80:	d103      	bne.n	8007a8a <xQueueGenericSend+0x182>
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a8a:	f002 f903 	bl	8009c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a8e:	1d3a      	adds	r2, r7, #4
 8007a90:	f107 0314 	add.w	r3, r7, #20
 8007a94:	4611      	mov	r1, r2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f001 f91c 	bl	8008cd4 <xTaskCheckForTimeOut>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d124      	bne.n	8007aec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007aa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aa4:	f000 fbc6 	bl	8008234 <prvIsQueueFull>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d018      	beq.n	8007ae0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab0:	3310      	adds	r3, #16
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f001 f842 	bl	8008b40 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007abe:	f000 fb51 	bl	8008164 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007ac2:	f000 fe77 	bl	80087b4 <xTaskResumeAll>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f47f af7c 	bne.w	80079c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007ace:	4b0c      	ldr	r3, [pc, #48]	; (8007b00 <xQueueGenericSend+0x1f8>)
 8007ad0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ad4:	601a      	str	r2, [r3, #0]
 8007ad6:	f3bf 8f4f 	dsb	sy
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	e772      	b.n	80079c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ae2:	f000 fb3f 	bl	8008164 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ae6:	f000 fe65 	bl	80087b4 <xTaskResumeAll>
 8007aea:	e76c      	b.n	80079c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007aee:	f000 fb39 	bl	8008164 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007af2:	f000 fe5f 	bl	80087b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007af6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3738      	adds	r7, #56	; 0x38
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	e000ed04 	.word	0xe000ed04

08007b04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b090      	sub	sp, #64	; 0x40
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
 8007b10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10a      	bne.n	8007b32 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b20:	f383 8811 	msr	BASEPRI, r3
 8007b24:	f3bf 8f6f 	isb	sy
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b2e:	bf00      	nop
 8007b30:	e7fe      	b.n	8007b30 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d103      	bne.n	8007b40 <xQueueGenericSendFromISR+0x3c>
 8007b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d101      	bne.n	8007b44 <xQueueGenericSendFromISR+0x40>
 8007b40:	2301      	movs	r3, #1
 8007b42:	e000      	b.n	8007b46 <xQueueGenericSendFromISR+0x42>
 8007b44:	2300      	movs	r3, #0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10a      	bne.n	8007b60 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b5c:	bf00      	nop
 8007b5e:	e7fe      	b.n	8007b5e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d103      	bne.n	8007b6e <xQueueGenericSendFromISR+0x6a>
 8007b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d101      	bne.n	8007b72 <xQueueGenericSendFromISR+0x6e>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <xQueueGenericSendFromISR+0x70>
 8007b72:	2300      	movs	r3, #0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d10a      	bne.n	8007b8e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7c:	f383 8811 	msr	BASEPRI, r3
 8007b80:	f3bf 8f6f 	isb	sy
 8007b84:	f3bf 8f4f 	dsb	sy
 8007b88:	623b      	str	r3, [r7, #32]
}
 8007b8a:	bf00      	nop
 8007b8c:	e7fe      	b.n	8007b8c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b8e:	f002 f933 	bl	8009df8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b92:	f3ef 8211 	mrs	r2, BASEPRI
 8007b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	61fa      	str	r2, [r7, #28]
 8007ba8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007baa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d302      	bcc.n	8007bc0 <xQueueGenericSendFromISR+0xbc>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d12f      	bne.n	8007c20 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007bd0:	683a      	ldr	r2, [r7, #0]
 8007bd2:	68b9      	ldr	r1, [r7, #8]
 8007bd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007bd6:	f000 fa35 	bl	8008044 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007bda:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007be2:	d112      	bne.n	8007c0a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d016      	beq.n	8007c1a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bee:	3324      	adds	r3, #36	; 0x24
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f000 fff5 	bl	8008be0 <xTaskRemoveFromEventList>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00e      	beq.n	8007c1a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d00b      	beq.n	8007c1a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	601a      	str	r2, [r3, #0]
 8007c08:	e007      	b.n	8007c1a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007c0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c0e:	3301      	adds	r3, #1
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	b25a      	sxtb	r2, r3
 8007c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007c1e:	e001      	b.n	8007c24 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007c20:	2300      	movs	r3, #0
 8007c22:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c26:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007c2e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3740      	adds	r7, #64	; 0x40
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
	...

08007c3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b08c      	sub	sp, #48	; 0x30
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10a      	bne.n	8007c6c <xQueueReceive+0x30>
	__asm volatile
 8007c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5a:	f383 8811 	msr	BASEPRI, r3
 8007c5e:	f3bf 8f6f 	isb	sy
 8007c62:	f3bf 8f4f 	dsb	sy
 8007c66:	623b      	str	r3, [r7, #32]
}
 8007c68:	bf00      	nop
 8007c6a:	e7fe      	b.n	8007c6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d103      	bne.n	8007c7a <xQueueReceive+0x3e>
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <xQueueReceive+0x42>
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	e000      	b.n	8007c80 <xQueueReceive+0x44>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10a      	bne.n	8007c9a <xQueueReceive+0x5e>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	61fb      	str	r3, [r7, #28]
}
 8007c96:	bf00      	nop
 8007c98:	e7fe      	b.n	8007c98 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c9a:	f001 f96f 	bl	8008f7c <xTaskGetSchedulerState>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d102      	bne.n	8007caa <xQueueReceive+0x6e>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <xQueueReceive+0x72>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e000      	b.n	8007cb0 <xQueueReceive+0x74>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <xQueueReceive+0x8e>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	61bb      	str	r3, [r7, #24]
}
 8007cc6:	bf00      	nop
 8007cc8:	e7fe      	b.n	8007cc8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cca:	f001 ffb3 	bl	8009c34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d01f      	beq.n	8007d1a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007cda:	68b9      	ldr	r1, [r7, #8]
 8007cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cde:	f000 fa1b 	bl	8008118 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce4:	1e5a      	subs	r2, r3, #1
 8007ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00f      	beq.n	8007d12 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf4:	3310      	adds	r3, #16
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 ff72 	bl	8008be0 <xTaskRemoveFromEventList>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d007      	beq.n	8007d12 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007d02:	4b3d      	ldr	r3, [pc, #244]	; (8007df8 <xQueueReceive+0x1bc>)
 8007d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d08:	601a      	str	r2, [r3, #0]
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007d12:	f001 ffbf 	bl	8009c94 <vPortExitCritical>
				return pdPASS;
 8007d16:	2301      	movs	r3, #1
 8007d18:	e069      	b.n	8007dee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d103      	bne.n	8007d28 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d20:	f001 ffb8 	bl	8009c94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007d24:	2300      	movs	r3, #0
 8007d26:	e062      	b.n	8007dee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d106      	bne.n	8007d3c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d2e:	f107 0310 	add.w	r3, r7, #16
 8007d32:	4618      	mov	r0, r3
 8007d34:	f000 ffb8 	bl	8008ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d3c:	f001 ffaa 	bl	8009c94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d40:	f000 fd2a 	bl	8008798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d44:	f001 ff76 	bl	8009c34 <vPortEnterCritical>
 8007d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d4e:	b25b      	sxtb	r3, r3
 8007d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d54:	d103      	bne.n	8007d5e <xQueueReceive+0x122>
 8007d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d64:	b25b      	sxtb	r3, r3
 8007d66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d6a:	d103      	bne.n	8007d74 <xQueueReceive+0x138>
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d74:	f001 ff8e 	bl	8009c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d78:	1d3a      	adds	r2, r7, #4
 8007d7a:	f107 0310 	add.w	r3, r7, #16
 8007d7e:	4611      	mov	r1, r2
 8007d80:	4618      	mov	r0, r3
 8007d82:	f000 ffa7 	bl	8008cd4 <xTaskCheckForTimeOut>
 8007d86:	4603      	mov	r3, r0
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d123      	bne.n	8007dd4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d8e:	f000 fa3b 	bl	8008208 <prvIsQueueEmpty>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d017      	beq.n	8007dc8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9a:	3324      	adds	r3, #36	; 0x24
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	4611      	mov	r1, r2
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 fecd 	bl	8008b40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007da6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da8:	f000 f9dc 	bl	8008164 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007dac:	f000 fd02 	bl	80087b4 <xTaskResumeAll>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d189      	bne.n	8007cca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007db6:	4b10      	ldr	r3, [pc, #64]	; (8007df8 <xQueueReceive+0x1bc>)
 8007db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dbc:	601a      	str	r2, [r3, #0]
 8007dbe:	f3bf 8f4f 	dsb	sy
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	e780      	b.n	8007cca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dca:	f000 f9cb 	bl	8008164 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007dce:	f000 fcf1 	bl	80087b4 <xTaskResumeAll>
 8007dd2:	e77a      	b.n	8007cca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007dd6:	f000 f9c5 	bl	8008164 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dda:	f000 fceb 	bl	80087b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007dde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007de0:	f000 fa12 	bl	8008208 <prvIsQueueEmpty>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	f43f af6f 	beq.w	8007cca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007dec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3730      	adds	r7, #48	; 0x30
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}
 8007df6:	bf00      	nop
 8007df8:	e000ed04 	.word	0xe000ed04

08007dfc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08e      	sub	sp, #56	; 0x38
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e06:	2300      	movs	r3, #0
 8007e08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10a      	bne.n	8007e2e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	623b      	str	r3, [r7, #32]
}
 8007e2a:	bf00      	nop
 8007e2c:	e7fe      	b.n	8007e2c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	61fb      	str	r3, [r7, #28]
}
 8007e48:	bf00      	nop
 8007e4a:	e7fe      	b.n	8007e4a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007e4c:	f001 f896 	bl	8008f7c <xTaskGetSchedulerState>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d102      	bne.n	8007e5c <xQueueSemaphoreTake+0x60>
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <xQueueSemaphoreTake+0x64>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e000      	b.n	8007e62 <xQueueSemaphoreTake+0x66>
 8007e60:	2300      	movs	r3, #0
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10a      	bne.n	8007e7c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	61bb      	str	r3, [r7, #24]
}
 8007e78:	bf00      	nop
 8007e7a:	e7fe      	b.n	8007e7a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e7c:	f001 feda 	bl	8009c34 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e84:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d024      	beq.n	8007ed6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8e:	1e5a      	subs	r2, r3, #1
 8007e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e92:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d104      	bne.n	8007ea6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007e9c:	f001 f9e4 	bl	8009268 <pvTaskIncrementMutexHeldCount>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea8:	691b      	ldr	r3, [r3, #16]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00f      	beq.n	8007ece <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb0:	3310      	adds	r3, #16
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fe94 	bl	8008be0 <xTaskRemoveFromEventList>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d007      	beq.n	8007ece <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ebe:	4b54      	ldr	r3, [pc, #336]	; (8008010 <xQueueSemaphoreTake+0x214>)
 8007ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	f3bf 8f4f 	dsb	sy
 8007eca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ece:	f001 fee1 	bl	8009c94 <vPortExitCritical>
				return pdPASS;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e097      	b.n	8008006 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d111      	bne.n	8007f00 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d00a      	beq.n	8007ef8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	617b      	str	r3, [r7, #20]
}
 8007ef4:	bf00      	nop
 8007ef6:	e7fe      	b.n	8007ef6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007ef8:	f001 fecc 	bl	8009c94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007efc:	2300      	movs	r3, #0
 8007efe:	e082      	b.n	8008006 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d106      	bne.n	8007f14 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f06:	f107 030c 	add.w	r3, r7, #12
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 fecc 	bl	8008ca8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f10:	2301      	movs	r3, #1
 8007f12:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f14:	f001 febe 	bl	8009c94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f18:	f000 fc3e 	bl	8008798 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f1c:	f001 fe8a 	bl	8009c34 <vPortEnterCritical>
 8007f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f26:	b25b      	sxtb	r3, r3
 8007f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f2c:	d103      	bne.n	8007f36 <xQueueSemaphoreTake+0x13a>
 8007f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f3c:	b25b      	sxtb	r3, r3
 8007f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f42:	d103      	bne.n	8007f4c <xQueueSemaphoreTake+0x150>
 8007f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f46:	2200      	movs	r2, #0
 8007f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f4c:	f001 fea2 	bl	8009c94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007f50:	463a      	mov	r2, r7
 8007f52:	f107 030c 	add.w	r3, r7, #12
 8007f56:	4611      	mov	r1, r2
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f000 febb 	bl	8008cd4 <xTaskCheckForTimeOut>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d132      	bne.n	8007fca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f66:	f000 f94f 	bl	8008208 <prvIsQueueEmpty>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d026      	beq.n	8007fbe <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d109      	bne.n	8007f8c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007f78:	f001 fe5c 	bl	8009c34 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	4618      	mov	r0, r3
 8007f82:	f001 f819 	bl	8008fb8 <xTaskPriorityInherit>
 8007f86:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007f88:	f001 fe84 	bl	8009c94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f8e:	3324      	adds	r3, #36	; 0x24
 8007f90:	683a      	ldr	r2, [r7, #0]
 8007f92:	4611      	mov	r1, r2
 8007f94:	4618      	mov	r0, r3
 8007f96:	f000 fdd3 	bl	8008b40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f9c:	f000 f8e2 	bl	8008164 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fa0:	f000 fc08 	bl	80087b4 <xTaskResumeAll>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f47f af68 	bne.w	8007e7c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007fac:	4b18      	ldr	r3, [pc, #96]	; (8008010 <xQueueSemaphoreTake+0x214>)
 8007fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	e75e      	b.n	8007e7c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007fbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fc0:	f000 f8d0 	bl	8008164 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007fc4:	f000 fbf6 	bl	80087b4 <xTaskResumeAll>
 8007fc8:	e758      	b.n	8007e7c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007fca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fcc:	f000 f8ca 	bl	8008164 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007fd0:	f000 fbf0 	bl	80087b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fd6:	f000 f917 	bl	8008208 <prvIsQueueEmpty>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f43f af4d 	beq.w	8007e7c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d00d      	beq.n	8008004 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007fe8:	f001 fe24 	bl	8009c34 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007fec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fee:	f000 f811 	bl	8008014 <prvGetDisinheritPriorityAfterTimeout>
 8007ff2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f001 f8b2 	bl	8009164 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008000:	f001 fe48 	bl	8009c94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008004:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008006:	4618      	mov	r0, r3
 8008008:	3738      	adds	r7, #56	; 0x38
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	e000ed04 	.word	0xe000ed04

08008014 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	2b00      	cmp	r3, #0
 8008022:	d006      	beq.n	8008032 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	e001      	b.n	8008036 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008032:	2300      	movs	r3, #0
 8008034:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008036:	68fb      	ldr	r3, [r7, #12]
	}
 8008038:	4618      	mov	r0, r3
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b086      	sub	sp, #24
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008050:	2300      	movs	r3, #0
 8008052:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008058:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805e:	2b00      	cmp	r3, #0
 8008060:	d10d      	bne.n	800807e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d14d      	bne.n	8008106 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	4618      	mov	r0, r3
 8008070:	f001 f80a 	bl	8009088 <xTaskPriorityDisinherit>
 8008074:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	609a      	str	r2, [r3, #8]
 800807c:	e043      	b.n	8008106 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d119      	bne.n	80080b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6858      	ldr	r0, [r3, #4]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800808c:	461a      	mov	r2, r3
 800808e:	68b9      	ldr	r1, [r7, #8]
 8008090:	f002 fb69 	bl	800a766 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	685a      	ldr	r2, [r3, #4]
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809c:	441a      	add	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d32b      	bcc.n	8008106 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	605a      	str	r2, [r3, #4]
 80080b6:	e026      	b.n	8008106 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	68d8      	ldr	r0, [r3, #12]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c0:	461a      	mov	r2, r3
 80080c2:	68b9      	ldr	r1, [r7, #8]
 80080c4:	f002 fb4f 	bl	800a766 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d0:	425b      	negs	r3, r3
 80080d2:	441a      	add	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	68da      	ldr	r2, [r3, #12]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d207      	bcs.n	80080f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	689a      	ldr	r2, [r3, #8]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ec:	425b      	negs	r3, r3
 80080ee:	441a      	add	r2, r3
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d105      	bne.n	8008106 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d002      	beq.n	8008106 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	3b01      	subs	r3, #1
 8008104:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	1c5a      	adds	r2, r3, #1
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800810e:	697b      	ldr	r3, [r7, #20]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}

08008118 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b082      	sub	sp, #8
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008126:	2b00      	cmp	r3, #0
 8008128:	d018      	beq.n	800815c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008132:	441a      	add	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68da      	ldr	r2, [r3, #12]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	429a      	cmp	r2, r3
 8008142:	d303      	bcc.n	800814c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68d9      	ldr	r1, [r3, #12]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008154:	461a      	mov	r2, r3
 8008156:	6838      	ldr	r0, [r7, #0]
 8008158:	f002 fb05 	bl	800a766 <memcpy>
	}
}
 800815c:	bf00      	nop
 800815e:	3708      	adds	r7, #8
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800816c:	f001 fd62 	bl	8009c34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008176:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008178:	e011      	b.n	800819e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817e:	2b00      	cmp	r3, #0
 8008180:	d012      	beq.n	80081a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	3324      	adds	r3, #36	; 0x24
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fd2a 	bl	8008be0 <xTaskRemoveFromEventList>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008192:	f000 fe01 	bl	8008d98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008196:	7bfb      	ldrb	r3, [r7, #15]
 8008198:	3b01      	subs	r3, #1
 800819a:	b2db      	uxtb	r3, r3
 800819c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800819e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	dce9      	bgt.n	800817a <prvUnlockQueue+0x16>
 80081a6:	e000      	b.n	80081aa <prvUnlockQueue+0x46>
					break;
 80081a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	22ff      	movs	r2, #255	; 0xff
 80081ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80081b2:	f001 fd6f 	bl	8009c94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081b6:	f001 fd3d 	bl	8009c34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081c2:	e011      	b.n	80081e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d012      	beq.n	80081f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3310      	adds	r3, #16
 80081d0:	4618      	mov	r0, r3
 80081d2:	f000 fd05 	bl	8008be0 <xTaskRemoveFromEventList>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081dc:	f000 fddc 	bl	8008d98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081e0:	7bbb      	ldrb	r3, [r7, #14]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	dce9      	bgt.n	80081c4 <prvUnlockQueue+0x60>
 80081f0:	e000      	b.n	80081f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80081f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	22ff      	movs	r2, #255	; 0xff
 80081f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80081fc:	f001 fd4a 	bl	8009c94 <vPortExitCritical>
}
 8008200:	bf00      	nop
 8008202:	3710      	adds	r7, #16
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008210:	f001 fd10 	bl	8009c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008218:	2b00      	cmp	r3, #0
 800821a:	d102      	bne.n	8008222 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800821c:	2301      	movs	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	e001      	b.n	8008226 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008222:	2300      	movs	r3, #0
 8008224:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008226:	f001 fd35 	bl	8009c94 <vPortExitCritical>

	return xReturn;
 800822a:	68fb      	ldr	r3, [r7, #12]
}
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800823c:	f001 fcfa 	bl	8009c34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008248:	429a      	cmp	r2, r3
 800824a:	d102      	bne.n	8008252 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800824c:	2301      	movs	r3, #1
 800824e:	60fb      	str	r3, [r7, #12]
 8008250:	e001      	b.n	8008256 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008252:	2300      	movs	r3, #0
 8008254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008256:	f001 fd1d 	bl	8009c94 <vPortExitCritical>

	return xReturn;
 800825a:	68fb      	ldr	r3, [r7, #12]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3710      	adds	r7, #16
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800826e:	2300      	movs	r3, #0
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	e014      	b.n	800829e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008274:	4a0f      	ldr	r2, [pc, #60]	; (80082b4 <vQueueAddToRegistry+0x50>)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d10b      	bne.n	8008298 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008280:	490c      	ldr	r1, [pc, #48]	; (80082b4 <vQueueAddToRegistry+0x50>)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800828a:	4a0a      	ldr	r2, [pc, #40]	; (80082b4 <vQueueAddToRegistry+0x50>)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	4413      	add	r3, r2
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008296:	e006      	b.n	80082a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	3301      	adds	r3, #1
 800829c:	60fb      	str	r3, [r7, #12]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2b07      	cmp	r3, #7
 80082a2:	d9e7      	bls.n	8008274 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082a4:	bf00      	nop
 80082a6:	bf00      	nop
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	200008ec 	.word	0x200008ec

080082b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082c8:	f001 fcb4 	bl	8009c34 <vPortEnterCritical>
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082d2:	b25b      	sxtb	r3, r3
 80082d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082d8:	d103      	bne.n	80082e2 <vQueueWaitForMessageRestricted+0x2a>
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2200      	movs	r2, #0
 80082de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082e8:	b25b      	sxtb	r3, r3
 80082ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082ee:	d103      	bne.n	80082f8 <vQueueWaitForMessageRestricted+0x40>
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082f8:	f001 fccc 	bl	8009c94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	2b00      	cmp	r3, #0
 8008302:	d106      	bne.n	8008312 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	3324      	adds	r3, #36	; 0x24
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	68b9      	ldr	r1, [r7, #8]
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fc3b 	bl	8008b88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008312:	6978      	ldr	r0, [r7, #20]
 8008314:	f7ff ff26 	bl	8008164 <prvUnlockQueue>
	}
 8008318:	bf00      	nop
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008320:	b580      	push	{r7, lr}
 8008322:	b08e      	sub	sp, #56	; 0x38
 8008324:	af04      	add	r7, sp, #16
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
 800832c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800832e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10a      	bne.n	800834a <xTaskCreateStatic+0x2a>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	623b      	str	r3, [r7, #32]
}
 8008346:	bf00      	nop
 8008348:	e7fe      	b.n	8008348 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800834a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800834c:	2b00      	cmp	r3, #0
 800834e:	d10a      	bne.n	8008366 <xTaskCreateStatic+0x46>
	__asm volatile
 8008350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008354:	f383 8811 	msr	BASEPRI, r3
 8008358:	f3bf 8f6f 	isb	sy
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	61fb      	str	r3, [r7, #28]
}
 8008362:	bf00      	nop
 8008364:	e7fe      	b.n	8008364 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008366:	235c      	movs	r3, #92	; 0x5c
 8008368:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	2b5c      	cmp	r3, #92	; 0x5c
 800836e:	d00a      	beq.n	8008386 <xTaskCreateStatic+0x66>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	61bb      	str	r3, [r7, #24]
}
 8008382:	bf00      	nop
 8008384:	e7fe      	b.n	8008384 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008386:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838a:	2b00      	cmp	r3, #0
 800838c:	d01e      	beq.n	80083cc <xTaskCreateStatic+0xac>
 800838e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008390:	2b00      	cmp	r3, #0
 8008392:	d01b      	beq.n	80083cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008396:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800839c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800839e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a0:	2202      	movs	r2, #2
 80083a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083a6:	2300      	movs	r3, #0
 80083a8:	9303      	str	r3, [sp, #12]
 80083aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ac:	9302      	str	r3, [sp, #8]
 80083ae:	f107 0314 	add.w	r3, r7, #20
 80083b2:	9301      	str	r3, [sp, #4]
 80083b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	68b9      	ldr	r1, [r7, #8]
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f000 f850 	bl	8008464 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083c6:	f000 f8dd 	bl	8008584 <prvAddNewTaskToReadyList>
 80083ca:	e001      	b.n	80083d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80083cc:	2300      	movs	r3, #0
 80083ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80083d0:	697b      	ldr	r3, [r7, #20]
	}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3728      	adds	r7, #40	; 0x28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b08c      	sub	sp, #48	; 0x30
 80083de:	af04      	add	r7, sp, #16
 80083e0:	60f8      	str	r0, [r7, #12]
 80083e2:	60b9      	str	r1, [r7, #8]
 80083e4:	603b      	str	r3, [r7, #0]
 80083e6:	4613      	mov	r3, r2
 80083e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80083ea:	88fb      	ldrh	r3, [r7, #6]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	4618      	mov	r0, r3
 80083f0:	f001 fd42 	bl	8009e78 <pvPortMalloc>
 80083f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00e      	beq.n	800841a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80083fc:	205c      	movs	r0, #92	; 0x5c
 80083fe:	f001 fd3b 	bl	8009e78 <pvPortMalloc>
 8008402:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	697a      	ldr	r2, [r7, #20]
 800840e:	631a      	str	r2, [r3, #48]	; 0x30
 8008410:	e005      	b.n	800841e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008412:	6978      	ldr	r0, [r7, #20]
 8008414:	f001 fdfc 	bl	800a010 <vPortFree>
 8008418:	e001      	b.n	800841e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800841a:	2300      	movs	r3, #0
 800841c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800841e:	69fb      	ldr	r3, [r7, #28]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d017      	beq.n	8008454 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	2200      	movs	r2, #0
 8008428:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800842c:	88fa      	ldrh	r2, [r7, #6]
 800842e:	2300      	movs	r3, #0
 8008430:	9303      	str	r3, [sp, #12]
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	9302      	str	r3, [sp, #8]
 8008436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008438:	9301      	str	r3, [sp, #4]
 800843a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	68b9      	ldr	r1, [r7, #8]
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 f80e 	bl	8008464 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008448:	69f8      	ldr	r0, [r7, #28]
 800844a:	f000 f89b 	bl	8008584 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800844e:	2301      	movs	r3, #1
 8008450:	61bb      	str	r3, [r7, #24]
 8008452:	e002      	b.n	800845a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008458:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800845a:	69bb      	ldr	r3, [r7, #24]
	}
 800845c:	4618      	mov	r0, r3
 800845e:	3720      	adds	r7, #32
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b088      	sub	sp, #32
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	60b9      	str	r1, [r7, #8]
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	461a      	mov	r2, r3
 800847c:	21a5      	movs	r1, #165	; 0xa5
 800847e:	f002 f89a 	bl	800a5b6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800848c:	3b01      	subs	r3, #1
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4413      	add	r3, r2
 8008492:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	f023 0307 	bic.w	r3, r3, #7
 800849a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800849c:	69bb      	ldr	r3, [r7, #24]
 800849e:	f003 0307 	and.w	r3, r3, #7
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80084a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084aa:	f383 8811 	msr	BASEPRI, r3
 80084ae:	f3bf 8f6f 	isb	sy
 80084b2:	f3bf 8f4f 	dsb	sy
 80084b6:	617b      	str	r3, [r7, #20]
}
 80084b8:	bf00      	nop
 80084ba:	e7fe      	b.n	80084ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d01f      	beq.n	8008502 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084c2:	2300      	movs	r3, #0
 80084c4:	61fb      	str	r3, [r7, #28]
 80084c6:	e012      	b.n	80084ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	4413      	add	r3, r2
 80084ce:	7819      	ldrb	r1, [r3, #0]
 80084d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	4413      	add	r3, r2
 80084d6:	3334      	adds	r3, #52	; 0x34
 80084d8:	460a      	mov	r2, r1
 80084da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	69fb      	ldr	r3, [r7, #28]
 80084e0:	4413      	add	r3, r2
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d006      	beq.n	80084f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084e8:	69fb      	ldr	r3, [r7, #28]
 80084ea:	3301      	adds	r3, #1
 80084ec:	61fb      	str	r3, [r7, #28]
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	2b0f      	cmp	r3, #15
 80084f2:	d9e9      	bls.n	80084c8 <prvInitialiseNewTask+0x64>
 80084f4:	e000      	b.n	80084f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80084f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fa:	2200      	movs	r2, #0
 80084fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008500:	e003      	b.n	800850a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800850a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800850c:	2b37      	cmp	r3, #55	; 0x37
 800850e:	d901      	bls.n	8008514 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008510:	2337      	movs	r3, #55	; 0x37
 8008512:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008518:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800851e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008522:	2200      	movs	r2, #0
 8008524:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	3304      	adds	r3, #4
 800852a:	4618      	mov	r0, r3
 800852c:	f7fe ff64 	bl	80073f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008532:	3318      	adds	r3, #24
 8008534:	4618      	mov	r0, r3
 8008536:	f7fe ff5f 	bl	80073f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800853e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800854e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008552:	2200      	movs	r2, #0
 8008554:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	2200      	movs	r2, #0
 800855a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	68f9      	ldr	r1, [r7, #12]
 8008562:	69b8      	ldr	r0, [r7, #24]
 8008564:	f001 fa36 	bl	80099d4 <pxPortInitialiseStack>
 8008568:	4602      	mov	r2, r0
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	2b00      	cmp	r3, #0
 8008572:	d002      	beq.n	800857a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008578:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800857a:	bf00      	nop
 800857c:	3720      	adds	r7, #32
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
	...

08008584 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800858c:	f001 fb52 	bl	8009c34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008590:	4b2d      	ldr	r3, [pc, #180]	; (8008648 <prvAddNewTaskToReadyList+0xc4>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3301      	adds	r3, #1
 8008596:	4a2c      	ldr	r2, [pc, #176]	; (8008648 <prvAddNewTaskToReadyList+0xc4>)
 8008598:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800859a:	4b2c      	ldr	r3, [pc, #176]	; (800864c <prvAddNewTaskToReadyList+0xc8>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d109      	bne.n	80085b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085a2:	4a2a      	ldr	r2, [pc, #168]	; (800864c <prvAddNewTaskToReadyList+0xc8>)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085a8:	4b27      	ldr	r3, [pc, #156]	; (8008648 <prvAddNewTaskToReadyList+0xc4>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d110      	bne.n	80085d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80085b0:	f000 fc16 	bl	8008de0 <prvInitialiseTaskLists>
 80085b4:	e00d      	b.n	80085d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80085b6:	4b26      	ldr	r3, [pc, #152]	; (8008650 <prvAddNewTaskToReadyList+0xcc>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d109      	bne.n	80085d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085be:	4b23      	ldr	r3, [pc, #140]	; (800864c <prvAddNewTaskToReadyList+0xc8>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d802      	bhi.n	80085d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085cc:	4a1f      	ldr	r2, [pc, #124]	; (800864c <prvAddNewTaskToReadyList+0xc8>)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085d2:	4b20      	ldr	r3, [pc, #128]	; (8008654 <prvAddNewTaskToReadyList+0xd0>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3301      	adds	r3, #1
 80085d8:	4a1e      	ldr	r2, [pc, #120]	; (8008654 <prvAddNewTaskToReadyList+0xd0>)
 80085da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80085dc:	4b1d      	ldr	r3, [pc, #116]	; (8008654 <prvAddNewTaskToReadyList+0xd0>)
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e8:	4b1b      	ldr	r3, [pc, #108]	; (8008658 <prvAddNewTaskToReadyList+0xd4>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d903      	bls.n	80085f8 <prvAddNewTaskToReadyList+0x74>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085f4:	4a18      	ldr	r2, [pc, #96]	; (8008658 <prvAddNewTaskToReadyList+0xd4>)
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085fc:	4613      	mov	r3, r2
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	4a15      	ldr	r2, [pc, #84]	; (800865c <prvAddNewTaskToReadyList+0xd8>)
 8008606:	441a      	add	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	3304      	adds	r3, #4
 800860c:	4619      	mov	r1, r3
 800860e:	4610      	mov	r0, r2
 8008610:	f7fe feff 	bl	8007412 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008614:	f001 fb3e 	bl	8009c94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008618:	4b0d      	ldr	r3, [pc, #52]	; (8008650 <prvAddNewTaskToReadyList+0xcc>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00e      	beq.n	800863e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008620:	4b0a      	ldr	r3, [pc, #40]	; (800864c <prvAddNewTaskToReadyList+0xc8>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862a:	429a      	cmp	r2, r3
 800862c:	d207      	bcs.n	800863e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800862e:	4b0c      	ldr	r3, [pc, #48]	; (8008660 <prvAddNewTaskToReadyList+0xdc>)
 8008630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008634:	601a      	str	r2, [r3, #0]
 8008636:	f3bf 8f4f 	dsb	sy
 800863a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800863e:	bf00      	nop
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	20000e00 	.word	0x20000e00
 800864c:	2000092c 	.word	0x2000092c
 8008650:	20000e0c 	.word	0x20000e0c
 8008654:	20000e1c 	.word	0x20000e1c
 8008658:	20000e08 	.word	0x20000e08
 800865c:	20000930 	.word	0x20000930
 8008660:	e000ed04 	.word	0xe000ed04

08008664 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800866c:	2300      	movs	r3, #0
 800866e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d017      	beq.n	80086a6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008676:	4b13      	ldr	r3, [pc, #76]	; (80086c4 <vTaskDelay+0x60>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00a      	beq.n	8008694 <vTaskDelay+0x30>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	60bb      	str	r3, [r7, #8]
}
 8008690:	bf00      	nop
 8008692:	e7fe      	b.n	8008692 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008694:	f000 f880 	bl	8008798 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008698:	2100      	movs	r1, #0
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fdf8 	bl	8009290 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80086a0:	f000 f888 	bl	80087b4 <xTaskResumeAll>
 80086a4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d107      	bne.n	80086bc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80086ac:	4b06      	ldr	r3, [pc, #24]	; (80086c8 <vTaskDelay+0x64>)
 80086ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086b2:	601a      	str	r2, [r3, #0]
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086bc:	bf00      	nop
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	20000e28 	.word	0x20000e28
 80086c8:	e000ed04 	.word	0xe000ed04

080086cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b08a      	sub	sp, #40	; 0x28
 80086d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086d6:	2300      	movs	r3, #0
 80086d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086da:	463a      	mov	r2, r7
 80086dc:	1d39      	adds	r1, r7, #4
 80086de:	f107 0308 	add.w	r3, r7, #8
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe fe34 	bl	8007350 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80086e8:	6839      	ldr	r1, [r7, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	68ba      	ldr	r2, [r7, #8]
 80086ee:	9202      	str	r2, [sp, #8]
 80086f0:	9301      	str	r3, [sp, #4]
 80086f2:	2300      	movs	r3, #0
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	2300      	movs	r3, #0
 80086f8:	460a      	mov	r2, r1
 80086fa:	4921      	ldr	r1, [pc, #132]	; (8008780 <vTaskStartScheduler+0xb4>)
 80086fc:	4821      	ldr	r0, [pc, #132]	; (8008784 <vTaskStartScheduler+0xb8>)
 80086fe:	f7ff fe0f 	bl	8008320 <xTaskCreateStatic>
 8008702:	4603      	mov	r3, r0
 8008704:	4a20      	ldr	r2, [pc, #128]	; (8008788 <vTaskStartScheduler+0xbc>)
 8008706:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008708:	4b1f      	ldr	r3, [pc, #124]	; (8008788 <vTaskStartScheduler+0xbc>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008710:	2301      	movs	r3, #1
 8008712:	617b      	str	r3, [r7, #20]
 8008714:	e001      	b.n	800871a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008716:	2300      	movs	r3, #0
 8008718:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d102      	bne.n	8008726 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008720:	f000 fe0a 	bl	8009338 <xTimerCreateTimerTask>
 8008724:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d116      	bne.n	800875a <vTaskStartScheduler+0x8e>
	__asm volatile
 800872c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008730:	f383 8811 	msr	BASEPRI, r3
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	f3bf 8f4f 	dsb	sy
 800873c:	613b      	str	r3, [r7, #16]
}
 800873e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008740:	4b12      	ldr	r3, [pc, #72]	; (800878c <vTaskStartScheduler+0xc0>)
 8008742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008746:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008748:	4b11      	ldr	r3, [pc, #68]	; (8008790 <vTaskStartScheduler+0xc4>)
 800874a:	2201      	movs	r2, #1
 800874c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800874e:	4b11      	ldr	r3, [pc, #68]	; (8008794 <vTaskStartScheduler+0xc8>)
 8008750:	2200      	movs	r2, #0
 8008752:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008754:	f001 f9cc 	bl	8009af0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008758:	e00e      	b.n	8008778 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008760:	d10a      	bne.n	8008778 <vTaskStartScheduler+0xac>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	60fb      	str	r3, [r7, #12]
}
 8008774:	bf00      	nop
 8008776:	e7fe      	b.n	8008776 <vTaskStartScheduler+0xaa>
}
 8008778:	bf00      	nop
 800877a:	3718      	adds	r7, #24
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	0800b7c4 	.word	0x0800b7c4
 8008784:	08008db1 	.word	0x08008db1
 8008788:	20000e24 	.word	0x20000e24
 800878c:	20000e20 	.word	0x20000e20
 8008790:	20000e0c 	.word	0x20000e0c
 8008794:	20000e04 	.word	0x20000e04

08008798 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008798:	b480      	push	{r7}
 800879a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800879c:	4b04      	ldr	r3, [pc, #16]	; (80087b0 <vTaskSuspendAll+0x18>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	3301      	adds	r3, #1
 80087a2:	4a03      	ldr	r2, [pc, #12]	; (80087b0 <vTaskSuspendAll+0x18>)
 80087a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80087a6:	bf00      	nop
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	20000e28 	.word	0x20000e28

080087b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80087be:	2300      	movs	r3, #0
 80087c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80087c2:	4b42      	ldr	r3, [pc, #264]	; (80088cc <xTaskResumeAll+0x118>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d10a      	bne.n	80087e0 <xTaskResumeAll+0x2c>
	__asm volatile
 80087ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ce:	f383 8811 	msr	BASEPRI, r3
 80087d2:	f3bf 8f6f 	isb	sy
 80087d6:	f3bf 8f4f 	dsb	sy
 80087da:	603b      	str	r3, [r7, #0]
}
 80087dc:	bf00      	nop
 80087de:	e7fe      	b.n	80087de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80087e0:	f001 fa28 	bl	8009c34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80087e4:	4b39      	ldr	r3, [pc, #228]	; (80088cc <xTaskResumeAll+0x118>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	4a38      	ldr	r2, [pc, #224]	; (80088cc <xTaskResumeAll+0x118>)
 80087ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087ee:	4b37      	ldr	r3, [pc, #220]	; (80088cc <xTaskResumeAll+0x118>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d162      	bne.n	80088bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087f6:	4b36      	ldr	r3, [pc, #216]	; (80088d0 <xTaskResumeAll+0x11c>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d05e      	beq.n	80088bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087fe:	e02f      	b.n	8008860 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008800:	4b34      	ldr	r3, [pc, #208]	; (80088d4 <xTaskResumeAll+0x120>)
 8008802:	68db      	ldr	r3, [r3, #12]
 8008804:	68db      	ldr	r3, [r3, #12]
 8008806:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	3318      	adds	r3, #24
 800880c:	4618      	mov	r0, r3
 800880e:	f7fe fe5d 	bl	80074cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3304      	adds	r3, #4
 8008816:	4618      	mov	r0, r3
 8008818:	f7fe fe58 	bl	80074cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008820:	4b2d      	ldr	r3, [pc, #180]	; (80088d8 <xTaskResumeAll+0x124>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	d903      	bls.n	8008830 <xTaskResumeAll+0x7c>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882c:	4a2a      	ldr	r2, [pc, #168]	; (80088d8 <xTaskResumeAll+0x124>)
 800882e:	6013      	str	r3, [r2, #0]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008834:	4613      	mov	r3, r2
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4a27      	ldr	r2, [pc, #156]	; (80088dc <xTaskResumeAll+0x128>)
 800883e:	441a      	add	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	3304      	adds	r3, #4
 8008844:	4619      	mov	r1, r3
 8008846:	4610      	mov	r0, r2
 8008848:	f7fe fde3 	bl	8007412 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008850:	4b23      	ldr	r3, [pc, #140]	; (80088e0 <xTaskResumeAll+0x12c>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008856:	429a      	cmp	r2, r3
 8008858:	d302      	bcc.n	8008860 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800885a:	4b22      	ldr	r3, [pc, #136]	; (80088e4 <xTaskResumeAll+0x130>)
 800885c:	2201      	movs	r2, #1
 800885e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008860:	4b1c      	ldr	r3, [pc, #112]	; (80088d4 <xTaskResumeAll+0x120>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1cb      	bne.n	8008800 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800886e:	f000 fb55 	bl	8008f1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008872:	4b1d      	ldr	r3, [pc, #116]	; (80088e8 <xTaskResumeAll+0x134>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d010      	beq.n	80088a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800887e:	f000 f847 	bl	8008910 <xTaskIncrementTick>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008888:	4b16      	ldr	r3, [pc, #88]	; (80088e4 <xTaskResumeAll+0x130>)
 800888a:	2201      	movs	r2, #1
 800888c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3b01      	subs	r3, #1
 8008892:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1f1      	bne.n	800887e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800889a:	4b13      	ldr	r3, [pc, #76]	; (80088e8 <xTaskResumeAll+0x134>)
 800889c:	2200      	movs	r2, #0
 800889e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088a0:	4b10      	ldr	r3, [pc, #64]	; (80088e4 <xTaskResumeAll+0x130>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d009      	beq.n	80088bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80088a8:	2301      	movs	r3, #1
 80088aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80088ac:	4b0f      	ldr	r3, [pc, #60]	; (80088ec <xTaskResumeAll+0x138>)
 80088ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088bc:	f001 f9ea 	bl	8009c94 <vPortExitCritical>

	return xAlreadyYielded;
 80088c0:	68bb      	ldr	r3, [r7, #8]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	20000e28 	.word	0x20000e28
 80088d0:	20000e00 	.word	0x20000e00
 80088d4:	20000dc0 	.word	0x20000dc0
 80088d8:	20000e08 	.word	0x20000e08
 80088dc:	20000930 	.word	0x20000930
 80088e0:	2000092c 	.word	0x2000092c
 80088e4:	20000e14 	.word	0x20000e14
 80088e8:	20000e10 	.word	0x20000e10
 80088ec:	e000ed04 	.word	0xe000ed04

080088f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80088f6:	4b05      	ldr	r3, [pc, #20]	; (800890c <xTaskGetTickCount+0x1c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088fc:	687b      	ldr	r3, [r7, #4]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	370c      	adds	r7, #12
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	20000e04 	.word	0x20000e04

08008910 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008916:	2300      	movs	r3, #0
 8008918:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800891a:	4b4f      	ldr	r3, [pc, #316]	; (8008a58 <xTaskIncrementTick+0x148>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	f040 808f 	bne.w	8008a42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008924:	4b4d      	ldr	r3, [pc, #308]	; (8008a5c <xTaskIncrementTick+0x14c>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3301      	adds	r3, #1
 800892a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800892c:	4a4b      	ldr	r2, [pc, #300]	; (8008a5c <xTaskIncrementTick+0x14c>)
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d120      	bne.n	800897a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008938:	4b49      	ldr	r3, [pc, #292]	; (8008a60 <xTaskIncrementTick+0x150>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d00a      	beq.n	8008958 <xTaskIncrementTick+0x48>
	__asm volatile
 8008942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008946:	f383 8811 	msr	BASEPRI, r3
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	603b      	str	r3, [r7, #0]
}
 8008954:	bf00      	nop
 8008956:	e7fe      	b.n	8008956 <xTaskIncrementTick+0x46>
 8008958:	4b41      	ldr	r3, [pc, #260]	; (8008a60 <xTaskIncrementTick+0x150>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	60fb      	str	r3, [r7, #12]
 800895e:	4b41      	ldr	r3, [pc, #260]	; (8008a64 <xTaskIncrementTick+0x154>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4a3f      	ldr	r2, [pc, #252]	; (8008a60 <xTaskIncrementTick+0x150>)
 8008964:	6013      	str	r3, [r2, #0]
 8008966:	4a3f      	ldr	r2, [pc, #252]	; (8008a64 <xTaskIncrementTick+0x154>)
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	6013      	str	r3, [r2, #0]
 800896c:	4b3e      	ldr	r3, [pc, #248]	; (8008a68 <xTaskIncrementTick+0x158>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3301      	adds	r3, #1
 8008972:	4a3d      	ldr	r2, [pc, #244]	; (8008a68 <xTaskIncrementTick+0x158>)
 8008974:	6013      	str	r3, [r2, #0]
 8008976:	f000 fad1 	bl	8008f1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800897a:	4b3c      	ldr	r3, [pc, #240]	; (8008a6c <xTaskIncrementTick+0x15c>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	429a      	cmp	r2, r3
 8008982:	d349      	bcc.n	8008a18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008984:	4b36      	ldr	r3, [pc, #216]	; (8008a60 <xTaskIncrementTick+0x150>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d104      	bne.n	8008998 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800898e:	4b37      	ldr	r3, [pc, #220]	; (8008a6c <xTaskIncrementTick+0x15c>)
 8008990:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008994:	601a      	str	r2, [r3, #0]
					break;
 8008996:	e03f      	b.n	8008a18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008998:	4b31      	ldr	r3, [pc, #196]	; (8008a60 <xTaskIncrementTick+0x150>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80089a8:	693a      	ldr	r2, [r7, #16]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d203      	bcs.n	80089b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80089b0:	4a2e      	ldr	r2, [pc, #184]	; (8008a6c <xTaskIncrementTick+0x15c>)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80089b6:	e02f      	b.n	8008a18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	3304      	adds	r3, #4
 80089bc:	4618      	mov	r0, r3
 80089be:	f7fe fd85 	bl	80074cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d004      	beq.n	80089d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	3318      	adds	r3, #24
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fe fd7c 	bl	80074cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d8:	4b25      	ldr	r3, [pc, #148]	; (8008a70 <xTaskIncrementTick+0x160>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d903      	bls.n	80089e8 <xTaskIncrementTick+0xd8>
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e4:	4a22      	ldr	r2, [pc, #136]	; (8008a70 <xTaskIncrementTick+0x160>)
 80089e6:	6013      	str	r3, [r2, #0]
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ec:	4613      	mov	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	4413      	add	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4a1f      	ldr	r2, [pc, #124]	; (8008a74 <xTaskIncrementTick+0x164>)
 80089f6:	441a      	add	r2, r3
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	3304      	adds	r3, #4
 80089fc:	4619      	mov	r1, r3
 80089fe:	4610      	mov	r0, r2
 8008a00:	f7fe fd07 	bl	8007412 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a08:	4b1b      	ldr	r3, [pc, #108]	; (8008a78 <xTaskIncrementTick+0x168>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d3b8      	bcc.n	8008984 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008a12:	2301      	movs	r3, #1
 8008a14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a16:	e7b5      	b.n	8008984 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a18:	4b17      	ldr	r3, [pc, #92]	; (8008a78 <xTaskIncrementTick+0x168>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1e:	4915      	ldr	r1, [pc, #84]	; (8008a74 <xTaskIncrementTick+0x164>)
 8008a20:	4613      	mov	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	440b      	add	r3, r1
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d901      	bls.n	8008a34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008a30:	2301      	movs	r3, #1
 8008a32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a34:	4b11      	ldr	r3, [pc, #68]	; (8008a7c <xTaskIncrementTick+0x16c>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d007      	beq.n	8008a4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	617b      	str	r3, [r7, #20]
 8008a40:	e004      	b.n	8008a4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a42:	4b0f      	ldr	r3, [pc, #60]	; (8008a80 <xTaskIncrementTick+0x170>)
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3301      	adds	r3, #1
 8008a48:	4a0d      	ldr	r2, [pc, #52]	; (8008a80 <xTaskIncrementTick+0x170>)
 8008a4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a4c:	697b      	ldr	r3, [r7, #20]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20000e28 	.word	0x20000e28
 8008a5c:	20000e04 	.word	0x20000e04
 8008a60:	20000db8 	.word	0x20000db8
 8008a64:	20000dbc 	.word	0x20000dbc
 8008a68:	20000e18 	.word	0x20000e18
 8008a6c:	20000e20 	.word	0x20000e20
 8008a70:	20000e08 	.word	0x20000e08
 8008a74:	20000930 	.word	0x20000930
 8008a78:	2000092c 	.word	0x2000092c
 8008a7c:	20000e14 	.word	0x20000e14
 8008a80:	20000e10 	.word	0x20000e10

08008a84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a84:	b480      	push	{r7}
 8008a86:	b085      	sub	sp, #20
 8008a88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a8a:	4b28      	ldr	r3, [pc, #160]	; (8008b2c <vTaskSwitchContext+0xa8>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d003      	beq.n	8008a9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a92:	4b27      	ldr	r3, [pc, #156]	; (8008b30 <vTaskSwitchContext+0xac>)
 8008a94:	2201      	movs	r2, #1
 8008a96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a98:	e041      	b.n	8008b1e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008a9a:	4b25      	ldr	r3, [pc, #148]	; (8008b30 <vTaskSwitchContext+0xac>)
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aa0:	4b24      	ldr	r3, [pc, #144]	; (8008b34 <vTaskSwitchContext+0xb0>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	e010      	b.n	8008aca <vTaskSwitchContext+0x46>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10a      	bne.n	8008ac4 <vTaskSwitchContext+0x40>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	607b      	str	r3, [r7, #4]
}
 8008ac0:	bf00      	nop
 8008ac2:	e7fe      	b.n	8008ac2 <vTaskSwitchContext+0x3e>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3b01      	subs	r3, #1
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	491b      	ldr	r1, [pc, #108]	; (8008b38 <vTaskSwitchContext+0xb4>)
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4613      	mov	r3, r2
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	440b      	add	r3, r1
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d0e4      	beq.n	8008aa8 <vTaskSwitchContext+0x24>
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4a13      	ldr	r2, [pc, #76]	; (8008b38 <vTaskSwitchContext+0xb4>)
 8008aea:	4413      	add	r3, r2
 8008aec:	60bb      	str	r3, [r7, #8]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	605a      	str	r2, [r3, #4]
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	685a      	ldr	r2, [r3, #4]
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	3308      	adds	r3, #8
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d104      	bne.n	8008b0e <vTaskSwitchContext+0x8a>
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	685a      	ldr	r2, [r3, #4]
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	605a      	str	r2, [r3, #4]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	4a09      	ldr	r2, [pc, #36]	; (8008b3c <vTaskSwitchContext+0xb8>)
 8008b16:	6013      	str	r3, [r2, #0]
 8008b18:	4a06      	ldr	r2, [pc, #24]	; (8008b34 <vTaskSwitchContext+0xb0>)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6013      	str	r3, [r2, #0]
}
 8008b1e:	bf00      	nop
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr
 8008b2a:	bf00      	nop
 8008b2c:	20000e28 	.word	0x20000e28
 8008b30:	20000e14 	.word	0x20000e14
 8008b34:	20000e08 	.word	0x20000e08
 8008b38:	20000930 	.word	0x20000930
 8008b3c:	2000092c 	.word	0x2000092c

08008b40 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10a      	bne.n	8008b66 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	60fb      	str	r3, [r7, #12]
}
 8008b62:	bf00      	nop
 8008b64:	e7fe      	b.n	8008b64 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b66:	4b07      	ldr	r3, [pc, #28]	; (8008b84 <vTaskPlaceOnEventList+0x44>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	3318      	adds	r3, #24
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7fe fc73 	bl	800745a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b74:	2101      	movs	r1, #1
 8008b76:	6838      	ldr	r0, [r7, #0]
 8008b78:	f000 fb8a 	bl	8009290 <prvAddCurrentTaskToDelayedList>
}
 8008b7c:	bf00      	nop
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	2000092c 	.word	0x2000092c

08008b88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10a      	bne.n	8008bb0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	617b      	str	r3, [r7, #20]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bb0:	4b0a      	ldr	r3, [pc, #40]	; (8008bdc <vTaskPlaceOnEventListRestricted+0x54>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3318      	adds	r3, #24
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	68f8      	ldr	r0, [r7, #12]
 8008bba:	f7fe fc2a 	bl	8007412 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008bc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bc8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008bca:	6879      	ldr	r1, [r7, #4]
 8008bcc:	68b8      	ldr	r0, [r7, #8]
 8008bce:	f000 fb5f 	bl	8009290 <prvAddCurrentTaskToDelayedList>
	}
 8008bd2:	bf00      	nop
 8008bd4:	3718      	adds	r7, #24
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	2000092c 	.word	0x2000092c

08008be0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10a      	bne.n	8008c0c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	60fb      	str	r3, [r7, #12]
}
 8008c08:	bf00      	nop
 8008c0a:	e7fe      	b.n	8008c0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	3318      	adds	r3, #24
 8008c10:	4618      	mov	r0, r3
 8008c12:	f7fe fc5b 	bl	80074cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c16:	4b1e      	ldr	r3, [pc, #120]	; (8008c90 <xTaskRemoveFromEventList+0xb0>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d11d      	bne.n	8008c5a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c1e:	693b      	ldr	r3, [r7, #16]
 8008c20:	3304      	adds	r3, #4
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7fe fc52 	bl	80074cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c2c:	4b19      	ldr	r3, [pc, #100]	; (8008c94 <xTaskRemoveFromEventList+0xb4>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d903      	bls.n	8008c3c <xTaskRemoveFromEventList+0x5c>
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c38:	4a16      	ldr	r2, [pc, #88]	; (8008c94 <xTaskRemoveFromEventList+0xb4>)
 8008c3a:	6013      	str	r3, [r2, #0]
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c40:	4613      	mov	r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	4413      	add	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4a13      	ldr	r2, [pc, #76]	; (8008c98 <xTaskRemoveFromEventList+0xb8>)
 8008c4a:	441a      	add	r2, r3
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	3304      	adds	r3, #4
 8008c50:	4619      	mov	r1, r3
 8008c52:	4610      	mov	r0, r2
 8008c54:	f7fe fbdd 	bl	8007412 <vListInsertEnd>
 8008c58:	e005      	b.n	8008c66 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	3318      	adds	r3, #24
 8008c5e:	4619      	mov	r1, r3
 8008c60:	480e      	ldr	r0, [pc, #56]	; (8008c9c <xTaskRemoveFromEventList+0xbc>)
 8008c62:	f7fe fbd6 	bl	8007412 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c6a:	4b0d      	ldr	r3, [pc, #52]	; (8008ca0 <xTaskRemoveFromEventList+0xc0>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d905      	bls.n	8008c80 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c74:	2301      	movs	r3, #1
 8008c76:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c78:	4b0a      	ldr	r3, [pc, #40]	; (8008ca4 <xTaskRemoveFromEventList+0xc4>)
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	e001      	b.n	8008c84 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008c80:	2300      	movs	r3, #0
 8008c82:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c84:	697b      	ldr	r3, [r7, #20]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	20000e28 	.word	0x20000e28
 8008c94:	20000e08 	.word	0x20000e08
 8008c98:	20000930 	.word	0x20000930
 8008c9c:	20000dc0 	.word	0x20000dc0
 8008ca0:	2000092c 	.word	0x2000092c
 8008ca4:	20000e14 	.word	0x20000e14

08008ca8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cb0:	4b06      	ldr	r3, [pc, #24]	; (8008ccc <vTaskInternalSetTimeOutState+0x24>)
 8008cb2:	681a      	ldr	r2, [r3, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008cb8:	4b05      	ldr	r3, [pc, #20]	; (8008cd0 <vTaskInternalSetTimeOutState+0x28>)
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	605a      	str	r2, [r3, #4]
}
 8008cc0:	bf00      	nop
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	20000e18 	.word	0x20000e18
 8008cd0:	20000e04 	.word	0x20000e04

08008cd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b088      	sub	sp, #32
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10a      	bne.n	8008cfa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce8:	f383 8811 	msr	BASEPRI, r3
 8008cec:	f3bf 8f6f 	isb	sy
 8008cf0:	f3bf 8f4f 	dsb	sy
 8008cf4:	613b      	str	r3, [r7, #16]
}
 8008cf6:	bf00      	nop
 8008cf8:	e7fe      	b.n	8008cf8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d10a      	bne.n	8008d16 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	60fb      	str	r3, [r7, #12]
}
 8008d12:	bf00      	nop
 8008d14:	e7fe      	b.n	8008d14 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008d16:	f000 ff8d 	bl	8009c34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d1a:	4b1d      	ldr	r3, [pc, #116]	; (8008d90 <xTaskCheckForTimeOut+0xbc>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	1ad3      	subs	r3, r2, r3
 8008d28:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d32:	d102      	bne.n	8008d3a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d34:	2300      	movs	r3, #0
 8008d36:	61fb      	str	r3, [r7, #28]
 8008d38:	e023      	b.n	8008d82 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681a      	ldr	r2, [r3, #0]
 8008d3e:	4b15      	ldr	r3, [pc, #84]	; (8008d94 <xTaskCheckForTimeOut+0xc0>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d007      	beq.n	8008d56 <xTaskCheckForTimeOut+0x82>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	69ba      	ldr	r2, [r7, #24]
 8008d4c:	429a      	cmp	r2, r3
 8008d4e:	d302      	bcc.n	8008d56 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d50:	2301      	movs	r3, #1
 8008d52:	61fb      	str	r3, [r7, #28]
 8008d54:	e015      	b.n	8008d82 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d20b      	bcs.n	8008d78 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	1ad2      	subs	r2, r2, r3
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d6c:	6878      	ldr	r0, [r7, #4]
 8008d6e:	f7ff ff9b 	bl	8008ca8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d72:	2300      	movs	r3, #0
 8008d74:	61fb      	str	r3, [r7, #28]
 8008d76:	e004      	b.n	8008d82 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d82:	f000 ff87 	bl	8009c94 <vPortExitCritical>

	return xReturn;
 8008d86:	69fb      	ldr	r3, [r7, #28]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3720      	adds	r7, #32
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	20000e04 	.word	0x20000e04
 8008d94:	20000e18 	.word	0x20000e18

08008d98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d98:	b480      	push	{r7}
 8008d9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d9c:	4b03      	ldr	r3, [pc, #12]	; (8008dac <vTaskMissedYield+0x14>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	601a      	str	r2, [r3, #0]
}
 8008da2:	bf00      	nop
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr
 8008dac:	20000e14 	.word	0x20000e14

08008db0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008db8:	f000 f852 	bl	8008e60 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008dbc:	4b06      	ldr	r3, [pc, #24]	; (8008dd8 <prvIdleTask+0x28>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d9f9      	bls.n	8008db8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008dc4:	4b05      	ldr	r3, [pc, #20]	; (8008ddc <prvIdleTask+0x2c>)
 8008dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008dd4:	e7f0      	b.n	8008db8 <prvIdleTask+0x8>
 8008dd6:	bf00      	nop
 8008dd8:	20000930 	.word	0x20000930
 8008ddc:	e000ed04 	.word	0xe000ed04

08008de0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008de6:	2300      	movs	r3, #0
 8008de8:	607b      	str	r3, [r7, #4]
 8008dea:	e00c      	b.n	8008e06 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	4613      	mov	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4a12      	ldr	r2, [pc, #72]	; (8008e40 <prvInitialiseTaskLists+0x60>)
 8008df8:	4413      	add	r3, r2
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fe fadc 	bl	80073b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3301      	adds	r3, #1
 8008e04:	607b      	str	r3, [r7, #4]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2b37      	cmp	r3, #55	; 0x37
 8008e0a:	d9ef      	bls.n	8008dec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e0c:	480d      	ldr	r0, [pc, #52]	; (8008e44 <prvInitialiseTaskLists+0x64>)
 8008e0e:	f7fe fad3 	bl	80073b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e12:	480d      	ldr	r0, [pc, #52]	; (8008e48 <prvInitialiseTaskLists+0x68>)
 8008e14:	f7fe fad0 	bl	80073b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e18:	480c      	ldr	r0, [pc, #48]	; (8008e4c <prvInitialiseTaskLists+0x6c>)
 8008e1a:	f7fe facd 	bl	80073b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e1e:	480c      	ldr	r0, [pc, #48]	; (8008e50 <prvInitialiseTaskLists+0x70>)
 8008e20:	f7fe faca 	bl	80073b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e24:	480b      	ldr	r0, [pc, #44]	; (8008e54 <prvInitialiseTaskLists+0x74>)
 8008e26:	f7fe fac7 	bl	80073b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e2a:	4b0b      	ldr	r3, [pc, #44]	; (8008e58 <prvInitialiseTaskLists+0x78>)
 8008e2c:	4a05      	ldr	r2, [pc, #20]	; (8008e44 <prvInitialiseTaskLists+0x64>)
 8008e2e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e30:	4b0a      	ldr	r3, [pc, #40]	; (8008e5c <prvInitialiseTaskLists+0x7c>)
 8008e32:	4a05      	ldr	r2, [pc, #20]	; (8008e48 <prvInitialiseTaskLists+0x68>)
 8008e34:	601a      	str	r2, [r3, #0]
}
 8008e36:	bf00      	nop
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	20000930 	.word	0x20000930
 8008e44:	20000d90 	.word	0x20000d90
 8008e48:	20000da4 	.word	0x20000da4
 8008e4c:	20000dc0 	.word	0x20000dc0
 8008e50:	20000dd4 	.word	0x20000dd4
 8008e54:	20000dec 	.word	0x20000dec
 8008e58:	20000db8 	.word	0x20000db8
 8008e5c:	20000dbc 	.word	0x20000dbc

08008e60 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b082      	sub	sp, #8
 8008e64:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e66:	e019      	b.n	8008e9c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e68:	f000 fee4 	bl	8009c34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e6c:	4b10      	ldr	r3, [pc, #64]	; (8008eb0 <prvCheckTasksWaitingTermination+0x50>)
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	3304      	adds	r3, #4
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7fe fb27 	bl	80074cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e7e:	4b0d      	ldr	r3, [pc, #52]	; (8008eb4 <prvCheckTasksWaitingTermination+0x54>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3b01      	subs	r3, #1
 8008e84:	4a0b      	ldr	r2, [pc, #44]	; (8008eb4 <prvCheckTasksWaitingTermination+0x54>)
 8008e86:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e88:	4b0b      	ldr	r3, [pc, #44]	; (8008eb8 <prvCheckTasksWaitingTermination+0x58>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	4a0a      	ldr	r2, [pc, #40]	; (8008eb8 <prvCheckTasksWaitingTermination+0x58>)
 8008e90:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e92:	f000 feff 	bl	8009c94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f810 	bl	8008ebc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e9c:	4b06      	ldr	r3, [pc, #24]	; (8008eb8 <prvCheckTasksWaitingTermination+0x58>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d1e1      	bne.n	8008e68 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	20000dd4 	.word	0x20000dd4
 8008eb4:	20000e00 	.word	0x20000e00
 8008eb8:	20000de8 	.word	0x20000de8

08008ebc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b084      	sub	sp, #16
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d108      	bne.n	8008ee0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f001 f89c 	bl	800a010 <vPortFree>
				vPortFree( pxTCB );
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f001 f899 	bl	800a010 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ede:	e018      	b.n	8008f12 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d103      	bne.n	8008ef2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 f890 	bl	800a010 <vPortFree>
	}
 8008ef0:	e00f      	b.n	8008f12 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d00a      	beq.n	8008f12 <prvDeleteTCB+0x56>
	__asm volatile
 8008efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f00:	f383 8811 	msr	BASEPRI, r3
 8008f04:	f3bf 8f6f 	isb	sy
 8008f08:	f3bf 8f4f 	dsb	sy
 8008f0c:	60fb      	str	r3, [r7, #12]
}
 8008f0e:	bf00      	nop
 8008f10:	e7fe      	b.n	8008f10 <prvDeleteTCB+0x54>
	}
 8008f12:	bf00      	nop
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
	...

08008f1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f22:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <prvResetNextTaskUnblockTime+0x38>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d104      	bne.n	8008f36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f2c:	4b0a      	ldr	r3, [pc, #40]	; (8008f58 <prvResetNextTaskUnblockTime+0x3c>)
 8008f2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f34:	e008      	b.n	8008f48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f36:	4b07      	ldr	r3, [pc, #28]	; (8008f54 <prvResetNextTaskUnblockTime+0x38>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	4a04      	ldr	r2, [pc, #16]	; (8008f58 <prvResetNextTaskUnblockTime+0x3c>)
 8008f46:	6013      	str	r3, [r2, #0]
}
 8008f48:	bf00      	nop
 8008f4a:	370c      	adds	r7, #12
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f52:	4770      	bx	lr
 8008f54:	20000db8 	.word	0x20000db8
 8008f58:	20000e20 	.word	0x20000e20

08008f5c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b083      	sub	sp, #12
 8008f60:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008f62:	4b05      	ldr	r3, [pc, #20]	; (8008f78 <xTaskGetCurrentTaskHandle+0x1c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008f68:	687b      	ldr	r3, [r7, #4]
	}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	370c      	adds	r7, #12
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f74:	4770      	bx	lr
 8008f76:	bf00      	nop
 8008f78:	2000092c 	.word	0x2000092c

08008f7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f82:	4b0b      	ldr	r3, [pc, #44]	; (8008fb0 <xTaskGetSchedulerState+0x34>)
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d102      	bne.n	8008f90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	607b      	str	r3, [r7, #4]
 8008f8e:	e008      	b.n	8008fa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f90:	4b08      	ldr	r3, [pc, #32]	; (8008fb4 <xTaskGetSchedulerState+0x38>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d102      	bne.n	8008f9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f98:	2302      	movs	r3, #2
 8008f9a:	607b      	str	r3, [r7, #4]
 8008f9c:	e001      	b.n	8008fa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fa2:	687b      	ldr	r3, [r7, #4]
	}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	20000e0c 	.word	0x20000e0c
 8008fb4:	20000e28 	.word	0x20000e28

08008fb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b084      	sub	sp, #16
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d051      	beq.n	8009072 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd2:	4b2a      	ldr	r3, [pc, #168]	; (800907c <xTaskPriorityInherit+0xc4>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d241      	bcs.n	8009060 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	db06      	blt.n	8008ff2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fe4:	4b25      	ldr	r3, [pc, #148]	; (800907c <xTaskPriorityInherit+0xc4>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	6959      	ldr	r1, [r3, #20]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4a1f      	ldr	r2, [pc, #124]	; (8009080 <xTaskPriorityInherit+0xc8>)
 8009004:	4413      	add	r3, r2
 8009006:	4299      	cmp	r1, r3
 8009008:	d122      	bne.n	8009050 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	3304      	adds	r3, #4
 800900e:	4618      	mov	r0, r3
 8009010:	f7fe fa5c 	bl	80074cc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009014:	4b19      	ldr	r3, [pc, #100]	; (800907c <xTaskPriorityInherit+0xc4>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009022:	4b18      	ldr	r3, [pc, #96]	; (8009084 <xTaskPriorityInherit+0xcc>)
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	429a      	cmp	r2, r3
 8009028:	d903      	bls.n	8009032 <xTaskPriorityInherit+0x7a>
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902e:	4a15      	ldr	r2, [pc, #84]	; (8009084 <xTaskPriorityInherit+0xcc>)
 8009030:	6013      	str	r3, [r2, #0]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009036:	4613      	mov	r3, r2
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4413      	add	r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4a10      	ldr	r2, [pc, #64]	; (8009080 <xTaskPriorityInherit+0xc8>)
 8009040:	441a      	add	r2, r3
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	3304      	adds	r3, #4
 8009046:	4619      	mov	r1, r3
 8009048:	4610      	mov	r0, r2
 800904a:	f7fe f9e2 	bl	8007412 <vListInsertEnd>
 800904e:	e004      	b.n	800905a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009050:	4b0a      	ldr	r3, [pc, #40]	; (800907c <xTaskPriorityInherit+0xc4>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800905a:	2301      	movs	r3, #1
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	e008      	b.n	8009072 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009064:	4b05      	ldr	r3, [pc, #20]	; (800907c <xTaskPriorityInherit+0xc4>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906a:	429a      	cmp	r2, r3
 800906c:	d201      	bcs.n	8009072 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800906e:	2301      	movs	r3, #1
 8009070:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009072:	68fb      	ldr	r3, [r7, #12]
	}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	2000092c 	.word	0x2000092c
 8009080:	20000930 	.word	0x20000930
 8009084:	20000e08 	.word	0x20000e08

08009088 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009088:	b580      	push	{r7, lr}
 800908a:	b086      	sub	sp, #24
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009094:	2300      	movs	r3, #0
 8009096:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d056      	beq.n	800914c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800909e:	4b2e      	ldr	r3, [pc, #184]	; (8009158 <xTaskPriorityDisinherit+0xd0>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	693a      	ldr	r2, [r7, #16]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d00a      	beq.n	80090be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80090a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	60fb      	str	r3, [r7, #12]
}
 80090ba:	bf00      	nop
 80090bc:	e7fe      	b.n	80090bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d10a      	bne.n	80090dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	60bb      	str	r3, [r7, #8]
}
 80090d8:	bf00      	nop
 80090da:	e7fe      	b.n	80090da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090e0:	1e5a      	subs	r2, r3, #1
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d02c      	beq.n	800914c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d128      	bne.n	800914c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	3304      	adds	r3, #4
 80090fe:	4618      	mov	r0, r3
 8009100:	f7fe f9e4 	bl	80074cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009110:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800911c:	4b0f      	ldr	r3, [pc, #60]	; (800915c <xTaskPriorityDisinherit+0xd4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	429a      	cmp	r2, r3
 8009122:	d903      	bls.n	800912c <xTaskPriorityDisinherit+0xa4>
 8009124:	693b      	ldr	r3, [r7, #16]
 8009126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009128:	4a0c      	ldr	r2, [pc, #48]	; (800915c <xTaskPriorityDisinherit+0xd4>)
 800912a:	6013      	str	r3, [r2, #0]
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009130:	4613      	mov	r3, r2
 8009132:	009b      	lsls	r3, r3, #2
 8009134:	4413      	add	r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4a09      	ldr	r2, [pc, #36]	; (8009160 <xTaskPriorityDisinherit+0xd8>)
 800913a:	441a      	add	r2, r3
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	3304      	adds	r3, #4
 8009140:	4619      	mov	r1, r3
 8009142:	4610      	mov	r0, r2
 8009144:	f7fe f965 	bl	8007412 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009148:	2301      	movs	r3, #1
 800914a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800914c:	697b      	ldr	r3, [r7, #20]
	}
 800914e:	4618      	mov	r0, r3
 8009150:	3718      	adds	r7, #24
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	2000092c 	.word	0x2000092c
 800915c:	20000e08 	.word	0x20000e08
 8009160:	20000930 	.word	0x20000930

08009164 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009164:	b580      	push	{r7, lr}
 8009166:	b088      	sub	sp, #32
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009172:	2301      	movs	r3, #1
 8009174:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d06a      	beq.n	8009252 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009180:	2b00      	cmp	r3, #0
 8009182:	d10a      	bne.n	800919a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	60fb      	str	r3, [r7, #12]
}
 8009196:	bf00      	nop
 8009198:	e7fe      	b.n	8009198 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d902      	bls.n	80091aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	61fb      	str	r3, [r7, #28]
 80091a8:	e002      	b.n	80091b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b4:	69fa      	ldr	r2, [r7, #28]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d04b      	beq.n	8009252 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80091ba:	69bb      	ldr	r3, [r7, #24]
 80091bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091be:	697a      	ldr	r2, [r7, #20]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d146      	bne.n	8009252 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80091c4:	4b25      	ldr	r3, [pc, #148]	; (800925c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	69ba      	ldr	r2, [r7, #24]
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d10a      	bne.n	80091e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80091ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d2:	f383 8811 	msr	BASEPRI, r3
 80091d6:	f3bf 8f6f 	isb	sy
 80091da:	f3bf 8f4f 	dsb	sy
 80091de:	60bb      	str	r3, [r7, #8]
}
 80091e0:	bf00      	nop
 80091e2:	e7fe      	b.n	80091e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80091e4:	69bb      	ldr	r3, [r7, #24]
 80091e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	69fa      	ldr	r2, [r7, #28]
 80091ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	699b      	ldr	r3, [r3, #24]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	db04      	blt.n	8009202 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009202:	69bb      	ldr	r3, [r7, #24]
 8009204:	6959      	ldr	r1, [r3, #20]
 8009206:	693a      	ldr	r2, [r7, #16]
 8009208:	4613      	mov	r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4413      	add	r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4a13      	ldr	r2, [pc, #76]	; (8009260 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009212:	4413      	add	r3, r2
 8009214:	4299      	cmp	r1, r3
 8009216:	d11c      	bne.n	8009252 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	3304      	adds	r3, #4
 800921c:	4618      	mov	r0, r3
 800921e:	f7fe f955 	bl	80074cc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009222:	69bb      	ldr	r3, [r7, #24]
 8009224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009226:	4b0f      	ldr	r3, [pc, #60]	; (8009264 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d903      	bls.n	8009236 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009232:	4a0c      	ldr	r2, [pc, #48]	; (8009264 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009234:	6013      	str	r3, [r2, #0]
 8009236:	69bb      	ldr	r3, [r7, #24]
 8009238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800923a:	4613      	mov	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	009b      	lsls	r3, r3, #2
 8009242:	4a07      	ldr	r2, [pc, #28]	; (8009260 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009244:	441a      	add	r2, r3
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	3304      	adds	r3, #4
 800924a:	4619      	mov	r1, r3
 800924c:	4610      	mov	r0, r2
 800924e:	f7fe f8e0 	bl	8007412 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009252:	bf00      	nop
 8009254:	3720      	adds	r7, #32
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	2000092c 	.word	0x2000092c
 8009260:	20000930 	.word	0x20000930
 8009264:	20000e08 	.word	0x20000e08

08009268 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009268:	b480      	push	{r7}
 800926a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800926c:	4b07      	ldr	r3, [pc, #28]	; (800928c <pvTaskIncrementMutexHeldCount+0x24>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d004      	beq.n	800927e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009274:	4b05      	ldr	r3, [pc, #20]	; (800928c <pvTaskIncrementMutexHeldCount+0x24>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800927a:	3201      	adds	r2, #1
 800927c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800927e:	4b03      	ldr	r3, [pc, #12]	; (800928c <pvTaskIncrementMutexHeldCount+0x24>)
 8009280:	681b      	ldr	r3, [r3, #0]
	}
 8009282:	4618      	mov	r0, r3
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	2000092c 	.word	0x2000092c

08009290 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800929a:	4b21      	ldr	r3, [pc, #132]	; (8009320 <prvAddCurrentTaskToDelayedList+0x90>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092a0:	4b20      	ldr	r3, [pc, #128]	; (8009324 <prvAddCurrentTaskToDelayedList+0x94>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3304      	adds	r3, #4
 80092a6:	4618      	mov	r0, r3
 80092a8:	f7fe f910 	bl	80074cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092b2:	d10a      	bne.n	80092ca <prvAddCurrentTaskToDelayedList+0x3a>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d007      	beq.n	80092ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092ba:	4b1a      	ldr	r3, [pc, #104]	; (8009324 <prvAddCurrentTaskToDelayedList+0x94>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	3304      	adds	r3, #4
 80092c0:	4619      	mov	r1, r3
 80092c2:	4819      	ldr	r0, [pc, #100]	; (8009328 <prvAddCurrentTaskToDelayedList+0x98>)
 80092c4:	f7fe f8a5 	bl	8007412 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80092c8:	e026      	b.n	8009318 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80092ca:	68fa      	ldr	r2, [r7, #12]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	4413      	add	r3, r2
 80092d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80092d2:	4b14      	ldr	r3, [pc, #80]	; (8009324 <prvAddCurrentTaskToDelayedList+0x94>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	68ba      	ldr	r2, [r7, #8]
 80092d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d209      	bcs.n	80092f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092e2:	4b12      	ldr	r3, [pc, #72]	; (800932c <prvAddCurrentTaskToDelayedList+0x9c>)
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	4b0f      	ldr	r3, [pc, #60]	; (8009324 <prvAddCurrentTaskToDelayedList+0x94>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	3304      	adds	r3, #4
 80092ec:	4619      	mov	r1, r3
 80092ee:	4610      	mov	r0, r2
 80092f0:	f7fe f8b3 	bl	800745a <vListInsert>
}
 80092f4:	e010      	b.n	8009318 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092f6:	4b0e      	ldr	r3, [pc, #56]	; (8009330 <prvAddCurrentTaskToDelayedList+0xa0>)
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <prvAddCurrentTaskToDelayedList+0x94>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	3304      	adds	r3, #4
 8009300:	4619      	mov	r1, r3
 8009302:	4610      	mov	r0, r2
 8009304:	f7fe f8a9 	bl	800745a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009308:	4b0a      	ldr	r3, [pc, #40]	; (8009334 <prvAddCurrentTaskToDelayedList+0xa4>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68ba      	ldr	r2, [r7, #8]
 800930e:	429a      	cmp	r2, r3
 8009310:	d202      	bcs.n	8009318 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009312:	4a08      	ldr	r2, [pc, #32]	; (8009334 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	6013      	str	r3, [r2, #0]
}
 8009318:	bf00      	nop
 800931a:	3710      	adds	r7, #16
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	20000e04 	.word	0x20000e04
 8009324:	2000092c 	.word	0x2000092c
 8009328:	20000dec 	.word	0x20000dec
 800932c:	20000dbc 	.word	0x20000dbc
 8009330:	20000db8 	.word	0x20000db8
 8009334:	20000e20 	.word	0x20000e20

08009338 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b08a      	sub	sp, #40	; 0x28
 800933c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800933e:	2300      	movs	r3, #0
 8009340:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009342:	f000 fb07 	bl	8009954 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009346:	4b1c      	ldr	r3, [pc, #112]	; (80093b8 <xTimerCreateTimerTask+0x80>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d021      	beq.n	8009392 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800934e:	2300      	movs	r3, #0
 8009350:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009352:	2300      	movs	r3, #0
 8009354:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009356:	1d3a      	adds	r2, r7, #4
 8009358:	f107 0108 	add.w	r1, r7, #8
 800935c:	f107 030c 	add.w	r3, r7, #12
 8009360:	4618      	mov	r0, r3
 8009362:	f7fe f80f 	bl	8007384 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009366:	6879      	ldr	r1, [r7, #4]
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	9202      	str	r2, [sp, #8]
 800936e:	9301      	str	r3, [sp, #4]
 8009370:	2302      	movs	r3, #2
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	2300      	movs	r3, #0
 8009376:	460a      	mov	r2, r1
 8009378:	4910      	ldr	r1, [pc, #64]	; (80093bc <xTimerCreateTimerTask+0x84>)
 800937a:	4811      	ldr	r0, [pc, #68]	; (80093c0 <xTimerCreateTimerTask+0x88>)
 800937c:	f7fe ffd0 	bl	8008320 <xTaskCreateStatic>
 8009380:	4603      	mov	r3, r0
 8009382:	4a10      	ldr	r2, [pc, #64]	; (80093c4 <xTimerCreateTimerTask+0x8c>)
 8009384:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009386:	4b0f      	ldr	r3, [pc, #60]	; (80093c4 <xTimerCreateTimerTask+0x8c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d001      	beq.n	8009392 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800938e:	2301      	movs	r3, #1
 8009390:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d10a      	bne.n	80093ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939c:	f383 8811 	msr	BASEPRI, r3
 80093a0:	f3bf 8f6f 	isb	sy
 80093a4:	f3bf 8f4f 	dsb	sy
 80093a8:	613b      	str	r3, [r7, #16]
}
 80093aa:	bf00      	nop
 80093ac:	e7fe      	b.n	80093ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80093ae:	697b      	ldr	r3, [r7, #20]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3718      	adds	r7, #24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20000e5c 	.word	0x20000e5c
 80093bc:	0800b7cc 	.word	0x0800b7cc
 80093c0:	080094fd 	.word	0x080094fd
 80093c4:	20000e60 	.word	0x20000e60

080093c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b08a      	sub	sp, #40	; 0x28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80093d6:	2300      	movs	r3, #0
 80093d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d10a      	bne.n	80093f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80093e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e4:	f383 8811 	msr	BASEPRI, r3
 80093e8:	f3bf 8f6f 	isb	sy
 80093ec:	f3bf 8f4f 	dsb	sy
 80093f0:	623b      	str	r3, [r7, #32]
}
 80093f2:	bf00      	nop
 80093f4:	e7fe      	b.n	80093f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80093f6:	4b1a      	ldr	r3, [pc, #104]	; (8009460 <xTimerGenericCommand+0x98>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d02a      	beq.n	8009454 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b05      	cmp	r3, #5
 800940e:	dc18      	bgt.n	8009442 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009410:	f7ff fdb4 	bl	8008f7c <xTaskGetSchedulerState>
 8009414:	4603      	mov	r3, r0
 8009416:	2b02      	cmp	r3, #2
 8009418:	d109      	bne.n	800942e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800941a:	4b11      	ldr	r3, [pc, #68]	; (8009460 <xTimerGenericCommand+0x98>)
 800941c:	6818      	ldr	r0, [r3, #0]
 800941e:	f107 0110 	add.w	r1, r7, #16
 8009422:	2300      	movs	r3, #0
 8009424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009426:	f7fe fa6f 	bl	8007908 <xQueueGenericSend>
 800942a:	6278      	str	r0, [r7, #36]	; 0x24
 800942c:	e012      	b.n	8009454 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800942e:	4b0c      	ldr	r3, [pc, #48]	; (8009460 <xTimerGenericCommand+0x98>)
 8009430:	6818      	ldr	r0, [r3, #0]
 8009432:	f107 0110 	add.w	r1, r7, #16
 8009436:	2300      	movs	r3, #0
 8009438:	2200      	movs	r2, #0
 800943a:	f7fe fa65 	bl	8007908 <xQueueGenericSend>
 800943e:	6278      	str	r0, [r7, #36]	; 0x24
 8009440:	e008      	b.n	8009454 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009442:	4b07      	ldr	r3, [pc, #28]	; (8009460 <xTimerGenericCommand+0x98>)
 8009444:	6818      	ldr	r0, [r3, #0]
 8009446:	f107 0110 	add.w	r1, r7, #16
 800944a:	2300      	movs	r3, #0
 800944c:	683a      	ldr	r2, [r7, #0]
 800944e:	f7fe fb59 	bl	8007b04 <xQueueGenericSendFromISR>
 8009452:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009456:	4618      	mov	r0, r3
 8009458:	3728      	adds	r7, #40	; 0x28
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	20000e5c 	.word	0x20000e5c

08009464 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af02      	add	r7, sp, #8
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800946e:	4b22      	ldr	r3, [pc, #136]	; (80094f8 <prvProcessExpiredTimer+0x94>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	68db      	ldr	r3, [r3, #12]
 8009476:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	3304      	adds	r3, #4
 800947c:	4618      	mov	r0, r3
 800947e:	f7fe f825 	bl	80074cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009488:	f003 0304 	and.w	r3, r3, #4
 800948c:	2b00      	cmp	r3, #0
 800948e:	d022      	beq.n	80094d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	699a      	ldr	r2, [r3, #24]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	18d1      	adds	r1, r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	6978      	ldr	r0, [r7, #20]
 800949e:	f000 f8d1 	bl	8009644 <prvInsertTimerInActiveList>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d01f      	beq.n	80094e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094a8:	2300      	movs	r3, #0
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	2300      	movs	r3, #0
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	2100      	movs	r1, #0
 80094b2:	6978      	ldr	r0, [r7, #20]
 80094b4:	f7ff ff88 	bl	80093c8 <xTimerGenericCommand>
 80094b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d113      	bne.n	80094e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	60fb      	str	r3, [r7, #12]
}
 80094d2:	bf00      	nop
 80094d4:	e7fe      	b.n	80094d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80094dc:	f023 0301 	bic.w	r3, r3, #1
 80094e0:	b2da      	uxtb	r2, r3
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094e8:	697b      	ldr	r3, [r7, #20]
 80094ea:	6a1b      	ldr	r3, [r3, #32]
 80094ec:	6978      	ldr	r0, [r7, #20]
 80094ee:	4798      	blx	r3
}
 80094f0:	bf00      	nop
 80094f2:	3718      	adds	r7, #24
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}
 80094f8:	20000e54 	.word	0x20000e54

080094fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009504:	f107 0308 	add.w	r3, r7, #8
 8009508:	4618      	mov	r0, r3
 800950a:	f000 f857 	bl	80095bc <prvGetNextExpireTime>
 800950e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	4619      	mov	r1, r3
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f000 f803 	bl	8009520 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800951a:	f000 f8d5 	bl	80096c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800951e:	e7f1      	b.n	8009504 <prvTimerTask+0x8>

08009520 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800952a:	f7ff f935 	bl	8008798 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800952e:	f107 0308 	add.w	r3, r7, #8
 8009532:	4618      	mov	r0, r3
 8009534:	f000 f866 	bl	8009604 <prvSampleTimeNow>
 8009538:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d130      	bne.n	80095a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d10a      	bne.n	800955c <prvProcessTimerOrBlockTask+0x3c>
 8009546:	687a      	ldr	r2, [r7, #4]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	429a      	cmp	r2, r3
 800954c:	d806      	bhi.n	800955c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800954e:	f7ff f931 	bl	80087b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009552:	68f9      	ldr	r1, [r7, #12]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7ff ff85 	bl	8009464 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800955a:	e024      	b.n	80095a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d008      	beq.n	8009574 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009562:	4b13      	ldr	r3, [pc, #76]	; (80095b0 <prvProcessTimerOrBlockTask+0x90>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d101      	bne.n	8009570 <prvProcessTimerOrBlockTask+0x50>
 800956c:	2301      	movs	r3, #1
 800956e:	e000      	b.n	8009572 <prvProcessTimerOrBlockTask+0x52>
 8009570:	2300      	movs	r3, #0
 8009572:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009574:	4b0f      	ldr	r3, [pc, #60]	; (80095b4 <prvProcessTimerOrBlockTask+0x94>)
 8009576:	6818      	ldr	r0, [r3, #0]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	1ad3      	subs	r3, r2, r3
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	4619      	mov	r1, r3
 8009582:	f7fe fe99 	bl	80082b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009586:	f7ff f915 	bl	80087b4 <xTaskResumeAll>
 800958a:	4603      	mov	r3, r0
 800958c:	2b00      	cmp	r3, #0
 800958e:	d10a      	bne.n	80095a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009590:	4b09      	ldr	r3, [pc, #36]	; (80095b8 <prvProcessTimerOrBlockTask+0x98>)
 8009592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009596:	601a      	str	r2, [r3, #0]
 8009598:	f3bf 8f4f 	dsb	sy
 800959c:	f3bf 8f6f 	isb	sy
}
 80095a0:	e001      	b.n	80095a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80095a2:	f7ff f907 	bl	80087b4 <xTaskResumeAll>
}
 80095a6:	bf00      	nop
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20000e58 	.word	0x20000e58
 80095b4:	20000e5c 	.word	0x20000e5c
 80095b8:	e000ed04 	.word	0xe000ed04

080095bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80095c4:	4b0e      	ldr	r3, [pc, #56]	; (8009600 <prvGetNextExpireTime+0x44>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d101      	bne.n	80095d2 <prvGetNextExpireTime+0x16>
 80095ce:	2201      	movs	r2, #1
 80095d0:	e000      	b.n	80095d4 <prvGetNextExpireTime+0x18>
 80095d2:	2200      	movs	r2, #0
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d105      	bne.n	80095ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095e0:	4b07      	ldr	r3, [pc, #28]	; (8009600 <prvGetNextExpireTime+0x44>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	60fb      	str	r3, [r7, #12]
 80095ea:	e001      	b.n	80095f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80095ec:	2300      	movs	r3, #0
 80095ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80095f0:	68fb      	ldr	r3, [r7, #12]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3714      	adds	r7, #20
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	20000e54 	.word	0x20000e54

08009604 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800960c:	f7ff f970 	bl	80088f0 <xTaskGetTickCount>
 8009610:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009612:	4b0b      	ldr	r3, [pc, #44]	; (8009640 <prvSampleTimeNow+0x3c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	68fa      	ldr	r2, [r7, #12]
 8009618:	429a      	cmp	r2, r3
 800961a:	d205      	bcs.n	8009628 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800961c:	f000 f936 	bl	800988c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2201      	movs	r2, #1
 8009624:	601a      	str	r2, [r3, #0]
 8009626:	e002      	b.n	800962e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800962e:	4a04      	ldr	r2, [pc, #16]	; (8009640 <prvSampleTimeNow+0x3c>)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009634:	68fb      	ldr	r3, [r7, #12]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}
 800963e:	bf00      	nop
 8009640:	20000e64 	.word	0x20000e64

08009644 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	60f8      	str	r0, [r7, #12]
 800964c:	60b9      	str	r1, [r7, #8]
 800964e:	607a      	str	r2, [r7, #4]
 8009650:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009652:	2300      	movs	r3, #0
 8009654:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	68ba      	ldr	r2, [r7, #8]
 800965a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	68fa      	ldr	r2, [r7, #12]
 8009660:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	429a      	cmp	r2, r3
 8009668:	d812      	bhi.n	8009690 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	1ad2      	subs	r2, r2, r3
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	699b      	ldr	r3, [r3, #24]
 8009674:	429a      	cmp	r2, r3
 8009676:	d302      	bcc.n	800967e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009678:	2301      	movs	r3, #1
 800967a:	617b      	str	r3, [r7, #20]
 800967c:	e01b      	b.n	80096b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800967e:	4b10      	ldr	r3, [pc, #64]	; (80096c0 <prvInsertTimerInActiveList+0x7c>)
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	3304      	adds	r3, #4
 8009686:	4619      	mov	r1, r3
 8009688:	4610      	mov	r0, r2
 800968a:	f7fd fee6 	bl	800745a <vListInsert>
 800968e:	e012      	b.n	80096b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009690:	687a      	ldr	r2, [r7, #4]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	429a      	cmp	r2, r3
 8009696:	d206      	bcs.n	80096a6 <prvInsertTimerInActiveList+0x62>
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	429a      	cmp	r2, r3
 800969e:	d302      	bcc.n	80096a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80096a0:	2301      	movs	r3, #1
 80096a2:	617b      	str	r3, [r7, #20]
 80096a4:	e007      	b.n	80096b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096a6:	4b07      	ldr	r3, [pc, #28]	; (80096c4 <prvInsertTimerInActiveList+0x80>)
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	3304      	adds	r3, #4
 80096ae:	4619      	mov	r1, r3
 80096b0:	4610      	mov	r0, r2
 80096b2:	f7fd fed2 	bl	800745a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80096b6:	697b      	ldr	r3, [r7, #20]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20000e58 	.word	0x20000e58
 80096c4:	20000e54 	.word	0x20000e54

080096c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b08e      	sub	sp, #56	; 0x38
 80096cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096ce:	e0ca      	b.n	8009866 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	da18      	bge.n	8009708 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80096d6:	1d3b      	adds	r3, r7, #4
 80096d8:	3304      	adds	r3, #4
 80096da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80096dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10a      	bne.n	80096f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	61fb      	str	r3, [r7, #28]
}
 80096f4:	bf00      	nop
 80096f6:	e7fe      	b.n	80096f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80096f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096fe:	6850      	ldr	r0, [r2, #4]
 8009700:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009702:	6892      	ldr	r2, [r2, #8]
 8009704:	4611      	mov	r1, r2
 8009706:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	f2c0 80ab 	blt.w	8009866 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009716:	695b      	ldr	r3, [r3, #20]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d004      	beq.n	8009726 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800971c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971e:	3304      	adds	r3, #4
 8009720:	4618      	mov	r0, r3
 8009722:	f7fd fed3 	bl	80074cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009726:	463b      	mov	r3, r7
 8009728:	4618      	mov	r0, r3
 800972a:	f7ff ff6b 	bl	8009604 <prvSampleTimeNow>
 800972e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b09      	cmp	r3, #9
 8009734:	f200 8096 	bhi.w	8009864 <prvProcessReceivedCommands+0x19c>
 8009738:	a201      	add	r2, pc, #4	; (adr r2, 8009740 <prvProcessReceivedCommands+0x78>)
 800973a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973e:	bf00      	nop
 8009740:	08009769 	.word	0x08009769
 8009744:	08009769 	.word	0x08009769
 8009748:	08009769 	.word	0x08009769
 800974c:	080097dd 	.word	0x080097dd
 8009750:	080097f1 	.word	0x080097f1
 8009754:	0800983b 	.word	0x0800983b
 8009758:	08009769 	.word	0x08009769
 800975c:	08009769 	.word	0x08009769
 8009760:	080097dd 	.word	0x080097dd
 8009764:	080097f1 	.word	0x080097f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800976e:	f043 0301 	orr.w	r3, r3, #1
 8009772:	b2da      	uxtb	r2, r3
 8009774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800977a:	68ba      	ldr	r2, [r7, #8]
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	18d1      	adds	r1, r2, r3
 8009782:	68bb      	ldr	r3, [r7, #8]
 8009784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009788:	f7ff ff5c 	bl	8009644 <prvInsertTimerInActiveList>
 800978c:	4603      	mov	r3, r0
 800978e:	2b00      	cmp	r3, #0
 8009790:	d069      	beq.n	8009866 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009798:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800979a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097a0:	f003 0304 	and.w	r3, r3, #4
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d05e      	beq.n	8009866 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80097a8:	68ba      	ldr	r2, [r7, #8]
 80097aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	441a      	add	r2, r3
 80097b0:	2300      	movs	r3, #0
 80097b2:	9300      	str	r3, [sp, #0]
 80097b4:	2300      	movs	r3, #0
 80097b6:	2100      	movs	r1, #0
 80097b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097ba:	f7ff fe05 	bl	80093c8 <xTimerGenericCommand>
 80097be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80097c0:	6a3b      	ldr	r3, [r7, #32]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d14f      	bne.n	8009866 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80097c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ca:	f383 8811 	msr	BASEPRI, r3
 80097ce:	f3bf 8f6f 	isb	sy
 80097d2:	f3bf 8f4f 	dsb	sy
 80097d6:	61bb      	str	r3, [r7, #24]
}
 80097d8:	bf00      	nop
 80097da:	e7fe      	b.n	80097da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097e2:	f023 0301 	bic.w	r3, r3, #1
 80097e6:	b2da      	uxtb	r2, r3
 80097e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80097ee:	e03a      	b.n	8009866 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097f6:	f043 0301 	orr.w	r3, r3, #1
 80097fa:	b2da      	uxtb	r2, r3
 80097fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009806:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10a      	bne.n	8009826 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	617b      	str	r3, [r7, #20]
}
 8009822:	bf00      	nop
 8009824:	e7fe      	b.n	8009824 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009828:	699a      	ldr	r2, [r3, #24]
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	18d1      	adds	r1, r2, r3
 800982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009834:	f7ff ff06 	bl	8009644 <prvInsertTimerInActiveList>
					break;
 8009838:	e015      	b.n	8009866 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800983a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800983c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009840:	f003 0302 	and.w	r3, r3, #2
 8009844:	2b00      	cmp	r3, #0
 8009846:	d103      	bne.n	8009850 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800984a:	f000 fbe1 	bl	800a010 <vPortFree>
 800984e:	e00a      	b.n	8009866 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009852:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009856:	f023 0301 	bic.w	r3, r3, #1
 800985a:	b2da      	uxtb	r2, r3
 800985c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009862:	e000      	b.n	8009866 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009864:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009866:	4b08      	ldr	r3, [pc, #32]	; (8009888 <prvProcessReceivedCommands+0x1c0>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	1d39      	adds	r1, r7, #4
 800986c:	2200      	movs	r2, #0
 800986e:	4618      	mov	r0, r3
 8009870:	f7fe f9e4 	bl	8007c3c <xQueueReceive>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	f47f af2a 	bne.w	80096d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800987c:	bf00      	nop
 800987e:	bf00      	nop
 8009880:	3730      	adds	r7, #48	; 0x30
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	20000e5c 	.word	0x20000e5c

0800988c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b088      	sub	sp, #32
 8009890:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009892:	e048      	b.n	8009926 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009894:	4b2d      	ldr	r3, [pc, #180]	; (800994c <prvSwitchTimerLists+0xc0>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800989e:	4b2b      	ldr	r3, [pc, #172]	; (800994c <prvSwitchTimerLists+0xc0>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	3304      	adds	r3, #4
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7fd fe0d 	bl	80074cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6a1b      	ldr	r3, [r3, #32]
 80098b6:	68f8      	ldr	r0, [r7, #12]
 80098b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098c0:	f003 0304 	and.w	r3, r3, #4
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d02e      	beq.n	8009926 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	699b      	ldr	r3, [r3, #24]
 80098cc:	693a      	ldr	r2, [r7, #16]
 80098ce:	4413      	add	r3, r2
 80098d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d90e      	bls.n	80098f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098e6:	4b19      	ldr	r3, [pc, #100]	; (800994c <prvSwitchTimerLists+0xc0>)
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3304      	adds	r3, #4
 80098ee:	4619      	mov	r1, r3
 80098f0:	4610      	mov	r0, r2
 80098f2:	f7fd fdb2 	bl	800745a <vListInsert>
 80098f6:	e016      	b.n	8009926 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098f8:	2300      	movs	r3, #0
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	2300      	movs	r3, #0
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	2100      	movs	r1, #0
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f7ff fd60 	bl	80093c8 <xTimerGenericCommand>
 8009908:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d10a      	bne.n	8009926 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	603b      	str	r3, [r7, #0]
}
 8009922:	bf00      	nop
 8009924:	e7fe      	b.n	8009924 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009926:	4b09      	ldr	r3, [pc, #36]	; (800994c <prvSwitchTimerLists+0xc0>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d1b1      	bne.n	8009894 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009930:	4b06      	ldr	r3, [pc, #24]	; (800994c <prvSwitchTimerLists+0xc0>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009936:	4b06      	ldr	r3, [pc, #24]	; (8009950 <prvSwitchTimerLists+0xc4>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a04      	ldr	r2, [pc, #16]	; (800994c <prvSwitchTimerLists+0xc0>)
 800993c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800993e:	4a04      	ldr	r2, [pc, #16]	; (8009950 <prvSwitchTimerLists+0xc4>)
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	6013      	str	r3, [r2, #0]
}
 8009944:	bf00      	nop
 8009946:	3718      	adds	r7, #24
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	20000e54 	.word	0x20000e54
 8009950:	20000e58 	.word	0x20000e58

08009954 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800995a:	f000 f96b 	bl	8009c34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800995e:	4b15      	ldr	r3, [pc, #84]	; (80099b4 <prvCheckForValidListAndQueue+0x60>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d120      	bne.n	80099a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009966:	4814      	ldr	r0, [pc, #80]	; (80099b8 <prvCheckForValidListAndQueue+0x64>)
 8009968:	f7fd fd26 	bl	80073b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800996c:	4813      	ldr	r0, [pc, #76]	; (80099bc <prvCheckForValidListAndQueue+0x68>)
 800996e:	f7fd fd23 	bl	80073b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009972:	4b13      	ldr	r3, [pc, #76]	; (80099c0 <prvCheckForValidListAndQueue+0x6c>)
 8009974:	4a10      	ldr	r2, [pc, #64]	; (80099b8 <prvCheckForValidListAndQueue+0x64>)
 8009976:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009978:	4b12      	ldr	r3, [pc, #72]	; (80099c4 <prvCheckForValidListAndQueue+0x70>)
 800997a:	4a10      	ldr	r2, [pc, #64]	; (80099bc <prvCheckForValidListAndQueue+0x68>)
 800997c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800997e:	2300      	movs	r3, #0
 8009980:	9300      	str	r3, [sp, #0]
 8009982:	4b11      	ldr	r3, [pc, #68]	; (80099c8 <prvCheckForValidListAndQueue+0x74>)
 8009984:	4a11      	ldr	r2, [pc, #68]	; (80099cc <prvCheckForValidListAndQueue+0x78>)
 8009986:	2110      	movs	r1, #16
 8009988:	200a      	movs	r0, #10
 800998a:	f7fd fe31 	bl	80075f0 <xQueueGenericCreateStatic>
 800998e:	4603      	mov	r3, r0
 8009990:	4a08      	ldr	r2, [pc, #32]	; (80099b4 <prvCheckForValidListAndQueue+0x60>)
 8009992:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009994:	4b07      	ldr	r3, [pc, #28]	; (80099b4 <prvCheckForValidListAndQueue+0x60>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d005      	beq.n	80099a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800999c:	4b05      	ldr	r3, [pc, #20]	; (80099b4 <prvCheckForValidListAndQueue+0x60>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	490b      	ldr	r1, [pc, #44]	; (80099d0 <prvCheckForValidListAndQueue+0x7c>)
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7fe fc5e 	bl	8008264 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80099a8:	f000 f974 	bl	8009c94 <vPortExitCritical>
}
 80099ac:	bf00      	nop
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20000e5c 	.word	0x20000e5c
 80099b8:	20000e2c 	.word	0x20000e2c
 80099bc:	20000e40 	.word	0x20000e40
 80099c0:	20000e54 	.word	0x20000e54
 80099c4:	20000e58 	.word	0x20000e58
 80099c8:	20000f08 	.word	0x20000f08
 80099cc:	20000e68 	.word	0x20000e68
 80099d0:	0800b7d4 	.word	0x0800b7d4

080099d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	3b04      	subs	r3, #4
 80099e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80099ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	3b04      	subs	r3, #4
 80099f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	f023 0201 	bic.w	r2, r3, #1
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	3b04      	subs	r3, #4
 8009a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009a04:	4a0c      	ldr	r2, [pc, #48]	; (8009a38 <pxPortInitialiseStack+0x64>)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	3b14      	subs	r3, #20
 8009a0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009a10:	687a      	ldr	r2, [r7, #4]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	3b04      	subs	r3, #4
 8009a1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f06f 0202 	mvn.w	r2, #2
 8009a22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	3b20      	subs	r3, #32
 8009a28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3714      	adds	r7, #20
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	08009a3d 	.word	0x08009a3d

08009a3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a42:	2300      	movs	r3, #0
 8009a44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a46:	4b12      	ldr	r3, [pc, #72]	; (8009a90 <prvTaskExitError+0x54>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a4e:	d00a      	beq.n	8009a66 <prvTaskExitError+0x2a>
	__asm volatile
 8009a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	60fb      	str	r3, [r7, #12]
}
 8009a62:	bf00      	nop
 8009a64:	e7fe      	b.n	8009a64 <prvTaskExitError+0x28>
	__asm volatile
 8009a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a6a:	f383 8811 	msr	BASEPRI, r3
 8009a6e:	f3bf 8f6f 	isb	sy
 8009a72:	f3bf 8f4f 	dsb	sy
 8009a76:	60bb      	str	r3, [r7, #8]
}
 8009a78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a7a:	bf00      	nop
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0fc      	beq.n	8009a7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a82:	bf00      	nop
 8009a84:	bf00      	nop
 8009a86:	3714      	adds	r7, #20
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr
 8009a90:	2000000c 	.word	0x2000000c
	...

08009aa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009aa0:	4b07      	ldr	r3, [pc, #28]	; (8009ac0 <pxCurrentTCBConst2>)
 8009aa2:	6819      	ldr	r1, [r3, #0]
 8009aa4:	6808      	ldr	r0, [r1, #0]
 8009aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aaa:	f380 8809 	msr	PSP, r0
 8009aae:	f3bf 8f6f 	isb	sy
 8009ab2:	f04f 0000 	mov.w	r0, #0
 8009ab6:	f380 8811 	msr	BASEPRI, r0
 8009aba:	4770      	bx	lr
 8009abc:	f3af 8000 	nop.w

08009ac0 <pxCurrentTCBConst2>:
 8009ac0:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ac4:	bf00      	nop
 8009ac6:	bf00      	nop

08009ac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ac8:	4808      	ldr	r0, [pc, #32]	; (8009aec <prvPortStartFirstTask+0x24>)
 8009aca:	6800      	ldr	r0, [r0, #0]
 8009acc:	6800      	ldr	r0, [r0, #0]
 8009ace:	f380 8808 	msr	MSP, r0
 8009ad2:	f04f 0000 	mov.w	r0, #0
 8009ad6:	f380 8814 	msr	CONTROL, r0
 8009ada:	b662      	cpsie	i
 8009adc:	b661      	cpsie	f
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	f3bf 8f6f 	isb	sy
 8009ae6:	df00      	svc	0
 8009ae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009aea:	bf00      	nop
 8009aec:	e000ed08 	.word	0xe000ed08

08009af0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b086      	sub	sp, #24
 8009af4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009af6:	4b46      	ldr	r3, [pc, #280]	; (8009c10 <xPortStartScheduler+0x120>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a46      	ldr	r2, [pc, #280]	; (8009c14 <xPortStartScheduler+0x124>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d10a      	bne.n	8009b16 <xPortStartScheduler+0x26>
	__asm volatile
 8009b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b04:	f383 8811 	msr	BASEPRI, r3
 8009b08:	f3bf 8f6f 	isb	sy
 8009b0c:	f3bf 8f4f 	dsb	sy
 8009b10:	613b      	str	r3, [r7, #16]
}
 8009b12:	bf00      	nop
 8009b14:	e7fe      	b.n	8009b14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009b16:	4b3e      	ldr	r3, [pc, #248]	; (8009c10 <xPortStartScheduler+0x120>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a3f      	ldr	r2, [pc, #252]	; (8009c18 <xPortStartScheduler+0x128>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d10a      	bne.n	8009b36 <xPortStartScheduler+0x46>
	__asm volatile
 8009b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b24:	f383 8811 	msr	BASEPRI, r3
 8009b28:	f3bf 8f6f 	isb	sy
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	60fb      	str	r3, [r7, #12]
}
 8009b32:	bf00      	nop
 8009b34:	e7fe      	b.n	8009b34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009b36:	4b39      	ldr	r3, [pc, #228]	; (8009c1c <xPortStartScheduler+0x12c>)
 8009b38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	22ff      	movs	r2, #255	; 0xff
 8009b46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	781b      	ldrb	r3, [r3, #0]
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009b50:	78fb      	ldrb	r3, [r7, #3]
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009b58:	b2da      	uxtb	r2, r3
 8009b5a:	4b31      	ldr	r3, [pc, #196]	; (8009c20 <xPortStartScheduler+0x130>)
 8009b5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009b5e:	4b31      	ldr	r3, [pc, #196]	; (8009c24 <xPortStartScheduler+0x134>)
 8009b60:	2207      	movs	r2, #7
 8009b62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b64:	e009      	b.n	8009b7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009b66:	4b2f      	ldr	r3, [pc, #188]	; (8009c24 <xPortStartScheduler+0x134>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	4a2d      	ldr	r2, [pc, #180]	; (8009c24 <xPortStartScheduler+0x134>)
 8009b6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b70:	78fb      	ldrb	r3, [r7, #3]
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	005b      	lsls	r3, r3, #1
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b7a:	78fb      	ldrb	r3, [r7, #3]
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b82:	2b80      	cmp	r3, #128	; 0x80
 8009b84:	d0ef      	beq.n	8009b66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b86:	4b27      	ldr	r3, [pc, #156]	; (8009c24 <xPortStartScheduler+0x134>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f1c3 0307 	rsb	r3, r3, #7
 8009b8e:	2b04      	cmp	r3, #4
 8009b90:	d00a      	beq.n	8009ba8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	60bb      	str	r3, [r7, #8]
}
 8009ba4:	bf00      	nop
 8009ba6:	e7fe      	b.n	8009ba6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ba8:	4b1e      	ldr	r3, [pc, #120]	; (8009c24 <xPortStartScheduler+0x134>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	021b      	lsls	r3, r3, #8
 8009bae:	4a1d      	ldr	r2, [pc, #116]	; (8009c24 <xPortStartScheduler+0x134>)
 8009bb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009bb2:	4b1c      	ldr	r3, [pc, #112]	; (8009c24 <xPortStartScheduler+0x134>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009bba:	4a1a      	ldr	r2, [pc, #104]	; (8009c24 <xPortStartScheduler+0x134>)
 8009bbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	b2da      	uxtb	r2, r3
 8009bc2:	697b      	ldr	r3, [r7, #20]
 8009bc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009bc6:	4b18      	ldr	r3, [pc, #96]	; (8009c28 <xPortStartScheduler+0x138>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a17      	ldr	r2, [pc, #92]	; (8009c28 <xPortStartScheduler+0x138>)
 8009bcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009bd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009bd2:	4b15      	ldr	r3, [pc, #84]	; (8009c28 <xPortStartScheduler+0x138>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a14      	ldr	r2, [pc, #80]	; (8009c28 <xPortStartScheduler+0x138>)
 8009bd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009bdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009bde:	f000 f8dd 	bl	8009d9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009be2:	4b12      	ldr	r3, [pc, #72]	; (8009c2c <xPortStartScheduler+0x13c>)
 8009be4:	2200      	movs	r2, #0
 8009be6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009be8:	f000 f8fc 	bl	8009de4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009bec:	4b10      	ldr	r3, [pc, #64]	; (8009c30 <xPortStartScheduler+0x140>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a0f      	ldr	r2, [pc, #60]	; (8009c30 <xPortStartScheduler+0x140>)
 8009bf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009bf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009bf8:	f7ff ff66 	bl	8009ac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009bfc:	f7fe ff42 	bl	8008a84 <vTaskSwitchContext>
	prvTaskExitError();
 8009c00:	f7ff ff1c 	bl	8009a3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009c04:	2300      	movs	r3, #0
}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3718      	adds	r7, #24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}
 8009c0e:	bf00      	nop
 8009c10:	e000ed00 	.word	0xe000ed00
 8009c14:	410fc271 	.word	0x410fc271
 8009c18:	410fc270 	.word	0x410fc270
 8009c1c:	e000e400 	.word	0xe000e400
 8009c20:	20000f58 	.word	0x20000f58
 8009c24:	20000f5c 	.word	0x20000f5c
 8009c28:	e000ed20 	.word	0xe000ed20
 8009c2c:	2000000c 	.word	0x2000000c
 8009c30:	e000ef34 	.word	0xe000ef34

08009c34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
	__asm volatile
 8009c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	607b      	str	r3, [r7, #4]
}
 8009c4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009c4e:	4b0f      	ldr	r3, [pc, #60]	; (8009c8c <vPortEnterCritical+0x58>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	3301      	adds	r3, #1
 8009c54:	4a0d      	ldr	r2, [pc, #52]	; (8009c8c <vPortEnterCritical+0x58>)
 8009c56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009c58:	4b0c      	ldr	r3, [pc, #48]	; (8009c8c <vPortEnterCritical+0x58>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d10f      	bne.n	8009c80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009c60:	4b0b      	ldr	r3, [pc, #44]	; (8009c90 <vPortEnterCritical+0x5c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	b2db      	uxtb	r3, r3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00a      	beq.n	8009c80 <vPortEnterCritical+0x4c>
	__asm volatile
 8009c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6e:	f383 8811 	msr	BASEPRI, r3
 8009c72:	f3bf 8f6f 	isb	sy
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	603b      	str	r3, [r7, #0]
}
 8009c7c:	bf00      	nop
 8009c7e:	e7fe      	b.n	8009c7e <vPortEnterCritical+0x4a>
	}
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	2000000c 	.word	0x2000000c
 8009c90:	e000ed04 	.word	0xe000ed04

08009c94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c9a:	4b12      	ldr	r3, [pc, #72]	; (8009ce4 <vPortExitCritical+0x50>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d10a      	bne.n	8009cb8 <vPortExitCritical+0x24>
	__asm volatile
 8009ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca6:	f383 8811 	msr	BASEPRI, r3
 8009caa:	f3bf 8f6f 	isb	sy
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	607b      	str	r3, [r7, #4]
}
 8009cb4:	bf00      	nop
 8009cb6:	e7fe      	b.n	8009cb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009cb8:	4b0a      	ldr	r3, [pc, #40]	; (8009ce4 <vPortExitCritical+0x50>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	3b01      	subs	r3, #1
 8009cbe:	4a09      	ldr	r2, [pc, #36]	; (8009ce4 <vPortExitCritical+0x50>)
 8009cc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009cc2:	4b08      	ldr	r3, [pc, #32]	; (8009ce4 <vPortExitCritical+0x50>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d105      	bne.n	8009cd6 <vPortExitCritical+0x42>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	f383 8811 	msr	BASEPRI, r3
}
 8009cd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009cd6:	bf00      	nop
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	2000000c 	.word	0x2000000c
	...

08009cf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009cf0:	f3ef 8009 	mrs	r0, PSP
 8009cf4:	f3bf 8f6f 	isb	sy
 8009cf8:	4b15      	ldr	r3, [pc, #84]	; (8009d50 <pxCurrentTCBConst>)
 8009cfa:	681a      	ldr	r2, [r3, #0]
 8009cfc:	f01e 0f10 	tst.w	lr, #16
 8009d00:	bf08      	it	eq
 8009d02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009d06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0a:	6010      	str	r0, [r2, #0]
 8009d0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009d10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009d14:	f380 8811 	msr	BASEPRI, r0
 8009d18:	f3bf 8f4f 	dsb	sy
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f7fe feb0 	bl	8008a84 <vTaskSwitchContext>
 8009d24:	f04f 0000 	mov.w	r0, #0
 8009d28:	f380 8811 	msr	BASEPRI, r0
 8009d2c:	bc09      	pop	{r0, r3}
 8009d2e:	6819      	ldr	r1, [r3, #0]
 8009d30:	6808      	ldr	r0, [r1, #0]
 8009d32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d36:	f01e 0f10 	tst.w	lr, #16
 8009d3a:	bf08      	it	eq
 8009d3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009d40:	f380 8809 	msr	PSP, r0
 8009d44:	f3bf 8f6f 	isb	sy
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	f3af 8000 	nop.w

08009d50 <pxCurrentTCBConst>:
 8009d50:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009d54:	bf00      	nop
 8009d56:	bf00      	nop

08009d58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b082      	sub	sp, #8
 8009d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d62:	f383 8811 	msr	BASEPRI, r3
 8009d66:	f3bf 8f6f 	isb	sy
 8009d6a:	f3bf 8f4f 	dsb	sy
 8009d6e:	607b      	str	r3, [r7, #4]
}
 8009d70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d72:	f7fe fdcd 	bl	8008910 <xTaskIncrementTick>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d003      	beq.n	8009d84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d7c:	4b06      	ldr	r3, [pc, #24]	; (8009d98 <xPortSysTickHandler+0x40>)
 8009d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d82:	601a      	str	r2, [r3, #0]
 8009d84:	2300      	movs	r3, #0
 8009d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	f383 8811 	msr	BASEPRI, r3
}
 8009d8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d90:	bf00      	nop
 8009d92:	3708      	adds	r7, #8
 8009d94:	46bd      	mov	sp, r7
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	e000ed04 	.word	0xe000ed04

08009d9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009da0:	4b0b      	ldr	r3, [pc, #44]	; (8009dd0 <vPortSetupTimerInterrupt+0x34>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009da6:	4b0b      	ldr	r3, [pc, #44]	; (8009dd4 <vPortSetupTimerInterrupt+0x38>)
 8009da8:	2200      	movs	r2, #0
 8009daa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009dac:	4b0a      	ldr	r3, [pc, #40]	; (8009dd8 <vPortSetupTimerInterrupt+0x3c>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a0a      	ldr	r2, [pc, #40]	; (8009ddc <vPortSetupTimerInterrupt+0x40>)
 8009db2:	fba2 2303 	umull	r2, r3, r2, r3
 8009db6:	099b      	lsrs	r3, r3, #6
 8009db8:	4a09      	ldr	r2, [pc, #36]	; (8009de0 <vPortSetupTimerInterrupt+0x44>)
 8009dba:	3b01      	subs	r3, #1
 8009dbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009dbe:	4b04      	ldr	r3, [pc, #16]	; (8009dd0 <vPortSetupTimerInterrupt+0x34>)
 8009dc0:	2207      	movs	r2, #7
 8009dc2:	601a      	str	r2, [r3, #0]
}
 8009dc4:	bf00      	nop
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	e000e010 	.word	0xe000e010
 8009dd4:	e000e018 	.word	0xe000e018
 8009dd8:	20000000 	.word	0x20000000
 8009ddc:	10624dd3 	.word	0x10624dd3
 8009de0:	e000e014 	.word	0xe000e014

08009de4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009de4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009df4 <vPortEnableVFP+0x10>
 8009de8:	6801      	ldr	r1, [r0, #0]
 8009dea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009dee:	6001      	str	r1, [r0, #0]
 8009df0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009df2:	bf00      	nop
 8009df4:	e000ed88 	.word	0xe000ed88

08009df8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009dfe:	f3ef 8305 	mrs	r3, IPSR
 8009e02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2b0f      	cmp	r3, #15
 8009e08:	d914      	bls.n	8009e34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009e0a:	4a17      	ldr	r2, [pc, #92]	; (8009e68 <vPortValidateInterruptPriority+0x70>)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	4413      	add	r3, r2
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009e14:	4b15      	ldr	r3, [pc, #84]	; (8009e6c <vPortValidateInterruptPriority+0x74>)
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	7afa      	ldrb	r2, [r7, #11]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d20a      	bcs.n	8009e34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e22:	f383 8811 	msr	BASEPRI, r3
 8009e26:	f3bf 8f6f 	isb	sy
 8009e2a:	f3bf 8f4f 	dsb	sy
 8009e2e:	607b      	str	r3, [r7, #4]
}
 8009e30:	bf00      	nop
 8009e32:	e7fe      	b.n	8009e32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009e34:	4b0e      	ldr	r3, [pc, #56]	; (8009e70 <vPortValidateInterruptPriority+0x78>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009e3c:	4b0d      	ldr	r3, [pc, #52]	; (8009e74 <vPortValidateInterruptPriority+0x7c>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	429a      	cmp	r2, r3
 8009e42:	d90a      	bls.n	8009e5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e48:	f383 8811 	msr	BASEPRI, r3
 8009e4c:	f3bf 8f6f 	isb	sy
 8009e50:	f3bf 8f4f 	dsb	sy
 8009e54:	603b      	str	r3, [r7, #0]
}
 8009e56:	bf00      	nop
 8009e58:	e7fe      	b.n	8009e58 <vPortValidateInterruptPriority+0x60>
	}
 8009e5a:	bf00      	nop
 8009e5c:	3714      	adds	r7, #20
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	e000e3f0 	.word	0xe000e3f0
 8009e6c:	20000f58 	.word	0x20000f58
 8009e70:	e000ed0c 	.word	0xe000ed0c
 8009e74:	20000f5c 	.word	0x20000f5c

08009e78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b08a      	sub	sp, #40	; 0x28
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e80:	2300      	movs	r3, #0
 8009e82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e84:	f7fe fc88 	bl	8008798 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009e88:	4b5b      	ldr	r3, [pc, #364]	; (8009ff8 <pvPortMalloc+0x180>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d101      	bne.n	8009e94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e90:	f000 f920 	bl	800a0d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e94:	4b59      	ldr	r3, [pc, #356]	; (8009ffc <pvPortMalloc+0x184>)
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f040 8093 	bne.w	8009fc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d01d      	beq.n	8009ee4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009ea8:	2208      	movs	r2, #8
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4413      	add	r3, r2
 8009eae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f003 0307 	and.w	r3, r3, #7
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d014      	beq.n	8009ee4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f023 0307 	bic.w	r3, r3, #7
 8009ec0:	3308      	adds	r3, #8
 8009ec2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f003 0307 	and.w	r3, r3, #7
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d00a      	beq.n	8009ee4 <pvPortMalloc+0x6c>
	__asm volatile
 8009ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed2:	f383 8811 	msr	BASEPRI, r3
 8009ed6:	f3bf 8f6f 	isb	sy
 8009eda:	f3bf 8f4f 	dsb	sy
 8009ede:	617b      	str	r3, [r7, #20]
}
 8009ee0:	bf00      	nop
 8009ee2:	e7fe      	b.n	8009ee2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d06e      	beq.n	8009fc8 <pvPortMalloc+0x150>
 8009eea:	4b45      	ldr	r3, [pc, #276]	; (800a000 <pvPortMalloc+0x188>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d869      	bhi.n	8009fc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009ef4:	4b43      	ldr	r3, [pc, #268]	; (800a004 <pvPortMalloc+0x18c>)
 8009ef6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009ef8:	4b42      	ldr	r3, [pc, #264]	; (800a004 <pvPortMalloc+0x18c>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009efe:	e004      	b.n	8009f0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	687a      	ldr	r2, [r7, #4]
 8009f10:	429a      	cmp	r2, r3
 8009f12:	d903      	bls.n	8009f1c <pvPortMalloc+0xa4>
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d1f1      	bne.n	8009f00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009f1c:	4b36      	ldr	r3, [pc, #216]	; (8009ff8 <pvPortMalloc+0x180>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d050      	beq.n	8009fc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2208      	movs	r2, #8
 8009f2c:	4413      	add	r3, r2
 8009f2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3a:	685a      	ldr	r2, [r3, #4]
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	1ad2      	subs	r2, r2, r3
 8009f40:	2308      	movs	r3, #8
 8009f42:	005b      	lsls	r3, r3, #1
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d91f      	bls.n	8009f88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	f003 0307 	and.w	r3, r3, #7
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d00a      	beq.n	8009f70 <pvPortMalloc+0xf8>
	__asm volatile
 8009f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	613b      	str	r3, [r7, #16]
}
 8009f6c:	bf00      	nop
 8009f6e:	e7fe      	b.n	8009f6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	685a      	ldr	r2, [r3, #4]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	1ad2      	subs	r2, r2, r3
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f82:	69b8      	ldr	r0, [r7, #24]
 8009f84:	f000 f908 	bl	800a198 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f88:	4b1d      	ldr	r3, [pc, #116]	; (800a000 <pvPortMalloc+0x188>)
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	4a1b      	ldr	r2, [pc, #108]	; (800a000 <pvPortMalloc+0x188>)
 8009f94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f96:	4b1a      	ldr	r3, [pc, #104]	; (800a000 <pvPortMalloc+0x188>)
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	4b1b      	ldr	r3, [pc, #108]	; (800a008 <pvPortMalloc+0x190>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d203      	bcs.n	8009faa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009fa2:	4b17      	ldr	r3, [pc, #92]	; (800a000 <pvPortMalloc+0x188>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a18      	ldr	r2, [pc, #96]	; (800a008 <pvPortMalloc+0x190>)
 8009fa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	4b13      	ldr	r3, [pc, #76]	; (8009ffc <pvPortMalloc+0x184>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	431a      	orrs	r2, r3
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fba:	2200      	movs	r2, #0
 8009fbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009fbe:	4b13      	ldr	r3, [pc, #76]	; (800a00c <pvPortMalloc+0x194>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	4a11      	ldr	r2, [pc, #68]	; (800a00c <pvPortMalloc+0x194>)
 8009fc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009fc8:	f7fe fbf4 	bl	80087b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	f003 0307 	and.w	r3, r3, #7
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00a      	beq.n	8009fec <pvPortMalloc+0x174>
	__asm volatile
 8009fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	60fb      	str	r3, [r7, #12]
}
 8009fe8:	bf00      	nop
 8009fea:	e7fe      	b.n	8009fea <pvPortMalloc+0x172>
	return pvReturn;
 8009fec:	69fb      	ldr	r3, [r7, #28]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3728      	adds	r7, #40	; 0x28
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	20001b20 	.word	0x20001b20
 8009ffc:	20001b34 	.word	0x20001b34
 800a000:	20001b24 	.word	0x20001b24
 800a004:	20001b18 	.word	0x20001b18
 800a008:	20001b28 	.word	0x20001b28
 800a00c:	20001b2c 	.word	0x20001b2c

0800a010 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d04d      	beq.n	800a0be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a022:	2308      	movs	r3, #8
 800a024:	425b      	negs	r3, r3
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	4413      	add	r3, r2
 800a02a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	685a      	ldr	r2, [r3, #4]
 800a034:	4b24      	ldr	r3, [pc, #144]	; (800a0c8 <vPortFree+0xb8>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4013      	ands	r3, r2
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10a      	bne.n	800a054 <vPortFree+0x44>
	__asm volatile
 800a03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	60fb      	str	r3, [r7, #12]
}
 800a050:	bf00      	nop
 800a052:	e7fe      	b.n	800a052 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00a      	beq.n	800a072 <vPortFree+0x62>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	60bb      	str	r3, [r7, #8]
}
 800a06e:	bf00      	nop
 800a070:	e7fe      	b.n	800a070 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	685a      	ldr	r2, [r3, #4]
 800a076:	4b14      	ldr	r3, [pc, #80]	; (800a0c8 <vPortFree+0xb8>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	4013      	ands	r3, r2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d01e      	beq.n	800a0be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d11a      	bne.n	800a0be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	4b0e      	ldr	r3, [pc, #56]	; (800a0c8 <vPortFree+0xb8>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	43db      	mvns	r3, r3
 800a092:	401a      	ands	r2, r3
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a098:	f7fe fb7e 	bl	8008798 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	4b0a      	ldr	r3, [pc, #40]	; (800a0cc <vPortFree+0xbc>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	4a09      	ldr	r2, [pc, #36]	; (800a0cc <vPortFree+0xbc>)
 800a0a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a0aa:	6938      	ldr	r0, [r7, #16]
 800a0ac:	f000 f874 	bl	800a198 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a0b0:	4b07      	ldr	r3, [pc, #28]	; (800a0d0 <vPortFree+0xc0>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	4a06      	ldr	r2, [pc, #24]	; (800a0d0 <vPortFree+0xc0>)
 800a0b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a0ba:	f7fe fb7b 	bl	80087b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a0be:	bf00      	nop
 800a0c0:	3718      	adds	r7, #24
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	20001b34 	.word	0x20001b34
 800a0cc:	20001b24 	.word	0x20001b24
 800a0d0:	20001b30 	.word	0x20001b30

0800a0d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a0da:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a0de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a0e0:	4b27      	ldr	r3, [pc, #156]	; (800a180 <prvHeapInit+0xac>)
 800a0e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f003 0307 	and.w	r3, r3, #7
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d00c      	beq.n	800a108 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	3307      	adds	r3, #7
 800a0f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f023 0307 	bic.w	r3, r3, #7
 800a0fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a0fc:	68ba      	ldr	r2, [r7, #8]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	1ad3      	subs	r3, r2, r3
 800a102:	4a1f      	ldr	r2, [pc, #124]	; (800a180 <prvHeapInit+0xac>)
 800a104:	4413      	add	r3, r2
 800a106:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a10c:	4a1d      	ldr	r2, [pc, #116]	; (800a184 <prvHeapInit+0xb0>)
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a112:	4b1c      	ldr	r3, [pc, #112]	; (800a184 <prvHeapInit+0xb0>)
 800a114:	2200      	movs	r2, #0
 800a116:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	4413      	add	r3, r2
 800a11e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a120:	2208      	movs	r2, #8
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	1a9b      	subs	r3, r3, r2
 800a126:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f023 0307 	bic.w	r3, r3, #7
 800a12e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	4a15      	ldr	r2, [pc, #84]	; (800a188 <prvHeapInit+0xb4>)
 800a134:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a136:	4b14      	ldr	r3, [pc, #80]	; (800a188 <prvHeapInit+0xb4>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2200      	movs	r2, #0
 800a13c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a13e:	4b12      	ldr	r3, [pc, #72]	; (800a188 <prvHeapInit+0xb4>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2200      	movs	r2, #0
 800a144:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	1ad2      	subs	r2, r2, r3
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a154:	4b0c      	ldr	r3, [pc, #48]	; (800a188 <prvHeapInit+0xb4>)
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	4a0a      	ldr	r2, [pc, #40]	; (800a18c <prvHeapInit+0xb8>)
 800a162:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a164:	683b      	ldr	r3, [r7, #0]
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	4a09      	ldr	r2, [pc, #36]	; (800a190 <prvHeapInit+0xbc>)
 800a16a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a16c:	4b09      	ldr	r3, [pc, #36]	; (800a194 <prvHeapInit+0xc0>)
 800a16e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a172:	601a      	str	r2, [r3, #0]
}
 800a174:	bf00      	nop
 800a176:	3714      	adds	r7, #20
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr
 800a180:	20000f60 	.word	0x20000f60
 800a184:	20001b18 	.word	0x20001b18
 800a188:	20001b20 	.word	0x20001b20
 800a18c:	20001b28 	.word	0x20001b28
 800a190:	20001b24 	.word	0x20001b24
 800a194:	20001b34 	.word	0x20001b34

0800a198 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a1a0:	4b28      	ldr	r3, [pc, #160]	; (800a244 <prvInsertBlockIntoFreeList+0xac>)
 800a1a2:	60fb      	str	r3, [r7, #12]
 800a1a4:	e002      	b.n	800a1ac <prvInsertBlockIntoFreeList+0x14>
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	60fb      	str	r3, [r7, #12]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	687a      	ldr	r2, [r7, #4]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d8f7      	bhi.n	800a1a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	685b      	ldr	r3, [r3, #4]
 800a1be:	68ba      	ldr	r2, [r7, #8]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d108      	bne.n	800a1da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	441a      	add	r2, r3
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	441a      	add	r2, r3
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d118      	bne.n	800a220 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681a      	ldr	r2, [r3, #0]
 800a1f2:	4b15      	ldr	r3, [pc, #84]	; (800a248 <prvInsertBlockIntoFreeList+0xb0>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	429a      	cmp	r2, r3
 800a1f8:	d00d      	beq.n	800a216 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	685a      	ldr	r2, [r3, #4]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	441a      	add	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	e008      	b.n	800a228 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a216:	4b0c      	ldr	r3, [pc, #48]	; (800a248 <prvInsertBlockIntoFreeList+0xb0>)
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	601a      	str	r2, [r3, #0]
 800a21e:	e003      	b.n	800a228 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d002      	beq.n	800a236 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a236:	bf00      	nop
 800a238:	3714      	adds	r7, #20
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr
 800a242:	bf00      	nop
 800a244:	20001b18 	.word	0x20001b18
 800a248:	20001b20 	.word	0x20001b20

0800a24c <atoi>:
 800a24c:	220a      	movs	r2, #10
 800a24e:	2100      	movs	r1, #0
 800a250:	f000 b882 	b.w	800a358 <strtol>

0800a254 <_strtol_l.constprop.0>:
 800a254:	2b01      	cmp	r3, #1
 800a256:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a25a:	d001      	beq.n	800a260 <_strtol_l.constprop.0+0xc>
 800a25c:	2b24      	cmp	r3, #36	; 0x24
 800a25e:	d906      	bls.n	800a26e <_strtol_l.constprop.0+0x1a>
 800a260:	f000 fa54 	bl	800a70c <__errno>
 800a264:	2316      	movs	r3, #22
 800a266:	6003      	str	r3, [r0, #0]
 800a268:	2000      	movs	r0, #0
 800a26a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a26e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a354 <_strtol_l.constprop.0+0x100>
 800a272:	460d      	mov	r5, r1
 800a274:	462e      	mov	r6, r5
 800a276:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a27a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a27e:	f017 0708 	ands.w	r7, r7, #8
 800a282:	d1f7      	bne.n	800a274 <_strtol_l.constprop.0+0x20>
 800a284:	2c2d      	cmp	r4, #45	; 0x2d
 800a286:	d132      	bne.n	800a2ee <_strtol_l.constprop.0+0x9a>
 800a288:	782c      	ldrb	r4, [r5, #0]
 800a28a:	2701      	movs	r7, #1
 800a28c:	1cb5      	adds	r5, r6, #2
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d05b      	beq.n	800a34a <_strtol_l.constprop.0+0xf6>
 800a292:	2b10      	cmp	r3, #16
 800a294:	d109      	bne.n	800a2aa <_strtol_l.constprop.0+0x56>
 800a296:	2c30      	cmp	r4, #48	; 0x30
 800a298:	d107      	bne.n	800a2aa <_strtol_l.constprop.0+0x56>
 800a29a:	782c      	ldrb	r4, [r5, #0]
 800a29c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a2a0:	2c58      	cmp	r4, #88	; 0x58
 800a2a2:	d14d      	bne.n	800a340 <_strtol_l.constprop.0+0xec>
 800a2a4:	786c      	ldrb	r4, [r5, #1]
 800a2a6:	2310      	movs	r3, #16
 800a2a8:	3502      	adds	r5, #2
 800a2aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a2ae:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a2b2:	f04f 0e00 	mov.w	lr, #0
 800a2b6:	fbb8 f9f3 	udiv	r9, r8, r3
 800a2ba:	4676      	mov	r6, lr
 800a2bc:	fb03 8a19 	mls	sl, r3, r9, r8
 800a2c0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a2c4:	f1bc 0f09 	cmp.w	ip, #9
 800a2c8:	d816      	bhi.n	800a2f8 <_strtol_l.constprop.0+0xa4>
 800a2ca:	4664      	mov	r4, ip
 800a2cc:	42a3      	cmp	r3, r4
 800a2ce:	dd24      	ble.n	800a31a <_strtol_l.constprop.0+0xc6>
 800a2d0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800a2d4:	d008      	beq.n	800a2e8 <_strtol_l.constprop.0+0x94>
 800a2d6:	45b1      	cmp	r9, r6
 800a2d8:	d31c      	bcc.n	800a314 <_strtol_l.constprop.0+0xc0>
 800a2da:	d101      	bne.n	800a2e0 <_strtol_l.constprop.0+0x8c>
 800a2dc:	45a2      	cmp	sl, r4
 800a2de:	db19      	blt.n	800a314 <_strtol_l.constprop.0+0xc0>
 800a2e0:	fb06 4603 	mla	r6, r6, r3, r4
 800a2e4:	f04f 0e01 	mov.w	lr, #1
 800a2e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2ec:	e7e8      	b.n	800a2c0 <_strtol_l.constprop.0+0x6c>
 800a2ee:	2c2b      	cmp	r4, #43	; 0x2b
 800a2f0:	bf04      	itt	eq
 800a2f2:	782c      	ldrbeq	r4, [r5, #0]
 800a2f4:	1cb5      	addeq	r5, r6, #2
 800a2f6:	e7ca      	b.n	800a28e <_strtol_l.constprop.0+0x3a>
 800a2f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a2fc:	f1bc 0f19 	cmp.w	ip, #25
 800a300:	d801      	bhi.n	800a306 <_strtol_l.constprop.0+0xb2>
 800a302:	3c37      	subs	r4, #55	; 0x37
 800a304:	e7e2      	b.n	800a2cc <_strtol_l.constprop.0+0x78>
 800a306:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a30a:	f1bc 0f19 	cmp.w	ip, #25
 800a30e:	d804      	bhi.n	800a31a <_strtol_l.constprop.0+0xc6>
 800a310:	3c57      	subs	r4, #87	; 0x57
 800a312:	e7db      	b.n	800a2cc <_strtol_l.constprop.0+0x78>
 800a314:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800a318:	e7e6      	b.n	800a2e8 <_strtol_l.constprop.0+0x94>
 800a31a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800a31e:	d105      	bne.n	800a32c <_strtol_l.constprop.0+0xd8>
 800a320:	2322      	movs	r3, #34	; 0x22
 800a322:	6003      	str	r3, [r0, #0]
 800a324:	4646      	mov	r6, r8
 800a326:	b942      	cbnz	r2, 800a33a <_strtol_l.constprop.0+0xe6>
 800a328:	4630      	mov	r0, r6
 800a32a:	e79e      	b.n	800a26a <_strtol_l.constprop.0+0x16>
 800a32c:	b107      	cbz	r7, 800a330 <_strtol_l.constprop.0+0xdc>
 800a32e:	4276      	negs	r6, r6
 800a330:	2a00      	cmp	r2, #0
 800a332:	d0f9      	beq.n	800a328 <_strtol_l.constprop.0+0xd4>
 800a334:	f1be 0f00 	cmp.w	lr, #0
 800a338:	d000      	beq.n	800a33c <_strtol_l.constprop.0+0xe8>
 800a33a:	1e69      	subs	r1, r5, #1
 800a33c:	6011      	str	r1, [r2, #0]
 800a33e:	e7f3      	b.n	800a328 <_strtol_l.constprop.0+0xd4>
 800a340:	2430      	movs	r4, #48	; 0x30
 800a342:	2b00      	cmp	r3, #0
 800a344:	d1b1      	bne.n	800a2aa <_strtol_l.constprop.0+0x56>
 800a346:	2308      	movs	r3, #8
 800a348:	e7af      	b.n	800a2aa <_strtol_l.constprop.0+0x56>
 800a34a:	2c30      	cmp	r4, #48	; 0x30
 800a34c:	d0a5      	beq.n	800a29a <_strtol_l.constprop.0+0x46>
 800a34e:	230a      	movs	r3, #10
 800a350:	e7ab      	b.n	800a2aa <_strtol_l.constprop.0+0x56>
 800a352:	bf00      	nop
 800a354:	0800b86d 	.word	0x0800b86d

0800a358 <strtol>:
 800a358:	4613      	mov	r3, r2
 800a35a:	460a      	mov	r2, r1
 800a35c:	4601      	mov	r1, r0
 800a35e:	4802      	ldr	r0, [pc, #8]	; (800a368 <strtol+0x10>)
 800a360:	6800      	ldr	r0, [r0, #0]
 800a362:	f7ff bf77 	b.w	800a254 <_strtol_l.constprop.0>
 800a366:	bf00      	nop
 800a368:	20000068 	.word	0x20000068

0800a36c <std>:
 800a36c:	2300      	movs	r3, #0
 800a36e:	b510      	push	{r4, lr}
 800a370:	4604      	mov	r4, r0
 800a372:	e9c0 3300 	strd	r3, r3, [r0]
 800a376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a37a:	6083      	str	r3, [r0, #8]
 800a37c:	8181      	strh	r1, [r0, #12]
 800a37e:	6643      	str	r3, [r0, #100]	; 0x64
 800a380:	81c2      	strh	r2, [r0, #14]
 800a382:	6183      	str	r3, [r0, #24]
 800a384:	4619      	mov	r1, r3
 800a386:	2208      	movs	r2, #8
 800a388:	305c      	adds	r0, #92	; 0x5c
 800a38a:	f000 f914 	bl	800a5b6 <memset>
 800a38e:	4b0d      	ldr	r3, [pc, #52]	; (800a3c4 <std+0x58>)
 800a390:	6263      	str	r3, [r4, #36]	; 0x24
 800a392:	4b0d      	ldr	r3, [pc, #52]	; (800a3c8 <std+0x5c>)
 800a394:	62a3      	str	r3, [r4, #40]	; 0x28
 800a396:	4b0d      	ldr	r3, [pc, #52]	; (800a3cc <std+0x60>)
 800a398:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a39a:	4b0d      	ldr	r3, [pc, #52]	; (800a3d0 <std+0x64>)
 800a39c:	6323      	str	r3, [r4, #48]	; 0x30
 800a39e:	4b0d      	ldr	r3, [pc, #52]	; (800a3d4 <std+0x68>)
 800a3a0:	6224      	str	r4, [r4, #32]
 800a3a2:	429c      	cmp	r4, r3
 800a3a4:	d006      	beq.n	800a3b4 <std+0x48>
 800a3a6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a3aa:	4294      	cmp	r4, r2
 800a3ac:	d002      	beq.n	800a3b4 <std+0x48>
 800a3ae:	33d0      	adds	r3, #208	; 0xd0
 800a3b0:	429c      	cmp	r4, r3
 800a3b2:	d105      	bne.n	800a3c0 <std+0x54>
 800a3b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a3b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3bc:	f000 b9d0 	b.w	800a760 <__retarget_lock_init_recursive>
 800a3c0:	bd10      	pop	{r4, pc}
 800a3c2:	bf00      	nop
 800a3c4:	0800a531 	.word	0x0800a531
 800a3c8:	0800a553 	.word	0x0800a553
 800a3cc:	0800a58b 	.word	0x0800a58b
 800a3d0:	0800a5af 	.word	0x0800a5af
 800a3d4:	20001b38 	.word	0x20001b38

0800a3d8 <stdio_exit_handler>:
 800a3d8:	4a02      	ldr	r2, [pc, #8]	; (800a3e4 <stdio_exit_handler+0xc>)
 800a3da:	4903      	ldr	r1, [pc, #12]	; (800a3e8 <stdio_exit_handler+0x10>)
 800a3dc:	4803      	ldr	r0, [pc, #12]	; (800a3ec <stdio_exit_handler+0x14>)
 800a3de:	f000 b869 	b.w	800a4b4 <_fwalk_sglue>
 800a3e2:	bf00      	nop
 800a3e4:	20000010 	.word	0x20000010
 800a3e8:	0800b09d 	.word	0x0800b09d
 800a3ec:	2000001c 	.word	0x2000001c

0800a3f0 <cleanup_stdio>:
 800a3f0:	6841      	ldr	r1, [r0, #4]
 800a3f2:	4b0c      	ldr	r3, [pc, #48]	; (800a424 <cleanup_stdio+0x34>)
 800a3f4:	4299      	cmp	r1, r3
 800a3f6:	b510      	push	{r4, lr}
 800a3f8:	4604      	mov	r4, r0
 800a3fa:	d001      	beq.n	800a400 <cleanup_stdio+0x10>
 800a3fc:	f000 fe4e 	bl	800b09c <_fflush_r>
 800a400:	68a1      	ldr	r1, [r4, #8]
 800a402:	4b09      	ldr	r3, [pc, #36]	; (800a428 <cleanup_stdio+0x38>)
 800a404:	4299      	cmp	r1, r3
 800a406:	d002      	beq.n	800a40e <cleanup_stdio+0x1e>
 800a408:	4620      	mov	r0, r4
 800a40a:	f000 fe47 	bl	800b09c <_fflush_r>
 800a40e:	68e1      	ldr	r1, [r4, #12]
 800a410:	4b06      	ldr	r3, [pc, #24]	; (800a42c <cleanup_stdio+0x3c>)
 800a412:	4299      	cmp	r1, r3
 800a414:	d004      	beq.n	800a420 <cleanup_stdio+0x30>
 800a416:	4620      	mov	r0, r4
 800a418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a41c:	f000 be3e 	b.w	800b09c <_fflush_r>
 800a420:	bd10      	pop	{r4, pc}
 800a422:	bf00      	nop
 800a424:	20001b38 	.word	0x20001b38
 800a428:	20001ba0 	.word	0x20001ba0
 800a42c:	20001c08 	.word	0x20001c08

0800a430 <global_stdio_init.part.0>:
 800a430:	b510      	push	{r4, lr}
 800a432:	4b0b      	ldr	r3, [pc, #44]	; (800a460 <global_stdio_init.part.0+0x30>)
 800a434:	4c0b      	ldr	r4, [pc, #44]	; (800a464 <global_stdio_init.part.0+0x34>)
 800a436:	4a0c      	ldr	r2, [pc, #48]	; (800a468 <global_stdio_init.part.0+0x38>)
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	4620      	mov	r0, r4
 800a43c:	2200      	movs	r2, #0
 800a43e:	2104      	movs	r1, #4
 800a440:	f7ff ff94 	bl	800a36c <std>
 800a444:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a448:	2201      	movs	r2, #1
 800a44a:	2109      	movs	r1, #9
 800a44c:	f7ff ff8e 	bl	800a36c <std>
 800a450:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a454:	2202      	movs	r2, #2
 800a456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a45a:	2112      	movs	r1, #18
 800a45c:	f7ff bf86 	b.w	800a36c <std>
 800a460:	20001c70 	.word	0x20001c70
 800a464:	20001b38 	.word	0x20001b38
 800a468:	0800a3d9 	.word	0x0800a3d9

0800a46c <__sfp_lock_acquire>:
 800a46c:	4801      	ldr	r0, [pc, #4]	; (800a474 <__sfp_lock_acquire+0x8>)
 800a46e:	f000 b978 	b.w	800a762 <__retarget_lock_acquire_recursive>
 800a472:	bf00      	nop
 800a474:	20001c79 	.word	0x20001c79

0800a478 <__sfp_lock_release>:
 800a478:	4801      	ldr	r0, [pc, #4]	; (800a480 <__sfp_lock_release+0x8>)
 800a47a:	f000 b973 	b.w	800a764 <__retarget_lock_release_recursive>
 800a47e:	bf00      	nop
 800a480:	20001c79 	.word	0x20001c79

0800a484 <__sinit>:
 800a484:	b510      	push	{r4, lr}
 800a486:	4604      	mov	r4, r0
 800a488:	f7ff fff0 	bl	800a46c <__sfp_lock_acquire>
 800a48c:	6a23      	ldr	r3, [r4, #32]
 800a48e:	b11b      	cbz	r3, 800a498 <__sinit+0x14>
 800a490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a494:	f7ff bff0 	b.w	800a478 <__sfp_lock_release>
 800a498:	4b04      	ldr	r3, [pc, #16]	; (800a4ac <__sinit+0x28>)
 800a49a:	6223      	str	r3, [r4, #32]
 800a49c:	4b04      	ldr	r3, [pc, #16]	; (800a4b0 <__sinit+0x2c>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d1f5      	bne.n	800a490 <__sinit+0xc>
 800a4a4:	f7ff ffc4 	bl	800a430 <global_stdio_init.part.0>
 800a4a8:	e7f2      	b.n	800a490 <__sinit+0xc>
 800a4aa:	bf00      	nop
 800a4ac:	0800a3f1 	.word	0x0800a3f1
 800a4b0:	20001c70 	.word	0x20001c70

0800a4b4 <_fwalk_sglue>:
 800a4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b8:	4607      	mov	r7, r0
 800a4ba:	4688      	mov	r8, r1
 800a4bc:	4614      	mov	r4, r2
 800a4be:	2600      	movs	r6, #0
 800a4c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4c4:	f1b9 0901 	subs.w	r9, r9, #1
 800a4c8:	d505      	bpl.n	800a4d6 <_fwalk_sglue+0x22>
 800a4ca:	6824      	ldr	r4, [r4, #0]
 800a4cc:	2c00      	cmp	r4, #0
 800a4ce:	d1f7      	bne.n	800a4c0 <_fwalk_sglue+0xc>
 800a4d0:	4630      	mov	r0, r6
 800a4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4d6:	89ab      	ldrh	r3, [r5, #12]
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d907      	bls.n	800a4ec <_fwalk_sglue+0x38>
 800a4dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	d003      	beq.n	800a4ec <_fwalk_sglue+0x38>
 800a4e4:	4629      	mov	r1, r5
 800a4e6:	4638      	mov	r0, r7
 800a4e8:	47c0      	blx	r8
 800a4ea:	4306      	orrs	r6, r0
 800a4ec:	3568      	adds	r5, #104	; 0x68
 800a4ee:	e7e9      	b.n	800a4c4 <_fwalk_sglue+0x10>

0800a4f0 <siprintf>:
 800a4f0:	b40e      	push	{r1, r2, r3}
 800a4f2:	b500      	push	{lr}
 800a4f4:	b09c      	sub	sp, #112	; 0x70
 800a4f6:	ab1d      	add	r3, sp, #116	; 0x74
 800a4f8:	9002      	str	r0, [sp, #8]
 800a4fa:	9006      	str	r0, [sp, #24]
 800a4fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a500:	4809      	ldr	r0, [pc, #36]	; (800a528 <siprintf+0x38>)
 800a502:	9107      	str	r1, [sp, #28]
 800a504:	9104      	str	r1, [sp, #16]
 800a506:	4909      	ldr	r1, [pc, #36]	; (800a52c <siprintf+0x3c>)
 800a508:	f853 2b04 	ldr.w	r2, [r3], #4
 800a50c:	9105      	str	r1, [sp, #20]
 800a50e:	6800      	ldr	r0, [r0, #0]
 800a510:	9301      	str	r3, [sp, #4]
 800a512:	a902      	add	r1, sp, #8
 800a514:	f000 faae 	bl	800aa74 <_svfiprintf_r>
 800a518:	9b02      	ldr	r3, [sp, #8]
 800a51a:	2200      	movs	r2, #0
 800a51c:	701a      	strb	r2, [r3, #0]
 800a51e:	b01c      	add	sp, #112	; 0x70
 800a520:	f85d eb04 	ldr.w	lr, [sp], #4
 800a524:	b003      	add	sp, #12
 800a526:	4770      	bx	lr
 800a528:	20000068 	.word	0x20000068
 800a52c:	ffff0208 	.word	0xffff0208

0800a530 <__sread>:
 800a530:	b510      	push	{r4, lr}
 800a532:	460c      	mov	r4, r1
 800a534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a538:	f000 f8c4 	bl	800a6c4 <_read_r>
 800a53c:	2800      	cmp	r0, #0
 800a53e:	bfab      	itete	ge
 800a540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a542:	89a3      	ldrhlt	r3, [r4, #12]
 800a544:	181b      	addge	r3, r3, r0
 800a546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a54a:	bfac      	ite	ge
 800a54c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a54e:	81a3      	strhlt	r3, [r4, #12]
 800a550:	bd10      	pop	{r4, pc}

0800a552 <__swrite>:
 800a552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a556:	461f      	mov	r7, r3
 800a558:	898b      	ldrh	r3, [r1, #12]
 800a55a:	05db      	lsls	r3, r3, #23
 800a55c:	4605      	mov	r5, r0
 800a55e:	460c      	mov	r4, r1
 800a560:	4616      	mov	r6, r2
 800a562:	d505      	bpl.n	800a570 <__swrite+0x1e>
 800a564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a568:	2302      	movs	r3, #2
 800a56a:	2200      	movs	r2, #0
 800a56c:	f000 f898 	bl	800a6a0 <_lseek_r>
 800a570:	89a3      	ldrh	r3, [r4, #12]
 800a572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a57a:	81a3      	strh	r3, [r4, #12]
 800a57c:	4632      	mov	r2, r6
 800a57e:	463b      	mov	r3, r7
 800a580:	4628      	mov	r0, r5
 800a582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a586:	f000 b8af 	b.w	800a6e8 <_write_r>

0800a58a <__sseek>:
 800a58a:	b510      	push	{r4, lr}
 800a58c:	460c      	mov	r4, r1
 800a58e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a592:	f000 f885 	bl	800a6a0 <_lseek_r>
 800a596:	1c43      	adds	r3, r0, #1
 800a598:	89a3      	ldrh	r3, [r4, #12]
 800a59a:	bf15      	itete	ne
 800a59c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a59e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5a6:	81a3      	strheq	r3, [r4, #12]
 800a5a8:	bf18      	it	ne
 800a5aa:	81a3      	strhne	r3, [r4, #12]
 800a5ac:	bd10      	pop	{r4, pc}

0800a5ae <__sclose>:
 800a5ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b2:	f000 b865 	b.w	800a680 <_close_r>

0800a5b6 <memset>:
 800a5b6:	4402      	add	r2, r0
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	d100      	bne.n	800a5c0 <memset+0xa>
 800a5be:	4770      	bx	lr
 800a5c0:	f803 1b01 	strb.w	r1, [r3], #1
 800a5c4:	e7f9      	b.n	800a5ba <memset+0x4>
	...

0800a5c8 <strtok>:
 800a5c8:	4b16      	ldr	r3, [pc, #88]	; (800a624 <strtok+0x5c>)
 800a5ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5cc:	681e      	ldr	r6, [r3, #0]
 800a5ce:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a5d0:	4605      	mov	r5, r0
 800a5d2:	b9fc      	cbnz	r4, 800a614 <strtok+0x4c>
 800a5d4:	2050      	movs	r0, #80	; 0x50
 800a5d6:	9101      	str	r1, [sp, #4]
 800a5d8:	f000 f93e 	bl	800a858 <malloc>
 800a5dc:	9901      	ldr	r1, [sp, #4]
 800a5de:	6470      	str	r0, [r6, #68]	; 0x44
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	b920      	cbnz	r0, 800a5ee <strtok+0x26>
 800a5e4:	4b10      	ldr	r3, [pc, #64]	; (800a628 <strtok+0x60>)
 800a5e6:	4811      	ldr	r0, [pc, #68]	; (800a62c <strtok+0x64>)
 800a5e8:	215b      	movs	r1, #91	; 0x5b
 800a5ea:	f000 f8cb 	bl	800a784 <__assert_func>
 800a5ee:	e9c0 4400 	strd	r4, r4, [r0]
 800a5f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a5f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a5fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a5fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a602:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a606:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a60a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a60e:	6184      	str	r4, [r0, #24]
 800a610:	7704      	strb	r4, [r0, #28]
 800a612:	6244      	str	r4, [r0, #36]	; 0x24
 800a614:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a616:	2301      	movs	r3, #1
 800a618:	4628      	mov	r0, r5
 800a61a:	b002      	add	sp, #8
 800a61c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a620:	f000 b806 	b.w	800a630 <__strtok_r>
 800a624:	20000068 	.word	0x20000068
 800a628:	0800b96d 	.word	0x0800b96d
 800a62c:	0800b984 	.word	0x0800b984

0800a630 <__strtok_r>:
 800a630:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a632:	b908      	cbnz	r0, 800a638 <__strtok_r+0x8>
 800a634:	6810      	ldr	r0, [r2, #0]
 800a636:	b188      	cbz	r0, 800a65c <__strtok_r+0x2c>
 800a638:	4604      	mov	r4, r0
 800a63a:	4620      	mov	r0, r4
 800a63c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a640:	460f      	mov	r7, r1
 800a642:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a646:	b91e      	cbnz	r6, 800a650 <__strtok_r+0x20>
 800a648:	b965      	cbnz	r5, 800a664 <__strtok_r+0x34>
 800a64a:	6015      	str	r5, [r2, #0]
 800a64c:	4628      	mov	r0, r5
 800a64e:	e005      	b.n	800a65c <__strtok_r+0x2c>
 800a650:	42b5      	cmp	r5, r6
 800a652:	d1f6      	bne.n	800a642 <__strtok_r+0x12>
 800a654:	2b00      	cmp	r3, #0
 800a656:	d1f0      	bne.n	800a63a <__strtok_r+0xa>
 800a658:	6014      	str	r4, [r2, #0]
 800a65a:	7003      	strb	r3, [r0, #0]
 800a65c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a65e:	461c      	mov	r4, r3
 800a660:	e00c      	b.n	800a67c <__strtok_r+0x4c>
 800a662:	b915      	cbnz	r5, 800a66a <__strtok_r+0x3a>
 800a664:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a668:	460e      	mov	r6, r1
 800a66a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a66e:	42ab      	cmp	r3, r5
 800a670:	d1f7      	bne.n	800a662 <__strtok_r+0x32>
 800a672:	2b00      	cmp	r3, #0
 800a674:	d0f3      	beq.n	800a65e <__strtok_r+0x2e>
 800a676:	2300      	movs	r3, #0
 800a678:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a67c:	6014      	str	r4, [r2, #0]
 800a67e:	e7ed      	b.n	800a65c <__strtok_r+0x2c>

0800a680 <_close_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	4d06      	ldr	r5, [pc, #24]	; (800a69c <_close_r+0x1c>)
 800a684:	2300      	movs	r3, #0
 800a686:	4604      	mov	r4, r0
 800a688:	4608      	mov	r0, r1
 800a68a:	602b      	str	r3, [r5, #0]
 800a68c:	f7f7 faee 	bl	8001c6c <_close>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d102      	bne.n	800a69a <_close_r+0x1a>
 800a694:	682b      	ldr	r3, [r5, #0]
 800a696:	b103      	cbz	r3, 800a69a <_close_r+0x1a>
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	20001c74 	.word	0x20001c74

0800a6a0 <_lseek_r>:
 800a6a0:	b538      	push	{r3, r4, r5, lr}
 800a6a2:	4d07      	ldr	r5, [pc, #28]	; (800a6c0 <_lseek_r+0x20>)
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	4608      	mov	r0, r1
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	602a      	str	r2, [r5, #0]
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	f7f7 fb03 	bl	8001cba <_lseek>
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	d102      	bne.n	800a6be <_lseek_r+0x1e>
 800a6b8:	682b      	ldr	r3, [r5, #0]
 800a6ba:	b103      	cbz	r3, 800a6be <_lseek_r+0x1e>
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	bd38      	pop	{r3, r4, r5, pc}
 800a6c0:	20001c74 	.word	0x20001c74

0800a6c4 <_read_r>:
 800a6c4:	b538      	push	{r3, r4, r5, lr}
 800a6c6:	4d07      	ldr	r5, [pc, #28]	; (800a6e4 <_read_r+0x20>)
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	4608      	mov	r0, r1
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	602a      	str	r2, [r5, #0]
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	f7f7 fa91 	bl	8001bfa <_read>
 800a6d8:	1c43      	adds	r3, r0, #1
 800a6da:	d102      	bne.n	800a6e2 <_read_r+0x1e>
 800a6dc:	682b      	ldr	r3, [r5, #0]
 800a6de:	b103      	cbz	r3, 800a6e2 <_read_r+0x1e>
 800a6e0:	6023      	str	r3, [r4, #0]
 800a6e2:	bd38      	pop	{r3, r4, r5, pc}
 800a6e4:	20001c74 	.word	0x20001c74

0800a6e8 <_write_r>:
 800a6e8:	b538      	push	{r3, r4, r5, lr}
 800a6ea:	4d07      	ldr	r5, [pc, #28]	; (800a708 <_write_r+0x20>)
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	4608      	mov	r0, r1
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	602a      	str	r2, [r5, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	f7f7 fa9c 	bl	8001c34 <_write>
 800a6fc:	1c43      	adds	r3, r0, #1
 800a6fe:	d102      	bne.n	800a706 <_write_r+0x1e>
 800a700:	682b      	ldr	r3, [r5, #0]
 800a702:	b103      	cbz	r3, 800a706 <_write_r+0x1e>
 800a704:	6023      	str	r3, [r4, #0]
 800a706:	bd38      	pop	{r3, r4, r5, pc}
 800a708:	20001c74 	.word	0x20001c74

0800a70c <__errno>:
 800a70c:	4b01      	ldr	r3, [pc, #4]	; (800a714 <__errno+0x8>)
 800a70e:	6818      	ldr	r0, [r3, #0]
 800a710:	4770      	bx	lr
 800a712:	bf00      	nop
 800a714:	20000068 	.word	0x20000068

0800a718 <__libc_init_array>:
 800a718:	b570      	push	{r4, r5, r6, lr}
 800a71a:	4d0d      	ldr	r5, [pc, #52]	; (800a750 <__libc_init_array+0x38>)
 800a71c:	4c0d      	ldr	r4, [pc, #52]	; (800a754 <__libc_init_array+0x3c>)
 800a71e:	1b64      	subs	r4, r4, r5
 800a720:	10a4      	asrs	r4, r4, #2
 800a722:	2600      	movs	r6, #0
 800a724:	42a6      	cmp	r6, r4
 800a726:	d109      	bne.n	800a73c <__libc_init_array+0x24>
 800a728:	4d0b      	ldr	r5, [pc, #44]	; (800a758 <__libc_init_array+0x40>)
 800a72a:	4c0c      	ldr	r4, [pc, #48]	; (800a75c <__libc_init_array+0x44>)
 800a72c:	f000 fffa 	bl	800b724 <_init>
 800a730:	1b64      	subs	r4, r4, r5
 800a732:	10a4      	asrs	r4, r4, #2
 800a734:	2600      	movs	r6, #0
 800a736:	42a6      	cmp	r6, r4
 800a738:	d105      	bne.n	800a746 <__libc_init_array+0x2e>
 800a73a:	bd70      	pop	{r4, r5, r6, pc}
 800a73c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a740:	4798      	blx	r3
 800a742:	3601      	adds	r6, #1
 800a744:	e7ee      	b.n	800a724 <__libc_init_array+0xc>
 800a746:	f855 3b04 	ldr.w	r3, [r5], #4
 800a74a:	4798      	blx	r3
 800a74c:	3601      	adds	r6, #1
 800a74e:	e7f2      	b.n	800a736 <__libc_init_array+0x1e>
 800a750:	0800ba58 	.word	0x0800ba58
 800a754:	0800ba58 	.word	0x0800ba58
 800a758:	0800ba58 	.word	0x0800ba58
 800a75c:	0800ba5c 	.word	0x0800ba5c

0800a760 <__retarget_lock_init_recursive>:
 800a760:	4770      	bx	lr

0800a762 <__retarget_lock_acquire_recursive>:
 800a762:	4770      	bx	lr

0800a764 <__retarget_lock_release_recursive>:
 800a764:	4770      	bx	lr

0800a766 <memcpy>:
 800a766:	440a      	add	r2, r1
 800a768:	4291      	cmp	r1, r2
 800a76a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a76e:	d100      	bne.n	800a772 <memcpy+0xc>
 800a770:	4770      	bx	lr
 800a772:	b510      	push	{r4, lr}
 800a774:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a778:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a77c:	4291      	cmp	r1, r2
 800a77e:	d1f9      	bne.n	800a774 <memcpy+0xe>
 800a780:	bd10      	pop	{r4, pc}
	...

0800a784 <__assert_func>:
 800a784:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a786:	4614      	mov	r4, r2
 800a788:	461a      	mov	r2, r3
 800a78a:	4b09      	ldr	r3, [pc, #36]	; (800a7b0 <__assert_func+0x2c>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4605      	mov	r5, r0
 800a790:	68d8      	ldr	r0, [r3, #12]
 800a792:	b14c      	cbz	r4, 800a7a8 <__assert_func+0x24>
 800a794:	4b07      	ldr	r3, [pc, #28]	; (800a7b4 <__assert_func+0x30>)
 800a796:	9100      	str	r1, [sp, #0]
 800a798:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a79c:	4906      	ldr	r1, [pc, #24]	; (800a7b8 <__assert_func+0x34>)
 800a79e:	462b      	mov	r3, r5
 800a7a0:	f000 fca4 	bl	800b0ec <fiprintf>
 800a7a4:	f000 fcde 	bl	800b164 <abort>
 800a7a8:	4b04      	ldr	r3, [pc, #16]	; (800a7bc <__assert_func+0x38>)
 800a7aa:	461c      	mov	r4, r3
 800a7ac:	e7f3      	b.n	800a796 <__assert_func+0x12>
 800a7ae:	bf00      	nop
 800a7b0:	20000068 	.word	0x20000068
 800a7b4:	0800b9de 	.word	0x0800b9de
 800a7b8:	0800b9eb 	.word	0x0800b9eb
 800a7bc:	0800ba19 	.word	0x0800ba19

0800a7c0 <_free_r>:
 800a7c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7c2:	2900      	cmp	r1, #0
 800a7c4:	d044      	beq.n	800a850 <_free_r+0x90>
 800a7c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7ca:	9001      	str	r0, [sp, #4]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f1a1 0404 	sub.w	r4, r1, #4
 800a7d2:	bfb8      	it	lt
 800a7d4:	18e4      	addlt	r4, r4, r3
 800a7d6:	f000 f8e7 	bl	800a9a8 <__malloc_lock>
 800a7da:	4a1e      	ldr	r2, [pc, #120]	; (800a854 <_free_r+0x94>)
 800a7dc:	9801      	ldr	r0, [sp, #4]
 800a7de:	6813      	ldr	r3, [r2, #0]
 800a7e0:	b933      	cbnz	r3, 800a7f0 <_free_r+0x30>
 800a7e2:	6063      	str	r3, [r4, #4]
 800a7e4:	6014      	str	r4, [r2, #0]
 800a7e6:	b003      	add	sp, #12
 800a7e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7ec:	f000 b8e2 	b.w	800a9b4 <__malloc_unlock>
 800a7f0:	42a3      	cmp	r3, r4
 800a7f2:	d908      	bls.n	800a806 <_free_r+0x46>
 800a7f4:	6825      	ldr	r5, [r4, #0]
 800a7f6:	1961      	adds	r1, r4, r5
 800a7f8:	428b      	cmp	r3, r1
 800a7fa:	bf01      	itttt	eq
 800a7fc:	6819      	ldreq	r1, [r3, #0]
 800a7fe:	685b      	ldreq	r3, [r3, #4]
 800a800:	1949      	addeq	r1, r1, r5
 800a802:	6021      	streq	r1, [r4, #0]
 800a804:	e7ed      	b.n	800a7e2 <_free_r+0x22>
 800a806:	461a      	mov	r2, r3
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	b10b      	cbz	r3, 800a810 <_free_r+0x50>
 800a80c:	42a3      	cmp	r3, r4
 800a80e:	d9fa      	bls.n	800a806 <_free_r+0x46>
 800a810:	6811      	ldr	r1, [r2, #0]
 800a812:	1855      	adds	r5, r2, r1
 800a814:	42a5      	cmp	r5, r4
 800a816:	d10b      	bne.n	800a830 <_free_r+0x70>
 800a818:	6824      	ldr	r4, [r4, #0]
 800a81a:	4421      	add	r1, r4
 800a81c:	1854      	adds	r4, r2, r1
 800a81e:	42a3      	cmp	r3, r4
 800a820:	6011      	str	r1, [r2, #0]
 800a822:	d1e0      	bne.n	800a7e6 <_free_r+0x26>
 800a824:	681c      	ldr	r4, [r3, #0]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	6053      	str	r3, [r2, #4]
 800a82a:	440c      	add	r4, r1
 800a82c:	6014      	str	r4, [r2, #0]
 800a82e:	e7da      	b.n	800a7e6 <_free_r+0x26>
 800a830:	d902      	bls.n	800a838 <_free_r+0x78>
 800a832:	230c      	movs	r3, #12
 800a834:	6003      	str	r3, [r0, #0]
 800a836:	e7d6      	b.n	800a7e6 <_free_r+0x26>
 800a838:	6825      	ldr	r5, [r4, #0]
 800a83a:	1961      	adds	r1, r4, r5
 800a83c:	428b      	cmp	r3, r1
 800a83e:	bf04      	itt	eq
 800a840:	6819      	ldreq	r1, [r3, #0]
 800a842:	685b      	ldreq	r3, [r3, #4]
 800a844:	6063      	str	r3, [r4, #4]
 800a846:	bf04      	itt	eq
 800a848:	1949      	addeq	r1, r1, r5
 800a84a:	6021      	streq	r1, [r4, #0]
 800a84c:	6054      	str	r4, [r2, #4]
 800a84e:	e7ca      	b.n	800a7e6 <_free_r+0x26>
 800a850:	b003      	add	sp, #12
 800a852:	bd30      	pop	{r4, r5, pc}
 800a854:	20001c7c 	.word	0x20001c7c

0800a858 <malloc>:
 800a858:	4b02      	ldr	r3, [pc, #8]	; (800a864 <malloc+0xc>)
 800a85a:	4601      	mov	r1, r0
 800a85c:	6818      	ldr	r0, [r3, #0]
 800a85e:	f000 b823 	b.w	800a8a8 <_malloc_r>
 800a862:	bf00      	nop
 800a864:	20000068 	.word	0x20000068

0800a868 <sbrk_aligned>:
 800a868:	b570      	push	{r4, r5, r6, lr}
 800a86a:	4e0e      	ldr	r6, [pc, #56]	; (800a8a4 <sbrk_aligned+0x3c>)
 800a86c:	460c      	mov	r4, r1
 800a86e:	6831      	ldr	r1, [r6, #0]
 800a870:	4605      	mov	r5, r0
 800a872:	b911      	cbnz	r1, 800a87a <sbrk_aligned+0x12>
 800a874:	f000 fc66 	bl	800b144 <_sbrk_r>
 800a878:	6030      	str	r0, [r6, #0]
 800a87a:	4621      	mov	r1, r4
 800a87c:	4628      	mov	r0, r5
 800a87e:	f000 fc61 	bl	800b144 <_sbrk_r>
 800a882:	1c43      	adds	r3, r0, #1
 800a884:	d00a      	beq.n	800a89c <sbrk_aligned+0x34>
 800a886:	1cc4      	adds	r4, r0, #3
 800a888:	f024 0403 	bic.w	r4, r4, #3
 800a88c:	42a0      	cmp	r0, r4
 800a88e:	d007      	beq.n	800a8a0 <sbrk_aligned+0x38>
 800a890:	1a21      	subs	r1, r4, r0
 800a892:	4628      	mov	r0, r5
 800a894:	f000 fc56 	bl	800b144 <_sbrk_r>
 800a898:	3001      	adds	r0, #1
 800a89a:	d101      	bne.n	800a8a0 <sbrk_aligned+0x38>
 800a89c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	bd70      	pop	{r4, r5, r6, pc}
 800a8a4:	20001c80 	.word	0x20001c80

0800a8a8 <_malloc_r>:
 800a8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8ac:	1ccd      	adds	r5, r1, #3
 800a8ae:	f025 0503 	bic.w	r5, r5, #3
 800a8b2:	3508      	adds	r5, #8
 800a8b4:	2d0c      	cmp	r5, #12
 800a8b6:	bf38      	it	cc
 800a8b8:	250c      	movcc	r5, #12
 800a8ba:	2d00      	cmp	r5, #0
 800a8bc:	4607      	mov	r7, r0
 800a8be:	db01      	blt.n	800a8c4 <_malloc_r+0x1c>
 800a8c0:	42a9      	cmp	r1, r5
 800a8c2:	d905      	bls.n	800a8d0 <_malloc_r+0x28>
 800a8c4:	230c      	movs	r3, #12
 800a8c6:	603b      	str	r3, [r7, #0]
 800a8c8:	2600      	movs	r6, #0
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a9a4 <_malloc_r+0xfc>
 800a8d4:	f000 f868 	bl	800a9a8 <__malloc_lock>
 800a8d8:	f8d8 3000 	ldr.w	r3, [r8]
 800a8dc:	461c      	mov	r4, r3
 800a8de:	bb5c      	cbnz	r4, 800a938 <_malloc_r+0x90>
 800a8e0:	4629      	mov	r1, r5
 800a8e2:	4638      	mov	r0, r7
 800a8e4:	f7ff ffc0 	bl	800a868 <sbrk_aligned>
 800a8e8:	1c43      	adds	r3, r0, #1
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	d155      	bne.n	800a99a <_malloc_r+0xf2>
 800a8ee:	f8d8 4000 	ldr.w	r4, [r8]
 800a8f2:	4626      	mov	r6, r4
 800a8f4:	2e00      	cmp	r6, #0
 800a8f6:	d145      	bne.n	800a984 <_malloc_r+0xdc>
 800a8f8:	2c00      	cmp	r4, #0
 800a8fa:	d048      	beq.n	800a98e <_malloc_r+0xe6>
 800a8fc:	6823      	ldr	r3, [r4, #0]
 800a8fe:	4631      	mov	r1, r6
 800a900:	4638      	mov	r0, r7
 800a902:	eb04 0903 	add.w	r9, r4, r3
 800a906:	f000 fc1d 	bl	800b144 <_sbrk_r>
 800a90a:	4581      	cmp	r9, r0
 800a90c:	d13f      	bne.n	800a98e <_malloc_r+0xe6>
 800a90e:	6821      	ldr	r1, [r4, #0]
 800a910:	1a6d      	subs	r5, r5, r1
 800a912:	4629      	mov	r1, r5
 800a914:	4638      	mov	r0, r7
 800a916:	f7ff ffa7 	bl	800a868 <sbrk_aligned>
 800a91a:	3001      	adds	r0, #1
 800a91c:	d037      	beq.n	800a98e <_malloc_r+0xe6>
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	442b      	add	r3, r5
 800a922:	6023      	str	r3, [r4, #0]
 800a924:	f8d8 3000 	ldr.w	r3, [r8]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d038      	beq.n	800a99e <_malloc_r+0xf6>
 800a92c:	685a      	ldr	r2, [r3, #4]
 800a92e:	42a2      	cmp	r2, r4
 800a930:	d12b      	bne.n	800a98a <_malloc_r+0xe2>
 800a932:	2200      	movs	r2, #0
 800a934:	605a      	str	r2, [r3, #4]
 800a936:	e00f      	b.n	800a958 <_malloc_r+0xb0>
 800a938:	6822      	ldr	r2, [r4, #0]
 800a93a:	1b52      	subs	r2, r2, r5
 800a93c:	d41f      	bmi.n	800a97e <_malloc_r+0xd6>
 800a93e:	2a0b      	cmp	r2, #11
 800a940:	d917      	bls.n	800a972 <_malloc_r+0xca>
 800a942:	1961      	adds	r1, r4, r5
 800a944:	42a3      	cmp	r3, r4
 800a946:	6025      	str	r5, [r4, #0]
 800a948:	bf18      	it	ne
 800a94a:	6059      	strne	r1, [r3, #4]
 800a94c:	6863      	ldr	r3, [r4, #4]
 800a94e:	bf08      	it	eq
 800a950:	f8c8 1000 	streq.w	r1, [r8]
 800a954:	5162      	str	r2, [r4, r5]
 800a956:	604b      	str	r3, [r1, #4]
 800a958:	4638      	mov	r0, r7
 800a95a:	f104 060b 	add.w	r6, r4, #11
 800a95e:	f000 f829 	bl	800a9b4 <__malloc_unlock>
 800a962:	f026 0607 	bic.w	r6, r6, #7
 800a966:	1d23      	adds	r3, r4, #4
 800a968:	1af2      	subs	r2, r6, r3
 800a96a:	d0ae      	beq.n	800a8ca <_malloc_r+0x22>
 800a96c:	1b9b      	subs	r3, r3, r6
 800a96e:	50a3      	str	r3, [r4, r2]
 800a970:	e7ab      	b.n	800a8ca <_malloc_r+0x22>
 800a972:	42a3      	cmp	r3, r4
 800a974:	6862      	ldr	r2, [r4, #4]
 800a976:	d1dd      	bne.n	800a934 <_malloc_r+0x8c>
 800a978:	f8c8 2000 	str.w	r2, [r8]
 800a97c:	e7ec      	b.n	800a958 <_malloc_r+0xb0>
 800a97e:	4623      	mov	r3, r4
 800a980:	6864      	ldr	r4, [r4, #4]
 800a982:	e7ac      	b.n	800a8de <_malloc_r+0x36>
 800a984:	4634      	mov	r4, r6
 800a986:	6876      	ldr	r6, [r6, #4]
 800a988:	e7b4      	b.n	800a8f4 <_malloc_r+0x4c>
 800a98a:	4613      	mov	r3, r2
 800a98c:	e7cc      	b.n	800a928 <_malloc_r+0x80>
 800a98e:	230c      	movs	r3, #12
 800a990:	603b      	str	r3, [r7, #0]
 800a992:	4638      	mov	r0, r7
 800a994:	f000 f80e 	bl	800a9b4 <__malloc_unlock>
 800a998:	e797      	b.n	800a8ca <_malloc_r+0x22>
 800a99a:	6025      	str	r5, [r4, #0]
 800a99c:	e7dc      	b.n	800a958 <_malloc_r+0xb0>
 800a99e:	605b      	str	r3, [r3, #4]
 800a9a0:	deff      	udf	#255	; 0xff
 800a9a2:	bf00      	nop
 800a9a4:	20001c7c 	.word	0x20001c7c

0800a9a8 <__malloc_lock>:
 800a9a8:	4801      	ldr	r0, [pc, #4]	; (800a9b0 <__malloc_lock+0x8>)
 800a9aa:	f7ff beda 	b.w	800a762 <__retarget_lock_acquire_recursive>
 800a9ae:	bf00      	nop
 800a9b0:	20001c78 	.word	0x20001c78

0800a9b4 <__malloc_unlock>:
 800a9b4:	4801      	ldr	r0, [pc, #4]	; (800a9bc <__malloc_unlock+0x8>)
 800a9b6:	f7ff bed5 	b.w	800a764 <__retarget_lock_release_recursive>
 800a9ba:	bf00      	nop
 800a9bc:	20001c78 	.word	0x20001c78

0800a9c0 <__ssputs_r>:
 800a9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c4:	688e      	ldr	r6, [r1, #8]
 800a9c6:	461f      	mov	r7, r3
 800a9c8:	42be      	cmp	r6, r7
 800a9ca:	680b      	ldr	r3, [r1, #0]
 800a9cc:	4682      	mov	sl, r0
 800a9ce:	460c      	mov	r4, r1
 800a9d0:	4690      	mov	r8, r2
 800a9d2:	d82c      	bhi.n	800aa2e <__ssputs_r+0x6e>
 800a9d4:	898a      	ldrh	r2, [r1, #12]
 800a9d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9da:	d026      	beq.n	800aa2a <__ssputs_r+0x6a>
 800a9dc:	6965      	ldr	r5, [r4, #20]
 800a9de:	6909      	ldr	r1, [r1, #16]
 800a9e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a9e4:	eba3 0901 	sub.w	r9, r3, r1
 800a9e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a9ec:	1c7b      	adds	r3, r7, #1
 800a9ee:	444b      	add	r3, r9
 800a9f0:	106d      	asrs	r5, r5, #1
 800a9f2:	429d      	cmp	r5, r3
 800a9f4:	bf38      	it	cc
 800a9f6:	461d      	movcc	r5, r3
 800a9f8:	0553      	lsls	r3, r2, #21
 800a9fa:	d527      	bpl.n	800aa4c <__ssputs_r+0x8c>
 800a9fc:	4629      	mov	r1, r5
 800a9fe:	f7ff ff53 	bl	800a8a8 <_malloc_r>
 800aa02:	4606      	mov	r6, r0
 800aa04:	b360      	cbz	r0, 800aa60 <__ssputs_r+0xa0>
 800aa06:	6921      	ldr	r1, [r4, #16]
 800aa08:	464a      	mov	r2, r9
 800aa0a:	f7ff feac 	bl	800a766 <memcpy>
 800aa0e:	89a3      	ldrh	r3, [r4, #12]
 800aa10:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa18:	81a3      	strh	r3, [r4, #12]
 800aa1a:	6126      	str	r6, [r4, #16]
 800aa1c:	6165      	str	r5, [r4, #20]
 800aa1e:	444e      	add	r6, r9
 800aa20:	eba5 0509 	sub.w	r5, r5, r9
 800aa24:	6026      	str	r6, [r4, #0]
 800aa26:	60a5      	str	r5, [r4, #8]
 800aa28:	463e      	mov	r6, r7
 800aa2a:	42be      	cmp	r6, r7
 800aa2c:	d900      	bls.n	800aa30 <__ssputs_r+0x70>
 800aa2e:	463e      	mov	r6, r7
 800aa30:	6820      	ldr	r0, [r4, #0]
 800aa32:	4632      	mov	r2, r6
 800aa34:	4641      	mov	r1, r8
 800aa36:	f000 fb6b 	bl	800b110 <memmove>
 800aa3a:	68a3      	ldr	r3, [r4, #8]
 800aa3c:	1b9b      	subs	r3, r3, r6
 800aa3e:	60a3      	str	r3, [r4, #8]
 800aa40:	6823      	ldr	r3, [r4, #0]
 800aa42:	4433      	add	r3, r6
 800aa44:	6023      	str	r3, [r4, #0]
 800aa46:	2000      	movs	r0, #0
 800aa48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa4c:	462a      	mov	r2, r5
 800aa4e:	f000 fb90 	bl	800b172 <_realloc_r>
 800aa52:	4606      	mov	r6, r0
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d1e0      	bne.n	800aa1a <__ssputs_r+0x5a>
 800aa58:	6921      	ldr	r1, [r4, #16]
 800aa5a:	4650      	mov	r0, sl
 800aa5c:	f7ff feb0 	bl	800a7c0 <_free_r>
 800aa60:	230c      	movs	r3, #12
 800aa62:	f8ca 3000 	str.w	r3, [sl]
 800aa66:	89a3      	ldrh	r3, [r4, #12]
 800aa68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa6c:	81a3      	strh	r3, [r4, #12]
 800aa6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa72:	e7e9      	b.n	800aa48 <__ssputs_r+0x88>

0800aa74 <_svfiprintf_r>:
 800aa74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa78:	4698      	mov	r8, r3
 800aa7a:	898b      	ldrh	r3, [r1, #12]
 800aa7c:	061b      	lsls	r3, r3, #24
 800aa7e:	b09d      	sub	sp, #116	; 0x74
 800aa80:	4607      	mov	r7, r0
 800aa82:	460d      	mov	r5, r1
 800aa84:	4614      	mov	r4, r2
 800aa86:	d50e      	bpl.n	800aaa6 <_svfiprintf_r+0x32>
 800aa88:	690b      	ldr	r3, [r1, #16]
 800aa8a:	b963      	cbnz	r3, 800aaa6 <_svfiprintf_r+0x32>
 800aa8c:	2140      	movs	r1, #64	; 0x40
 800aa8e:	f7ff ff0b 	bl	800a8a8 <_malloc_r>
 800aa92:	6028      	str	r0, [r5, #0]
 800aa94:	6128      	str	r0, [r5, #16]
 800aa96:	b920      	cbnz	r0, 800aaa2 <_svfiprintf_r+0x2e>
 800aa98:	230c      	movs	r3, #12
 800aa9a:	603b      	str	r3, [r7, #0]
 800aa9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aaa0:	e0d0      	b.n	800ac44 <_svfiprintf_r+0x1d0>
 800aaa2:	2340      	movs	r3, #64	; 0x40
 800aaa4:	616b      	str	r3, [r5, #20]
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	9309      	str	r3, [sp, #36]	; 0x24
 800aaaa:	2320      	movs	r3, #32
 800aaac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aab0:	f8cd 800c 	str.w	r8, [sp, #12]
 800aab4:	2330      	movs	r3, #48	; 0x30
 800aab6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ac5c <_svfiprintf_r+0x1e8>
 800aaba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aabe:	f04f 0901 	mov.w	r9, #1
 800aac2:	4623      	mov	r3, r4
 800aac4:	469a      	mov	sl, r3
 800aac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaca:	b10a      	cbz	r2, 800aad0 <_svfiprintf_r+0x5c>
 800aacc:	2a25      	cmp	r2, #37	; 0x25
 800aace:	d1f9      	bne.n	800aac4 <_svfiprintf_r+0x50>
 800aad0:	ebba 0b04 	subs.w	fp, sl, r4
 800aad4:	d00b      	beq.n	800aaee <_svfiprintf_r+0x7a>
 800aad6:	465b      	mov	r3, fp
 800aad8:	4622      	mov	r2, r4
 800aada:	4629      	mov	r1, r5
 800aadc:	4638      	mov	r0, r7
 800aade:	f7ff ff6f 	bl	800a9c0 <__ssputs_r>
 800aae2:	3001      	adds	r0, #1
 800aae4:	f000 80a9 	beq.w	800ac3a <_svfiprintf_r+0x1c6>
 800aae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaea:	445a      	add	r2, fp
 800aaec:	9209      	str	r2, [sp, #36]	; 0x24
 800aaee:	f89a 3000 	ldrb.w	r3, [sl]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f000 80a1 	beq.w	800ac3a <_svfiprintf_r+0x1c6>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aafe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab02:	f10a 0a01 	add.w	sl, sl, #1
 800ab06:	9304      	str	r3, [sp, #16]
 800ab08:	9307      	str	r3, [sp, #28]
 800ab0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab0e:	931a      	str	r3, [sp, #104]	; 0x68
 800ab10:	4654      	mov	r4, sl
 800ab12:	2205      	movs	r2, #5
 800ab14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab18:	4850      	ldr	r0, [pc, #320]	; (800ac5c <_svfiprintf_r+0x1e8>)
 800ab1a:	f7f5 fb71 	bl	8000200 <memchr>
 800ab1e:	9a04      	ldr	r2, [sp, #16]
 800ab20:	b9d8      	cbnz	r0, 800ab5a <_svfiprintf_r+0xe6>
 800ab22:	06d0      	lsls	r0, r2, #27
 800ab24:	bf44      	itt	mi
 800ab26:	2320      	movmi	r3, #32
 800ab28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab2c:	0711      	lsls	r1, r2, #28
 800ab2e:	bf44      	itt	mi
 800ab30:	232b      	movmi	r3, #43	; 0x2b
 800ab32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab36:	f89a 3000 	ldrb.w	r3, [sl]
 800ab3a:	2b2a      	cmp	r3, #42	; 0x2a
 800ab3c:	d015      	beq.n	800ab6a <_svfiprintf_r+0xf6>
 800ab3e:	9a07      	ldr	r2, [sp, #28]
 800ab40:	4654      	mov	r4, sl
 800ab42:	2000      	movs	r0, #0
 800ab44:	f04f 0c0a 	mov.w	ip, #10
 800ab48:	4621      	mov	r1, r4
 800ab4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab4e:	3b30      	subs	r3, #48	; 0x30
 800ab50:	2b09      	cmp	r3, #9
 800ab52:	d94d      	bls.n	800abf0 <_svfiprintf_r+0x17c>
 800ab54:	b1b0      	cbz	r0, 800ab84 <_svfiprintf_r+0x110>
 800ab56:	9207      	str	r2, [sp, #28]
 800ab58:	e014      	b.n	800ab84 <_svfiprintf_r+0x110>
 800ab5a:	eba0 0308 	sub.w	r3, r0, r8
 800ab5e:	fa09 f303 	lsl.w	r3, r9, r3
 800ab62:	4313      	orrs	r3, r2
 800ab64:	9304      	str	r3, [sp, #16]
 800ab66:	46a2      	mov	sl, r4
 800ab68:	e7d2      	b.n	800ab10 <_svfiprintf_r+0x9c>
 800ab6a:	9b03      	ldr	r3, [sp, #12]
 800ab6c:	1d19      	adds	r1, r3, #4
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	9103      	str	r1, [sp, #12]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	bfbb      	ittet	lt
 800ab76:	425b      	neglt	r3, r3
 800ab78:	f042 0202 	orrlt.w	r2, r2, #2
 800ab7c:	9307      	strge	r3, [sp, #28]
 800ab7e:	9307      	strlt	r3, [sp, #28]
 800ab80:	bfb8      	it	lt
 800ab82:	9204      	strlt	r2, [sp, #16]
 800ab84:	7823      	ldrb	r3, [r4, #0]
 800ab86:	2b2e      	cmp	r3, #46	; 0x2e
 800ab88:	d10c      	bne.n	800aba4 <_svfiprintf_r+0x130>
 800ab8a:	7863      	ldrb	r3, [r4, #1]
 800ab8c:	2b2a      	cmp	r3, #42	; 0x2a
 800ab8e:	d134      	bne.n	800abfa <_svfiprintf_r+0x186>
 800ab90:	9b03      	ldr	r3, [sp, #12]
 800ab92:	1d1a      	adds	r2, r3, #4
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	9203      	str	r2, [sp, #12]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	bfb8      	it	lt
 800ab9c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aba0:	3402      	adds	r4, #2
 800aba2:	9305      	str	r3, [sp, #20]
 800aba4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ac6c <_svfiprintf_r+0x1f8>
 800aba8:	7821      	ldrb	r1, [r4, #0]
 800abaa:	2203      	movs	r2, #3
 800abac:	4650      	mov	r0, sl
 800abae:	f7f5 fb27 	bl	8000200 <memchr>
 800abb2:	b138      	cbz	r0, 800abc4 <_svfiprintf_r+0x150>
 800abb4:	9b04      	ldr	r3, [sp, #16]
 800abb6:	eba0 000a 	sub.w	r0, r0, sl
 800abba:	2240      	movs	r2, #64	; 0x40
 800abbc:	4082      	lsls	r2, r0
 800abbe:	4313      	orrs	r3, r2
 800abc0:	3401      	adds	r4, #1
 800abc2:	9304      	str	r3, [sp, #16]
 800abc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abc8:	4825      	ldr	r0, [pc, #148]	; (800ac60 <_svfiprintf_r+0x1ec>)
 800abca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abce:	2206      	movs	r2, #6
 800abd0:	f7f5 fb16 	bl	8000200 <memchr>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d038      	beq.n	800ac4a <_svfiprintf_r+0x1d6>
 800abd8:	4b22      	ldr	r3, [pc, #136]	; (800ac64 <_svfiprintf_r+0x1f0>)
 800abda:	bb1b      	cbnz	r3, 800ac24 <_svfiprintf_r+0x1b0>
 800abdc:	9b03      	ldr	r3, [sp, #12]
 800abde:	3307      	adds	r3, #7
 800abe0:	f023 0307 	bic.w	r3, r3, #7
 800abe4:	3308      	adds	r3, #8
 800abe6:	9303      	str	r3, [sp, #12]
 800abe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abea:	4433      	add	r3, r6
 800abec:	9309      	str	r3, [sp, #36]	; 0x24
 800abee:	e768      	b.n	800aac2 <_svfiprintf_r+0x4e>
 800abf0:	fb0c 3202 	mla	r2, ip, r2, r3
 800abf4:	460c      	mov	r4, r1
 800abf6:	2001      	movs	r0, #1
 800abf8:	e7a6      	b.n	800ab48 <_svfiprintf_r+0xd4>
 800abfa:	2300      	movs	r3, #0
 800abfc:	3401      	adds	r4, #1
 800abfe:	9305      	str	r3, [sp, #20]
 800ac00:	4619      	mov	r1, r3
 800ac02:	f04f 0c0a 	mov.w	ip, #10
 800ac06:	4620      	mov	r0, r4
 800ac08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac0c:	3a30      	subs	r2, #48	; 0x30
 800ac0e:	2a09      	cmp	r2, #9
 800ac10:	d903      	bls.n	800ac1a <_svfiprintf_r+0x1a6>
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d0c6      	beq.n	800aba4 <_svfiprintf_r+0x130>
 800ac16:	9105      	str	r1, [sp, #20]
 800ac18:	e7c4      	b.n	800aba4 <_svfiprintf_r+0x130>
 800ac1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac1e:	4604      	mov	r4, r0
 800ac20:	2301      	movs	r3, #1
 800ac22:	e7f0      	b.n	800ac06 <_svfiprintf_r+0x192>
 800ac24:	ab03      	add	r3, sp, #12
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	462a      	mov	r2, r5
 800ac2a:	4b0f      	ldr	r3, [pc, #60]	; (800ac68 <_svfiprintf_r+0x1f4>)
 800ac2c:	a904      	add	r1, sp, #16
 800ac2e:	4638      	mov	r0, r7
 800ac30:	f3af 8000 	nop.w
 800ac34:	1c42      	adds	r2, r0, #1
 800ac36:	4606      	mov	r6, r0
 800ac38:	d1d6      	bne.n	800abe8 <_svfiprintf_r+0x174>
 800ac3a:	89ab      	ldrh	r3, [r5, #12]
 800ac3c:	065b      	lsls	r3, r3, #25
 800ac3e:	f53f af2d 	bmi.w	800aa9c <_svfiprintf_r+0x28>
 800ac42:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac44:	b01d      	add	sp, #116	; 0x74
 800ac46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac4a:	ab03      	add	r3, sp, #12
 800ac4c:	9300      	str	r3, [sp, #0]
 800ac4e:	462a      	mov	r2, r5
 800ac50:	4b05      	ldr	r3, [pc, #20]	; (800ac68 <_svfiprintf_r+0x1f4>)
 800ac52:	a904      	add	r1, sp, #16
 800ac54:	4638      	mov	r0, r7
 800ac56:	f000 f879 	bl	800ad4c <_printf_i>
 800ac5a:	e7eb      	b.n	800ac34 <_svfiprintf_r+0x1c0>
 800ac5c:	0800ba1a 	.word	0x0800ba1a
 800ac60:	0800ba24 	.word	0x0800ba24
 800ac64:	00000000 	.word	0x00000000
 800ac68:	0800a9c1 	.word	0x0800a9c1
 800ac6c:	0800ba20 	.word	0x0800ba20

0800ac70 <_printf_common>:
 800ac70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac74:	4616      	mov	r6, r2
 800ac76:	4699      	mov	r9, r3
 800ac78:	688a      	ldr	r2, [r1, #8]
 800ac7a:	690b      	ldr	r3, [r1, #16]
 800ac7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac80:	4293      	cmp	r3, r2
 800ac82:	bfb8      	it	lt
 800ac84:	4613      	movlt	r3, r2
 800ac86:	6033      	str	r3, [r6, #0]
 800ac88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac8c:	4607      	mov	r7, r0
 800ac8e:	460c      	mov	r4, r1
 800ac90:	b10a      	cbz	r2, 800ac96 <_printf_common+0x26>
 800ac92:	3301      	adds	r3, #1
 800ac94:	6033      	str	r3, [r6, #0]
 800ac96:	6823      	ldr	r3, [r4, #0]
 800ac98:	0699      	lsls	r1, r3, #26
 800ac9a:	bf42      	ittt	mi
 800ac9c:	6833      	ldrmi	r3, [r6, #0]
 800ac9e:	3302      	addmi	r3, #2
 800aca0:	6033      	strmi	r3, [r6, #0]
 800aca2:	6825      	ldr	r5, [r4, #0]
 800aca4:	f015 0506 	ands.w	r5, r5, #6
 800aca8:	d106      	bne.n	800acb8 <_printf_common+0x48>
 800acaa:	f104 0a19 	add.w	sl, r4, #25
 800acae:	68e3      	ldr	r3, [r4, #12]
 800acb0:	6832      	ldr	r2, [r6, #0]
 800acb2:	1a9b      	subs	r3, r3, r2
 800acb4:	42ab      	cmp	r3, r5
 800acb6:	dc26      	bgt.n	800ad06 <_printf_common+0x96>
 800acb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800acbc:	1e13      	subs	r3, r2, #0
 800acbe:	6822      	ldr	r2, [r4, #0]
 800acc0:	bf18      	it	ne
 800acc2:	2301      	movne	r3, #1
 800acc4:	0692      	lsls	r2, r2, #26
 800acc6:	d42b      	bmi.n	800ad20 <_printf_common+0xb0>
 800acc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800accc:	4649      	mov	r1, r9
 800acce:	4638      	mov	r0, r7
 800acd0:	47c0      	blx	r8
 800acd2:	3001      	adds	r0, #1
 800acd4:	d01e      	beq.n	800ad14 <_printf_common+0xa4>
 800acd6:	6823      	ldr	r3, [r4, #0]
 800acd8:	6922      	ldr	r2, [r4, #16]
 800acda:	f003 0306 	and.w	r3, r3, #6
 800acde:	2b04      	cmp	r3, #4
 800ace0:	bf02      	ittt	eq
 800ace2:	68e5      	ldreq	r5, [r4, #12]
 800ace4:	6833      	ldreq	r3, [r6, #0]
 800ace6:	1aed      	subeq	r5, r5, r3
 800ace8:	68a3      	ldr	r3, [r4, #8]
 800acea:	bf0c      	ite	eq
 800acec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acf0:	2500      	movne	r5, #0
 800acf2:	4293      	cmp	r3, r2
 800acf4:	bfc4      	itt	gt
 800acf6:	1a9b      	subgt	r3, r3, r2
 800acf8:	18ed      	addgt	r5, r5, r3
 800acfa:	2600      	movs	r6, #0
 800acfc:	341a      	adds	r4, #26
 800acfe:	42b5      	cmp	r5, r6
 800ad00:	d11a      	bne.n	800ad38 <_printf_common+0xc8>
 800ad02:	2000      	movs	r0, #0
 800ad04:	e008      	b.n	800ad18 <_printf_common+0xa8>
 800ad06:	2301      	movs	r3, #1
 800ad08:	4652      	mov	r2, sl
 800ad0a:	4649      	mov	r1, r9
 800ad0c:	4638      	mov	r0, r7
 800ad0e:	47c0      	blx	r8
 800ad10:	3001      	adds	r0, #1
 800ad12:	d103      	bne.n	800ad1c <_printf_common+0xac>
 800ad14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad1c:	3501      	adds	r5, #1
 800ad1e:	e7c6      	b.n	800acae <_printf_common+0x3e>
 800ad20:	18e1      	adds	r1, r4, r3
 800ad22:	1c5a      	adds	r2, r3, #1
 800ad24:	2030      	movs	r0, #48	; 0x30
 800ad26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad2a:	4422      	add	r2, r4
 800ad2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad34:	3302      	adds	r3, #2
 800ad36:	e7c7      	b.n	800acc8 <_printf_common+0x58>
 800ad38:	2301      	movs	r3, #1
 800ad3a:	4622      	mov	r2, r4
 800ad3c:	4649      	mov	r1, r9
 800ad3e:	4638      	mov	r0, r7
 800ad40:	47c0      	blx	r8
 800ad42:	3001      	adds	r0, #1
 800ad44:	d0e6      	beq.n	800ad14 <_printf_common+0xa4>
 800ad46:	3601      	adds	r6, #1
 800ad48:	e7d9      	b.n	800acfe <_printf_common+0x8e>
	...

0800ad4c <_printf_i>:
 800ad4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad50:	7e0f      	ldrb	r7, [r1, #24]
 800ad52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ad54:	2f78      	cmp	r7, #120	; 0x78
 800ad56:	4691      	mov	r9, r2
 800ad58:	4680      	mov	r8, r0
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	469a      	mov	sl, r3
 800ad5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ad62:	d807      	bhi.n	800ad74 <_printf_i+0x28>
 800ad64:	2f62      	cmp	r7, #98	; 0x62
 800ad66:	d80a      	bhi.n	800ad7e <_printf_i+0x32>
 800ad68:	2f00      	cmp	r7, #0
 800ad6a:	f000 80d4 	beq.w	800af16 <_printf_i+0x1ca>
 800ad6e:	2f58      	cmp	r7, #88	; 0x58
 800ad70:	f000 80c0 	beq.w	800aef4 <_printf_i+0x1a8>
 800ad74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad7c:	e03a      	b.n	800adf4 <_printf_i+0xa8>
 800ad7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad82:	2b15      	cmp	r3, #21
 800ad84:	d8f6      	bhi.n	800ad74 <_printf_i+0x28>
 800ad86:	a101      	add	r1, pc, #4	; (adr r1, 800ad8c <_printf_i+0x40>)
 800ad88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ad8c:	0800ade5 	.word	0x0800ade5
 800ad90:	0800adf9 	.word	0x0800adf9
 800ad94:	0800ad75 	.word	0x0800ad75
 800ad98:	0800ad75 	.word	0x0800ad75
 800ad9c:	0800ad75 	.word	0x0800ad75
 800ada0:	0800ad75 	.word	0x0800ad75
 800ada4:	0800adf9 	.word	0x0800adf9
 800ada8:	0800ad75 	.word	0x0800ad75
 800adac:	0800ad75 	.word	0x0800ad75
 800adb0:	0800ad75 	.word	0x0800ad75
 800adb4:	0800ad75 	.word	0x0800ad75
 800adb8:	0800aefd 	.word	0x0800aefd
 800adbc:	0800ae25 	.word	0x0800ae25
 800adc0:	0800aeb7 	.word	0x0800aeb7
 800adc4:	0800ad75 	.word	0x0800ad75
 800adc8:	0800ad75 	.word	0x0800ad75
 800adcc:	0800af1f 	.word	0x0800af1f
 800add0:	0800ad75 	.word	0x0800ad75
 800add4:	0800ae25 	.word	0x0800ae25
 800add8:	0800ad75 	.word	0x0800ad75
 800addc:	0800ad75 	.word	0x0800ad75
 800ade0:	0800aebf 	.word	0x0800aebf
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	1d1a      	adds	r2, r3, #4
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	602a      	str	r2, [r5, #0]
 800adec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800adf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adf4:	2301      	movs	r3, #1
 800adf6:	e09f      	b.n	800af38 <_printf_i+0x1ec>
 800adf8:	6820      	ldr	r0, [r4, #0]
 800adfa:	682b      	ldr	r3, [r5, #0]
 800adfc:	0607      	lsls	r7, r0, #24
 800adfe:	f103 0104 	add.w	r1, r3, #4
 800ae02:	6029      	str	r1, [r5, #0]
 800ae04:	d501      	bpl.n	800ae0a <_printf_i+0xbe>
 800ae06:	681e      	ldr	r6, [r3, #0]
 800ae08:	e003      	b.n	800ae12 <_printf_i+0xc6>
 800ae0a:	0646      	lsls	r6, r0, #25
 800ae0c:	d5fb      	bpl.n	800ae06 <_printf_i+0xba>
 800ae0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ae12:	2e00      	cmp	r6, #0
 800ae14:	da03      	bge.n	800ae1e <_printf_i+0xd2>
 800ae16:	232d      	movs	r3, #45	; 0x2d
 800ae18:	4276      	negs	r6, r6
 800ae1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae1e:	485a      	ldr	r0, [pc, #360]	; (800af88 <_printf_i+0x23c>)
 800ae20:	230a      	movs	r3, #10
 800ae22:	e012      	b.n	800ae4a <_printf_i+0xfe>
 800ae24:	682b      	ldr	r3, [r5, #0]
 800ae26:	6820      	ldr	r0, [r4, #0]
 800ae28:	1d19      	adds	r1, r3, #4
 800ae2a:	6029      	str	r1, [r5, #0]
 800ae2c:	0605      	lsls	r5, r0, #24
 800ae2e:	d501      	bpl.n	800ae34 <_printf_i+0xe8>
 800ae30:	681e      	ldr	r6, [r3, #0]
 800ae32:	e002      	b.n	800ae3a <_printf_i+0xee>
 800ae34:	0641      	lsls	r1, r0, #25
 800ae36:	d5fb      	bpl.n	800ae30 <_printf_i+0xe4>
 800ae38:	881e      	ldrh	r6, [r3, #0]
 800ae3a:	4853      	ldr	r0, [pc, #332]	; (800af88 <_printf_i+0x23c>)
 800ae3c:	2f6f      	cmp	r7, #111	; 0x6f
 800ae3e:	bf0c      	ite	eq
 800ae40:	2308      	moveq	r3, #8
 800ae42:	230a      	movne	r3, #10
 800ae44:	2100      	movs	r1, #0
 800ae46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae4a:	6865      	ldr	r5, [r4, #4]
 800ae4c:	60a5      	str	r5, [r4, #8]
 800ae4e:	2d00      	cmp	r5, #0
 800ae50:	bfa2      	ittt	ge
 800ae52:	6821      	ldrge	r1, [r4, #0]
 800ae54:	f021 0104 	bicge.w	r1, r1, #4
 800ae58:	6021      	strge	r1, [r4, #0]
 800ae5a:	b90e      	cbnz	r6, 800ae60 <_printf_i+0x114>
 800ae5c:	2d00      	cmp	r5, #0
 800ae5e:	d04b      	beq.n	800aef8 <_printf_i+0x1ac>
 800ae60:	4615      	mov	r5, r2
 800ae62:	fbb6 f1f3 	udiv	r1, r6, r3
 800ae66:	fb03 6711 	mls	r7, r3, r1, r6
 800ae6a:	5dc7      	ldrb	r7, [r0, r7]
 800ae6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ae70:	4637      	mov	r7, r6
 800ae72:	42bb      	cmp	r3, r7
 800ae74:	460e      	mov	r6, r1
 800ae76:	d9f4      	bls.n	800ae62 <_printf_i+0x116>
 800ae78:	2b08      	cmp	r3, #8
 800ae7a:	d10b      	bne.n	800ae94 <_printf_i+0x148>
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	07de      	lsls	r6, r3, #31
 800ae80:	d508      	bpl.n	800ae94 <_printf_i+0x148>
 800ae82:	6923      	ldr	r3, [r4, #16]
 800ae84:	6861      	ldr	r1, [r4, #4]
 800ae86:	4299      	cmp	r1, r3
 800ae88:	bfde      	ittt	le
 800ae8a:	2330      	movle	r3, #48	; 0x30
 800ae8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ae90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ae94:	1b52      	subs	r2, r2, r5
 800ae96:	6122      	str	r2, [r4, #16]
 800ae98:	f8cd a000 	str.w	sl, [sp]
 800ae9c:	464b      	mov	r3, r9
 800ae9e:	aa03      	add	r2, sp, #12
 800aea0:	4621      	mov	r1, r4
 800aea2:	4640      	mov	r0, r8
 800aea4:	f7ff fee4 	bl	800ac70 <_printf_common>
 800aea8:	3001      	adds	r0, #1
 800aeaa:	d14a      	bne.n	800af42 <_printf_i+0x1f6>
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeb0:	b004      	add	sp, #16
 800aeb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb6:	6823      	ldr	r3, [r4, #0]
 800aeb8:	f043 0320 	orr.w	r3, r3, #32
 800aebc:	6023      	str	r3, [r4, #0]
 800aebe:	4833      	ldr	r0, [pc, #204]	; (800af8c <_printf_i+0x240>)
 800aec0:	2778      	movs	r7, #120	; 0x78
 800aec2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aec6:	6823      	ldr	r3, [r4, #0]
 800aec8:	6829      	ldr	r1, [r5, #0]
 800aeca:	061f      	lsls	r7, r3, #24
 800aecc:	f851 6b04 	ldr.w	r6, [r1], #4
 800aed0:	d402      	bmi.n	800aed8 <_printf_i+0x18c>
 800aed2:	065f      	lsls	r7, r3, #25
 800aed4:	bf48      	it	mi
 800aed6:	b2b6      	uxthmi	r6, r6
 800aed8:	07df      	lsls	r7, r3, #31
 800aeda:	bf48      	it	mi
 800aedc:	f043 0320 	orrmi.w	r3, r3, #32
 800aee0:	6029      	str	r1, [r5, #0]
 800aee2:	bf48      	it	mi
 800aee4:	6023      	strmi	r3, [r4, #0]
 800aee6:	b91e      	cbnz	r6, 800aef0 <_printf_i+0x1a4>
 800aee8:	6823      	ldr	r3, [r4, #0]
 800aeea:	f023 0320 	bic.w	r3, r3, #32
 800aeee:	6023      	str	r3, [r4, #0]
 800aef0:	2310      	movs	r3, #16
 800aef2:	e7a7      	b.n	800ae44 <_printf_i+0xf8>
 800aef4:	4824      	ldr	r0, [pc, #144]	; (800af88 <_printf_i+0x23c>)
 800aef6:	e7e4      	b.n	800aec2 <_printf_i+0x176>
 800aef8:	4615      	mov	r5, r2
 800aefa:	e7bd      	b.n	800ae78 <_printf_i+0x12c>
 800aefc:	682b      	ldr	r3, [r5, #0]
 800aefe:	6826      	ldr	r6, [r4, #0]
 800af00:	6961      	ldr	r1, [r4, #20]
 800af02:	1d18      	adds	r0, r3, #4
 800af04:	6028      	str	r0, [r5, #0]
 800af06:	0635      	lsls	r5, r6, #24
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	d501      	bpl.n	800af10 <_printf_i+0x1c4>
 800af0c:	6019      	str	r1, [r3, #0]
 800af0e:	e002      	b.n	800af16 <_printf_i+0x1ca>
 800af10:	0670      	lsls	r0, r6, #25
 800af12:	d5fb      	bpl.n	800af0c <_printf_i+0x1c0>
 800af14:	8019      	strh	r1, [r3, #0]
 800af16:	2300      	movs	r3, #0
 800af18:	6123      	str	r3, [r4, #16]
 800af1a:	4615      	mov	r5, r2
 800af1c:	e7bc      	b.n	800ae98 <_printf_i+0x14c>
 800af1e:	682b      	ldr	r3, [r5, #0]
 800af20:	1d1a      	adds	r2, r3, #4
 800af22:	602a      	str	r2, [r5, #0]
 800af24:	681d      	ldr	r5, [r3, #0]
 800af26:	6862      	ldr	r2, [r4, #4]
 800af28:	2100      	movs	r1, #0
 800af2a:	4628      	mov	r0, r5
 800af2c:	f7f5 f968 	bl	8000200 <memchr>
 800af30:	b108      	cbz	r0, 800af36 <_printf_i+0x1ea>
 800af32:	1b40      	subs	r0, r0, r5
 800af34:	6060      	str	r0, [r4, #4]
 800af36:	6863      	ldr	r3, [r4, #4]
 800af38:	6123      	str	r3, [r4, #16]
 800af3a:	2300      	movs	r3, #0
 800af3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af40:	e7aa      	b.n	800ae98 <_printf_i+0x14c>
 800af42:	6923      	ldr	r3, [r4, #16]
 800af44:	462a      	mov	r2, r5
 800af46:	4649      	mov	r1, r9
 800af48:	4640      	mov	r0, r8
 800af4a:	47d0      	blx	sl
 800af4c:	3001      	adds	r0, #1
 800af4e:	d0ad      	beq.n	800aeac <_printf_i+0x160>
 800af50:	6823      	ldr	r3, [r4, #0]
 800af52:	079b      	lsls	r3, r3, #30
 800af54:	d413      	bmi.n	800af7e <_printf_i+0x232>
 800af56:	68e0      	ldr	r0, [r4, #12]
 800af58:	9b03      	ldr	r3, [sp, #12]
 800af5a:	4298      	cmp	r0, r3
 800af5c:	bfb8      	it	lt
 800af5e:	4618      	movlt	r0, r3
 800af60:	e7a6      	b.n	800aeb0 <_printf_i+0x164>
 800af62:	2301      	movs	r3, #1
 800af64:	4632      	mov	r2, r6
 800af66:	4649      	mov	r1, r9
 800af68:	4640      	mov	r0, r8
 800af6a:	47d0      	blx	sl
 800af6c:	3001      	adds	r0, #1
 800af6e:	d09d      	beq.n	800aeac <_printf_i+0x160>
 800af70:	3501      	adds	r5, #1
 800af72:	68e3      	ldr	r3, [r4, #12]
 800af74:	9903      	ldr	r1, [sp, #12]
 800af76:	1a5b      	subs	r3, r3, r1
 800af78:	42ab      	cmp	r3, r5
 800af7a:	dcf2      	bgt.n	800af62 <_printf_i+0x216>
 800af7c:	e7eb      	b.n	800af56 <_printf_i+0x20a>
 800af7e:	2500      	movs	r5, #0
 800af80:	f104 0619 	add.w	r6, r4, #25
 800af84:	e7f5      	b.n	800af72 <_printf_i+0x226>
 800af86:	bf00      	nop
 800af88:	0800ba2b 	.word	0x0800ba2b
 800af8c:	0800ba3c 	.word	0x0800ba3c

0800af90 <__sflush_r>:
 800af90:	898a      	ldrh	r2, [r1, #12]
 800af92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af96:	4605      	mov	r5, r0
 800af98:	0710      	lsls	r0, r2, #28
 800af9a:	460c      	mov	r4, r1
 800af9c:	d458      	bmi.n	800b050 <__sflush_r+0xc0>
 800af9e:	684b      	ldr	r3, [r1, #4]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	dc05      	bgt.n	800afb0 <__sflush_r+0x20>
 800afa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	dc02      	bgt.n	800afb0 <__sflush_r+0x20>
 800afaa:	2000      	movs	r0, #0
 800afac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afb2:	2e00      	cmp	r6, #0
 800afb4:	d0f9      	beq.n	800afaa <__sflush_r+0x1a>
 800afb6:	2300      	movs	r3, #0
 800afb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afbc:	682f      	ldr	r7, [r5, #0]
 800afbe:	6a21      	ldr	r1, [r4, #32]
 800afc0:	602b      	str	r3, [r5, #0]
 800afc2:	d032      	beq.n	800b02a <__sflush_r+0x9a>
 800afc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afc6:	89a3      	ldrh	r3, [r4, #12]
 800afc8:	075a      	lsls	r2, r3, #29
 800afca:	d505      	bpl.n	800afd8 <__sflush_r+0x48>
 800afcc:	6863      	ldr	r3, [r4, #4]
 800afce:	1ac0      	subs	r0, r0, r3
 800afd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afd2:	b10b      	cbz	r3, 800afd8 <__sflush_r+0x48>
 800afd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afd6:	1ac0      	subs	r0, r0, r3
 800afd8:	2300      	movs	r3, #0
 800afda:	4602      	mov	r2, r0
 800afdc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afde:	6a21      	ldr	r1, [r4, #32]
 800afe0:	4628      	mov	r0, r5
 800afe2:	47b0      	blx	r6
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	89a3      	ldrh	r3, [r4, #12]
 800afe8:	d106      	bne.n	800aff8 <__sflush_r+0x68>
 800afea:	6829      	ldr	r1, [r5, #0]
 800afec:	291d      	cmp	r1, #29
 800afee:	d82b      	bhi.n	800b048 <__sflush_r+0xb8>
 800aff0:	4a29      	ldr	r2, [pc, #164]	; (800b098 <__sflush_r+0x108>)
 800aff2:	410a      	asrs	r2, r1
 800aff4:	07d6      	lsls	r6, r2, #31
 800aff6:	d427      	bmi.n	800b048 <__sflush_r+0xb8>
 800aff8:	2200      	movs	r2, #0
 800affa:	6062      	str	r2, [r4, #4]
 800affc:	04d9      	lsls	r1, r3, #19
 800affe:	6922      	ldr	r2, [r4, #16]
 800b000:	6022      	str	r2, [r4, #0]
 800b002:	d504      	bpl.n	800b00e <__sflush_r+0x7e>
 800b004:	1c42      	adds	r2, r0, #1
 800b006:	d101      	bne.n	800b00c <__sflush_r+0x7c>
 800b008:	682b      	ldr	r3, [r5, #0]
 800b00a:	b903      	cbnz	r3, 800b00e <__sflush_r+0x7e>
 800b00c:	6560      	str	r0, [r4, #84]	; 0x54
 800b00e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b010:	602f      	str	r7, [r5, #0]
 800b012:	2900      	cmp	r1, #0
 800b014:	d0c9      	beq.n	800afaa <__sflush_r+0x1a>
 800b016:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b01a:	4299      	cmp	r1, r3
 800b01c:	d002      	beq.n	800b024 <__sflush_r+0x94>
 800b01e:	4628      	mov	r0, r5
 800b020:	f7ff fbce 	bl	800a7c0 <_free_r>
 800b024:	2000      	movs	r0, #0
 800b026:	6360      	str	r0, [r4, #52]	; 0x34
 800b028:	e7c0      	b.n	800afac <__sflush_r+0x1c>
 800b02a:	2301      	movs	r3, #1
 800b02c:	4628      	mov	r0, r5
 800b02e:	47b0      	blx	r6
 800b030:	1c41      	adds	r1, r0, #1
 800b032:	d1c8      	bne.n	800afc6 <__sflush_r+0x36>
 800b034:	682b      	ldr	r3, [r5, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d0c5      	beq.n	800afc6 <__sflush_r+0x36>
 800b03a:	2b1d      	cmp	r3, #29
 800b03c:	d001      	beq.n	800b042 <__sflush_r+0xb2>
 800b03e:	2b16      	cmp	r3, #22
 800b040:	d101      	bne.n	800b046 <__sflush_r+0xb6>
 800b042:	602f      	str	r7, [r5, #0]
 800b044:	e7b1      	b.n	800afaa <__sflush_r+0x1a>
 800b046:	89a3      	ldrh	r3, [r4, #12]
 800b048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b04c:	81a3      	strh	r3, [r4, #12]
 800b04e:	e7ad      	b.n	800afac <__sflush_r+0x1c>
 800b050:	690f      	ldr	r7, [r1, #16]
 800b052:	2f00      	cmp	r7, #0
 800b054:	d0a9      	beq.n	800afaa <__sflush_r+0x1a>
 800b056:	0793      	lsls	r3, r2, #30
 800b058:	680e      	ldr	r6, [r1, #0]
 800b05a:	bf08      	it	eq
 800b05c:	694b      	ldreq	r3, [r1, #20]
 800b05e:	600f      	str	r7, [r1, #0]
 800b060:	bf18      	it	ne
 800b062:	2300      	movne	r3, #0
 800b064:	eba6 0807 	sub.w	r8, r6, r7
 800b068:	608b      	str	r3, [r1, #8]
 800b06a:	f1b8 0f00 	cmp.w	r8, #0
 800b06e:	dd9c      	ble.n	800afaa <__sflush_r+0x1a>
 800b070:	6a21      	ldr	r1, [r4, #32]
 800b072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b074:	4643      	mov	r3, r8
 800b076:	463a      	mov	r2, r7
 800b078:	4628      	mov	r0, r5
 800b07a:	47b0      	blx	r6
 800b07c:	2800      	cmp	r0, #0
 800b07e:	dc06      	bgt.n	800b08e <__sflush_r+0xfe>
 800b080:	89a3      	ldrh	r3, [r4, #12]
 800b082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b086:	81a3      	strh	r3, [r4, #12]
 800b088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b08c:	e78e      	b.n	800afac <__sflush_r+0x1c>
 800b08e:	4407      	add	r7, r0
 800b090:	eba8 0800 	sub.w	r8, r8, r0
 800b094:	e7e9      	b.n	800b06a <__sflush_r+0xda>
 800b096:	bf00      	nop
 800b098:	dfbffffe 	.word	0xdfbffffe

0800b09c <_fflush_r>:
 800b09c:	b538      	push	{r3, r4, r5, lr}
 800b09e:	690b      	ldr	r3, [r1, #16]
 800b0a0:	4605      	mov	r5, r0
 800b0a2:	460c      	mov	r4, r1
 800b0a4:	b913      	cbnz	r3, 800b0ac <_fflush_r+0x10>
 800b0a6:	2500      	movs	r5, #0
 800b0a8:	4628      	mov	r0, r5
 800b0aa:	bd38      	pop	{r3, r4, r5, pc}
 800b0ac:	b118      	cbz	r0, 800b0b6 <_fflush_r+0x1a>
 800b0ae:	6a03      	ldr	r3, [r0, #32]
 800b0b0:	b90b      	cbnz	r3, 800b0b6 <_fflush_r+0x1a>
 800b0b2:	f7ff f9e7 	bl	800a484 <__sinit>
 800b0b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d0f3      	beq.n	800b0a6 <_fflush_r+0xa>
 800b0be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0c0:	07d0      	lsls	r0, r2, #31
 800b0c2:	d404      	bmi.n	800b0ce <_fflush_r+0x32>
 800b0c4:	0599      	lsls	r1, r3, #22
 800b0c6:	d402      	bmi.n	800b0ce <_fflush_r+0x32>
 800b0c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0ca:	f7ff fb4a 	bl	800a762 <__retarget_lock_acquire_recursive>
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	f7ff ff5d 	bl	800af90 <__sflush_r>
 800b0d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0d8:	07da      	lsls	r2, r3, #31
 800b0da:	4605      	mov	r5, r0
 800b0dc:	d4e4      	bmi.n	800b0a8 <_fflush_r+0xc>
 800b0de:	89a3      	ldrh	r3, [r4, #12]
 800b0e0:	059b      	lsls	r3, r3, #22
 800b0e2:	d4e1      	bmi.n	800b0a8 <_fflush_r+0xc>
 800b0e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0e6:	f7ff fb3d 	bl	800a764 <__retarget_lock_release_recursive>
 800b0ea:	e7dd      	b.n	800b0a8 <_fflush_r+0xc>

0800b0ec <fiprintf>:
 800b0ec:	b40e      	push	{r1, r2, r3}
 800b0ee:	b503      	push	{r0, r1, lr}
 800b0f0:	4601      	mov	r1, r0
 800b0f2:	ab03      	add	r3, sp, #12
 800b0f4:	4805      	ldr	r0, [pc, #20]	; (800b10c <fiprintf+0x20>)
 800b0f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0fa:	6800      	ldr	r0, [r0, #0]
 800b0fc:	9301      	str	r3, [sp, #4]
 800b0fe:	f000 f891 	bl	800b224 <_vfiprintf_r>
 800b102:	b002      	add	sp, #8
 800b104:	f85d eb04 	ldr.w	lr, [sp], #4
 800b108:	b003      	add	sp, #12
 800b10a:	4770      	bx	lr
 800b10c:	20000068 	.word	0x20000068

0800b110 <memmove>:
 800b110:	4288      	cmp	r0, r1
 800b112:	b510      	push	{r4, lr}
 800b114:	eb01 0402 	add.w	r4, r1, r2
 800b118:	d902      	bls.n	800b120 <memmove+0x10>
 800b11a:	4284      	cmp	r4, r0
 800b11c:	4623      	mov	r3, r4
 800b11e:	d807      	bhi.n	800b130 <memmove+0x20>
 800b120:	1e43      	subs	r3, r0, #1
 800b122:	42a1      	cmp	r1, r4
 800b124:	d008      	beq.n	800b138 <memmove+0x28>
 800b126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b12a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b12e:	e7f8      	b.n	800b122 <memmove+0x12>
 800b130:	4402      	add	r2, r0
 800b132:	4601      	mov	r1, r0
 800b134:	428a      	cmp	r2, r1
 800b136:	d100      	bne.n	800b13a <memmove+0x2a>
 800b138:	bd10      	pop	{r4, pc}
 800b13a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b13e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b142:	e7f7      	b.n	800b134 <memmove+0x24>

0800b144 <_sbrk_r>:
 800b144:	b538      	push	{r3, r4, r5, lr}
 800b146:	4d06      	ldr	r5, [pc, #24]	; (800b160 <_sbrk_r+0x1c>)
 800b148:	2300      	movs	r3, #0
 800b14a:	4604      	mov	r4, r0
 800b14c:	4608      	mov	r0, r1
 800b14e:	602b      	str	r3, [r5, #0]
 800b150:	f7f6 fdc0 	bl	8001cd4 <_sbrk>
 800b154:	1c43      	adds	r3, r0, #1
 800b156:	d102      	bne.n	800b15e <_sbrk_r+0x1a>
 800b158:	682b      	ldr	r3, [r5, #0]
 800b15a:	b103      	cbz	r3, 800b15e <_sbrk_r+0x1a>
 800b15c:	6023      	str	r3, [r4, #0]
 800b15e:	bd38      	pop	{r3, r4, r5, pc}
 800b160:	20001c74 	.word	0x20001c74

0800b164 <abort>:
 800b164:	b508      	push	{r3, lr}
 800b166:	2006      	movs	r0, #6
 800b168:	f000 fa34 	bl	800b5d4 <raise>
 800b16c:	2001      	movs	r0, #1
 800b16e:	f7f6 fd3a 	bl	8001be6 <_exit>

0800b172 <_realloc_r>:
 800b172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b176:	4680      	mov	r8, r0
 800b178:	4614      	mov	r4, r2
 800b17a:	460e      	mov	r6, r1
 800b17c:	b921      	cbnz	r1, 800b188 <_realloc_r+0x16>
 800b17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b182:	4611      	mov	r1, r2
 800b184:	f7ff bb90 	b.w	800a8a8 <_malloc_r>
 800b188:	b92a      	cbnz	r2, 800b196 <_realloc_r+0x24>
 800b18a:	f7ff fb19 	bl	800a7c0 <_free_r>
 800b18e:	4625      	mov	r5, r4
 800b190:	4628      	mov	r0, r5
 800b192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b196:	f000 fa39 	bl	800b60c <_malloc_usable_size_r>
 800b19a:	4284      	cmp	r4, r0
 800b19c:	4607      	mov	r7, r0
 800b19e:	d802      	bhi.n	800b1a6 <_realloc_r+0x34>
 800b1a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1a4:	d812      	bhi.n	800b1cc <_realloc_r+0x5a>
 800b1a6:	4621      	mov	r1, r4
 800b1a8:	4640      	mov	r0, r8
 800b1aa:	f7ff fb7d 	bl	800a8a8 <_malloc_r>
 800b1ae:	4605      	mov	r5, r0
 800b1b0:	2800      	cmp	r0, #0
 800b1b2:	d0ed      	beq.n	800b190 <_realloc_r+0x1e>
 800b1b4:	42bc      	cmp	r4, r7
 800b1b6:	4622      	mov	r2, r4
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	bf28      	it	cs
 800b1bc:	463a      	movcs	r2, r7
 800b1be:	f7ff fad2 	bl	800a766 <memcpy>
 800b1c2:	4631      	mov	r1, r6
 800b1c4:	4640      	mov	r0, r8
 800b1c6:	f7ff fafb 	bl	800a7c0 <_free_r>
 800b1ca:	e7e1      	b.n	800b190 <_realloc_r+0x1e>
 800b1cc:	4635      	mov	r5, r6
 800b1ce:	e7df      	b.n	800b190 <_realloc_r+0x1e>

0800b1d0 <__sfputc_r>:
 800b1d0:	6893      	ldr	r3, [r2, #8]
 800b1d2:	3b01      	subs	r3, #1
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	b410      	push	{r4}
 800b1d8:	6093      	str	r3, [r2, #8]
 800b1da:	da08      	bge.n	800b1ee <__sfputc_r+0x1e>
 800b1dc:	6994      	ldr	r4, [r2, #24]
 800b1de:	42a3      	cmp	r3, r4
 800b1e0:	db01      	blt.n	800b1e6 <__sfputc_r+0x16>
 800b1e2:	290a      	cmp	r1, #10
 800b1e4:	d103      	bne.n	800b1ee <__sfputc_r+0x1e>
 800b1e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1ea:	f000 b935 	b.w	800b458 <__swbuf_r>
 800b1ee:	6813      	ldr	r3, [r2, #0]
 800b1f0:	1c58      	adds	r0, r3, #1
 800b1f2:	6010      	str	r0, [r2, #0]
 800b1f4:	7019      	strb	r1, [r3, #0]
 800b1f6:	4608      	mov	r0, r1
 800b1f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1fc:	4770      	bx	lr

0800b1fe <__sfputs_r>:
 800b1fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b200:	4606      	mov	r6, r0
 800b202:	460f      	mov	r7, r1
 800b204:	4614      	mov	r4, r2
 800b206:	18d5      	adds	r5, r2, r3
 800b208:	42ac      	cmp	r4, r5
 800b20a:	d101      	bne.n	800b210 <__sfputs_r+0x12>
 800b20c:	2000      	movs	r0, #0
 800b20e:	e007      	b.n	800b220 <__sfputs_r+0x22>
 800b210:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b214:	463a      	mov	r2, r7
 800b216:	4630      	mov	r0, r6
 800b218:	f7ff ffda 	bl	800b1d0 <__sfputc_r>
 800b21c:	1c43      	adds	r3, r0, #1
 800b21e:	d1f3      	bne.n	800b208 <__sfputs_r+0xa>
 800b220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b224 <_vfiprintf_r>:
 800b224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b228:	460d      	mov	r5, r1
 800b22a:	b09d      	sub	sp, #116	; 0x74
 800b22c:	4614      	mov	r4, r2
 800b22e:	4698      	mov	r8, r3
 800b230:	4606      	mov	r6, r0
 800b232:	b118      	cbz	r0, 800b23c <_vfiprintf_r+0x18>
 800b234:	6a03      	ldr	r3, [r0, #32]
 800b236:	b90b      	cbnz	r3, 800b23c <_vfiprintf_r+0x18>
 800b238:	f7ff f924 	bl	800a484 <__sinit>
 800b23c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b23e:	07d9      	lsls	r1, r3, #31
 800b240:	d405      	bmi.n	800b24e <_vfiprintf_r+0x2a>
 800b242:	89ab      	ldrh	r3, [r5, #12]
 800b244:	059a      	lsls	r2, r3, #22
 800b246:	d402      	bmi.n	800b24e <_vfiprintf_r+0x2a>
 800b248:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b24a:	f7ff fa8a 	bl	800a762 <__retarget_lock_acquire_recursive>
 800b24e:	89ab      	ldrh	r3, [r5, #12]
 800b250:	071b      	lsls	r3, r3, #28
 800b252:	d501      	bpl.n	800b258 <_vfiprintf_r+0x34>
 800b254:	692b      	ldr	r3, [r5, #16]
 800b256:	b99b      	cbnz	r3, 800b280 <_vfiprintf_r+0x5c>
 800b258:	4629      	mov	r1, r5
 800b25a:	4630      	mov	r0, r6
 800b25c:	f000 f93a 	bl	800b4d4 <__swsetup_r>
 800b260:	b170      	cbz	r0, 800b280 <_vfiprintf_r+0x5c>
 800b262:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b264:	07dc      	lsls	r4, r3, #31
 800b266:	d504      	bpl.n	800b272 <_vfiprintf_r+0x4e>
 800b268:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b26c:	b01d      	add	sp, #116	; 0x74
 800b26e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b272:	89ab      	ldrh	r3, [r5, #12]
 800b274:	0598      	lsls	r0, r3, #22
 800b276:	d4f7      	bmi.n	800b268 <_vfiprintf_r+0x44>
 800b278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b27a:	f7ff fa73 	bl	800a764 <__retarget_lock_release_recursive>
 800b27e:	e7f3      	b.n	800b268 <_vfiprintf_r+0x44>
 800b280:	2300      	movs	r3, #0
 800b282:	9309      	str	r3, [sp, #36]	; 0x24
 800b284:	2320      	movs	r3, #32
 800b286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b28a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b28e:	2330      	movs	r3, #48	; 0x30
 800b290:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b444 <_vfiprintf_r+0x220>
 800b294:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b298:	f04f 0901 	mov.w	r9, #1
 800b29c:	4623      	mov	r3, r4
 800b29e:	469a      	mov	sl, r3
 800b2a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2a4:	b10a      	cbz	r2, 800b2aa <_vfiprintf_r+0x86>
 800b2a6:	2a25      	cmp	r2, #37	; 0x25
 800b2a8:	d1f9      	bne.n	800b29e <_vfiprintf_r+0x7a>
 800b2aa:	ebba 0b04 	subs.w	fp, sl, r4
 800b2ae:	d00b      	beq.n	800b2c8 <_vfiprintf_r+0xa4>
 800b2b0:	465b      	mov	r3, fp
 800b2b2:	4622      	mov	r2, r4
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	4630      	mov	r0, r6
 800b2b8:	f7ff ffa1 	bl	800b1fe <__sfputs_r>
 800b2bc:	3001      	adds	r0, #1
 800b2be:	f000 80a9 	beq.w	800b414 <_vfiprintf_r+0x1f0>
 800b2c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2c4:	445a      	add	r2, fp
 800b2c6:	9209      	str	r2, [sp, #36]	; 0x24
 800b2c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	f000 80a1 	beq.w	800b414 <_vfiprintf_r+0x1f0>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2dc:	f10a 0a01 	add.w	sl, sl, #1
 800b2e0:	9304      	str	r3, [sp, #16]
 800b2e2:	9307      	str	r3, [sp, #28]
 800b2e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2e8:	931a      	str	r3, [sp, #104]	; 0x68
 800b2ea:	4654      	mov	r4, sl
 800b2ec:	2205      	movs	r2, #5
 800b2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2f2:	4854      	ldr	r0, [pc, #336]	; (800b444 <_vfiprintf_r+0x220>)
 800b2f4:	f7f4 ff84 	bl	8000200 <memchr>
 800b2f8:	9a04      	ldr	r2, [sp, #16]
 800b2fa:	b9d8      	cbnz	r0, 800b334 <_vfiprintf_r+0x110>
 800b2fc:	06d1      	lsls	r1, r2, #27
 800b2fe:	bf44      	itt	mi
 800b300:	2320      	movmi	r3, #32
 800b302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b306:	0713      	lsls	r3, r2, #28
 800b308:	bf44      	itt	mi
 800b30a:	232b      	movmi	r3, #43	; 0x2b
 800b30c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b310:	f89a 3000 	ldrb.w	r3, [sl]
 800b314:	2b2a      	cmp	r3, #42	; 0x2a
 800b316:	d015      	beq.n	800b344 <_vfiprintf_r+0x120>
 800b318:	9a07      	ldr	r2, [sp, #28]
 800b31a:	4654      	mov	r4, sl
 800b31c:	2000      	movs	r0, #0
 800b31e:	f04f 0c0a 	mov.w	ip, #10
 800b322:	4621      	mov	r1, r4
 800b324:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b328:	3b30      	subs	r3, #48	; 0x30
 800b32a:	2b09      	cmp	r3, #9
 800b32c:	d94d      	bls.n	800b3ca <_vfiprintf_r+0x1a6>
 800b32e:	b1b0      	cbz	r0, 800b35e <_vfiprintf_r+0x13a>
 800b330:	9207      	str	r2, [sp, #28]
 800b332:	e014      	b.n	800b35e <_vfiprintf_r+0x13a>
 800b334:	eba0 0308 	sub.w	r3, r0, r8
 800b338:	fa09 f303 	lsl.w	r3, r9, r3
 800b33c:	4313      	orrs	r3, r2
 800b33e:	9304      	str	r3, [sp, #16]
 800b340:	46a2      	mov	sl, r4
 800b342:	e7d2      	b.n	800b2ea <_vfiprintf_r+0xc6>
 800b344:	9b03      	ldr	r3, [sp, #12]
 800b346:	1d19      	adds	r1, r3, #4
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	9103      	str	r1, [sp, #12]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	bfbb      	ittet	lt
 800b350:	425b      	neglt	r3, r3
 800b352:	f042 0202 	orrlt.w	r2, r2, #2
 800b356:	9307      	strge	r3, [sp, #28]
 800b358:	9307      	strlt	r3, [sp, #28]
 800b35a:	bfb8      	it	lt
 800b35c:	9204      	strlt	r2, [sp, #16]
 800b35e:	7823      	ldrb	r3, [r4, #0]
 800b360:	2b2e      	cmp	r3, #46	; 0x2e
 800b362:	d10c      	bne.n	800b37e <_vfiprintf_r+0x15a>
 800b364:	7863      	ldrb	r3, [r4, #1]
 800b366:	2b2a      	cmp	r3, #42	; 0x2a
 800b368:	d134      	bne.n	800b3d4 <_vfiprintf_r+0x1b0>
 800b36a:	9b03      	ldr	r3, [sp, #12]
 800b36c:	1d1a      	adds	r2, r3, #4
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	9203      	str	r2, [sp, #12]
 800b372:	2b00      	cmp	r3, #0
 800b374:	bfb8      	it	lt
 800b376:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b37a:	3402      	adds	r4, #2
 800b37c:	9305      	str	r3, [sp, #20]
 800b37e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b454 <_vfiprintf_r+0x230>
 800b382:	7821      	ldrb	r1, [r4, #0]
 800b384:	2203      	movs	r2, #3
 800b386:	4650      	mov	r0, sl
 800b388:	f7f4 ff3a 	bl	8000200 <memchr>
 800b38c:	b138      	cbz	r0, 800b39e <_vfiprintf_r+0x17a>
 800b38e:	9b04      	ldr	r3, [sp, #16]
 800b390:	eba0 000a 	sub.w	r0, r0, sl
 800b394:	2240      	movs	r2, #64	; 0x40
 800b396:	4082      	lsls	r2, r0
 800b398:	4313      	orrs	r3, r2
 800b39a:	3401      	adds	r4, #1
 800b39c:	9304      	str	r3, [sp, #16]
 800b39e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3a2:	4829      	ldr	r0, [pc, #164]	; (800b448 <_vfiprintf_r+0x224>)
 800b3a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3a8:	2206      	movs	r2, #6
 800b3aa:	f7f4 ff29 	bl	8000200 <memchr>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d03f      	beq.n	800b432 <_vfiprintf_r+0x20e>
 800b3b2:	4b26      	ldr	r3, [pc, #152]	; (800b44c <_vfiprintf_r+0x228>)
 800b3b4:	bb1b      	cbnz	r3, 800b3fe <_vfiprintf_r+0x1da>
 800b3b6:	9b03      	ldr	r3, [sp, #12]
 800b3b8:	3307      	adds	r3, #7
 800b3ba:	f023 0307 	bic.w	r3, r3, #7
 800b3be:	3308      	adds	r3, #8
 800b3c0:	9303      	str	r3, [sp, #12]
 800b3c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3c4:	443b      	add	r3, r7
 800b3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b3c8:	e768      	b.n	800b29c <_vfiprintf_r+0x78>
 800b3ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3ce:	460c      	mov	r4, r1
 800b3d0:	2001      	movs	r0, #1
 800b3d2:	e7a6      	b.n	800b322 <_vfiprintf_r+0xfe>
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	3401      	adds	r4, #1
 800b3d8:	9305      	str	r3, [sp, #20]
 800b3da:	4619      	mov	r1, r3
 800b3dc:	f04f 0c0a 	mov.w	ip, #10
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3e6:	3a30      	subs	r2, #48	; 0x30
 800b3e8:	2a09      	cmp	r2, #9
 800b3ea:	d903      	bls.n	800b3f4 <_vfiprintf_r+0x1d0>
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d0c6      	beq.n	800b37e <_vfiprintf_r+0x15a>
 800b3f0:	9105      	str	r1, [sp, #20]
 800b3f2:	e7c4      	b.n	800b37e <_vfiprintf_r+0x15a>
 800b3f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3f8:	4604      	mov	r4, r0
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e7f0      	b.n	800b3e0 <_vfiprintf_r+0x1bc>
 800b3fe:	ab03      	add	r3, sp, #12
 800b400:	9300      	str	r3, [sp, #0]
 800b402:	462a      	mov	r2, r5
 800b404:	4b12      	ldr	r3, [pc, #72]	; (800b450 <_vfiprintf_r+0x22c>)
 800b406:	a904      	add	r1, sp, #16
 800b408:	4630      	mov	r0, r6
 800b40a:	f3af 8000 	nop.w
 800b40e:	4607      	mov	r7, r0
 800b410:	1c78      	adds	r0, r7, #1
 800b412:	d1d6      	bne.n	800b3c2 <_vfiprintf_r+0x19e>
 800b414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b416:	07d9      	lsls	r1, r3, #31
 800b418:	d405      	bmi.n	800b426 <_vfiprintf_r+0x202>
 800b41a:	89ab      	ldrh	r3, [r5, #12]
 800b41c:	059a      	lsls	r2, r3, #22
 800b41e:	d402      	bmi.n	800b426 <_vfiprintf_r+0x202>
 800b420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b422:	f7ff f99f 	bl	800a764 <__retarget_lock_release_recursive>
 800b426:	89ab      	ldrh	r3, [r5, #12]
 800b428:	065b      	lsls	r3, r3, #25
 800b42a:	f53f af1d 	bmi.w	800b268 <_vfiprintf_r+0x44>
 800b42e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b430:	e71c      	b.n	800b26c <_vfiprintf_r+0x48>
 800b432:	ab03      	add	r3, sp, #12
 800b434:	9300      	str	r3, [sp, #0]
 800b436:	462a      	mov	r2, r5
 800b438:	4b05      	ldr	r3, [pc, #20]	; (800b450 <_vfiprintf_r+0x22c>)
 800b43a:	a904      	add	r1, sp, #16
 800b43c:	4630      	mov	r0, r6
 800b43e:	f7ff fc85 	bl	800ad4c <_printf_i>
 800b442:	e7e4      	b.n	800b40e <_vfiprintf_r+0x1ea>
 800b444:	0800ba1a 	.word	0x0800ba1a
 800b448:	0800ba24 	.word	0x0800ba24
 800b44c:	00000000 	.word	0x00000000
 800b450:	0800b1ff 	.word	0x0800b1ff
 800b454:	0800ba20 	.word	0x0800ba20

0800b458 <__swbuf_r>:
 800b458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b45a:	460e      	mov	r6, r1
 800b45c:	4614      	mov	r4, r2
 800b45e:	4605      	mov	r5, r0
 800b460:	b118      	cbz	r0, 800b46a <__swbuf_r+0x12>
 800b462:	6a03      	ldr	r3, [r0, #32]
 800b464:	b90b      	cbnz	r3, 800b46a <__swbuf_r+0x12>
 800b466:	f7ff f80d 	bl	800a484 <__sinit>
 800b46a:	69a3      	ldr	r3, [r4, #24]
 800b46c:	60a3      	str	r3, [r4, #8]
 800b46e:	89a3      	ldrh	r3, [r4, #12]
 800b470:	071a      	lsls	r2, r3, #28
 800b472:	d525      	bpl.n	800b4c0 <__swbuf_r+0x68>
 800b474:	6923      	ldr	r3, [r4, #16]
 800b476:	b31b      	cbz	r3, 800b4c0 <__swbuf_r+0x68>
 800b478:	6823      	ldr	r3, [r4, #0]
 800b47a:	6922      	ldr	r2, [r4, #16]
 800b47c:	1a98      	subs	r0, r3, r2
 800b47e:	6963      	ldr	r3, [r4, #20]
 800b480:	b2f6      	uxtb	r6, r6
 800b482:	4283      	cmp	r3, r0
 800b484:	4637      	mov	r7, r6
 800b486:	dc04      	bgt.n	800b492 <__swbuf_r+0x3a>
 800b488:	4621      	mov	r1, r4
 800b48a:	4628      	mov	r0, r5
 800b48c:	f7ff fe06 	bl	800b09c <_fflush_r>
 800b490:	b9e0      	cbnz	r0, 800b4cc <__swbuf_r+0x74>
 800b492:	68a3      	ldr	r3, [r4, #8]
 800b494:	3b01      	subs	r3, #1
 800b496:	60a3      	str	r3, [r4, #8]
 800b498:	6823      	ldr	r3, [r4, #0]
 800b49a:	1c5a      	adds	r2, r3, #1
 800b49c:	6022      	str	r2, [r4, #0]
 800b49e:	701e      	strb	r6, [r3, #0]
 800b4a0:	6962      	ldr	r2, [r4, #20]
 800b4a2:	1c43      	adds	r3, r0, #1
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d004      	beq.n	800b4b2 <__swbuf_r+0x5a>
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	07db      	lsls	r3, r3, #31
 800b4ac:	d506      	bpl.n	800b4bc <__swbuf_r+0x64>
 800b4ae:	2e0a      	cmp	r6, #10
 800b4b0:	d104      	bne.n	800b4bc <__swbuf_r+0x64>
 800b4b2:	4621      	mov	r1, r4
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	f7ff fdf1 	bl	800b09c <_fflush_r>
 800b4ba:	b938      	cbnz	r0, 800b4cc <__swbuf_r+0x74>
 800b4bc:	4638      	mov	r0, r7
 800b4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4c0:	4621      	mov	r1, r4
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	f000 f806 	bl	800b4d4 <__swsetup_r>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	d0d5      	beq.n	800b478 <__swbuf_r+0x20>
 800b4cc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b4d0:	e7f4      	b.n	800b4bc <__swbuf_r+0x64>
	...

0800b4d4 <__swsetup_r>:
 800b4d4:	b538      	push	{r3, r4, r5, lr}
 800b4d6:	4b2a      	ldr	r3, [pc, #168]	; (800b580 <__swsetup_r+0xac>)
 800b4d8:	4605      	mov	r5, r0
 800b4da:	6818      	ldr	r0, [r3, #0]
 800b4dc:	460c      	mov	r4, r1
 800b4de:	b118      	cbz	r0, 800b4e8 <__swsetup_r+0x14>
 800b4e0:	6a03      	ldr	r3, [r0, #32]
 800b4e2:	b90b      	cbnz	r3, 800b4e8 <__swsetup_r+0x14>
 800b4e4:	f7fe ffce 	bl	800a484 <__sinit>
 800b4e8:	89a3      	ldrh	r3, [r4, #12]
 800b4ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4ee:	0718      	lsls	r0, r3, #28
 800b4f0:	d422      	bmi.n	800b538 <__swsetup_r+0x64>
 800b4f2:	06d9      	lsls	r1, r3, #27
 800b4f4:	d407      	bmi.n	800b506 <__swsetup_r+0x32>
 800b4f6:	2309      	movs	r3, #9
 800b4f8:	602b      	str	r3, [r5, #0]
 800b4fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4fe:	81a3      	strh	r3, [r4, #12]
 800b500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b504:	e034      	b.n	800b570 <__swsetup_r+0x9c>
 800b506:	0758      	lsls	r0, r3, #29
 800b508:	d512      	bpl.n	800b530 <__swsetup_r+0x5c>
 800b50a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b50c:	b141      	cbz	r1, 800b520 <__swsetup_r+0x4c>
 800b50e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b512:	4299      	cmp	r1, r3
 800b514:	d002      	beq.n	800b51c <__swsetup_r+0x48>
 800b516:	4628      	mov	r0, r5
 800b518:	f7ff f952 	bl	800a7c0 <_free_r>
 800b51c:	2300      	movs	r3, #0
 800b51e:	6363      	str	r3, [r4, #52]	; 0x34
 800b520:	89a3      	ldrh	r3, [r4, #12]
 800b522:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b526:	81a3      	strh	r3, [r4, #12]
 800b528:	2300      	movs	r3, #0
 800b52a:	6063      	str	r3, [r4, #4]
 800b52c:	6923      	ldr	r3, [r4, #16]
 800b52e:	6023      	str	r3, [r4, #0]
 800b530:	89a3      	ldrh	r3, [r4, #12]
 800b532:	f043 0308 	orr.w	r3, r3, #8
 800b536:	81a3      	strh	r3, [r4, #12]
 800b538:	6923      	ldr	r3, [r4, #16]
 800b53a:	b94b      	cbnz	r3, 800b550 <__swsetup_r+0x7c>
 800b53c:	89a3      	ldrh	r3, [r4, #12]
 800b53e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b546:	d003      	beq.n	800b550 <__swsetup_r+0x7c>
 800b548:	4621      	mov	r1, r4
 800b54a:	4628      	mov	r0, r5
 800b54c:	f000 f88c 	bl	800b668 <__smakebuf_r>
 800b550:	89a0      	ldrh	r0, [r4, #12]
 800b552:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b556:	f010 0301 	ands.w	r3, r0, #1
 800b55a:	d00a      	beq.n	800b572 <__swsetup_r+0x9e>
 800b55c:	2300      	movs	r3, #0
 800b55e:	60a3      	str	r3, [r4, #8]
 800b560:	6963      	ldr	r3, [r4, #20]
 800b562:	425b      	negs	r3, r3
 800b564:	61a3      	str	r3, [r4, #24]
 800b566:	6923      	ldr	r3, [r4, #16]
 800b568:	b943      	cbnz	r3, 800b57c <__swsetup_r+0xa8>
 800b56a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b56e:	d1c4      	bne.n	800b4fa <__swsetup_r+0x26>
 800b570:	bd38      	pop	{r3, r4, r5, pc}
 800b572:	0781      	lsls	r1, r0, #30
 800b574:	bf58      	it	pl
 800b576:	6963      	ldrpl	r3, [r4, #20]
 800b578:	60a3      	str	r3, [r4, #8]
 800b57a:	e7f4      	b.n	800b566 <__swsetup_r+0x92>
 800b57c:	2000      	movs	r0, #0
 800b57e:	e7f7      	b.n	800b570 <__swsetup_r+0x9c>
 800b580:	20000068 	.word	0x20000068

0800b584 <_raise_r>:
 800b584:	291f      	cmp	r1, #31
 800b586:	b538      	push	{r3, r4, r5, lr}
 800b588:	4604      	mov	r4, r0
 800b58a:	460d      	mov	r5, r1
 800b58c:	d904      	bls.n	800b598 <_raise_r+0x14>
 800b58e:	2316      	movs	r3, #22
 800b590:	6003      	str	r3, [r0, #0]
 800b592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b596:	bd38      	pop	{r3, r4, r5, pc}
 800b598:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b59a:	b112      	cbz	r2, 800b5a2 <_raise_r+0x1e>
 800b59c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5a0:	b94b      	cbnz	r3, 800b5b6 <_raise_r+0x32>
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f000 f830 	bl	800b608 <_getpid_r>
 800b5a8:	462a      	mov	r2, r5
 800b5aa:	4601      	mov	r1, r0
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5b2:	f000 b817 	b.w	800b5e4 <_kill_r>
 800b5b6:	2b01      	cmp	r3, #1
 800b5b8:	d00a      	beq.n	800b5d0 <_raise_r+0x4c>
 800b5ba:	1c59      	adds	r1, r3, #1
 800b5bc:	d103      	bne.n	800b5c6 <_raise_r+0x42>
 800b5be:	2316      	movs	r3, #22
 800b5c0:	6003      	str	r3, [r0, #0]
 800b5c2:	2001      	movs	r0, #1
 800b5c4:	e7e7      	b.n	800b596 <_raise_r+0x12>
 800b5c6:	2400      	movs	r4, #0
 800b5c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	4798      	blx	r3
 800b5d0:	2000      	movs	r0, #0
 800b5d2:	e7e0      	b.n	800b596 <_raise_r+0x12>

0800b5d4 <raise>:
 800b5d4:	4b02      	ldr	r3, [pc, #8]	; (800b5e0 <raise+0xc>)
 800b5d6:	4601      	mov	r1, r0
 800b5d8:	6818      	ldr	r0, [r3, #0]
 800b5da:	f7ff bfd3 	b.w	800b584 <_raise_r>
 800b5de:	bf00      	nop
 800b5e0:	20000068 	.word	0x20000068

0800b5e4 <_kill_r>:
 800b5e4:	b538      	push	{r3, r4, r5, lr}
 800b5e6:	4d07      	ldr	r5, [pc, #28]	; (800b604 <_kill_r+0x20>)
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	4604      	mov	r4, r0
 800b5ec:	4608      	mov	r0, r1
 800b5ee:	4611      	mov	r1, r2
 800b5f0:	602b      	str	r3, [r5, #0]
 800b5f2:	f7f6 fae8 	bl	8001bc6 <_kill>
 800b5f6:	1c43      	adds	r3, r0, #1
 800b5f8:	d102      	bne.n	800b600 <_kill_r+0x1c>
 800b5fa:	682b      	ldr	r3, [r5, #0]
 800b5fc:	b103      	cbz	r3, 800b600 <_kill_r+0x1c>
 800b5fe:	6023      	str	r3, [r4, #0]
 800b600:	bd38      	pop	{r3, r4, r5, pc}
 800b602:	bf00      	nop
 800b604:	20001c74 	.word	0x20001c74

0800b608 <_getpid_r>:
 800b608:	f7f6 bad5 	b.w	8001bb6 <_getpid>

0800b60c <_malloc_usable_size_r>:
 800b60c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b610:	1f18      	subs	r0, r3, #4
 800b612:	2b00      	cmp	r3, #0
 800b614:	bfbc      	itt	lt
 800b616:	580b      	ldrlt	r3, [r1, r0]
 800b618:	18c0      	addlt	r0, r0, r3
 800b61a:	4770      	bx	lr

0800b61c <__swhatbuf_r>:
 800b61c:	b570      	push	{r4, r5, r6, lr}
 800b61e:	460c      	mov	r4, r1
 800b620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b624:	2900      	cmp	r1, #0
 800b626:	b096      	sub	sp, #88	; 0x58
 800b628:	4615      	mov	r5, r2
 800b62a:	461e      	mov	r6, r3
 800b62c:	da0d      	bge.n	800b64a <__swhatbuf_r+0x2e>
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b634:	f04f 0100 	mov.w	r1, #0
 800b638:	bf0c      	ite	eq
 800b63a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b63e:	2340      	movne	r3, #64	; 0x40
 800b640:	2000      	movs	r0, #0
 800b642:	6031      	str	r1, [r6, #0]
 800b644:	602b      	str	r3, [r5, #0]
 800b646:	b016      	add	sp, #88	; 0x58
 800b648:	bd70      	pop	{r4, r5, r6, pc}
 800b64a:	466a      	mov	r2, sp
 800b64c:	f000 f848 	bl	800b6e0 <_fstat_r>
 800b650:	2800      	cmp	r0, #0
 800b652:	dbec      	blt.n	800b62e <__swhatbuf_r+0x12>
 800b654:	9901      	ldr	r1, [sp, #4]
 800b656:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b65a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b65e:	4259      	negs	r1, r3
 800b660:	4159      	adcs	r1, r3
 800b662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b666:	e7eb      	b.n	800b640 <__swhatbuf_r+0x24>

0800b668 <__smakebuf_r>:
 800b668:	898b      	ldrh	r3, [r1, #12]
 800b66a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b66c:	079d      	lsls	r5, r3, #30
 800b66e:	4606      	mov	r6, r0
 800b670:	460c      	mov	r4, r1
 800b672:	d507      	bpl.n	800b684 <__smakebuf_r+0x1c>
 800b674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b678:	6023      	str	r3, [r4, #0]
 800b67a:	6123      	str	r3, [r4, #16]
 800b67c:	2301      	movs	r3, #1
 800b67e:	6163      	str	r3, [r4, #20]
 800b680:	b002      	add	sp, #8
 800b682:	bd70      	pop	{r4, r5, r6, pc}
 800b684:	ab01      	add	r3, sp, #4
 800b686:	466a      	mov	r2, sp
 800b688:	f7ff ffc8 	bl	800b61c <__swhatbuf_r>
 800b68c:	9900      	ldr	r1, [sp, #0]
 800b68e:	4605      	mov	r5, r0
 800b690:	4630      	mov	r0, r6
 800b692:	f7ff f909 	bl	800a8a8 <_malloc_r>
 800b696:	b948      	cbnz	r0, 800b6ac <__smakebuf_r+0x44>
 800b698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b69c:	059a      	lsls	r2, r3, #22
 800b69e:	d4ef      	bmi.n	800b680 <__smakebuf_r+0x18>
 800b6a0:	f023 0303 	bic.w	r3, r3, #3
 800b6a4:	f043 0302 	orr.w	r3, r3, #2
 800b6a8:	81a3      	strh	r3, [r4, #12]
 800b6aa:	e7e3      	b.n	800b674 <__smakebuf_r+0xc>
 800b6ac:	89a3      	ldrh	r3, [r4, #12]
 800b6ae:	6020      	str	r0, [r4, #0]
 800b6b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6b4:	81a3      	strh	r3, [r4, #12]
 800b6b6:	9b00      	ldr	r3, [sp, #0]
 800b6b8:	6163      	str	r3, [r4, #20]
 800b6ba:	9b01      	ldr	r3, [sp, #4]
 800b6bc:	6120      	str	r0, [r4, #16]
 800b6be:	b15b      	cbz	r3, 800b6d8 <__smakebuf_r+0x70>
 800b6c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6c4:	4630      	mov	r0, r6
 800b6c6:	f000 f81d 	bl	800b704 <_isatty_r>
 800b6ca:	b128      	cbz	r0, 800b6d8 <__smakebuf_r+0x70>
 800b6cc:	89a3      	ldrh	r3, [r4, #12]
 800b6ce:	f023 0303 	bic.w	r3, r3, #3
 800b6d2:	f043 0301 	orr.w	r3, r3, #1
 800b6d6:	81a3      	strh	r3, [r4, #12]
 800b6d8:	89a3      	ldrh	r3, [r4, #12]
 800b6da:	431d      	orrs	r5, r3
 800b6dc:	81a5      	strh	r5, [r4, #12]
 800b6de:	e7cf      	b.n	800b680 <__smakebuf_r+0x18>

0800b6e0 <_fstat_r>:
 800b6e0:	b538      	push	{r3, r4, r5, lr}
 800b6e2:	4d07      	ldr	r5, [pc, #28]	; (800b700 <_fstat_r+0x20>)
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	4608      	mov	r0, r1
 800b6ea:	4611      	mov	r1, r2
 800b6ec:	602b      	str	r3, [r5, #0]
 800b6ee:	f7f6 fac9 	bl	8001c84 <_fstat>
 800b6f2:	1c43      	adds	r3, r0, #1
 800b6f4:	d102      	bne.n	800b6fc <_fstat_r+0x1c>
 800b6f6:	682b      	ldr	r3, [r5, #0]
 800b6f8:	b103      	cbz	r3, 800b6fc <_fstat_r+0x1c>
 800b6fa:	6023      	str	r3, [r4, #0]
 800b6fc:	bd38      	pop	{r3, r4, r5, pc}
 800b6fe:	bf00      	nop
 800b700:	20001c74 	.word	0x20001c74

0800b704 <_isatty_r>:
 800b704:	b538      	push	{r3, r4, r5, lr}
 800b706:	4d06      	ldr	r5, [pc, #24]	; (800b720 <_isatty_r+0x1c>)
 800b708:	2300      	movs	r3, #0
 800b70a:	4604      	mov	r4, r0
 800b70c:	4608      	mov	r0, r1
 800b70e:	602b      	str	r3, [r5, #0]
 800b710:	f7f6 fac8 	bl	8001ca4 <_isatty>
 800b714:	1c43      	adds	r3, r0, #1
 800b716:	d102      	bne.n	800b71e <_isatty_r+0x1a>
 800b718:	682b      	ldr	r3, [r5, #0]
 800b71a:	b103      	cbz	r3, 800b71e <_isatty_r+0x1a>
 800b71c:	6023      	str	r3, [r4, #0]
 800b71e:	bd38      	pop	{r3, r4, r5, pc}
 800b720:	20001c74 	.word	0x20001c74

0800b724 <_init>:
 800b724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b726:	bf00      	nop
 800b728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b72a:	bc08      	pop	{r3}
 800b72c:	469e      	mov	lr, r3
 800b72e:	4770      	bx	lr

0800b730 <_fini>:
 800b730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b732:	bf00      	nop
 800b734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b736:	bc08      	pop	{r3}
 800b738:	469e      	mov	lr, r3
 800b73a:	4770      	bx	lr
