
VigiWheels_Fire_Detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b86c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  0800b9fc  0800b9fc  0001b9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd0c  0800bd0c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd0c  0800bd0c  0001bd0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd14  0800bd14  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd14  0800bd14  0001bd14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd18  0800bd18  0001bd18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800bd1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c80  2000006c  0800bd88  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cec  0800bd88  00021cec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f09e  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d5d  00000000  00000000  0003f17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b38  00000000  00000000  00042ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000152f  00000000  00000000  00044a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b0d6  00000000  00000000  00045f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fbfb  00000000  00000000  0007101d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111de5  00000000  00000000  00090c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000816c  00000000  00000000  001a2a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001aab6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b9e4 	.word	0x0800b9e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800b9e4 	.word	0x0800b9e4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <reading_analog_sensor>:
#define SIZE_RX 10
#define SIZE_TX 100

// Function to read analog sensor values
void reading_analog_sensor(ADC_HandleTypeDef *hadc, uint16_t *sensorValue)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
    HAL_ADC_Start(hadc);
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f001 fbde 	bl	8002544 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, 100);
 8000d88:	2164      	movs	r1, #100	; 0x64
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f001 fcc8 	bl	8002720 <HAL_ADC_PollForConversion>
    *sensorValue = HAL_ADC_GetValue(hadc);
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f001 fd9d 	bl	80028d0 <HAL_ADC_GetValue>
 8000d96:	4603      	mov	r3, r0
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	801a      	strh	r2, [r3, #0]
    HAL_ADC_Stop(hadc);
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f001 fc8a 	bl	80026b8 <HAL_ADC_Stop>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <reading_digital_sensor>:

// Function to read digital sensor values
void reading_digital_sensor(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint16_t *sensorValue)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	460b      	mov	r3, r1
 8000db6:	607a      	str	r2, [r7, #4]
 8000db8:	817b      	strh	r3, [r7, #10]
    *sensorValue = !HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000dba:	897b      	ldrh	r3, [r7, #10]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	f002 fe8e 	bl	8003ae0 <HAL_GPIO_ReadPin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	bf0c      	ite	eq
 8000dca:	2301      	moveq	r3, #1
 8000dcc:	2300      	movne	r3, #0
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	801a      	strh	r2, [r3, #0]
}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
	...

08000de0 <reading_sensor_values>:

// Function to read all sensor values
void reading_sensor_values()
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
    reading_analog_sensor(&hadc1, &ir_sensor1);
 8000de4:	490e      	ldr	r1, [pc, #56]	; (8000e20 <reading_sensor_values+0x40>)
 8000de6:	480f      	ldr	r0, [pc, #60]	; (8000e24 <reading_sensor_values+0x44>)
 8000de8:	f7ff ffc6 	bl	8000d78 <reading_analog_sensor>
    reading_digital_sensor(GPIOA, GPIO_PIN_10, &ir_sensor2);
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <reading_sensor_values+0x48>)
 8000dee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000df6:	f7ff ffd9 	bl	8000dac <reading_digital_sensor>
    reading_analog_sensor(&hadc1, &ir_sensor3);
 8000dfa:	490c      	ldr	r1, [pc, #48]	; (8000e2c <reading_sensor_values+0x4c>)
 8000dfc:	4809      	ldr	r0, [pc, #36]	; (8000e24 <reading_sensor_values+0x44>)
 8000dfe:	f7ff ffbb 	bl	8000d78 <reading_analog_sensor>
    reading_digital_sensor(GPIOB, GPIO_PIN_3, &ir_sensor4);
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <reading_sensor_values+0x50>)
 8000e04:	2108      	movs	r1, #8
 8000e06:	480b      	ldr	r0, [pc, #44]	; (8000e34 <reading_sensor_values+0x54>)
 8000e08:	f7ff ffd0 	bl	8000dac <reading_digital_sensor>
    reading_analog_sensor(&hadc1, &smoke_sensor1);
 8000e0c:	490a      	ldr	r1, [pc, #40]	; (8000e38 <reading_sensor_values+0x58>)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <reading_sensor_values+0x44>)
 8000e10:	f7ff ffb2 	bl	8000d78 <reading_analog_sensor>
    reading_analog_sensor(&hadc1, &smoke_sensor2);
 8000e14:	4909      	ldr	r1, [pc, #36]	; (8000e3c <reading_sensor_values+0x5c>)
 8000e16:	4803      	ldr	r0, [pc, #12]	; (8000e24 <reading_sensor_values+0x44>)
 8000e18:	f7ff ffae 	bl	8000d78 <reading_analog_sensor>
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000088 	.word	0x20000088
 8000e24:	200000a0 	.word	0x200000a0
 8000e28:	2000008a 	.word	0x2000008a
 8000e2c:	2000008c 	.word	0x2000008c
 8000e30:	2000008e 	.word	0x2000008e
 8000e34:	48000400 	.word	0x48000400
 8000e38:	20000090 	.word	0x20000090
 8000e3c:	20000092 	.word	0x20000092

08000e40 <sending_data_uart>:

// Frame format: "#[ID]=[Value]|[ID]=[Value]|[ID]=[Value]\n"
void sending_data_uart(void *argument)
{
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b09f      	sub	sp, #124	; 0x7c
 8000e44:	af02      	add	r7, sp, #8
 8000e46:	6078      	str	r0, [r7, #4]
    char tx[SIZE_TX + 1];

    while (1)
    {
        osMutexAcquire(uartMutex, osWaitForever);
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <sending_data_uart+0x70>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	4618      	mov	r0, r3
 8000e52:	f006 fb5a 	bl	800750a <osMutexAcquire>

        reading_sensor_values();
 8000e56:	f7ff ffc3 	bl	8000de0 <reading_sensor_values>

        // Create and transmit the frame
        sprintf(tx, "#IR_SENSOR1=%hu|IR_SENSOR2=%u|IR_SENSOR3=%hu|IR_SENSOR4=%u|SMOKE_SENSOR1=4095|SMOKE_SENSOR2=4095\n",
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <sending_data_uart+0x74>)
 8000e5c:	881b      	ldrh	r3, [r3, #0]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <sending_data_uart+0x78>)
 8000e62:	881b      	ldrh	r3, [r3, #0]
 8000e64:	461c      	mov	r4, r3
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <sending_data_uart+0x7c>)
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <sending_data_uart+0x80>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	f107 0008 	add.w	r0, r7, #8
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	9200      	str	r2, [sp, #0]
 8000e78:	4623      	mov	r3, r4
 8000e7a:	460a      	mov	r2, r1
 8000e7c:	4911      	ldr	r1, [pc, #68]	; (8000ec4 <sending_data_uart+0x84>)
 8000e7e:	f009 fc97 	bl	800a7b0 <siprintf>
                ir_sensor1, ir_sensor2, ir_sensor3, ir_sensor4);

        HAL_UART_Transmit(&huart2, (const uint8_t *)tx, strlen(tx), 100);
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff f9ac 	bl	80001e4 <strlen>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	f107 0108 	add.w	r1, r7, #8
 8000e94:	2364      	movs	r3, #100	; 0x64
 8000e96:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <sending_data_uart+0x88>)
 8000e98:	f005 fb64 	bl	8006564 <HAL_UART_Transmit>

        osMutexRelease(uartMutex);
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <sending_data_uart+0x70>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f006 fb7d 	bl	80075a0 <osMutexRelease>

        osDelay(200);
 8000ea6:	20c8      	movs	r0, #200	; 0xc8
 8000ea8:	f006 fa8e 	bl	80073c8 <osDelay>
        osMutexAcquire(uartMutex, osWaitForever);
 8000eac:	e7cc      	b.n	8000e48 <sending_data_uart+0x8>
 8000eae:	bf00      	nop
 8000eb0:	20000094 	.word	0x20000094
 8000eb4:	20000088 	.word	0x20000088
 8000eb8:	2000008a 	.word	0x2000008a
 8000ebc:	2000008c 	.word	0x2000008c
 8000ec0:	2000008e 	.word	0x2000008e
 8000ec4:	0800ba04 	.word	0x0800ba04
 8000ec8:	20000200 	.word	0x20000200

08000ecc <receiving_data_uart>:
    }
}

// Frame format: "#[ID]=[Value]\n"
void receiving_data_uart()
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b088      	sub	sp, #32
 8000ed0:	af00      	add	r7, sp, #0
    char buf[1];
    char rx[SIZE_RX + 1];

    while (1)
    {
        osMutexAcquire(uartMutex, osWaitForever);
 8000ed2:	4b3d      	ldr	r3, [pc, #244]	; (8000fc8 <receiving_data_uart+0xfc>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f04f 31ff 	mov.w	r1, #4294967295
 8000eda:	4618      	mov	r0, r3
 8000edc:	f006 fb15 	bl	800750a <osMutexAcquire>

        // Wait for "START_OF_FRAME"
        do
        {
            HAL_UART_Receive(&huart2, (uint8_t *)buf, 1, 100);
 8000ee0:	f107 010c 	add.w	r1, r7, #12
 8000ee4:	2364      	movs	r3, #100	; 0x64
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4838      	ldr	r0, [pc, #224]	; (8000fcc <receiving_data_uart+0x100>)
 8000eea:	f005 fbc5 	bl	8006678 <HAL_UART_Receive>
        } while (*buf != START_OF_FRAME);
 8000eee:	7b3b      	ldrb	r3, [r7, #12]
 8000ef0:	2b23      	cmp	r3, #35	; 0x23
 8000ef2:	d1f5      	bne.n	8000ee0 <receiving_data_uart+0x14>

        // Receive data until "END_OF_FRAME"
        int i = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	61fb      	str	r3, [r7, #28]
        do
        {
            HAL_UART_Receive(&huart2, (uint8_t *)buf, 1, 100);
 8000ef8:	f107 010c 	add.w	r1, r7, #12
 8000efc:	2364      	movs	r3, #100	; 0x64
 8000efe:	2201      	movs	r2, #1
 8000f00:	4832      	ldr	r0, [pc, #200]	; (8000fcc <receiving_data_uart+0x100>)
 8000f02:	f005 fbb9 	bl	8006678 <HAL_UART_Receive>
            rx[i++] = *buf;
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	61fa      	str	r2, [r7, #28]
 8000f0c:	7b3a      	ldrb	r2, [r7, #12]
 8000f0e:	3320      	adds	r3, #32
 8000f10:	443b      	add	r3, r7
 8000f12:	f803 2c20 	strb.w	r2, [r3, #-32]

        } while (*buf != END_OF_FRAME);
 8000f16:	7b3b      	ldrb	r3, [r7, #12]
 8000f18:	2b0a      	cmp	r3, #10
 8000f1a:	d1ed      	bne.n	8000ef8 <receiving_data_uart+0x2c>

        rx[i] = '\0';
 8000f1c:	463a      	mov	r2, r7
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	4413      	add	r3, r2
 8000f22:	2200      	movs	r2, #0
 8000f24:	701a      	strb	r2, [r3, #0]

        // Extract ID and Value from the received frame
        char *id = strtok(rx, "=");    // ID
 8000f26:	463b      	mov	r3, r7
 8000f28:	4929      	ldr	r1, [pc, #164]	; (8000fd0 <receiving_data_uart+0x104>)
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f009 fcac 	bl	800a888 <strtok>
 8000f30:	61b8      	str	r0, [r7, #24]
        char *value = strtok(NULL, "="); // Value
 8000f32:	4927      	ldr	r1, [pc, #156]	; (8000fd0 <receiving_data_uart+0x104>)
 8000f34:	2000      	movs	r0, #0
 8000f36:	f009 fca7 	bl	800a888 <strtok>
 8000f3a:	6178      	str	r0, [r7, #20]

        // Process based on ID and Value
        if (id != NULL && value != NULL)
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d03b      	beq.n	8000fba <receiving_data_uart+0xee>
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d038      	beq.n	8000fba <receiving_data_uart+0xee>
        {
            if (strcmp(id, "f") == 0)
 8000f48:	4922      	ldr	r1, [pc, #136]	; (8000fd4 <receiving_data_uart+0x108>)
 8000f4a:	69b8      	ldr	r0, [r7, #24]
 8000f4c:	f7ff f940 	bl	80001d0 <strcmp>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d121      	bne.n	8000f9a <receiving_data_uart+0xce>
            {
                // Handle Fire sensor values
                if (atoi(value) == 1)
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	f009 fad8 	bl	800a50c <atoi>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d10a      	bne.n	8000f78 <receiving_data_uart+0xac>
                {
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2110      	movs	r1, #16
 8000f66:	481c      	ldr	r0, [pc, #112]	; (8000fd8 <receiving_data_uart+0x10c>)
 8000f68:	f002 fdd2 	bl	8003b10 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2120      	movs	r1, #32
 8000f70:	4819      	ldr	r0, [pc, #100]	; (8000fd8 <receiving_data_uart+0x10c>)
 8000f72:	f002 fdcd 	bl	8003b10 <HAL_GPIO_WritePin>
 8000f76:	e020      	b.n	8000fba <receiving_data_uart+0xee>
                }
                else if (atoi(value) == 0)
 8000f78:	6978      	ldr	r0, [r7, #20]
 8000f7a:	f009 fac7 	bl	800a50c <atoi>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d11a      	bne.n	8000fba <receiving_data_uart+0xee>
                {
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2110      	movs	r1, #16
 8000f88:	4813      	ldr	r0, [pc, #76]	; (8000fd8 <receiving_data_uart+0x10c>)
 8000f8a:	f002 fdc1 	bl	8003b10 <HAL_GPIO_WritePin>
                    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2120      	movs	r1, #32
 8000f92:	4811      	ldr	r0, [pc, #68]	; (8000fd8 <receiving_data_uart+0x10c>)
 8000f94:	f002 fdbc 	bl	8003b10 <HAL_GPIO_WritePin>
 8000f98:	e00f      	b.n	8000fba <receiving_data_uart+0xee>
                else
                {
                    // Handle error
                }
            }
            else if (strcmp(id, "c") == 0)
 8000f9a:	4910      	ldr	r1, [pc, #64]	; (8000fdc <receiving_data_uart+0x110>)
 8000f9c:	69b8      	ldr	r0, [r7, #24]
 8000f9e:	f7ff f917 	bl	80001d0 <strcmp>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d108      	bne.n	8000fba <receiving_data_uart+0xee>
            {
                // Handle PWM value

            	uint32_t cmd_angle = atoi(value);
 8000fa8:	6978      	ldr	r0, [r7, #20]
 8000faa:	f009 faaf 	bl	800a50c <atoi>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	613b      	str	r3, [r7, #16]
            	update_CCR_timer_PWM(cmd_angle,&htim3);
 8000fb2:	490b      	ldr	r1, [pc, #44]	; (8000fe0 <receiving_data_uart+0x114>)
 8000fb4:	6938      	ldr	r0, [r7, #16]
 8000fb6:	f000 f817 	bl	8000fe8 <update_CCR_timer_PWM>
            {
                // Handle other IDs or report error
            }
        }

        osMutexRelease(uartMutex);
 8000fba:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <receiving_data_uart+0xfc>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 faee 	bl	80075a0 <osMutexRelease>
    {
 8000fc4:	e785      	b.n	8000ed2 <receiving_data_uart+0x6>
 8000fc6:	bf00      	nop
 8000fc8:	20000094 	.word	0x20000094
 8000fcc:	20000200 	.word	0x20000200
 8000fd0:	0800ba68 	.word	0x0800ba68
 8000fd4:	0800ba6c 	.word	0x0800ba6c
 8000fd8:	48000400 	.word	0x48000400
 8000fdc:	0800ba70 	.word	0x0800ba70
 8000fe0:	200001b4 	.word	0x200001b4
 8000fe4:	00000000 	.word	0x00000000

08000fe8 <update_CCR_timer_PWM>:
    }
}

void update_CCR_timer_PWM(uint32_t cmd_angle_deg, TIM_HandleTypeDef * htim){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
	if (cmd_angle_deg < 0){
		cmd_angle_deg = 0;
	} else if (cmd_angle_deg > 180){
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2bb4      	cmp	r3, #180	; 0xb4
 8000ff6:	d901      	bls.n	8000ffc <update_CCR_timer_PWM+0x14>
		cmd_angle_deg = 180;
 8000ff8:	23b4      	movs	r3, #180	; 0xb4
 8000ffa:	607b      	str	r3, [r7, #4]
	}
	uint32_t ARR_timer = htim->Instance->ARR;
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001002:	613b      	str	r3, [r7, #16]

	uint32_t CCR_value_180_deg = angle_180_duty_ratio_PWM*ARR_timer/100; //2100 here
 8001004:	6938      	ldr	r0, [r7, #16]
 8001006:	f7ff fa8d 	bl	8000524 <__aeabi_ui2d>
 800100a:	a32d      	add	r3, pc, #180	; (adr r3, 80010c0 <update_CCR_timer_PWM+0xd8>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff fb02 	bl	8000618 <__aeabi_dmul>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f04f 0200 	mov.w	r2, #0
 8001020:	4b25      	ldr	r3, [pc, #148]	; (80010b8 <update_CCR_timer_PWM+0xd0>)
 8001022:	f7ff fc23 	bl	800086c <__aeabi_ddiv>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	4610      	mov	r0, r2
 800102c:	4619      	mov	r1, r3
 800102e:	f7ff fd05 	bl	8000a3c <__aeabi_d2uiz>
 8001032:	4603      	mov	r3, r0
 8001034:	60fb      	str	r3, [r7, #12]
	uint32_t CCR_value_0_deg = angle_0_duty_ratio_PWM*ARR_timer/100; // 450 here
 8001036:	6938      	ldr	r0, [r7, #16]
 8001038:	f7ff fa74 	bl	8000524 <__aeabi_ui2d>
 800103c:	a31c      	add	r3, pc, #112	; (adr r3, 80010b0 <update_CCR_timer_PWM+0xc8>)
 800103e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001042:	f7ff fae9 	bl	8000618 <__aeabi_dmul>
 8001046:	4602      	mov	r2, r0
 8001048:	460b      	mov	r3, r1
 800104a:	4610      	mov	r0, r2
 800104c:	4619      	mov	r1, r3
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b19      	ldr	r3, [pc, #100]	; (80010b8 <update_CCR_timer_PWM+0xd0>)
 8001054:	f7ff fc0a 	bl	800086c <__aeabi_ddiv>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff fcec 	bl	8000a3c <__aeabi_d2uiz>
 8001064:	4603      	mov	r3, r0
 8001066:	60bb      	str	r3, [r7, #8]

	int CCR_required = (CCR_value_180_deg-CCR_value_0_deg) * cmd_angle_deg / 180 + CCR_value_0_deg;
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	fb02 f303 	mul.w	r3, r2, r3
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	4a11      	ldr	r2, [pc, #68]	; (80010bc <update_CCR_timer_PWM+0xd4>)
 8001078:	fba2 2303 	umull	r2, r3, r2, r3
 800107c:	089a      	lsrs	r2, r3, #2
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	4413      	add	r3, r2
 8001082:	617b      	str	r3, [r7, #20]

	if (CCR_required > CCR_value_180_deg){
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	429a      	cmp	r2, r3
 800108a:	d202      	bcs.n	8001092 <update_CCR_timer_PWM+0xaa>
		CCR_required = CCR_value_180_deg ;
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e005      	b.n	800109e <update_CCR_timer_PWM+0xb6>
	} else if (CCR_required < CCR_value_0_deg){
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	68ba      	ldr	r2, [r7, #8]
 8001096:	429a      	cmp	r2, r3
 8001098:	d901      	bls.n	800109e <update_CCR_timer_PWM+0xb6>
		CCR_required = CCR_value_0_deg;
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	617b      	str	r3, [r7, #20]
	}
	htim->Instance->CCR1=CCR_required;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	47ae147b 	.word	0x47ae147b
 80010b4:	40067ae1 	.word	0x40067ae1
 80010b8:	40590000 	.word	0x40590000
 80010bc:	16c16c17 	.word	0x16c16c17
 80010c0:	5c28f5c3 	.word	0x5c28f5c3
 80010c4:	402a428f 	.word	0x402a428f

080010c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010cc:	f000 fe3c 	bl	8001d48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d0:	f000 f850 	bl	8001174 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80010d4:	f000 f89f 	bl	8001216 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010d8:	f000 fada 	bl	8001690 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80010dc:	f000 faa8 	bl	8001630 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80010e0:	f000 f8c4 	bl	800126c <MX_ADC1_Init>
  MX_ADC2_Init();
 80010e4:	f000 f938 	bl	8001358 <MX_ADC2_Init>
  MX_TIM1_Init();
 80010e8:	f000 f99a 	bl	8001420 <MX_TIM1_Init>
  MX_TIM3_Init();
 80010ec:	f000 fa28 	bl	8001540 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim3);
 80010f0:	4816      	ldr	r0, [pc, #88]	; (800114c <main+0x84>)
 80010f2:	f004 f8f3 	bl	80052dc <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010f6:	2100      	movs	r1, #0
 80010f8:	4814      	ldr	r0, [pc, #80]	; (800114c <main+0x84>)
 80010fa:	f004 f951 	bl	80053a0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80010fe:	f006 f887 	bl	8007210 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  uartMutex = osMutexNew(NULL);
 8001102:	2000      	movs	r0, #0
 8001104:	f006 f97b 	bl	80073fe <osMutexNew>
 8001108:	4603      	mov	r3, r0
 800110a:	4a11      	ldr	r2, [pc, #68]	; (8001150 <main+0x88>)
 800110c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800110e:	4a11      	ldr	r2, [pc, #68]	; (8001154 <main+0x8c>)
 8001110:	2100      	movs	r1, #0
 8001112:	4811      	ldr	r0, [pc, #68]	; (8001158 <main+0x90>)
 8001114:	f006 f8c6 	bl	80072a4 <osThreadNew>
 8001118:	4603      	mov	r3, r0
 800111a:	4a10      	ldr	r2, [pc, #64]	; (800115c <main+0x94>)
 800111c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* Create tasks */
  senderThreadId = osThreadNew(sending_data_uart, NULL, &senderTask_attributes);
 800111e:	4a10      	ldr	r2, [pc, #64]	; (8001160 <main+0x98>)
 8001120:	2100      	movs	r1, #0
 8001122:	4810      	ldr	r0, [pc, #64]	; (8001164 <main+0x9c>)
 8001124:	f006 f8be 	bl	80072a4 <osThreadNew>
 8001128:	4603      	mov	r3, r0
 800112a:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <main+0xa0>)
 800112c:	6013      	str	r3, [r2, #0]
  receiverThreadId = osThreadNew(receiving_data_uart, NULL, NULL);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	480e      	ldr	r0, [pc, #56]	; (800116c <main+0xa4>)
 8001134:	f006 f8b6 	bl	80072a4 <osThreadNew>
 8001138:	4603      	mov	r3, r0
 800113a:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <main+0xa8>)
 800113c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  update_CCR_timer_PWM(90,&htim3);
 800113e:	4903      	ldr	r1, [pc, #12]	; (800114c <main+0x84>)
 8001140:	205a      	movs	r0, #90	; 0x5a
 8001142:	f7ff ff51 	bl	8000fe8 <update_CCR_timer_PWM>
//update_CCR_timer_PWM(0,&htim3);
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001146:	f006 f887 	bl	8007258 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800114a:	e7fe      	b.n	800114a <main+0x82>
 800114c:	200001b4 	.word	0x200001b4
 8001150:	20000094 	.word	0x20000094
 8001154:	0800babc 	.word	0x0800babc
 8001158:	080017a5 	.word	0x080017a5
 800115c:	20000288 	.word	0x20000288
 8001160:	0800ba98 	.word	0x0800ba98
 8001164:	08000e41 	.word	0x08000e41
 8001168:	20000098 	.word	0x20000098
 800116c:	08000ecd 	.word	0x08000ecd
 8001170:	2000009c 	.word	0x2000009c

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b096      	sub	sp, #88	; 0x58
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	2244      	movs	r2, #68	; 0x44
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f009 fb77 	bl	800a876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	463b      	mov	r3, r7
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001196:	f44f 7000 	mov.w	r0, #512	; 0x200
 800119a:	f002 fcdf 	bl	8003b5c <HAL_PWREx_ControlVoltageScaling>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011a4:	f000 fb06 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011a8:	2302      	movs	r3, #2
 80011aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b2:	2310      	movs	r3, #16
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b6:	2302      	movs	r3, #2
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011ba:	2302      	movs	r3, #2
 80011bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011be:	2301      	movs	r3, #1
 80011c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80011c2:	230a      	movs	r3, #10
 80011c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011c6:	2307      	movs	r3, #7
 80011c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ca:	2302      	movs	r3, #2
 80011cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ce:	2302      	movs	r3, #2
 80011d0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fd16 	bl	8003c08 <HAL_RCC_OscConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80011e2:	f000 fae7 	bl	80017b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e6:	230f      	movs	r3, #15
 80011e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ea:	2303      	movs	r3, #3
 80011ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011fa:	463b      	mov	r3, r7
 80011fc:	2104      	movs	r1, #4
 80011fe:	4618      	mov	r0, r3
 8001200:	f003 f8de 	bl	80043c0 <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800120a:	f000 fad3 	bl	80017b4 <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3758      	adds	r7, #88	; 0x58
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b0a2      	sub	sp, #136	; 0x88
 800121a:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800121c:	463b      	mov	r3, r7
 800121e:	2288      	movs	r2, #136	; 0x88
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f009 fb27 	bl	800a876 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001228:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800122c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800122e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001232:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001234:	2302      	movs	r3, #2
 8001236:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001238:	2301      	movs	r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800123c:	2308      	movs	r3, #8
 800123e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001240:	2307      	movs	r3, #7
 8001242:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001244:	2302      	movs	r3, #2
 8001246:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001248:	2302      	movs	r3, #2
 800124a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800124c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001250:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001252:	463b      	mov	r3, r7
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fad7 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8001260:	f000 faa8 	bl	80017b4 <Error_Handler>
  }
}
 8001264:	bf00      	nop
 8001266:	3788      	adds	r7, #136	; 0x88
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
 800128c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800128e:	4b2f      	ldr	r3, [pc, #188]	; (800134c <MX_ADC1_Init+0xe0>)
 8001290:	4a2f      	ldr	r2, [pc, #188]	; (8001350 <MX_ADC1_Init+0xe4>)
 8001292:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <MX_ADC1_Init+0xe0>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800129a:	4b2c      	ldr	r3, [pc, #176]	; (800134c <MX_ADC1_Init+0xe0>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a0:	4b2a      	ldr	r3, [pc, #168]	; (800134c <MX_ADC1_Init+0xe0>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012a6:	4b29      	ldr	r3, [pc, #164]	; (800134c <MX_ADC1_Init+0xe0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ac:	4b27      	ldr	r3, [pc, #156]	; (800134c <MX_ADC1_Init+0xe0>)
 80012ae:	2204      	movs	r2, #4
 80012b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <MX_ADC1_Init+0xe0>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012b8:	4b24      	ldr	r3, [pc, #144]	; (800134c <MX_ADC1_Init+0xe0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <MX_ADC1_Init+0xe0>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012c4:	4b21      	ldr	r3, [pc, #132]	; (800134c <MX_ADC1_Init+0xe0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_ADC1_Init+0xe0>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <MX_ADC1_Init+0xe0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012d8:	4b1c      	ldr	r3, [pc, #112]	; (800134c <MX_ADC1_Init+0xe0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_ADC1_Init+0xe0>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_ADC1_Init+0xe0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012ee:	4817      	ldr	r0, [pc, #92]	; (800134c <MX_ADC1_Init+0xe0>)
 80012f0:	f000 ffd8 	bl	80022a4 <HAL_ADC_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80012fa:	f000 fa5b 	bl	80017b4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4810      	ldr	r0, [pc, #64]	; (800134c <MX_ADC1_Init+0xe0>)
 800130a:	f002 f8a9 	bl	8003460 <HAL_ADCEx_MultiModeConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001314:	f000 fa4e 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_ADC1_Init+0xe8>)
 800131a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800131c:	2306      	movs	r3, #6
 800131e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001324:	237f      	movs	r3, #127	; 0x7f
 8001326:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001328:	2304      	movs	r3, #4
 800132a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_ADC1_Init+0xe0>)
 8001336:	f001 fad9 	bl	80028ec <HAL_ADC_ConfigChannel>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001340:	f000 fa38 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	; 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	200000a0 	.word	0x200000a0
 8001350:	50040000 	.word	0x50040000
 8001354:	14f00020 	.word	0x14f00020

08001358 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800135e:	463b      	mov	r3, r7
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800136e:	4b29      	ldr	r3, [pc, #164]	; (8001414 <MX_ADC2_Init+0xbc>)
 8001370:	4a29      	ldr	r2, [pc, #164]	; (8001418 <MX_ADC2_Init+0xc0>)
 8001372:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <MX_ADC2_Init+0xbc>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <MX_ADC2_Init+0xbc>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <MX_ADC2_Init+0xbc>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001386:	4b23      	ldr	r3, [pc, #140]	; (8001414 <MX_ADC2_Init+0xbc>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800138c:	4b21      	ldr	r3, [pc, #132]	; (8001414 <MX_ADC2_Init+0xbc>)
 800138e:	2204      	movs	r2, #4
 8001390:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001392:	4b20      	ldr	r3, [pc, #128]	; (8001414 <MX_ADC2_Init+0xbc>)
 8001394:	2200      	movs	r2, #0
 8001396:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <MX_ADC2_Init+0xbc>)
 800139a:	2200      	movs	r2, #0
 800139c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 800139e:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <MX_ADC2_Init+0xbc>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_ADC2_Init+0xbc>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <MX_ADC2_Init+0xbc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_ADC2_Init+0xbc>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <MX_ADC2_Init+0xbc>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_ADC2_Init+0xbc>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_ADC2_Init+0xbc>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013ce:	4811      	ldr	r0, [pc, #68]	; (8001414 <MX_ADC2_Init+0xbc>)
 80013d0:	f000 ff68 	bl	80022a4 <HAL_ADC_Init>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80013da:	f000 f9eb 	bl	80017b4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013de:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_ADC2_Init+0xc4>)
 80013e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013e2:	2306      	movs	r3, #6
 80013e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80013ea:	237f      	movs	r3, #127	; 0x7f
 80013ec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013ee:	2304      	movs	r3, #4
 80013f0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80013f6:	463b      	mov	r3, r7
 80013f8:	4619      	mov	r1, r3
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <MX_ADC2_Init+0xbc>)
 80013fc:	f001 fa76 	bl	80028ec <HAL_ADC_ConfigChannel>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8001406:	f000 f9d5 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	20000104 	.word	0x20000104
 8001418:	50040100 	.word	0x50040100
 800141c:	04300002 	.word	0x04300002

08001420 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b096      	sub	sp, #88	; 0x58
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001426:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001432:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
 8001440:	611a      	str	r2, [r3, #16]
 8001442:	615a      	str	r2, [r3, #20]
 8001444:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001446:	1d3b      	adds	r3, r7, #4
 8001448:	222c      	movs	r2, #44	; 0x2c
 800144a:	2100      	movs	r1, #0
 800144c:	4618      	mov	r0, r3
 800144e:	f009 fa12 	bl	800a876 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001452:	4b39      	ldr	r3, [pc, #228]	; (8001538 <MX_TIM1_Init+0x118>)
 8001454:	4a39      	ldr	r2, [pc, #228]	; (800153c <MX_TIM1_Init+0x11c>)
 8001456:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001458:	4b37      	ldr	r3, [pc, #220]	; (8001538 <MX_TIM1_Init+0x118>)
 800145a:	2200      	movs	r2, #0
 800145c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b36      	ldr	r3, [pc, #216]	; (8001538 <MX_TIM1_Init+0x118>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001464:	4b34      	ldr	r3, [pc, #208]	; (8001538 <MX_TIM1_Init+0x118>)
 8001466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800146a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b32      	ldr	r3, [pc, #200]	; (8001538 <MX_TIM1_Init+0x118>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001472:	4b31      	ldr	r3, [pc, #196]	; (8001538 <MX_TIM1_Init+0x118>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001478:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <MX_TIM1_Init+0x118>)
 800147a:	2200      	movs	r2, #0
 800147c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800147e:	482e      	ldr	r0, [pc, #184]	; (8001538 <MX_TIM1_Init+0x118>)
 8001480:	f003 fed5 	bl	800522e <HAL_TIM_OC_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800148a:	f000 f993 	bl	80017b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148e:	2300      	movs	r3, #0
 8001490:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800149a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800149e:	4619      	mov	r1, r3
 80014a0:	4825      	ldr	r0, [pc, #148]	; (8001538 <MX_TIM1_Init+0x118>)
 80014a2:	f004 ff0b 	bl	80062bc <HAL_TIMEx_MasterConfigSynchronization>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014ac:	f000 f982 	bl	80017b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80014b0:	2300      	movs	r3, #0
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b8:	2300      	movs	r3, #0
 80014ba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014bc:	2300      	movs	r3, #0
 80014be:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014d0:	2200      	movs	r2, #0
 80014d2:	4619      	mov	r1, r3
 80014d4:	4818      	ldr	r0, [pc, #96]	; (8001538 <MX_TIM1_Init+0x118>)
 80014d6:	f004 f869 	bl	80055ac <HAL_TIM_OC_ConfigChannel>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80014e0:	f000 f968 	bl	80017b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014f0:	2300      	movs	r3, #0
 80014f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800150a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	4619      	mov	r1, r3
 8001518:	4807      	ldr	r0, [pc, #28]	; (8001538 <MX_TIM1_Init+0x118>)
 800151a:	f004 ff57 	bl	80063cc <HAL_TIMEx_ConfigBreakDeadTime>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001524:	f000 f946 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001528:	4803      	ldr	r0, [pc, #12]	; (8001538 <MX_TIM1_Init+0x118>)
 800152a:	f000 fa31 	bl	8001990 <HAL_TIM_MspPostInit>

}
 800152e:	bf00      	nop
 8001530:	3758      	adds	r7, #88	; 0x58
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000168 	.word	0x20000168
 800153c:	40012c00 	.word	0x40012c00

08001540 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b08e      	sub	sp, #56	; 0x38
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001546:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001560:	463b      	mov	r3, r7
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]
 8001568:	609a      	str	r2, [r3, #8]
 800156a:	60da      	str	r2, [r3, #12]
 800156c:	611a      	str	r2, [r3, #16]
 800156e:	615a      	str	r2, [r3, #20]
 8001570:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001572:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <MX_TIM3_Init+0xe8>)
 8001574:	4a2d      	ldr	r2, [pc, #180]	; (800162c <MX_TIM3_Init+0xec>)
 8001576:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001578:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <MX_TIM3_Init+0xe8>)
 800157a:	2263      	movs	r2, #99	; 0x63
 800157c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157e:	4b2a      	ldr	r3, [pc, #168]	; (8001628 <MX_TIM3_Init+0xe8>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16000;
 8001584:	4b28      	ldr	r3, [pc, #160]	; (8001628 <MX_TIM3_Init+0xe8>)
 8001586:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800158a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158c:	4b26      	ldr	r3, [pc, #152]	; (8001628 <MX_TIM3_Init+0xe8>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001592:	4b25      	ldr	r3, [pc, #148]	; (8001628 <MX_TIM3_Init+0xe8>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001598:	4823      	ldr	r0, [pc, #140]	; (8001628 <MX_TIM3_Init+0xe8>)
 800159a:	f003 fdf1 	bl	8005180 <HAL_TIM_Base_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80015a4:	f000 f906 	bl	80017b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b2:	4619      	mov	r1, r3
 80015b4:	481c      	ldr	r0, [pc, #112]	; (8001628 <MX_TIM3_Init+0xe8>)
 80015b6:	f004 f987 	bl	80058c8 <HAL_TIM_ConfigClockSource>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80015c0:	f000 f8f8 	bl	80017b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015c4:	4818      	ldr	r0, [pc, #96]	; (8001628 <MX_TIM3_Init+0xe8>)
 80015c6:	f003 fe89 	bl	80052dc <HAL_TIM_PWM_Init>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80015d0:	f000 f8f0 	bl	80017b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	4619      	mov	r1, r3
 80015e2:	4811      	ldr	r0, [pc, #68]	; (8001628 <MX_TIM3_Init+0xe8>)
 80015e4:	f004 fe6a 	bl	80062bc <HAL_TIMEx_MasterConfigSynchronization>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80015ee:	f000 f8e1 	bl	80017b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f2:	2360      	movs	r3, #96	; 0x60
 80015f4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 80015f6:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80015fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001604:	463b      	mov	r3, r7
 8001606:	2200      	movs	r2, #0
 8001608:	4619      	mov	r1, r3
 800160a:	4807      	ldr	r0, [pc, #28]	; (8001628 <MX_TIM3_Init+0xe8>)
 800160c:	f004 f848 	bl	80056a0 <HAL_TIM_PWM_ConfigChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001616:	f000 f8cd 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800161a:	4803      	ldr	r0, [pc, #12]	; (8001628 <MX_TIM3_Init+0xe8>)
 800161c:	f000 f9b8 	bl	8001990 <HAL_TIM_MspPostInit>

}
 8001620:	bf00      	nop
 8001622:	3738      	adds	r7, #56	; 0x38
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200001b4 	.word	0x200001b4
 800162c:	40000400 	.word	0x40000400

08001630 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <MX_USART2_UART_Init+0x58>)
 8001636:	4a15      	ldr	r2, [pc, #84]	; (800168c <MX_USART2_UART_Init+0x5c>)
 8001638:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <MX_USART2_UART_Init+0x58>)
 800163c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001640:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_USART2_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_USART2_UART_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_USART2_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_USART2_UART_Init+0x58>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_USART2_UART_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_USART2_UART_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_USART2_UART_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_USART2_UART_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_USART2_UART_Init+0x58>)
 8001674:	f004 ff28 	bl	80064c8 <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800167e:	f000 f899 	bl	80017b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000200 	.word	0x20000200
 800168c:	40004400 	.word	0x40004400

08001690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b088      	sub	sp, #32
 8001694:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016a6:	4b3c      	ldr	r3, [pc, #240]	; (8001798 <MX_GPIO_Init+0x108>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	4a3b      	ldr	r2, [pc, #236]	; (8001798 <MX_GPIO_Init+0x108>)
 80016ac:	f043 0304 	orr.w	r3, r3, #4
 80016b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b2:	4b39      	ldr	r3, [pc, #228]	; (8001798 <MX_GPIO_Init+0x108>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	f003 0304 	and.w	r3, r3, #4
 80016ba:	60bb      	str	r3, [r7, #8]
 80016bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	4b36      	ldr	r3, [pc, #216]	; (8001798 <MX_GPIO_Init+0x108>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c2:	4a35      	ldr	r2, [pc, #212]	; (8001798 <MX_GPIO_Init+0x108>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ca:	4b33      	ldr	r3, [pc, #204]	; (8001798 <MX_GPIO_Init+0x108>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	4b30      	ldr	r3, [pc, #192]	; (8001798 <MX_GPIO_Init+0x108>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016da:	4a2f      	ldr	r2, [pc, #188]	; (8001798 <MX_GPIO_Init+0x108>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016e2:	4b2d      	ldr	r3, [pc, #180]	; (8001798 <MX_GPIO_Init+0x108>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2120      	movs	r1, #32
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f6:	f002 fa0b 	bl	8003b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D5___BUZZER_Pin|D4___RELAIS_Pin, GPIO_PIN_RESET);
 80016fa:	2200      	movs	r2, #0
 80016fc:	2130      	movs	r1, #48	; 0x30
 80016fe:	4827      	ldr	r0, [pc, #156]	; (800179c <MX_GPIO_Init+0x10c>)
 8001700:	f002 fa06 	bl	8003b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001704:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800170a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800170e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	4619      	mov	r1, r3
 800171a:	4821      	ldr	r0, [pc, #132]	; (80017a0 <MX_GPIO_Init+0x110>)
 800171c:	f002 f836 	bl	800378c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001720:	2320      	movs	r3, #32
 8001722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173a:	f002 f827 	bl	800378c <HAL_GPIO_Init>

  /*Configure GPIO pin : D2___IR_SENSOR2_Pin */
  GPIO_InitStruct.Pin = D2___IR_SENSOR2_Pin;
 800173e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001744:	2300      	movs	r3, #0
 8001746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D2___IR_SENSOR2_GPIO_Port, &GPIO_InitStruct);
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	4619      	mov	r1, r3
 8001752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001756:	f002 f819 	bl	800378c <HAL_GPIO_Init>

  /*Configure GPIO pin : D3___IR_SENSOR4_Pin */
  GPIO_InitStruct.Pin = D3___IR_SENSOR4_Pin;
 800175a:	2308      	movs	r3, #8
 800175c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D3___IR_SENSOR4_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 030c 	add.w	r3, r7, #12
 800176a:	4619      	mov	r1, r3
 800176c:	480b      	ldr	r0, [pc, #44]	; (800179c <MX_GPIO_Init+0x10c>)
 800176e:	f002 f80d 	bl	800378c <HAL_GPIO_Init>

  /*Configure GPIO pins : D5___BUZZER_Pin D4___RELAIS_Pin */
  GPIO_InitStruct.Pin = D5___BUZZER_Pin|D4___RELAIS_Pin;
 8001772:	2330      	movs	r3, #48	; 0x30
 8001774:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	4619      	mov	r1, r3
 8001788:	4804      	ldr	r0, [pc, #16]	; (800179c <MX_GPIO_Init+0x10c>)
 800178a:	f001 ffff 	bl	800378c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800178e:	bf00      	nop
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	48000400 	.word	0x48000400
 80017a0:	48000800 	.word	0x48000800

080017a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f005 fe0b 	bl	80073c8 <osDelay>
 80017b2:	e7fb      	b.n	80017ac <StartDefaultTask+0x8>

080017b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b8:	b672      	cpsid	i
}
 80017ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017bc:	e7fe      	b.n	80017bc <Error_Handler+0x8>
	...

080017c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_MspInit+0x4c>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ca:	4a10      	ldr	r2, [pc, #64]	; (800180c <HAL_MspInit+0x4c>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6613      	str	r3, [r2, #96]	; 0x60
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_MspInit+0x4c>)
 80017d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_MspInit+0x4c>)
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <HAL_MspInit+0x4c>)
 80017e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_MspInit+0x4c>)
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017f6:	2200      	movs	r2, #0
 80017f8:	210f      	movs	r1, #15
 80017fa:	f06f 0001 	mvn.w	r0, #1
 80017fe:	f001 ff9c 	bl	800373a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40021000 	.word	0x40021000

08001810 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08c      	sub	sp, #48	; 0x30
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a33      	ldr	r2, [pc, #204]	; (80018fc <HAL_ADC_MspInit+0xec>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d12e      	bne.n	8001890 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001832:	4b33      	ldr	r3, [pc, #204]	; (8001900 <HAL_ADC_MspInit+0xf0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3301      	adds	r3, #1
 8001838:	4a31      	ldr	r2, [pc, #196]	; (8001900 <HAL_ADC_MspInit+0xf0>)
 800183a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800183c:	4b30      	ldr	r3, [pc, #192]	; (8001900 <HAL_ADC_MspInit+0xf0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d10b      	bne.n	800185c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001844:	4b2f      	ldr	r3, [pc, #188]	; (8001904 <HAL_ADC_MspInit+0xf4>)
 8001846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001848:	4a2e      	ldr	r2, [pc, #184]	; (8001904 <HAL_ADC_MspInit+0xf4>)
 800184a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800184e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001850:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <HAL_ADC_MspInit+0xf4>)
 8001852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001858:	61bb      	str	r3, [r7, #24]
 800185a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800185c:	4b29      	ldr	r3, [pc, #164]	; (8001904 <HAL_ADC_MspInit+0xf4>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001860:	4a28      	ldr	r2, [pc, #160]	; (8001904 <HAL_ADC_MspInit+0xf4>)
 8001862:	f043 0301 	orr.w	r3, r3, #1
 8001866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <HAL_ADC_MspInit+0xf4>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	f003 0301 	and.w	r3, r3, #1
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001874:	2303      	movs	r3, #3
 8001876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001878:	230b      	movs	r3, #11
 800187a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	4619      	mov	r1, r3
 8001886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188a:	f001 ff7f 	bl	800378c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800188e:	e031      	b.n	80018f4 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1c      	ldr	r2, [pc, #112]	; (8001908 <HAL_ADC_MspInit+0xf8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d12c      	bne.n	80018f4 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 800189a:	4b19      	ldr	r3, [pc, #100]	; (8001900 <HAL_ADC_MspInit+0xf0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	3301      	adds	r3, #1
 80018a0:	4a17      	ldr	r2, [pc, #92]	; (8001900 <HAL_ADC_MspInit+0xf0>)
 80018a2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80018a4:	4b16      	ldr	r3, [pc, #88]	; (8001900 <HAL_ADC_MspInit+0xf0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d10b      	bne.n	80018c4 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <HAL_ADC_MspInit+0xf4>)
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	4a14      	ldr	r2, [pc, #80]	; (8001904 <HAL_ADC_MspInit+0xf4>)
 80018b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <HAL_ADC_MspInit+0xf4>)
 80018ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_ADC_MspInit+0xf4>)
 80018c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c8:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <HAL_ADC_MspInit+0xf4>)
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_ADC_MspInit+0xf4>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	f003 0304 	and.w	r3, r3, #4
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018dc:	2303      	movs	r3, #3
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018e0:	230b      	movs	r3, #11
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	4619      	mov	r1, r3
 80018ee:	4807      	ldr	r0, [pc, #28]	; (800190c <HAL_ADC_MspInit+0xfc>)
 80018f0:	f001 ff4c 	bl	800378c <HAL_GPIO_Init>
}
 80018f4:	bf00      	nop
 80018f6:	3730      	adds	r7, #48	; 0x30
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	50040000 	.word	0x50040000
 8001900:	2000028c 	.word	0x2000028c
 8001904:	40021000 	.word	0x40021000
 8001908:	50040100 	.word	0x50040100
 800190c:	48000800 	.word	0x48000800

08001910 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <HAL_TIM_OC_MspInit+0x38>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d10b      	bne.n	800193a <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_TIM_OC_MspInit+0x3c>)
 8001924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001926:	4a09      	ldr	r2, [pc, #36]	; (800194c <HAL_TIM_OC_MspInit+0x3c>)
 8001928:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800192c:	6613      	str	r3, [r2, #96]	; 0x60
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_TIM_OC_MspInit+0x3c>)
 8001930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001932:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800193a:	bf00      	nop
 800193c:	3714      	adds	r7, #20
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40012c00 	.word	0x40012c00
 800194c:	40021000 	.word	0x40021000

08001950 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <HAL_TIM_Base_MspInit+0x38>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d10b      	bne.n	800197a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_TIM_Base_MspInit+0x3c>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	4a09      	ldr	r2, [pc, #36]	; (800198c <HAL_TIM_Base_MspInit+0x3c>)
 8001968:	f043 0302 	orr.w	r3, r3, #2
 800196c:	6593      	str	r3, [r2, #88]	; 0x58
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <HAL_TIM_Base_MspInit+0x3c>)
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800197a:	bf00      	nop
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	40000400 	.word	0x40000400
 800198c:	40021000 	.word	0x40021000

08001990 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <HAL_TIM_MspPostInit+0xac>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d11e      	bne.n	80019f0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b2:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <HAL_TIM_MspPostInit+0xb0>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	4a22      	ldr	r2, [pc, #136]	; (8001a40 <HAL_TIM_MspPostInit+0xb0>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <HAL_TIM_MspPostInit+0xb0>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d8:	2300      	movs	r3, #0
 80019da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019dc:	2301      	movs	r3, #1
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ea:	f001 fecf 	bl	800378c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019ee:	e021      	b.n	8001a34 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a13      	ldr	r2, [pc, #76]	; (8001a44 <HAL_TIM_MspPostInit+0xb4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d11c      	bne.n	8001a34 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <HAL_TIM_MspPostInit+0xb0>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	4a10      	ldr	r2, [pc, #64]	; (8001a40 <HAL_TIM_MspPostInit+0xb0>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <HAL_TIM_MspPostInit+0xb0>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a12:	2340      	movs	r3, #64	; 0x40
 8001a14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a22:	2302      	movs	r3, #2
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a30:	f001 feac 	bl	800378c <HAL_GPIO_Init>
}
 8001a34:	bf00      	nop
 8001a36:	3728      	adds	r7, #40	; 0x28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40012c00 	.word	0x40012c00
 8001a40:	40021000 	.word	0x40021000
 8001a44:	40000400 	.word	0x40000400

08001a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b0ac      	sub	sp, #176	; 0xb0
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	2288      	movs	r2, #136	; 0x88
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f008 ff04 	bl	800a876 <memset>
  if(huart->Instance==USART2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a21      	ldr	r2, [pc, #132]	; (8001af8 <HAL_UART_MspInit+0xb0>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d13b      	bne.n	8001af0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	4618      	mov	r0, r3
 8001a86:	f002 febf 	bl	8004808 <HAL_RCCEx_PeriphCLKConfig>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a90:	f7ff fe90 	bl	80017b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_UART_MspInit+0xb4>)
 8001a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a98:	4a18      	ldr	r2, [pc, #96]	; (8001afc <HAL_UART_MspInit+0xb4>)
 8001a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa0:	4b16      	ldr	r3, [pc, #88]	; (8001afc <HAL_UART_MspInit+0xb4>)
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <HAL_UART_MspInit+0xb4>)
 8001aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab0:	4a12      	ldr	r2, [pc, #72]	; (8001afc <HAL_UART_MspInit+0xb4>)
 8001ab2:	f043 0301 	orr.w	r3, r3, #1
 8001ab6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ab8:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_UART_MspInit+0xb4>)
 8001aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ac4:	230c      	movs	r3, #12
 8001ac6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aca:	2302      	movs	r3, #2
 8001acc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001adc:	2307      	movs	r3, #7
 8001ade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aec:	f001 fe4e 	bl	800378c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001af0:	bf00      	nop
 8001af2:	37b0      	adds	r7, #176	; 0xb0
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40004400 	.word	0x40004400
 8001afc:	40021000 	.word	0x40021000

08001b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b04:	e7fe      	b.n	8001b04 <NMI_Handler+0x4>

08001b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <HardFault_Handler+0x4>

08001b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <MemManage_Handler+0x4>

08001b12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b16:	e7fe      	b.n	8001b16 <BusFault_Handler+0x4>

08001b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <UsageFault_Handler+0x4>

08001b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b30:	f000 f966 	bl	8001e00 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b34:	f007 fb88 	bl	8009248 <xTaskGetSchedulerState>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d001      	beq.n	8001b42 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b3e:	f008 fa6b 	bl	800a018 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  return 1;
 8001b4a:	2301      	movs	r3, #1
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <_kill>:

int _kill(int pid, int sig)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b60:	f008 ff34 	bl	800a9cc <__errno>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2216      	movs	r2, #22
 8001b68:	601a      	str	r2, [r3, #0]
  return -1;
 8001b6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <_exit>:

void _exit (int status)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b7e:	f04f 31ff 	mov.w	r1, #4294967295
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffe7 	bl	8001b56 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b88:	e7fe      	b.n	8001b88 <_exit+0x12>

08001b8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b086      	sub	sp, #24
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	60f8      	str	r0, [r7, #12]
 8001b92:	60b9      	str	r1, [r7, #8]
 8001b94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
 8001b9a:	e00a      	b.n	8001bb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b9c:	f3af 8000 	nop.w
 8001ba0:	4601      	mov	r1, r0
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	1c5a      	adds	r2, r3, #1
 8001ba6:	60ba      	str	r2, [r7, #8]
 8001ba8:	b2ca      	uxtb	r2, r1
 8001baa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	dbf0      	blt.n	8001b9c <_read+0x12>
  }

  return len;
 8001bba:	687b      	ldr	r3, [r7, #4]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3718      	adds	r7, #24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
 8001bd4:	e009      	b.n	8001bea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	60ba      	str	r2, [r7, #8]
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	3301      	adds	r3, #1
 8001be8:	617b      	str	r3, [r7, #20]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	dbf1      	blt.n	8001bd6 <_write+0x12>
  }
  return len;
 8001bf2:	687b      	ldr	r3, [r7, #4]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <_close>:

int _close(int file)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c24:	605a      	str	r2, [r3, #4]
  return 0;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_isatty>:

int _isatty(int file)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c3c:	2301      	movs	r3, #1
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b085      	sub	sp, #20
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3714      	adds	r7, #20
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c6c:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <_sbrk+0x5c>)
 8001c6e:	4b15      	ldr	r3, [pc, #84]	; (8001cc4 <_sbrk+0x60>)
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <_sbrk+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <_sbrk+0x64>)
 8001c82:	4a12      	ldr	r2, [pc, #72]	; (8001ccc <_sbrk+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <_sbrk+0x64>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d207      	bcs.n	8001ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c94:	f008 fe9a 	bl	800a9cc <__errno>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	e009      	b.n	8001cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ca4:	4b08      	ldr	r3, [pc, #32]	; (8001cc8 <_sbrk+0x64>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001caa:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <_sbrk+0x64>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4a05      	ldr	r2, [pc, #20]	; (8001cc8 <_sbrk+0x64>)
 8001cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	20018000 	.word	0x20018000
 8001cc4:	00000400 	.word	0x00000400
 8001cc8:	20000290 	.word	0x20000290
 8001ccc:	20001cf0 	.word	0x20001cf0

08001cd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cd4:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <SystemInit+0x20>)
 8001cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cda:	4a05      	ldr	r2, [pc, #20]	; (8001cf0 <SystemInit+0x20>)
 8001cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cf8:	f7ff ffea 	bl	8001cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cfc:	480c      	ldr	r0, [pc, #48]	; (8001d30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cfe:	490d      	ldr	r1, [pc, #52]	; (8001d34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d00:	4a0d      	ldr	r2, [pc, #52]	; (8001d38 <LoopForever+0xe>)
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d04:	e002      	b.n	8001d0c <LoopCopyDataInit>

08001d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0a:	3304      	adds	r3, #4

08001d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d10:	d3f9      	bcc.n	8001d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d12:	4a0a      	ldr	r2, [pc, #40]	; (8001d3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d14:	4c0a      	ldr	r4, [pc, #40]	; (8001d40 <LoopForever+0x16>)
  movs r3, #0
 8001d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d18:	e001      	b.n	8001d1e <LoopFillZerobss>

08001d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d1c:	3204      	adds	r2, #4

08001d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d20:	d3fb      	bcc.n	8001d1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d22:	f008 fe59 	bl	800a9d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d26:	f7ff f9cf 	bl	80010c8 <main>

08001d2a <LoopForever>:

LoopForever:
    b LoopForever
 8001d2a:	e7fe      	b.n	8001d2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d34:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001d38:	0800bd1c 	.word	0x0800bd1c
  ldr r2, =_sbss
 8001d3c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001d40:	20001cec 	.word	0x20001cec

08001d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d44:	e7fe      	b.n	8001d44 <ADC1_2_IRQHandler>
	...

08001d48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <HAL_Init+0x3c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <HAL_Init+0x3c>)
 8001d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d5e:	2003      	movs	r0, #3
 8001d60:	f001 fce0 	bl	8003724 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d64:	200f      	movs	r0, #15
 8001d66:	f000 f80f 	bl	8001d88 <HAL_InitTick>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	71fb      	strb	r3, [r7, #7]
 8001d74:	e001      	b.n	8001d7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d76:	f7ff fd23 	bl	80017c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	40022000 	.word	0x40022000

08001d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <HAL_InitTick+0x6c>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d023      	beq.n	8001de4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d9c:	4b16      	ldr	r3, [pc, #88]	; (8001df8 <HAL_InitTick+0x70>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <HAL_InitTick+0x6c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 fcdd 	bl	8003772 <HAL_SYSTICK_Config>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10f      	bne.n	8001dde <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d809      	bhi.n	8001dd8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f001 fcb5 	bl	800373a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <HAL_InitTick+0x74>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e007      	b.n	8001de8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	73fb      	strb	r3, [r7, #15]
 8001ddc:	e004      	b.n	8001de8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	73fb      	strb	r3, [r7, #15]
 8001de2:	e001      	b.n	8001de8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000008 	.word	0x20000008
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000004 	.word	0x20000004

08001e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_IncTick+0x20>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x24>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <HAL_IncTick+0x24>)
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000008 	.word	0x20000008
 8001e24:	20000294 	.word	0x20000294

08001e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_GetTick+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000294 	.word	0x20000294

08001e40 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	431a      	orrs	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	609a      	str	r2, [r3, #8]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
 8001eb4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3360      	adds	r3, #96	; 0x60
 8001eba:	461a      	mov	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <LL_ADC_SetOffset+0x44>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ee0:	bf00      	nop
 8001ee2:	371c      	adds	r7, #28
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	03fff000 	.word	0x03fff000

08001ef0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3360      	adds	r3, #96	; 0x60
 8001efe:	461a      	mov	r2, r3
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	3360      	adds	r3, #96	; 0x60
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f46:	bf00      	nop
 8001f48:	371c      	adds	r7, #28
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f66:	2301      	movs	r3, #1
 8001f68:	e000      	b.n	8001f6c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	3330      	adds	r3, #48	; 0x30
 8001f88:	461a      	mov	r2, r3
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	0a1b      	lsrs	r3, r3, #8
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	4413      	add	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	f003 031f 	and.w	r3, r3, #31
 8001fa2:	211f      	movs	r1, #31
 8001fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	401a      	ands	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	f003 011f 	and.w	r1, r3, #31
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f003 031f 	and.w	r3, r3, #31
 8001fba:	fa01 f303 	lsl.w	r3, r1, r3
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001fc4:	bf00      	nop
 8001fc6:	371c      	adds	r7, #28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b087      	sub	sp, #28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3314      	adds	r3, #20
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	0e5b      	lsrs	r3, r3, #25
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	f003 0304 	and.w	r3, r3, #4
 8001fec:	4413      	add	r3, r2
 8001fee:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	0d1b      	lsrs	r3, r3, #20
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	2107      	movs	r1, #7
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	401a      	ands	r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	0d1b      	lsrs	r3, r3, #20
 800200a:	f003 031f 	and.w	r3, r3, #31
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	fa01 f303 	lsl.w	r3, r1, r3
 8002014:	431a      	orrs	r2, r3
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800201a:	bf00      	nop
 800201c:	371c      	adds	r7, #28
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	60b9      	str	r1, [r7, #8]
 8002032:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002040:	43db      	mvns	r3, r3
 8002042:	401a      	ands	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f003 0318 	and.w	r3, r3, #24
 800204a:	4908      	ldr	r1, [pc, #32]	; (800206c <LL_ADC_SetChannelSingleDiff+0x44>)
 800204c:	40d9      	lsrs	r1, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	400b      	ands	r3, r1
 8002052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002056:	431a      	orrs	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800205e:	bf00      	nop
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	0007ffff 	.word	0x0007ffff

08002070 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 031f 	and.w	r3, r3, #31
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80020b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6093      	str	r3, [r2, #8]
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020e0:	d101      	bne.n	80020e6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80020e2:	2301      	movs	r3, #1
 80020e4:	e000      	b.n	80020e8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	370c      	adds	r7, #12
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr

080020f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002104:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002108:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002110:	bf00      	nop
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002130:	d101      	bne.n	8002136 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002154:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002158:	f043 0201 	orr.w	r2, r3, #1
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002160:	bf00      	nop
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800217c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002180:	f043 0202 	orr.w	r2, r3, #2
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d101      	bne.n	80021ac <LL_ADC_IsEnabled+0x18>
 80021a8:	2301      	movs	r3, #1
 80021aa:	e000      	b.n	80021ae <LL_ADC_IsEnabled+0x1a>
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d101      	bne.n	80021d2 <LL_ADC_IsDisableOngoing+0x18>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <LL_ADC_IsDisableOngoing+0x1a>
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021f4:	f043 0204 	orr.w	r2, r3, #4
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021fc:	bf00      	nop
 80021fe:	370c      	adds	r7, #12
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002218:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800221c:	f043 0210 	orr.w	r2, r3, #16
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b04      	cmp	r3, #4
 8002242:	d101      	bne.n	8002248 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002266:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800226a:	f043 0220 	orr.w	r2, r3, #32
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b08      	cmp	r3, #8
 8002290:	d101      	bne.n	8002296 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80022a4:	b590      	push	{r4, r7, lr}
 80022a6:	b089      	sub	sp, #36	; 0x24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e130      	b.n	8002520 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	f7ff fa9f 	bl	8001810 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff fef1 	bl	80020cc <LL_ADC_IsDeepPowerDownEnabled>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d004      	beq.n	80022fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff fed7 	bl	80020a8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ff0c 	bl	800211c <LL_ADC_IsInternalRegulatorEnabled>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d115      	bne.n	8002336 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fef0 	bl	80020f4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002314:	4b84      	ldr	r3, [pc, #528]	; (8002528 <HAL_ADC_Init+0x284>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	099b      	lsrs	r3, r3, #6
 800231a:	4a84      	ldr	r2, [pc, #528]	; (800252c <HAL_ADC_Init+0x288>)
 800231c:	fba2 2303 	umull	r2, r3, r2, r3
 8002320:	099b      	lsrs	r3, r3, #6
 8002322:	3301      	adds	r3, #1
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002328:	e002      	b.n	8002330 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	3b01      	subs	r3, #1
 800232e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f9      	bne.n	800232a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff feee 	bl	800211c <LL_ADC_IsInternalRegulatorEnabled>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10d      	bne.n	8002362 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234a:	f043 0210 	orr.w	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff ff62 	bl	8002230 <LL_ADC_REG_IsConversionOngoing>
 800236c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	f040 80c9 	bne.w	800250e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 80c5 	bne.w	800250e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002388:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800238c:	f043 0202 	orr.w	r2, r3, #2
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fefb 	bl	8002194 <LL_ADC_IsEnabled>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d115      	bne.n	80023d0 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023a4:	4862      	ldr	r0, [pc, #392]	; (8002530 <HAL_ADC_Init+0x28c>)
 80023a6:	f7ff fef5 	bl	8002194 <LL_ADC_IsEnabled>
 80023aa:	4604      	mov	r4, r0
 80023ac:	4861      	ldr	r0, [pc, #388]	; (8002534 <HAL_ADC_Init+0x290>)
 80023ae:	f7ff fef1 	bl	8002194 <LL_ADC_IsEnabled>
 80023b2:	4603      	mov	r3, r0
 80023b4:	431c      	orrs	r4, r3
 80023b6:	4860      	ldr	r0, [pc, #384]	; (8002538 <HAL_ADC_Init+0x294>)
 80023b8:	f7ff feec 	bl	8002194 <LL_ADC_IsEnabled>
 80023bc:	4603      	mov	r3, r0
 80023be:	4323      	orrs	r3, r4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4619      	mov	r1, r3
 80023ca:	485c      	ldr	r0, [pc, #368]	; (800253c <HAL_ADC_Init+0x298>)
 80023cc:	f7ff fd38 	bl	8001e40 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7e5b      	ldrb	r3, [r3, #25]
 80023d4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023da:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80023e0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80023e6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ee:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d106      	bne.n	800240c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	3b01      	subs	r3, #1
 8002404:	045b      	lsls	r3, r3, #17
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	2b00      	cmp	r3, #0
 8002412:	d009      	beq.n	8002428 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002418:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	4b44      	ldr	r3, [pc, #272]	; (8002540 <HAL_ADC_Init+0x29c>)
 8002430:	4013      	ands	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	69b9      	ldr	r1, [r7, #24]
 8002438:	430b      	orrs	r3, r1
 800243a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4618      	mov	r0, r3
 8002442:	f7ff ff1c 	bl	800227e <LL_ADC_INJ_IsConversionOngoing>
 8002446:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d13d      	bne.n	80024ca <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d13a      	bne.n	80024ca <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002458:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002460:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002470:	f023 0302 	bic.w	r3, r3, #2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	69b9      	ldr	r1, [r7, #24]
 800247a:	430b      	orrs	r3, r1
 800247c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002484:	2b01      	cmp	r3, #1
 8002486:	d118      	bne.n	80024ba <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002492:	f023 0304 	bic.w	r3, r3, #4
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800249e:	4311      	orrs	r1, r2
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80024a4:	4311      	orrs	r1, r2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80024aa:	430a      	orrs	r2, r1
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	611a      	str	r2, [r3, #16]
 80024b8:	e007      	b.n	80024ca <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0201 	bic.w	r2, r2, #1
 80024c8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d10c      	bne.n	80024ec <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f023 010f 	bic.w	r1, r3, #15
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	1e5a      	subs	r2, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	631a      	str	r2, [r3, #48]	; 0x30
 80024ea:	e007      	b.n	80024fc <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 020f 	bic.w	r2, r2, #15
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002500:	f023 0303 	bic.w	r3, r3, #3
 8002504:	f043 0201 	orr.w	r2, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	655a      	str	r2, [r3, #84]	; 0x54
 800250c:	e007      	b.n	800251e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f043 0210 	orr.w	r2, r3, #16
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800251e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3724      	adds	r7, #36	; 0x24
 8002524:	46bd      	mov	sp, r7
 8002526:	bd90      	pop	{r4, r7, pc}
 8002528:	20000000 	.word	0x20000000
 800252c:	053e2d63 	.word	0x053e2d63
 8002530:	50040000 	.word	0x50040000
 8002534:	50040100 	.word	0x50040100
 8002538:	50040200 	.word	0x50040200
 800253c:	50040300 	.word	0x50040300
 8002540:	fff0c007 	.word	0xfff0c007

08002544 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800254c:	4857      	ldr	r0, [pc, #348]	; (80026ac <HAL_ADC_Start+0x168>)
 800254e:	f7ff fd8f 	bl	8002070 <LL_ADC_GetMultimode>
 8002552:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff fe69 	bl	8002230 <LL_ADC_REG_IsConversionOngoing>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	f040 809c 	bne.w	800269e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800256c:	2b01      	cmp	r3, #1
 800256e:	d101      	bne.n	8002574 <HAL_ADC_Start+0x30>
 8002570:	2302      	movs	r3, #2
 8002572:	e097      	b.n	80026a4 <HAL_ADC_Start+0x160>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 fe63 	bl	8003248 <ADC_Enable>
 8002582:	4603      	mov	r3, r0
 8002584:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002586:	7dfb      	ldrb	r3, [r7, #23]
 8002588:	2b00      	cmp	r3, #0
 800258a:	f040 8083 	bne.w	8002694 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002596:	f023 0301 	bic.w	r3, r3, #1
 800259a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a42      	ldr	r2, [pc, #264]	; (80026b0 <HAL_ADC_Start+0x16c>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d002      	beq.n	80025b2 <HAL_ADC_Start+0x6e>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	e000      	b.n	80025b4 <HAL_ADC_Start+0x70>
 80025b2:	4b40      	ldr	r3, [pc, #256]	; (80026b4 <HAL_ADC_Start+0x170>)
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d002      	beq.n	80025c2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d105      	bne.n	80025ce <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025da:	d106      	bne.n	80025ea <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	f023 0206 	bic.w	r2, r3, #6
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	659a      	str	r2, [r3, #88]	; 0x58
 80025e8:	e002      	b.n	80025f0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	221c      	movs	r2, #28
 80025f6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a2a      	ldr	r2, [pc, #168]	; (80026b0 <HAL_ADC_Start+0x16c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d002      	beq.n	8002610 <HAL_ADC_Start+0xcc>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	e000      	b.n	8002612 <HAL_ADC_Start+0xce>
 8002610:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <HAL_ADC_Start+0x170>)
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6812      	ldr	r2, [r2, #0]
 8002616:	4293      	cmp	r3, r2
 8002618:	d008      	beq.n	800262c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	2b05      	cmp	r3, #5
 8002624:	d002      	beq.n	800262c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	2b09      	cmp	r3, #9
 800262a:	d114      	bne.n	8002656 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d007      	beq.n	800264a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002642:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff fdc6 	bl	80021e0 <LL_ADC_REG_StartConversion>
 8002654:	e025      	b.n	80026a2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <HAL_ADC_Start+0x16c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d002      	beq.n	8002672 <HAL_ADC_Start+0x12e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	e000      	b.n	8002674 <HAL_ADC_Start+0x130>
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_ADC_Start+0x170>)
 8002674:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00f      	beq.n	80026a2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002686:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800268a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	655a      	str	r2, [r3, #84]	; 0x54
 8002692:	e006      	b.n	80026a2 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800269c:	e001      	b.n	80026a2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800269e:	2302      	movs	r3, #2
 80026a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80026a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	50040300 	.word	0x50040300
 80026b0:	50040100 	.word	0x50040100
 80026b4:	50040000 	.word	0x50040000

080026b8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d101      	bne.n	80026ce <HAL_ADC_Stop+0x16>
 80026ca:	2302      	movs	r3, #2
 80026cc:	e023      	b.n	8002716 <HAL_ADC_Stop+0x5e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80026d6:	2103      	movs	r1, #3
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f000 fcf9 	bl	80030d0 <ADC_ConversionStop>
 80026de:	4603      	mov	r3, r0
 80026e0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d111      	bne.n	800270c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fe33 	bl	8003354 <ADC_Disable>
 80026ee:	4603      	mov	r3, r0
 80026f0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80026f2:	7bfb      	ldrb	r3, [r7, #15]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d109      	bne.n	800270c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	f043 0201 	orr.w	r2, r3, #1
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002714:	7bfb      	ldrb	r3, [r7, #15]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b088      	sub	sp, #32
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800272a:	4866      	ldr	r0, [pc, #408]	; (80028c4 <HAL_ADC_PollForConversion+0x1a4>)
 800272c:	f7ff fca0 	bl	8002070 <LL_ADC_GetMultimode>
 8002730:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	2b08      	cmp	r3, #8
 8002738:	d102      	bne.n	8002740 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800273a:	2308      	movs	r3, #8
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	e02a      	b.n	8002796 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d005      	beq.n	8002752 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b05      	cmp	r3, #5
 800274a:	d002      	beq.n	8002752 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b09      	cmp	r3, #9
 8002750:	d111      	bne.n	8002776 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b00      	cmp	r3, #0
 800275e:	d007      	beq.n	8002770 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e0a4      	b.n	80028ba <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002770:	2304      	movs	r3, #4
 8002772:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002774:	e00f      	b.n	8002796 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002776:	4853      	ldr	r0, [pc, #332]	; (80028c4 <HAL_ADC_PollForConversion+0x1a4>)
 8002778:	f7ff fc88 	bl	800208c <LL_ADC_GetMultiDMATransfer>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f043 0220 	orr.w	r2, r3, #32
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e093      	b.n	80028ba <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002792:	2304      	movs	r3, #4
 8002794:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002796:	f7ff fb47 	bl	8001e28 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800279c:	e021      	b.n	80027e2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a4:	d01d      	beq.n	80027e2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80027a6:	f7ff fb3f 	bl	8001e28 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d302      	bcc.n	80027bc <HAL_ADC_PollForConversion+0x9c>
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d112      	bne.n	80027e2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10b      	bne.n	80027e2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ce:	f043 0204 	orr.w	r2, r3, #4
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e06b      	b.n	80028ba <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0d6      	beq.n	800279e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fba6 	bl	8001f52 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d01c      	beq.n	8002846 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	7e5b      	ldrb	r3, [r3, #25]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d118      	bne.n	8002846 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b08      	cmp	r3, #8
 8002820:	d111      	bne.n	8002846 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002826:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002832:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d105      	bne.n	8002846 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283e:	f043 0201 	orr.w	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <HAL_ADC_PollForConversion+0x1a8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d002      	beq.n	8002856 <HAL_ADC_PollForConversion+0x136>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	e000      	b.n	8002858 <HAL_ADC_PollForConversion+0x138>
 8002856:	4b1d      	ldr	r3, [pc, #116]	; (80028cc <HAL_ADC_PollForConversion+0x1ac>)
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	4293      	cmp	r3, r2
 800285e:	d008      	beq.n	8002872 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b05      	cmp	r3, #5
 800286a:	d002      	beq.n	8002872 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b09      	cmp	r3, #9
 8002870:	d104      	bne.n	800287c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	e00c      	b.n	8002896 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a11      	ldr	r2, [pc, #68]	; (80028c8 <HAL_ADC_PollForConversion+0x1a8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d002      	beq.n	800288c <HAL_ADC_PollForConversion+0x16c>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	e000      	b.n	800288e <HAL_ADC_PollForConversion+0x16e>
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <HAL_ADC_PollForConversion+0x1ac>)
 800288e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	2b08      	cmp	r3, #8
 800289a:	d104      	bne.n	80028a6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2208      	movs	r2, #8
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	e008      	b.n	80028b8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d103      	bne.n	80028b8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	220c      	movs	r2, #12
 80028b6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3720      	adds	r7, #32
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	50040300 	.word	0x50040300
 80028c8:	50040100 	.word	0x50040100
 80028cc:	50040000 	.word	0x50040000

080028d0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80028de:	4618      	mov	r0, r3
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
	...

080028ec <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b0b6      	sub	sp, #216	; 0xd8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_ADC_ConfigChannel+0x22>
 800290a:	2302      	movs	r3, #2
 800290c:	e3c9      	b.n	80030a2 <HAL_ADC_ConfigChannel+0x7b6>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fc88 	bl	8002230 <LL_ADC_REG_IsConversionOngoing>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 83aa 	bne.w	800307c <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b05      	cmp	r3, #5
 8002936:	d824      	bhi.n	8002982 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	3b02      	subs	r3, #2
 800293e:	2b03      	cmp	r3, #3
 8002940:	d81b      	bhi.n	800297a <HAL_ADC_ConfigChannel+0x8e>
 8002942:	a201      	add	r2, pc, #4	; (adr r2, 8002948 <HAL_ADC_ConfigChannel+0x5c>)
 8002944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002948:	08002959 	.word	0x08002959
 800294c:	08002961 	.word	0x08002961
 8002950:	08002969 	.word	0x08002969
 8002954:	08002971 	.word	0x08002971
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002958:	230c      	movs	r3, #12
 800295a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800295e:	e010      	b.n	8002982 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002960:	2312      	movs	r3, #18
 8002962:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002966:	e00c      	b.n	8002982 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002968:	2318      	movs	r3, #24
 800296a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800296e:	e008      	b.n	8002982 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002970:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002978:	e003      	b.n	8002982 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800297a:	2306      	movs	r3, #6
 800297c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002980:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002990:	f7ff faf2 	bl	8001f78 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fc49 	bl	8002230 <LL_ADC_REG_IsConversionOngoing>
 800299e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7ff fc69 	bl	800227e <LL_ADC_INJ_IsConversionOngoing>
 80029ac:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f040 81a4 	bne.w	8002d02 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f040 819f 	bne.w	8002d02 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6819      	ldr	r1, [r3, #0]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	461a      	mov	r2, r3
 80029d2:	f7ff fafd 	bl	8001fd0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	08db      	lsrs	r3, r3, #3
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d00a      	beq.n	8002a0e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6818      	ldr	r0, [r3, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	6919      	ldr	r1, [r3, #16]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a08:	f7ff fa4e 	bl	8001ea8 <LL_ADC_SetOffset>
 8002a0c:	e179      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fa6b 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10a      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x14e>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fa60 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002a30:	4603      	mov	r3, r0
 8002a32:	0e9b      	lsrs	r3, r3, #26
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	e01e      	b.n	8002a78 <HAL_ADC_ConfigChannel+0x18c>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2100      	movs	r1, #0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fa55 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a50:	fa93 f3a3 	rbit	r3, r3
 8002a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a5c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002a68:	2320      	movs	r3, #32
 8002a6a:	e004      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002a6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a70:	fab3 f383 	clz	r3, r3
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d105      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x1a4>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	0e9b      	lsrs	r3, r3, #26
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	e018      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x1d6>
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002aa4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002aac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002ab4:	2320      	movs	r3, #32
 8002ab6:	e004      	b.n	8002ac2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002ab8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002abc:	fab3 f383 	clz	r3, r3
 8002ac0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d106      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2200      	movs	r2, #0
 8002acc:	2100      	movs	r1, #0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff fa24 	bl	8001f1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff fa08 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <HAL_ADC_ConfigChannel+0x214>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2101      	movs	r1, #1
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff f9fd 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002af6:	4603      	mov	r3, r0
 8002af8:	0e9b      	lsrs	r3, r3, #26
 8002afa:	f003 021f 	and.w	r2, r3, #31
 8002afe:	e01e      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x252>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2101      	movs	r1, #1
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7ff f9f2 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002b1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002b2e:	2320      	movs	r3, #32
 8002b30:	e004      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002b32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002b36:	fab3 f383 	clz	r3, r3
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d105      	bne.n	8002b56 <HAL_ADC_ConfigChannel+0x26a>
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	0e9b      	lsrs	r3, r3, #26
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	e018      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x29c>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b62:	fa93 f3a3 	rbit	r3, r3
 8002b66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002b6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002b72:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	e004      	b.n	8002b88 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002b7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d106      	bne.n	8002b9a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2200      	movs	r2, #0
 8002b92:	2101      	movs	r1, #1
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff f9c1 	bl	8001f1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff f9a5 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x2da>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2102      	movs	r1, #2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff f99a 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	0e9b      	lsrs	r3, r3, #26
 8002bc0:	f003 021f 	and.w	r2, r3, #31
 8002bc4:	e01e      	b.n	8002c04 <HAL_ADC_ConfigChannel+0x318>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2102      	movs	r1, #2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff f98f 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bdc:	fa93 f3a3 	rbit	r3, r3
 8002be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002be4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002be8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002bf4:	2320      	movs	r3, #32
 8002bf6:	e004      	b.n	8002c02 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002bf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bfc:	fab3 f383 	clz	r3, r3
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d105      	bne.n	8002c1c <HAL_ADC_ConfigChannel+0x330>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	0e9b      	lsrs	r3, r3, #26
 8002c16:	f003 031f 	and.w	r3, r3, #31
 8002c1a:	e014      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x35a>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c24:	fa93 f3a3 	rbit	r3, r3
 8002c28:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002c30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d101      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002c38:	2320      	movs	r3, #32
 8002c3a:	e004      	b.n	8002c46 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002c3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c40:	fab3 f383 	clz	r3, r3
 8002c44:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d106      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2102      	movs	r1, #2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff f962 	bl	8001f1c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2103      	movs	r1, #3
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff f946 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d10a      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x398>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	2103      	movs	r1, #3
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff f93b 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	0e9b      	lsrs	r3, r3, #26
 8002c7e:	f003 021f 	and.w	r2, r3, #31
 8002c82:	e017      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x3c8>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2103      	movs	r1, #3
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff f930 	bl	8001ef0 <LL_ADC_GetOffsetChannel>
 8002c90:	4603      	mov	r3, r0
 8002c92:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c9e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002ca0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	e003      	b.n	8002cb2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cac:	fab3 f383 	clz	r3, r3
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d105      	bne.n	8002ccc <HAL_ADC_ConfigChannel+0x3e0>
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	0e9b      	lsrs	r3, r3, #26
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	e011      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x404>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cd4:	fa93 f3a3 	rbit	r3, r3
 8002cd8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002cda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002cdc:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002cde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	e003      	b.n	8002cf0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002ce8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002cea:	fab3 f383 	clz	r3, r3
 8002cee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d106      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2103      	movs	r1, #3
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff f90d 	bl	8001f1c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7ff fa44 	bl	8002194 <LL_ADC_IsEnabled>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f040 8140 	bne.w	8002f94 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	6819      	ldr	r1, [r3, #0]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	68db      	ldr	r3, [r3, #12]
 8002d20:	461a      	mov	r2, r3
 8002d22:	f7ff f981 	bl	8002028 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	4a8f      	ldr	r2, [pc, #572]	; (8002f68 <HAL_ADC_ConfigChannel+0x67c>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	f040 8131 	bne.w	8002f94 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10b      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x46e>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	0e9b      	lsrs	r3, r3, #26
 8002d48:	3301      	adds	r3, #1
 8002d4a:	f003 031f 	and.w	r3, r3, #31
 8002d4e:	2b09      	cmp	r3, #9
 8002d50:	bf94      	ite	ls
 8002d52:	2301      	movls	r3, #1
 8002d54:	2300      	movhi	r3, #0
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	e019      	b.n	8002d8e <HAL_ADC_ConfigChannel+0x4a2>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d62:	fa93 f3a3 	rbit	r3, r3
 8002d66:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002d72:	2320      	movs	r3, #32
 8002d74:	e003      	b.n	8002d7e <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d78:	fab3 f383 	clz	r3, r3
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	3301      	adds	r3, #1
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	2b09      	cmp	r3, #9
 8002d86:	bf94      	ite	ls
 8002d88:	2301      	movls	r3, #1
 8002d8a:	2300      	movhi	r3, #0
 8002d8c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d079      	beq.n	8002e86 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d107      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x4c2>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	0e9b      	lsrs	r3, r3, #26
 8002da4:	3301      	adds	r3, #1
 8002da6:	069b      	lsls	r3, r3, #26
 8002da8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dac:	e015      	b.n	8002dda <HAL_ADC_ConfigChannel+0x4ee>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dbe:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002dc6:	2320      	movs	r3, #32
 8002dc8:	e003      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dcc:	fab3 f383 	clz	r3, r3
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	069b      	lsls	r3, r3, #26
 8002dd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x50e>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	0e9b      	lsrs	r3, r3, #26
 8002dec:	3301      	adds	r3, #1
 8002dee:	f003 031f 	and.w	r3, r3, #31
 8002df2:	2101      	movs	r1, #1
 8002df4:	fa01 f303 	lsl.w	r3, r1, r3
 8002df8:	e017      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x53e>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002e12:	2320      	movs	r3, #32
 8002e14:	e003      	b.n	8002e1e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e18:	fab3 f383 	clz	r3, r3
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f003 031f 	and.w	r3, r3, #31
 8002e24:	2101      	movs	r1, #1
 8002e26:	fa01 f303 	lsl.w	r3, r1, r3
 8002e2a:	ea42 0103 	orr.w	r1, r2, r3
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10a      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x564>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	0e9b      	lsrs	r3, r3, #26
 8002e40:	3301      	adds	r3, #1
 8002e42:	f003 021f 	and.w	r2, r3, #31
 8002e46:	4613      	mov	r3, r2
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4413      	add	r3, r2
 8002e4c:	051b      	lsls	r3, r3, #20
 8002e4e:	e018      	b.n	8002e82 <HAL_ADC_ConfigChannel+0x596>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e58:	fa93 f3a3 	rbit	r3, r3
 8002e5c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e60:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002e68:	2320      	movs	r3, #32
 8002e6a:	e003      	b.n	8002e74 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e6e:	fab3 f383 	clz	r3, r3
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	3301      	adds	r3, #1
 8002e76:	f003 021f 	and.w	r2, r3, #31
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	4413      	add	r3, r2
 8002e80:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e82:	430b      	orrs	r3, r1
 8002e84:	e081      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d107      	bne.n	8002ea2 <HAL_ADC_ConfigChannel+0x5b6>
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	0e9b      	lsrs	r3, r3, #26
 8002e98:	3301      	adds	r3, #1
 8002e9a:	069b      	lsls	r3, r3, #26
 8002e9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ea0:	e015      	b.n	8002ece <HAL_ADC_ConfigChannel+0x5e2>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	fa93 f3a3 	rbit	r3, r3
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002eba:	2320      	movs	r3, #32
 8002ebc:	e003      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec0:	fab3 f383 	clz	r3, r3
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	069b      	lsls	r3, r3, #26
 8002eca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d109      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x602>
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	0e9b      	lsrs	r3, r3, #26
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	f003 031f 	and.w	r3, r3, #31
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8002eec:	e017      	b.n	8002f1e <HAL_ADC_ConfigChannel+0x632>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	fa93 f3a3 	rbit	r3, r3
 8002efa:	61bb      	str	r3, [r7, #24]
  return result;
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002f06:	2320      	movs	r3, #32
 8002f08:	e003      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	fab3 f383 	clz	r3, r3
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	2101      	movs	r1, #1
 8002f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1e:	ea42 0103 	orr.w	r1, r2, r3
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10d      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x65e>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	0e9b      	lsrs	r3, r3, #26
 8002f34:	3301      	adds	r3, #1
 8002f36:	f003 021f 	and.w	r2, r3, #31
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4413      	add	r3, r2
 8002f40:	3b1e      	subs	r3, #30
 8002f42:	051b      	lsls	r3, r3, #20
 8002f44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f48:	e01e      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x69c>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	fa93 f3a3 	rbit	r3, r3
 8002f56:	60fb      	str	r3, [r7, #12]
  return result;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d104      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002f62:	2320      	movs	r3, #32
 8002f64:	e006      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x688>
 8002f66:	bf00      	nop
 8002f68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	fab3 f383 	clz	r3, r3
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	3301      	adds	r3, #1
 8002f76:	f003 021f 	and.w	r2, r3, #31
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4413      	add	r3, r2
 8002f80:	3b1e      	subs	r3, #30
 8002f82:	051b      	lsls	r3, r3, #20
 8002f84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f88:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7ff f81e 	bl	8001fd0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	4b44      	ldr	r3, [pc, #272]	; (80030ac <HAL_ADC_ConfigChannel+0x7c0>)
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d07a      	beq.n	8003096 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fa0:	4843      	ldr	r0, [pc, #268]	; (80030b0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002fa2:	f7fe ff73 	bl	8001e8c <LL_ADC_GetCommonPathInternalCh>
 8002fa6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a41      	ldr	r2, [pc, #260]	; (80030b4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d12c      	bne.n	800300e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002fb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d126      	bne.n	800300e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a3c      	ldr	r2, [pc, #240]	; (80030b8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d004      	beq.n	8002fd4 <HAL_ADC_ConfigChannel+0x6e8>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a3b      	ldr	r2, [pc, #236]	; (80030bc <HAL_ADC_ConfigChannel+0x7d0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d15d      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fd8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fdc:	4619      	mov	r1, r3
 8002fde:	4834      	ldr	r0, [pc, #208]	; (80030b0 <HAL_ADC_ConfigChannel+0x7c4>)
 8002fe0:	f7fe ff41 	bl	8001e66 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fe4:	4b36      	ldr	r3, [pc, #216]	; (80030c0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	4a36      	ldr	r2, [pc, #216]	; (80030c4 <HAL_ADC_ConfigChannel+0x7d8>)
 8002fec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff0:	099b      	lsrs	r3, r3, #6
 8002ff2:	1c5a      	adds	r2, r3, #1
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	4413      	add	r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002ffe:	e002      	b.n	8003006 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	3b01      	subs	r3, #1
 8003004:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1f9      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800300c:	e040      	b.n	8003090 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a2d      	ldr	r2, [pc, #180]	; (80030c8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d118      	bne.n	800304a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003018:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800301c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d112      	bne.n	800304a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a23      	ldr	r2, [pc, #140]	; (80030b8 <HAL_ADC_ConfigChannel+0x7cc>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d004      	beq.n	8003038 <HAL_ADC_ConfigChannel+0x74c>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a22      	ldr	r2, [pc, #136]	; (80030bc <HAL_ADC_ConfigChannel+0x7d0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d12d      	bne.n	8003094 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003038:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800303c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003040:	4619      	mov	r1, r3
 8003042:	481b      	ldr	r0, [pc, #108]	; (80030b0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003044:	f7fe ff0f 	bl	8001e66 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003048:	e024      	b.n	8003094 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a1f      	ldr	r2, [pc, #124]	; (80030cc <HAL_ADC_ConfigChannel+0x7e0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d120      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003054:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d11a      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d115      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800306a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800306e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003072:	4619      	mov	r1, r3
 8003074:	480e      	ldr	r0, [pc, #56]	; (80030b0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003076:	f7fe fef6 	bl	8001e66 <LL_ADC_SetCommonPathInternalCh>
 800307a:	e00c      	b.n	8003096 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003080:	f043 0220 	orr.w	r2, r3, #32
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800308e:	e002      	b.n	8003096 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003090:	bf00      	nop
 8003092:	e000      	b.n	8003096 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003094:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800309e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	37d8      	adds	r7, #216	; 0xd8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	80080000 	.word	0x80080000
 80030b0:	50040300 	.word	0x50040300
 80030b4:	c7520000 	.word	0xc7520000
 80030b8:	50040000 	.word	0x50040000
 80030bc:	50040200 	.word	0x50040200
 80030c0:	20000000 	.word	0x20000000
 80030c4:	053e2d63 	.word	0x053e2d63
 80030c8:	cb840000 	.word	0xcb840000
 80030cc:	80000001 	.word	0x80000001

080030d0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80030da:	2300      	movs	r3, #0
 80030dc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff f8a2 	bl	8002230 <LL_ADC_REG_IsConversionOngoing>
 80030ec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff f8c3 	bl	800227e <LL_ADC_INJ_IsConversionOngoing>
 80030f8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d103      	bne.n	8003108 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 8098 	beq.w	8003238 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d02a      	beq.n	800316c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7e5b      	ldrb	r3, [r3, #25]
 800311a:	2b01      	cmp	r3, #1
 800311c:	d126      	bne.n	800316c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	7e1b      	ldrb	r3, [r3, #24]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d122      	bne.n	800316c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003126:	2301      	movs	r3, #1
 8003128:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800312a:	e014      	b.n	8003156 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	4a45      	ldr	r2, [pc, #276]	; (8003244 <ADC_ConversionStop+0x174>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d90d      	bls.n	8003150 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003138:	f043 0210 	orr.w	r2, r3, #16
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	f043 0201 	orr.w	r2, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e074      	b.n	800323a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	3301      	adds	r3, #1
 8003154:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d1e3      	bne.n	800312c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2240      	movs	r2, #64	; 0x40
 800316a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d014      	beq.n	800319c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff f85a 	bl	8002230 <LL_ADC_REG_IsConversionOngoing>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00c      	beq.n	800319c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff f817 	bl	80021ba <LL_ADC_IsDisableOngoing>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d104      	bne.n	800319c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff f836 	bl	8002208 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d014      	beq.n	80031cc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff f869 	bl	800227e <LL_ADC_INJ_IsConversionOngoing>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00c      	beq.n	80031cc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe ffff 	bl	80021ba <LL_ADC_IsDisableOngoing>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d104      	bne.n	80031cc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff f845 	bl	8002256 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d005      	beq.n	80031de <ADC_ConversionStop+0x10e>
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b03      	cmp	r3, #3
 80031d6:	d105      	bne.n	80031e4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80031d8:	230c      	movs	r3, #12
 80031da:	617b      	str	r3, [r7, #20]
        break;
 80031dc:	e005      	b.n	80031ea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80031de:	2308      	movs	r3, #8
 80031e0:	617b      	str	r3, [r7, #20]
        break;
 80031e2:	e002      	b.n	80031ea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80031e4:	2304      	movs	r3, #4
 80031e6:	617b      	str	r3, [r7, #20]
        break;
 80031e8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80031ea:	f7fe fe1d 	bl	8001e28 <HAL_GetTick>
 80031ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80031f0:	e01b      	b.n	800322a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80031f2:	f7fe fe19 	bl	8001e28 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b05      	cmp	r3, #5
 80031fe:	d914      	bls.n	800322a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00d      	beq.n	800322a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	f043 0210 	orr.w	r2, r3, #16
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800321e:	f043 0201 	orr.w	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e007      	b.n	800323a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689a      	ldr	r2, [r3, #8]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	4013      	ands	r3, r2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d1dc      	bne.n	80031f2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3720      	adds	r7, #32
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	a33fffff 	.word	0xa33fffff

08003248 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003250:	2300      	movs	r3, #0
 8003252:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4618      	mov	r0, r3
 800325a:	f7fe ff9b 	bl	8002194 <LL_ADC_IsEnabled>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d169      	bne.n	8003338 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689a      	ldr	r2, [r3, #8]
 800326a:	4b36      	ldr	r3, [pc, #216]	; (8003344 <ADC_Enable+0xfc>)
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00d      	beq.n	800328e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003276:	f043 0210 	orr.w	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003282:	f043 0201 	orr.w	r2, r3, #1
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e055      	b.n	800333a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fe ff56 	bl	8002144 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003298:	482b      	ldr	r0, [pc, #172]	; (8003348 <ADC_Enable+0x100>)
 800329a:	f7fe fdf7 	bl	8001e8c <LL_ADC_GetCommonPathInternalCh>
 800329e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80032a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d013      	beq.n	80032d0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032a8:	4b28      	ldr	r3, [pc, #160]	; (800334c <ADC_Enable+0x104>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	099b      	lsrs	r3, r3, #6
 80032ae:	4a28      	ldr	r2, [pc, #160]	; (8003350 <ADC_Enable+0x108>)
 80032b0:	fba2 2303 	umull	r2, r3, r2, r3
 80032b4:	099b      	lsrs	r3, r3, #6
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	4613      	mov	r3, r2
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032c2:	e002      	b.n	80032ca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1f9      	bne.n	80032c4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032d0:	f7fe fdaa 	bl	8001e28 <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032d6:	e028      	b.n	800332a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe ff59 	bl	8002194 <LL_ADC_IsEnabled>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d104      	bne.n	80032f2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7fe ff29 	bl	8002144 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032f2:	f7fe fd99 	bl	8001e28 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d914      	bls.n	800332a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b01      	cmp	r3, #1
 800330c:	d00d      	beq.n	800332a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003312:	f043 0210 	orr.w	r2, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331e:	f043 0201 	orr.w	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e007      	b.n	800333a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b01      	cmp	r3, #1
 8003336:	d1cf      	bne.n	80032d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	8000003f 	.word	0x8000003f
 8003348:	50040300 	.word	0x50040300
 800334c:	20000000 	.word	0x20000000
 8003350:	053e2d63 	.word	0x053e2d63

08003354 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f7fe ff2a 	bl	80021ba <LL_ADC_IsDisableOngoing>
 8003366:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f7fe ff11 	bl	8002194 <LL_ADC_IsEnabled>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d047      	beq.n	8003408 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d144      	bne.n	8003408 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 030d 	and.w	r3, r3, #13
 8003388:	2b01      	cmp	r3, #1
 800338a:	d10c      	bne.n	80033a6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f7fe feeb 	bl	800216c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2203      	movs	r2, #3
 800339c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800339e:	f7fe fd43 	bl	8001e28 <HAL_GetTick>
 80033a2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033a4:	e029      	b.n	80033fa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f043 0210 	orr.w	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b6:	f043 0201 	orr.w	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e023      	b.n	800340a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033c2:	f7fe fd31 	bl	8001e28 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d914      	bls.n	80033fa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00d      	beq.n	80033fa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e2:	f043 0210 	orr.w	r2, r3, #16
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ee:	f043 0201 	orr.w	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e007      	b.n	800340a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 0301 	and.w	r3, r3, #1
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1dc      	bne.n	80033c2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <LL_ADC_IsEnabled>:
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <LL_ADC_IsEnabled+0x18>
 8003426:	2301      	movs	r3, #1
 8003428:	e000      	b.n	800342c <LL_ADC_IsEnabled+0x1a>
 800342a:	2300      	movs	r3, #0
}
 800342c:	4618      	mov	r0, r3
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <LL_ADC_REG_IsConversionOngoing>:
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b04      	cmp	r3, #4
 800344a:	d101      	bne.n	8003450 <LL_ADC_REG_IsConversionOngoing+0x18>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003460:	b590      	push	{r4, r7, lr}
 8003462:	b09f      	sub	sp, #124	; 0x7c
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800347a:	2302      	movs	r3, #2
 800347c:	e093      	b.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003486:	2300      	movs	r3, #0
 8003488:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800348a:	2300      	movs	r3, #0
 800348c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a47      	ldr	r2, [pc, #284]	; (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d102      	bne.n	800349e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003498:	4b46      	ldr	r3, [pc, #280]	; (80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800349a:	60bb      	str	r3, [r7, #8]
 800349c:	e001      	b.n	80034a2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800349e:	2300      	movs	r3, #0
 80034a0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10b      	bne.n	80034c0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ac:	f043 0220 	orr.w	r2, r3, #32
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e072      	b.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff ffb8 	bl	8003438 <LL_ADC_REG_IsConversionOngoing>
 80034c8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff ffb2 	bl	8003438 <LL_ADC_REG_IsConversionOngoing>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d154      	bne.n	8003584 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80034da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d151      	bne.n	8003584 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80034e0:	4b35      	ldr	r3, [pc, #212]	; (80035b8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80034e2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d02c      	beq.n	8003546 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80034ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034fe:	035b      	lsls	r3, r3, #13
 8003500:	430b      	orrs	r3, r1
 8003502:	431a      	orrs	r2, r3
 8003504:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003506:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003508:	4829      	ldr	r0, [pc, #164]	; (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800350a:	f7ff ff82 	bl	8003412 <LL_ADC_IsEnabled>
 800350e:	4604      	mov	r4, r0
 8003510:	4828      	ldr	r0, [pc, #160]	; (80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003512:	f7ff ff7e 	bl	8003412 <LL_ADC_IsEnabled>
 8003516:	4603      	mov	r3, r0
 8003518:	431c      	orrs	r4, r3
 800351a:	4828      	ldr	r0, [pc, #160]	; (80035bc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800351c:	f7ff ff79 	bl	8003412 <LL_ADC_IsEnabled>
 8003520:	4603      	mov	r3, r0
 8003522:	4323      	orrs	r3, r4
 8003524:	2b00      	cmp	r3, #0
 8003526:	d137      	bne.n	8003598 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003530:	f023 030f 	bic.w	r3, r3, #15
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	6811      	ldr	r1, [r2, #0]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	6892      	ldr	r2, [r2, #8]
 800353c:	430a      	orrs	r2, r1
 800353e:	431a      	orrs	r2, r3
 8003540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003542:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003544:	e028      	b.n	8003598 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800354e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003550:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003552:	4817      	ldr	r0, [pc, #92]	; (80035b0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003554:	f7ff ff5d 	bl	8003412 <LL_ADC_IsEnabled>
 8003558:	4604      	mov	r4, r0
 800355a:	4816      	ldr	r0, [pc, #88]	; (80035b4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800355c:	f7ff ff59 	bl	8003412 <LL_ADC_IsEnabled>
 8003560:	4603      	mov	r3, r0
 8003562:	431c      	orrs	r4, r3
 8003564:	4815      	ldr	r0, [pc, #84]	; (80035bc <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003566:	f7ff ff54 	bl	8003412 <LL_ADC_IsEnabled>
 800356a:	4603      	mov	r3, r0
 800356c:	4323      	orrs	r3, r4
 800356e:	2b00      	cmp	r3, #0
 8003570:	d112      	bne.n	8003598 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800357a:	f023 030f 	bic.w	r3, r3, #15
 800357e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003580:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003582:	e009      	b.n	8003598 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003588:	f043 0220 	orr.w	r2, r3, #32
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003596:	e000      	b.n	800359a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003598:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035a2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	377c      	adds	r7, #124	; 0x7c
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd90      	pop	{r4, r7, pc}
 80035ae:	bf00      	nop
 80035b0:	50040000 	.word	0x50040000
 80035b4:	50040100 	.word	0x50040100
 80035b8:	50040300 	.word	0x50040300
 80035bc:	50040200 	.word	0x50040200

080035c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f003 0307 	and.w	r3, r3, #7
 80035ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <__NVIC_SetPriorityGrouping+0x44>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035dc:	4013      	ands	r3, r2
 80035de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035f2:	4a04      	ldr	r2, [pc, #16]	; (8003604 <__NVIC_SetPriorityGrouping+0x44>)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	60d3      	str	r3, [r2, #12]
}
 80035f8:	bf00      	nop
 80035fa:	3714      	adds	r7, #20
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr
 8003604:	e000ed00 	.word	0xe000ed00

08003608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800360c:	4b04      	ldr	r3, [pc, #16]	; (8003620 <__NVIC_GetPriorityGrouping+0x18>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	0a1b      	lsrs	r3, r3, #8
 8003612:	f003 0307 	and.w	r3, r3, #7
}
 8003616:	4618      	mov	r0, r3
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	e000ed00 	.word	0xe000ed00

08003624 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	6039      	str	r1, [r7, #0]
 800362e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003634:	2b00      	cmp	r3, #0
 8003636:	db0a      	blt.n	800364e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	b2da      	uxtb	r2, r3
 800363c:	490c      	ldr	r1, [pc, #48]	; (8003670 <__NVIC_SetPriority+0x4c>)
 800363e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003642:	0112      	lsls	r2, r2, #4
 8003644:	b2d2      	uxtb	r2, r2
 8003646:	440b      	add	r3, r1
 8003648:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800364c:	e00a      	b.n	8003664 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	b2da      	uxtb	r2, r3
 8003652:	4908      	ldr	r1, [pc, #32]	; (8003674 <__NVIC_SetPriority+0x50>)
 8003654:	79fb      	ldrb	r3, [r7, #7]
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	3b04      	subs	r3, #4
 800365c:	0112      	lsls	r2, r2, #4
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	440b      	add	r3, r1
 8003662:	761a      	strb	r2, [r3, #24]
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	e000e100 	.word	0xe000e100
 8003674:	e000ed00 	.word	0xe000ed00

08003678 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003678:	b480      	push	{r7}
 800367a:	b089      	sub	sp, #36	; 0x24
 800367c:	af00      	add	r7, sp, #0
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f1c3 0307 	rsb	r3, r3, #7
 8003692:	2b04      	cmp	r3, #4
 8003694:	bf28      	it	cs
 8003696:	2304      	movcs	r3, #4
 8003698:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	3304      	adds	r3, #4
 800369e:	2b06      	cmp	r3, #6
 80036a0:	d902      	bls.n	80036a8 <NVIC_EncodePriority+0x30>
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3b03      	subs	r3, #3
 80036a6:	e000      	b.n	80036aa <NVIC_EncodePriority+0x32>
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036ac:	f04f 32ff 	mov.w	r2, #4294967295
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	43da      	mvns	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	401a      	ands	r2, r3
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036c0:	f04f 31ff 	mov.w	r1, #4294967295
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ca:	43d9      	mvns	r1, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d0:	4313      	orrs	r3, r2
         );
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3724      	adds	r7, #36	; 0x24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036f0:	d301      	bcc.n	80036f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036f2:	2301      	movs	r3, #1
 80036f4:	e00f      	b.n	8003716 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036f6:	4a0a      	ldr	r2, [pc, #40]	; (8003720 <SysTick_Config+0x40>)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	3b01      	subs	r3, #1
 80036fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036fe:	210f      	movs	r1, #15
 8003700:	f04f 30ff 	mov.w	r0, #4294967295
 8003704:	f7ff ff8e 	bl	8003624 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003708:	4b05      	ldr	r3, [pc, #20]	; (8003720 <SysTick_Config+0x40>)
 800370a:	2200      	movs	r2, #0
 800370c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800370e:	4b04      	ldr	r3, [pc, #16]	; (8003720 <SysTick_Config+0x40>)
 8003710:	2207      	movs	r2, #7
 8003712:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	e000e010 	.word	0xe000e010

08003724 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff47 	bl	80035c0 <__NVIC_SetPriorityGrouping>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
 8003740:	4603      	mov	r3, r0
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800374c:	f7ff ff5c 	bl	8003608 <__NVIC_GetPriorityGrouping>
 8003750:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	68b9      	ldr	r1, [r7, #8]
 8003756:	6978      	ldr	r0, [r7, #20]
 8003758:	f7ff ff8e 	bl	8003678 <NVIC_EncodePriority>
 800375c:	4602      	mov	r2, r0
 800375e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff ff5d 	bl	8003624 <__NVIC_SetPriority>
}
 800376a:	bf00      	nop
 800376c:	3718      	adds	r7, #24
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ffb0 	bl	80036e0 <SysTick_Config>
 8003780:	4603      	mov	r3, r0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3708      	adds	r7, #8
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800379a:	e17f      	b.n	8003a9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	2101      	movs	r1, #1
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	fa01 f303 	lsl.w	r3, r1, r3
 80037a8:	4013      	ands	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 8171 	beq.w	8003a96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d005      	beq.n	80037cc <HAL_GPIO_Init+0x40>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d130      	bne.n	800382e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	2203      	movs	r2, #3
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4013      	ands	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003802:	2201      	movs	r2, #1
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	091b      	lsrs	r3, r3, #4
 8003818:	f003 0201 	and.w	r2, r3, #1
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f003 0303 	and.w	r3, r3, #3
 8003836:	2b03      	cmp	r3, #3
 8003838:	d118      	bne.n	800386c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003840:	2201      	movs	r2, #1
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	08db      	lsrs	r3, r3, #3
 8003856:	f003 0201 	and.w	r2, r3, #1
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4313      	orrs	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0303 	and.w	r3, r3, #3
 8003874:	2b03      	cmp	r3, #3
 8003876:	d017      	beq.n	80038a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	2203      	movs	r2, #3
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	43db      	mvns	r3, r3
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4013      	ands	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	689a      	ldr	r2, [r3, #8]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 0303 	and.w	r3, r3, #3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d123      	bne.n	80038fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	08da      	lsrs	r2, r3, #3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3208      	adds	r2, #8
 80038bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	220f      	movs	r2, #15
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4013      	ands	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	f003 0307 	and.w	r3, r3, #7
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	08da      	lsrs	r2, r3, #3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3208      	adds	r2, #8
 80038f6:	6939      	ldr	r1, [r7, #16]
 80038f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	2203      	movs	r2, #3
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 0203 	and.w	r2, r3, #3
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80ac 	beq.w	8003a96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800393e:	4b5f      	ldr	r3, [pc, #380]	; (8003abc <HAL_GPIO_Init+0x330>)
 8003940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003942:	4a5e      	ldr	r2, [pc, #376]	; (8003abc <HAL_GPIO_Init+0x330>)
 8003944:	f043 0301 	orr.w	r3, r3, #1
 8003948:	6613      	str	r3, [r2, #96]	; 0x60
 800394a:	4b5c      	ldr	r3, [pc, #368]	; (8003abc <HAL_GPIO_Init+0x330>)
 800394c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003956:	4a5a      	ldr	r2, [pc, #360]	; (8003ac0 <HAL_GPIO_Init+0x334>)
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	3302      	adds	r3, #2
 800395e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003962:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	220f      	movs	r2, #15
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43db      	mvns	r3, r3
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4013      	ands	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003980:	d025      	beq.n	80039ce <HAL_GPIO_Init+0x242>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a4f      	ldr	r2, [pc, #316]	; (8003ac4 <HAL_GPIO_Init+0x338>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d01f      	beq.n	80039ca <HAL_GPIO_Init+0x23e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	4a4e      	ldr	r2, [pc, #312]	; (8003ac8 <HAL_GPIO_Init+0x33c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d019      	beq.n	80039c6 <HAL_GPIO_Init+0x23a>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a4d      	ldr	r2, [pc, #308]	; (8003acc <HAL_GPIO_Init+0x340>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <HAL_GPIO_Init+0x236>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a4c      	ldr	r2, [pc, #304]	; (8003ad0 <HAL_GPIO_Init+0x344>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00d      	beq.n	80039be <HAL_GPIO_Init+0x232>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a4b      	ldr	r2, [pc, #300]	; (8003ad4 <HAL_GPIO_Init+0x348>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d007      	beq.n	80039ba <HAL_GPIO_Init+0x22e>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a4a      	ldr	r2, [pc, #296]	; (8003ad8 <HAL_GPIO_Init+0x34c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d101      	bne.n	80039b6 <HAL_GPIO_Init+0x22a>
 80039b2:	2306      	movs	r3, #6
 80039b4:	e00c      	b.n	80039d0 <HAL_GPIO_Init+0x244>
 80039b6:	2307      	movs	r3, #7
 80039b8:	e00a      	b.n	80039d0 <HAL_GPIO_Init+0x244>
 80039ba:	2305      	movs	r3, #5
 80039bc:	e008      	b.n	80039d0 <HAL_GPIO_Init+0x244>
 80039be:	2304      	movs	r3, #4
 80039c0:	e006      	b.n	80039d0 <HAL_GPIO_Init+0x244>
 80039c2:	2303      	movs	r3, #3
 80039c4:	e004      	b.n	80039d0 <HAL_GPIO_Init+0x244>
 80039c6:	2302      	movs	r3, #2
 80039c8:	e002      	b.n	80039d0 <HAL_GPIO_Init+0x244>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <HAL_GPIO_Init+0x244>
 80039ce:	2300      	movs	r3, #0
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	f002 0203 	and.w	r2, r2, #3
 80039d6:	0092      	lsls	r2, r2, #2
 80039d8:	4093      	lsls	r3, r2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4313      	orrs	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039e0:	4937      	ldr	r1, [pc, #220]	; (8003ac0 <HAL_GPIO_Init+0x334>)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	3302      	adds	r3, #2
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039ee:	4b3b      	ldr	r3, [pc, #236]	; (8003adc <HAL_GPIO_Init+0x350>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	4013      	ands	r3, r2
 80039fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a12:	4a32      	ldr	r2, [pc, #200]	; (8003adc <HAL_GPIO_Init+0x350>)
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a18:	4b30      	ldr	r3, [pc, #192]	; (8003adc <HAL_GPIO_Init+0x350>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	43db      	mvns	r3, r3
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d003      	beq.n	8003a3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a3c:	4a27      	ldr	r2, [pc, #156]	; (8003adc <HAL_GPIO_Init+0x350>)
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a42:	4b26      	ldr	r3, [pc, #152]	; (8003adc <HAL_GPIO_Init+0x350>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a66:	4a1d      	ldr	r2, [pc, #116]	; (8003adc <HAL_GPIO_Init+0x350>)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a6c:	4b1b      	ldr	r3, [pc, #108]	; (8003adc <HAL_GPIO_Init+0x350>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	43db      	mvns	r3, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a90:	4a12      	ldr	r2, [pc, #72]	; (8003adc <HAL_GPIO_Init+0x350>)
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f47f ae78 	bne.w	800379c <HAL_GPIO_Init+0x10>
  }
}
 8003aac:	bf00      	nop
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	48000400 	.word	0x48000400
 8003ac8:	48000800 	.word	0x48000800
 8003acc:	48000c00 	.word	0x48000c00
 8003ad0:	48001000 	.word	0x48001000
 8003ad4:	48001400 	.word	0x48001400
 8003ad8:	48001800 	.word	0x48001800
 8003adc:	40010400 	.word	0x40010400

08003ae0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	460b      	mov	r3, r1
 8003aea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	887b      	ldrh	r3, [r7, #2]
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003af8:	2301      	movs	r3, #1
 8003afa:	73fb      	strb	r3, [r7, #15]
 8003afc:	e001      	b.n	8003b02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003afe:	2300      	movs	r3, #0
 8003b00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b083      	sub	sp, #12
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	807b      	strh	r3, [r7, #2]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b20:	787b      	ldrb	r3, [r7, #1]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b26:	887a      	ldrh	r2, [r7, #2]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b2c:	e002      	b.n	8003b34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b44:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40007000 	.word	0x40007000

08003b5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b6a:	d130      	bne.n	8003bce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b6c:	4b23      	ldr	r3, [pc, #140]	; (8003bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b78:	d038      	beq.n	8003bec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b7a:	4b20      	ldr	r3, [pc, #128]	; (8003bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b82:	4a1e      	ldr	r2, [pc, #120]	; (8003bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b8a:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2232      	movs	r2, #50	; 0x32
 8003b90:	fb02 f303 	mul.w	r3, r2, r3
 8003b94:	4a1b      	ldr	r2, [pc, #108]	; (8003c04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b96:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9a:	0c9b      	lsrs	r3, r3, #18
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ba0:	e002      	b.n	8003ba8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ba8:	4b14      	ldr	r3, [pc, #80]	; (8003bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb4:	d102      	bne.n	8003bbc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1f2      	bne.n	8003ba2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bbc:	4b0f      	ldr	r3, [pc, #60]	; (8003bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bbe:	695b      	ldr	r3, [r3, #20]
 8003bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bc8:	d110      	bne.n	8003bec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e00f      	b.n	8003bee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	d007      	beq.n	8003bec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bdc:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003be4:	4a05      	ldr	r2, [pc, #20]	; (8003bfc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40007000 	.word	0x40007000
 8003c00:	20000000 	.word	0x20000000
 8003c04:	431bde83 	.word	0x431bde83

08003c08 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e3ca      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1a:	4b97      	ldr	r3, [pc, #604]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c24:	4b94      	ldr	r3, [pc, #592]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 80e4 	beq.w	8003e04 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d007      	beq.n	8003c52 <HAL_RCC_OscConfig+0x4a>
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b0c      	cmp	r3, #12
 8003c46:	f040 808b 	bne.w	8003d60 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	f040 8087 	bne.w	8003d60 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c52:	4b89      	ldr	r3, [pc, #548]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <HAL_RCC_OscConfig+0x62>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d101      	bne.n	8003c6a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	e3a2      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1a      	ldr	r2, [r3, #32]
 8003c6e:	4b82      	ldr	r3, [pc, #520]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d004      	beq.n	8003c84 <HAL_RCC_OscConfig+0x7c>
 8003c7a:	4b7f      	ldr	r3, [pc, #508]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c82:	e005      	b.n	8003c90 <HAL_RCC_OscConfig+0x88>
 8003c84:	4b7c      	ldr	r3, [pc, #496]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c8a:	091b      	lsrs	r3, r3, #4
 8003c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d223      	bcs.n	8003cdc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 fd55 	bl	8004748 <RCC_SetFlashLatencyFromMSIRange>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e383      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ca8:	4b73      	ldr	r3, [pc, #460]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a72      	ldr	r2, [pc, #456]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cae:	f043 0308 	orr.w	r3, r3, #8
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	4b70      	ldr	r3, [pc, #448]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a1b      	ldr	r3, [r3, #32]
 8003cc0:	496d      	ldr	r1, [pc, #436]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cc6:	4b6c      	ldr	r3, [pc, #432]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	021b      	lsls	r3, r3, #8
 8003cd4:	4968      	ldr	r1, [pc, #416]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	604b      	str	r3, [r1, #4]
 8003cda:	e025      	b.n	8003d28 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cdc:	4b66      	ldr	r3, [pc, #408]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a65      	ldr	r2, [pc, #404]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003ce2:	f043 0308 	orr.w	r3, r3, #8
 8003ce6:	6013      	str	r3, [r2, #0]
 8003ce8:	4b63      	ldr	r3, [pc, #396]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	4960      	ldr	r1, [pc, #384]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cfa:	4b5f      	ldr	r3, [pc, #380]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	69db      	ldr	r3, [r3, #28]
 8003d06:	021b      	lsls	r3, r3, #8
 8003d08:	495b      	ldr	r1, [pc, #364]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d109      	bne.n	8003d28 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 fd15 	bl	8004748 <RCC_SetFlashLatencyFromMSIRange>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e343      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d28:	f000 fc4a 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	4b52      	ldr	r3, [pc, #328]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	091b      	lsrs	r3, r3, #4
 8003d34:	f003 030f 	and.w	r3, r3, #15
 8003d38:	4950      	ldr	r1, [pc, #320]	; (8003e7c <HAL_RCC_OscConfig+0x274>)
 8003d3a:	5ccb      	ldrb	r3, [r1, r3]
 8003d3c:	f003 031f 	and.w	r3, r3, #31
 8003d40:	fa22 f303 	lsr.w	r3, r2, r3
 8003d44:	4a4e      	ldr	r2, [pc, #312]	; (8003e80 <HAL_RCC_OscConfig+0x278>)
 8003d46:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d48:	4b4e      	ldr	r3, [pc, #312]	; (8003e84 <HAL_RCC_OscConfig+0x27c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7fe f81b 	bl	8001d88 <HAL_InitTick>
 8003d52:	4603      	mov	r3, r0
 8003d54:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d052      	beq.n	8003e02 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	e327      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d032      	beq.n	8003dce <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d68:	4b43      	ldr	r3, [pc, #268]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a42      	ldr	r2, [pc, #264]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d74:	f7fe f858 	bl	8001e28 <HAL_GetTick>
 8003d78:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d7a:	e008      	b.n	8003d8e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d7c:	f7fe f854 	bl	8001e28 <HAL_GetTick>
 8003d80:	4602      	mov	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d901      	bls.n	8003d8e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e310      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d8e:	4b3a      	ldr	r3, [pc, #232]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0f0      	beq.n	8003d7c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d9a:	4b37      	ldr	r3, [pc, #220]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a36      	ldr	r2, [pc, #216]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003da0:	f043 0308 	orr.w	r3, r3, #8
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	4b34      	ldr	r3, [pc, #208]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	4931      	ldr	r1, [pc, #196]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003db4:	4313      	orrs	r3, r2
 8003db6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003db8:	4b2f      	ldr	r3, [pc, #188]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	021b      	lsls	r3, r3, #8
 8003dc6:	492c      	ldr	r1, [pc, #176]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	604b      	str	r3, [r1, #4]
 8003dcc:	e01a      	b.n	8003e04 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dce:	4b2a      	ldr	r3, [pc, #168]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a29      	ldr	r2, [pc, #164]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003dd4:	f023 0301 	bic.w	r3, r3, #1
 8003dd8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dda:	f7fe f825 	bl	8001e28 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003de2:	f7fe f821 	bl	8001e28 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e2dd      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003df4:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1f0      	bne.n	8003de2 <HAL_RCC_OscConfig+0x1da>
 8003e00:	e000      	b.n	8003e04 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e02:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d074      	beq.n	8003efa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d005      	beq.n	8003e22 <HAL_RCC_OscConfig+0x21a>
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	2b0c      	cmp	r3, #12
 8003e1a:	d10e      	bne.n	8003e3a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d10b      	bne.n	8003e3a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e22:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d064      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x2f0>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d160      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e2ba      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e42:	d106      	bne.n	8003e52 <HAL_RCC_OscConfig+0x24a>
 8003e44:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a0b      	ldr	r2, [pc, #44]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	e026      	b.n	8003ea0 <HAL_RCC_OscConfig+0x298>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e5a:	d115      	bne.n	8003e88 <HAL_RCC_OscConfig+0x280>
 8003e5c:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a05      	ldr	r2, [pc, #20]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003e62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e66:	6013      	str	r3, [r2, #0]
 8003e68:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a02      	ldr	r2, [pc, #8]	; (8003e78 <HAL_RCC_OscConfig+0x270>)
 8003e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e72:	6013      	str	r3, [r2, #0]
 8003e74:	e014      	b.n	8003ea0 <HAL_RCC_OscConfig+0x298>
 8003e76:	bf00      	nop
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	0800bae0 	.word	0x0800bae0
 8003e80:	20000000 	.word	0x20000000
 8003e84:	20000004 	.word	0x20000004
 8003e88:	4ba0      	ldr	r3, [pc, #640]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a9f      	ldr	r2, [pc, #636]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003e8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	4b9d      	ldr	r3, [pc, #628]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a9c      	ldr	r2, [pc, #624]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d013      	beq.n	8003ed0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea8:	f7fd ffbe 	bl	8001e28 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb0:	f7fd ffba 	bl	8001e28 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b64      	cmp	r3, #100	; 0x64
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e276      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ec2:	4b92      	ldr	r3, [pc, #584]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d0f0      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x2a8>
 8003ece:	e014      	b.n	8003efa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fd ffaa 	bl	8001e28 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed8:	f7fd ffa6 	bl	8001e28 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b64      	cmp	r3, #100	; 0x64
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e262      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eea:	4b88      	ldr	r3, [pc, #544]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f0      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x2d0>
 8003ef6:	e000      	b.n	8003efa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ef8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d060      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_OscConfig+0x310>
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b0c      	cmp	r3, #12
 8003f10:	d119      	bne.n	8003f46 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d116      	bne.n	8003f46 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f18:	4b7c      	ldr	r3, [pc, #496]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_RCC_OscConfig+0x328>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e23f      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f30:	4b76      	ldr	r3, [pc, #472]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	061b      	lsls	r3, r3, #24
 8003f3e:	4973      	ldr	r1, [pc, #460]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f44:	e040      	b.n	8003fc8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d023      	beq.n	8003f96 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f4e:	4b6f      	ldr	r3, [pc, #444]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a6e      	ldr	r2, [pc, #440]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5a:	f7fd ff65 	bl	8001e28 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f62:	f7fd ff61 	bl	8001e28 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e21d      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f74:	4b65      	ldr	r3, [pc, #404]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d0f0      	beq.n	8003f62 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f80:	4b62      	ldr	r3, [pc, #392]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	061b      	lsls	r3, r3, #24
 8003f8e:	495f      	ldr	r1, [pc, #380]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	604b      	str	r3, [r1, #4]
 8003f94:	e018      	b.n	8003fc8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f96:	4b5d      	ldr	r3, [pc, #372]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a5c      	ldr	r2, [pc, #368]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa2:	f7fd ff41 	bl	8001e28 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003faa:	f7fd ff3d 	bl	8001e28 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e1f9      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fbc:	4b53      	ldr	r3, [pc, #332]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f0      	bne.n	8003faa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d03c      	beq.n	800404e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	695b      	ldr	r3, [r3, #20]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01c      	beq.n	8004016 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fdc:	4b4b      	ldr	r3, [pc, #300]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe2:	4a4a      	ldr	r2, [pc, #296]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fec:	f7fd ff1c 	bl	8001e28 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff4:	f7fd ff18 	bl	8001e28 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e1d4      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004006:	4b41      	ldr	r3, [pc, #260]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8004008:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0ef      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x3ec>
 8004014:	e01b      	b.n	800404e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004016:	4b3d      	ldr	r3, [pc, #244]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8004018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800401c:	4a3b      	ldr	r2, [pc, #236]	; (800410c <HAL_RCC_OscConfig+0x504>)
 800401e:	f023 0301 	bic.w	r3, r3, #1
 8004022:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004026:	f7fd feff 	bl	8001e28 <HAL_GetTick>
 800402a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800402c:	e008      	b.n	8004040 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800402e:	f7fd fefb 	bl	8001e28 <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e1b7      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004040:	4b32      	ldr	r3, [pc, #200]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8004042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1ef      	bne.n	800402e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80a6 	beq.w	80041a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800405c:	2300      	movs	r3, #0
 800405e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004060:	4b2a      	ldr	r3, [pc, #168]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8004062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004064:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10d      	bne.n	8004088 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800406c:	4b27      	ldr	r3, [pc, #156]	; (800410c <HAL_RCC_OscConfig+0x504>)
 800406e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004070:	4a26      	ldr	r2, [pc, #152]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8004072:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004076:	6593      	str	r3, [r2, #88]	; 0x58
 8004078:	4b24      	ldr	r3, [pc, #144]	; (800410c <HAL_RCC_OscConfig+0x504>)
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004080:	60bb      	str	r3, [r7, #8]
 8004082:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004084:	2301      	movs	r3, #1
 8004086:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004088:	4b21      	ldr	r3, [pc, #132]	; (8004110 <HAL_RCC_OscConfig+0x508>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d118      	bne.n	80040c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004094:	4b1e      	ldr	r3, [pc, #120]	; (8004110 <HAL_RCC_OscConfig+0x508>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <HAL_RCC_OscConfig+0x508>)
 800409a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800409e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040a0:	f7fd fec2 	bl	8001e28 <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040a8:	f7fd febe 	bl	8001e28 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e17a      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ba:	4b15      	ldr	r3, [pc, #84]	; (8004110 <HAL_RCC_OscConfig+0x508>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0f0      	beq.n	80040a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d108      	bne.n	80040e0 <HAL_RCC_OscConfig+0x4d8>
 80040ce:	4b0f      	ldr	r3, [pc, #60]	; (800410c <HAL_RCC_OscConfig+0x504>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	4a0d      	ldr	r2, [pc, #52]	; (800410c <HAL_RCC_OscConfig+0x504>)
 80040d6:	f043 0301 	orr.w	r3, r3, #1
 80040da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040de:	e029      	b.n	8004134 <HAL_RCC_OscConfig+0x52c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b05      	cmp	r3, #5
 80040e6:	d115      	bne.n	8004114 <HAL_RCC_OscConfig+0x50c>
 80040e8:	4b08      	ldr	r3, [pc, #32]	; (800410c <HAL_RCC_OscConfig+0x504>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	4a07      	ldr	r2, [pc, #28]	; (800410c <HAL_RCC_OscConfig+0x504>)
 80040f0:	f043 0304 	orr.w	r3, r3, #4
 80040f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <HAL_RCC_OscConfig+0x504>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fe:	4a03      	ldr	r2, [pc, #12]	; (800410c <HAL_RCC_OscConfig+0x504>)
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004108:	e014      	b.n	8004134 <HAL_RCC_OscConfig+0x52c>
 800410a:	bf00      	nop
 800410c:	40021000 	.word	0x40021000
 8004110:	40007000 	.word	0x40007000
 8004114:	4b9c      	ldr	r3, [pc, #624]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 8004116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411a:	4a9b      	ldr	r2, [pc, #620]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004124:	4b98      	ldr	r3, [pc, #608]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 8004126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412a:	4a97      	ldr	r2, [pc, #604]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 800412c:	f023 0304 	bic.w	r3, r3, #4
 8004130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d016      	beq.n	800416a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413c:	f7fd fe74 	bl	8001e28 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004142:	e00a      	b.n	800415a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004144:	f7fd fe70 	bl	8001e28 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004152:	4293      	cmp	r3, r2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e12a      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415a:	4b8b      	ldr	r3, [pc, #556]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d0ed      	beq.n	8004144 <HAL_RCC_OscConfig+0x53c>
 8004168:	e015      	b.n	8004196 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416a:	f7fd fe5d 	bl	8001e28 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004170:	e00a      	b.n	8004188 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004172:	f7fd fe59 	bl	8001e28 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004180:	4293      	cmp	r3, r2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e113      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004188:	4b7f      	ldr	r3, [pc, #508]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 800418a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1ed      	bne.n	8004172 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004196:	7ffb      	ldrb	r3, [r7, #31]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d105      	bne.n	80041a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800419c:	4b7a      	ldr	r3, [pc, #488]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	4a79      	ldr	r2, [pc, #484]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 80041a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041a6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	f000 80fe 	beq.w	80043ae <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	f040 80d0 	bne.w	800435c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041bc:	4b72      	ldr	r3, [pc, #456]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f003 0203 	and.w	r2, r3, #3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d130      	bne.n	8004232 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	3b01      	subs	r3, #1
 80041dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d127      	bne.n	8004232 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d11f      	bne.n	8004232 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041fc:	2a07      	cmp	r2, #7
 80041fe:	bf14      	ite	ne
 8004200:	2201      	movne	r2, #1
 8004202:	2200      	moveq	r2, #0
 8004204:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004206:	4293      	cmp	r3, r2
 8004208:	d113      	bne.n	8004232 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004214:	085b      	lsrs	r3, r3, #1
 8004216:	3b01      	subs	r3, #1
 8004218:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800421a:	429a      	cmp	r2, r3
 800421c:	d109      	bne.n	8004232 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004228:	085b      	lsrs	r3, r3, #1
 800422a:	3b01      	subs	r3, #1
 800422c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800422e:	429a      	cmp	r2, r3
 8004230:	d06e      	beq.n	8004310 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b0c      	cmp	r3, #12
 8004236:	d069      	beq.n	800430c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004238:	4b53      	ldr	r3, [pc, #332]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d105      	bne.n	8004250 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004244:	4b50      	ldr	r3, [pc, #320]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e0ad      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004254:	4b4c      	ldr	r3, [pc, #304]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a4b      	ldr	r2, [pc, #300]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 800425a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800425e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004260:	f7fd fde2 	bl	8001e28 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004268:	f7fd fdde 	bl	8001e28 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e09a      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800427a:	4b43      	ldr	r3, [pc, #268]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f0      	bne.n	8004268 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004286:	4b40      	ldr	r3, [pc, #256]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	4b40      	ldr	r3, [pc, #256]	; (800438c <HAL_RCC_OscConfig+0x784>)
 800428c:	4013      	ands	r3, r2
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004296:	3a01      	subs	r2, #1
 8004298:	0112      	lsls	r2, r2, #4
 800429a:	4311      	orrs	r1, r2
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80042a0:	0212      	lsls	r2, r2, #8
 80042a2:	4311      	orrs	r1, r2
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042a8:	0852      	lsrs	r2, r2, #1
 80042aa:	3a01      	subs	r2, #1
 80042ac:	0552      	lsls	r2, r2, #21
 80042ae:	4311      	orrs	r1, r2
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042b4:	0852      	lsrs	r2, r2, #1
 80042b6:	3a01      	subs	r2, #1
 80042b8:	0652      	lsls	r2, r2, #25
 80042ba:	4311      	orrs	r1, r2
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80042c0:	0912      	lsrs	r2, r2, #4
 80042c2:	0452      	lsls	r2, r2, #17
 80042c4:	430a      	orrs	r2, r1
 80042c6:	4930      	ldr	r1, [pc, #192]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042cc:	4b2e      	ldr	r3, [pc, #184]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a2d      	ldr	r2, [pc, #180]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 80042d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042d8:	4b2b      	ldr	r3, [pc, #172]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4a2a      	ldr	r2, [pc, #168]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 80042de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80042e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042e4:	f7fd fda0 	bl	8001e28 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ec:	f7fd fd9c 	bl	8001e28 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e058      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042fe:	4b22      	ldr	r3, [pc, #136]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d0f0      	beq.n	80042ec <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800430a:	e050      	b.n	80043ae <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e04f      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004310:	4b1d      	ldr	r3, [pc, #116]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d148      	bne.n	80043ae <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800431c:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a19      	ldr	r2, [pc, #100]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 8004322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004326:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004328:	4b17      	ldr	r3, [pc, #92]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4a16      	ldr	r2, [pc, #88]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 800432e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004332:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004334:	f7fd fd78 	bl	8001e28 <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800433c:	f7fd fd74 	bl	8001e28 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e030      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800434e:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x734>
 800435a:	e028      	b.n	80043ae <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	2b0c      	cmp	r3, #12
 8004360:	d023      	beq.n	80043aa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a08      	ldr	r2, [pc, #32]	; (8004388 <HAL_RCC_OscConfig+0x780>)
 8004368:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800436c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800436e:	f7fd fd5b 	bl	8001e28 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004374:	e00c      	b.n	8004390 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004376:	f7fd fd57 	bl	8001e28 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d905      	bls.n	8004390 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e013      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
 8004388:	40021000 	.word	0x40021000
 800438c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004390:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <HAL_RCC_OscConfig+0x7b0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1ec      	bne.n	8004376 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <HAL_RCC_OscConfig+0x7b0>)
 800439e:	68da      	ldr	r2, [r3, #12]
 80043a0:	4905      	ldr	r1, [pc, #20]	; (80043b8 <HAL_RCC_OscConfig+0x7b0>)
 80043a2:	4b06      	ldr	r3, [pc, #24]	; (80043bc <HAL_RCC_OscConfig+0x7b4>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	60cb      	str	r3, [r1, #12]
 80043a8:	e001      	b.n	80043ae <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3720      	adds	r7, #32
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40021000 	.word	0x40021000
 80043bc:	feeefffc 	.word	0xfeeefffc

080043c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0e7      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043d4:	4b75      	ldr	r3, [pc, #468]	; (80045ac <HAL_RCC_ClockConfig+0x1ec>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	683a      	ldr	r2, [r7, #0]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d910      	bls.n	8004404 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e2:	4b72      	ldr	r3, [pc, #456]	; (80045ac <HAL_RCC_ClockConfig+0x1ec>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 0207 	bic.w	r2, r3, #7
 80043ea:	4970      	ldr	r1, [pc, #448]	; (80045ac <HAL_RCC_ClockConfig+0x1ec>)
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f2:	4b6e      	ldr	r3, [pc, #440]	; (80045ac <HAL_RCC_ClockConfig+0x1ec>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d001      	beq.n	8004404 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e0cf      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d010      	beq.n	8004432 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	4b66      	ldr	r3, [pc, #408]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800441c:	429a      	cmp	r2, r3
 800441e:	d908      	bls.n	8004432 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004420:	4b63      	ldr	r3, [pc, #396]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	4960      	ldr	r1, [pc, #384]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 800442e:	4313      	orrs	r3, r2
 8004430:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d04c      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b03      	cmp	r3, #3
 8004444:	d107      	bne.n	8004456 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004446:	4b5a      	ldr	r3, [pc, #360]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d121      	bne.n	8004496 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e0a6      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d107      	bne.n	800446e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800445e:	4b54      	ldr	r3, [pc, #336]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d115      	bne.n	8004496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e09a      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d107      	bne.n	8004486 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004476:	4b4e      	ldr	r3, [pc, #312]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e08e      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004486:	4b4a      	ldr	r3, [pc, #296]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e086      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004496:	4b46      	ldr	r3, [pc, #280]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f023 0203 	bic.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4943      	ldr	r1, [pc, #268]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a8:	f7fd fcbe 	bl	8001e28 <HAL_GetTick>
 80044ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ae:	e00a      	b.n	80044c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b0:	f7fd fcba 	bl	8001e28 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80044be:	4293      	cmp	r3, r2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e06e      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c6:	4b3a      	ldr	r3, [pc, #232]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 020c 	and.w	r2, r3, #12
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d1eb      	bne.n	80044b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d010      	beq.n	8004506 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	4b31      	ldr	r3, [pc, #196]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d208      	bcs.n	8004506 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f4:	4b2e      	ldr	r3, [pc, #184]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	492b      	ldr	r1, [pc, #172]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004502:	4313      	orrs	r3, r2
 8004504:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004506:	4b29      	ldr	r3, [pc, #164]	; (80045ac <HAL_RCC_ClockConfig+0x1ec>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d210      	bcs.n	8004536 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004514:	4b25      	ldr	r3, [pc, #148]	; (80045ac <HAL_RCC_ClockConfig+0x1ec>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f023 0207 	bic.w	r2, r3, #7
 800451c:	4923      	ldr	r1, [pc, #140]	; (80045ac <HAL_RCC_ClockConfig+0x1ec>)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	4313      	orrs	r3, r2
 8004522:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004524:	4b21      	ldr	r3, [pc, #132]	; (80045ac <HAL_RCC_ClockConfig+0x1ec>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d001      	beq.n	8004536 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e036      	b.n	80045a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004542:	4b1b      	ldr	r3, [pc, #108]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	4918      	ldr	r1, [pc, #96]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004550:	4313      	orrs	r3, r2
 8004552:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0308 	and.w	r3, r3, #8
 800455c:	2b00      	cmp	r3, #0
 800455e:	d009      	beq.n	8004574 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004560:	4b13      	ldr	r3, [pc, #76]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	4910      	ldr	r1, [pc, #64]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004570:	4313      	orrs	r3, r2
 8004572:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004574:	f000 f824 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <HAL_RCC_ClockConfig+0x1f0>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	091b      	lsrs	r3, r3, #4
 8004580:	f003 030f 	and.w	r3, r3, #15
 8004584:	490b      	ldr	r1, [pc, #44]	; (80045b4 <HAL_RCC_ClockConfig+0x1f4>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
 8004590:	4a09      	ldr	r2, [pc, #36]	; (80045b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004592:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_RCC_ClockConfig+0x1fc>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7fd fbf5 	bl	8001d88 <HAL_InitTick>
 800459e:	4603      	mov	r3, r0
 80045a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80045a2:	7afb      	ldrb	r3, [r7, #11]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	40022000 	.word	0x40022000
 80045b0:	40021000 	.word	0x40021000
 80045b4:	0800bae0 	.word	0x0800bae0
 80045b8:	20000000 	.word	0x20000000
 80045bc:	20000004 	.word	0x20000004

080045c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b089      	sub	sp, #36	; 0x24
 80045c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	61fb      	str	r3, [r7, #28]
 80045ca:	2300      	movs	r3, #0
 80045cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045ce:	4b3e      	ldr	r3, [pc, #248]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 030c 	and.w	r3, r3, #12
 80045d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045d8:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0303 	and.w	r3, r3, #3
 80045e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_GetSysClockFreq+0x34>
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b0c      	cmp	r3, #12
 80045ec:	d121      	bne.n	8004632 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d11e      	bne.n	8004632 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045f4:	4b34      	ldr	r3, [pc, #208]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004600:	4b31      	ldr	r3, [pc, #196]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004606:	0a1b      	lsrs	r3, r3, #8
 8004608:	f003 030f 	and.w	r3, r3, #15
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	e005      	b.n	800461c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004610:	4b2d      	ldr	r3, [pc, #180]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	091b      	lsrs	r3, r3, #4
 8004616:	f003 030f 	and.w	r3, r3, #15
 800461a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800461c:	4a2b      	ldr	r2, [pc, #172]	; (80046cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004624:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10d      	bne.n	8004648 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004630:	e00a      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b04      	cmp	r3, #4
 8004636:	d102      	bne.n	800463e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004638:	4b25      	ldr	r3, [pc, #148]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800463a:	61bb      	str	r3, [r7, #24]
 800463c:	e004      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	2b08      	cmp	r3, #8
 8004642:	d101      	bne.n	8004648 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004644:	4b23      	ldr	r3, [pc, #140]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004646:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b0c      	cmp	r3, #12
 800464c:	d134      	bne.n	80046b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800464e:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d003      	beq.n	8004666 <HAL_RCC_GetSysClockFreq+0xa6>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b03      	cmp	r3, #3
 8004662:	d003      	beq.n	800466c <HAL_RCC_GetSysClockFreq+0xac>
 8004664:	e005      	b.n	8004672 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004666:	4b1a      	ldr	r3, [pc, #104]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004668:	617b      	str	r3, [r7, #20]
      break;
 800466a:	e005      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800466c:	4b19      	ldr	r3, [pc, #100]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800466e:	617b      	str	r3, [r7, #20]
      break;
 8004670:	e002      	b.n	8004678 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	617b      	str	r3, [r7, #20]
      break;
 8004676:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004678:	4b13      	ldr	r3, [pc, #76]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	3301      	adds	r3, #1
 8004684:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004686:	4b10      	ldr	r3, [pc, #64]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	0a1b      	lsrs	r3, r3, #8
 800468c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	fb03 f202 	mul.w	r2, r3, r2
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	fbb2 f3f3 	udiv	r3, r2, r3
 800469c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800469e:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	0e5b      	lsrs	r3, r3, #25
 80046a4:	f003 0303 	and.w	r3, r3, #3
 80046a8:	3301      	adds	r3, #1
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046ae:	697a      	ldr	r2, [r7, #20]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046b8:	69bb      	ldr	r3, [r7, #24]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3724      	adds	r7, #36	; 0x24
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40021000 	.word	0x40021000
 80046cc:	0800baf8 	.word	0x0800baf8
 80046d0:	00f42400 	.word	0x00f42400
 80046d4:	007a1200 	.word	0x007a1200

080046d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046dc:	4b03      	ldr	r3, [pc, #12]	; (80046ec <HAL_RCC_GetHCLKFreq+0x14>)
 80046de:	681b      	ldr	r3, [r3, #0]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000000 	.word	0x20000000

080046f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046f4:	f7ff fff0 	bl	80046d8 <HAL_RCC_GetHCLKFreq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4b06      	ldr	r3, [pc, #24]	; (8004714 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	f003 0307 	and.w	r3, r3, #7
 8004704:	4904      	ldr	r1, [pc, #16]	; (8004718 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004706:	5ccb      	ldrb	r3, [r1, r3]
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004710:	4618      	mov	r0, r3
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40021000 	.word	0x40021000
 8004718:	0800baf0 	.word	0x0800baf0

0800471c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004720:	f7ff ffda 	bl	80046d8 <HAL_RCC_GetHCLKFreq>
 8004724:	4602      	mov	r2, r0
 8004726:	4b06      	ldr	r3, [pc, #24]	; (8004740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	0adb      	lsrs	r3, r3, #11
 800472c:	f003 0307 	and.w	r3, r3, #7
 8004730:	4904      	ldr	r1, [pc, #16]	; (8004744 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004732:	5ccb      	ldrb	r3, [r1, r3]
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800473c:	4618      	mov	r0, r3
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40021000 	.word	0x40021000
 8004744:	0800baf0 	.word	0x0800baf0

08004748 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004750:	2300      	movs	r3, #0
 8004752:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004754:	4b2a      	ldr	r3, [pc, #168]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d003      	beq.n	8004768 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004760:	f7ff f9ee 	bl	8003b40 <HAL_PWREx_GetVoltageRange>
 8004764:	6178      	str	r0, [r7, #20]
 8004766:	e014      	b.n	8004792 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800476a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800476c:	4a24      	ldr	r2, [pc, #144]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800476e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004772:	6593      	str	r3, [r2, #88]	; 0x58
 8004774:	4b22      	ldr	r3, [pc, #136]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477c:	60fb      	str	r3, [r7, #12]
 800477e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004780:	f7ff f9de 	bl	8003b40 <HAL_PWREx_GetVoltageRange>
 8004784:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004786:	4b1e      	ldr	r3, [pc, #120]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800478a:	4a1d      	ldr	r2, [pc, #116]	; (8004800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800478c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004790:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004798:	d10b      	bne.n	80047b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b80      	cmp	r3, #128	; 0x80
 800479e:	d919      	bls.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2ba0      	cmp	r3, #160	; 0xa0
 80047a4:	d902      	bls.n	80047ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047a6:	2302      	movs	r3, #2
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	e013      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047ac:	2301      	movs	r3, #1
 80047ae:	613b      	str	r3, [r7, #16]
 80047b0:	e010      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2b80      	cmp	r3, #128	; 0x80
 80047b6:	d902      	bls.n	80047be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047b8:	2303      	movs	r3, #3
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	e00a      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b80      	cmp	r3, #128	; 0x80
 80047c2:	d102      	bne.n	80047ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047c4:	2302      	movs	r3, #2
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	e004      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b70      	cmp	r3, #112	; 0x70
 80047ce:	d101      	bne.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047d0:	2301      	movs	r3, #1
 80047d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f023 0207 	bic.w	r2, r3, #7
 80047dc:	4909      	ldr	r1, [pc, #36]	; (8004804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047e4:	4b07      	ldr	r3, [pc, #28]	; (8004804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	693a      	ldr	r2, [r7, #16]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d001      	beq.n	80047f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047f6:	2300      	movs	r3, #0
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	40021000 	.word	0x40021000
 8004804:	40022000 	.word	0x40022000

08004808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004810:	2300      	movs	r3, #0
 8004812:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004814:	2300      	movs	r3, #0
 8004816:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004820:	2b00      	cmp	r3, #0
 8004822:	d041      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004828:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800482c:	d02a      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800482e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004832:	d824      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004834:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004838:	d008      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800483a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800483e:	d81e      	bhi.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00a      	beq.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004848:	d010      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800484a:	e018      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800484c:	4b86      	ldr	r3, [pc, #536]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	4a85      	ldr	r2, [pc, #532]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004852:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004856:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004858:	e015      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	3304      	adds	r3, #4
 800485e:	2100      	movs	r1, #0
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fabb 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800486a:	e00c      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	3320      	adds	r3, #32
 8004870:	2100      	movs	r1, #0
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fba6 	bl	8004fc4 <RCCEx_PLLSAI2_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800487c:	e003      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	74fb      	strb	r3, [r7, #19]
      break;
 8004882:	e000      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004884:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004886:	7cfb      	ldrb	r3, [r7, #19]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10b      	bne.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800488c:	4b76      	ldr	r3, [pc, #472]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004892:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800489a:	4973      	ldr	r1, [pc, #460]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489c:	4313      	orrs	r3, r2
 800489e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80048a2:	e001      	b.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a4:	7cfb      	ldrb	r3, [r7, #19]
 80048a6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d041      	beq.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048bc:	d02a      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80048be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80048c2:	d824      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048c8:	d008      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048ce:	d81e      	bhi.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80048d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048d8:	d010      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048da:	e018      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048dc:	4b62      	ldr	r3, [pc, #392]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4a61      	ldr	r2, [pc, #388]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048e8:	e015      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3304      	adds	r3, #4
 80048ee:	2100      	movs	r1, #0
 80048f0:	4618      	mov	r0, r3
 80048f2:	f000 fa73 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 80048f6:	4603      	mov	r3, r0
 80048f8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048fa:	e00c      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3320      	adds	r3, #32
 8004900:	2100      	movs	r1, #0
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fb5e 	bl	8004fc4 <RCCEx_PLLSAI2_Config>
 8004908:	4603      	mov	r3, r0
 800490a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800490c:	e003      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	74fb      	strb	r3, [r7, #19]
      break;
 8004912:	e000      	b.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004916:	7cfb      	ldrb	r3, [r7, #19]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d10b      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800491c:	4b52      	ldr	r3, [pc, #328]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800492a:	494f      	ldr	r1, [pc, #316]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004932:	e001      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004934:	7cfb      	ldrb	r3, [r7, #19]
 8004936:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80a0 	beq.w	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004946:	2300      	movs	r3, #0
 8004948:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800494a:	4b47      	ldr	r3, [pc, #284]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800494c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800494e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800495a:	2300      	movs	r3, #0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00d      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004960:	4b41      	ldr	r3, [pc, #260]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004964:	4a40      	ldr	r2, [pc, #256]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496a:	6593      	str	r3, [r2, #88]	; 0x58
 800496c:	4b3e      	ldr	r3, [pc, #248]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800496e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004978:	2301      	movs	r3, #1
 800497a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800497c:	4b3b      	ldr	r3, [pc, #236]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a3a      	ldr	r2, [pc, #232]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004986:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004988:	f7fd fa4e 	bl	8001e28 <HAL_GetTick>
 800498c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800498e:	e009      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004990:	f7fd fa4a 	bl	8001e28 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d902      	bls.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	74fb      	strb	r3, [r7, #19]
        break;
 80049a2:	e005      	b.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049a4:	4b31      	ldr	r3, [pc, #196]	; (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0ef      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80049b0:	7cfb      	ldrb	r3, [r7, #19]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d15c      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049b6:	4b2c      	ldr	r3, [pc, #176]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01f      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d019      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049d4:	4b24      	ldr	r3, [pc, #144]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049e0:	4b21      	ldr	r3, [pc, #132]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	4a20      	ldr	r2, [pc, #128]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049f0:	4b1d      	ldr	r3, [pc, #116]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f6:	4a1c      	ldr	r2, [pc, #112]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a00:	4a19      	ldr	r2, [pc, #100]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d016      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a12:	f7fd fa09 	bl	8001e28 <HAL_GetTick>
 8004a16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a18:	e00b      	b.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1a:	f7fd fa05 	bl	8001e28 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d902      	bls.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	74fb      	strb	r3, [r7, #19]
            break;
 8004a30:	e006      	b.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a32:	4b0d      	ldr	r3, [pc, #52]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0ec      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10c      	bne.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a46:	4b08      	ldr	r3, [pc, #32]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a56:	4904      	ldr	r1, [pc, #16]	; (8004a68 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a5e:	e009      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	74bb      	strb	r3, [r7, #18]
 8004a64:	e006      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a66:	bf00      	nop
 8004a68:	40021000 	.word	0x40021000
 8004a6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a70:	7cfb      	ldrb	r3, [r7, #19]
 8004a72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a74:	7c7b      	ldrb	r3, [r7, #17]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d105      	bne.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7a:	4b9e      	ldr	r3, [pc, #632]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7e:	4a9d      	ldr	r2, [pc, #628]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00a      	beq.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a92:	4b98      	ldr	r3, [pc, #608]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a98:	f023 0203 	bic.w	r2, r3, #3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa0:	4994      	ldr	r1, [pc, #592]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00a      	beq.n	8004aca <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ab4:	4b8f      	ldr	r3, [pc, #572]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aba:	f023 020c 	bic.w	r2, r3, #12
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	498c      	ldr	r1, [pc, #560]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ad6:	4b87      	ldr	r3, [pc, #540]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004adc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae4:	4983      	ldr	r1, [pc, #524]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0308 	and.w	r3, r3, #8
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d00a      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004af8:	4b7e      	ldr	r3, [pc, #504]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	497b      	ldr	r1, [pc, #492]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b1a:	4b76      	ldr	r3, [pc, #472]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b28:	4972      	ldr	r1, [pc, #456]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0320 	and.w	r3, r3, #32
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b3c:	4b6d      	ldr	r3, [pc, #436]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4a:	496a      	ldr	r1, [pc, #424]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b5e:	4b65      	ldr	r3, [pc, #404]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b6c:	4961      	ldr	r1, [pc, #388]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b80:	4b5c      	ldr	r3, [pc, #368]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b8e:	4959      	ldr	r1, [pc, #356]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b90:	4313      	orrs	r3, r2
 8004b92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ba2:	4b54      	ldr	r3, [pc, #336]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb0:	4950      	ldr	r1, [pc, #320]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bc4:	4b4b      	ldr	r3, [pc, #300]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd2:	4948      	ldr	r1, [pc, #288]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004be6:	4b43      	ldr	r3, [pc, #268]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf4:	493f      	ldr	r1, [pc, #252]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d028      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c08:	4b3a      	ldr	r3, [pc, #232]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c16:	4937      	ldr	r1, [pc, #220]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c26:	d106      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c28:	4b32      	ldr	r3, [pc, #200]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	4a31      	ldr	r2, [pc, #196]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c32:	60d3      	str	r3, [r2, #12]
 8004c34:	e011      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c3e:	d10c      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	2101      	movs	r1, #1
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 f8c8 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c50:	7cfb      	ldrb	r3, [r7, #19]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c56:	7cfb      	ldrb	r3, [r7, #19]
 8004c58:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d028      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c66:	4b23      	ldr	r3, [pc, #140]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c74:	491f      	ldr	r1, [pc, #124]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c84:	d106      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c86:	4b1b      	ldr	r3, [pc, #108]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	4a1a      	ldr	r2, [pc, #104]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c90:	60d3      	str	r3, [r2, #12]
 8004c92:	e011      	b.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	3304      	adds	r3, #4
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 f899 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004caa:	4603      	mov	r3, r0
 8004cac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cae:	7cfb      	ldrb	r3, [r7, #19]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004cb4:	7cfb      	ldrb	r3, [r7, #19]
 8004cb6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d02b      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cc4:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd2:	4908      	ldr	r1, [pc, #32]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ce2:	d109      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce4:	4b03      	ldr	r3, [pc, #12]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	4a02      	ldr	r2, [pc, #8]	; (8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cee:	60d3      	str	r3, [r2, #12]
 8004cf0:	e014      	b.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004cf2:	bf00      	nop
 8004cf4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d00:	d10c      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3304      	adds	r3, #4
 8004d06:	2101      	movs	r1, #1
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 f867 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d12:	7cfb      	ldrb	r3, [r7, #19]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d18:	7cfb      	ldrb	r3, [r7, #19]
 8004d1a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d02f      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d28:	4b2b      	ldr	r3, [pc, #172]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d36:	4928      	ldr	r1, [pc, #160]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d46:	d10d      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	2102      	movs	r1, #2
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f000 f844 	bl	8004ddc <RCCEx_PLLSAI1_Config>
 8004d54:	4603      	mov	r3, r0
 8004d56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d58:	7cfb      	ldrb	r3, [r7, #19]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d014      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d5e:	7cfb      	ldrb	r3, [r7, #19]
 8004d60:	74bb      	strb	r3, [r7, #18]
 8004d62:	e011      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d6c:	d10c      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3320      	adds	r3, #32
 8004d72:	2102      	movs	r1, #2
 8004d74:	4618      	mov	r0, r3
 8004d76:	f000 f925 	bl	8004fc4 <RCCEx_PLLSAI2_Config>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d7e:	7cfb      	ldrb	r3, [r7, #19]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d84:	7cfb      	ldrb	r3, [r7, #19]
 8004d86:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d94:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004da2:	490d      	ldr	r1, [pc, #52]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00b      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004db6:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc6:	4904      	ldr	r1, [pc, #16]	; (8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dce:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	40021000 	.word	0x40021000

08004ddc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dea:	4b75      	ldr	r3, [pc, #468]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d018      	beq.n	8004e28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004df6:	4b72      	ldr	r3, [pc, #456]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f003 0203 	and.w	r2, r3, #3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d10d      	bne.n	8004e22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
       ||
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d009      	beq.n	8004e22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e0e:	4b6c      	ldr	r3, [pc, #432]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	091b      	lsrs	r3, r3, #4
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d047      	beq.n	8004eb2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
 8004e26:	e044      	b.n	8004eb2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d018      	beq.n	8004e62 <RCCEx_PLLSAI1_Config+0x86>
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d825      	bhi.n	8004e80 <RCCEx_PLLSAI1_Config+0xa4>
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d002      	beq.n	8004e3e <RCCEx_PLLSAI1_Config+0x62>
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d009      	beq.n	8004e50 <RCCEx_PLLSAI1_Config+0x74>
 8004e3c:	e020      	b.n	8004e80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e3e:	4b60      	ldr	r3, [pc, #384]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d11d      	bne.n	8004e86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4e:	e01a      	b.n	8004e86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e50:	4b5b      	ldr	r3, [pc, #364]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d116      	bne.n	8004e8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e60:	e013      	b.n	8004e8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e62:	4b57      	ldr	r3, [pc, #348]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d10f      	bne.n	8004e8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e6e:	4b54      	ldr	r3, [pc, #336]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e7e:	e006      	b.n	8004e8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	73fb      	strb	r3, [r7, #15]
      break;
 8004e84:	e004      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e86:	bf00      	nop
 8004e88:	e002      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e8a:	bf00      	nop
 8004e8c:	e000      	b.n	8004e90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10d      	bne.n	8004eb2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e96:	4b4a      	ldr	r3, [pc, #296]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6819      	ldr	r1, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	011b      	lsls	r3, r3, #4
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	4944      	ldr	r1, [pc, #272]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004eb2:	7bfb      	ldrb	r3, [r7, #15]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d17d      	bne.n	8004fb4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004eb8:	4b41      	ldr	r3, [pc, #260]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a40      	ldr	r2, [pc, #256]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ebe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec4:	f7fc ffb0 	bl	8001e28 <HAL_GetTick>
 8004ec8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004eca:	e009      	b.n	8004ee0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ecc:	f7fc ffac 	bl	8001e28 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d902      	bls.n	8004ee0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	73fb      	strb	r3, [r7, #15]
        break;
 8004ede:	e005      	b.n	8004eec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ee0:	4b37      	ldr	r3, [pc, #220]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1ef      	bne.n	8004ecc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004eec:	7bfb      	ldrb	r3, [r7, #15]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d160      	bne.n	8004fb4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d111      	bne.n	8004f1c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ef8:	4b31      	ldr	r3, [pc, #196]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6892      	ldr	r2, [r2, #8]
 8004f08:	0211      	lsls	r1, r2, #8
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	68d2      	ldr	r2, [r2, #12]
 8004f0e:	0912      	lsrs	r2, r2, #4
 8004f10:	0452      	lsls	r2, r2, #17
 8004f12:	430a      	orrs	r2, r1
 8004f14:	492a      	ldr	r1, [pc, #168]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f16:	4313      	orrs	r3, r2
 8004f18:	610b      	str	r3, [r1, #16]
 8004f1a:	e027      	b.n	8004f6c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d112      	bne.n	8004f48 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f22:	4b27      	ldr	r3, [pc, #156]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004f2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	6892      	ldr	r2, [r2, #8]
 8004f32:	0211      	lsls	r1, r2, #8
 8004f34:	687a      	ldr	r2, [r7, #4]
 8004f36:	6912      	ldr	r2, [r2, #16]
 8004f38:	0852      	lsrs	r2, r2, #1
 8004f3a:	3a01      	subs	r2, #1
 8004f3c:	0552      	lsls	r2, r2, #21
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	491f      	ldr	r1, [pc, #124]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	610b      	str	r3, [r1, #16]
 8004f46:	e011      	b.n	8004f6c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f48:	4b1d      	ldr	r3, [pc, #116]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6892      	ldr	r2, [r2, #8]
 8004f58:	0211      	lsls	r1, r2, #8
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	6952      	ldr	r2, [r2, #20]
 8004f5e:	0852      	lsrs	r2, r2, #1
 8004f60:	3a01      	subs	r2, #1
 8004f62:	0652      	lsls	r2, r2, #25
 8004f64:	430a      	orrs	r2, r1
 8004f66:	4916      	ldr	r1, [pc, #88]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f6c:	4b14      	ldr	r3, [pc, #80]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a13      	ldr	r2, [pc, #76]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f78:	f7fc ff56 	bl	8001e28 <HAL_GetTick>
 8004f7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f7e:	e009      	b.n	8004f94 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f80:	f7fc ff52 	bl	8001e28 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d902      	bls.n	8004f94 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	73fb      	strb	r3, [r7, #15]
          break;
 8004f92:	e005      	b.n	8004fa0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f94:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d0ef      	beq.n	8004f80 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa8:	691a      	ldr	r2, [r3, #16]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	4904      	ldr	r1, [pc, #16]	; (8004fc0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	40021000 	.word	0x40021000

08004fc4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fd2:	4b6a      	ldr	r3, [pc, #424]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d018      	beq.n	8005010 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fde:	4b67      	ldr	r3, [pc, #412]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f003 0203 	and.w	r2, r3, #3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d10d      	bne.n	800500a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d009      	beq.n	800500a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ff6:	4b61      	ldr	r3, [pc, #388]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	091b      	lsrs	r3, r3, #4
 8004ffc:	f003 0307 	and.w	r3, r3, #7
 8005000:	1c5a      	adds	r2, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	685b      	ldr	r3, [r3, #4]
       ||
 8005006:	429a      	cmp	r2, r3
 8005008:	d047      	beq.n	800509a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	73fb      	strb	r3, [r7, #15]
 800500e:	e044      	b.n	800509a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b03      	cmp	r3, #3
 8005016:	d018      	beq.n	800504a <RCCEx_PLLSAI2_Config+0x86>
 8005018:	2b03      	cmp	r3, #3
 800501a:	d825      	bhi.n	8005068 <RCCEx_PLLSAI2_Config+0xa4>
 800501c:	2b01      	cmp	r3, #1
 800501e:	d002      	beq.n	8005026 <RCCEx_PLLSAI2_Config+0x62>
 8005020:	2b02      	cmp	r3, #2
 8005022:	d009      	beq.n	8005038 <RCCEx_PLLSAI2_Config+0x74>
 8005024:	e020      	b.n	8005068 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005026:	4b55      	ldr	r3, [pc, #340]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d11d      	bne.n	800506e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005036:	e01a      	b.n	800506e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005038:	4b50      	ldr	r3, [pc, #320]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005040:	2b00      	cmp	r3, #0
 8005042:	d116      	bne.n	8005072 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005048:	e013      	b.n	8005072 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800504a:	4b4c      	ldr	r3, [pc, #304]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10f      	bne.n	8005076 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005056:	4b49      	ldr	r3, [pc, #292]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d109      	bne.n	8005076 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005066:	e006      	b.n	8005076 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	73fb      	strb	r3, [r7, #15]
      break;
 800506c:	e004      	b.n	8005078 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800506e:	bf00      	nop
 8005070:	e002      	b.n	8005078 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005072:	bf00      	nop
 8005074:	e000      	b.n	8005078 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005076:	bf00      	nop
    }

    if(status == HAL_OK)
 8005078:	7bfb      	ldrb	r3, [r7, #15]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10d      	bne.n	800509a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800507e:	4b3f      	ldr	r3, [pc, #252]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6819      	ldr	r1, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	3b01      	subs	r3, #1
 8005090:	011b      	lsls	r3, r3, #4
 8005092:	430b      	orrs	r3, r1
 8005094:	4939      	ldr	r1, [pc, #228]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005096:	4313      	orrs	r3, r2
 8005098:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d167      	bne.n	8005170 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80050a0:	4b36      	ldr	r3, [pc, #216]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a35      	ldr	r2, [pc, #212]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050ac:	f7fc febc 	bl	8001e28 <HAL_GetTick>
 80050b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050b2:	e009      	b.n	80050c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050b4:	f7fc feb8 	bl	8001e28 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d902      	bls.n	80050c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	73fb      	strb	r3, [r7, #15]
        break;
 80050c6:	e005      	b.n	80050d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050c8:	4b2c      	ldr	r3, [pc, #176]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ef      	bne.n	80050b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050d4:	7bfb      	ldrb	r3, [r7, #15]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d14a      	bne.n	8005170 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d111      	bne.n	8005104 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050e0:	4b26      	ldr	r3, [pc, #152]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80050e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6892      	ldr	r2, [r2, #8]
 80050f0:	0211      	lsls	r1, r2, #8
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	68d2      	ldr	r2, [r2, #12]
 80050f6:	0912      	lsrs	r2, r2, #4
 80050f8:	0452      	lsls	r2, r2, #17
 80050fa:	430a      	orrs	r2, r1
 80050fc:	491f      	ldr	r1, [pc, #124]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	614b      	str	r3, [r1, #20]
 8005102:	e011      	b.n	8005128 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005104:	4b1d      	ldr	r3, [pc, #116]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800510c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	6892      	ldr	r2, [r2, #8]
 8005114:	0211      	lsls	r1, r2, #8
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	6912      	ldr	r2, [r2, #16]
 800511a:	0852      	lsrs	r2, r2, #1
 800511c:	3a01      	subs	r2, #1
 800511e:	0652      	lsls	r2, r2, #25
 8005120:	430a      	orrs	r2, r1
 8005122:	4916      	ldr	r1, [pc, #88]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005124:	4313      	orrs	r3, r2
 8005126:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005128:	4b14      	ldr	r3, [pc, #80]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a13      	ldr	r2, [pc, #76]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 800512e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005132:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005134:	f7fc fe78 	bl	8001e28 <HAL_GetTick>
 8005138:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800513a:	e009      	b.n	8005150 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800513c:	f7fc fe74 	bl	8001e28 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d902      	bls.n	8005150 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	73fb      	strb	r3, [r7, #15]
          break;
 800514e:	e005      	b.n	800515c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005150:	4b0a      	ldr	r3, [pc, #40]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ef      	beq.n	800513c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005162:	4b06      	ldr	r3, [pc, #24]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005164:	695a      	ldr	r2, [r3, #20]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	4904      	ldr	r1, [pc, #16]	; (800517c <RCCEx_PLLSAI2_Config+0x1b8>)
 800516c:	4313      	orrs	r3, r2
 800516e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005170:	7bfb      	ldrb	r3, [r7, #15]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40021000 	.word	0x40021000

08005180 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e049      	b.n	8005226 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fc fbd2 	bl	8001950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	4610      	mov	r0, r2
 80051c0:	f000 fc4c 	bl	8005a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d101      	bne.n	8005240 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e049      	b.n	80052d4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d106      	bne.n	800525a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f7fc fb5b 	bl	8001910 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3304      	adds	r3, #4
 800526a:	4619      	mov	r1, r3
 800526c:	4610      	mov	r0, r2
 800526e:	f000 fbf5 	bl	8005a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2201      	movs	r2, #1
 800529e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d2:	2300      	movs	r3, #0
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}

080052dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e049      	b.n	8005382 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f841 	bl	800538a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	3304      	adds	r3, #4
 8005318:	4619      	mov	r1, r3
 800531a:	4610      	mov	r0, r2
 800531c:	f000 fb9e 	bl	8005a5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d109      	bne.n	80053c4 <HAL_TIM_PWM_Start+0x24>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	bf14      	ite	ne
 80053bc:	2301      	movne	r3, #1
 80053be:	2300      	moveq	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	e03c      	b.n	800543e <HAL_TIM_PWM_Start+0x9e>
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2b04      	cmp	r3, #4
 80053c8:	d109      	bne.n	80053de <HAL_TIM_PWM_Start+0x3e>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	bf14      	ite	ne
 80053d6:	2301      	movne	r3, #1
 80053d8:	2300      	moveq	r3, #0
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	e02f      	b.n	800543e <HAL_TIM_PWM_Start+0x9e>
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d109      	bne.n	80053f8 <HAL_TIM_PWM_Start+0x58>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	bf14      	ite	ne
 80053f0:	2301      	movne	r3, #1
 80053f2:	2300      	moveq	r3, #0
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	e022      	b.n	800543e <HAL_TIM_PWM_Start+0x9e>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b0c      	cmp	r3, #12
 80053fc:	d109      	bne.n	8005412 <HAL_TIM_PWM_Start+0x72>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b01      	cmp	r3, #1
 8005408:	bf14      	ite	ne
 800540a:	2301      	movne	r3, #1
 800540c:	2300      	moveq	r3, #0
 800540e:	b2db      	uxtb	r3, r3
 8005410:	e015      	b.n	800543e <HAL_TIM_PWM_Start+0x9e>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b10      	cmp	r3, #16
 8005416:	d109      	bne.n	800542c <HAL_TIM_PWM_Start+0x8c>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b01      	cmp	r3, #1
 8005422:	bf14      	ite	ne
 8005424:	2301      	movne	r3, #1
 8005426:	2300      	moveq	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	e008      	b.n	800543e <HAL_TIM_PWM_Start+0x9e>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b01      	cmp	r3, #1
 8005436:	bf14      	ite	ne
 8005438:	2301      	movne	r3, #1
 800543a:	2300      	moveq	r3, #0
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e09c      	b.n	8005580 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d104      	bne.n	8005456 <HAL_TIM_PWM_Start+0xb6>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005454:	e023      	b.n	800549e <HAL_TIM_PWM_Start+0xfe>
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	2b04      	cmp	r3, #4
 800545a:	d104      	bne.n	8005466 <HAL_TIM_PWM_Start+0xc6>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2202      	movs	r2, #2
 8005460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005464:	e01b      	b.n	800549e <HAL_TIM_PWM_Start+0xfe>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b08      	cmp	r3, #8
 800546a:	d104      	bne.n	8005476 <HAL_TIM_PWM_Start+0xd6>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005474:	e013      	b.n	800549e <HAL_TIM_PWM_Start+0xfe>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b0c      	cmp	r3, #12
 800547a:	d104      	bne.n	8005486 <HAL_TIM_PWM_Start+0xe6>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005484:	e00b      	b.n	800549e <HAL_TIM_PWM_Start+0xfe>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b10      	cmp	r3, #16
 800548a:	d104      	bne.n	8005496 <HAL_TIM_PWM_Start+0xf6>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005494:	e003      	b.n	800549e <HAL_TIM_PWM_Start+0xfe>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2201      	movs	r2, #1
 80054a4:	6839      	ldr	r1, [r7, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 fee2 	bl	8006270 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a35      	ldr	r2, [pc, #212]	; (8005588 <HAL_TIM_PWM_Start+0x1e8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d013      	beq.n	80054de <HAL_TIM_PWM_Start+0x13e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a34      	ldr	r2, [pc, #208]	; (800558c <HAL_TIM_PWM_Start+0x1ec>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d00e      	beq.n	80054de <HAL_TIM_PWM_Start+0x13e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a32      	ldr	r2, [pc, #200]	; (8005590 <HAL_TIM_PWM_Start+0x1f0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d009      	beq.n	80054de <HAL_TIM_PWM_Start+0x13e>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a31      	ldr	r2, [pc, #196]	; (8005594 <HAL_TIM_PWM_Start+0x1f4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d004      	beq.n	80054de <HAL_TIM_PWM_Start+0x13e>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a2f      	ldr	r2, [pc, #188]	; (8005598 <HAL_TIM_PWM_Start+0x1f8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d101      	bne.n	80054e2 <HAL_TIM_PWM_Start+0x142>
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <HAL_TIM_PWM_Start+0x144>
 80054e2:	2300      	movs	r3, #0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d007      	beq.n	80054f8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a22      	ldr	r2, [pc, #136]	; (8005588 <HAL_TIM_PWM_Start+0x1e8>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d01d      	beq.n	800553e <HAL_TIM_PWM_Start+0x19e>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550a:	d018      	beq.n	800553e <HAL_TIM_PWM_Start+0x19e>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a22      	ldr	r2, [pc, #136]	; (800559c <HAL_TIM_PWM_Start+0x1fc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d013      	beq.n	800553e <HAL_TIM_PWM_Start+0x19e>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a21      	ldr	r2, [pc, #132]	; (80055a0 <HAL_TIM_PWM_Start+0x200>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00e      	beq.n	800553e <HAL_TIM_PWM_Start+0x19e>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a1f      	ldr	r2, [pc, #124]	; (80055a4 <HAL_TIM_PWM_Start+0x204>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d009      	beq.n	800553e <HAL_TIM_PWM_Start+0x19e>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a17      	ldr	r2, [pc, #92]	; (800558c <HAL_TIM_PWM_Start+0x1ec>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d004      	beq.n	800553e <HAL_TIM_PWM_Start+0x19e>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a15      	ldr	r2, [pc, #84]	; (8005590 <HAL_TIM_PWM_Start+0x1f0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d115      	bne.n	800556a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	4b18      	ldr	r3, [pc, #96]	; (80055a8 <HAL_TIM_PWM_Start+0x208>)
 8005546:	4013      	ands	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b06      	cmp	r3, #6
 800554e:	d015      	beq.n	800557c <HAL_TIM_PWM_Start+0x1dc>
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005556:	d011      	beq.n	800557c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f042 0201 	orr.w	r2, r2, #1
 8005566:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005568:	e008      	b.n	800557c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f042 0201 	orr.w	r2, r2, #1
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	e000      	b.n	800557e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40012c00 	.word	0x40012c00
 800558c:	40013400 	.word	0x40013400
 8005590:	40014000 	.word	0x40014000
 8005594:	40014400 	.word	0x40014400
 8005598:	40014800 	.word	0x40014800
 800559c:	40000400 	.word	0x40000400
 80055a0:	40000800 	.word	0x40000800
 80055a4:	40000c00 	.word	0x40000c00
 80055a8:	00010007 	.word	0x00010007

080055ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055b8:	2300      	movs	r3, #0
 80055ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d101      	bne.n	80055ca <HAL_TIM_OC_ConfigChannel+0x1e>
 80055c6:	2302      	movs	r3, #2
 80055c8:	e066      	b.n	8005698 <HAL_TIM_OC_ConfigChannel+0xec>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b14      	cmp	r3, #20
 80055d6:	d857      	bhi.n	8005688 <HAL_TIM_OC_ConfigChannel+0xdc>
 80055d8:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80055da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055de:	bf00      	nop
 80055e0:	08005635 	.word	0x08005635
 80055e4:	08005689 	.word	0x08005689
 80055e8:	08005689 	.word	0x08005689
 80055ec:	08005689 	.word	0x08005689
 80055f0:	08005643 	.word	0x08005643
 80055f4:	08005689 	.word	0x08005689
 80055f8:	08005689 	.word	0x08005689
 80055fc:	08005689 	.word	0x08005689
 8005600:	08005651 	.word	0x08005651
 8005604:	08005689 	.word	0x08005689
 8005608:	08005689 	.word	0x08005689
 800560c:	08005689 	.word	0x08005689
 8005610:	0800565f 	.word	0x0800565f
 8005614:	08005689 	.word	0x08005689
 8005618:	08005689 	.word	0x08005689
 800561c:	08005689 	.word	0x08005689
 8005620:	0800566d 	.word	0x0800566d
 8005624:	08005689 	.word	0x08005689
 8005628:	08005689 	.word	0x08005689
 800562c:	08005689 	.word	0x08005689
 8005630:	0800567b 	.word	0x0800567b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	4618      	mov	r0, r3
 800563c:	f000 faa8 	bl	8005b90 <TIM_OC1_SetConfig>
      break;
 8005640:	e025      	b.n	800568e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fb31 	bl	8005cb0 <TIM_OC2_SetConfig>
      break;
 800564e:	e01e      	b.n	800568e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fbb4 	bl	8005dc4 <TIM_OC3_SetConfig>
      break;
 800565c:	e017      	b.n	800568e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68b9      	ldr	r1, [r7, #8]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fc35 	bl	8005ed4 <TIM_OC4_SetConfig>
      break;
 800566a:	e010      	b.n	800568e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fc98 	bl	8005fa8 <TIM_OC5_SetConfig>
      break;
 8005678:	e009      	b.n	800568e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	68b9      	ldr	r1, [r7, #8]
 8005680:	4618      	mov	r0, r3
 8005682:	f000 fcf5 	bl	8006070 <TIM_OC6_SetConfig>
      break;
 8005686:	e002      	b.n	800568e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	75fb      	strb	r3, [r7, #23]
      break;
 800568c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005696:	7dfb      	ldrb	r3, [r7, #23]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3718      	adds	r7, #24
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d101      	bne.n	80056be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056ba:	2302      	movs	r3, #2
 80056bc:	e0ff      	b.n	80058be <HAL_TIM_PWM_ConfigChannel+0x21e>
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2201      	movs	r2, #1
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b14      	cmp	r3, #20
 80056ca:	f200 80f0 	bhi.w	80058ae <HAL_TIM_PWM_ConfigChannel+0x20e>
 80056ce:	a201      	add	r2, pc, #4	; (adr r2, 80056d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d4:	08005729 	.word	0x08005729
 80056d8:	080058af 	.word	0x080058af
 80056dc:	080058af 	.word	0x080058af
 80056e0:	080058af 	.word	0x080058af
 80056e4:	08005769 	.word	0x08005769
 80056e8:	080058af 	.word	0x080058af
 80056ec:	080058af 	.word	0x080058af
 80056f0:	080058af 	.word	0x080058af
 80056f4:	080057ab 	.word	0x080057ab
 80056f8:	080058af 	.word	0x080058af
 80056fc:	080058af 	.word	0x080058af
 8005700:	080058af 	.word	0x080058af
 8005704:	080057eb 	.word	0x080057eb
 8005708:	080058af 	.word	0x080058af
 800570c:	080058af 	.word	0x080058af
 8005710:	080058af 	.word	0x080058af
 8005714:	0800582d 	.word	0x0800582d
 8005718:	080058af 	.word	0x080058af
 800571c:	080058af 	.word	0x080058af
 8005720:	080058af 	.word	0x080058af
 8005724:	0800586d 	.word	0x0800586d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68b9      	ldr	r1, [r7, #8]
 800572e:	4618      	mov	r0, r3
 8005730:	f000 fa2e 	bl	8005b90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699a      	ldr	r2, [r3, #24]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f042 0208 	orr.w	r2, r2, #8
 8005742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0204 	bic.w	r2, r2, #4
 8005752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6999      	ldr	r1, [r3, #24]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	691a      	ldr	r2, [r3, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	619a      	str	r2, [r3, #24]
      break;
 8005766:	e0a5      	b.n	80058b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68b9      	ldr	r1, [r7, #8]
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fa9e 	bl	8005cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005782:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005792:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6999      	ldr	r1, [r3, #24]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	021a      	lsls	r2, r3, #8
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	619a      	str	r2, [r3, #24]
      break;
 80057a8:	e084      	b.n	80058b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fb07 	bl	8005dc4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69da      	ldr	r2, [r3, #28]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f042 0208 	orr.w	r2, r2, #8
 80057c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69da      	ldr	r2, [r3, #28]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 0204 	bic.w	r2, r2, #4
 80057d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	69d9      	ldr	r1, [r3, #28]
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	61da      	str	r2, [r3, #28]
      break;
 80057e8:	e064      	b.n	80058b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68b9      	ldr	r1, [r7, #8]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fb6f 	bl	8005ed4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69da      	ldr	r2, [r3, #28]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005804:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69da      	ldr	r2, [r3, #28]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005814:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	69d9      	ldr	r1, [r3, #28]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	021a      	lsls	r2, r3, #8
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	61da      	str	r2, [r3, #28]
      break;
 800582a:	e043      	b.n	80058b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68b9      	ldr	r1, [r7, #8]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 fbb8 	bl	8005fa8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0208 	orr.w	r2, r2, #8
 8005846:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f022 0204 	bic.w	r2, r2, #4
 8005856:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	691a      	ldr	r2, [r3, #16]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800586a:	e023      	b.n	80058b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68b9      	ldr	r1, [r7, #8]
 8005872:	4618      	mov	r0, r3
 8005874:	f000 fbfc 	bl	8006070 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005886:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005896:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	021a      	lsls	r2, r3, #8
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80058ac:	e002      	b.n	80058b4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	75fb      	strb	r3, [r7, #23]
      break;
 80058b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop

080058c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058d2:	2300      	movs	r3, #0
 80058d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_TIM_ConfigClockSource+0x1c>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e0b6      	b.n	8005a52 <HAL_TIM_ConfigClockSource+0x18a>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005902:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800590e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005920:	d03e      	beq.n	80059a0 <HAL_TIM_ConfigClockSource+0xd8>
 8005922:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005926:	f200 8087 	bhi.w	8005a38 <HAL_TIM_ConfigClockSource+0x170>
 800592a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800592e:	f000 8086 	beq.w	8005a3e <HAL_TIM_ConfigClockSource+0x176>
 8005932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005936:	d87f      	bhi.n	8005a38 <HAL_TIM_ConfigClockSource+0x170>
 8005938:	2b70      	cmp	r3, #112	; 0x70
 800593a:	d01a      	beq.n	8005972 <HAL_TIM_ConfigClockSource+0xaa>
 800593c:	2b70      	cmp	r3, #112	; 0x70
 800593e:	d87b      	bhi.n	8005a38 <HAL_TIM_ConfigClockSource+0x170>
 8005940:	2b60      	cmp	r3, #96	; 0x60
 8005942:	d050      	beq.n	80059e6 <HAL_TIM_ConfigClockSource+0x11e>
 8005944:	2b60      	cmp	r3, #96	; 0x60
 8005946:	d877      	bhi.n	8005a38 <HAL_TIM_ConfigClockSource+0x170>
 8005948:	2b50      	cmp	r3, #80	; 0x50
 800594a:	d03c      	beq.n	80059c6 <HAL_TIM_ConfigClockSource+0xfe>
 800594c:	2b50      	cmp	r3, #80	; 0x50
 800594e:	d873      	bhi.n	8005a38 <HAL_TIM_ConfigClockSource+0x170>
 8005950:	2b40      	cmp	r3, #64	; 0x40
 8005952:	d058      	beq.n	8005a06 <HAL_TIM_ConfigClockSource+0x13e>
 8005954:	2b40      	cmp	r3, #64	; 0x40
 8005956:	d86f      	bhi.n	8005a38 <HAL_TIM_ConfigClockSource+0x170>
 8005958:	2b30      	cmp	r3, #48	; 0x30
 800595a:	d064      	beq.n	8005a26 <HAL_TIM_ConfigClockSource+0x15e>
 800595c:	2b30      	cmp	r3, #48	; 0x30
 800595e:	d86b      	bhi.n	8005a38 <HAL_TIM_ConfigClockSource+0x170>
 8005960:	2b20      	cmp	r3, #32
 8005962:	d060      	beq.n	8005a26 <HAL_TIM_ConfigClockSource+0x15e>
 8005964:	2b20      	cmp	r3, #32
 8005966:	d867      	bhi.n	8005a38 <HAL_TIM_ConfigClockSource+0x170>
 8005968:	2b00      	cmp	r3, #0
 800596a:	d05c      	beq.n	8005a26 <HAL_TIM_ConfigClockSource+0x15e>
 800596c:	2b10      	cmp	r3, #16
 800596e:	d05a      	beq.n	8005a26 <HAL_TIM_ConfigClockSource+0x15e>
 8005970:	e062      	b.n	8005a38 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005982:	f000 fc55 	bl	8006230 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005994:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	609a      	str	r2, [r3, #8]
      break;
 800599e:	e04f      	b.n	8005a40 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059b0:	f000 fc3e 	bl	8006230 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059c2:	609a      	str	r2, [r3, #8]
      break;
 80059c4:	e03c      	b.n	8005a40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059d2:	461a      	mov	r2, r3
 80059d4:	f000 fbb2 	bl	800613c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2150      	movs	r1, #80	; 0x50
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 fc0b 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 80059e4:	e02c      	b.n	8005a40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059f2:	461a      	mov	r2, r3
 80059f4:	f000 fbd1 	bl	800619a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2160      	movs	r1, #96	; 0x60
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fbfb 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 8005a04:	e01c      	b.n	8005a40 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a12:	461a      	mov	r2, r3
 8005a14:	f000 fb92 	bl	800613c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2140      	movs	r1, #64	; 0x40
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 fbeb 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 8005a24:	e00c      	b.n	8005a40 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4610      	mov	r0, r2
 8005a32:	f000 fbe2 	bl	80061fa <TIM_ITRx_SetConfig>
      break;
 8005a36:	e003      	b.n	8005a40 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a3c:	e000      	b.n	8005a40 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005a3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
	...

08005a5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a40      	ldr	r2, [pc, #256]	; (8005b70 <TIM_Base_SetConfig+0x114>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d013      	beq.n	8005a9c <TIM_Base_SetConfig+0x40>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7a:	d00f      	beq.n	8005a9c <TIM_Base_SetConfig+0x40>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a3d      	ldr	r2, [pc, #244]	; (8005b74 <TIM_Base_SetConfig+0x118>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00b      	beq.n	8005a9c <TIM_Base_SetConfig+0x40>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a3c      	ldr	r2, [pc, #240]	; (8005b78 <TIM_Base_SetConfig+0x11c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d007      	beq.n	8005a9c <TIM_Base_SetConfig+0x40>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a3b      	ldr	r2, [pc, #236]	; (8005b7c <TIM_Base_SetConfig+0x120>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d003      	beq.n	8005a9c <TIM_Base_SetConfig+0x40>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a3a      	ldr	r2, [pc, #232]	; (8005b80 <TIM_Base_SetConfig+0x124>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d108      	bne.n	8005aae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a2f      	ldr	r2, [pc, #188]	; (8005b70 <TIM_Base_SetConfig+0x114>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d01f      	beq.n	8005af6 <TIM_Base_SetConfig+0x9a>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005abc:	d01b      	beq.n	8005af6 <TIM_Base_SetConfig+0x9a>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a2c      	ldr	r2, [pc, #176]	; (8005b74 <TIM_Base_SetConfig+0x118>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d017      	beq.n	8005af6 <TIM_Base_SetConfig+0x9a>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a2b      	ldr	r2, [pc, #172]	; (8005b78 <TIM_Base_SetConfig+0x11c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d013      	beq.n	8005af6 <TIM_Base_SetConfig+0x9a>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a2a      	ldr	r2, [pc, #168]	; (8005b7c <TIM_Base_SetConfig+0x120>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d00f      	beq.n	8005af6 <TIM_Base_SetConfig+0x9a>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a29      	ldr	r2, [pc, #164]	; (8005b80 <TIM_Base_SetConfig+0x124>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d00b      	beq.n	8005af6 <TIM_Base_SetConfig+0x9a>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a28      	ldr	r2, [pc, #160]	; (8005b84 <TIM_Base_SetConfig+0x128>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d007      	beq.n	8005af6 <TIM_Base_SetConfig+0x9a>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a27      	ldr	r2, [pc, #156]	; (8005b88 <TIM_Base_SetConfig+0x12c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d003      	beq.n	8005af6 <TIM_Base_SetConfig+0x9a>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a26      	ldr	r2, [pc, #152]	; (8005b8c <TIM_Base_SetConfig+0x130>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d108      	bne.n	8005b08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005afc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	695b      	ldr	r3, [r3, #20]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	689a      	ldr	r2, [r3, #8]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a10      	ldr	r2, [pc, #64]	; (8005b70 <TIM_Base_SetConfig+0x114>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d00f      	beq.n	8005b54 <TIM_Base_SetConfig+0xf8>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a12      	ldr	r2, [pc, #72]	; (8005b80 <TIM_Base_SetConfig+0x124>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00b      	beq.n	8005b54 <TIM_Base_SetConfig+0xf8>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a11      	ldr	r2, [pc, #68]	; (8005b84 <TIM_Base_SetConfig+0x128>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d007      	beq.n	8005b54 <TIM_Base_SetConfig+0xf8>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a10      	ldr	r2, [pc, #64]	; (8005b88 <TIM_Base_SetConfig+0x12c>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <TIM_Base_SetConfig+0xf8>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a0f      	ldr	r2, [pc, #60]	; (8005b8c <TIM_Base_SetConfig+0x130>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d103      	bne.n	8005b5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	691a      	ldr	r2, [r3, #16]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	615a      	str	r2, [r3, #20]
}
 8005b62:	bf00      	nop
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	40012c00 	.word	0x40012c00
 8005b74:	40000400 	.word	0x40000400
 8005b78:	40000800 	.word	0x40000800
 8005b7c:	40000c00 	.word	0x40000c00
 8005b80:	40013400 	.word	0x40013400
 8005b84:	40014000 	.word	0x40014000
 8005b88:	40014400 	.word	0x40014400
 8005b8c:	40014800 	.word	0x40014800

08005b90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b087      	sub	sp, #28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a1b      	ldr	r3, [r3, #32]
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6a1b      	ldr	r3, [r3, #32]
 8005ba4:	f023 0201 	bic.w	r2, r3, #1
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	699b      	ldr	r3, [r3, #24]
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0303 	bic.w	r3, r3, #3
 8005bca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f023 0302 	bic.w	r3, r3, #2
 8005bdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a2c      	ldr	r2, [pc, #176]	; (8005c9c <TIM_OC1_SetConfig+0x10c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00f      	beq.n	8005c10 <TIM_OC1_SetConfig+0x80>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a2b      	ldr	r2, [pc, #172]	; (8005ca0 <TIM_OC1_SetConfig+0x110>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00b      	beq.n	8005c10 <TIM_OC1_SetConfig+0x80>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a2a      	ldr	r2, [pc, #168]	; (8005ca4 <TIM_OC1_SetConfig+0x114>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d007      	beq.n	8005c10 <TIM_OC1_SetConfig+0x80>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a29      	ldr	r2, [pc, #164]	; (8005ca8 <TIM_OC1_SetConfig+0x118>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <TIM_OC1_SetConfig+0x80>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a28      	ldr	r2, [pc, #160]	; (8005cac <TIM_OC1_SetConfig+0x11c>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d10c      	bne.n	8005c2a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	f023 0308 	bic.w	r3, r3, #8
 8005c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	f023 0304 	bic.w	r3, r3, #4
 8005c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a1b      	ldr	r2, [pc, #108]	; (8005c9c <TIM_OC1_SetConfig+0x10c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d00f      	beq.n	8005c52 <TIM_OC1_SetConfig+0xc2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a1a      	ldr	r2, [pc, #104]	; (8005ca0 <TIM_OC1_SetConfig+0x110>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d00b      	beq.n	8005c52 <TIM_OC1_SetConfig+0xc2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a19      	ldr	r2, [pc, #100]	; (8005ca4 <TIM_OC1_SetConfig+0x114>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d007      	beq.n	8005c52 <TIM_OC1_SetConfig+0xc2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a18      	ldr	r2, [pc, #96]	; (8005ca8 <TIM_OC1_SetConfig+0x118>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d003      	beq.n	8005c52 <TIM_OC1_SetConfig+0xc2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a17      	ldr	r2, [pc, #92]	; (8005cac <TIM_OC1_SetConfig+0x11c>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d111      	bne.n	8005c76 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	695b      	ldr	r3, [r3, #20]
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4313      	orrs	r3, r2
 8005c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	68fa      	ldr	r2, [r7, #12]
 8005c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685a      	ldr	r2, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	697a      	ldr	r2, [r7, #20]
 8005c8e:	621a      	str	r2, [r3, #32]
}
 8005c90:	bf00      	nop
 8005c92:	371c      	adds	r7, #28
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	40012c00 	.word	0x40012c00
 8005ca0:	40013400 	.word	0x40013400
 8005ca4:	40014000 	.word	0x40014000
 8005ca8:	40014400 	.word	0x40014400
 8005cac:	40014800 	.word	0x40014800

08005cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	f023 0210 	bic.w	r2, r3, #16
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	699b      	ldr	r3, [r3, #24]
 8005cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	021b      	lsls	r3, r3, #8
 8005cf2:	68fa      	ldr	r2, [r7, #12]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	f023 0320 	bic.w	r3, r3, #32
 8005cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	011b      	lsls	r3, r3, #4
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a28      	ldr	r2, [pc, #160]	; (8005db0 <TIM_OC2_SetConfig+0x100>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_OC2_SetConfig+0x6c>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a27      	ldr	r2, [pc, #156]	; (8005db4 <TIM_OC2_SetConfig+0x104>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d10d      	bne.n	8005d38 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a1d      	ldr	r2, [pc, #116]	; (8005db0 <TIM_OC2_SetConfig+0x100>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00f      	beq.n	8005d60 <TIM_OC2_SetConfig+0xb0>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a1c      	ldr	r2, [pc, #112]	; (8005db4 <TIM_OC2_SetConfig+0x104>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d00b      	beq.n	8005d60 <TIM_OC2_SetConfig+0xb0>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a1b      	ldr	r2, [pc, #108]	; (8005db8 <TIM_OC2_SetConfig+0x108>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d007      	beq.n	8005d60 <TIM_OC2_SetConfig+0xb0>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a1a      	ldr	r2, [pc, #104]	; (8005dbc <TIM_OC2_SetConfig+0x10c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d003      	beq.n	8005d60 <TIM_OC2_SetConfig+0xb0>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	4a19      	ldr	r2, [pc, #100]	; (8005dc0 <TIM_OC2_SetConfig+0x110>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d113      	bne.n	8005d88 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	699b      	ldr	r3, [r3, #24]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	621a      	str	r2, [r3, #32]
}
 8005da2:	bf00      	nop
 8005da4:	371c      	adds	r7, #28
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	40012c00 	.word	0x40012c00
 8005db4:	40013400 	.word	0x40013400
 8005db8:	40014000 	.word	0x40014000
 8005dbc:	40014400 	.word	0x40014400
 8005dc0:	40014800 	.word	0x40014800

08005dc4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b087      	sub	sp, #28
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
 8005dd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6a1b      	ldr	r3, [r3, #32]
 8005dd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	69db      	ldr	r3, [r3, #28]
 8005dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0303 	bic.w	r3, r3, #3
 8005dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	021b      	lsls	r3, r3, #8
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a27      	ldr	r2, [pc, #156]	; (8005ec0 <TIM_OC3_SetConfig+0xfc>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d003      	beq.n	8005e2e <TIM_OC3_SetConfig+0x6a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a26      	ldr	r2, [pc, #152]	; (8005ec4 <TIM_OC3_SetConfig+0x100>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d10d      	bne.n	8005e4a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a1c      	ldr	r2, [pc, #112]	; (8005ec0 <TIM_OC3_SetConfig+0xfc>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d00f      	beq.n	8005e72 <TIM_OC3_SetConfig+0xae>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a1b      	ldr	r2, [pc, #108]	; (8005ec4 <TIM_OC3_SetConfig+0x100>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d00b      	beq.n	8005e72 <TIM_OC3_SetConfig+0xae>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a1a      	ldr	r2, [pc, #104]	; (8005ec8 <TIM_OC3_SetConfig+0x104>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d007      	beq.n	8005e72 <TIM_OC3_SetConfig+0xae>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a19      	ldr	r2, [pc, #100]	; (8005ecc <TIM_OC3_SetConfig+0x108>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d003      	beq.n	8005e72 <TIM_OC3_SetConfig+0xae>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a18      	ldr	r2, [pc, #96]	; (8005ed0 <TIM_OC3_SetConfig+0x10c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d113      	bne.n	8005e9a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	011b      	lsls	r3, r3, #4
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	697a      	ldr	r2, [r7, #20]
 8005eb2:	621a      	str	r2, [r3, #32]
}
 8005eb4:	bf00      	nop
 8005eb6:	371c      	adds	r7, #28
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	40012c00 	.word	0x40012c00
 8005ec4:	40013400 	.word	0x40013400
 8005ec8:	40014000 	.word	0x40014000
 8005ecc:	40014400 	.word	0x40014400
 8005ed0:	40014800 	.word	0x40014800

08005ed4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a1b      	ldr	r3, [r3, #32]
 8005ee2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	021b      	lsls	r3, r3, #8
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	031b      	lsls	r3, r3, #12
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a18      	ldr	r2, [pc, #96]	; (8005f94 <TIM_OC4_SetConfig+0xc0>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00f      	beq.n	8005f58 <TIM_OC4_SetConfig+0x84>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a17      	ldr	r2, [pc, #92]	; (8005f98 <TIM_OC4_SetConfig+0xc4>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d00b      	beq.n	8005f58 <TIM_OC4_SetConfig+0x84>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a16      	ldr	r2, [pc, #88]	; (8005f9c <TIM_OC4_SetConfig+0xc8>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d007      	beq.n	8005f58 <TIM_OC4_SetConfig+0x84>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a15      	ldr	r2, [pc, #84]	; (8005fa0 <TIM_OC4_SetConfig+0xcc>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d003      	beq.n	8005f58 <TIM_OC4_SetConfig+0x84>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a14      	ldr	r2, [pc, #80]	; (8005fa4 <TIM_OC4_SetConfig+0xd0>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d109      	bne.n	8005f6c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	695b      	ldr	r3, [r3, #20]
 8005f64:	019b      	lsls	r3, r3, #6
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	621a      	str	r2, [r3, #32]
}
 8005f86:	bf00      	nop
 8005f88:	371c      	adds	r7, #28
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	40012c00 	.word	0x40012c00
 8005f98:	40013400 	.word	0x40013400
 8005f9c:	40014000 	.word	0x40014000
 8005fa0:	40014400 	.word	0x40014400
 8005fa4:	40014800 	.word	0x40014800

08005fa8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	041b      	lsls	r3, r3, #16
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a17      	ldr	r2, [pc, #92]	; (800605c <TIM_OC5_SetConfig+0xb4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d00f      	beq.n	8006022 <TIM_OC5_SetConfig+0x7a>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	4a16      	ldr	r2, [pc, #88]	; (8006060 <TIM_OC5_SetConfig+0xb8>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d00b      	beq.n	8006022 <TIM_OC5_SetConfig+0x7a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a15      	ldr	r2, [pc, #84]	; (8006064 <TIM_OC5_SetConfig+0xbc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d007      	beq.n	8006022 <TIM_OC5_SetConfig+0x7a>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a14      	ldr	r2, [pc, #80]	; (8006068 <TIM_OC5_SetConfig+0xc0>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d003      	beq.n	8006022 <TIM_OC5_SetConfig+0x7a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a13      	ldr	r2, [pc, #76]	; (800606c <TIM_OC5_SetConfig+0xc4>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d109      	bne.n	8006036 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006028:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	693a      	ldr	r2, [r7, #16]
 800604e:	621a      	str	r2, [r3, #32]
}
 8006050:	bf00      	nop
 8006052:	371c      	adds	r7, #28
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	40012c00 	.word	0x40012c00
 8006060:	40013400 	.word	0x40013400
 8006064:	40014000 	.word	0x40014000
 8006068:	40014400 	.word	0x40014400
 800606c:	40014800 	.word	0x40014800

08006070 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a1b      	ldr	r3, [r3, #32]
 8006084:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800609e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	021b      	lsls	r3, r3, #8
 80060aa:	68fa      	ldr	r2, [r7, #12]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80060b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	051b      	lsls	r3, r3, #20
 80060be:	693a      	ldr	r2, [r7, #16]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a18      	ldr	r2, [pc, #96]	; (8006128 <TIM_OC6_SetConfig+0xb8>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d00f      	beq.n	80060ec <TIM_OC6_SetConfig+0x7c>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a17      	ldr	r2, [pc, #92]	; (800612c <TIM_OC6_SetConfig+0xbc>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d00b      	beq.n	80060ec <TIM_OC6_SetConfig+0x7c>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a16      	ldr	r2, [pc, #88]	; (8006130 <TIM_OC6_SetConfig+0xc0>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d007      	beq.n	80060ec <TIM_OC6_SetConfig+0x7c>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a15      	ldr	r2, [pc, #84]	; (8006134 <TIM_OC6_SetConfig+0xc4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d003      	beq.n	80060ec <TIM_OC6_SetConfig+0x7c>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a14      	ldr	r2, [pc, #80]	; (8006138 <TIM_OC6_SetConfig+0xc8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d109      	bne.n	8006100 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	029b      	lsls	r3, r3, #10
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40013400 	.word	0x40013400
 8006130:	40014000 	.word	0x40014000
 8006134:	40014400 	.word	0x40014400
 8006138:	40014800 	.word	0x40014800

0800613c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a1b      	ldr	r3, [r3, #32]
 8006152:	f023 0201 	bic.w	r2, r3, #1
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	4313      	orrs	r3, r2
 8006170:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f023 030a 	bic.w	r3, r3, #10
 8006178:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	693a      	ldr	r2, [r7, #16]
 8006186:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	697a      	ldr	r2, [r7, #20]
 800618c:	621a      	str	r2, [r3, #32]
}
 800618e:	bf00      	nop
 8006190:	371c      	adds	r7, #28
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr

0800619a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800619a:	b480      	push	{r7}
 800619c:	b087      	sub	sp, #28
 800619e:	af00      	add	r7, sp, #0
 80061a0:	60f8      	str	r0, [r7, #12]
 80061a2:	60b9      	str	r1, [r7, #8]
 80061a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	f023 0210 	bic.w	r2, r3, #16
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	031b      	lsls	r3, r3, #12
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006210:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	f043 0307 	orr.w	r3, r3, #7
 800621c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	609a      	str	r2, [r3, #8]
}
 8006224:	bf00      	nop
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800624a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	021a      	lsls	r2, r3, #8
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	431a      	orrs	r2, r3
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4313      	orrs	r3, r2
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	609a      	str	r2, [r3, #8]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 031f 	and.w	r3, r3, #31
 8006282:	2201      	movs	r2, #1
 8006284:	fa02 f303 	lsl.w	r3, r2, r3
 8006288:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6a1a      	ldr	r2, [r3, #32]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	43db      	mvns	r3, r3
 8006292:	401a      	ands	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a1a      	ldr	r2, [r3, #32]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	f003 031f 	and.w	r3, r3, #31
 80062a2:	6879      	ldr	r1, [r7, #4]
 80062a4:	fa01 f303 	lsl.w	r3, r1, r3
 80062a8:	431a      	orrs	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	621a      	str	r2, [r3, #32]
}
 80062ae:	bf00      	nop
 80062b0:	371c      	adds	r7, #28
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
	...

080062bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e068      	b.n	80063a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2202      	movs	r2, #2
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a2e      	ldr	r2, [pc, #184]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a2d      	ldr	r2, [pc, #180]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d108      	bne.n	800631a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800630e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	4313      	orrs	r3, r2
 8006318:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006320:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a1e      	ldr	r2, [pc, #120]	; (80063b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d01d      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006346:	d018      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1b      	ldr	r2, [pc, #108]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1a      	ldr	r2, [pc, #104]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d00e      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a18      	ldr	r2, [pc, #96]	; (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d009      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a13      	ldr	r2, [pc, #76]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d004      	beq.n	800637a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a14      	ldr	r2, [pc, #80]	; (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d10c      	bne.n	8006394 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006380:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	4313      	orrs	r3, r2
 800638a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40012c00 	.word	0x40012c00
 80063b8:	40013400 	.word	0x40013400
 80063bc:	40000400 	.word	0x40000400
 80063c0:	40000800 	.word	0x40000800
 80063c4:	40000c00 	.word	0x40000c00
 80063c8:	40014000 	.word	0x40014000

080063cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	d101      	bne.n	80063e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063e4:	2302      	movs	r3, #2
 80063e6:	e065      	b.n	80064b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4313      	orrs	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	4313      	orrs	r3, r2
 8006450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	041b      	lsls	r3, r3, #16
 800645e:	4313      	orrs	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a16      	ldr	r2, [pc, #88]	; (80064c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d004      	beq.n	8006476 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a14      	ldr	r2, [pc, #80]	; (80064c4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d115      	bne.n	80064a2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	051b      	lsls	r3, r3, #20
 8006482:	4313      	orrs	r3, r2
 8006484:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	4313      	orrs	r3, r2
 8006492:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	4313      	orrs	r3, r2
 80064a0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	40012c00 	.word	0x40012c00
 80064c4:	40013400 	.word	0x40013400

080064c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e040      	b.n	800655c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d106      	bne.n	80064f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fb faac 	bl	8001a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2224      	movs	r2, #36	; 0x24
 80064f4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f022 0201 	bic.w	r2, r2, #1
 8006504:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fc34 	bl	8006d7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f979 	bl	800680c <UART_SetConfig>
 800651a:	4603      	mov	r3, r0
 800651c:	2b01      	cmp	r3, #1
 800651e:	d101      	bne.n	8006524 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e01b      	b.n	800655c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	685a      	ldr	r2, [r3, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006532:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	689a      	ldr	r2, [r3, #8]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006542:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f042 0201 	orr.w	r2, r2, #1
 8006552:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fcb3 	bl	8006ec0 <UART_CheckIdleState>
 800655a:	4603      	mov	r3, r0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08a      	sub	sp, #40	; 0x28
 8006568:	af02      	add	r7, sp, #8
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	603b      	str	r3, [r7, #0]
 8006570:	4613      	mov	r3, r2
 8006572:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006578:	2b20      	cmp	r3, #32
 800657a:	d178      	bne.n	800666e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d002      	beq.n	8006588 <HAL_UART_Transmit+0x24>
 8006582:	88fb      	ldrh	r3, [r7, #6]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e071      	b.n	8006670 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2200      	movs	r2, #0
 8006590:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2221      	movs	r2, #33	; 0x21
 8006598:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800659a:	f7fb fc45 	bl	8001e28 <HAL_GetTick>
 800659e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	88fa      	ldrh	r2, [r7, #6]
 80065a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	88fa      	ldrh	r2, [r7, #6]
 80065ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b8:	d108      	bne.n	80065cc <HAL_UART_Transmit+0x68>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d104      	bne.n	80065cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	e003      	b.n	80065d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80065d4:	e030      	b.n	8006638 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2200      	movs	r2, #0
 80065de:	2180      	movs	r1, #128	; 0x80
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 fd15 	bl	8007010 <UART_WaitOnFlagUntilTimeout>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d004      	beq.n	80065f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2220      	movs	r2, #32
 80065f0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	e03c      	b.n	8006670 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10b      	bne.n	8006614 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	881a      	ldrh	r2, [r3, #0]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006608:	b292      	uxth	r2, r2
 800660a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800660c:	69bb      	ldr	r3, [r7, #24]
 800660e:	3302      	adds	r3, #2
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	e008      	b.n	8006626 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	781a      	ldrb	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	b292      	uxth	r2, r2
 800661e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	3301      	adds	r3, #1
 8006624:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800662c:	b29b      	uxth	r3, r3
 800662e:	3b01      	subs	r3, #1
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800663e:	b29b      	uxth	r3, r3
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1c8      	bne.n	80065d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2200      	movs	r2, #0
 800664c:	2140      	movs	r1, #64	; 0x40
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 fcde 	bl	8007010 <UART_WaitOnFlagUntilTimeout>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d004      	beq.n	8006664 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2220      	movs	r2, #32
 800665e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006660:	2303      	movs	r3, #3
 8006662:	e005      	b.n	8006670 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2220      	movs	r2, #32
 8006668:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	e000      	b.n	8006670 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800666e:	2302      	movs	r3, #2
  }
}
 8006670:	4618      	mov	r0, r3
 8006672:	3720      	adds	r7, #32
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b08a      	sub	sp, #40	; 0x28
 800667c:	af02      	add	r7, sp, #8
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	603b      	str	r3, [r7, #0]
 8006684:	4613      	mov	r3, r2
 8006686:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800668e:	2b20      	cmp	r3, #32
 8006690:	f040 80b6 	bne.w	8006800 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <HAL_UART_Receive+0x28>
 800669a:	88fb      	ldrh	r3, [r7, #6]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d101      	bne.n	80066a4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e0ae      	b.n	8006802 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2222      	movs	r2, #34	; 0x22
 80066b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2200      	movs	r2, #0
 80066b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066ba:	f7fb fbb5 	bl	8001e28 <HAL_GetTick>
 80066be:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	88fa      	ldrh	r2, [r7, #6]
 80066c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	88fa      	ldrh	r2, [r7, #6]
 80066cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066d8:	d10e      	bne.n	80066f8 <HAL_UART_Receive+0x80>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d105      	bne.n	80066ee <HAL_UART_Receive+0x76>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80066e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066ec:	e02d      	b.n	800674a <HAL_UART_Receive+0xd2>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	22ff      	movs	r2, #255	; 0xff
 80066f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80066f6:	e028      	b.n	800674a <HAL_UART_Receive+0xd2>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d10d      	bne.n	800671c <HAL_UART_Receive+0xa4>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d104      	bne.n	8006712 <HAL_UART_Receive+0x9a>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	22ff      	movs	r2, #255	; 0xff
 800670c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006710:	e01b      	b.n	800674a <HAL_UART_Receive+0xd2>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	227f      	movs	r2, #127	; 0x7f
 8006716:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800671a:	e016      	b.n	800674a <HAL_UART_Receive+0xd2>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006724:	d10d      	bne.n	8006742 <HAL_UART_Receive+0xca>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d104      	bne.n	8006738 <HAL_UART_Receive+0xc0>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	227f      	movs	r2, #127	; 0x7f
 8006732:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006736:	e008      	b.n	800674a <HAL_UART_Receive+0xd2>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	223f      	movs	r2, #63	; 0x3f
 800673c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006740:	e003      	b.n	800674a <HAL_UART_Receive+0xd2>
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006750:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675a:	d108      	bne.n	800676e <HAL_UART_Receive+0xf6>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d104      	bne.n	800676e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006764:	2300      	movs	r3, #0
 8006766:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	61bb      	str	r3, [r7, #24]
 800676c:	e003      	b.n	8006776 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006772:	2300      	movs	r3, #0
 8006774:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006776:	e037      	b.n	80067e8 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	2200      	movs	r2, #0
 8006780:	2120      	movs	r1, #32
 8006782:	68f8      	ldr	r0, [r7, #12]
 8006784:	f000 fc44 	bl	8007010 <UART_WaitOnFlagUntilTimeout>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d005      	beq.n	800679a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2220      	movs	r2, #32
 8006792:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e033      	b.n	8006802 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800679a:	69fb      	ldr	r3, [r7, #28]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10c      	bne.n	80067ba <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	8a7b      	ldrh	r3, [r7, #18]
 80067aa:	4013      	ands	r3, r2
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	3302      	adds	r3, #2
 80067b6:	61bb      	str	r3, [r7, #24]
 80067b8:	e00d      	b.n	80067d6 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	b2da      	uxtb	r2, r3
 80067c4:	8a7b      	ldrh	r3, [r7, #18]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	4013      	ands	r3, r2
 80067ca:	b2da      	uxtb	r2, r3
 80067cc:	69fb      	ldr	r3, [r7, #28]
 80067ce:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	3301      	adds	r3, #1
 80067d4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067dc:	b29b      	uxth	r3, r3
 80067de:	3b01      	subs	r3, #1
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1c1      	bne.n	8006778 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80067fc:	2300      	movs	r3, #0
 80067fe:	e000      	b.n	8006802 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006800:	2302      	movs	r3, #2
  }
}
 8006802:	4618      	mov	r0, r3
 8006804:	3720      	adds	r7, #32
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800680c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006810:	b08a      	sub	sp, #40	; 0x28
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006816:	2300      	movs	r3, #0
 8006818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	431a      	orrs	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	431a      	orrs	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	4313      	orrs	r3, r2
 8006832:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	4ba4      	ldr	r3, [pc, #656]	; (8006acc <UART_SetConfig+0x2c0>)
 800683c:	4013      	ands	r3, r2
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	6812      	ldr	r2, [r2, #0]
 8006842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006844:	430b      	orrs	r3, r1
 8006846:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a99      	ldr	r2, [pc, #612]	; (8006ad0 <UART_SetConfig+0x2c4>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d004      	beq.n	8006878 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006874:	4313      	orrs	r3, r2
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006888:	430a      	orrs	r2, r1
 800688a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a90      	ldr	r2, [pc, #576]	; (8006ad4 <UART_SetConfig+0x2c8>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d126      	bne.n	80068e4 <UART_SetConfig+0xd8>
 8006896:	4b90      	ldr	r3, [pc, #576]	; (8006ad8 <UART_SetConfig+0x2cc>)
 8006898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689c:	f003 0303 	and.w	r3, r3, #3
 80068a0:	2b03      	cmp	r3, #3
 80068a2:	d81b      	bhi.n	80068dc <UART_SetConfig+0xd0>
 80068a4:	a201      	add	r2, pc, #4	; (adr r2, 80068ac <UART_SetConfig+0xa0>)
 80068a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068aa:	bf00      	nop
 80068ac:	080068bd 	.word	0x080068bd
 80068b0:	080068cd 	.word	0x080068cd
 80068b4:	080068c5 	.word	0x080068c5
 80068b8:	080068d5 	.word	0x080068d5
 80068bc:	2301      	movs	r3, #1
 80068be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068c2:	e116      	b.n	8006af2 <UART_SetConfig+0x2e6>
 80068c4:	2302      	movs	r3, #2
 80068c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ca:	e112      	b.n	8006af2 <UART_SetConfig+0x2e6>
 80068cc:	2304      	movs	r3, #4
 80068ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d2:	e10e      	b.n	8006af2 <UART_SetConfig+0x2e6>
 80068d4:	2308      	movs	r3, #8
 80068d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068da:	e10a      	b.n	8006af2 <UART_SetConfig+0x2e6>
 80068dc:	2310      	movs	r3, #16
 80068de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068e2:	e106      	b.n	8006af2 <UART_SetConfig+0x2e6>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a7c      	ldr	r2, [pc, #496]	; (8006adc <UART_SetConfig+0x2d0>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d138      	bne.n	8006960 <UART_SetConfig+0x154>
 80068ee:	4b7a      	ldr	r3, [pc, #488]	; (8006ad8 <UART_SetConfig+0x2cc>)
 80068f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f4:	f003 030c 	and.w	r3, r3, #12
 80068f8:	2b0c      	cmp	r3, #12
 80068fa:	d82d      	bhi.n	8006958 <UART_SetConfig+0x14c>
 80068fc:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <UART_SetConfig+0xf8>)
 80068fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006902:	bf00      	nop
 8006904:	08006939 	.word	0x08006939
 8006908:	08006959 	.word	0x08006959
 800690c:	08006959 	.word	0x08006959
 8006910:	08006959 	.word	0x08006959
 8006914:	08006949 	.word	0x08006949
 8006918:	08006959 	.word	0x08006959
 800691c:	08006959 	.word	0x08006959
 8006920:	08006959 	.word	0x08006959
 8006924:	08006941 	.word	0x08006941
 8006928:	08006959 	.word	0x08006959
 800692c:	08006959 	.word	0x08006959
 8006930:	08006959 	.word	0x08006959
 8006934:	08006951 	.word	0x08006951
 8006938:	2300      	movs	r3, #0
 800693a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693e:	e0d8      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006940:	2302      	movs	r3, #2
 8006942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006946:	e0d4      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006948:	2304      	movs	r3, #4
 800694a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694e:	e0d0      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006950:	2308      	movs	r3, #8
 8006952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006956:	e0cc      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006958:	2310      	movs	r3, #16
 800695a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695e:	e0c8      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a5e      	ldr	r2, [pc, #376]	; (8006ae0 <UART_SetConfig+0x2d4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d125      	bne.n	80069b6 <UART_SetConfig+0x1aa>
 800696a:	4b5b      	ldr	r3, [pc, #364]	; (8006ad8 <UART_SetConfig+0x2cc>)
 800696c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006970:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006974:	2b30      	cmp	r3, #48	; 0x30
 8006976:	d016      	beq.n	80069a6 <UART_SetConfig+0x19a>
 8006978:	2b30      	cmp	r3, #48	; 0x30
 800697a:	d818      	bhi.n	80069ae <UART_SetConfig+0x1a2>
 800697c:	2b20      	cmp	r3, #32
 800697e:	d00a      	beq.n	8006996 <UART_SetConfig+0x18a>
 8006980:	2b20      	cmp	r3, #32
 8006982:	d814      	bhi.n	80069ae <UART_SetConfig+0x1a2>
 8006984:	2b00      	cmp	r3, #0
 8006986:	d002      	beq.n	800698e <UART_SetConfig+0x182>
 8006988:	2b10      	cmp	r3, #16
 800698a:	d008      	beq.n	800699e <UART_SetConfig+0x192>
 800698c:	e00f      	b.n	80069ae <UART_SetConfig+0x1a2>
 800698e:	2300      	movs	r3, #0
 8006990:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006994:	e0ad      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006996:	2302      	movs	r3, #2
 8006998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800699c:	e0a9      	b.n	8006af2 <UART_SetConfig+0x2e6>
 800699e:	2304      	movs	r3, #4
 80069a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a4:	e0a5      	b.n	8006af2 <UART_SetConfig+0x2e6>
 80069a6:	2308      	movs	r3, #8
 80069a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ac:	e0a1      	b.n	8006af2 <UART_SetConfig+0x2e6>
 80069ae:	2310      	movs	r3, #16
 80069b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069b4:	e09d      	b.n	8006af2 <UART_SetConfig+0x2e6>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a4a      	ldr	r2, [pc, #296]	; (8006ae4 <UART_SetConfig+0x2d8>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d125      	bne.n	8006a0c <UART_SetConfig+0x200>
 80069c0:	4b45      	ldr	r3, [pc, #276]	; (8006ad8 <UART_SetConfig+0x2cc>)
 80069c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069ca:	2bc0      	cmp	r3, #192	; 0xc0
 80069cc:	d016      	beq.n	80069fc <UART_SetConfig+0x1f0>
 80069ce:	2bc0      	cmp	r3, #192	; 0xc0
 80069d0:	d818      	bhi.n	8006a04 <UART_SetConfig+0x1f8>
 80069d2:	2b80      	cmp	r3, #128	; 0x80
 80069d4:	d00a      	beq.n	80069ec <UART_SetConfig+0x1e0>
 80069d6:	2b80      	cmp	r3, #128	; 0x80
 80069d8:	d814      	bhi.n	8006a04 <UART_SetConfig+0x1f8>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d002      	beq.n	80069e4 <UART_SetConfig+0x1d8>
 80069de:	2b40      	cmp	r3, #64	; 0x40
 80069e0:	d008      	beq.n	80069f4 <UART_SetConfig+0x1e8>
 80069e2:	e00f      	b.n	8006a04 <UART_SetConfig+0x1f8>
 80069e4:	2300      	movs	r3, #0
 80069e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ea:	e082      	b.n	8006af2 <UART_SetConfig+0x2e6>
 80069ec:	2302      	movs	r3, #2
 80069ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f2:	e07e      	b.n	8006af2 <UART_SetConfig+0x2e6>
 80069f4:	2304      	movs	r3, #4
 80069f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fa:	e07a      	b.n	8006af2 <UART_SetConfig+0x2e6>
 80069fc:	2308      	movs	r3, #8
 80069fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a02:	e076      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006a04:	2310      	movs	r3, #16
 8006a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a0a:	e072      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a35      	ldr	r2, [pc, #212]	; (8006ae8 <UART_SetConfig+0x2dc>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d12a      	bne.n	8006a6c <UART_SetConfig+0x260>
 8006a16:	4b30      	ldr	r3, [pc, #192]	; (8006ad8 <UART_SetConfig+0x2cc>)
 8006a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a24:	d01a      	beq.n	8006a5c <UART_SetConfig+0x250>
 8006a26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a2a:	d81b      	bhi.n	8006a64 <UART_SetConfig+0x258>
 8006a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a30:	d00c      	beq.n	8006a4c <UART_SetConfig+0x240>
 8006a32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a36:	d815      	bhi.n	8006a64 <UART_SetConfig+0x258>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <UART_SetConfig+0x238>
 8006a3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a40:	d008      	beq.n	8006a54 <UART_SetConfig+0x248>
 8006a42:	e00f      	b.n	8006a64 <UART_SetConfig+0x258>
 8006a44:	2300      	movs	r3, #0
 8006a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4a:	e052      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a52:	e04e      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006a54:	2304      	movs	r3, #4
 8006a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a5a:	e04a      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006a5c:	2308      	movs	r3, #8
 8006a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a62:	e046      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006a64:	2310      	movs	r3, #16
 8006a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a6a:	e042      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a17      	ldr	r2, [pc, #92]	; (8006ad0 <UART_SetConfig+0x2c4>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d13a      	bne.n	8006aec <UART_SetConfig+0x2e0>
 8006a76:	4b18      	ldr	r3, [pc, #96]	; (8006ad8 <UART_SetConfig+0x2cc>)
 8006a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a7c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a84:	d01a      	beq.n	8006abc <UART_SetConfig+0x2b0>
 8006a86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a8a:	d81b      	bhi.n	8006ac4 <UART_SetConfig+0x2b8>
 8006a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a90:	d00c      	beq.n	8006aac <UART_SetConfig+0x2a0>
 8006a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a96:	d815      	bhi.n	8006ac4 <UART_SetConfig+0x2b8>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d003      	beq.n	8006aa4 <UART_SetConfig+0x298>
 8006a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa0:	d008      	beq.n	8006ab4 <UART_SetConfig+0x2a8>
 8006aa2:	e00f      	b.n	8006ac4 <UART_SetConfig+0x2b8>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aaa:	e022      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006aac:	2302      	movs	r3, #2
 8006aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ab2:	e01e      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006ab4:	2304      	movs	r3, #4
 8006ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aba:	e01a      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006abc:	2308      	movs	r3, #8
 8006abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ac2:	e016      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006ac4:	2310      	movs	r3, #16
 8006ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aca:	e012      	b.n	8006af2 <UART_SetConfig+0x2e6>
 8006acc:	efff69f3 	.word	0xefff69f3
 8006ad0:	40008000 	.word	0x40008000
 8006ad4:	40013800 	.word	0x40013800
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	40004400 	.word	0x40004400
 8006ae0:	40004800 	.word	0x40004800
 8006ae4:	40004c00 	.word	0x40004c00
 8006ae8:	40005000 	.word	0x40005000
 8006aec:	2310      	movs	r3, #16
 8006aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a9f      	ldr	r2, [pc, #636]	; (8006d74 <UART_SetConfig+0x568>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d17a      	bne.n	8006bf2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006afc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	d824      	bhi.n	8006b4e <UART_SetConfig+0x342>
 8006b04:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <UART_SetConfig+0x300>)
 8006b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0a:	bf00      	nop
 8006b0c:	08006b31 	.word	0x08006b31
 8006b10:	08006b4f 	.word	0x08006b4f
 8006b14:	08006b39 	.word	0x08006b39
 8006b18:	08006b4f 	.word	0x08006b4f
 8006b1c:	08006b3f 	.word	0x08006b3f
 8006b20:	08006b4f 	.word	0x08006b4f
 8006b24:	08006b4f 	.word	0x08006b4f
 8006b28:	08006b4f 	.word	0x08006b4f
 8006b2c:	08006b47 	.word	0x08006b47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b30:	f7fd fdde 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
 8006b34:	61f8      	str	r0, [r7, #28]
        break;
 8006b36:	e010      	b.n	8006b5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b38:	4b8f      	ldr	r3, [pc, #572]	; (8006d78 <UART_SetConfig+0x56c>)
 8006b3a:	61fb      	str	r3, [r7, #28]
        break;
 8006b3c:	e00d      	b.n	8006b5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b3e:	f7fd fd3f 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 8006b42:	61f8      	str	r0, [r7, #28]
        break;
 8006b44:	e009      	b.n	8006b5a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b4a:	61fb      	str	r3, [r7, #28]
        break;
 8006b4c:	e005      	b.n	8006b5a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b52:	2301      	movs	r3, #1
 8006b54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 80fb 	beq.w	8006d58 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	4613      	mov	r3, r2
 8006b68:	005b      	lsls	r3, r3, #1
 8006b6a:	4413      	add	r3, r2
 8006b6c:	69fa      	ldr	r2, [r7, #28]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d305      	bcc.n	8006b7e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b78:	69fa      	ldr	r2, [r7, #28]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d903      	bls.n	8006b86 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b84:	e0e8      	b.n	8006d58 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	461c      	mov	r4, r3
 8006b8c:	4615      	mov	r5, r2
 8006b8e:	f04f 0200 	mov.w	r2, #0
 8006b92:	f04f 0300 	mov.w	r3, #0
 8006b96:	022b      	lsls	r3, r5, #8
 8006b98:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b9c:	0222      	lsls	r2, r4, #8
 8006b9e:	68f9      	ldr	r1, [r7, #12]
 8006ba0:	6849      	ldr	r1, [r1, #4]
 8006ba2:	0849      	lsrs	r1, r1, #1
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	4688      	mov	r8, r1
 8006ba8:	4681      	mov	r9, r0
 8006baa:	eb12 0a08 	adds.w	sl, r2, r8
 8006bae:	eb43 0b09 	adc.w	fp, r3, r9
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	603b      	str	r3, [r7, #0]
 8006bba:	607a      	str	r2, [r7, #4]
 8006bbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bc0:	4650      	mov	r0, sl
 8006bc2:	4659      	mov	r1, fp
 8006bc4:	f7f9 ff5a 	bl	8000a7c <__aeabi_uldivmod>
 8006bc8:	4602      	mov	r2, r0
 8006bca:	460b      	mov	r3, r1
 8006bcc:	4613      	mov	r3, r2
 8006bce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bd6:	d308      	bcc.n	8006bea <UART_SetConfig+0x3de>
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bde:	d204      	bcs.n	8006bea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	60da      	str	r2, [r3, #12]
 8006be8:	e0b6      	b.n	8006d58 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bf0:	e0b2      	b.n	8006d58 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfa:	d15e      	bne.n	8006cba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006bfc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d828      	bhi.n	8006c56 <UART_SetConfig+0x44a>
 8006c04:	a201      	add	r2, pc, #4	; (adr r2, 8006c0c <UART_SetConfig+0x400>)
 8006c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c0a:	bf00      	nop
 8006c0c:	08006c31 	.word	0x08006c31
 8006c10:	08006c39 	.word	0x08006c39
 8006c14:	08006c41 	.word	0x08006c41
 8006c18:	08006c57 	.word	0x08006c57
 8006c1c:	08006c47 	.word	0x08006c47
 8006c20:	08006c57 	.word	0x08006c57
 8006c24:	08006c57 	.word	0x08006c57
 8006c28:	08006c57 	.word	0x08006c57
 8006c2c:	08006c4f 	.word	0x08006c4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c30:	f7fd fd5e 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
 8006c34:	61f8      	str	r0, [r7, #28]
        break;
 8006c36:	e014      	b.n	8006c62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c38:	f7fd fd70 	bl	800471c <HAL_RCC_GetPCLK2Freq>
 8006c3c:	61f8      	str	r0, [r7, #28]
        break;
 8006c3e:	e010      	b.n	8006c62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c40:	4b4d      	ldr	r3, [pc, #308]	; (8006d78 <UART_SetConfig+0x56c>)
 8006c42:	61fb      	str	r3, [r7, #28]
        break;
 8006c44:	e00d      	b.n	8006c62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c46:	f7fd fcbb 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 8006c4a:	61f8      	str	r0, [r7, #28]
        break;
 8006c4c:	e009      	b.n	8006c62 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c52:	61fb      	str	r3, [r7, #28]
        break;
 8006c54:	e005      	b.n	8006c62 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006c56:	2300      	movs	r3, #0
 8006c58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d077      	beq.n	8006d58 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	005a      	lsls	r2, r3, #1
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	085b      	lsrs	r3, r3, #1
 8006c72:	441a      	add	r2, r3
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	2b0f      	cmp	r3, #15
 8006c82:	d916      	bls.n	8006cb2 <UART_SetConfig+0x4a6>
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c8a:	d212      	bcs.n	8006cb2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	f023 030f 	bic.w	r3, r3, #15
 8006c94:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	085b      	lsrs	r3, r3, #1
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f003 0307 	and.w	r3, r3, #7
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	8afb      	ldrh	r3, [r7, #22]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	8afa      	ldrh	r2, [r7, #22]
 8006cae:	60da      	str	r2, [r3, #12]
 8006cb0:	e052      	b.n	8006d58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cb8:	e04e      	b.n	8006d58 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cbe:	2b08      	cmp	r3, #8
 8006cc0:	d827      	bhi.n	8006d12 <UART_SetConfig+0x506>
 8006cc2:	a201      	add	r2, pc, #4	; (adr r2, 8006cc8 <UART_SetConfig+0x4bc>)
 8006cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc8:	08006ced 	.word	0x08006ced
 8006ccc:	08006cf5 	.word	0x08006cf5
 8006cd0:	08006cfd 	.word	0x08006cfd
 8006cd4:	08006d13 	.word	0x08006d13
 8006cd8:	08006d03 	.word	0x08006d03
 8006cdc:	08006d13 	.word	0x08006d13
 8006ce0:	08006d13 	.word	0x08006d13
 8006ce4:	08006d13 	.word	0x08006d13
 8006ce8:	08006d0b 	.word	0x08006d0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cec:	f7fd fd00 	bl	80046f0 <HAL_RCC_GetPCLK1Freq>
 8006cf0:	61f8      	str	r0, [r7, #28]
        break;
 8006cf2:	e014      	b.n	8006d1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cf4:	f7fd fd12 	bl	800471c <HAL_RCC_GetPCLK2Freq>
 8006cf8:	61f8      	str	r0, [r7, #28]
        break;
 8006cfa:	e010      	b.n	8006d1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cfc:	4b1e      	ldr	r3, [pc, #120]	; (8006d78 <UART_SetConfig+0x56c>)
 8006cfe:	61fb      	str	r3, [r7, #28]
        break;
 8006d00:	e00d      	b.n	8006d1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d02:	f7fd fc5d 	bl	80045c0 <HAL_RCC_GetSysClockFreq>
 8006d06:	61f8      	str	r0, [r7, #28]
        break;
 8006d08:	e009      	b.n	8006d1e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d0e:	61fb      	str	r3, [r7, #28]
        break;
 8006d10:	e005      	b.n	8006d1e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d1c:	bf00      	nop
    }

    if (pclk != 0U)
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d019      	beq.n	8006d58 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	085a      	lsrs	r2, r3, #1
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	441a      	add	r2, r3
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d36:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	2b0f      	cmp	r3, #15
 8006d3c:	d909      	bls.n	8006d52 <UART_SetConfig+0x546>
 8006d3e:	69bb      	ldr	r3, [r7, #24]
 8006d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d44:	d205      	bcs.n	8006d52 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	b29a      	uxth	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	60da      	str	r2, [r3, #12]
 8006d50:	e002      	b.n	8006d58 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2200      	movs	r2, #0
 8006d62:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d64:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3728      	adds	r7, #40	; 0x28
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d72:	bf00      	nop
 8006d74:	40008000 	.word	0x40008000
 8006d78:	00f42400 	.word	0x00f42400

08006d7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	f003 0308 	and.w	r3, r3, #8
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00a      	beq.n	8006da6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00a      	beq.n	8006dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00a      	beq.n	8006dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dee:	f003 0304 	and.w	r3, r3, #4
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	430a      	orrs	r2, r1
 8006e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	f003 0310 	and.w	r3, r3, #16
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00a      	beq.n	8006e2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00a      	beq.n	8006e50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	430a      	orrs	r2, r1
 8006e4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d01a      	beq.n	8006e92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	430a      	orrs	r2, r1
 8006e70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e7a:	d10a      	bne.n	8006e92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	605a      	str	r2, [r3, #4]
  }
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b098      	sub	sp, #96	; 0x60
 8006ec4:	af02      	add	r7, sp, #8
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ed0:	f7fa ffaa 	bl	8001e28 <HAL_GetTick>
 8006ed4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d12e      	bne.n	8006f42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ee4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eec:	2200      	movs	r2, #0
 8006eee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f000 f88c 	bl	8007010 <UART_WaitOnFlagUntilTimeout>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d021      	beq.n	8006f42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f06:	e853 3f00 	ldrex	r3, [r3]
 8006f0a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f12:	653b      	str	r3, [r7, #80]	; 0x50
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f1e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e6      	bne.n	8006efe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2220      	movs	r2, #32
 8006f34:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e062      	b.n	8007008 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b04      	cmp	r3, #4
 8006f4e:	d149      	bne.n	8006fe4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f856 	bl	8007010 <UART_WaitOnFlagUntilTimeout>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d03c      	beq.n	8006fe4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f72:	e853 3f00 	ldrex	r3, [r3]
 8006f76:	623b      	str	r3, [r7, #32]
   return(result);
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	461a      	mov	r2, r3
 8006f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f88:	633b      	str	r3, [r7, #48]	; 0x30
 8006f8a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f90:	e841 2300 	strex	r3, r2, [r1]
 8006f94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d1e6      	bne.n	8006f6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	e853 3f00 	ldrex	r3, [r3]
 8006faa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f023 0301 	bic.w	r3, r3, #1
 8006fb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	3308      	adds	r3, #8
 8006fba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fbc:	61fa      	str	r2, [r7, #28]
 8006fbe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc0:	69b9      	ldr	r1, [r7, #24]
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	e841 2300 	strex	r3, r2, [r1]
 8006fc8:	617b      	str	r3, [r7, #20]
   return(result);
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d1e5      	bne.n	8006f9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2220      	movs	r2, #32
 8006fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e011      	b.n	8007008 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3758      	adds	r7, #88	; 0x58
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	603b      	str	r3, [r7, #0]
 800701c:	4613      	mov	r3, r2
 800701e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007020:	e049      	b.n	80070b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007028:	d045      	beq.n	80070b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800702a:	f7fa fefd 	bl	8001e28 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	429a      	cmp	r2, r3
 8007038:	d302      	bcc.n	8007040 <UART_WaitOnFlagUntilTimeout+0x30>
 800703a:	69bb      	ldr	r3, [r7, #24]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d101      	bne.n	8007044 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e048      	b.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0304 	and.w	r3, r3, #4
 800704e:	2b00      	cmp	r3, #0
 8007050:	d031      	beq.n	80070b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	69db      	ldr	r3, [r3, #28]
 8007058:	f003 0308 	and.w	r3, r3, #8
 800705c:	2b08      	cmp	r3, #8
 800705e:	d110      	bne.n	8007082 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2208      	movs	r2, #8
 8007066:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007068:	68f8      	ldr	r0, [r7, #12]
 800706a:	f000 f838 	bl	80070de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2208      	movs	r2, #8
 8007072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e029      	b.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800708c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007090:	d111      	bne.n	80070b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800709a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800709c:	68f8      	ldr	r0, [r7, #12]
 800709e:	f000 f81e 	bl	80070de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2220      	movs	r2, #32
 80070a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80070b2:	2303      	movs	r3, #3
 80070b4:	e00f      	b.n	80070d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	69da      	ldr	r2, [r3, #28]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4013      	ands	r3, r2
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	bf0c      	ite	eq
 80070c6:	2301      	moveq	r3, #1
 80070c8:	2300      	movne	r3, #0
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	461a      	mov	r2, r3
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d0a6      	beq.n	8007022 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070de:	b480      	push	{r7}
 80070e0:	b095      	sub	sp, #84	; 0x54
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ee:	e853 3f00 	ldrex	r3, [r3]
 80070f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007104:	643b      	str	r3, [r7, #64]	; 0x40
 8007106:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007108:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800710a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800710c:	e841 2300 	strex	r3, r2, [r1]
 8007110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007114:	2b00      	cmp	r3, #0
 8007116:	d1e6      	bne.n	80070e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	3308      	adds	r3, #8
 800711e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	e853 3f00 	ldrex	r3, [r3]
 8007126:	61fb      	str	r3, [r7, #28]
   return(result);
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	f023 0301 	bic.w	r3, r3, #1
 800712e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	3308      	adds	r3, #8
 8007136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007138:	62fa      	str	r2, [r7, #44]	; 0x2c
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800713e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007140:	e841 2300 	strex	r3, r2, [r1]
 8007144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1e5      	bne.n	8007118 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007150:	2b01      	cmp	r3, #1
 8007152:	d118      	bne.n	8007186 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	e853 3f00 	ldrex	r3, [r3]
 8007160:	60bb      	str	r3, [r7, #8]
   return(result);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f023 0310 	bic.w	r3, r3, #16
 8007168:	647b      	str	r3, [r7, #68]	; 0x44
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	461a      	mov	r2, r3
 8007170:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007172:	61bb      	str	r3, [r7, #24]
 8007174:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	6979      	ldr	r1, [r7, #20]
 8007178:	69ba      	ldr	r2, [r7, #24]
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	613b      	str	r3, [r7, #16]
   return(result);
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e6      	bne.n	8007154 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	669a      	str	r2, [r3, #104]	; 0x68
}
 800719a:	bf00      	nop
 800719c:	3754      	adds	r7, #84	; 0x54
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
	...

080071a8 <__NVIC_SetPriority>:
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	6039      	str	r1, [r7, #0]
 80071b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	db0a      	blt.n	80071d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	490c      	ldr	r1, [pc, #48]	; (80071f4 <__NVIC_SetPriority+0x4c>)
 80071c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071c6:	0112      	lsls	r2, r2, #4
 80071c8:	b2d2      	uxtb	r2, r2
 80071ca:	440b      	add	r3, r1
 80071cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80071d0:	e00a      	b.n	80071e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	b2da      	uxtb	r2, r3
 80071d6:	4908      	ldr	r1, [pc, #32]	; (80071f8 <__NVIC_SetPriority+0x50>)
 80071d8:	79fb      	ldrb	r3, [r7, #7]
 80071da:	f003 030f 	and.w	r3, r3, #15
 80071de:	3b04      	subs	r3, #4
 80071e0:	0112      	lsls	r2, r2, #4
 80071e2:	b2d2      	uxtb	r2, r2
 80071e4:	440b      	add	r3, r1
 80071e6:	761a      	strb	r2, [r3, #24]
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	e000e100 	.word	0xe000e100
 80071f8:	e000ed00 	.word	0xe000ed00

080071fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007200:	2100      	movs	r1, #0
 8007202:	f06f 0004 	mvn.w	r0, #4
 8007206:	f7ff ffcf 	bl	80071a8 <__NVIC_SetPriority>
#endif
}
 800720a:	bf00      	nop
 800720c:	bd80      	pop	{r7, pc}
	...

08007210 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007216:	f3ef 8305 	mrs	r3, IPSR
 800721a:	603b      	str	r3, [r7, #0]
  return(result);
 800721c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007222:	f06f 0305 	mvn.w	r3, #5
 8007226:	607b      	str	r3, [r7, #4]
 8007228:	e00c      	b.n	8007244 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800722a:	4b0a      	ldr	r3, [pc, #40]	; (8007254 <osKernelInitialize+0x44>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d105      	bne.n	800723e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007232:	4b08      	ldr	r3, [pc, #32]	; (8007254 <osKernelInitialize+0x44>)
 8007234:	2201      	movs	r2, #1
 8007236:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007238:	2300      	movs	r3, #0
 800723a:	607b      	str	r3, [r7, #4]
 800723c:	e002      	b.n	8007244 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800723e:	f04f 33ff 	mov.w	r3, #4294967295
 8007242:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007244:	687b      	ldr	r3, [r7, #4]
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
 8007252:	bf00      	nop
 8007254:	20000298 	.word	0x20000298

08007258 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800725e:	f3ef 8305 	mrs	r3, IPSR
 8007262:	603b      	str	r3, [r7, #0]
  return(result);
 8007264:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <osKernelStart+0x1a>
    stat = osErrorISR;
 800726a:	f06f 0305 	mvn.w	r3, #5
 800726e:	607b      	str	r3, [r7, #4]
 8007270:	e010      	b.n	8007294 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007272:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <osKernelStart+0x48>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d109      	bne.n	800728e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800727a:	f7ff ffbf 	bl	80071fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800727e:	4b08      	ldr	r3, [pc, #32]	; (80072a0 <osKernelStart+0x48>)
 8007280:	2202      	movs	r2, #2
 8007282:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007284:	f001 fb88 	bl	8008998 <vTaskStartScheduler>
      stat = osOK;
 8007288:	2300      	movs	r3, #0
 800728a:	607b      	str	r3, [r7, #4]
 800728c:	e002      	b.n	8007294 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800728e:	f04f 33ff 	mov.w	r3, #4294967295
 8007292:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007294:	687b      	ldr	r3, [r7, #4]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	20000298 	.word	0x20000298

080072a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b08e      	sub	sp, #56	; 0x38
 80072a8:	af04      	add	r7, sp, #16
 80072aa:	60f8      	str	r0, [r7, #12]
 80072ac:	60b9      	str	r1, [r7, #8]
 80072ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80072b0:	2300      	movs	r3, #0
 80072b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072b4:	f3ef 8305 	mrs	r3, IPSR
 80072b8:	617b      	str	r3, [r7, #20]
  return(result);
 80072ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d17e      	bne.n	80073be <osThreadNew+0x11a>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d07b      	beq.n	80073be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80072c6:	2380      	movs	r3, #128	; 0x80
 80072c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80072ca:	2318      	movs	r3, #24
 80072cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80072ce:	2300      	movs	r3, #0
 80072d0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80072d2:	f04f 33ff 	mov.w	r3, #4294967295
 80072d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d045      	beq.n	800736a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <osThreadNew+0x48>
        name = attr->name;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d002      	beq.n	80072fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d008      	beq.n	8007312 <osThreadNew+0x6e>
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	2b38      	cmp	r3, #56	; 0x38
 8007304:	d805      	bhi.n	8007312 <osThreadNew+0x6e>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	f003 0301 	and.w	r3, r3, #1
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <osThreadNew+0x72>
        return (NULL);
 8007312:	2300      	movs	r3, #0
 8007314:	e054      	b.n	80073c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	089b      	lsrs	r3, r3, #2
 8007324:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00e      	beq.n	800734c <osThreadNew+0xa8>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	2b5b      	cmp	r3, #91	; 0x5b
 8007334:	d90a      	bls.n	800734c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800733a:	2b00      	cmp	r3, #0
 800733c:	d006      	beq.n	800734c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	695b      	ldr	r3, [r3, #20]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d002      	beq.n	800734c <osThreadNew+0xa8>
        mem = 1;
 8007346:	2301      	movs	r3, #1
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	e010      	b.n	800736e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d10c      	bne.n	800736e <osThreadNew+0xca>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d108      	bne.n	800736e <osThreadNew+0xca>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d104      	bne.n	800736e <osThreadNew+0xca>
          mem = 0;
 8007364:	2300      	movs	r3, #0
 8007366:	61bb      	str	r3, [r7, #24]
 8007368:	e001      	b.n	800736e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d110      	bne.n	8007396 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800737c:	9202      	str	r2, [sp, #8]
 800737e:	9301      	str	r3, [sp, #4]
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	6a3a      	ldr	r2, [r7, #32]
 8007388:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800738a:	68f8      	ldr	r0, [r7, #12]
 800738c:	f001 f92e 	bl	80085ec <xTaskCreateStatic>
 8007390:	4603      	mov	r3, r0
 8007392:	613b      	str	r3, [r7, #16]
 8007394:	e013      	b.n	80073be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d110      	bne.n	80073be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800739c:	6a3b      	ldr	r3, [r7, #32]
 800739e:	b29a      	uxth	r2, r3
 80073a0:	f107 0310 	add.w	r3, r7, #16
 80073a4:	9301      	str	r3, [sp, #4]
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073ae:	68f8      	ldr	r0, [r7, #12]
 80073b0:	f001 f979 	bl	80086a6 <xTaskCreate>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d001      	beq.n	80073be <osThreadNew+0x11a>
            hTask = NULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80073be:	693b      	ldr	r3, [r7, #16]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3728      	adds	r7, #40	; 0x28
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073d0:	f3ef 8305 	mrs	r3, IPSR
 80073d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80073d6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d003      	beq.n	80073e4 <osDelay+0x1c>
    stat = osErrorISR;
 80073dc:	f06f 0305 	mvn.w	r3, #5
 80073e0:	60fb      	str	r3, [r7, #12]
 80073e2:	e007      	b.n	80073f4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f001 fa9e 	bl	8008930 <vTaskDelay>
    }
  }

  return (stat);
 80073f4:	68fb      	ldr	r3, [r7, #12]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80073fe:	b580      	push	{r7, lr}
 8007400:	b088      	sub	sp, #32
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007406:	2300      	movs	r3, #0
 8007408:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800740a:	f3ef 8305 	mrs	r3, IPSR
 800740e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007410:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007412:	2b00      	cmp	r3, #0
 8007414:	d174      	bne.n	8007500 <osMutexNew+0x102>
    if (attr != NULL) {
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <osMutexNew+0x26>
      type = attr->attr_bits;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	61bb      	str	r3, [r7, #24]
 8007422:	e001      	b.n	8007428 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007424:	2300      	movs	r3, #0
 8007426:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007428:	69bb      	ldr	r3, [r7, #24]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <osMutexNew+0x3a>
      rmtx = 1U;
 8007432:	2301      	movs	r3, #1
 8007434:	617b      	str	r3, [r7, #20]
 8007436:	e001      	b.n	800743c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007438:	2300      	movs	r3, #0
 800743a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	f003 0308 	and.w	r3, r3, #8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d15c      	bne.n	8007500 <osMutexNew+0x102>
      mem = -1;
 8007446:	f04f 33ff 	mov.w	r3, #4294967295
 800744a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d015      	beq.n	800747e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d006      	beq.n	8007468 <osMutexNew+0x6a>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	2b4f      	cmp	r3, #79	; 0x4f
 8007460:	d902      	bls.n	8007468 <osMutexNew+0x6a>
          mem = 1;
 8007462:	2301      	movs	r3, #1
 8007464:	613b      	str	r3, [r7, #16]
 8007466:	e00c      	b.n	8007482 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d108      	bne.n	8007482 <osMutexNew+0x84>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	68db      	ldr	r3, [r3, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d104      	bne.n	8007482 <osMutexNew+0x84>
            mem = 0;
 8007478:	2300      	movs	r3, #0
 800747a:	613b      	str	r3, [r7, #16]
 800747c:	e001      	b.n	8007482 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d112      	bne.n	80074ae <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d007      	beq.n	800749e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	4619      	mov	r1, r3
 8007494:	2004      	movs	r0, #4
 8007496:	f000 fb18 	bl	8007aca <xQueueCreateMutexStatic>
 800749a:	61f8      	str	r0, [r7, #28]
 800749c:	e016      	b.n	80074cc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	4619      	mov	r1, r3
 80074a4:	2001      	movs	r0, #1
 80074a6:	f000 fb10 	bl	8007aca <xQueueCreateMutexStatic>
 80074aa:	61f8      	str	r0, [r7, #28]
 80074ac:	e00e      	b.n	80074cc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d10b      	bne.n	80074cc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d004      	beq.n	80074c4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80074ba:	2004      	movs	r0, #4
 80074bc:	f000 faed 	bl	8007a9a <xQueueCreateMutex>
 80074c0:	61f8      	str	r0, [r7, #28]
 80074c2:	e003      	b.n	80074cc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80074c4:	2001      	movs	r0, #1
 80074c6:	f000 fae8 	bl	8007a9a <xQueueCreateMutex>
 80074ca:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00c      	beq.n	80074ec <osMutexNew+0xee>
        if (attr != NULL) {
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d003      	beq.n	80074e0 <osMutexNew+0xe2>
          name = attr->name;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	60fb      	str	r3, [r7, #12]
 80074de:	e001      	b.n	80074e4 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80074e0:	2300      	movs	r3, #0
 80074e2:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80074e4:	68f9      	ldr	r1, [r7, #12]
 80074e6:	69f8      	ldr	r0, [r7, #28]
 80074e8:	f001 f822 	bl	8008530 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d006      	beq.n	8007500 <osMutexNew+0x102>
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d003      	beq.n	8007500 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	f043 0301 	orr.w	r3, r3, #1
 80074fe:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007500:	69fb      	ldr	r3, [r7, #28]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3720      	adds	r7, #32
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}

0800750a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800750a:	b580      	push	{r7, lr}
 800750c:	b086      	sub	sp, #24
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f023 0301 	bic.w	r3, r3, #1
 800751a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007528:	f3ef 8305 	mrs	r3, IPSR
 800752c:	60bb      	str	r3, [r7, #8]
  return(result);
 800752e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007530:	2b00      	cmp	r3, #0
 8007532:	d003      	beq.n	800753c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007534:	f06f 0305 	mvn.w	r3, #5
 8007538:	617b      	str	r3, [r7, #20]
 800753a:	e02c      	b.n	8007596 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d103      	bne.n	800754a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007542:	f06f 0303 	mvn.w	r3, #3
 8007546:	617b      	str	r3, [r7, #20]
 8007548:	e025      	b.n	8007596 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d011      	beq.n	8007574 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007550:	6839      	ldr	r1, [r7, #0]
 8007552:	6938      	ldr	r0, [r7, #16]
 8007554:	f000 fb08 	bl	8007b68 <xQueueTakeMutexRecursive>
 8007558:	4603      	mov	r3, r0
 800755a:	2b01      	cmp	r3, #1
 800755c:	d01b      	beq.n	8007596 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d003      	beq.n	800756c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007564:	f06f 0301 	mvn.w	r3, #1
 8007568:	617b      	str	r3, [r7, #20]
 800756a:	e014      	b.n	8007596 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800756c:	f06f 0302 	mvn.w	r3, #2
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	e010      	b.n	8007596 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6938      	ldr	r0, [r7, #16]
 8007578:	f000 fda6 	bl	80080c8 <xQueueSemaphoreTake>
 800757c:	4603      	mov	r3, r0
 800757e:	2b01      	cmp	r3, #1
 8007580:	d009      	beq.n	8007596 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007588:	f06f 0301 	mvn.w	r3, #1
 800758c:	617b      	str	r3, [r7, #20]
 800758e:	e002      	b.n	8007596 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007590:	f06f 0302 	mvn.w	r3, #2
 8007594:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007596:	697b      	ldr	r3, [r7, #20]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f023 0301 	bic.w	r3, r3, #1
 80075ae:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f003 0301 	and.w	r3, r3, #1
 80075b6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80075b8:	2300      	movs	r3, #0
 80075ba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80075bc:	f3ef 8305 	mrs	r3, IPSR
 80075c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80075c2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <osMutexRelease+0x30>
    stat = osErrorISR;
 80075c8:	f06f 0305 	mvn.w	r3, #5
 80075cc:	617b      	str	r3, [r7, #20]
 80075ce:	e01f      	b.n	8007610 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d103      	bne.n	80075de <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80075d6:	f06f 0303 	mvn.w	r3, #3
 80075da:	617b      	str	r3, [r7, #20]
 80075dc:	e018      	b.n	8007610 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d009      	beq.n	80075f8 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80075e4:	6938      	ldr	r0, [r7, #16]
 80075e6:	f000 fa8b 	bl	8007b00 <xQueueGiveMutexRecursive>
 80075ea:	4603      	mov	r3, r0
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d00f      	beq.n	8007610 <osMutexRelease+0x70>
        stat = osErrorResource;
 80075f0:	f06f 0302 	mvn.w	r3, #2
 80075f4:	617b      	str	r3, [r7, #20]
 80075f6:	e00b      	b.n	8007610 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80075f8:	2300      	movs	r3, #0
 80075fa:	2200      	movs	r2, #0
 80075fc:	2100      	movs	r1, #0
 80075fe:	6938      	ldr	r0, [r7, #16]
 8007600:	f000 fae8 	bl	8007bd4 <xQueueGenericSend>
 8007604:	4603      	mov	r3, r0
 8007606:	2b01      	cmp	r3, #1
 8007608:	d002      	beq.n	8007610 <osMutexRelease+0x70>
        stat = osErrorResource;
 800760a:	f06f 0302 	mvn.w	r3, #2
 800760e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007610:	697b      	ldr	r3, [r7, #20]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4a07      	ldr	r2, [pc, #28]	; (8007648 <vApplicationGetIdleTaskMemory+0x2c>)
 800762c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	4a06      	ldr	r2, [pc, #24]	; (800764c <vApplicationGetIdleTaskMemory+0x30>)
 8007632:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2280      	movs	r2, #128	; 0x80
 8007638:	601a      	str	r2, [r3, #0]
}
 800763a:	bf00      	nop
 800763c:	3714      	adds	r7, #20
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	2000029c 	.word	0x2000029c
 800764c:	200002f8 	.word	0x200002f8

08007650 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	4a07      	ldr	r2, [pc, #28]	; (800767c <vApplicationGetTimerTaskMemory+0x2c>)
 8007660:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	4a06      	ldr	r2, [pc, #24]	; (8007680 <vApplicationGetTimerTaskMemory+0x30>)
 8007666:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800766e:	601a      	str	r2, [r3, #0]
}
 8007670:	bf00      	nop
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	200004f8 	.word	0x200004f8
 8007680:	20000554 	.word	0x20000554

08007684 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f103 0208 	add.w	r2, r3, #8
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f04f 32ff 	mov.w	r2, #4294967295
 800769c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f103 0208 	add.w	r2, r3, #8
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f103 0208 	add.w	r2, r3, #8
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80076d2:	bf00      	nop
 80076d4:	370c      	adds	r7, #12
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80076de:	b480      	push	{r7}
 80076e0:	b085      	sub	sp, #20
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68fa      	ldr	r2, [r7, #12]
 80076f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	689a      	ldr	r2, [r3, #8]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	601a      	str	r2, [r3, #0]
}
 800771a:	bf00      	nop
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007726:	b480      	push	{r7}
 8007728:	b085      	sub	sp, #20
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773c:	d103      	bne.n	8007746 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	60fb      	str	r3, [r7, #12]
 8007744:	e00c      	b.n	8007760 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	3308      	adds	r3, #8
 800774a:	60fb      	str	r3, [r7, #12]
 800774c:	e002      	b.n	8007754 <vListInsert+0x2e>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	429a      	cmp	r2, r3
 800775e:	d2f6      	bcs.n	800774e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	601a      	str	r2, [r3, #0]
}
 800778c:	bf00      	nop
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	691b      	ldr	r3, [r3, #16]
 80077a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	687a      	ldr	r2, [r7, #4]
 80077ac:	6892      	ldr	r2, [r2, #8]
 80077ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6852      	ldr	r2, [r2, #4]
 80077b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d103      	bne.n	80077cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689a      	ldr	r2, [r3, #8]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	1e5a      	subs	r2, r3, #1
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3714      	adds	r7, #20
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007804:	f383 8811 	msr	BASEPRI, r3
 8007808:	f3bf 8f6f 	isb	sy
 800780c:	f3bf 8f4f 	dsb	sy
 8007810:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007812:	bf00      	nop
 8007814:	e7fe      	b.n	8007814 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007816:	f002 fb6d 	bl	8009ef4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007822:	68f9      	ldr	r1, [r7, #12]
 8007824:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007826:	fb01 f303 	mul.w	r3, r1, r3
 800782a:	441a      	add	r2, r3
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681a      	ldr	r2, [r3, #0]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007846:	3b01      	subs	r3, #1
 8007848:	68f9      	ldr	r1, [r7, #12]
 800784a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800784c:	fb01 f303 	mul.w	r3, r1, r3
 8007850:	441a      	add	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	22ff      	movs	r2, #255	; 0xff
 800785a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	22ff      	movs	r2, #255	; 0xff
 8007862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d114      	bne.n	8007896 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01a      	beq.n	80078aa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3310      	adds	r3, #16
 8007878:	4618      	mov	r0, r3
 800787a:	f001 fb17 	bl	8008eac <xTaskRemoveFromEventList>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d012      	beq.n	80078aa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007884:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <xQueueGenericReset+0xcc>)
 8007886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	e009      	b.n	80078aa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	3310      	adds	r3, #16
 800789a:	4618      	mov	r0, r3
 800789c:	f7ff fef2 	bl	8007684 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	3324      	adds	r3, #36	; 0x24
 80078a4:	4618      	mov	r0, r3
 80078a6:	f7ff feed 	bl	8007684 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80078aa:	f002 fb53 	bl	8009f54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80078ae:	2301      	movs	r3, #1
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08e      	sub	sp, #56	; 0x38
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10a      	bne.n	80078e6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10a      	bne.n	8007902 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80078fe:	bf00      	nop
 8007900:	e7fe      	b.n	8007900 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d002      	beq.n	800790e <xQueueGenericCreateStatic+0x52>
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <xQueueGenericCreateStatic+0x56>
 800790e:	2301      	movs	r3, #1
 8007910:	e000      	b.n	8007914 <xQueueGenericCreateStatic+0x58>
 8007912:	2300      	movs	r3, #0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d10a      	bne.n	800792e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	623b      	str	r3, [r7, #32]
}
 800792a:	bf00      	nop
 800792c:	e7fe      	b.n	800792c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d102      	bne.n	800793a <xQueueGenericCreateStatic+0x7e>
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <xQueueGenericCreateStatic+0x82>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <xQueueGenericCreateStatic+0x84>
 800793e:	2300      	movs	r3, #0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10a      	bne.n	800795a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	f383 8811 	msr	BASEPRI, r3
 800794c:	f3bf 8f6f 	isb	sy
 8007950:	f3bf 8f4f 	dsb	sy
 8007954:	61fb      	str	r3, [r7, #28]
}
 8007956:	bf00      	nop
 8007958:	e7fe      	b.n	8007958 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800795a:	2350      	movs	r3, #80	; 0x50
 800795c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b50      	cmp	r3, #80	; 0x50
 8007962:	d00a      	beq.n	800797a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	61bb      	str	r3, [r7, #24]
}
 8007976:	bf00      	nop
 8007978:	e7fe      	b.n	8007978 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800797a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00d      	beq.n	80079a2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007988:	2201      	movs	r2, #1
 800798a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800798e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	4613      	mov	r3, r2
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	68b9      	ldr	r1, [r7, #8]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 f83f 	bl	8007a20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80079a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3730      	adds	r7, #48	; 0x30
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b08a      	sub	sp, #40	; 0x28
 80079b0:	af02      	add	r7, sp, #8
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	4613      	mov	r3, r2
 80079b8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	613b      	str	r3, [r7, #16]
}
 80079d2:	bf00      	nop
 80079d4:	e7fe      	b.n	80079d4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	fb02 f303 	mul.w	r3, r2, r3
 80079de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	3350      	adds	r3, #80	; 0x50
 80079e4:	4618      	mov	r0, r3
 80079e6:	f002 fba7 	bl	800a138 <pvPortMalloc>
 80079ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d011      	beq.n	8007a16 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	3350      	adds	r3, #80	; 0x50
 80079fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a04:	79fa      	ldrb	r2, [r7, #7]
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	9300      	str	r3, [sp, #0]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	68b9      	ldr	r1, [r7, #8]
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 f805 	bl	8007a20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a16:	69bb      	ldr	r3, [r7, #24]
	}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3720      	adds	r7, #32
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
 8007a2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d103      	bne.n	8007a3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007a34:	69bb      	ldr	r3, [r7, #24]
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	e002      	b.n	8007a42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007a4e:	2101      	movs	r1, #1
 8007a50:	69b8      	ldr	r0, [r7, #24]
 8007a52:	f7ff fecb 	bl	80077ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	78fa      	ldrb	r2, [r7, #3]
 8007a5a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007a5e:	bf00      	nop
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00e      	beq.n	8007a92 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2200      	movs	r2, #0
 8007a78:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007a86:	2300      	movs	r3, #0
 8007a88:	2200      	movs	r2, #0
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f8a1 	bl	8007bd4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007a92:	bf00      	nop
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b086      	sub	sp, #24
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007aac:	79fb      	ldrb	r3, [r7, #7]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	6939      	ldr	r1, [r7, #16]
 8007ab2:	6978      	ldr	r0, [r7, #20]
 8007ab4:	f7ff ff7a 	bl	80079ac <xQueueGenericCreate>
 8007ab8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f7ff ffd3 	bl	8007a66 <prvInitialiseMutex>

		return xNewQueue;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
	}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3718      	adds	r7, #24
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b088      	sub	sp, #32
 8007ace:	af02      	add	r7, sp, #8
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	6039      	str	r1, [r7, #0]
 8007ad4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	617b      	str	r3, [r7, #20]
 8007ada:	2300      	movs	r3, #0
 8007adc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	9300      	str	r3, [sp, #0]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	6939      	ldr	r1, [r7, #16]
 8007ae8:	6978      	ldr	r0, [r7, #20]
 8007aea:	f7ff fee7 	bl	80078bc <xQueueGenericCreateStatic>
 8007aee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007af0:	68f8      	ldr	r0, [r7, #12]
 8007af2:	f7ff ffb8 	bl	8007a66 <prvInitialiseMutex>

		return xNewQueue;
 8007af6:	68fb      	ldr	r3, [r7, #12]
	}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3718      	adds	r7, #24
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007b00:	b590      	push	{r4, r7, lr}
 8007b02:	b087      	sub	sp, #28
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	60fb      	str	r3, [r7, #12]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	689c      	ldr	r4, [r3, #8]
 8007b2c:	f001 fb7c 	bl	8009228 <xTaskGetCurrentTaskHandle>
 8007b30:	4603      	mov	r3, r0
 8007b32:	429c      	cmp	r4, r3
 8007b34:	d111      	bne.n	8007b5a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	1e5a      	subs	r2, r3, #1
 8007b3c:	693b      	ldr	r3, [r7, #16]
 8007b3e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d105      	bne.n	8007b54 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007b48:	2300      	movs	r3, #0
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	6938      	ldr	r0, [r7, #16]
 8007b50:	f000 f840 	bl	8007bd4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007b54:	2301      	movs	r3, #1
 8007b56:	617b      	str	r3, [r7, #20]
 8007b58:	e001      	b.n	8007b5e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007b5e:	697b      	ldr	r3, [r7, #20]
	}
 8007b60:	4618      	mov	r0, r3
 8007b62:	371c      	adds	r7, #28
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd90      	pop	{r4, r7, pc}

08007b68 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007b68:	b590      	push	{r4, r7, lr}
 8007b6a:	b087      	sub	sp, #28
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10a      	bne.n	8007b92 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	60fb      	str	r3, [r7, #12]
}
 8007b8e:	bf00      	nop
 8007b90:	e7fe      	b.n	8007b90 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	689c      	ldr	r4, [r3, #8]
 8007b96:	f001 fb47 	bl	8009228 <xTaskGetCurrentTaskHandle>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	429c      	cmp	r4, r3
 8007b9e:	d107      	bne.n	8007bb0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	1c5a      	adds	r2, r3, #1
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007baa:	2301      	movs	r3, #1
 8007bac:	617b      	str	r3, [r7, #20]
 8007bae:	e00c      	b.n	8007bca <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6938      	ldr	r0, [r7, #16]
 8007bb4:	f000 fa88 	bl	80080c8 <xQueueSemaphoreTake>
 8007bb8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d004      	beq.n	8007bca <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	1c5a      	adds	r2, r3, #1
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007bca:	697b      	ldr	r3, [r7, #20]
	}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	371c      	adds	r7, #28
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd90      	pop	{r4, r7, pc}

08007bd4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b08e      	sub	sp, #56	; 0x38
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007be2:	2300      	movs	r3, #0
 8007be4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d10a      	bne.n	8007c06 <xQueueGenericSend+0x32>
	__asm volatile
 8007bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf4:	f383 8811 	msr	BASEPRI, r3
 8007bf8:	f3bf 8f6f 	isb	sy
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007c02:	bf00      	nop
 8007c04:	e7fe      	b.n	8007c04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d103      	bne.n	8007c14 <xQueueGenericSend+0x40>
 8007c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d101      	bne.n	8007c18 <xQueueGenericSend+0x44>
 8007c14:	2301      	movs	r3, #1
 8007c16:	e000      	b.n	8007c1a <xQueueGenericSend+0x46>
 8007c18:	2300      	movs	r3, #0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10a      	bne.n	8007c34 <xQueueGenericSend+0x60>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	2b02      	cmp	r3, #2
 8007c38:	d103      	bne.n	8007c42 <xQueueGenericSend+0x6e>
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d101      	bne.n	8007c46 <xQueueGenericSend+0x72>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e000      	b.n	8007c48 <xQueueGenericSend+0x74>
 8007c46:	2300      	movs	r3, #0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d10a      	bne.n	8007c62 <xQueueGenericSend+0x8e>
	__asm volatile
 8007c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c50:	f383 8811 	msr	BASEPRI, r3
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	f3bf 8f4f 	dsb	sy
 8007c5c:	623b      	str	r3, [r7, #32]
}
 8007c5e:	bf00      	nop
 8007c60:	e7fe      	b.n	8007c60 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c62:	f001 faf1 	bl	8009248 <xTaskGetSchedulerState>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d102      	bne.n	8007c72 <xQueueGenericSend+0x9e>
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d101      	bne.n	8007c76 <xQueueGenericSend+0xa2>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e000      	b.n	8007c78 <xQueueGenericSend+0xa4>
 8007c76:	2300      	movs	r3, #0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d10a      	bne.n	8007c92 <xQueueGenericSend+0xbe>
	__asm volatile
 8007c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c80:	f383 8811 	msr	BASEPRI, r3
 8007c84:	f3bf 8f6f 	isb	sy
 8007c88:	f3bf 8f4f 	dsb	sy
 8007c8c:	61fb      	str	r3, [r7, #28]
}
 8007c8e:	bf00      	nop
 8007c90:	e7fe      	b.n	8007c90 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c92:	f002 f92f 	bl	8009ef4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d302      	bcc.n	8007ca8 <xQueueGenericSend+0xd4>
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	2b02      	cmp	r3, #2
 8007ca6:	d129      	bne.n	8007cfc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	68b9      	ldr	r1, [r7, #8]
 8007cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cae:	f000 fb2f 	bl	8008310 <prvCopyDataToQueue>
 8007cb2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d010      	beq.n	8007cde <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbe:	3324      	adds	r3, #36	; 0x24
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f001 f8f3 	bl	8008eac <xTaskRemoveFromEventList>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d013      	beq.n	8007cf4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007ccc:	4b3f      	ldr	r3, [pc, #252]	; (8007dcc <xQueueGenericSend+0x1f8>)
 8007cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cd2:	601a      	str	r2, [r3, #0]
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	f3bf 8f6f 	isb	sy
 8007cdc:	e00a      	b.n	8007cf4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d007      	beq.n	8007cf4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ce4:	4b39      	ldr	r3, [pc, #228]	; (8007dcc <xQueueGenericSend+0x1f8>)
 8007ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cea:	601a      	str	r2, [r3, #0]
 8007cec:	f3bf 8f4f 	dsb	sy
 8007cf0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007cf4:	f002 f92e 	bl	8009f54 <vPortExitCritical>
				return pdPASS;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e063      	b.n	8007dc4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d103      	bne.n	8007d0a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d02:	f002 f927 	bl	8009f54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d06:	2300      	movs	r3, #0
 8007d08:	e05c      	b.n	8007dc4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d106      	bne.n	8007d1e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d10:	f107 0314 	add.w	r3, r7, #20
 8007d14:	4618      	mov	r0, r3
 8007d16:	f001 f92d 	bl	8008f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d1e:	f002 f919 	bl	8009f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d22:	f000 fe9f 	bl	8008a64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d26:	f002 f8e5 	bl	8009ef4 <vPortEnterCritical>
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d30:	b25b      	sxtb	r3, r3
 8007d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d36:	d103      	bne.n	8007d40 <xQueueGenericSend+0x16c>
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d46:	b25b      	sxtb	r3, r3
 8007d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d4c:	d103      	bne.n	8007d56 <xQueueGenericSend+0x182>
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d56:	f002 f8fd 	bl	8009f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d5a:	1d3a      	adds	r2, r7, #4
 8007d5c:	f107 0314 	add.w	r3, r7, #20
 8007d60:	4611      	mov	r1, r2
 8007d62:	4618      	mov	r0, r3
 8007d64:	f001 f91c 	bl	8008fa0 <xTaskCheckForTimeOut>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d124      	bne.n	8007db8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d70:	f000 fbc6 	bl	8008500 <prvIsQueueFull>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d018      	beq.n	8007dac <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d7c:	3310      	adds	r3, #16
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	4611      	mov	r1, r2
 8007d82:	4618      	mov	r0, r3
 8007d84:	f001 f842 	bl	8008e0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d8a:	f000 fb51 	bl	8008430 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d8e:	f000 fe77 	bl	8008a80 <xTaskResumeAll>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f47f af7c 	bne.w	8007c92 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007d9a:	4b0c      	ldr	r3, [pc, #48]	; (8007dcc <xQueueGenericSend+0x1f8>)
 8007d9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007da0:	601a      	str	r2, [r3, #0]
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	e772      	b.n	8007c92 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007dac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dae:	f000 fb3f 	bl	8008430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007db2:	f000 fe65 	bl	8008a80 <xTaskResumeAll>
 8007db6:	e76c      	b.n	8007c92 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007db8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dba:	f000 fb39 	bl	8008430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007dbe:	f000 fe5f 	bl	8008a80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007dc2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3738      	adds	r7, #56	; 0x38
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	e000ed04 	.word	0xe000ed04

08007dd0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b090      	sub	sp, #64	; 0x40
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	607a      	str	r2, [r7, #4]
 8007ddc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10a      	bne.n	8007dfe <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	f383 8811 	msr	BASEPRI, r3
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007dfa:	bf00      	nop
 8007dfc:	e7fe      	b.n	8007dfc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d103      	bne.n	8007e0c <xQueueGenericSendFromISR+0x3c>
 8007e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <xQueueGenericSendFromISR+0x40>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e000      	b.n	8007e12 <xQueueGenericSendFromISR+0x42>
 8007e10:	2300      	movs	r3, #0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d10a      	bne.n	8007e2c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007e28:	bf00      	nop
 8007e2a:	e7fe      	b.n	8007e2a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d103      	bne.n	8007e3a <xQueueGenericSendFromISR+0x6a>
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	d101      	bne.n	8007e3e <xQueueGenericSendFromISR+0x6e>
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	e000      	b.n	8007e40 <xQueueGenericSendFromISR+0x70>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10a      	bne.n	8007e5a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	623b      	str	r3, [r7, #32]
}
 8007e56:	bf00      	nop
 8007e58:	e7fe      	b.n	8007e58 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e5a:	f002 f92d 	bl	800a0b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e5e:	f3ef 8211 	mrs	r2, BASEPRI
 8007e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e66:	f383 8811 	msr	BASEPRI, r3
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	f3bf 8f4f 	dsb	sy
 8007e72:	61fa      	str	r2, [r7, #28]
 8007e74:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e76:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e78:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d302      	bcc.n	8007e8c <xQueueGenericSendFromISR+0xbc>
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d12f      	bne.n	8007eec <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e9c:	683a      	ldr	r2, [r7, #0]
 8007e9e:	68b9      	ldr	r1, [r7, #8]
 8007ea0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ea2:	f000 fa35 	bl	8008310 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ea6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eae:	d112      	bne.n	8007ed6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d016      	beq.n	8007ee6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eba:	3324      	adds	r3, #36	; 0x24
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f000 fff5 	bl	8008eac <xTaskRemoveFromEventList>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00e      	beq.n	8007ee6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00b      	beq.n	8007ee6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2201      	movs	r2, #1
 8007ed2:	601a      	str	r2, [r3, #0]
 8007ed4:	e007      	b.n	8007ee6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ed6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007eda:	3301      	adds	r3, #1
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	b25a      	sxtb	r2, r3
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007eea:	e001      	b.n	8007ef0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007eec:	2300      	movs	r3, #0
 8007eee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007efa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3740      	adds	r7, #64	; 0x40
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}
	...

08007f08 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b08c      	sub	sp, #48	; 0x30
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007f14:	2300      	movs	r3, #0
 8007f16:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d10a      	bne.n	8007f38 <xQueueReceive+0x30>
	__asm volatile
 8007f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f26:	f383 8811 	msr	BASEPRI, r3
 8007f2a:	f3bf 8f6f 	isb	sy
 8007f2e:	f3bf 8f4f 	dsb	sy
 8007f32:	623b      	str	r3, [r7, #32]
}
 8007f34:	bf00      	nop
 8007f36:	e7fe      	b.n	8007f36 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d103      	bne.n	8007f46 <xQueueReceive+0x3e>
 8007f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <xQueueReceive+0x42>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e000      	b.n	8007f4c <xQueueReceive+0x44>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10a      	bne.n	8007f66 <xQueueReceive+0x5e>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	61fb      	str	r3, [r7, #28]
}
 8007f62:	bf00      	nop
 8007f64:	e7fe      	b.n	8007f64 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f66:	f001 f96f 	bl	8009248 <xTaskGetSchedulerState>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d102      	bne.n	8007f76 <xQueueReceive+0x6e>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d101      	bne.n	8007f7a <xQueueReceive+0x72>
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <xQueueReceive+0x74>
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <xQueueReceive+0x8e>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	61bb      	str	r3, [r7, #24]
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f96:	f001 ffad 	bl	8009ef4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d01f      	beq.n	8007fe6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007fa6:	68b9      	ldr	r1, [r7, #8]
 8007fa8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007faa:	f000 fa1b 	bl	80083e4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	1e5a      	subs	r2, r3, #1
 8007fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d00f      	beq.n	8007fde <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc0:	3310      	adds	r3, #16
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 ff72 	bl	8008eac <xTaskRemoveFromEventList>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d007      	beq.n	8007fde <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007fce:	4b3d      	ldr	r3, [pc, #244]	; (80080c4 <xQueueReceive+0x1bc>)
 8007fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007fde:	f001 ffb9 	bl	8009f54 <vPortExitCritical>
				return pdPASS;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e069      	b.n	80080ba <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d103      	bne.n	8007ff4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fec:	f001 ffb2 	bl	8009f54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	e062      	b.n	80080ba <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d106      	bne.n	8008008 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ffa:	f107 0310 	add.w	r3, r7, #16
 8007ffe:	4618      	mov	r0, r3
 8008000:	f000 ffb8 	bl	8008f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008004:	2301      	movs	r3, #1
 8008006:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008008:	f001 ffa4 	bl	8009f54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800800c:	f000 fd2a 	bl	8008a64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008010:	f001 ff70 	bl	8009ef4 <vPortEnterCritical>
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800801a:	b25b      	sxtb	r3, r3
 800801c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008020:	d103      	bne.n	800802a <xQueueReceive+0x122>
 8008022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800802a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008030:	b25b      	sxtb	r3, r3
 8008032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008036:	d103      	bne.n	8008040 <xQueueReceive+0x138>
 8008038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803a:	2200      	movs	r2, #0
 800803c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008040:	f001 ff88 	bl	8009f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008044:	1d3a      	adds	r2, r7, #4
 8008046:	f107 0310 	add.w	r3, r7, #16
 800804a:	4611      	mov	r1, r2
 800804c:	4618      	mov	r0, r3
 800804e:	f000 ffa7 	bl	8008fa0 <xTaskCheckForTimeOut>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d123      	bne.n	80080a0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800805a:	f000 fa3b 	bl	80084d4 <prvIsQueueEmpty>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d017      	beq.n	8008094 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008066:	3324      	adds	r3, #36	; 0x24
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	4611      	mov	r1, r2
 800806c:	4618      	mov	r0, r3
 800806e:	f000 fecd 	bl	8008e0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008074:	f000 f9dc 	bl	8008430 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008078:	f000 fd02 	bl	8008a80 <xTaskResumeAll>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d189      	bne.n	8007f96 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008082:	4b10      	ldr	r3, [pc, #64]	; (80080c4 <xQueueReceive+0x1bc>)
 8008084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	e780      	b.n	8007f96 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008096:	f000 f9cb 	bl	8008430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800809a:	f000 fcf1 	bl	8008a80 <xTaskResumeAll>
 800809e:	e77a      	b.n	8007f96 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80080a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080a2:	f000 f9c5 	bl	8008430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080a6:	f000 fceb 	bl	8008a80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ac:	f000 fa12 	bl	80084d4 <prvIsQueueEmpty>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	f43f af6f 	beq.w	8007f96 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80080b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3730      	adds	r7, #48	; 0x30
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	e000ed04 	.word	0xe000ed04

080080c8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b08e      	sub	sp, #56	; 0x38
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80080d2:	2300      	movs	r3, #0
 80080d4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80080da:	2300      	movs	r3, #0
 80080dc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80080de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10a      	bne.n	80080fa <xQueueSemaphoreTake+0x32>
	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	623b      	str	r3, [r7, #32]
}
 80080f6:	bf00      	nop
 80080f8:	e7fe      	b.n	80080f8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80080fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	61fb      	str	r3, [r7, #28]
}
 8008114:	bf00      	nop
 8008116:	e7fe      	b.n	8008116 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008118:	f001 f896 	bl	8009248 <xTaskGetSchedulerState>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d102      	bne.n	8008128 <xQueueSemaphoreTake+0x60>
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d101      	bne.n	800812c <xQueueSemaphoreTake+0x64>
 8008128:	2301      	movs	r3, #1
 800812a:	e000      	b.n	800812e <xQueueSemaphoreTake+0x66>
 800812c:	2300      	movs	r3, #0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10a      	bne.n	8008148 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	61bb      	str	r3, [r7, #24]
}
 8008144:	bf00      	nop
 8008146:	e7fe      	b.n	8008146 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008148:	f001 fed4 	bl	8009ef4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008150:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008154:	2b00      	cmp	r3, #0
 8008156:	d024      	beq.n	80081a2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815a:	1e5a      	subs	r2, r3, #1
 800815c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800815e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d104      	bne.n	8008172 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008168:	f001 f9e4 	bl	8009534 <pvTaskIncrementMutexHeldCount>
 800816c:	4602      	mov	r2, r0
 800816e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008170:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d00f      	beq.n	800819a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800817a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800817c:	3310      	adds	r3, #16
 800817e:	4618      	mov	r0, r3
 8008180:	f000 fe94 	bl	8008eac <xTaskRemoveFromEventList>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d007      	beq.n	800819a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800818a:	4b54      	ldr	r3, [pc, #336]	; (80082dc <xQueueSemaphoreTake+0x214>)
 800818c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800819a:	f001 fedb 	bl	8009f54 <vPortExitCritical>
				return pdPASS;
 800819e:	2301      	movs	r3, #1
 80081a0:	e097      	b.n	80082d2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d111      	bne.n	80081cc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80081a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00a      	beq.n	80081c4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	617b      	str	r3, [r7, #20]
}
 80081c0:	bf00      	nop
 80081c2:	e7fe      	b.n	80081c2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80081c4:	f001 fec6 	bl	8009f54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081c8:	2300      	movs	r3, #0
 80081ca:	e082      	b.n	80082d2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d106      	bne.n	80081e0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081d2:	f107 030c 	add.w	r3, r7, #12
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 fecc 	bl	8008f74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081dc:	2301      	movs	r3, #1
 80081de:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081e0:	f001 feb8 	bl	8009f54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081e4:	f000 fc3e 	bl	8008a64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081e8:	f001 fe84 	bl	8009ef4 <vPortEnterCritical>
 80081ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081f2:	b25b      	sxtb	r3, r3
 80081f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f8:	d103      	bne.n	8008202 <xQueueSemaphoreTake+0x13a>
 80081fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fc:	2200      	movs	r2, #0
 80081fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008204:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008208:	b25b      	sxtb	r3, r3
 800820a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820e:	d103      	bne.n	8008218 <xQueueSemaphoreTake+0x150>
 8008210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008212:	2200      	movs	r2, #0
 8008214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008218:	f001 fe9c 	bl	8009f54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800821c:	463a      	mov	r2, r7
 800821e:	f107 030c 	add.w	r3, r7, #12
 8008222:	4611      	mov	r1, r2
 8008224:	4618      	mov	r0, r3
 8008226:	f000 febb 	bl	8008fa0 <xTaskCheckForTimeOut>
 800822a:	4603      	mov	r3, r0
 800822c:	2b00      	cmp	r3, #0
 800822e:	d132      	bne.n	8008296 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008230:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008232:	f000 f94f 	bl	80084d4 <prvIsQueueEmpty>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d026      	beq.n	800828a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d109      	bne.n	8008258 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008244:	f001 fe56 	bl	8009ef4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824a:	689b      	ldr	r3, [r3, #8]
 800824c:	4618      	mov	r0, r3
 800824e:	f001 f819 	bl	8009284 <xTaskPriorityInherit>
 8008252:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008254:	f001 fe7e 	bl	8009f54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825a:	3324      	adds	r3, #36	; 0x24
 800825c:	683a      	ldr	r2, [r7, #0]
 800825e:	4611      	mov	r1, r2
 8008260:	4618      	mov	r0, r3
 8008262:	f000 fdd3 	bl	8008e0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008266:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008268:	f000 f8e2 	bl	8008430 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800826c:	f000 fc08 	bl	8008a80 <xTaskResumeAll>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	f47f af68 	bne.w	8008148 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008278:	4b18      	ldr	r3, [pc, #96]	; (80082dc <xQueueSemaphoreTake+0x214>)
 800827a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800827e:	601a      	str	r2, [r3, #0]
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	e75e      	b.n	8008148 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800828a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800828c:	f000 f8d0 	bl	8008430 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008290:	f000 fbf6 	bl	8008a80 <xTaskResumeAll>
 8008294:	e758      	b.n	8008148 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008296:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008298:	f000 f8ca 	bl	8008430 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800829c:	f000 fbf0 	bl	8008a80 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082a2:	f000 f917 	bl	80084d4 <prvIsQueueEmpty>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f43f af4d 	beq.w	8008148 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80082ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00d      	beq.n	80082d0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80082b4:	f001 fe1e 	bl	8009ef4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80082b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80082ba:	f000 f811 	bl	80082e0 <prvGetDisinheritPriorityAfterTimeout>
 80082be:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80082c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082c6:	4618      	mov	r0, r3
 80082c8:	f001 f8b2 	bl	8009430 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80082cc:	f001 fe42 	bl	8009f54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3738      	adds	r7, #56	; 0x38
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	e000ed04 	.word	0xe000ed04

080082e0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80082e0:	b480      	push	{r7}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d006      	beq.n	80082fe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80082fa:	60fb      	str	r3, [r7, #12]
 80082fc:	e001      	b.n	8008302 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80082fe:	2300      	movs	r3, #0
 8008300:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008302:	68fb      	ldr	r3, [r7, #12]
	}
 8008304:	4618      	mov	r0, r3
 8008306:	3714      	adds	r7, #20
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b086      	sub	sp, #24
 8008314:	af00      	add	r7, sp, #0
 8008316:	60f8      	str	r0, [r7, #12]
 8008318:	60b9      	str	r1, [r7, #8]
 800831a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800831c:	2300      	movs	r3, #0
 800831e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008324:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800832a:	2b00      	cmp	r3, #0
 800832c:	d10d      	bne.n	800834a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d14d      	bne.n	80083d2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	4618      	mov	r0, r3
 800833c:	f001 f80a 	bl	8009354 <xTaskPriorityDisinherit>
 8008340:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2200      	movs	r2, #0
 8008346:	609a      	str	r2, [r3, #8]
 8008348:	e043      	b.n	80083d2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d119      	bne.n	8008384 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	6858      	ldr	r0, [r3, #4]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008358:	461a      	mov	r2, r3
 800835a:	68b9      	ldr	r1, [r7, #8]
 800835c:	f002 fb63 	bl	800aa26 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008368:	441a      	add	r2, r3
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	429a      	cmp	r2, r3
 8008378:	d32b      	bcc.n	80083d2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681a      	ldr	r2, [r3, #0]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	605a      	str	r2, [r3, #4]
 8008382:	e026      	b.n	80083d2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	68d8      	ldr	r0, [r3, #12]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838c:	461a      	mov	r2, r3
 800838e:	68b9      	ldr	r1, [r7, #8]
 8008390:	f002 fb49 	bl	800aa26 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	68da      	ldr	r2, [r3, #12]
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800839c:	425b      	negs	r3, r3
 800839e:	441a      	add	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	68da      	ldr	r2, [r3, #12]
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d207      	bcs.n	80083c0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	689a      	ldr	r2, [r3, #8]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b8:	425b      	negs	r3, r3
 80083ba:	441a      	add	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d105      	bne.n	80083d2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	3b01      	subs	r3, #1
 80083d0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	1c5a      	adds	r2, r3, #1
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80083da:	697b      	ldr	r3, [r7, #20]
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3718      	adds	r7, #24
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}

080083e4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d018      	beq.n	8008428 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fe:	441a      	add	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	68da      	ldr	r2, [r3, #12]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	429a      	cmp	r2, r3
 800840e:	d303      	bcc.n	8008418 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68d9      	ldr	r1, [r3, #12]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008420:	461a      	mov	r2, r3
 8008422:	6838      	ldr	r0, [r7, #0]
 8008424:	f002 faff 	bl	800aa26 <memcpy>
	}
}
 8008428:	bf00      	nop
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b084      	sub	sp, #16
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008438:	f001 fd5c 	bl	8009ef4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008442:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008444:	e011      	b.n	800846a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844a:	2b00      	cmp	r3, #0
 800844c:	d012      	beq.n	8008474 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	3324      	adds	r3, #36	; 0x24
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fd2a 	bl	8008eac <xTaskRemoveFromEventList>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	d001      	beq.n	8008462 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800845e:	f000 fe01 	bl	8009064 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008462:	7bfb      	ldrb	r3, [r7, #15]
 8008464:	3b01      	subs	r3, #1
 8008466:	b2db      	uxtb	r3, r3
 8008468:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800846a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800846e:	2b00      	cmp	r3, #0
 8008470:	dce9      	bgt.n	8008446 <prvUnlockQueue+0x16>
 8008472:	e000      	b.n	8008476 <prvUnlockQueue+0x46>
					break;
 8008474:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	22ff      	movs	r2, #255	; 0xff
 800847a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800847e:	f001 fd69 	bl	8009f54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008482:	f001 fd37 	bl	8009ef4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800848c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800848e:	e011      	b.n	80084b4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d012      	beq.n	80084be <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	3310      	adds	r3, #16
 800849c:	4618      	mov	r0, r3
 800849e:	f000 fd05 	bl	8008eac <xTaskRemoveFromEventList>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80084a8:	f000 fddc 	bl	8009064 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80084ac:	7bbb      	ldrb	r3, [r7, #14]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	dce9      	bgt.n	8008490 <prvUnlockQueue+0x60>
 80084bc:	e000      	b.n	80084c0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80084be:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	22ff      	movs	r2, #255	; 0xff
 80084c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80084c8:	f001 fd44 	bl	8009f54 <vPortExitCritical>
}
 80084cc:	bf00      	nop
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80084dc:	f001 fd0a 	bl	8009ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d102      	bne.n	80084ee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80084e8:	2301      	movs	r3, #1
 80084ea:	60fb      	str	r3, [r7, #12]
 80084ec:	e001      	b.n	80084f2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80084ee:	2300      	movs	r3, #0
 80084f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80084f2:	f001 fd2f 	bl	8009f54 <vPortExitCritical>

	return xReturn;
 80084f6:	68fb      	ldr	r3, [r7, #12]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008508:	f001 fcf4 	bl	8009ef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008514:	429a      	cmp	r2, r3
 8008516:	d102      	bne.n	800851e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008518:	2301      	movs	r3, #1
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	e001      	b.n	8008522 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800851e:	2300      	movs	r3, #0
 8008520:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008522:	f001 fd17 	bl	8009f54 <vPortExitCritical>

	return xReturn;
 8008526:	68fb      	ldr	r3, [r7, #12]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008530:	b480      	push	{r7}
 8008532:	b085      	sub	sp, #20
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800853a:	2300      	movs	r3, #0
 800853c:	60fb      	str	r3, [r7, #12]
 800853e:	e014      	b.n	800856a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008540:	4a0f      	ldr	r2, [pc, #60]	; (8008580 <vQueueAddToRegistry+0x50>)
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10b      	bne.n	8008564 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800854c:	490c      	ldr	r1, [pc, #48]	; (8008580 <vQueueAddToRegistry+0x50>)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008556:	4a0a      	ldr	r2, [pc, #40]	; (8008580 <vQueueAddToRegistry+0x50>)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	00db      	lsls	r3, r3, #3
 800855c:	4413      	add	r3, r2
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008562:	e006      	b.n	8008572 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	3301      	adds	r3, #1
 8008568:	60fb      	str	r3, [r7, #12]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b07      	cmp	r3, #7
 800856e:	d9e7      	bls.n	8008540 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008570:	bf00      	nop
 8008572:	bf00      	nop
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	20000954 	.word	0x20000954

08008584 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008584:	b580      	push	{r7, lr}
 8008586:	b086      	sub	sp, #24
 8008588:	af00      	add	r7, sp, #0
 800858a:	60f8      	str	r0, [r7, #12]
 800858c:	60b9      	str	r1, [r7, #8]
 800858e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008594:	f001 fcae 	bl	8009ef4 <vPortEnterCritical>
 8008598:	697b      	ldr	r3, [r7, #20]
 800859a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800859e:	b25b      	sxtb	r3, r3
 80085a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a4:	d103      	bne.n	80085ae <vQueueWaitForMessageRestricted+0x2a>
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085b4:	b25b      	sxtb	r3, r3
 80085b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085ba:	d103      	bne.n	80085c4 <vQueueWaitForMessageRestricted+0x40>
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085c4:	f001 fcc6 	bl	8009f54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d106      	bne.n	80085de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	3324      	adds	r3, #36	; 0x24
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	68b9      	ldr	r1, [r7, #8]
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fc3b 	bl	8008e54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80085de:	6978      	ldr	r0, [r7, #20]
 80085e0:	f7ff ff26 	bl	8008430 <prvUnlockQueue>
	}
 80085e4:	bf00      	nop
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b08e      	sub	sp, #56	; 0x38
 80085f0:	af04      	add	r7, sp, #16
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
 80085f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80085fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10a      	bne.n	8008616 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	623b      	str	r3, [r7, #32]
}
 8008612:	bf00      	nop
 8008614:	e7fe      	b.n	8008614 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10a      	bne.n	8008632 <xTaskCreateStatic+0x46>
	__asm volatile
 800861c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008620:	f383 8811 	msr	BASEPRI, r3
 8008624:	f3bf 8f6f 	isb	sy
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	61fb      	str	r3, [r7, #28]
}
 800862e:	bf00      	nop
 8008630:	e7fe      	b.n	8008630 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008632:	235c      	movs	r3, #92	; 0x5c
 8008634:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	2b5c      	cmp	r3, #92	; 0x5c
 800863a:	d00a      	beq.n	8008652 <xTaskCreateStatic+0x66>
	__asm volatile
 800863c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008640:	f383 8811 	msr	BASEPRI, r3
 8008644:	f3bf 8f6f 	isb	sy
 8008648:	f3bf 8f4f 	dsb	sy
 800864c:	61bb      	str	r3, [r7, #24]
}
 800864e:	bf00      	nop
 8008650:	e7fe      	b.n	8008650 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008652:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008656:	2b00      	cmp	r3, #0
 8008658:	d01e      	beq.n	8008698 <xTaskCreateStatic+0xac>
 800865a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865c:	2b00      	cmp	r3, #0
 800865e:	d01b      	beq.n	8008698 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008662:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008666:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008668:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800866a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800866c:	2202      	movs	r2, #2
 800866e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008672:	2300      	movs	r3, #0
 8008674:	9303      	str	r3, [sp, #12]
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	9302      	str	r3, [sp, #8]
 800867a:	f107 0314 	add.w	r3, r7, #20
 800867e:	9301      	str	r3, [sp, #4]
 8008680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	68b9      	ldr	r1, [r7, #8]
 800868a:	68f8      	ldr	r0, [r7, #12]
 800868c:	f000 f850 	bl	8008730 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008690:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008692:	f000 f8dd 	bl	8008850 <prvAddNewTaskToReadyList>
 8008696:	e001      	b.n	800869c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008698:	2300      	movs	r3, #0
 800869a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800869c:	697b      	ldr	r3, [r7, #20]
	}
 800869e:	4618      	mov	r0, r3
 80086a0:	3728      	adds	r7, #40	; 0x28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}

080086a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80086a6:	b580      	push	{r7, lr}
 80086a8:	b08c      	sub	sp, #48	; 0x30
 80086aa:	af04      	add	r7, sp, #16
 80086ac:	60f8      	str	r0, [r7, #12]
 80086ae:	60b9      	str	r1, [r7, #8]
 80086b0:	603b      	str	r3, [r7, #0]
 80086b2:	4613      	mov	r3, r2
 80086b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80086b6:	88fb      	ldrh	r3, [r7, #6]
 80086b8:	009b      	lsls	r3, r3, #2
 80086ba:	4618      	mov	r0, r3
 80086bc:	f001 fd3c 	bl	800a138 <pvPortMalloc>
 80086c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00e      	beq.n	80086e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80086c8:	205c      	movs	r0, #92	; 0x5c
 80086ca:	f001 fd35 	bl	800a138 <pvPortMalloc>
 80086ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	631a      	str	r2, [r3, #48]	; 0x30
 80086dc:	e005      	b.n	80086ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80086de:	6978      	ldr	r0, [r7, #20]
 80086e0:	f001 fdf6 	bl	800a2d0 <vPortFree>
 80086e4:	e001      	b.n	80086ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80086e6:	2300      	movs	r3, #0
 80086e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80086ea:	69fb      	ldr	r3, [r7, #28]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d017      	beq.n	8008720 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80086f8:	88fa      	ldrh	r2, [r7, #6]
 80086fa:	2300      	movs	r3, #0
 80086fc:	9303      	str	r3, [sp, #12]
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	9302      	str	r3, [sp, #8]
 8008702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008704:	9301      	str	r3, [sp, #4]
 8008706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68b9      	ldr	r1, [r7, #8]
 800870e:	68f8      	ldr	r0, [r7, #12]
 8008710:	f000 f80e 	bl	8008730 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008714:	69f8      	ldr	r0, [r7, #28]
 8008716:	f000 f89b 	bl	8008850 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800871a:	2301      	movs	r3, #1
 800871c:	61bb      	str	r3, [r7, #24]
 800871e:	e002      	b.n	8008726 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008720:	f04f 33ff 	mov.w	r3, #4294967295
 8008724:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008726:	69bb      	ldr	r3, [r7, #24]
	}
 8008728:	4618      	mov	r0, r3
 800872a:	3720      	adds	r7, #32
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}

08008730 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b088      	sub	sp, #32
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	461a      	mov	r2, r3
 8008748:	21a5      	movs	r1, #165	; 0xa5
 800874a:	f002 f894 	bl	800a876 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800874e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008758:	3b01      	subs	r3, #1
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	f023 0307 	bic.w	r3, r3, #7
 8008766:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	f003 0307 	and.w	r3, r3, #7
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00a      	beq.n	8008788 <prvInitialiseNewTask+0x58>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	617b      	str	r3, [r7, #20]
}
 8008784:	bf00      	nop
 8008786:	e7fe      	b.n	8008786 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d01f      	beq.n	80087ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800878e:	2300      	movs	r3, #0
 8008790:	61fb      	str	r3, [r7, #28]
 8008792:	e012      	b.n	80087ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	4413      	add	r3, r2
 800879a:	7819      	ldrb	r1, [r3, #0]
 800879c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	4413      	add	r3, r2
 80087a2:	3334      	adds	r3, #52	; 0x34
 80087a4:	460a      	mov	r2, r1
 80087a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	4413      	add	r3, r2
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d006      	beq.n	80087c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087b4:	69fb      	ldr	r3, [r7, #28]
 80087b6:	3301      	adds	r3, #1
 80087b8:	61fb      	str	r3, [r7, #28]
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	2b0f      	cmp	r3, #15
 80087be:	d9e9      	bls.n	8008794 <prvInitialiseNewTask+0x64>
 80087c0:	e000      	b.n	80087c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80087c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80087c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80087cc:	e003      	b.n	80087d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80087ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80087d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d8:	2b37      	cmp	r3, #55	; 0x37
 80087da:	d901      	bls.n	80087e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80087dc:	2337      	movs	r3, #55	; 0x37
 80087de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80087e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80087e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80087ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ee:	2200      	movs	r2, #0
 80087f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f4:	3304      	adds	r3, #4
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fe ff64 	bl	80076c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80087fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fe:	3318      	adds	r3, #24
 8008800:	4618      	mov	r0, r3
 8008802:	f7fe ff5f 	bl	80076c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800880a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800880c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008814:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800881a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800881c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881e:	2200      	movs	r2, #0
 8008820:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	68f9      	ldr	r1, [r7, #12]
 800882e:	69b8      	ldr	r0, [r7, #24]
 8008830:	f001 fa36 	bl	8009ca0 <pxPortInitialiseStack>
 8008834:	4602      	mov	r2, r0
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800883a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883c:	2b00      	cmp	r3, #0
 800883e:	d002      	beq.n	8008846 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008844:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008846:	bf00      	nop
 8008848:	3720      	adds	r7, #32
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}
	...

08008850 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008858:	f001 fb4c 	bl	8009ef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800885c:	4b2d      	ldr	r3, [pc, #180]	; (8008914 <prvAddNewTaskToReadyList+0xc4>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3301      	adds	r3, #1
 8008862:	4a2c      	ldr	r2, [pc, #176]	; (8008914 <prvAddNewTaskToReadyList+0xc4>)
 8008864:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008866:	4b2c      	ldr	r3, [pc, #176]	; (8008918 <prvAddNewTaskToReadyList+0xc8>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d109      	bne.n	8008882 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800886e:	4a2a      	ldr	r2, [pc, #168]	; (8008918 <prvAddNewTaskToReadyList+0xc8>)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008874:	4b27      	ldr	r3, [pc, #156]	; (8008914 <prvAddNewTaskToReadyList+0xc4>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b01      	cmp	r3, #1
 800887a:	d110      	bne.n	800889e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800887c:	f000 fc16 	bl	80090ac <prvInitialiseTaskLists>
 8008880:	e00d      	b.n	800889e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008882:	4b26      	ldr	r3, [pc, #152]	; (800891c <prvAddNewTaskToReadyList+0xcc>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d109      	bne.n	800889e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800888a:	4b23      	ldr	r3, [pc, #140]	; (8008918 <prvAddNewTaskToReadyList+0xc8>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008894:	429a      	cmp	r2, r3
 8008896:	d802      	bhi.n	800889e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008898:	4a1f      	ldr	r2, [pc, #124]	; (8008918 <prvAddNewTaskToReadyList+0xc8>)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800889e:	4b20      	ldr	r3, [pc, #128]	; (8008920 <prvAddNewTaskToReadyList+0xd0>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	3301      	adds	r3, #1
 80088a4:	4a1e      	ldr	r2, [pc, #120]	; (8008920 <prvAddNewTaskToReadyList+0xd0>)
 80088a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80088a8:	4b1d      	ldr	r3, [pc, #116]	; (8008920 <prvAddNewTaskToReadyList+0xd0>)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b4:	4b1b      	ldr	r3, [pc, #108]	; (8008924 <prvAddNewTaskToReadyList+0xd4>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d903      	bls.n	80088c4 <prvAddNewTaskToReadyList+0x74>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c0:	4a18      	ldr	r2, [pc, #96]	; (8008924 <prvAddNewTaskToReadyList+0xd4>)
 80088c2:	6013      	str	r3, [r2, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c8:	4613      	mov	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4a15      	ldr	r2, [pc, #84]	; (8008928 <prvAddNewTaskToReadyList+0xd8>)
 80088d2:	441a      	add	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3304      	adds	r3, #4
 80088d8:	4619      	mov	r1, r3
 80088da:	4610      	mov	r0, r2
 80088dc:	f7fe feff 	bl	80076de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80088e0:	f001 fb38 	bl	8009f54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80088e4:	4b0d      	ldr	r3, [pc, #52]	; (800891c <prvAddNewTaskToReadyList+0xcc>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00e      	beq.n	800890a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80088ec:	4b0a      	ldr	r3, [pc, #40]	; (8008918 <prvAddNewTaskToReadyList+0xc8>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d207      	bcs.n	800890a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80088fa:	4b0c      	ldr	r3, [pc, #48]	; (800892c <prvAddNewTaskToReadyList+0xdc>)
 80088fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008900:	601a      	str	r2, [r3, #0]
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800890a:	bf00      	nop
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	20000e68 	.word	0x20000e68
 8008918:	20000994 	.word	0x20000994
 800891c:	20000e74 	.word	0x20000e74
 8008920:	20000e84 	.word	0x20000e84
 8008924:	20000e70 	.word	0x20000e70
 8008928:	20000998 	.word	0x20000998
 800892c:	e000ed04 	.word	0xe000ed04

08008930 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008938:	2300      	movs	r3, #0
 800893a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d017      	beq.n	8008972 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008942:	4b13      	ldr	r3, [pc, #76]	; (8008990 <vTaskDelay+0x60>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00a      	beq.n	8008960 <vTaskDelay+0x30>
	__asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	60bb      	str	r3, [r7, #8]
}
 800895c:	bf00      	nop
 800895e:	e7fe      	b.n	800895e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008960:	f000 f880 	bl	8008a64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008964:	2100      	movs	r1, #0
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fdf8 	bl	800955c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800896c:	f000 f888 	bl	8008a80 <xTaskResumeAll>
 8008970:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d107      	bne.n	8008988 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008978:	4b06      	ldr	r3, [pc, #24]	; (8008994 <vTaskDelay+0x64>)
 800897a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800897e:	601a      	str	r2, [r3, #0]
 8008980:	f3bf 8f4f 	dsb	sy
 8008984:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008988:	bf00      	nop
 800898a:	3710      	adds	r7, #16
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20000e90 	.word	0x20000e90
 8008994:	e000ed04 	.word	0xe000ed04

08008998 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b08a      	sub	sp, #40	; 0x28
 800899c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800899e:	2300      	movs	r3, #0
 80089a0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80089a2:	2300      	movs	r3, #0
 80089a4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80089a6:	463a      	mov	r2, r7
 80089a8:	1d39      	adds	r1, r7, #4
 80089aa:	f107 0308 	add.w	r3, r7, #8
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe fe34 	bl	800761c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68ba      	ldr	r2, [r7, #8]
 80089ba:	9202      	str	r2, [sp, #8]
 80089bc:	9301      	str	r3, [sp, #4]
 80089be:	2300      	movs	r3, #0
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	2300      	movs	r3, #0
 80089c4:	460a      	mov	r2, r1
 80089c6:	4921      	ldr	r1, [pc, #132]	; (8008a4c <vTaskStartScheduler+0xb4>)
 80089c8:	4821      	ldr	r0, [pc, #132]	; (8008a50 <vTaskStartScheduler+0xb8>)
 80089ca:	f7ff fe0f 	bl	80085ec <xTaskCreateStatic>
 80089ce:	4603      	mov	r3, r0
 80089d0:	4a20      	ldr	r2, [pc, #128]	; (8008a54 <vTaskStartScheduler+0xbc>)
 80089d2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80089d4:	4b1f      	ldr	r3, [pc, #124]	; (8008a54 <vTaskStartScheduler+0xbc>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80089dc:	2301      	movs	r3, #1
 80089de:	617b      	str	r3, [r7, #20]
 80089e0:	e001      	b.n	80089e6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80089e2:	2300      	movs	r3, #0
 80089e4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d102      	bne.n	80089f2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80089ec:	f000 fe0a 	bl	8009604 <xTimerCreateTimerTask>
 80089f0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d116      	bne.n	8008a26 <vTaskStartScheduler+0x8e>
	__asm volatile
 80089f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fc:	f383 8811 	msr	BASEPRI, r3
 8008a00:	f3bf 8f6f 	isb	sy
 8008a04:	f3bf 8f4f 	dsb	sy
 8008a08:	613b      	str	r3, [r7, #16]
}
 8008a0a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008a0c:	4b12      	ldr	r3, [pc, #72]	; (8008a58 <vTaskStartScheduler+0xc0>)
 8008a0e:	f04f 32ff 	mov.w	r2, #4294967295
 8008a12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008a14:	4b11      	ldr	r3, [pc, #68]	; (8008a5c <vTaskStartScheduler+0xc4>)
 8008a16:	2201      	movs	r2, #1
 8008a18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008a1a:	4b11      	ldr	r3, [pc, #68]	; (8008a60 <vTaskStartScheduler+0xc8>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008a20:	f001 f9c6 	bl	8009db0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008a24:	e00e      	b.n	8008a44 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a2c:	d10a      	bne.n	8008a44 <vTaskStartScheduler+0xac>
	__asm volatile
 8008a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a32:	f383 8811 	msr	BASEPRI, r3
 8008a36:	f3bf 8f6f 	isb	sy
 8008a3a:	f3bf 8f4f 	dsb	sy
 8008a3e:	60fb      	str	r3, [r7, #12]
}
 8008a40:	bf00      	nop
 8008a42:	e7fe      	b.n	8008a42 <vTaskStartScheduler+0xaa>
}
 8008a44:	bf00      	nop
 8008a46:	3718      	adds	r7, #24
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	0800ba80 	.word	0x0800ba80
 8008a50:	0800907d 	.word	0x0800907d
 8008a54:	20000e8c 	.word	0x20000e8c
 8008a58:	20000e88 	.word	0x20000e88
 8008a5c:	20000e74 	.word	0x20000e74
 8008a60:	20000e6c 	.word	0x20000e6c

08008a64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008a68:	4b04      	ldr	r3, [pc, #16]	; (8008a7c <vTaskSuspendAll+0x18>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	4a03      	ldr	r2, [pc, #12]	; (8008a7c <vTaskSuspendAll+0x18>)
 8008a70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008a72:	bf00      	nop
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr
 8008a7c:	20000e90 	.word	0x20000e90

08008a80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a86:	2300      	movs	r3, #0
 8008a88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a8e:	4b42      	ldr	r3, [pc, #264]	; (8008b98 <xTaskResumeAll+0x118>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10a      	bne.n	8008aac <xTaskResumeAll+0x2c>
	__asm volatile
 8008a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9a:	f383 8811 	msr	BASEPRI, r3
 8008a9e:	f3bf 8f6f 	isb	sy
 8008aa2:	f3bf 8f4f 	dsb	sy
 8008aa6:	603b      	str	r3, [r7, #0]
}
 8008aa8:	bf00      	nop
 8008aaa:	e7fe      	b.n	8008aaa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008aac:	f001 fa22 	bl	8009ef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008ab0:	4b39      	ldr	r3, [pc, #228]	; (8008b98 <xTaskResumeAll+0x118>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	4a38      	ldr	r2, [pc, #224]	; (8008b98 <xTaskResumeAll+0x118>)
 8008ab8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008aba:	4b37      	ldr	r3, [pc, #220]	; (8008b98 <xTaskResumeAll+0x118>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d162      	bne.n	8008b88 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008ac2:	4b36      	ldr	r3, [pc, #216]	; (8008b9c <xTaskResumeAll+0x11c>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d05e      	beq.n	8008b88 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008aca:	e02f      	b.n	8008b2c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008acc:	4b34      	ldr	r3, [pc, #208]	; (8008ba0 <xTaskResumeAll+0x120>)
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	68db      	ldr	r3, [r3, #12]
 8008ad2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	3318      	adds	r3, #24
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f7fe fe5d 	bl	8007798 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fe fe58 	bl	8007798 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aec:	4b2d      	ldr	r3, [pc, #180]	; (8008ba4 <xTaskResumeAll+0x124>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	429a      	cmp	r2, r3
 8008af2:	d903      	bls.n	8008afc <xTaskResumeAll+0x7c>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af8:	4a2a      	ldr	r2, [pc, #168]	; (8008ba4 <xTaskResumeAll+0x124>)
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b00:	4613      	mov	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4413      	add	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4a27      	ldr	r2, [pc, #156]	; (8008ba8 <xTaskResumeAll+0x128>)
 8008b0a:	441a      	add	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	3304      	adds	r3, #4
 8008b10:	4619      	mov	r1, r3
 8008b12:	4610      	mov	r0, r2
 8008b14:	f7fe fde3 	bl	80076de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b1c:	4b23      	ldr	r3, [pc, #140]	; (8008bac <xTaskResumeAll+0x12c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d302      	bcc.n	8008b2c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008b26:	4b22      	ldr	r3, [pc, #136]	; (8008bb0 <xTaskResumeAll+0x130>)
 8008b28:	2201      	movs	r2, #1
 8008b2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b2c:	4b1c      	ldr	r3, [pc, #112]	; (8008ba0 <xTaskResumeAll+0x120>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d1cb      	bne.n	8008acc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d001      	beq.n	8008b3e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008b3a:	f000 fb55 	bl	80091e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008b3e:	4b1d      	ldr	r3, [pc, #116]	; (8008bb4 <xTaskResumeAll+0x134>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d010      	beq.n	8008b6c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008b4a:	f000 f847 	bl	8008bdc <xTaskIncrementTick>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008b54:	4b16      	ldr	r3, [pc, #88]	; (8008bb0 <xTaskResumeAll+0x130>)
 8008b56:	2201      	movs	r2, #1
 8008b58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1f1      	bne.n	8008b4a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008b66:	4b13      	ldr	r3, [pc, #76]	; (8008bb4 <xTaskResumeAll+0x134>)
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b6c:	4b10      	ldr	r3, [pc, #64]	; (8008bb0 <xTaskResumeAll+0x130>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d009      	beq.n	8008b88 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b74:	2301      	movs	r3, #1
 8008b76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b78:	4b0f      	ldr	r3, [pc, #60]	; (8008bb8 <xTaskResumeAll+0x138>)
 8008b7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b7e:	601a      	str	r2, [r3, #0]
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b88:	f001 f9e4 	bl	8009f54 <vPortExitCritical>

	return xAlreadyYielded;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	20000e90 	.word	0x20000e90
 8008b9c:	20000e68 	.word	0x20000e68
 8008ba0:	20000e28 	.word	0x20000e28
 8008ba4:	20000e70 	.word	0x20000e70
 8008ba8:	20000998 	.word	0x20000998
 8008bac:	20000994 	.word	0x20000994
 8008bb0:	20000e7c 	.word	0x20000e7c
 8008bb4:	20000e78 	.word	0x20000e78
 8008bb8:	e000ed04 	.word	0xe000ed04

08008bbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008bc2:	4b05      	ldr	r3, [pc, #20]	; (8008bd8 <xTaskGetTickCount+0x1c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008bc8:	687b      	ldr	r3, [r7, #4]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	370c      	adds	r7, #12
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	20000e6c 	.word	0x20000e6c

08008bdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008be2:	2300      	movs	r3, #0
 8008be4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008be6:	4b4f      	ldr	r3, [pc, #316]	; (8008d24 <xTaskIncrementTick+0x148>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f040 808f 	bne.w	8008d0e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008bf0:	4b4d      	ldr	r3, [pc, #308]	; (8008d28 <xTaskIncrementTick+0x14c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008bf8:	4a4b      	ldr	r2, [pc, #300]	; (8008d28 <xTaskIncrementTick+0x14c>)
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d120      	bne.n	8008c46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c04:	4b49      	ldr	r3, [pc, #292]	; (8008d2c <xTaskIncrementTick+0x150>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00a      	beq.n	8008c24 <xTaskIncrementTick+0x48>
	__asm volatile
 8008c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c12:	f383 8811 	msr	BASEPRI, r3
 8008c16:	f3bf 8f6f 	isb	sy
 8008c1a:	f3bf 8f4f 	dsb	sy
 8008c1e:	603b      	str	r3, [r7, #0]
}
 8008c20:	bf00      	nop
 8008c22:	e7fe      	b.n	8008c22 <xTaskIncrementTick+0x46>
 8008c24:	4b41      	ldr	r3, [pc, #260]	; (8008d2c <xTaskIncrementTick+0x150>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	60fb      	str	r3, [r7, #12]
 8008c2a:	4b41      	ldr	r3, [pc, #260]	; (8008d30 <xTaskIncrementTick+0x154>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a3f      	ldr	r2, [pc, #252]	; (8008d2c <xTaskIncrementTick+0x150>)
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	4a3f      	ldr	r2, [pc, #252]	; (8008d30 <xTaskIncrementTick+0x154>)
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	6013      	str	r3, [r2, #0]
 8008c38:	4b3e      	ldr	r3, [pc, #248]	; (8008d34 <xTaskIncrementTick+0x158>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	4a3d      	ldr	r2, [pc, #244]	; (8008d34 <xTaskIncrementTick+0x158>)
 8008c40:	6013      	str	r3, [r2, #0]
 8008c42:	f000 fad1 	bl	80091e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008c46:	4b3c      	ldr	r3, [pc, #240]	; (8008d38 <xTaskIncrementTick+0x15c>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	693a      	ldr	r2, [r7, #16]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d349      	bcc.n	8008ce4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c50:	4b36      	ldr	r3, [pc, #216]	; (8008d2c <xTaskIncrementTick+0x150>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d104      	bne.n	8008c64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c5a:	4b37      	ldr	r3, [pc, #220]	; (8008d38 <xTaskIncrementTick+0x15c>)
 8008c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c60:	601a      	str	r2, [r3, #0]
					break;
 8008c62:	e03f      	b.n	8008ce4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c64:	4b31      	ldr	r3, [pc, #196]	; (8008d2c <xTaskIncrementTick+0x150>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d203      	bcs.n	8008c84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c7c:	4a2e      	ldr	r2, [pc, #184]	; (8008d38 <xTaskIncrementTick+0x15c>)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008c82:	e02f      	b.n	8008ce4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	3304      	adds	r3, #4
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7fe fd85 	bl	8007798 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d004      	beq.n	8008ca0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	3318      	adds	r3, #24
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7fe fd7c 	bl	8007798 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca4:	4b25      	ldr	r3, [pc, #148]	; (8008d3c <xTaskIncrementTick+0x160>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d903      	bls.n	8008cb4 <xTaskIncrementTick+0xd8>
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	4a22      	ldr	r2, [pc, #136]	; (8008d3c <xTaskIncrementTick+0x160>)
 8008cb2:	6013      	str	r3, [r2, #0]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cb8:	4613      	mov	r3, r2
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	4413      	add	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4a1f      	ldr	r2, [pc, #124]	; (8008d40 <xTaskIncrementTick+0x164>)
 8008cc2:	441a      	add	r2, r3
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	3304      	adds	r3, #4
 8008cc8:	4619      	mov	r1, r3
 8008cca:	4610      	mov	r0, r2
 8008ccc:	f7fe fd07 	bl	80076de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd4:	4b1b      	ldr	r3, [pc, #108]	; (8008d44 <xTaskIncrementTick+0x168>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d3b8      	bcc.n	8008c50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ce2:	e7b5      	b.n	8008c50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008ce4:	4b17      	ldr	r3, [pc, #92]	; (8008d44 <xTaskIncrementTick+0x168>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cea:	4915      	ldr	r1, [pc, #84]	; (8008d40 <xTaskIncrementTick+0x164>)
 8008cec:	4613      	mov	r3, r2
 8008cee:	009b      	lsls	r3, r3, #2
 8008cf0:	4413      	add	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	440b      	add	r3, r1
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d901      	bls.n	8008d00 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d00:	4b11      	ldr	r3, [pc, #68]	; (8008d48 <xTaskIncrementTick+0x16c>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d007      	beq.n	8008d18 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	617b      	str	r3, [r7, #20]
 8008d0c:	e004      	b.n	8008d18 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d0e:	4b0f      	ldr	r3, [pc, #60]	; (8008d4c <xTaskIncrementTick+0x170>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3301      	adds	r3, #1
 8008d14:	4a0d      	ldr	r2, [pc, #52]	; (8008d4c <xTaskIncrementTick+0x170>)
 8008d16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008d18:	697b      	ldr	r3, [r7, #20]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3718      	adds	r7, #24
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	20000e90 	.word	0x20000e90
 8008d28:	20000e6c 	.word	0x20000e6c
 8008d2c:	20000e20 	.word	0x20000e20
 8008d30:	20000e24 	.word	0x20000e24
 8008d34:	20000e80 	.word	0x20000e80
 8008d38:	20000e88 	.word	0x20000e88
 8008d3c:	20000e70 	.word	0x20000e70
 8008d40:	20000998 	.word	0x20000998
 8008d44:	20000994 	.word	0x20000994
 8008d48:	20000e7c 	.word	0x20000e7c
 8008d4c:	20000e78 	.word	0x20000e78

08008d50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008d50:	b480      	push	{r7}
 8008d52:	b085      	sub	sp, #20
 8008d54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008d56:	4b28      	ldr	r3, [pc, #160]	; (8008df8 <vTaskSwitchContext+0xa8>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d003      	beq.n	8008d66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008d5e:	4b27      	ldr	r3, [pc, #156]	; (8008dfc <vTaskSwitchContext+0xac>)
 8008d60:	2201      	movs	r2, #1
 8008d62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008d64:	e041      	b.n	8008dea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008d66:	4b25      	ldr	r3, [pc, #148]	; (8008dfc <vTaskSwitchContext+0xac>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d6c:	4b24      	ldr	r3, [pc, #144]	; (8008e00 <vTaskSwitchContext+0xb0>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	60fb      	str	r3, [r7, #12]
 8008d72:	e010      	b.n	8008d96 <vTaskSwitchContext+0x46>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10a      	bne.n	8008d90 <vTaskSwitchContext+0x40>
	__asm volatile
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	607b      	str	r3, [r7, #4]
}
 8008d8c:	bf00      	nop
 8008d8e:	e7fe      	b.n	8008d8e <vTaskSwitchContext+0x3e>
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	3b01      	subs	r3, #1
 8008d94:	60fb      	str	r3, [r7, #12]
 8008d96:	491b      	ldr	r1, [pc, #108]	; (8008e04 <vTaskSwitchContext+0xb4>)
 8008d98:	68fa      	ldr	r2, [r7, #12]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	009b      	lsls	r3, r3, #2
 8008d9e:	4413      	add	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	440b      	add	r3, r1
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d0e4      	beq.n	8008d74 <vTaskSwitchContext+0x24>
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	4613      	mov	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4413      	add	r3, r2
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	4a13      	ldr	r2, [pc, #76]	; (8008e04 <vTaskSwitchContext+0xb4>)
 8008db6:	4413      	add	r3, r2
 8008db8:	60bb      	str	r3, [r7, #8]
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	605a      	str	r2, [r3, #4]
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	3308      	adds	r3, #8
 8008dcc:	429a      	cmp	r2, r3
 8008dce:	d104      	bne.n	8008dda <vTaskSwitchContext+0x8a>
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	685a      	ldr	r2, [r3, #4]
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	605a      	str	r2, [r3, #4]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	4a09      	ldr	r2, [pc, #36]	; (8008e08 <vTaskSwitchContext+0xb8>)
 8008de2:	6013      	str	r3, [r2, #0]
 8008de4:	4a06      	ldr	r2, [pc, #24]	; (8008e00 <vTaskSwitchContext+0xb0>)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6013      	str	r3, [r2, #0]
}
 8008dea:	bf00      	nop
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	20000e90 	.word	0x20000e90
 8008dfc:	20000e7c 	.word	0x20000e7c
 8008e00:	20000e70 	.word	0x20000e70
 8008e04:	20000998 	.word	0x20000998
 8008e08:	20000994 	.word	0x20000994

08008e0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	b084      	sub	sp, #16
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10a      	bne.n	8008e32 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	60fb      	str	r3, [r7, #12]
}
 8008e2e:	bf00      	nop
 8008e30:	e7fe      	b.n	8008e30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e32:	4b07      	ldr	r3, [pc, #28]	; (8008e50 <vTaskPlaceOnEventList+0x44>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3318      	adds	r3, #24
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7fe fc73 	bl	8007726 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008e40:	2101      	movs	r1, #1
 8008e42:	6838      	ldr	r0, [r7, #0]
 8008e44:	f000 fb8a 	bl	800955c <prvAddCurrentTaskToDelayedList>
}
 8008e48:	bf00      	nop
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000994 	.word	0x20000994

08008e54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b086      	sub	sp, #24
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10a      	bne.n	8008e7c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	617b      	str	r3, [r7, #20]
}
 8008e78:	bf00      	nop
 8008e7a:	e7fe      	b.n	8008e7a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008e7c:	4b0a      	ldr	r3, [pc, #40]	; (8008ea8 <vTaskPlaceOnEventListRestricted+0x54>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	3318      	adds	r3, #24
 8008e82:	4619      	mov	r1, r3
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f7fe fc2a 	bl	80076de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d002      	beq.n	8008e96 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008e90:	f04f 33ff 	mov.w	r3, #4294967295
 8008e94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008e96:	6879      	ldr	r1, [r7, #4]
 8008e98:	68b8      	ldr	r0, [r7, #8]
 8008e9a:	f000 fb5f 	bl	800955c <prvAddCurrentTaskToDelayedList>
	}
 8008e9e:	bf00      	nop
 8008ea0:	3718      	adds	r7, #24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20000994 	.word	0x20000994

08008eac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d10a      	bne.n	8008ed8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	60fb      	str	r3, [r7, #12]
}
 8008ed4:	bf00      	nop
 8008ed6:	e7fe      	b.n	8008ed6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	3318      	adds	r3, #24
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fe fc5b 	bl	8007798 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ee2:	4b1e      	ldr	r3, [pc, #120]	; (8008f5c <xTaskRemoveFromEventList+0xb0>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d11d      	bne.n	8008f26 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	3304      	adds	r3, #4
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f7fe fc52 	bl	8007798 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef8:	4b19      	ldr	r3, [pc, #100]	; (8008f60 <xTaskRemoveFromEventList+0xb4>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d903      	bls.n	8008f08 <xTaskRemoveFromEventList+0x5c>
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f04:	4a16      	ldr	r2, [pc, #88]	; (8008f60 <xTaskRemoveFromEventList+0xb4>)
 8008f06:	6013      	str	r3, [r2, #0]
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	4413      	add	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4a13      	ldr	r2, [pc, #76]	; (8008f64 <xTaskRemoveFromEventList+0xb8>)
 8008f16:	441a      	add	r2, r3
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	3304      	adds	r3, #4
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	4610      	mov	r0, r2
 8008f20:	f7fe fbdd 	bl	80076de <vListInsertEnd>
 8008f24:	e005      	b.n	8008f32 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	3318      	adds	r3, #24
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	480e      	ldr	r0, [pc, #56]	; (8008f68 <xTaskRemoveFromEventList+0xbc>)
 8008f2e:	f7fe fbd6 	bl	80076de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f36:	4b0d      	ldr	r3, [pc, #52]	; (8008f6c <xTaskRemoveFromEventList+0xc0>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d905      	bls.n	8008f4c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008f40:	2301      	movs	r3, #1
 8008f42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008f44:	4b0a      	ldr	r3, [pc, #40]	; (8008f70 <xTaskRemoveFromEventList+0xc4>)
 8008f46:	2201      	movs	r2, #1
 8008f48:	601a      	str	r2, [r3, #0]
 8008f4a:	e001      	b.n	8008f50 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008f50:	697b      	ldr	r3, [r7, #20]
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3718      	adds	r7, #24
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	bf00      	nop
 8008f5c:	20000e90 	.word	0x20000e90
 8008f60:	20000e70 	.word	0x20000e70
 8008f64:	20000998 	.word	0x20000998
 8008f68:	20000e28 	.word	0x20000e28
 8008f6c:	20000994 	.word	0x20000994
 8008f70:	20000e7c 	.word	0x20000e7c

08008f74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008f74:	b480      	push	{r7}
 8008f76:	b083      	sub	sp, #12
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008f7c:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <vTaskInternalSetTimeOutState+0x24>)
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008f84:	4b05      	ldr	r3, [pc, #20]	; (8008f9c <vTaskInternalSetTimeOutState+0x28>)
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	605a      	str	r2, [r3, #4]
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr
 8008f98:	20000e80 	.word	0x20000e80
 8008f9c:	20000e6c 	.word	0x20000e6c

08008fa0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b088      	sub	sp, #32
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
 8008fa8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d10a      	bne.n	8008fc6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb4:	f383 8811 	msr	BASEPRI, r3
 8008fb8:	f3bf 8f6f 	isb	sy
 8008fbc:	f3bf 8f4f 	dsb	sy
 8008fc0:	613b      	str	r3, [r7, #16]
}
 8008fc2:	bf00      	nop
 8008fc4:	e7fe      	b.n	8008fc4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d10a      	bne.n	8008fe2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd0:	f383 8811 	msr	BASEPRI, r3
 8008fd4:	f3bf 8f6f 	isb	sy
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	60fb      	str	r3, [r7, #12]
}
 8008fde:	bf00      	nop
 8008fe0:	e7fe      	b.n	8008fe0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008fe2:	f000 ff87 	bl	8009ef4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008fe6:	4b1d      	ldr	r3, [pc, #116]	; (800905c <xTaskCheckForTimeOut+0xbc>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	69ba      	ldr	r2, [r7, #24]
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ffe:	d102      	bne.n	8009006 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009000:	2300      	movs	r3, #0
 8009002:	61fb      	str	r3, [r7, #28]
 8009004:	e023      	b.n	800904e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681a      	ldr	r2, [r3, #0]
 800900a:	4b15      	ldr	r3, [pc, #84]	; (8009060 <xTaskCheckForTimeOut+0xc0>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	429a      	cmp	r2, r3
 8009010:	d007      	beq.n	8009022 <xTaskCheckForTimeOut+0x82>
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	69ba      	ldr	r2, [r7, #24]
 8009018:	429a      	cmp	r2, r3
 800901a:	d302      	bcc.n	8009022 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800901c:	2301      	movs	r3, #1
 800901e:	61fb      	str	r3, [r7, #28]
 8009020:	e015      	b.n	800904e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	697a      	ldr	r2, [r7, #20]
 8009028:	429a      	cmp	r2, r3
 800902a:	d20b      	bcs.n	8009044 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	1ad2      	subs	r2, r2, r3
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f7ff ff9b 	bl	8008f74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800903e:	2300      	movs	r3, #0
 8009040:	61fb      	str	r3, [r7, #28]
 8009042:	e004      	b.n	800904e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	2200      	movs	r2, #0
 8009048:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800904a:	2301      	movs	r3, #1
 800904c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800904e:	f000 ff81 	bl	8009f54 <vPortExitCritical>

	return xReturn;
 8009052:	69fb      	ldr	r3, [r7, #28]
}
 8009054:	4618      	mov	r0, r3
 8009056:	3720      	adds	r7, #32
 8009058:	46bd      	mov	sp, r7
 800905a:	bd80      	pop	{r7, pc}
 800905c:	20000e6c 	.word	0x20000e6c
 8009060:	20000e80 	.word	0x20000e80

08009064 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009064:	b480      	push	{r7}
 8009066:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009068:	4b03      	ldr	r3, [pc, #12]	; (8009078 <vTaskMissedYield+0x14>)
 800906a:	2201      	movs	r2, #1
 800906c:	601a      	str	r2, [r3, #0]
}
 800906e:	bf00      	nop
 8009070:	46bd      	mov	sp, r7
 8009072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009076:	4770      	bx	lr
 8009078:	20000e7c 	.word	0x20000e7c

0800907c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b082      	sub	sp, #8
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009084:	f000 f852 	bl	800912c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009088:	4b06      	ldr	r3, [pc, #24]	; (80090a4 <prvIdleTask+0x28>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d9f9      	bls.n	8009084 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009090:	4b05      	ldr	r3, [pc, #20]	; (80090a8 <prvIdleTask+0x2c>)
 8009092:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80090a0:	e7f0      	b.n	8009084 <prvIdleTask+0x8>
 80090a2:	bf00      	nop
 80090a4:	20000998 	.word	0x20000998
 80090a8:	e000ed04 	.word	0xe000ed04

080090ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090b2:	2300      	movs	r3, #0
 80090b4:	607b      	str	r3, [r7, #4]
 80090b6:	e00c      	b.n	80090d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	4613      	mov	r3, r2
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	4a12      	ldr	r2, [pc, #72]	; (800910c <prvInitialiseTaskLists+0x60>)
 80090c4:	4413      	add	r3, r2
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7fe fadc 	bl	8007684 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	3301      	adds	r3, #1
 80090d0:	607b      	str	r3, [r7, #4]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2b37      	cmp	r3, #55	; 0x37
 80090d6:	d9ef      	bls.n	80090b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80090d8:	480d      	ldr	r0, [pc, #52]	; (8009110 <prvInitialiseTaskLists+0x64>)
 80090da:	f7fe fad3 	bl	8007684 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80090de:	480d      	ldr	r0, [pc, #52]	; (8009114 <prvInitialiseTaskLists+0x68>)
 80090e0:	f7fe fad0 	bl	8007684 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80090e4:	480c      	ldr	r0, [pc, #48]	; (8009118 <prvInitialiseTaskLists+0x6c>)
 80090e6:	f7fe facd 	bl	8007684 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80090ea:	480c      	ldr	r0, [pc, #48]	; (800911c <prvInitialiseTaskLists+0x70>)
 80090ec:	f7fe faca 	bl	8007684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80090f0:	480b      	ldr	r0, [pc, #44]	; (8009120 <prvInitialiseTaskLists+0x74>)
 80090f2:	f7fe fac7 	bl	8007684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80090f6:	4b0b      	ldr	r3, [pc, #44]	; (8009124 <prvInitialiseTaskLists+0x78>)
 80090f8:	4a05      	ldr	r2, [pc, #20]	; (8009110 <prvInitialiseTaskLists+0x64>)
 80090fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80090fc:	4b0a      	ldr	r3, [pc, #40]	; (8009128 <prvInitialiseTaskLists+0x7c>)
 80090fe:	4a05      	ldr	r2, [pc, #20]	; (8009114 <prvInitialiseTaskLists+0x68>)
 8009100:	601a      	str	r2, [r3, #0]
}
 8009102:	bf00      	nop
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	20000998 	.word	0x20000998
 8009110:	20000df8 	.word	0x20000df8
 8009114:	20000e0c 	.word	0x20000e0c
 8009118:	20000e28 	.word	0x20000e28
 800911c:	20000e3c 	.word	0x20000e3c
 8009120:	20000e54 	.word	0x20000e54
 8009124:	20000e20 	.word	0x20000e20
 8009128:	20000e24 	.word	0x20000e24

0800912c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b082      	sub	sp, #8
 8009130:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009132:	e019      	b.n	8009168 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009134:	f000 fede 	bl	8009ef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009138:	4b10      	ldr	r3, [pc, #64]	; (800917c <prvCheckTasksWaitingTermination+0x50>)
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	3304      	adds	r3, #4
 8009144:	4618      	mov	r0, r3
 8009146:	f7fe fb27 	bl	8007798 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800914a:	4b0d      	ldr	r3, [pc, #52]	; (8009180 <prvCheckTasksWaitingTermination+0x54>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3b01      	subs	r3, #1
 8009150:	4a0b      	ldr	r2, [pc, #44]	; (8009180 <prvCheckTasksWaitingTermination+0x54>)
 8009152:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009154:	4b0b      	ldr	r3, [pc, #44]	; (8009184 <prvCheckTasksWaitingTermination+0x58>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3b01      	subs	r3, #1
 800915a:	4a0a      	ldr	r2, [pc, #40]	; (8009184 <prvCheckTasksWaitingTermination+0x58>)
 800915c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800915e:	f000 fef9 	bl	8009f54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 f810 	bl	8009188 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009168:	4b06      	ldr	r3, [pc, #24]	; (8009184 <prvCheckTasksWaitingTermination+0x58>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1e1      	bne.n	8009134 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009170:	bf00      	nop
 8009172:	bf00      	nop
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20000e3c 	.word	0x20000e3c
 8009180:	20000e68 	.word	0x20000e68
 8009184:	20000e50 	.word	0x20000e50

08009188 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009196:	2b00      	cmp	r3, #0
 8009198:	d108      	bne.n	80091ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919e:	4618      	mov	r0, r3
 80091a0:	f001 f896 	bl	800a2d0 <vPortFree>
				vPortFree( pxTCB );
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f001 f893 	bl	800a2d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80091aa:	e018      	b.n	80091de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	d103      	bne.n	80091be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f001 f88a 	bl	800a2d0 <vPortFree>
	}
 80091bc:	e00f      	b.n	80091de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d00a      	beq.n	80091de <prvDeleteTCB+0x56>
	__asm volatile
 80091c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091cc:	f383 8811 	msr	BASEPRI, r3
 80091d0:	f3bf 8f6f 	isb	sy
 80091d4:	f3bf 8f4f 	dsb	sy
 80091d8:	60fb      	str	r3, [r7, #12]
}
 80091da:	bf00      	nop
 80091dc:	e7fe      	b.n	80091dc <prvDeleteTCB+0x54>
	}
 80091de:	bf00      	nop
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091ee:	4b0c      	ldr	r3, [pc, #48]	; (8009220 <prvResetNextTaskUnblockTime+0x38>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d104      	bne.n	8009202 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80091f8:	4b0a      	ldr	r3, [pc, #40]	; (8009224 <prvResetNextTaskUnblockTime+0x3c>)
 80091fa:	f04f 32ff 	mov.w	r2, #4294967295
 80091fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009200:	e008      	b.n	8009214 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009202:	4b07      	ldr	r3, [pc, #28]	; (8009220 <prvResetNextTaskUnblockTime+0x38>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	4a04      	ldr	r2, [pc, #16]	; (8009224 <prvResetNextTaskUnblockTime+0x3c>)
 8009212:	6013      	str	r3, [r2, #0]
}
 8009214:	bf00      	nop
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr
 8009220:	20000e20 	.word	0x20000e20
 8009224:	20000e88 	.word	0x20000e88

08009228 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800922e:	4b05      	ldr	r3, [pc, #20]	; (8009244 <xTaskGetCurrentTaskHandle+0x1c>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009234:	687b      	ldr	r3, [r7, #4]
	}
 8009236:	4618      	mov	r0, r3
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	20000994 	.word	0x20000994

08009248 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800924e:	4b0b      	ldr	r3, [pc, #44]	; (800927c <xTaskGetSchedulerState+0x34>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d102      	bne.n	800925c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009256:	2301      	movs	r3, #1
 8009258:	607b      	str	r3, [r7, #4]
 800925a:	e008      	b.n	800926e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800925c:	4b08      	ldr	r3, [pc, #32]	; (8009280 <xTaskGetSchedulerState+0x38>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d102      	bne.n	800926a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009264:	2302      	movs	r3, #2
 8009266:	607b      	str	r3, [r7, #4]
 8009268:	e001      	b.n	800926e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800926a:	2300      	movs	r3, #0
 800926c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800926e:	687b      	ldr	r3, [r7, #4]
	}
 8009270:	4618      	mov	r0, r3
 8009272:	370c      	adds	r7, #12
 8009274:	46bd      	mov	sp, r7
 8009276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927a:	4770      	bx	lr
 800927c:	20000e74 	.word	0x20000e74
 8009280:	20000e90 	.word	0x20000e90

08009284 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009284:	b580      	push	{r7, lr}
 8009286:	b084      	sub	sp, #16
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009290:	2300      	movs	r3, #0
 8009292:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d051      	beq.n	800933e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800929e:	4b2a      	ldr	r3, [pc, #168]	; (8009348 <xTaskPriorityInherit+0xc4>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d241      	bcs.n	800932c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	699b      	ldr	r3, [r3, #24]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	db06      	blt.n	80092be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b0:	4b25      	ldr	r3, [pc, #148]	; (8009348 <xTaskPriorityInherit+0xc4>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	6959      	ldr	r1, [r3, #20]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c6:	4613      	mov	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4413      	add	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4a1f      	ldr	r2, [pc, #124]	; (800934c <xTaskPriorityInherit+0xc8>)
 80092d0:	4413      	add	r3, r2
 80092d2:	4299      	cmp	r1, r3
 80092d4:	d122      	bne.n	800931c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	3304      	adds	r3, #4
 80092da:	4618      	mov	r0, r3
 80092dc:	f7fe fa5c 	bl	8007798 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80092e0:	4b19      	ldr	r3, [pc, #100]	; (8009348 <xTaskPriorityInherit+0xc4>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ee:	4b18      	ldr	r3, [pc, #96]	; (8009350 <xTaskPriorityInherit+0xcc>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d903      	bls.n	80092fe <xTaskPriorityInherit+0x7a>
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092fa:	4a15      	ldr	r2, [pc, #84]	; (8009350 <xTaskPriorityInherit+0xcc>)
 80092fc:	6013      	str	r3, [r2, #0]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009302:	4613      	mov	r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	4413      	add	r3, r2
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	4a10      	ldr	r2, [pc, #64]	; (800934c <xTaskPriorityInherit+0xc8>)
 800930c:	441a      	add	r2, r3
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	3304      	adds	r3, #4
 8009312:	4619      	mov	r1, r3
 8009314:	4610      	mov	r0, r2
 8009316:	f7fe f9e2 	bl	80076de <vListInsertEnd>
 800931a:	e004      	b.n	8009326 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800931c:	4b0a      	ldr	r3, [pc, #40]	; (8009348 <xTaskPriorityInherit+0xc4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009326:	2301      	movs	r3, #1
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	e008      	b.n	800933e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009330:	4b05      	ldr	r3, [pc, #20]	; (8009348 <xTaskPriorityInherit+0xc4>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009336:	429a      	cmp	r2, r3
 8009338:	d201      	bcs.n	800933e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800933a:	2301      	movs	r3, #1
 800933c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800933e:	68fb      	ldr	r3, [r7, #12]
	}
 8009340:	4618      	mov	r0, r3
 8009342:	3710      	adds	r7, #16
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}
 8009348:	20000994 	.word	0x20000994
 800934c:	20000998 	.word	0x20000998
 8009350:	20000e70 	.word	0x20000e70

08009354 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009360:	2300      	movs	r3, #0
 8009362:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d056      	beq.n	8009418 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800936a:	4b2e      	ldr	r3, [pc, #184]	; (8009424 <xTaskPriorityDisinherit+0xd0>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	429a      	cmp	r2, r3
 8009372:	d00a      	beq.n	800938a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009378:	f383 8811 	msr	BASEPRI, r3
 800937c:	f3bf 8f6f 	isb	sy
 8009380:	f3bf 8f4f 	dsb	sy
 8009384:	60fb      	str	r3, [r7, #12]
}
 8009386:	bf00      	nop
 8009388:	e7fe      	b.n	8009388 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800938e:	2b00      	cmp	r3, #0
 8009390:	d10a      	bne.n	80093a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009396:	f383 8811 	msr	BASEPRI, r3
 800939a:	f3bf 8f6f 	isb	sy
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	60bb      	str	r3, [r7, #8]
}
 80093a4:	bf00      	nop
 80093a6:	e7fe      	b.n	80093a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ac:	1e5a      	subs	r2, r3, #1
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d02c      	beq.n	8009418 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d128      	bne.n	8009418 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	3304      	adds	r3, #4
 80093ca:	4618      	mov	r0, r3
 80093cc:	f7fe f9e4 	bl	8007798 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093d4:	693b      	ldr	r3, [r7, #16]
 80093d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e8:	4b0f      	ldr	r3, [pc, #60]	; (8009428 <xTaskPriorityDisinherit+0xd4>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	429a      	cmp	r2, r3
 80093ee:	d903      	bls.n	80093f8 <xTaskPriorityDisinherit+0xa4>
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f4:	4a0c      	ldr	r2, [pc, #48]	; (8009428 <xTaskPriorityDisinherit+0xd4>)
 80093f6:	6013      	str	r3, [r2, #0]
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093fc:	4613      	mov	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	4413      	add	r3, r2
 8009402:	009b      	lsls	r3, r3, #2
 8009404:	4a09      	ldr	r2, [pc, #36]	; (800942c <xTaskPriorityDisinherit+0xd8>)
 8009406:	441a      	add	r2, r3
 8009408:	693b      	ldr	r3, [r7, #16]
 800940a:	3304      	adds	r3, #4
 800940c:	4619      	mov	r1, r3
 800940e:	4610      	mov	r0, r2
 8009410:	f7fe f965 	bl	80076de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009414:	2301      	movs	r3, #1
 8009416:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009418:	697b      	ldr	r3, [r7, #20]
	}
 800941a:	4618      	mov	r0, r3
 800941c:	3718      	adds	r7, #24
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	20000994 	.word	0x20000994
 8009428:	20000e70 	.word	0x20000e70
 800942c:	20000998 	.word	0x20000998

08009430 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009430:	b580      	push	{r7, lr}
 8009432:	b088      	sub	sp, #32
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800943e:	2301      	movs	r3, #1
 8009440:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d06a      	beq.n	800951e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009448:	69bb      	ldr	r3, [r7, #24]
 800944a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800944c:	2b00      	cmp	r3, #0
 800944e:	d10a      	bne.n	8009466 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	60fb      	str	r3, [r7, #12]
}
 8009462:	bf00      	nop
 8009464:	e7fe      	b.n	8009464 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800946a:	683a      	ldr	r2, [r7, #0]
 800946c:	429a      	cmp	r2, r3
 800946e:	d902      	bls.n	8009476 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	61fb      	str	r3, [r7, #28]
 8009474:	e002      	b.n	800947c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009476:	69bb      	ldr	r3, [r7, #24]
 8009478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800947a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800947c:	69bb      	ldr	r3, [r7, #24]
 800947e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009480:	69fa      	ldr	r2, [r7, #28]
 8009482:	429a      	cmp	r2, r3
 8009484:	d04b      	beq.n	800951e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009486:	69bb      	ldr	r3, [r7, #24]
 8009488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	429a      	cmp	r2, r3
 800948e:	d146      	bne.n	800951e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009490:	4b25      	ldr	r3, [pc, #148]	; (8009528 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	69ba      	ldr	r2, [r7, #24]
 8009496:	429a      	cmp	r2, r3
 8009498:	d10a      	bne.n	80094b0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800949a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949e:	f383 8811 	msr	BASEPRI, r3
 80094a2:	f3bf 8f6f 	isb	sy
 80094a6:	f3bf 8f4f 	dsb	sy
 80094aa:	60bb      	str	r3, [r7, #8]
}
 80094ac:	bf00      	nop
 80094ae:	e7fe      	b.n	80094ae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80094b0:	69bb      	ldr	r3, [r7, #24]
 80094b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80094b6:	69bb      	ldr	r3, [r7, #24]
 80094b8:	69fa      	ldr	r2, [r7, #28]
 80094ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094bc:	69bb      	ldr	r3, [r7, #24]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	db04      	blt.n	80094ce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094c4:	69fb      	ldr	r3, [r7, #28]
 80094c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80094ce:	69bb      	ldr	r3, [r7, #24]
 80094d0:	6959      	ldr	r1, [r3, #20]
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	4613      	mov	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4a13      	ldr	r2, [pc, #76]	; (800952c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80094de:	4413      	add	r3, r2
 80094e0:	4299      	cmp	r1, r3
 80094e2:	d11c      	bne.n	800951e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094e4:	69bb      	ldr	r3, [r7, #24]
 80094e6:	3304      	adds	r3, #4
 80094e8:	4618      	mov	r0, r3
 80094ea:	f7fe f955 	bl	8007798 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f2:	4b0f      	ldr	r3, [pc, #60]	; (8009530 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d903      	bls.n	8009502 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80094fa:	69bb      	ldr	r3, [r7, #24]
 80094fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fe:	4a0c      	ldr	r2, [pc, #48]	; (8009530 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009500:	6013      	str	r3, [r2, #0]
 8009502:	69bb      	ldr	r3, [r7, #24]
 8009504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009506:	4613      	mov	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	4413      	add	r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4a07      	ldr	r2, [pc, #28]	; (800952c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009510:	441a      	add	r2, r3
 8009512:	69bb      	ldr	r3, [r7, #24]
 8009514:	3304      	adds	r3, #4
 8009516:	4619      	mov	r1, r3
 8009518:	4610      	mov	r0, r2
 800951a:	f7fe f8e0 	bl	80076de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800951e:	bf00      	nop
 8009520:	3720      	adds	r7, #32
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	20000994 	.word	0x20000994
 800952c:	20000998 	.word	0x20000998
 8009530:	20000e70 	.word	0x20000e70

08009534 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009534:	b480      	push	{r7}
 8009536:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009538:	4b07      	ldr	r3, [pc, #28]	; (8009558 <pvTaskIncrementMutexHeldCount+0x24>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d004      	beq.n	800954a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009540:	4b05      	ldr	r3, [pc, #20]	; (8009558 <pvTaskIncrementMutexHeldCount+0x24>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009546:	3201      	adds	r2, #1
 8009548:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800954a:	4b03      	ldr	r3, [pc, #12]	; (8009558 <pvTaskIncrementMutexHeldCount+0x24>)
 800954c:	681b      	ldr	r3, [r3, #0]
	}
 800954e:	4618      	mov	r0, r3
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr
 8009558:	20000994 	.word	0x20000994

0800955c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009566:	4b21      	ldr	r3, [pc, #132]	; (80095ec <prvAddCurrentTaskToDelayedList+0x90>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800956c:	4b20      	ldr	r3, [pc, #128]	; (80095f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	3304      	adds	r3, #4
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe f910 	bl	8007798 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800957e:	d10a      	bne.n	8009596 <prvAddCurrentTaskToDelayedList+0x3a>
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d007      	beq.n	8009596 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009586:	4b1a      	ldr	r3, [pc, #104]	; (80095f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	3304      	adds	r3, #4
 800958c:	4619      	mov	r1, r3
 800958e:	4819      	ldr	r0, [pc, #100]	; (80095f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009590:	f7fe f8a5 	bl	80076de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009594:	e026      	b.n	80095e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4413      	add	r3, r2
 800959c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800959e:	4b14      	ldr	r3, [pc, #80]	; (80095f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80095a6:	68ba      	ldr	r2, [r7, #8]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d209      	bcs.n	80095c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095ae:	4b12      	ldr	r3, [pc, #72]	; (80095f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	4b0f      	ldr	r3, [pc, #60]	; (80095f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3304      	adds	r3, #4
 80095b8:	4619      	mov	r1, r3
 80095ba:	4610      	mov	r0, r2
 80095bc:	f7fe f8b3 	bl	8007726 <vListInsert>
}
 80095c0:	e010      	b.n	80095e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80095c2:	4b0e      	ldr	r3, [pc, #56]	; (80095fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	4b0a      	ldr	r3, [pc, #40]	; (80095f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3304      	adds	r3, #4
 80095cc:	4619      	mov	r1, r3
 80095ce:	4610      	mov	r0, r2
 80095d0:	f7fe f8a9 	bl	8007726 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80095d4:	4b0a      	ldr	r3, [pc, #40]	; (8009600 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d202      	bcs.n	80095e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80095de:	4a08      	ldr	r2, [pc, #32]	; (8009600 <prvAddCurrentTaskToDelayedList+0xa4>)
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	6013      	str	r3, [r2, #0]
}
 80095e4:	bf00      	nop
 80095e6:	3710      	adds	r7, #16
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bd80      	pop	{r7, pc}
 80095ec:	20000e6c 	.word	0x20000e6c
 80095f0:	20000994 	.word	0x20000994
 80095f4:	20000e54 	.word	0x20000e54
 80095f8:	20000e24 	.word	0x20000e24
 80095fc:	20000e20 	.word	0x20000e20
 8009600:	20000e88 	.word	0x20000e88

08009604 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b08a      	sub	sp, #40	; 0x28
 8009608:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800960a:	2300      	movs	r3, #0
 800960c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800960e:	f000 fb07 	bl	8009c20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009612:	4b1c      	ldr	r3, [pc, #112]	; (8009684 <xTimerCreateTimerTask+0x80>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d021      	beq.n	800965e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800961a:	2300      	movs	r3, #0
 800961c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800961e:	2300      	movs	r3, #0
 8009620:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009622:	1d3a      	adds	r2, r7, #4
 8009624:	f107 0108 	add.w	r1, r7, #8
 8009628:	f107 030c 	add.w	r3, r7, #12
 800962c:	4618      	mov	r0, r3
 800962e:	f7fe f80f 	bl	8007650 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009632:	6879      	ldr	r1, [r7, #4]
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	68fa      	ldr	r2, [r7, #12]
 8009638:	9202      	str	r2, [sp, #8]
 800963a:	9301      	str	r3, [sp, #4]
 800963c:	2302      	movs	r3, #2
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	2300      	movs	r3, #0
 8009642:	460a      	mov	r2, r1
 8009644:	4910      	ldr	r1, [pc, #64]	; (8009688 <xTimerCreateTimerTask+0x84>)
 8009646:	4811      	ldr	r0, [pc, #68]	; (800968c <xTimerCreateTimerTask+0x88>)
 8009648:	f7fe ffd0 	bl	80085ec <xTaskCreateStatic>
 800964c:	4603      	mov	r3, r0
 800964e:	4a10      	ldr	r2, [pc, #64]	; (8009690 <xTimerCreateTimerTask+0x8c>)
 8009650:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009652:	4b0f      	ldr	r3, [pc, #60]	; (8009690 <xTimerCreateTimerTask+0x8c>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800965a:	2301      	movs	r3, #1
 800965c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d10a      	bne.n	800967a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009668:	f383 8811 	msr	BASEPRI, r3
 800966c:	f3bf 8f6f 	isb	sy
 8009670:	f3bf 8f4f 	dsb	sy
 8009674:	613b      	str	r3, [r7, #16]
}
 8009676:	bf00      	nop
 8009678:	e7fe      	b.n	8009678 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800967a:	697b      	ldr	r3, [r7, #20]
}
 800967c:	4618      	mov	r0, r3
 800967e:	3718      	adds	r7, #24
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	20000ec4 	.word	0x20000ec4
 8009688:	0800ba88 	.word	0x0800ba88
 800968c:	080097c9 	.word	0x080097c9
 8009690:	20000ec8 	.word	0x20000ec8

08009694 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b08a      	sub	sp, #40	; 0x28
 8009698:	af00      	add	r7, sp, #0
 800969a:	60f8      	str	r0, [r7, #12]
 800969c:	60b9      	str	r1, [r7, #8]
 800969e:	607a      	str	r2, [r7, #4]
 80096a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80096a2:	2300      	movs	r3, #0
 80096a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10a      	bne.n	80096c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	623b      	str	r3, [r7, #32]
}
 80096be:	bf00      	nop
 80096c0:	e7fe      	b.n	80096c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80096c2:	4b1a      	ldr	r3, [pc, #104]	; (800972c <xTimerGenericCommand+0x98>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d02a      	beq.n	8009720 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	2b05      	cmp	r3, #5
 80096da:	dc18      	bgt.n	800970e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80096dc:	f7ff fdb4 	bl	8009248 <xTaskGetSchedulerState>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d109      	bne.n	80096fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80096e6:	4b11      	ldr	r3, [pc, #68]	; (800972c <xTimerGenericCommand+0x98>)
 80096e8:	6818      	ldr	r0, [r3, #0]
 80096ea:	f107 0110 	add.w	r1, r7, #16
 80096ee:	2300      	movs	r3, #0
 80096f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096f2:	f7fe fa6f 	bl	8007bd4 <xQueueGenericSend>
 80096f6:	6278      	str	r0, [r7, #36]	; 0x24
 80096f8:	e012      	b.n	8009720 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80096fa:	4b0c      	ldr	r3, [pc, #48]	; (800972c <xTimerGenericCommand+0x98>)
 80096fc:	6818      	ldr	r0, [r3, #0]
 80096fe:	f107 0110 	add.w	r1, r7, #16
 8009702:	2300      	movs	r3, #0
 8009704:	2200      	movs	r2, #0
 8009706:	f7fe fa65 	bl	8007bd4 <xQueueGenericSend>
 800970a:	6278      	str	r0, [r7, #36]	; 0x24
 800970c:	e008      	b.n	8009720 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800970e:	4b07      	ldr	r3, [pc, #28]	; (800972c <xTimerGenericCommand+0x98>)
 8009710:	6818      	ldr	r0, [r3, #0]
 8009712:	f107 0110 	add.w	r1, r7, #16
 8009716:	2300      	movs	r3, #0
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	f7fe fb59 	bl	8007dd0 <xQueueGenericSendFromISR>
 800971e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009722:	4618      	mov	r0, r3
 8009724:	3728      	adds	r7, #40	; 0x28
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	20000ec4 	.word	0x20000ec4

08009730 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b088      	sub	sp, #32
 8009734:	af02      	add	r7, sp, #8
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800973a:	4b22      	ldr	r3, [pc, #136]	; (80097c4 <prvProcessExpiredTimer+0x94>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	3304      	adds	r3, #4
 8009748:	4618      	mov	r0, r3
 800974a:	f7fe f825 	bl	8007798 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009754:	f003 0304 	and.w	r3, r3, #4
 8009758:	2b00      	cmp	r3, #0
 800975a:	d022      	beq.n	80097a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	699a      	ldr	r2, [r3, #24]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	18d1      	adds	r1, r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	6978      	ldr	r0, [r7, #20]
 800976a:	f000 f8d1 	bl	8009910 <prvInsertTimerInActiveList>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d01f      	beq.n	80097b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009774:	2300      	movs	r3, #0
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	2300      	movs	r3, #0
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	2100      	movs	r1, #0
 800977e:	6978      	ldr	r0, [r7, #20]
 8009780:	f7ff ff88 	bl	8009694 <xTimerGenericCommand>
 8009784:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d113      	bne.n	80097b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800978c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	60fb      	str	r3, [r7, #12]
}
 800979e:	bf00      	nop
 80097a0:	e7fe      	b.n	80097a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097a8:	f023 0301 	bic.w	r3, r3, #1
 80097ac:	b2da      	uxtb	r2, r3
 80097ae:	697b      	ldr	r3, [r7, #20]
 80097b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80097b4:	697b      	ldr	r3, [r7, #20]
 80097b6:	6a1b      	ldr	r3, [r3, #32]
 80097b8:	6978      	ldr	r0, [r7, #20]
 80097ba:	4798      	blx	r3
}
 80097bc:	bf00      	nop
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20000ebc 	.word	0x20000ebc

080097c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097d0:	f107 0308 	add.w	r3, r7, #8
 80097d4:	4618      	mov	r0, r3
 80097d6:	f000 f857 	bl	8009888 <prvGetNextExpireTime>
 80097da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	4619      	mov	r1, r3
 80097e0:	68f8      	ldr	r0, [r7, #12]
 80097e2:	f000 f803 	bl	80097ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80097e6:	f000 f8d5 	bl	8009994 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80097ea:	e7f1      	b.n	80097d0 <prvTimerTask+0x8>

080097ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b084      	sub	sp, #16
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80097f6:	f7ff f935 	bl	8008a64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80097fa:	f107 0308 	add.w	r3, r7, #8
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 f866 	bl	80098d0 <prvSampleTimeNow>
 8009804:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d130      	bne.n	800986e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10a      	bne.n	8009828 <prvProcessTimerOrBlockTask+0x3c>
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	429a      	cmp	r2, r3
 8009818:	d806      	bhi.n	8009828 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800981a:	f7ff f931 	bl	8008a80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800981e:	68f9      	ldr	r1, [r7, #12]
 8009820:	6878      	ldr	r0, [r7, #4]
 8009822:	f7ff ff85 	bl	8009730 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009826:	e024      	b.n	8009872 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d008      	beq.n	8009840 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800982e:	4b13      	ldr	r3, [pc, #76]	; (800987c <prvProcessTimerOrBlockTask+0x90>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d101      	bne.n	800983c <prvProcessTimerOrBlockTask+0x50>
 8009838:	2301      	movs	r3, #1
 800983a:	e000      	b.n	800983e <prvProcessTimerOrBlockTask+0x52>
 800983c:	2300      	movs	r3, #0
 800983e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009840:	4b0f      	ldr	r3, [pc, #60]	; (8009880 <prvProcessTimerOrBlockTask+0x94>)
 8009842:	6818      	ldr	r0, [r3, #0]
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	4619      	mov	r1, r3
 800984e:	f7fe fe99 	bl	8008584 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009852:	f7ff f915 	bl	8008a80 <xTaskResumeAll>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d10a      	bne.n	8009872 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800985c:	4b09      	ldr	r3, [pc, #36]	; (8009884 <prvProcessTimerOrBlockTask+0x98>)
 800985e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	f3bf 8f4f 	dsb	sy
 8009868:	f3bf 8f6f 	isb	sy
}
 800986c:	e001      	b.n	8009872 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800986e:	f7ff f907 	bl	8008a80 <xTaskResumeAll>
}
 8009872:	bf00      	nop
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	20000ec0 	.word	0x20000ec0
 8009880:	20000ec4 	.word	0x20000ec4
 8009884:	e000ed04 	.word	0xe000ed04

08009888 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009890:	4b0e      	ldr	r3, [pc, #56]	; (80098cc <prvGetNextExpireTime+0x44>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <prvGetNextExpireTime+0x16>
 800989a:	2201      	movs	r2, #1
 800989c:	e000      	b.n	80098a0 <prvGetNextExpireTime+0x18>
 800989e:	2200      	movs	r2, #0
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d105      	bne.n	80098b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80098ac:	4b07      	ldr	r3, [pc, #28]	; (80098cc <prvGetNextExpireTime+0x44>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	60fb      	str	r3, [r7, #12]
 80098b6:	e001      	b.n	80098bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80098b8:	2300      	movs	r3, #0
 80098ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80098bc:	68fb      	ldr	r3, [r7, #12]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
 80098ca:	bf00      	nop
 80098cc:	20000ebc 	.word	0x20000ebc

080098d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80098d8:	f7ff f970 	bl	8008bbc <xTaskGetTickCount>
 80098dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80098de:	4b0b      	ldr	r3, [pc, #44]	; (800990c <prvSampleTimeNow+0x3c>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	68fa      	ldr	r2, [r7, #12]
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d205      	bcs.n	80098f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80098e8:	f000 f936 	bl	8009b58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2201      	movs	r2, #1
 80098f0:	601a      	str	r2, [r3, #0]
 80098f2:	e002      	b.n	80098fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2200      	movs	r2, #0
 80098f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80098fa:	4a04      	ldr	r2, [pc, #16]	; (800990c <prvSampleTimeNow+0x3c>)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009900:	68fb      	ldr	r3, [r7, #12]
}
 8009902:	4618      	mov	r0, r3
 8009904:	3710      	adds	r7, #16
 8009906:	46bd      	mov	sp, r7
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	20000ecc 	.word	0x20000ecc

08009910 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b086      	sub	sp, #24
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
 800991c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800991e:	2300      	movs	r3, #0
 8009920:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800992e:	68ba      	ldr	r2, [r7, #8]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	429a      	cmp	r2, r3
 8009934:	d812      	bhi.n	800995c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009936:	687a      	ldr	r2, [r7, #4]
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	1ad2      	subs	r2, r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	429a      	cmp	r2, r3
 8009942:	d302      	bcc.n	800994a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009944:	2301      	movs	r3, #1
 8009946:	617b      	str	r3, [r7, #20]
 8009948:	e01b      	b.n	8009982 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800994a:	4b10      	ldr	r3, [pc, #64]	; (800998c <prvInsertTimerInActiveList+0x7c>)
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3304      	adds	r3, #4
 8009952:	4619      	mov	r1, r3
 8009954:	4610      	mov	r0, r2
 8009956:	f7fd fee6 	bl	8007726 <vListInsert>
 800995a:	e012      	b.n	8009982 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	429a      	cmp	r2, r3
 8009962:	d206      	bcs.n	8009972 <prvInsertTimerInActiveList+0x62>
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	429a      	cmp	r2, r3
 800996a:	d302      	bcc.n	8009972 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800996c:	2301      	movs	r3, #1
 800996e:	617b      	str	r3, [r7, #20]
 8009970:	e007      	b.n	8009982 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009972:	4b07      	ldr	r3, [pc, #28]	; (8009990 <prvInsertTimerInActiveList+0x80>)
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	3304      	adds	r3, #4
 800997a:	4619      	mov	r1, r3
 800997c:	4610      	mov	r0, r2
 800997e:	f7fd fed2 	bl	8007726 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009982:	697b      	ldr	r3, [r7, #20]
}
 8009984:	4618      	mov	r0, r3
 8009986:	3718      	adds	r7, #24
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}
 800998c:	20000ec0 	.word	0x20000ec0
 8009990:	20000ebc 	.word	0x20000ebc

08009994 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b08e      	sub	sp, #56	; 0x38
 8009998:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800999a:	e0ca      	b.n	8009b32 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	da18      	bge.n	80099d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80099a2:	1d3b      	adds	r3, r7, #4
 80099a4:	3304      	adds	r3, #4
 80099a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80099a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d10a      	bne.n	80099c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	61fb      	str	r3, [r7, #28]
}
 80099c0:	bf00      	nop
 80099c2:	e7fe      	b.n	80099c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80099c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ca:	6850      	ldr	r0, [r2, #4]
 80099cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099ce:	6892      	ldr	r2, [r2, #8]
 80099d0:	4611      	mov	r1, r2
 80099d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f2c0 80ab 	blt.w	8009b32 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80099e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e2:	695b      	ldr	r3, [r3, #20]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d004      	beq.n	80099f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ea:	3304      	adds	r3, #4
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fd fed3 	bl	8007798 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80099f2:	463b      	mov	r3, r7
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7ff ff6b 	bl	80098d0 <prvSampleTimeNow>
 80099fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2b09      	cmp	r3, #9
 8009a00:	f200 8096 	bhi.w	8009b30 <prvProcessReceivedCommands+0x19c>
 8009a04:	a201      	add	r2, pc, #4	; (adr r2, 8009a0c <prvProcessReceivedCommands+0x78>)
 8009a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a0a:	bf00      	nop
 8009a0c:	08009a35 	.word	0x08009a35
 8009a10:	08009a35 	.word	0x08009a35
 8009a14:	08009a35 	.word	0x08009a35
 8009a18:	08009aa9 	.word	0x08009aa9
 8009a1c:	08009abd 	.word	0x08009abd
 8009a20:	08009b07 	.word	0x08009b07
 8009a24:	08009a35 	.word	0x08009a35
 8009a28:	08009a35 	.word	0x08009a35
 8009a2c:	08009aa9 	.word	0x08009aa9
 8009a30:	08009abd 	.word	0x08009abd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a3a:	f043 0301 	orr.w	r3, r3, #1
 8009a3e:	b2da      	uxtb	r2, r3
 8009a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4a:	699b      	ldr	r3, [r3, #24]
 8009a4c:	18d1      	adds	r1, r2, r3
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a54:	f7ff ff5c 	bl	8009910 <prvInsertTimerInActiveList>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d069      	beq.n	8009b32 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a6c:	f003 0304 	and.w	r3, r3, #4
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d05e      	beq.n	8009b32 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	441a      	add	r2, r3
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	9300      	str	r3, [sp, #0]
 8009a80:	2300      	movs	r3, #0
 8009a82:	2100      	movs	r1, #0
 8009a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a86:	f7ff fe05 	bl	8009694 <xTimerGenericCommand>
 8009a8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009a8c:	6a3b      	ldr	r3, [r7, #32]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d14f      	bne.n	8009b32 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a96:	f383 8811 	msr	BASEPRI, r3
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	61bb      	str	r3, [r7, #24]
}
 8009aa4:	bf00      	nop
 8009aa6:	e7fe      	b.n	8009aa6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009aae:	f023 0301 	bic.w	r3, r3, #1
 8009ab2:	b2da      	uxtb	r2, r3
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009aba:	e03a      	b.n	8009b32 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ac2:	f043 0301 	orr.w	r3, r3, #1
 8009ac6:	b2da      	uxtb	r2, r3
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad6:	699b      	ldr	r3, [r3, #24]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d10a      	bne.n	8009af2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae0:	f383 8811 	msr	BASEPRI, r3
 8009ae4:	f3bf 8f6f 	isb	sy
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	617b      	str	r3, [r7, #20]
}
 8009aee:	bf00      	nop
 8009af0:	e7fe      	b.n	8009af0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af4:	699a      	ldr	r2, [r3, #24]
 8009af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af8:	18d1      	adds	r1, r2, r3
 8009afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b00:	f7ff ff06 	bl	8009910 <prvInsertTimerInActiveList>
					break;
 8009b04:	e015      	b.n	8009b32 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b0c:	f003 0302 	and.w	r3, r3, #2
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d103      	bne.n	8009b1c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009b14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b16:	f000 fbdb 	bl	800a2d0 <vPortFree>
 8009b1a:	e00a      	b.n	8009b32 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b22:	f023 0301 	bic.w	r3, r3, #1
 8009b26:	b2da      	uxtb	r2, r3
 8009b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009b2e:	e000      	b.n	8009b32 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009b30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b32:	4b08      	ldr	r3, [pc, #32]	; (8009b54 <prvProcessReceivedCommands+0x1c0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	1d39      	adds	r1, r7, #4
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fe f9e4 	bl	8007f08 <xQueueReceive>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f47f af2a 	bne.w	800999c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009b48:	bf00      	nop
 8009b4a:	bf00      	nop
 8009b4c:	3730      	adds	r7, #48	; 0x30
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	20000ec4 	.word	0x20000ec4

08009b58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b088      	sub	sp, #32
 8009b5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b5e:	e048      	b.n	8009bf2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b60:	4b2d      	ldr	r3, [pc, #180]	; (8009c18 <prvSwitchTimerLists+0xc0>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b6a:	4b2b      	ldr	r3, [pc, #172]	; (8009c18 <prvSwitchTimerLists+0xc0>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	68db      	ldr	r3, [r3, #12]
 8009b72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	3304      	adds	r3, #4
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f7fd fe0d 	bl	8007798 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b8c:	f003 0304 	and.w	r3, r3, #4
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d02e      	beq.n	8009bf2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	693a      	ldr	r2, [r7, #16]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b9e:	68ba      	ldr	r2, [r7, #8]
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	429a      	cmp	r2, r3
 8009ba4:	d90e      	bls.n	8009bc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bb2:	4b19      	ldr	r3, [pc, #100]	; (8009c18 <prvSwitchTimerLists+0xc0>)
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	3304      	adds	r3, #4
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4610      	mov	r0, r2
 8009bbe:	f7fd fdb2 	bl	8007726 <vListInsert>
 8009bc2:	e016      	b.n	8009bf2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	9300      	str	r3, [sp, #0]
 8009bc8:	2300      	movs	r3, #0
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	2100      	movs	r1, #0
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f7ff fd60 	bl	8009694 <xTimerGenericCommand>
 8009bd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10a      	bne.n	8009bf2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	603b      	str	r3, [r7, #0]
}
 8009bee:	bf00      	nop
 8009bf0:	e7fe      	b.n	8009bf0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009bf2:	4b09      	ldr	r3, [pc, #36]	; (8009c18 <prvSwitchTimerLists+0xc0>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1b1      	bne.n	8009b60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009bfc:	4b06      	ldr	r3, [pc, #24]	; (8009c18 <prvSwitchTimerLists+0xc0>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009c02:	4b06      	ldr	r3, [pc, #24]	; (8009c1c <prvSwitchTimerLists+0xc4>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a04      	ldr	r2, [pc, #16]	; (8009c18 <prvSwitchTimerLists+0xc0>)
 8009c08:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009c0a:	4a04      	ldr	r2, [pc, #16]	; (8009c1c <prvSwitchTimerLists+0xc4>)
 8009c0c:	697b      	ldr	r3, [r7, #20]
 8009c0e:	6013      	str	r3, [r2, #0]
}
 8009c10:	bf00      	nop
 8009c12:	3718      	adds	r7, #24
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20000ebc 	.word	0x20000ebc
 8009c1c:	20000ec0 	.word	0x20000ec0

08009c20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b082      	sub	sp, #8
 8009c24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009c26:	f000 f965 	bl	8009ef4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009c2a:	4b15      	ldr	r3, [pc, #84]	; (8009c80 <prvCheckForValidListAndQueue+0x60>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d120      	bne.n	8009c74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009c32:	4814      	ldr	r0, [pc, #80]	; (8009c84 <prvCheckForValidListAndQueue+0x64>)
 8009c34:	f7fd fd26 	bl	8007684 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009c38:	4813      	ldr	r0, [pc, #76]	; (8009c88 <prvCheckForValidListAndQueue+0x68>)
 8009c3a:	f7fd fd23 	bl	8007684 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009c3e:	4b13      	ldr	r3, [pc, #76]	; (8009c8c <prvCheckForValidListAndQueue+0x6c>)
 8009c40:	4a10      	ldr	r2, [pc, #64]	; (8009c84 <prvCheckForValidListAndQueue+0x64>)
 8009c42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009c44:	4b12      	ldr	r3, [pc, #72]	; (8009c90 <prvCheckForValidListAndQueue+0x70>)
 8009c46:	4a10      	ldr	r2, [pc, #64]	; (8009c88 <prvCheckForValidListAndQueue+0x68>)
 8009c48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	4b11      	ldr	r3, [pc, #68]	; (8009c94 <prvCheckForValidListAndQueue+0x74>)
 8009c50:	4a11      	ldr	r2, [pc, #68]	; (8009c98 <prvCheckForValidListAndQueue+0x78>)
 8009c52:	2110      	movs	r1, #16
 8009c54:	200a      	movs	r0, #10
 8009c56:	f7fd fe31 	bl	80078bc <xQueueGenericCreateStatic>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	4a08      	ldr	r2, [pc, #32]	; (8009c80 <prvCheckForValidListAndQueue+0x60>)
 8009c5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009c60:	4b07      	ldr	r3, [pc, #28]	; (8009c80 <prvCheckForValidListAndQueue+0x60>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d005      	beq.n	8009c74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009c68:	4b05      	ldr	r3, [pc, #20]	; (8009c80 <prvCheckForValidListAndQueue+0x60>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	490b      	ldr	r1, [pc, #44]	; (8009c9c <prvCheckForValidListAndQueue+0x7c>)
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7fe fc5e 	bl	8008530 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c74:	f000 f96e 	bl	8009f54 <vPortExitCritical>
}
 8009c78:	bf00      	nop
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	20000ec4 	.word	0x20000ec4
 8009c84:	20000e94 	.word	0x20000e94
 8009c88:	20000ea8 	.word	0x20000ea8
 8009c8c:	20000ebc 	.word	0x20000ebc
 8009c90:	20000ec0 	.word	0x20000ec0
 8009c94:	20000f70 	.word	0x20000f70
 8009c98:	20000ed0 	.word	0x20000ed0
 8009c9c:	0800ba90 	.word	0x0800ba90

08009ca0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	3b04      	subs	r3, #4
 8009cb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009cb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	3b04      	subs	r3, #4
 8009cbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f023 0201 	bic.w	r2, r3, #1
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3b04      	subs	r3, #4
 8009cce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009cd0:	4a0c      	ldr	r2, [pc, #48]	; (8009d04 <pxPortInitialiseStack+0x64>)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	3b14      	subs	r3, #20
 8009cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	3b04      	subs	r3, #4
 8009ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f06f 0202 	mvn.w	r2, #2
 8009cee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	3b20      	subs	r3, #32
 8009cf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
}
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	3714      	adds	r7, #20
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr
 8009d04:	08009d09 	.word	0x08009d09

08009d08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d12:	4b12      	ldr	r3, [pc, #72]	; (8009d5c <prvTaskExitError+0x54>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d1a:	d00a      	beq.n	8009d32 <prvTaskExitError+0x2a>
	__asm volatile
 8009d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	60fb      	str	r3, [r7, #12]
}
 8009d2e:	bf00      	nop
 8009d30:	e7fe      	b.n	8009d30 <prvTaskExitError+0x28>
	__asm volatile
 8009d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	60bb      	str	r3, [r7, #8]
}
 8009d44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d46:	bf00      	nop
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d0fc      	beq.n	8009d48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d4e:	bf00      	nop
 8009d50:	bf00      	nop
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	2000000c 	.word	0x2000000c

08009d60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d60:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <pxCurrentTCBConst2>)
 8009d62:	6819      	ldr	r1, [r3, #0]
 8009d64:	6808      	ldr	r0, [r1, #0]
 8009d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6a:	f380 8809 	msr	PSP, r0
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f04f 0000 	mov.w	r0, #0
 8009d76:	f380 8811 	msr	BASEPRI, r0
 8009d7a:	4770      	bx	lr
 8009d7c:	f3af 8000 	nop.w

08009d80 <pxCurrentTCBConst2>:
 8009d80:	20000994 	.word	0x20000994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d84:	bf00      	nop
 8009d86:	bf00      	nop

08009d88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009d88:	4808      	ldr	r0, [pc, #32]	; (8009dac <prvPortStartFirstTask+0x24>)
 8009d8a:	6800      	ldr	r0, [r0, #0]
 8009d8c:	6800      	ldr	r0, [r0, #0]
 8009d8e:	f380 8808 	msr	MSP, r0
 8009d92:	f04f 0000 	mov.w	r0, #0
 8009d96:	f380 8814 	msr	CONTROL, r0
 8009d9a:	b662      	cpsie	i
 8009d9c:	b661      	cpsie	f
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	f3bf 8f6f 	isb	sy
 8009da6:	df00      	svc	0
 8009da8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009daa:	bf00      	nop
 8009dac:	e000ed08 	.word	0xe000ed08

08009db0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009db6:	4b46      	ldr	r3, [pc, #280]	; (8009ed0 <xPortStartScheduler+0x120>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a46      	ldr	r2, [pc, #280]	; (8009ed4 <xPortStartScheduler+0x124>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d10a      	bne.n	8009dd6 <xPortStartScheduler+0x26>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	613b      	str	r3, [r7, #16]
}
 8009dd2:	bf00      	nop
 8009dd4:	e7fe      	b.n	8009dd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009dd6:	4b3e      	ldr	r3, [pc, #248]	; (8009ed0 <xPortStartScheduler+0x120>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a3f      	ldr	r2, [pc, #252]	; (8009ed8 <xPortStartScheduler+0x128>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d10a      	bne.n	8009df6 <xPortStartScheduler+0x46>
	__asm volatile
 8009de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	60fb      	str	r3, [r7, #12]
}
 8009df2:	bf00      	nop
 8009df4:	e7fe      	b.n	8009df4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009df6:	4b39      	ldr	r3, [pc, #228]	; (8009edc <xPortStartScheduler+0x12c>)
 8009df8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	22ff      	movs	r2, #255	; 0xff
 8009e06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	b2db      	uxtb	r3, r3
 8009e0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009e10:	78fb      	ldrb	r3, [r7, #3]
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009e18:	b2da      	uxtb	r2, r3
 8009e1a:	4b31      	ldr	r3, [pc, #196]	; (8009ee0 <xPortStartScheduler+0x130>)
 8009e1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009e1e:	4b31      	ldr	r3, [pc, #196]	; (8009ee4 <xPortStartScheduler+0x134>)
 8009e20:	2207      	movs	r2, #7
 8009e22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e24:	e009      	b.n	8009e3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009e26:	4b2f      	ldr	r3, [pc, #188]	; (8009ee4 <xPortStartScheduler+0x134>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	3b01      	subs	r3, #1
 8009e2c:	4a2d      	ldr	r2, [pc, #180]	; (8009ee4 <xPortStartScheduler+0x134>)
 8009e2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009e30:	78fb      	ldrb	r3, [r7, #3]
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	005b      	lsls	r3, r3, #1
 8009e36:	b2db      	uxtb	r3, r3
 8009e38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009e3a:	78fb      	ldrb	r3, [r7, #3]
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e42:	2b80      	cmp	r3, #128	; 0x80
 8009e44:	d0ef      	beq.n	8009e26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009e46:	4b27      	ldr	r3, [pc, #156]	; (8009ee4 <xPortStartScheduler+0x134>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f1c3 0307 	rsb	r3, r3, #7
 8009e4e:	2b04      	cmp	r3, #4
 8009e50:	d00a      	beq.n	8009e68 <xPortStartScheduler+0xb8>
	__asm volatile
 8009e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e56:	f383 8811 	msr	BASEPRI, r3
 8009e5a:	f3bf 8f6f 	isb	sy
 8009e5e:	f3bf 8f4f 	dsb	sy
 8009e62:	60bb      	str	r3, [r7, #8]
}
 8009e64:	bf00      	nop
 8009e66:	e7fe      	b.n	8009e66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009e68:	4b1e      	ldr	r3, [pc, #120]	; (8009ee4 <xPortStartScheduler+0x134>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	021b      	lsls	r3, r3, #8
 8009e6e:	4a1d      	ldr	r2, [pc, #116]	; (8009ee4 <xPortStartScheduler+0x134>)
 8009e70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009e72:	4b1c      	ldr	r3, [pc, #112]	; (8009ee4 <xPortStartScheduler+0x134>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009e7a:	4a1a      	ldr	r2, [pc, #104]	; (8009ee4 <xPortStartScheduler+0x134>)
 8009e7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009e86:	4b18      	ldr	r3, [pc, #96]	; (8009ee8 <xPortStartScheduler+0x138>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4a17      	ldr	r2, [pc, #92]	; (8009ee8 <xPortStartScheduler+0x138>)
 8009e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e92:	4b15      	ldr	r3, [pc, #84]	; (8009ee8 <xPortStartScheduler+0x138>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a14      	ldr	r2, [pc, #80]	; (8009ee8 <xPortStartScheduler+0x138>)
 8009e98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e9e:	f000 f8dd 	bl	800a05c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009ea2:	4b12      	ldr	r3, [pc, #72]	; (8009eec <xPortStartScheduler+0x13c>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009ea8:	f000 f8fc 	bl	800a0a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009eac:	4b10      	ldr	r3, [pc, #64]	; (8009ef0 <xPortStartScheduler+0x140>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a0f      	ldr	r2, [pc, #60]	; (8009ef0 <xPortStartScheduler+0x140>)
 8009eb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009eb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009eb8:	f7ff ff66 	bl	8009d88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ebc:	f7fe ff48 	bl	8008d50 <vTaskSwitchContext>
	prvTaskExitError();
 8009ec0:	f7ff ff22 	bl	8009d08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	e000ed00 	.word	0xe000ed00
 8009ed4:	410fc271 	.word	0x410fc271
 8009ed8:	410fc270 	.word	0x410fc270
 8009edc:	e000e400 	.word	0xe000e400
 8009ee0:	20000fc0 	.word	0x20000fc0
 8009ee4:	20000fc4 	.word	0x20000fc4
 8009ee8:	e000ed20 	.word	0xe000ed20
 8009eec:	2000000c 	.word	0x2000000c
 8009ef0:	e000ef34 	.word	0xe000ef34

08009ef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
	__asm volatile
 8009efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efe:	f383 8811 	msr	BASEPRI, r3
 8009f02:	f3bf 8f6f 	isb	sy
 8009f06:	f3bf 8f4f 	dsb	sy
 8009f0a:	607b      	str	r3, [r7, #4]
}
 8009f0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009f0e:	4b0f      	ldr	r3, [pc, #60]	; (8009f4c <vPortEnterCritical+0x58>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3301      	adds	r3, #1
 8009f14:	4a0d      	ldr	r2, [pc, #52]	; (8009f4c <vPortEnterCritical+0x58>)
 8009f16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009f18:	4b0c      	ldr	r3, [pc, #48]	; (8009f4c <vPortEnterCritical+0x58>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d10f      	bne.n	8009f40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009f20:	4b0b      	ldr	r3, [pc, #44]	; (8009f50 <vPortEnterCritical+0x5c>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00a      	beq.n	8009f40 <vPortEnterCritical+0x4c>
	__asm volatile
 8009f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2e:	f383 8811 	msr	BASEPRI, r3
 8009f32:	f3bf 8f6f 	isb	sy
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	603b      	str	r3, [r7, #0]
}
 8009f3c:	bf00      	nop
 8009f3e:	e7fe      	b.n	8009f3e <vPortEnterCritical+0x4a>
	}
}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr
 8009f4c:	2000000c 	.word	0x2000000c
 8009f50:	e000ed04 	.word	0xe000ed04

08009f54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009f54:	b480      	push	{r7}
 8009f56:	b083      	sub	sp, #12
 8009f58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009f5a:	4b12      	ldr	r3, [pc, #72]	; (8009fa4 <vPortExitCritical+0x50>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d10a      	bne.n	8009f78 <vPortExitCritical+0x24>
	__asm volatile
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	607b      	str	r3, [r7, #4]
}
 8009f74:	bf00      	nop
 8009f76:	e7fe      	b.n	8009f76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009f78:	4b0a      	ldr	r3, [pc, #40]	; (8009fa4 <vPortExitCritical+0x50>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	4a09      	ldr	r2, [pc, #36]	; (8009fa4 <vPortExitCritical+0x50>)
 8009f80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009f82:	4b08      	ldr	r3, [pc, #32]	; (8009fa4 <vPortExitCritical+0x50>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d105      	bne.n	8009f96 <vPortExitCritical+0x42>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	f383 8811 	msr	BASEPRI, r3
}
 8009f94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f96:	bf00      	nop
 8009f98:	370c      	adds	r7, #12
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa0:	4770      	bx	lr
 8009fa2:	bf00      	nop
 8009fa4:	2000000c 	.word	0x2000000c
	...

08009fb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009fb0:	f3ef 8009 	mrs	r0, PSP
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	4b15      	ldr	r3, [pc, #84]	; (800a010 <pxCurrentTCBConst>)
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	f01e 0f10 	tst.w	lr, #16
 8009fc0:	bf08      	it	eq
 8009fc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009fc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fca:	6010      	str	r0, [r2, #0]
 8009fcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009fd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009fd4:	f380 8811 	msr	BASEPRI, r0
 8009fd8:	f3bf 8f4f 	dsb	sy
 8009fdc:	f3bf 8f6f 	isb	sy
 8009fe0:	f7fe feb6 	bl	8008d50 <vTaskSwitchContext>
 8009fe4:	f04f 0000 	mov.w	r0, #0
 8009fe8:	f380 8811 	msr	BASEPRI, r0
 8009fec:	bc09      	pop	{r0, r3}
 8009fee:	6819      	ldr	r1, [r3, #0]
 8009ff0:	6808      	ldr	r0, [r1, #0]
 8009ff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ff6:	f01e 0f10 	tst.w	lr, #16
 8009ffa:	bf08      	it	eq
 8009ffc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a000:	f380 8809 	msr	PSP, r0
 800a004:	f3bf 8f6f 	isb	sy
 800a008:	4770      	bx	lr
 800a00a:	bf00      	nop
 800a00c:	f3af 8000 	nop.w

0800a010 <pxCurrentTCBConst>:
 800a010:	20000994 	.word	0x20000994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a014:	bf00      	nop
 800a016:	bf00      	nop

0800a018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b082      	sub	sp, #8
 800a01c:	af00      	add	r7, sp, #0
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	607b      	str	r3, [r7, #4]
}
 800a030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a032:	f7fe fdd3 	bl	8008bdc <xTaskIncrementTick>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d003      	beq.n	800a044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a03c:	4b06      	ldr	r3, [pc, #24]	; (800a058 <xPortSysTickHandler+0x40>)
 800a03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	2300      	movs	r3, #0
 800a046:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	f383 8811 	msr	BASEPRI, r3
}
 800a04e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a050:	bf00      	nop
 800a052:	3708      	adds	r7, #8
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}
 800a058:	e000ed04 	.word	0xe000ed04

0800a05c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a05c:	b480      	push	{r7}
 800a05e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a060:	4b0b      	ldr	r3, [pc, #44]	; (800a090 <vPortSetupTimerInterrupt+0x34>)
 800a062:	2200      	movs	r2, #0
 800a064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a066:	4b0b      	ldr	r3, [pc, #44]	; (800a094 <vPortSetupTimerInterrupt+0x38>)
 800a068:	2200      	movs	r2, #0
 800a06a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a06c:	4b0a      	ldr	r3, [pc, #40]	; (800a098 <vPortSetupTimerInterrupt+0x3c>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a0a      	ldr	r2, [pc, #40]	; (800a09c <vPortSetupTimerInterrupt+0x40>)
 800a072:	fba2 2303 	umull	r2, r3, r2, r3
 800a076:	099b      	lsrs	r3, r3, #6
 800a078:	4a09      	ldr	r2, [pc, #36]	; (800a0a0 <vPortSetupTimerInterrupt+0x44>)
 800a07a:	3b01      	subs	r3, #1
 800a07c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a07e:	4b04      	ldr	r3, [pc, #16]	; (800a090 <vPortSetupTimerInterrupt+0x34>)
 800a080:	2207      	movs	r2, #7
 800a082:	601a      	str	r2, [r3, #0]
}
 800a084:	bf00      	nop
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	e000e010 	.word	0xe000e010
 800a094:	e000e018 	.word	0xe000e018
 800a098:	20000000 	.word	0x20000000
 800a09c:	10624dd3 	.word	0x10624dd3
 800a0a0:	e000e014 	.word	0xe000e014

0800a0a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a0a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a0b4 <vPortEnableVFP+0x10>
 800a0a8:	6801      	ldr	r1, [r0, #0]
 800a0aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a0ae:	6001      	str	r1, [r0, #0]
 800a0b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a0b2:	bf00      	nop
 800a0b4:	e000ed88 	.word	0xe000ed88

0800a0b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a0be:	f3ef 8305 	mrs	r3, IPSR
 800a0c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2b0f      	cmp	r3, #15
 800a0c8:	d914      	bls.n	800a0f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a0ca:	4a17      	ldr	r2, [pc, #92]	; (800a128 <vPortValidateInterruptPriority+0x70>)
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a0d4:	4b15      	ldr	r3, [pc, #84]	; (800a12c <vPortValidateInterruptPriority+0x74>)
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	7afa      	ldrb	r2, [r7, #11]
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d20a      	bcs.n	800a0f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	607b      	str	r3, [r7, #4]
}
 800a0f0:	bf00      	nop
 800a0f2:	e7fe      	b.n	800a0f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a0f4:	4b0e      	ldr	r3, [pc, #56]	; (800a130 <vPortValidateInterruptPriority+0x78>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a0fc:	4b0d      	ldr	r3, [pc, #52]	; (800a134 <vPortValidateInterruptPriority+0x7c>)
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	429a      	cmp	r2, r3
 800a102:	d90a      	bls.n	800a11a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a108:	f383 8811 	msr	BASEPRI, r3
 800a10c:	f3bf 8f6f 	isb	sy
 800a110:	f3bf 8f4f 	dsb	sy
 800a114:	603b      	str	r3, [r7, #0]
}
 800a116:	bf00      	nop
 800a118:	e7fe      	b.n	800a118 <vPortValidateInterruptPriority+0x60>
	}
 800a11a:	bf00      	nop
 800a11c:	3714      	adds	r7, #20
 800a11e:	46bd      	mov	sp, r7
 800a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a124:	4770      	bx	lr
 800a126:	bf00      	nop
 800a128:	e000e3f0 	.word	0xe000e3f0
 800a12c:	20000fc0 	.word	0x20000fc0
 800a130:	e000ed0c 	.word	0xe000ed0c
 800a134:	20000fc4 	.word	0x20000fc4

0800a138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b08a      	sub	sp, #40	; 0x28
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a140:	2300      	movs	r3, #0
 800a142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a144:	f7fe fc8e 	bl	8008a64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a148:	4b5b      	ldr	r3, [pc, #364]	; (800a2b8 <pvPortMalloc+0x180>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d101      	bne.n	800a154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a150:	f000 f920 	bl	800a394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a154:	4b59      	ldr	r3, [pc, #356]	; (800a2bc <pvPortMalloc+0x184>)
 800a156:	681a      	ldr	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4013      	ands	r3, r2
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f040 8093 	bne.w	800a288 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d01d      	beq.n	800a1a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a168:	2208      	movs	r2, #8
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4413      	add	r3, r2
 800a16e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f003 0307 	and.w	r3, r3, #7
 800a176:	2b00      	cmp	r3, #0
 800a178:	d014      	beq.n	800a1a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f023 0307 	bic.w	r3, r3, #7
 800a180:	3308      	adds	r3, #8
 800a182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f003 0307 	and.w	r3, r3, #7
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00a      	beq.n	800a1a4 <pvPortMalloc+0x6c>
	__asm volatile
 800a18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a192:	f383 8811 	msr	BASEPRI, r3
 800a196:	f3bf 8f6f 	isb	sy
 800a19a:	f3bf 8f4f 	dsb	sy
 800a19e:	617b      	str	r3, [r7, #20]
}
 800a1a0:	bf00      	nop
 800a1a2:	e7fe      	b.n	800a1a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d06e      	beq.n	800a288 <pvPortMalloc+0x150>
 800a1aa:	4b45      	ldr	r3, [pc, #276]	; (800a2c0 <pvPortMalloc+0x188>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d869      	bhi.n	800a288 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a1b4:	4b43      	ldr	r3, [pc, #268]	; (800a2c4 <pvPortMalloc+0x18c>)
 800a1b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a1b8:	4b42      	ldr	r3, [pc, #264]	; (800a2c4 <pvPortMalloc+0x18c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1be:	e004      	b.n	800a1ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d903      	bls.n	800a1dc <pvPortMalloc+0xa4>
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d1f1      	bne.n	800a1c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a1dc:	4b36      	ldr	r3, [pc, #216]	; (800a2b8 <pvPortMalloc+0x180>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d050      	beq.n	800a288 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a1e6:	6a3b      	ldr	r3, [r7, #32]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2208      	movs	r2, #8
 800a1ec:	4413      	add	r3, r2
 800a1ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	6a3b      	ldr	r3, [r7, #32]
 800a1f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	1ad2      	subs	r2, r2, r3
 800a200:	2308      	movs	r3, #8
 800a202:	005b      	lsls	r3, r3, #1
 800a204:	429a      	cmp	r2, r3
 800a206:	d91f      	bls.n	800a248 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4413      	add	r3, r2
 800a20e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	f003 0307 	and.w	r3, r3, #7
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00a      	beq.n	800a230 <pvPortMalloc+0xf8>
	__asm volatile
 800a21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21e:	f383 8811 	msr	BASEPRI, r3
 800a222:	f3bf 8f6f 	isb	sy
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	613b      	str	r3, [r7, #16]
}
 800a22c:	bf00      	nop
 800a22e:	e7fe      	b.n	800a22e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a232:	685a      	ldr	r2, [r3, #4]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	1ad2      	subs	r2, r2, r3
 800a238:	69bb      	ldr	r3, [r7, #24]
 800a23a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23e:	687a      	ldr	r2, [r7, #4]
 800a240:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a242:	69b8      	ldr	r0, [r7, #24]
 800a244:	f000 f908 	bl	800a458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a248:	4b1d      	ldr	r3, [pc, #116]	; (800a2c0 <pvPortMalloc+0x188>)
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	1ad3      	subs	r3, r2, r3
 800a252:	4a1b      	ldr	r2, [pc, #108]	; (800a2c0 <pvPortMalloc+0x188>)
 800a254:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a256:	4b1a      	ldr	r3, [pc, #104]	; (800a2c0 <pvPortMalloc+0x188>)
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	4b1b      	ldr	r3, [pc, #108]	; (800a2c8 <pvPortMalloc+0x190>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	429a      	cmp	r2, r3
 800a260:	d203      	bcs.n	800a26a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a262:	4b17      	ldr	r3, [pc, #92]	; (800a2c0 <pvPortMalloc+0x188>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a18      	ldr	r2, [pc, #96]	; (800a2c8 <pvPortMalloc+0x190>)
 800a268:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a26c:	685a      	ldr	r2, [r3, #4]
 800a26e:	4b13      	ldr	r3, [pc, #76]	; (800a2bc <pvPortMalloc+0x184>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	431a      	orrs	r2, r3
 800a274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a276:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27a:	2200      	movs	r2, #0
 800a27c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a27e:	4b13      	ldr	r3, [pc, #76]	; (800a2cc <pvPortMalloc+0x194>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	3301      	adds	r3, #1
 800a284:	4a11      	ldr	r2, [pc, #68]	; (800a2cc <pvPortMalloc+0x194>)
 800a286:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a288:	f7fe fbfa 	bl	8008a80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a28c:	69fb      	ldr	r3, [r7, #28]
 800a28e:	f003 0307 	and.w	r3, r3, #7
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00a      	beq.n	800a2ac <pvPortMalloc+0x174>
	__asm volatile
 800a296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f3bf 8f4f 	dsb	sy
 800a2a6:	60fb      	str	r3, [r7, #12]
}
 800a2a8:	bf00      	nop
 800a2aa:	e7fe      	b.n	800a2aa <pvPortMalloc+0x172>
	return pvReturn;
 800a2ac:	69fb      	ldr	r3, [r7, #28]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3728      	adds	r7, #40	; 0x28
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	20001b88 	.word	0x20001b88
 800a2bc:	20001b9c 	.word	0x20001b9c
 800a2c0:	20001b8c 	.word	0x20001b8c
 800a2c4:	20001b80 	.word	0x20001b80
 800a2c8:	20001b90 	.word	0x20001b90
 800a2cc:	20001b94 	.word	0x20001b94

0800a2d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d04d      	beq.n	800a37e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a2e2:	2308      	movs	r3, #8
 800a2e4:	425b      	negs	r3, r3
 800a2e6:	697a      	ldr	r2, [r7, #20]
 800a2e8:	4413      	add	r3, r2
 800a2ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	685a      	ldr	r2, [r3, #4]
 800a2f4:	4b24      	ldr	r3, [pc, #144]	; (800a388 <vPortFree+0xb8>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4013      	ands	r3, r2
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d10a      	bne.n	800a314 <vPortFree+0x44>
	__asm volatile
 800a2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a302:	f383 8811 	msr	BASEPRI, r3
 800a306:	f3bf 8f6f 	isb	sy
 800a30a:	f3bf 8f4f 	dsb	sy
 800a30e:	60fb      	str	r3, [r7, #12]
}
 800a310:	bf00      	nop
 800a312:	e7fe      	b.n	800a312 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00a      	beq.n	800a332 <vPortFree+0x62>
	__asm volatile
 800a31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a320:	f383 8811 	msr	BASEPRI, r3
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	60bb      	str	r3, [r7, #8]
}
 800a32e:	bf00      	nop
 800a330:	e7fe      	b.n	800a330 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	685a      	ldr	r2, [r3, #4]
 800a336:	4b14      	ldr	r3, [pc, #80]	; (800a388 <vPortFree+0xb8>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4013      	ands	r3, r2
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d01e      	beq.n	800a37e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d11a      	bne.n	800a37e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	4b0e      	ldr	r3, [pc, #56]	; (800a388 <vPortFree+0xb8>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	43db      	mvns	r3, r3
 800a352:	401a      	ands	r2, r3
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a358:	f7fe fb84 	bl	8008a64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	685a      	ldr	r2, [r3, #4]
 800a360:	4b0a      	ldr	r3, [pc, #40]	; (800a38c <vPortFree+0xbc>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4413      	add	r3, r2
 800a366:	4a09      	ldr	r2, [pc, #36]	; (800a38c <vPortFree+0xbc>)
 800a368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a36a:	6938      	ldr	r0, [r7, #16]
 800a36c:	f000 f874 	bl	800a458 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a370:	4b07      	ldr	r3, [pc, #28]	; (800a390 <vPortFree+0xc0>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	3301      	adds	r3, #1
 800a376:	4a06      	ldr	r2, [pc, #24]	; (800a390 <vPortFree+0xc0>)
 800a378:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a37a:	f7fe fb81 	bl	8008a80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a37e:	bf00      	nop
 800a380:	3718      	adds	r7, #24
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20001b9c 	.word	0x20001b9c
 800a38c:	20001b8c 	.word	0x20001b8c
 800a390:	20001b98 	.word	0x20001b98

0800a394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a39a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a39e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3a0:	4b27      	ldr	r3, [pc, #156]	; (800a440 <prvHeapInit+0xac>)
 800a3a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f003 0307 	and.w	r3, r3, #7
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d00c      	beq.n	800a3c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3307      	adds	r3, #7
 800a3b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f023 0307 	bic.w	r3, r3, #7
 800a3ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3bc:	68ba      	ldr	r2, [r7, #8]
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	1ad3      	subs	r3, r2, r3
 800a3c2:	4a1f      	ldr	r2, [pc, #124]	; (800a440 <prvHeapInit+0xac>)
 800a3c4:	4413      	add	r3, r2
 800a3c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3cc:	4a1d      	ldr	r2, [pc, #116]	; (800a444 <prvHeapInit+0xb0>)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3d2:	4b1c      	ldr	r3, [pc, #112]	; (800a444 <prvHeapInit+0xb0>)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	68ba      	ldr	r2, [r7, #8]
 800a3dc:	4413      	add	r3, r2
 800a3de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a3e0:	2208      	movs	r2, #8
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	1a9b      	subs	r3, r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f023 0307 	bic.w	r3, r3, #7
 800a3ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	4a15      	ldr	r2, [pc, #84]	; (800a448 <prvHeapInit+0xb4>)
 800a3f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a3f6:	4b14      	ldr	r3, [pc, #80]	; (800a448 <prvHeapInit+0xb4>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a3fe:	4b12      	ldr	r3, [pc, #72]	; (800a448 <prvHeapInit+0xb4>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	2200      	movs	r2, #0
 800a404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	1ad2      	subs	r2, r2, r3
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a414:	4b0c      	ldr	r3, [pc, #48]	; (800a448 <prvHeapInit+0xb4>)
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	4a0a      	ldr	r2, [pc, #40]	; (800a44c <prvHeapInit+0xb8>)
 800a422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	4a09      	ldr	r2, [pc, #36]	; (800a450 <prvHeapInit+0xbc>)
 800a42a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a42c:	4b09      	ldr	r3, [pc, #36]	; (800a454 <prvHeapInit+0xc0>)
 800a42e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a432:	601a      	str	r2, [r3, #0]
}
 800a434:	bf00      	nop
 800a436:	3714      	adds	r7, #20
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr
 800a440:	20000fc8 	.word	0x20000fc8
 800a444:	20001b80 	.word	0x20001b80
 800a448:	20001b88 	.word	0x20001b88
 800a44c:	20001b90 	.word	0x20001b90
 800a450:	20001b8c 	.word	0x20001b8c
 800a454:	20001b9c 	.word	0x20001b9c

0800a458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a458:	b480      	push	{r7}
 800a45a:	b085      	sub	sp, #20
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a460:	4b28      	ldr	r3, [pc, #160]	; (800a504 <prvInsertBlockIntoFreeList+0xac>)
 800a462:	60fb      	str	r3, [r7, #12]
 800a464:	e002      	b.n	800a46c <prvInsertBlockIntoFreeList+0x14>
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	60fb      	str	r3, [r7, #12]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	687a      	ldr	r2, [r7, #4]
 800a472:	429a      	cmp	r2, r3
 800a474:	d8f7      	bhi.n	800a466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	4413      	add	r3, r2
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	429a      	cmp	r2, r3
 800a486:	d108      	bne.n	800a49a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	685a      	ldr	r2, [r3, #4]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	685b      	ldr	r3, [r3, #4]
 800a490:	441a      	add	r2, r3
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	68ba      	ldr	r2, [r7, #8]
 800a4a4:	441a      	add	r2, r3
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d118      	bne.n	800a4e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	4b15      	ldr	r3, [pc, #84]	; (800a508 <prvInsertBlockIntoFreeList+0xb0>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	d00d      	beq.n	800a4d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685a      	ldr	r2, [r3, #4]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	441a      	add	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	601a      	str	r2, [r3, #0]
 800a4d4:	e008      	b.n	800a4e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a4d6:	4b0c      	ldr	r3, [pc, #48]	; (800a508 <prvInsertBlockIntoFreeList+0xb0>)
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	e003      	b.n	800a4e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681a      	ldr	r2, [r3, #0]
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	d002      	beq.n	800a4f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a4f6:	bf00      	nop
 800a4f8:	3714      	adds	r7, #20
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	20001b80 	.word	0x20001b80
 800a508:	20001b88 	.word	0x20001b88

0800a50c <atoi>:
 800a50c:	220a      	movs	r2, #10
 800a50e:	2100      	movs	r1, #0
 800a510:	f000 b882 	b.w	800a618 <strtol>

0800a514 <_strtol_l.constprop.0>:
 800a514:	2b01      	cmp	r3, #1
 800a516:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a51a:	d001      	beq.n	800a520 <_strtol_l.constprop.0+0xc>
 800a51c:	2b24      	cmp	r3, #36	; 0x24
 800a51e:	d906      	bls.n	800a52e <_strtol_l.constprop.0+0x1a>
 800a520:	f000 fa54 	bl	800a9cc <__errno>
 800a524:	2316      	movs	r3, #22
 800a526:	6003      	str	r3, [r0, #0]
 800a528:	2000      	movs	r0, #0
 800a52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a52e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a614 <_strtol_l.constprop.0+0x100>
 800a532:	460d      	mov	r5, r1
 800a534:	462e      	mov	r6, r5
 800a536:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a53a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a53e:	f017 0708 	ands.w	r7, r7, #8
 800a542:	d1f7      	bne.n	800a534 <_strtol_l.constprop.0+0x20>
 800a544:	2c2d      	cmp	r4, #45	; 0x2d
 800a546:	d132      	bne.n	800a5ae <_strtol_l.constprop.0+0x9a>
 800a548:	782c      	ldrb	r4, [r5, #0]
 800a54a:	2701      	movs	r7, #1
 800a54c:	1cb5      	adds	r5, r6, #2
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d05b      	beq.n	800a60a <_strtol_l.constprop.0+0xf6>
 800a552:	2b10      	cmp	r3, #16
 800a554:	d109      	bne.n	800a56a <_strtol_l.constprop.0+0x56>
 800a556:	2c30      	cmp	r4, #48	; 0x30
 800a558:	d107      	bne.n	800a56a <_strtol_l.constprop.0+0x56>
 800a55a:	782c      	ldrb	r4, [r5, #0]
 800a55c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a560:	2c58      	cmp	r4, #88	; 0x58
 800a562:	d14d      	bne.n	800a600 <_strtol_l.constprop.0+0xec>
 800a564:	786c      	ldrb	r4, [r5, #1]
 800a566:	2310      	movs	r3, #16
 800a568:	3502      	adds	r5, #2
 800a56a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a56e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a572:	f04f 0e00 	mov.w	lr, #0
 800a576:	fbb8 f9f3 	udiv	r9, r8, r3
 800a57a:	4676      	mov	r6, lr
 800a57c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a580:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a584:	f1bc 0f09 	cmp.w	ip, #9
 800a588:	d816      	bhi.n	800a5b8 <_strtol_l.constprop.0+0xa4>
 800a58a:	4664      	mov	r4, ip
 800a58c:	42a3      	cmp	r3, r4
 800a58e:	dd24      	ble.n	800a5da <_strtol_l.constprop.0+0xc6>
 800a590:	f1be 3fff 	cmp.w	lr, #4294967295
 800a594:	d008      	beq.n	800a5a8 <_strtol_l.constprop.0+0x94>
 800a596:	45b1      	cmp	r9, r6
 800a598:	d31c      	bcc.n	800a5d4 <_strtol_l.constprop.0+0xc0>
 800a59a:	d101      	bne.n	800a5a0 <_strtol_l.constprop.0+0x8c>
 800a59c:	45a2      	cmp	sl, r4
 800a59e:	db19      	blt.n	800a5d4 <_strtol_l.constprop.0+0xc0>
 800a5a0:	fb06 4603 	mla	r6, r6, r3, r4
 800a5a4:	f04f 0e01 	mov.w	lr, #1
 800a5a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5ac:	e7e8      	b.n	800a580 <_strtol_l.constprop.0+0x6c>
 800a5ae:	2c2b      	cmp	r4, #43	; 0x2b
 800a5b0:	bf04      	itt	eq
 800a5b2:	782c      	ldrbeq	r4, [r5, #0]
 800a5b4:	1cb5      	addeq	r5, r6, #2
 800a5b6:	e7ca      	b.n	800a54e <_strtol_l.constprop.0+0x3a>
 800a5b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a5bc:	f1bc 0f19 	cmp.w	ip, #25
 800a5c0:	d801      	bhi.n	800a5c6 <_strtol_l.constprop.0+0xb2>
 800a5c2:	3c37      	subs	r4, #55	; 0x37
 800a5c4:	e7e2      	b.n	800a58c <_strtol_l.constprop.0+0x78>
 800a5c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a5ca:	f1bc 0f19 	cmp.w	ip, #25
 800a5ce:	d804      	bhi.n	800a5da <_strtol_l.constprop.0+0xc6>
 800a5d0:	3c57      	subs	r4, #87	; 0x57
 800a5d2:	e7db      	b.n	800a58c <_strtol_l.constprop.0+0x78>
 800a5d4:	f04f 3eff 	mov.w	lr, #4294967295
 800a5d8:	e7e6      	b.n	800a5a8 <_strtol_l.constprop.0+0x94>
 800a5da:	f1be 3fff 	cmp.w	lr, #4294967295
 800a5de:	d105      	bne.n	800a5ec <_strtol_l.constprop.0+0xd8>
 800a5e0:	2322      	movs	r3, #34	; 0x22
 800a5e2:	6003      	str	r3, [r0, #0]
 800a5e4:	4646      	mov	r6, r8
 800a5e6:	b942      	cbnz	r2, 800a5fa <_strtol_l.constprop.0+0xe6>
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	e79e      	b.n	800a52a <_strtol_l.constprop.0+0x16>
 800a5ec:	b107      	cbz	r7, 800a5f0 <_strtol_l.constprop.0+0xdc>
 800a5ee:	4276      	negs	r6, r6
 800a5f0:	2a00      	cmp	r2, #0
 800a5f2:	d0f9      	beq.n	800a5e8 <_strtol_l.constprop.0+0xd4>
 800a5f4:	f1be 0f00 	cmp.w	lr, #0
 800a5f8:	d000      	beq.n	800a5fc <_strtol_l.constprop.0+0xe8>
 800a5fa:	1e69      	subs	r1, r5, #1
 800a5fc:	6011      	str	r1, [r2, #0]
 800a5fe:	e7f3      	b.n	800a5e8 <_strtol_l.constprop.0+0xd4>
 800a600:	2430      	movs	r4, #48	; 0x30
 800a602:	2b00      	cmp	r3, #0
 800a604:	d1b1      	bne.n	800a56a <_strtol_l.constprop.0+0x56>
 800a606:	2308      	movs	r3, #8
 800a608:	e7af      	b.n	800a56a <_strtol_l.constprop.0+0x56>
 800a60a:	2c30      	cmp	r4, #48	; 0x30
 800a60c:	d0a5      	beq.n	800a55a <_strtol_l.constprop.0+0x46>
 800a60e:	230a      	movs	r3, #10
 800a610:	e7ab      	b.n	800a56a <_strtol_l.constprop.0+0x56>
 800a612:	bf00      	nop
 800a614:	0800bb29 	.word	0x0800bb29

0800a618 <strtol>:
 800a618:	4613      	mov	r3, r2
 800a61a:	460a      	mov	r2, r1
 800a61c:	4601      	mov	r1, r0
 800a61e:	4802      	ldr	r0, [pc, #8]	; (800a628 <strtol+0x10>)
 800a620:	6800      	ldr	r0, [r0, #0]
 800a622:	f7ff bf77 	b.w	800a514 <_strtol_l.constprop.0>
 800a626:	bf00      	nop
 800a628:	20000068 	.word	0x20000068

0800a62c <std>:
 800a62c:	2300      	movs	r3, #0
 800a62e:	b510      	push	{r4, lr}
 800a630:	4604      	mov	r4, r0
 800a632:	e9c0 3300 	strd	r3, r3, [r0]
 800a636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a63a:	6083      	str	r3, [r0, #8]
 800a63c:	8181      	strh	r1, [r0, #12]
 800a63e:	6643      	str	r3, [r0, #100]	; 0x64
 800a640:	81c2      	strh	r2, [r0, #14]
 800a642:	6183      	str	r3, [r0, #24]
 800a644:	4619      	mov	r1, r3
 800a646:	2208      	movs	r2, #8
 800a648:	305c      	adds	r0, #92	; 0x5c
 800a64a:	f000 f914 	bl	800a876 <memset>
 800a64e:	4b0d      	ldr	r3, [pc, #52]	; (800a684 <std+0x58>)
 800a650:	6263      	str	r3, [r4, #36]	; 0x24
 800a652:	4b0d      	ldr	r3, [pc, #52]	; (800a688 <std+0x5c>)
 800a654:	62a3      	str	r3, [r4, #40]	; 0x28
 800a656:	4b0d      	ldr	r3, [pc, #52]	; (800a68c <std+0x60>)
 800a658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a65a:	4b0d      	ldr	r3, [pc, #52]	; (800a690 <std+0x64>)
 800a65c:	6323      	str	r3, [r4, #48]	; 0x30
 800a65e:	4b0d      	ldr	r3, [pc, #52]	; (800a694 <std+0x68>)
 800a660:	6224      	str	r4, [r4, #32]
 800a662:	429c      	cmp	r4, r3
 800a664:	d006      	beq.n	800a674 <std+0x48>
 800a666:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a66a:	4294      	cmp	r4, r2
 800a66c:	d002      	beq.n	800a674 <std+0x48>
 800a66e:	33d0      	adds	r3, #208	; 0xd0
 800a670:	429c      	cmp	r4, r3
 800a672:	d105      	bne.n	800a680 <std+0x54>
 800a674:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a67c:	f000 b9d0 	b.w	800aa20 <__retarget_lock_init_recursive>
 800a680:	bd10      	pop	{r4, pc}
 800a682:	bf00      	nop
 800a684:	0800a7f1 	.word	0x0800a7f1
 800a688:	0800a813 	.word	0x0800a813
 800a68c:	0800a84b 	.word	0x0800a84b
 800a690:	0800a86f 	.word	0x0800a86f
 800a694:	20001ba0 	.word	0x20001ba0

0800a698 <stdio_exit_handler>:
 800a698:	4a02      	ldr	r2, [pc, #8]	; (800a6a4 <stdio_exit_handler+0xc>)
 800a69a:	4903      	ldr	r1, [pc, #12]	; (800a6a8 <stdio_exit_handler+0x10>)
 800a69c:	4803      	ldr	r0, [pc, #12]	; (800a6ac <stdio_exit_handler+0x14>)
 800a69e:	f000 b869 	b.w	800a774 <_fwalk_sglue>
 800a6a2:	bf00      	nop
 800a6a4:	20000010 	.word	0x20000010
 800a6a8:	0800b35d 	.word	0x0800b35d
 800a6ac:	2000001c 	.word	0x2000001c

0800a6b0 <cleanup_stdio>:
 800a6b0:	6841      	ldr	r1, [r0, #4]
 800a6b2:	4b0c      	ldr	r3, [pc, #48]	; (800a6e4 <cleanup_stdio+0x34>)
 800a6b4:	4299      	cmp	r1, r3
 800a6b6:	b510      	push	{r4, lr}
 800a6b8:	4604      	mov	r4, r0
 800a6ba:	d001      	beq.n	800a6c0 <cleanup_stdio+0x10>
 800a6bc:	f000 fe4e 	bl	800b35c <_fflush_r>
 800a6c0:	68a1      	ldr	r1, [r4, #8]
 800a6c2:	4b09      	ldr	r3, [pc, #36]	; (800a6e8 <cleanup_stdio+0x38>)
 800a6c4:	4299      	cmp	r1, r3
 800a6c6:	d002      	beq.n	800a6ce <cleanup_stdio+0x1e>
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f000 fe47 	bl	800b35c <_fflush_r>
 800a6ce:	68e1      	ldr	r1, [r4, #12]
 800a6d0:	4b06      	ldr	r3, [pc, #24]	; (800a6ec <cleanup_stdio+0x3c>)
 800a6d2:	4299      	cmp	r1, r3
 800a6d4:	d004      	beq.n	800a6e0 <cleanup_stdio+0x30>
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6dc:	f000 be3e 	b.w	800b35c <_fflush_r>
 800a6e0:	bd10      	pop	{r4, pc}
 800a6e2:	bf00      	nop
 800a6e4:	20001ba0 	.word	0x20001ba0
 800a6e8:	20001c08 	.word	0x20001c08
 800a6ec:	20001c70 	.word	0x20001c70

0800a6f0 <global_stdio_init.part.0>:
 800a6f0:	b510      	push	{r4, lr}
 800a6f2:	4b0b      	ldr	r3, [pc, #44]	; (800a720 <global_stdio_init.part.0+0x30>)
 800a6f4:	4c0b      	ldr	r4, [pc, #44]	; (800a724 <global_stdio_init.part.0+0x34>)
 800a6f6:	4a0c      	ldr	r2, [pc, #48]	; (800a728 <global_stdio_init.part.0+0x38>)
 800a6f8:	601a      	str	r2, [r3, #0]
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	2104      	movs	r1, #4
 800a700:	f7ff ff94 	bl	800a62c <std>
 800a704:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a708:	2201      	movs	r2, #1
 800a70a:	2109      	movs	r1, #9
 800a70c:	f7ff ff8e 	bl	800a62c <std>
 800a710:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a714:	2202      	movs	r2, #2
 800a716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a71a:	2112      	movs	r1, #18
 800a71c:	f7ff bf86 	b.w	800a62c <std>
 800a720:	20001cd8 	.word	0x20001cd8
 800a724:	20001ba0 	.word	0x20001ba0
 800a728:	0800a699 	.word	0x0800a699

0800a72c <__sfp_lock_acquire>:
 800a72c:	4801      	ldr	r0, [pc, #4]	; (800a734 <__sfp_lock_acquire+0x8>)
 800a72e:	f000 b978 	b.w	800aa22 <__retarget_lock_acquire_recursive>
 800a732:	bf00      	nop
 800a734:	20001ce1 	.word	0x20001ce1

0800a738 <__sfp_lock_release>:
 800a738:	4801      	ldr	r0, [pc, #4]	; (800a740 <__sfp_lock_release+0x8>)
 800a73a:	f000 b973 	b.w	800aa24 <__retarget_lock_release_recursive>
 800a73e:	bf00      	nop
 800a740:	20001ce1 	.word	0x20001ce1

0800a744 <__sinit>:
 800a744:	b510      	push	{r4, lr}
 800a746:	4604      	mov	r4, r0
 800a748:	f7ff fff0 	bl	800a72c <__sfp_lock_acquire>
 800a74c:	6a23      	ldr	r3, [r4, #32]
 800a74e:	b11b      	cbz	r3, 800a758 <__sinit+0x14>
 800a750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a754:	f7ff bff0 	b.w	800a738 <__sfp_lock_release>
 800a758:	4b04      	ldr	r3, [pc, #16]	; (800a76c <__sinit+0x28>)
 800a75a:	6223      	str	r3, [r4, #32]
 800a75c:	4b04      	ldr	r3, [pc, #16]	; (800a770 <__sinit+0x2c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1f5      	bne.n	800a750 <__sinit+0xc>
 800a764:	f7ff ffc4 	bl	800a6f0 <global_stdio_init.part.0>
 800a768:	e7f2      	b.n	800a750 <__sinit+0xc>
 800a76a:	bf00      	nop
 800a76c:	0800a6b1 	.word	0x0800a6b1
 800a770:	20001cd8 	.word	0x20001cd8

0800a774 <_fwalk_sglue>:
 800a774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a778:	4607      	mov	r7, r0
 800a77a:	4688      	mov	r8, r1
 800a77c:	4614      	mov	r4, r2
 800a77e:	2600      	movs	r6, #0
 800a780:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a784:	f1b9 0901 	subs.w	r9, r9, #1
 800a788:	d505      	bpl.n	800a796 <_fwalk_sglue+0x22>
 800a78a:	6824      	ldr	r4, [r4, #0]
 800a78c:	2c00      	cmp	r4, #0
 800a78e:	d1f7      	bne.n	800a780 <_fwalk_sglue+0xc>
 800a790:	4630      	mov	r0, r6
 800a792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a796:	89ab      	ldrh	r3, [r5, #12]
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d907      	bls.n	800a7ac <_fwalk_sglue+0x38>
 800a79c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	d003      	beq.n	800a7ac <_fwalk_sglue+0x38>
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	4638      	mov	r0, r7
 800a7a8:	47c0      	blx	r8
 800a7aa:	4306      	orrs	r6, r0
 800a7ac:	3568      	adds	r5, #104	; 0x68
 800a7ae:	e7e9      	b.n	800a784 <_fwalk_sglue+0x10>

0800a7b0 <siprintf>:
 800a7b0:	b40e      	push	{r1, r2, r3}
 800a7b2:	b500      	push	{lr}
 800a7b4:	b09c      	sub	sp, #112	; 0x70
 800a7b6:	ab1d      	add	r3, sp, #116	; 0x74
 800a7b8:	9002      	str	r0, [sp, #8]
 800a7ba:	9006      	str	r0, [sp, #24]
 800a7bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a7c0:	4809      	ldr	r0, [pc, #36]	; (800a7e8 <siprintf+0x38>)
 800a7c2:	9107      	str	r1, [sp, #28]
 800a7c4:	9104      	str	r1, [sp, #16]
 800a7c6:	4909      	ldr	r1, [pc, #36]	; (800a7ec <siprintf+0x3c>)
 800a7c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7cc:	9105      	str	r1, [sp, #20]
 800a7ce:	6800      	ldr	r0, [r0, #0]
 800a7d0:	9301      	str	r3, [sp, #4]
 800a7d2:	a902      	add	r1, sp, #8
 800a7d4:	f000 faae 	bl	800ad34 <_svfiprintf_r>
 800a7d8:	9b02      	ldr	r3, [sp, #8]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	701a      	strb	r2, [r3, #0]
 800a7de:	b01c      	add	sp, #112	; 0x70
 800a7e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7e4:	b003      	add	sp, #12
 800a7e6:	4770      	bx	lr
 800a7e8:	20000068 	.word	0x20000068
 800a7ec:	ffff0208 	.word	0xffff0208

0800a7f0 <__sread>:
 800a7f0:	b510      	push	{r4, lr}
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7f8:	f000 f8c4 	bl	800a984 <_read_r>
 800a7fc:	2800      	cmp	r0, #0
 800a7fe:	bfab      	itete	ge
 800a800:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a802:	89a3      	ldrhlt	r3, [r4, #12]
 800a804:	181b      	addge	r3, r3, r0
 800a806:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a80a:	bfac      	ite	ge
 800a80c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a80e:	81a3      	strhlt	r3, [r4, #12]
 800a810:	bd10      	pop	{r4, pc}

0800a812 <__swrite>:
 800a812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a816:	461f      	mov	r7, r3
 800a818:	898b      	ldrh	r3, [r1, #12]
 800a81a:	05db      	lsls	r3, r3, #23
 800a81c:	4605      	mov	r5, r0
 800a81e:	460c      	mov	r4, r1
 800a820:	4616      	mov	r6, r2
 800a822:	d505      	bpl.n	800a830 <__swrite+0x1e>
 800a824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a828:	2302      	movs	r3, #2
 800a82a:	2200      	movs	r2, #0
 800a82c:	f000 f898 	bl	800a960 <_lseek_r>
 800a830:	89a3      	ldrh	r3, [r4, #12]
 800a832:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a836:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a83a:	81a3      	strh	r3, [r4, #12]
 800a83c:	4632      	mov	r2, r6
 800a83e:	463b      	mov	r3, r7
 800a840:	4628      	mov	r0, r5
 800a842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a846:	f000 b8af 	b.w	800a9a8 <_write_r>

0800a84a <__sseek>:
 800a84a:	b510      	push	{r4, lr}
 800a84c:	460c      	mov	r4, r1
 800a84e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a852:	f000 f885 	bl	800a960 <_lseek_r>
 800a856:	1c43      	adds	r3, r0, #1
 800a858:	89a3      	ldrh	r3, [r4, #12]
 800a85a:	bf15      	itete	ne
 800a85c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a85e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a862:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a866:	81a3      	strheq	r3, [r4, #12]
 800a868:	bf18      	it	ne
 800a86a:	81a3      	strhne	r3, [r4, #12]
 800a86c:	bd10      	pop	{r4, pc}

0800a86e <__sclose>:
 800a86e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a872:	f000 b865 	b.w	800a940 <_close_r>

0800a876 <memset>:
 800a876:	4402      	add	r2, r0
 800a878:	4603      	mov	r3, r0
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d100      	bne.n	800a880 <memset+0xa>
 800a87e:	4770      	bx	lr
 800a880:	f803 1b01 	strb.w	r1, [r3], #1
 800a884:	e7f9      	b.n	800a87a <memset+0x4>
	...

0800a888 <strtok>:
 800a888:	4b16      	ldr	r3, [pc, #88]	; (800a8e4 <strtok+0x5c>)
 800a88a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a88c:	681e      	ldr	r6, [r3, #0]
 800a88e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a890:	4605      	mov	r5, r0
 800a892:	b9fc      	cbnz	r4, 800a8d4 <strtok+0x4c>
 800a894:	2050      	movs	r0, #80	; 0x50
 800a896:	9101      	str	r1, [sp, #4]
 800a898:	f000 f93e 	bl	800ab18 <malloc>
 800a89c:	9901      	ldr	r1, [sp, #4]
 800a89e:	6470      	str	r0, [r6, #68]	; 0x44
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	b920      	cbnz	r0, 800a8ae <strtok+0x26>
 800a8a4:	4b10      	ldr	r3, [pc, #64]	; (800a8e8 <strtok+0x60>)
 800a8a6:	4811      	ldr	r0, [pc, #68]	; (800a8ec <strtok+0x64>)
 800a8a8:	215b      	movs	r1, #91	; 0x5b
 800a8aa:	f000 f8cb 	bl	800aa44 <__assert_func>
 800a8ae:	e9c0 4400 	strd	r4, r4, [r0]
 800a8b2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a8b6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a8ba:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a8be:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a8c2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a8c6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a8ca:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a8ce:	6184      	str	r4, [r0, #24]
 800a8d0:	7704      	strb	r4, [r0, #28]
 800a8d2:	6244      	str	r4, [r0, #36]	; 0x24
 800a8d4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	4628      	mov	r0, r5
 800a8da:	b002      	add	sp, #8
 800a8dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8e0:	f000 b806 	b.w	800a8f0 <__strtok_r>
 800a8e4:	20000068 	.word	0x20000068
 800a8e8:	0800bc29 	.word	0x0800bc29
 800a8ec:	0800bc40 	.word	0x0800bc40

0800a8f0 <__strtok_r>:
 800a8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8f2:	b908      	cbnz	r0, 800a8f8 <__strtok_r+0x8>
 800a8f4:	6810      	ldr	r0, [r2, #0]
 800a8f6:	b188      	cbz	r0, 800a91c <__strtok_r+0x2c>
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a900:	460f      	mov	r7, r1
 800a902:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a906:	b91e      	cbnz	r6, 800a910 <__strtok_r+0x20>
 800a908:	b965      	cbnz	r5, 800a924 <__strtok_r+0x34>
 800a90a:	6015      	str	r5, [r2, #0]
 800a90c:	4628      	mov	r0, r5
 800a90e:	e005      	b.n	800a91c <__strtok_r+0x2c>
 800a910:	42b5      	cmp	r5, r6
 800a912:	d1f6      	bne.n	800a902 <__strtok_r+0x12>
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1f0      	bne.n	800a8fa <__strtok_r+0xa>
 800a918:	6014      	str	r4, [r2, #0]
 800a91a:	7003      	strb	r3, [r0, #0]
 800a91c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a91e:	461c      	mov	r4, r3
 800a920:	e00c      	b.n	800a93c <__strtok_r+0x4c>
 800a922:	b915      	cbnz	r5, 800a92a <__strtok_r+0x3a>
 800a924:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a928:	460e      	mov	r6, r1
 800a92a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a92e:	42ab      	cmp	r3, r5
 800a930:	d1f7      	bne.n	800a922 <__strtok_r+0x32>
 800a932:	2b00      	cmp	r3, #0
 800a934:	d0f3      	beq.n	800a91e <__strtok_r+0x2e>
 800a936:	2300      	movs	r3, #0
 800a938:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a93c:	6014      	str	r4, [r2, #0]
 800a93e:	e7ed      	b.n	800a91c <__strtok_r+0x2c>

0800a940 <_close_r>:
 800a940:	b538      	push	{r3, r4, r5, lr}
 800a942:	4d06      	ldr	r5, [pc, #24]	; (800a95c <_close_r+0x1c>)
 800a944:	2300      	movs	r3, #0
 800a946:	4604      	mov	r4, r0
 800a948:	4608      	mov	r0, r1
 800a94a:	602b      	str	r3, [r5, #0]
 800a94c:	f7f7 f956 	bl	8001bfc <_close>
 800a950:	1c43      	adds	r3, r0, #1
 800a952:	d102      	bne.n	800a95a <_close_r+0x1a>
 800a954:	682b      	ldr	r3, [r5, #0]
 800a956:	b103      	cbz	r3, 800a95a <_close_r+0x1a>
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	bd38      	pop	{r3, r4, r5, pc}
 800a95c:	20001cdc 	.word	0x20001cdc

0800a960 <_lseek_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	4d07      	ldr	r5, [pc, #28]	; (800a980 <_lseek_r+0x20>)
 800a964:	4604      	mov	r4, r0
 800a966:	4608      	mov	r0, r1
 800a968:	4611      	mov	r1, r2
 800a96a:	2200      	movs	r2, #0
 800a96c:	602a      	str	r2, [r5, #0]
 800a96e:	461a      	mov	r2, r3
 800a970:	f7f7 f96b 	bl	8001c4a <_lseek>
 800a974:	1c43      	adds	r3, r0, #1
 800a976:	d102      	bne.n	800a97e <_lseek_r+0x1e>
 800a978:	682b      	ldr	r3, [r5, #0]
 800a97a:	b103      	cbz	r3, 800a97e <_lseek_r+0x1e>
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
 800a980:	20001cdc 	.word	0x20001cdc

0800a984 <_read_r>:
 800a984:	b538      	push	{r3, r4, r5, lr}
 800a986:	4d07      	ldr	r5, [pc, #28]	; (800a9a4 <_read_r+0x20>)
 800a988:	4604      	mov	r4, r0
 800a98a:	4608      	mov	r0, r1
 800a98c:	4611      	mov	r1, r2
 800a98e:	2200      	movs	r2, #0
 800a990:	602a      	str	r2, [r5, #0]
 800a992:	461a      	mov	r2, r3
 800a994:	f7f7 f8f9 	bl	8001b8a <_read>
 800a998:	1c43      	adds	r3, r0, #1
 800a99a:	d102      	bne.n	800a9a2 <_read_r+0x1e>
 800a99c:	682b      	ldr	r3, [r5, #0]
 800a99e:	b103      	cbz	r3, 800a9a2 <_read_r+0x1e>
 800a9a0:	6023      	str	r3, [r4, #0]
 800a9a2:	bd38      	pop	{r3, r4, r5, pc}
 800a9a4:	20001cdc 	.word	0x20001cdc

0800a9a8 <_write_r>:
 800a9a8:	b538      	push	{r3, r4, r5, lr}
 800a9aa:	4d07      	ldr	r5, [pc, #28]	; (800a9c8 <_write_r+0x20>)
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	4608      	mov	r0, r1
 800a9b0:	4611      	mov	r1, r2
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	602a      	str	r2, [r5, #0]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	f7f7 f904 	bl	8001bc4 <_write>
 800a9bc:	1c43      	adds	r3, r0, #1
 800a9be:	d102      	bne.n	800a9c6 <_write_r+0x1e>
 800a9c0:	682b      	ldr	r3, [r5, #0]
 800a9c2:	b103      	cbz	r3, 800a9c6 <_write_r+0x1e>
 800a9c4:	6023      	str	r3, [r4, #0]
 800a9c6:	bd38      	pop	{r3, r4, r5, pc}
 800a9c8:	20001cdc 	.word	0x20001cdc

0800a9cc <__errno>:
 800a9cc:	4b01      	ldr	r3, [pc, #4]	; (800a9d4 <__errno+0x8>)
 800a9ce:	6818      	ldr	r0, [r3, #0]
 800a9d0:	4770      	bx	lr
 800a9d2:	bf00      	nop
 800a9d4:	20000068 	.word	0x20000068

0800a9d8 <__libc_init_array>:
 800a9d8:	b570      	push	{r4, r5, r6, lr}
 800a9da:	4d0d      	ldr	r5, [pc, #52]	; (800aa10 <__libc_init_array+0x38>)
 800a9dc:	4c0d      	ldr	r4, [pc, #52]	; (800aa14 <__libc_init_array+0x3c>)
 800a9de:	1b64      	subs	r4, r4, r5
 800a9e0:	10a4      	asrs	r4, r4, #2
 800a9e2:	2600      	movs	r6, #0
 800a9e4:	42a6      	cmp	r6, r4
 800a9e6:	d109      	bne.n	800a9fc <__libc_init_array+0x24>
 800a9e8:	4d0b      	ldr	r5, [pc, #44]	; (800aa18 <__libc_init_array+0x40>)
 800a9ea:	4c0c      	ldr	r4, [pc, #48]	; (800aa1c <__libc_init_array+0x44>)
 800a9ec:	f000 fffa 	bl	800b9e4 <_init>
 800a9f0:	1b64      	subs	r4, r4, r5
 800a9f2:	10a4      	asrs	r4, r4, #2
 800a9f4:	2600      	movs	r6, #0
 800a9f6:	42a6      	cmp	r6, r4
 800a9f8:	d105      	bne.n	800aa06 <__libc_init_array+0x2e>
 800a9fa:	bd70      	pop	{r4, r5, r6, pc}
 800a9fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa00:	4798      	blx	r3
 800aa02:	3601      	adds	r6, #1
 800aa04:	e7ee      	b.n	800a9e4 <__libc_init_array+0xc>
 800aa06:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa0a:	4798      	blx	r3
 800aa0c:	3601      	adds	r6, #1
 800aa0e:	e7f2      	b.n	800a9f6 <__libc_init_array+0x1e>
 800aa10:	0800bd14 	.word	0x0800bd14
 800aa14:	0800bd14 	.word	0x0800bd14
 800aa18:	0800bd14 	.word	0x0800bd14
 800aa1c:	0800bd18 	.word	0x0800bd18

0800aa20 <__retarget_lock_init_recursive>:
 800aa20:	4770      	bx	lr

0800aa22 <__retarget_lock_acquire_recursive>:
 800aa22:	4770      	bx	lr

0800aa24 <__retarget_lock_release_recursive>:
 800aa24:	4770      	bx	lr

0800aa26 <memcpy>:
 800aa26:	440a      	add	r2, r1
 800aa28:	4291      	cmp	r1, r2
 800aa2a:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa2e:	d100      	bne.n	800aa32 <memcpy+0xc>
 800aa30:	4770      	bx	lr
 800aa32:	b510      	push	{r4, lr}
 800aa34:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa38:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa3c:	4291      	cmp	r1, r2
 800aa3e:	d1f9      	bne.n	800aa34 <memcpy+0xe>
 800aa40:	bd10      	pop	{r4, pc}
	...

0800aa44 <__assert_func>:
 800aa44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa46:	4614      	mov	r4, r2
 800aa48:	461a      	mov	r2, r3
 800aa4a:	4b09      	ldr	r3, [pc, #36]	; (800aa70 <__assert_func+0x2c>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4605      	mov	r5, r0
 800aa50:	68d8      	ldr	r0, [r3, #12]
 800aa52:	b14c      	cbz	r4, 800aa68 <__assert_func+0x24>
 800aa54:	4b07      	ldr	r3, [pc, #28]	; (800aa74 <__assert_func+0x30>)
 800aa56:	9100      	str	r1, [sp, #0]
 800aa58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa5c:	4906      	ldr	r1, [pc, #24]	; (800aa78 <__assert_func+0x34>)
 800aa5e:	462b      	mov	r3, r5
 800aa60:	f000 fca4 	bl	800b3ac <fiprintf>
 800aa64:	f000 fcde 	bl	800b424 <abort>
 800aa68:	4b04      	ldr	r3, [pc, #16]	; (800aa7c <__assert_func+0x38>)
 800aa6a:	461c      	mov	r4, r3
 800aa6c:	e7f3      	b.n	800aa56 <__assert_func+0x12>
 800aa6e:	bf00      	nop
 800aa70:	20000068 	.word	0x20000068
 800aa74:	0800bc9a 	.word	0x0800bc9a
 800aa78:	0800bca7 	.word	0x0800bca7
 800aa7c:	0800bcd5 	.word	0x0800bcd5

0800aa80 <_free_r>:
 800aa80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa82:	2900      	cmp	r1, #0
 800aa84:	d044      	beq.n	800ab10 <_free_r+0x90>
 800aa86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa8a:	9001      	str	r0, [sp, #4]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	f1a1 0404 	sub.w	r4, r1, #4
 800aa92:	bfb8      	it	lt
 800aa94:	18e4      	addlt	r4, r4, r3
 800aa96:	f000 f8e7 	bl	800ac68 <__malloc_lock>
 800aa9a:	4a1e      	ldr	r2, [pc, #120]	; (800ab14 <_free_r+0x94>)
 800aa9c:	9801      	ldr	r0, [sp, #4]
 800aa9e:	6813      	ldr	r3, [r2, #0]
 800aaa0:	b933      	cbnz	r3, 800aab0 <_free_r+0x30>
 800aaa2:	6063      	str	r3, [r4, #4]
 800aaa4:	6014      	str	r4, [r2, #0]
 800aaa6:	b003      	add	sp, #12
 800aaa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aaac:	f000 b8e2 	b.w	800ac74 <__malloc_unlock>
 800aab0:	42a3      	cmp	r3, r4
 800aab2:	d908      	bls.n	800aac6 <_free_r+0x46>
 800aab4:	6825      	ldr	r5, [r4, #0]
 800aab6:	1961      	adds	r1, r4, r5
 800aab8:	428b      	cmp	r3, r1
 800aaba:	bf01      	itttt	eq
 800aabc:	6819      	ldreq	r1, [r3, #0]
 800aabe:	685b      	ldreq	r3, [r3, #4]
 800aac0:	1949      	addeq	r1, r1, r5
 800aac2:	6021      	streq	r1, [r4, #0]
 800aac4:	e7ed      	b.n	800aaa2 <_free_r+0x22>
 800aac6:	461a      	mov	r2, r3
 800aac8:	685b      	ldr	r3, [r3, #4]
 800aaca:	b10b      	cbz	r3, 800aad0 <_free_r+0x50>
 800aacc:	42a3      	cmp	r3, r4
 800aace:	d9fa      	bls.n	800aac6 <_free_r+0x46>
 800aad0:	6811      	ldr	r1, [r2, #0]
 800aad2:	1855      	adds	r5, r2, r1
 800aad4:	42a5      	cmp	r5, r4
 800aad6:	d10b      	bne.n	800aaf0 <_free_r+0x70>
 800aad8:	6824      	ldr	r4, [r4, #0]
 800aada:	4421      	add	r1, r4
 800aadc:	1854      	adds	r4, r2, r1
 800aade:	42a3      	cmp	r3, r4
 800aae0:	6011      	str	r1, [r2, #0]
 800aae2:	d1e0      	bne.n	800aaa6 <_free_r+0x26>
 800aae4:	681c      	ldr	r4, [r3, #0]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	6053      	str	r3, [r2, #4]
 800aaea:	440c      	add	r4, r1
 800aaec:	6014      	str	r4, [r2, #0]
 800aaee:	e7da      	b.n	800aaa6 <_free_r+0x26>
 800aaf0:	d902      	bls.n	800aaf8 <_free_r+0x78>
 800aaf2:	230c      	movs	r3, #12
 800aaf4:	6003      	str	r3, [r0, #0]
 800aaf6:	e7d6      	b.n	800aaa6 <_free_r+0x26>
 800aaf8:	6825      	ldr	r5, [r4, #0]
 800aafa:	1961      	adds	r1, r4, r5
 800aafc:	428b      	cmp	r3, r1
 800aafe:	bf04      	itt	eq
 800ab00:	6819      	ldreq	r1, [r3, #0]
 800ab02:	685b      	ldreq	r3, [r3, #4]
 800ab04:	6063      	str	r3, [r4, #4]
 800ab06:	bf04      	itt	eq
 800ab08:	1949      	addeq	r1, r1, r5
 800ab0a:	6021      	streq	r1, [r4, #0]
 800ab0c:	6054      	str	r4, [r2, #4]
 800ab0e:	e7ca      	b.n	800aaa6 <_free_r+0x26>
 800ab10:	b003      	add	sp, #12
 800ab12:	bd30      	pop	{r4, r5, pc}
 800ab14:	20001ce4 	.word	0x20001ce4

0800ab18 <malloc>:
 800ab18:	4b02      	ldr	r3, [pc, #8]	; (800ab24 <malloc+0xc>)
 800ab1a:	4601      	mov	r1, r0
 800ab1c:	6818      	ldr	r0, [r3, #0]
 800ab1e:	f000 b823 	b.w	800ab68 <_malloc_r>
 800ab22:	bf00      	nop
 800ab24:	20000068 	.word	0x20000068

0800ab28 <sbrk_aligned>:
 800ab28:	b570      	push	{r4, r5, r6, lr}
 800ab2a:	4e0e      	ldr	r6, [pc, #56]	; (800ab64 <sbrk_aligned+0x3c>)
 800ab2c:	460c      	mov	r4, r1
 800ab2e:	6831      	ldr	r1, [r6, #0]
 800ab30:	4605      	mov	r5, r0
 800ab32:	b911      	cbnz	r1, 800ab3a <sbrk_aligned+0x12>
 800ab34:	f000 fc66 	bl	800b404 <_sbrk_r>
 800ab38:	6030      	str	r0, [r6, #0]
 800ab3a:	4621      	mov	r1, r4
 800ab3c:	4628      	mov	r0, r5
 800ab3e:	f000 fc61 	bl	800b404 <_sbrk_r>
 800ab42:	1c43      	adds	r3, r0, #1
 800ab44:	d00a      	beq.n	800ab5c <sbrk_aligned+0x34>
 800ab46:	1cc4      	adds	r4, r0, #3
 800ab48:	f024 0403 	bic.w	r4, r4, #3
 800ab4c:	42a0      	cmp	r0, r4
 800ab4e:	d007      	beq.n	800ab60 <sbrk_aligned+0x38>
 800ab50:	1a21      	subs	r1, r4, r0
 800ab52:	4628      	mov	r0, r5
 800ab54:	f000 fc56 	bl	800b404 <_sbrk_r>
 800ab58:	3001      	adds	r0, #1
 800ab5a:	d101      	bne.n	800ab60 <sbrk_aligned+0x38>
 800ab5c:	f04f 34ff 	mov.w	r4, #4294967295
 800ab60:	4620      	mov	r0, r4
 800ab62:	bd70      	pop	{r4, r5, r6, pc}
 800ab64:	20001ce8 	.word	0x20001ce8

0800ab68 <_malloc_r>:
 800ab68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab6c:	1ccd      	adds	r5, r1, #3
 800ab6e:	f025 0503 	bic.w	r5, r5, #3
 800ab72:	3508      	adds	r5, #8
 800ab74:	2d0c      	cmp	r5, #12
 800ab76:	bf38      	it	cc
 800ab78:	250c      	movcc	r5, #12
 800ab7a:	2d00      	cmp	r5, #0
 800ab7c:	4607      	mov	r7, r0
 800ab7e:	db01      	blt.n	800ab84 <_malloc_r+0x1c>
 800ab80:	42a9      	cmp	r1, r5
 800ab82:	d905      	bls.n	800ab90 <_malloc_r+0x28>
 800ab84:	230c      	movs	r3, #12
 800ab86:	603b      	str	r3, [r7, #0]
 800ab88:	2600      	movs	r6, #0
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ac64 <_malloc_r+0xfc>
 800ab94:	f000 f868 	bl	800ac68 <__malloc_lock>
 800ab98:	f8d8 3000 	ldr.w	r3, [r8]
 800ab9c:	461c      	mov	r4, r3
 800ab9e:	bb5c      	cbnz	r4, 800abf8 <_malloc_r+0x90>
 800aba0:	4629      	mov	r1, r5
 800aba2:	4638      	mov	r0, r7
 800aba4:	f7ff ffc0 	bl	800ab28 <sbrk_aligned>
 800aba8:	1c43      	adds	r3, r0, #1
 800abaa:	4604      	mov	r4, r0
 800abac:	d155      	bne.n	800ac5a <_malloc_r+0xf2>
 800abae:	f8d8 4000 	ldr.w	r4, [r8]
 800abb2:	4626      	mov	r6, r4
 800abb4:	2e00      	cmp	r6, #0
 800abb6:	d145      	bne.n	800ac44 <_malloc_r+0xdc>
 800abb8:	2c00      	cmp	r4, #0
 800abba:	d048      	beq.n	800ac4e <_malloc_r+0xe6>
 800abbc:	6823      	ldr	r3, [r4, #0]
 800abbe:	4631      	mov	r1, r6
 800abc0:	4638      	mov	r0, r7
 800abc2:	eb04 0903 	add.w	r9, r4, r3
 800abc6:	f000 fc1d 	bl	800b404 <_sbrk_r>
 800abca:	4581      	cmp	r9, r0
 800abcc:	d13f      	bne.n	800ac4e <_malloc_r+0xe6>
 800abce:	6821      	ldr	r1, [r4, #0]
 800abd0:	1a6d      	subs	r5, r5, r1
 800abd2:	4629      	mov	r1, r5
 800abd4:	4638      	mov	r0, r7
 800abd6:	f7ff ffa7 	bl	800ab28 <sbrk_aligned>
 800abda:	3001      	adds	r0, #1
 800abdc:	d037      	beq.n	800ac4e <_malloc_r+0xe6>
 800abde:	6823      	ldr	r3, [r4, #0]
 800abe0:	442b      	add	r3, r5
 800abe2:	6023      	str	r3, [r4, #0]
 800abe4:	f8d8 3000 	ldr.w	r3, [r8]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d038      	beq.n	800ac5e <_malloc_r+0xf6>
 800abec:	685a      	ldr	r2, [r3, #4]
 800abee:	42a2      	cmp	r2, r4
 800abf0:	d12b      	bne.n	800ac4a <_malloc_r+0xe2>
 800abf2:	2200      	movs	r2, #0
 800abf4:	605a      	str	r2, [r3, #4]
 800abf6:	e00f      	b.n	800ac18 <_malloc_r+0xb0>
 800abf8:	6822      	ldr	r2, [r4, #0]
 800abfa:	1b52      	subs	r2, r2, r5
 800abfc:	d41f      	bmi.n	800ac3e <_malloc_r+0xd6>
 800abfe:	2a0b      	cmp	r2, #11
 800ac00:	d917      	bls.n	800ac32 <_malloc_r+0xca>
 800ac02:	1961      	adds	r1, r4, r5
 800ac04:	42a3      	cmp	r3, r4
 800ac06:	6025      	str	r5, [r4, #0]
 800ac08:	bf18      	it	ne
 800ac0a:	6059      	strne	r1, [r3, #4]
 800ac0c:	6863      	ldr	r3, [r4, #4]
 800ac0e:	bf08      	it	eq
 800ac10:	f8c8 1000 	streq.w	r1, [r8]
 800ac14:	5162      	str	r2, [r4, r5]
 800ac16:	604b      	str	r3, [r1, #4]
 800ac18:	4638      	mov	r0, r7
 800ac1a:	f104 060b 	add.w	r6, r4, #11
 800ac1e:	f000 f829 	bl	800ac74 <__malloc_unlock>
 800ac22:	f026 0607 	bic.w	r6, r6, #7
 800ac26:	1d23      	adds	r3, r4, #4
 800ac28:	1af2      	subs	r2, r6, r3
 800ac2a:	d0ae      	beq.n	800ab8a <_malloc_r+0x22>
 800ac2c:	1b9b      	subs	r3, r3, r6
 800ac2e:	50a3      	str	r3, [r4, r2]
 800ac30:	e7ab      	b.n	800ab8a <_malloc_r+0x22>
 800ac32:	42a3      	cmp	r3, r4
 800ac34:	6862      	ldr	r2, [r4, #4]
 800ac36:	d1dd      	bne.n	800abf4 <_malloc_r+0x8c>
 800ac38:	f8c8 2000 	str.w	r2, [r8]
 800ac3c:	e7ec      	b.n	800ac18 <_malloc_r+0xb0>
 800ac3e:	4623      	mov	r3, r4
 800ac40:	6864      	ldr	r4, [r4, #4]
 800ac42:	e7ac      	b.n	800ab9e <_malloc_r+0x36>
 800ac44:	4634      	mov	r4, r6
 800ac46:	6876      	ldr	r6, [r6, #4]
 800ac48:	e7b4      	b.n	800abb4 <_malloc_r+0x4c>
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	e7cc      	b.n	800abe8 <_malloc_r+0x80>
 800ac4e:	230c      	movs	r3, #12
 800ac50:	603b      	str	r3, [r7, #0]
 800ac52:	4638      	mov	r0, r7
 800ac54:	f000 f80e 	bl	800ac74 <__malloc_unlock>
 800ac58:	e797      	b.n	800ab8a <_malloc_r+0x22>
 800ac5a:	6025      	str	r5, [r4, #0]
 800ac5c:	e7dc      	b.n	800ac18 <_malloc_r+0xb0>
 800ac5e:	605b      	str	r3, [r3, #4]
 800ac60:	deff      	udf	#255	; 0xff
 800ac62:	bf00      	nop
 800ac64:	20001ce4 	.word	0x20001ce4

0800ac68 <__malloc_lock>:
 800ac68:	4801      	ldr	r0, [pc, #4]	; (800ac70 <__malloc_lock+0x8>)
 800ac6a:	f7ff beda 	b.w	800aa22 <__retarget_lock_acquire_recursive>
 800ac6e:	bf00      	nop
 800ac70:	20001ce0 	.word	0x20001ce0

0800ac74 <__malloc_unlock>:
 800ac74:	4801      	ldr	r0, [pc, #4]	; (800ac7c <__malloc_unlock+0x8>)
 800ac76:	f7ff bed5 	b.w	800aa24 <__retarget_lock_release_recursive>
 800ac7a:	bf00      	nop
 800ac7c:	20001ce0 	.word	0x20001ce0

0800ac80 <__ssputs_r>:
 800ac80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac84:	688e      	ldr	r6, [r1, #8]
 800ac86:	461f      	mov	r7, r3
 800ac88:	42be      	cmp	r6, r7
 800ac8a:	680b      	ldr	r3, [r1, #0]
 800ac8c:	4682      	mov	sl, r0
 800ac8e:	460c      	mov	r4, r1
 800ac90:	4690      	mov	r8, r2
 800ac92:	d82c      	bhi.n	800acee <__ssputs_r+0x6e>
 800ac94:	898a      	ldrh	r2, [r1, #12]
 800ac96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac9a:	d026      	beq.n	800acea <__ssputs_r+0x6a>
 800ac9c:	6965      	ldr	r5, [r4, #20]
 800ac9e:	6909      	ldr	r1, [r1, #16]
 800aca0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aca4:	eba3 0901 	sub.w	r9, r3, r1
 800aca8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acac:	1c7b      	adds	r3, r7, #1
 800acae:	444b      	add	r3, r9
 800acb0:	106d      	asrs	r5, r5, #1
 800acb2:	429d      	cmp	r5, r3
 800acb4:	bf38      	it	cc
 800acb6:	461d      	movcc	r5, r3
 800acb8:	0553      	lsls	r3, r2, #21
 800acba:	d527      	bpl.n	800ad0c <__ssputs_r+0x8c>
 800acbc:	4629      	mov	r1, r5
 800acbe:	f7ff ff53 	bl	800ab68 <_malloc_r>
 800acc2:	4606      	mov	r6, r0
 800acc4:	b360      	cbz	r0, 800ad20 <__ssputs_r+0xa0>
 800acc6:	6921      	ldr	r1, [r4, #16]
 800acc8:	464a      	mov	r2, r9
 800acca:	f7ff feac 	bl	800aa26 <memcpy>
 800acce:	89a3      	ldrh	r3, [r4, #12]
 800acd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acd8:	81a3      	strh	r3, [r4, #12]
 800acda:	6126      	str	r6, [r4, #16]
 800acdc:	6165      	str	r5, [r4, #20]
 800acde:	444e      	add	r6, r9
 800ace0:	eba5 0509 	sub.w	r5, r5, r9
 800ace4:	6026      	str	r6, [r4, #0]
 800ace6:	60a5      	str	r5, [r4, #8]
 800ace8:	463e      	mov	r6, r7
 800acea:	42be      	cmp	r6, r7
 800acec:	d900      	bls.n	800acf0 <__ssputs_r+0x70>
 800acee:	463e      	mov	r6, r7
 800acf0:	6820      	ldr	r0, [r4, #0]
 800acf2:	4632      	mov	r2, r6
 800acf4:	4641      	mov	r1, r8
 800acf6:	f000 fb6b 	bl	800b3d0 <memmove>
 800acfa:	68a3      	ldr	r3, [r4, #8]
 800acfc:	1b9b      	subs	r3, r3, r6
 800acfe:	60a3      	str	r3, [r4, #8]
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	4433      	add	r3, r6
 800ad04:	6023      	str	r3, [r4, #0]
 800ad06:	2000      	movs	r0, #0
 800ad08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad0c:	462a      	mov	r2, r5
 800ad0e:	f000 fb90 	bl	800b432 <_realloc_r>
 800ad12:	4606      	mov	r6, r0
 800ad14:	2800      	cmp	r0, #0
 800ad16:	d1e0      	bne.n	800acda <__ssputs_r+0x5a>
 800ad18:	6921      	ldr	r1, [r4, #16]
 800ad1a:	4650      	mov	r0, sl
 800ad1c:	f7ff feb0 	bl	800aa80 <_free_r>
 800ad20:	230c      	movs	r3, #12
 800ad22:	f8ca 3000 	str.w	r3, [sl]
 800ad26:	89a3      	ldrh	r3, [r4, #12]
 800ad28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad2c:	81a3      	strh	r3, [r4, #12]
 800ad2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad32:	e7e9      	b.n	800ad08 <__ssputs_r+0x88>

0800ad34 <_svfiprintf_r>:
 800ad34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad38:	4698      	mov	r8, r3
 800ad3a:	898b      	ldrh	r3, [r1, #12]
 800ad3c:	061b      	lsls	r3, r3, #24
 800ad3e:	b09d      	sub	sp, #116	; 0x74
 800ad40:	4607      	mov	r7, r0
 800ad42:	460d      	mov	r5, r1
 800ad44:	4614      	mov	r4, r2
 800ad46:	d50e      	bpl.n	800ad66 <_svfiprintf_r+0x32>
 800ad48:	690b      	ldr	r3, [r1, #16]
 800ad4a:	b963      	cbnz	r3, 800ad66 <_svfiprintf_r+0x32>
 800ad4c:	2140      	movs	r1, #64	; 0x40
 800ad4e:	f7ff ff0b 	bl	800ab68 <_malloc_r>
 800ad52:	6028      	str	r0, [r5, #0]
 800ad54:	6128      	str	r0, [r5, #16]
 800ad56:	b920      	cbnz	r0, 800ad62 <_svfiprintf_r+0x2e>
 800ad58:	230c      	movs	r3, #12
 800ad5a:	603b      	str	r3, [r7, #0]
 800ad5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad60:	e0d0      	b.n	800af04 <_svfiprintf_r+0x1d0>
 800ad62:	2340      	movs	r3, #64	; 0x40
 800ad64:	616b      	str	r3, [r5, #20]
 800ad66:	2300      	movs	r3, #0
 800ad68:	9309      	str	r3, [sp, #36]	; 0x24
 800ad6a:	2320      	movs	r3, #32
 800ad6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad70:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad74:	2330      	movs	r3, #48	; 0x30
 800ad76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800af1c <_svfiprintf_r+0x1e8>
 800ad7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad7e:	f04f 0901 	mov.w	r9, #1
 800ad82:	4623      	mov	r3, r4
 800ad84:	469a      	mov	sl, r3
 800ad86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad8a:	b10a      	cbz	r2, 800ad90 <_svfiprintf_r+0x5c>
 800ad8c:	2a25      	cmp	r2, #37	; 0x25
 800ad8e:	d1f9      	bne.n	800ad84 <_svfiprintf_r+0x50>
 800ad90:	ebba 0b04 	subs.w	fp, sl, r4
 800ad94:	d00b      	beq.n	800adae <_svfiprintf_r+0x7a>
 800ad96:	465b      	mov	r3, fp
 800ad98:	4622      	mov	r2, r4
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	4638      	mov	r0, r7
 800ad9e:	f7ff ff6f 	bl	800ac80 <__ssputs_r>
 800ada2:	3001      	adds	r0, #1
 800ada4:	f000 80a9 	beq.w	800aefa <_svfiprintf_r+0x1c6>
 800ada8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adaa:	445a      	add	r2, fp
 800adac:	9209      	str	r2, [sp, #36]	; 0x24
 800adae:	f89a 3000 	ldrb.w	r3, [sl]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f000 80a1 	beq.w	800aefa <_svfiprintf_r+0x1c6>
 800adb8:	2300      	movs	r3, #0
 800adba:	f04f 32ff 	mov.w	r2, #4294967295
 800adbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adc2:	f10a 0a01 	add.w	sl, sl, #1
 800adc6:	9304      	str	r3, [sp, #16]
 800adc8:	9307      	str	r3, [sp, #28]
 800adca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adce:	931a      	str	r3, [sp, #104]	; 0x68
 800add0:	4654      	mov	r4, sl
 800add2:	2205      	movs	r2, #5
 800add4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800add8:	4850      	ldr	r0, [pc, #320]	; (800af1c <_svfiprintf_r+0x1e8>)
 800adda:	f7f5 fa11 	bl	8000200 <memchr>
 800adde:	9a04      	ldr	r2, [sp, #16]
 800ade0:	b9d8      	cbnz	r0, 800ae1a <_svfiprintf_r+0xe6>
 800ade2:	06d0      	lsls	r0, r2, #27
 800ade4:	bf44      	itt	mi
 800ade6:	2320      	movmi	r3, #32
 800ade8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adec:	0711      	lsls	r1, r2, #28
 800adee:	bf44      	itt	mi
 800adf0:	232b      	movmi	r3, #43	; 0x2b
 800adf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adf6:	f89a 3000 	ldrb.w	r3, [sl]
 800adfa:	2b2a      	cmp	r3, #42	; 0x2a
 800adfc:	d015      	beq.n	800ae2a <_svfiprintf_r+0xf6>
 800adfe:	9a07      	ldr	r2, [sp, #28]
 800ae00:	4654      	mov	r4, sl
 800ae02:	2000      	movs	r0, #0
 800ae04:	f04f 0c0a 	mov.w	ip, #10
 800ae08:	4621      	mov	r1, r4
 800ae0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae0e:	3b30      	subs	r3, #48	; 0x30
 800ae10:	2b09      	cmp	r3, #9
 800ae12:	d94d      	bls.n	800aeb0 <_svfiprintf_r+0x17c>
 800ae14:	b1b0      	cbz	r0, 800ae44 <_svfiprintf_r+0x110>
 800ae16:	9207      	str	r2, [sp, #28]
 800ae18:	e014      	b.n	800ae44 <_svfiprintf_r+0x110>
 800ae1a:	eba0 0308 	sub.w	r3, r0, r8
 800ae1e:	fa09 f303 	lsl.w	r3, r9, r3
 800ae22:	4313      	orrs	r3, r2
 800ae24:	9304      	str	r3, [sp, #16]
 800ae26:	46a2      	mov	sl, r4
 800ae28:	e7d2      	b.n	800add0 <_svfiprintf_r+0x9c>
 800ae2a:	9b03      	ldr	r3, [sp, #12]
 800ae2c:	1d19      	adds	r1, r3, #4
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	9103      	str	r1, [sp, #12]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	bfbb      	ittet	lt
 800ae36:	425b      	neglt	r3, r3
 800ae38:	f042 0202 	orrlt.w	r2, r2, #2
 800ae3c:	9307      	strge	r3, [sp, #28]
 800ae3e:	9307      	strlt	r3, [sp, #28]
 800ae40:	bfb8      	it	lt
 800ae42:	9204      	strlt	r2, [sp, #16]
 800ae44:	7823      	ldrb	r3, [r4, #0]
 800ae46:	2b2e      	cmp	r3, #46	; 0x2e
 800ae48:	d10c      	bne.n	800ae64 <_svfiprintf_r+0x130>
 800ae4a:	7863      	ldrb	r3, [r4, #1]
 800ae4c:	2b2a      	cmp	r3, #42	; 0x2a
 800ae4e:	d134      	bne.n	800aeba <_svfiprintf_r+0x186>
 800ae50:	9b03      	ldr	r3, [sp, #12]
 800ae52:	1d1a      	adds	r2, r3, #4
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	9203      	str	r2, [sp, #12]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	bfb8      	it	lt
 800ae5c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae60:	3402      	adds	r4, #2
 800ae62:	9305      	str	r3, [sp, #20]
 800ae64:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800af2c <_svfiprintf_r+0x1f8>
 800ae68:	7821      	ldrb	r1, [r4, #0]
 800ae6a:	2203      	movs	r2, #3
 800ae6c:	4650      	mov	r0, sl
 800ae6e:	f7f5 f9c7 	bl	8000200 <memchr>
 800ae72:	b138      	cbz	r0, 800ae84 <_svfiprintf_r+0x150>
 800ae74:	9b04      	ldr	r3, [sp, #16]
 800ae76:	eba0 000a 	sub.w	r0, r0, sl
 800ae7a:	2240      	movs	r2, #64	; 0x40
 800ae7c:	4082      	lsls	r2, r0
 800ae7e:	4313      	orrs	r3, r2
 800ae80:	3401      	adds	r4, #1
 800ae82:	9304      	str	r3, [sp, #16]
 800ae84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae88:	4825      	ldr	r0, [pc, #148]	; (800af20 <_svfiprintf_r+0x1ec>)
 800ae8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae8e:	2206      	movs	r2, #6
 800ae90:	f7f5 f9b6 	bl	8000200 <memchr>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	d038      	beq.n	800af0a <_svfiprintf_r+0x1d6>
 800ae98:	4b22      	ldr	r3, [pc, #136]	; (800af24 <_svfiprintf_r+0x1f0>)
 800ae9a:	bb1b      	cbnz	r3, 800aee4 <_svfiprintf_r+0x1b0>
 800ae9c:	9b03      	ldr	r3, [sp, #12]
 800ae9e:	3307      	adds	r3, #7
 800aea0:	f023 0307 	bic.w	r3, r3, #7
 800aea4:	3308      	adds	r3, #8
 800aea6:	9303      	str	r3, [sp, #12]
 800aea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeaa:	4433      	add	r3, r6
 800aeac:	9309      	str	r3, [sp, #36]	; 0x24
 800aeae:	e768      	b.n	800ad82 <_svfiprintf_r+0x4e>
 800aeb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aeb4:	460c      	mov	r4, r1
 800aeb6:	2001      	movs	r0, #1
 800aeb8:	e7a6      	b.n	800ae08 <_svfiprintf_r+0xd4>
 800aeba:	2300      	movs	r3, #0
 800aebc:	3401      	adds	r4, #1
 800aebe:	9305      	str	r3, [sp, #20]
 800aec0:	4619      	mov	r1, r3
 800aec2:	f04f 0c0a 	mov.w	ip, #10
 800aec6:	4620      	mov	r0, r4
 800aec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aecc:	3a30      	subs	r2, #48	; 0x30
 800aece:	2a09      	cmp	r2, #9
 800aed0:	d903      	bls.n	800aeda <_svfiprintf_r+0x1a6>
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d0c6      	beq.n	800ae64 <_svfiprintf_r+0x130>
 800aed6:	9105      	str	r1, [sp, #20]
 800aed8:	e7c4      	b.n	800ae64 <_svfiprintf_r+0x130>
 800aeda:	fb0c 2101 	mla	r1, ip, r1, r2
 800aede:	4604      	mov	r4, r0
 800aee0:	2301      	movs	r3, #1
 800aee2:	e7f0      	b.n	800aec6 <_svfiprintf_r+0x192>
 800aee4:	ab03      	add	r3, sp, #12
 800aee6:	9300      	str	r3, [sp, #0]
 800aee8:	462a      	mov	r2, r5
 800aeea:	4b0f      	ldr	r3, [pc, #60]	; (800af28 <_svfiprintf_r+0x1f4>)
 800aeec:	a904      	add	r1, sp, #16
 800aeee:	4638      	mov	r0, r7
 800aef0:	f3af 8000 	nop.w
 800aef4:	1c42      	adds	r2, r0, #1
 800aef6:	4606      	mov	r6, r0
 800aef8:	d1d6      	bne.n	800aea8 <_svfiprintf_r+0x174>
 800aefa:	89ab      	ldrh	r3, [r5, #12]
 800aefc:	065b      	lsls	r3, r3, #25
 800aefe:	f53f af2d 	bmi.w	800ad5c <_svfiprintf_r+0x28>
 800af02:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af04:	b01d      	add	sp, #116	; 0x74
 800af06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af0a:	ab03      	add	r3, sp, #12
 800af0c:	9300      	str	r3, [sp, #0]
 800af0e:	462a      	mov	r2, r5
 800af10:	4b05      	ldr	r3, [pc, #20]	; (800af28 <_svfiprintf_r+0x1f4>)
 800af12:	a904      	add	r1, sp, #16
 800af14:	4638      	mov	r0, r7
 800af16:	f000 f879 	bl	800b00c <_printf_i>
 800af1a:	e7eb      	b.n	800aef4 <_svfiprintf_r+0x1c0>
 800af1c:	0800bcd6 	.word	0x0800bcd6
 800af20:	0800bce0 	.word	0x0800bce0
 800af24:	00000000 	.word	0x00000000
 800af28:	0800ac81 	.word	0x0800ac81
 800af2c:	0800bcdc 	.word	0x0800bcdc

0800af30 <_printf_common>:
 800af30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af34:	4616      	mov	r6, r2
 800af36:	4699      	mov	r9, r3
 800af38:	688a      	ldr	r2, [r1, #8]
 800af3a:	690b      	ldr	r3, [r1, #16]
 800af3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af40:	4293      	cmp	r3, r2
 800af42:	bfb8      	it	lt
 800af44:	4613      	movlt	r3, r2
 800af46:	6033      	str	r3, [r6, #0]
 800af48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af4c:	4607      	mov	r7, r0
 800af4e:	460c      	mov	r4, r1
 800af50:	b10a      	cbz	r2, 800af56 <_printf_common+0x26>
 800af52:	3301      	adds	r3, #1
 800af54:	6033      	str	r3, [r6, #0]
 800af56:	6823      	ldr	r3, [r4, #0]
 800af58:	0699      	lsls	r1, r3, #26
 800af5a:	bf42      	ittt	mi
 800af5c:	6833      	ldrmi	r3, [r6, #0]
 800af5e:	3302      	addmi	r3, #2
 800af60:	6033      	strmi	r3, [r6, #0]
 800af62:	6825      	ldr	r5, [r4, #0]
 800af64:	f015 0506 	ands.w	r5, r5, #6
 800af68:	d106      	bne.n	800af78 <_printf_common+0x48>
 800af6a:	f104 0a19 	add.w	sl, r4, #25
 800af6e:	68e3      	ldr	r3, [r4, #12]
 800af70:	6832      	ldr	r2, [r6, #0]
 800af72:	1a9b      	subs	r3, r3, r2
 800af74:	42ab      	cmp	r3, r5
 800af76:	dc26      	bgt.n	800afc6 <_printf_common+0x96>
 800af78:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af7c:	1e13      	subs	r3, r2, #0
 800af7e:	6822      	ldr	r2, [r4, #0]
 800af80:	bf18      	it	ne
 800af82:	2301      	movne	r3, #1
 800af84:	0692      	lsls	r2, r2, #26
 800af86:	d42b      	bmi.n	800afe0 <_printf_common+0xb0>
 800af88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800af8c:	4649      	mov	r1, r9
 800af8e:	4638      	mov	r0, r7
 800af90:	47c0      	blx	r8
 800af92:	3001      	adds	r0, #1
 800af94:	d01e      	beq.n	800afd4 <_printf_common+0xa4>
 800af96:	6823      	ldr	r3, [r4, #0]
 800af98:	6922      	ldr	r2, [r4, #16]
 800af9a:	f003 0306 	and.w	r3, r3, #6
 800af9e:	2b04      	cmp	r3, #4
 800afa0:	bf02      	ittt	eq
 800afa2:	68e5      	ldreq	r5, [r4, #12]
 800afa4:	6833      	ldreq	r3, [r6, #0]
 800afa6:	1aed      	subeq	r5, r5, r3
 800afa8:	68a3      	ldr	r3, [r4, #8]
 800afaa:	bf0c      	ite	eq
 800afac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afb0:	2500      	movne	r5, #0
 800afb2:	4293      	cmp	r3, r2
 800afb4:	bfc4      	itt	gt
 800afb6:	1a9b      	subgt	r3, r3, r2
 800afb8:	18ed      	addgt	r5, r5, r3
 800afba:	2600      	movs	r6, #0
 800afbc:	341a      	adds	r4, #26
 800afbe:	42b5      	cmp	r5, r6
 800afc0:	d11a      	bne.n	800aff8 <_printf_common+0xc8>
 800afc2:	2000      	movs	r0, #0
 800afc4:	e008      	b.n	800afd8 <_printf_common+0xa8>
 800afc6:	2301      	movs	r3, #1
 800afc8:	4652      	mov	r2, sl
 800afca:	4649      	mov	r1, r9
 800afcc:	4638      	mov	r0, r7
 800afce:	47c0      	blx	r8
 800afd0:	3001      	adds	r0, #1
 800afd2:	d103      	bne.n	800afdc <_printf_common+0xac>
 800afd4:	f04f 30ff 	mov.w	r0, #4294967295
 800afd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afdc:	3501      	adds	r5, #1
 800afde:	e7c6      	b.n	800af6e <_printf_common+0x3e>
 800afe0:	18e1      	adds	r1, r4, r3
 800afe2:	1c5a      	adds	r2, r3, #1
 800afe4:	2030      	movs	r0, #48	; 0x30
 800afe6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800afea:	4422      	add	r2, r4
 800afec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aff0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aff4:	3302      	adds	r3, #2
 800aff6:	e7c7      	b.n	800af88 <_printf_common+0x58>
 800aff8:	2301      	movs	r3, #1
 800affa:	4622      	mov	r2, r4
 800affc:	4649      	mov	r1, r9
 800affe:	4638      	mov	r0, r7
 800b000:	47c0      	blx	r8
 800b002:	3001      	adds	r0, #1
 800b004:	d0e6      	beq.n	800afd4 <_printf_common+0xa4>
 800b006:	3601      	adds	r6, #1
 800b008:	e7d9      	b.n	800afbe <_printf_common+0x8e>
	...

0800b00c <_printf_i>:
 800b00c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b010:	7e0f      	ldrb	r7, [r1, #24]
 800b012:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b014:	2f78      	cmp	r7, #120	; 0x78
 800b016:	4691      	mov	r9, r2
 800b018:	4680      	mov	r8, r0
 800b01a:	460c      	mov	r4, r1
 800b01c:	469a      	mov	sl, r3
 800b01e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b022:	d807      	bhi.n	800b034 <_printf_i+0x28>
 800b024:	2f62      	cmp	r7, #98	; 0x62
 800b026:	d80a      	bhi.n	800b03e <_printf_i+0x32>
 800b028:	2f00      	cmp	r7, #0
 800b02a:	f000 80d4 	beq.w	800b1d6 <_printf_i+0x1ca>
 800b02e:	2f58      	cmp	r7, #88	; 0x58
 800b030:	f000 80c0 	beq.w	800b1b4 <_printf_i+0x1a8>
 800b034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b038:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b03c:	e03a      	b.n	800b0b4 <_printf_i+0xa8>
 800b03e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b042:	2b15      	cmp	r3, #21
 800b044:	d8f6      	bhi.n	800b034 <_printf_i+0x28>
 800b046:	a101      	add	r1, pc, #4	; (adr r1, 800b04c <_printf_i+0x40>)
 800b048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b04c:	0800b0a5 	.word	0x0800b0a5
 800b050:	0800b0b9 	.word	0x0800b0b9
 800b054:	0800b035 	.word	0x0800b035
 800b058:	0800b035 	.word	0x0800b035
 800b05c:	0800b035 	.word	0x0800b035
 800b060:	0800b035 	.word	0x0800b035
 800b064:	0800b0b9 	.word	0x0800b0b9
 800b068:	0800b035 	.word	0x0800b035
 800b06c:	0800b035 	.word	0x0800b035
 800b070:	0800b035 	.word	0x0800b035
 800b074:	0800b035 	.word	0x0800b035
 800b078:	0800b1bd 	.word	0x0800b1bd
 800b07c:	0800b0e5 	.word	0x0800b0e5
 800b080:	0800b177 	.word	0x0800b177
 800b084:	0800b035 	.word	0x0800b035
 800b088:	0800b035 	.word	0x0800b035
 800b08c:	0800b1df 	.word	0x0800b1df
 800b090:	0800b035 	.word	0x0800b035
 800b094:	0800b0e5 	.word	0x0800b0e5
 800b098:	0800b035 	.word	0x0800b035
 800b09c:	0800b035 	.word	0x0800b035
 800b0a0:	0800b17f 	.word	0x0800b17f
 800b0a4:	682b      	ldr	r3, [r5, #0]
 800b0a6:	1d1a      	adds	r2, r3, #4
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	602a      	str	r2, [r5, #0]
 800b0ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	e09f      	b.n	800b1f8 <_printf_i+0x1ec>
 800b0b8:	6820      	ldr	r0, [r4, #0]
 800b0ba:	682b      	ldr	r3, [r5, #0]
 800b0bc:	0607      	lsls	r7, r0, #24
 800b0be:	f103 0104 	add.w	r1, r3, #4
 800b0c2:	6029      	str	r1, [r5, #0]
 800b0c4:	d501      	bpl.n	800b0ca <_printf_i+0xbe>
 800b0c6:	681e      	ldr	r6, [r3, #0]
 800b0c8:	e003      	b.n	800b0d2 <_printf_i+0xc6>
 800b0ca:	0646      	lsls	r6, r0, #25
 800b0cc:	d5fb      	bpl.n	800b0c6 <_printf_i+0xba>
 800b0ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b0d2:	2e00      	cmp	r6, #0
 800b0d4:	da03      	bge.n	800b0de <_printf_i+0xd2>
 800b0d6:	232d      	movs	r3, #45	; 0x2d
 800b0d8:	4276      	negs	r6, r6
 800b0da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0de:	485a      	ldr	r0, [pc, #360]	; (800b248 <_printf_i+0x23c>)
 800b0e0:	230a      	movs	r3, #10
 800b0e2:	e012      	b.n	800b10a <_printf_i+0xfe>
 800b0e4:	682b      	ldr	r3, [r5, #0]
 800b0e6:	6820      	ldr	r0, [r4, #0]
 800b0e8:	1d19      	adds	r1, r3, #4
 800b0ea:	6029      	str	r1, [r5, #0]
 800b0ec:	0605      	lsls	r5, r0, #24
 800b0ee:	d501      	bpl.n	800b0f4 <_printf_i+0xe8>
 800b0f0:	681e      	ldr	r6, [r3, #0]
 800b0f2:	e002      	b.n	800b0fa <_printf_i+0xee>
 800b0f4:	0641      	lsls	r1, r0, #25
 800b0f6:	d5fb      	bpl.n	800b0f0 <_printf_i+0xe4>
 800b0f8:	881e      	ldrh	r6, [r3, #0]
 800b0fa:	4853      	ldr	r0, [pc, #332]	; (800b248 <_printf_i+0x23c>)
 800b0fc:	2f6f      	cmp	r7, #111	; 0x6f
 800b0fe:	bf0c      	ite	eq
 800b100:	2308      	moveq	r3, #8
 800b102:	230a      	movne	r3, #10
 800b104:	2100      	movs	r1, #0
 800b106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b10a:	6865      	ldr	r5, [r4, #4]
 800b10c:	60a5      	str	r5, [r4, #8]
 800b10e:	2d00      	cmp	r5, #0
 800b110:	bfa2      	ittt	ge
 800b112:	6821      	ldrge	r1, [r4, #0]
 800b114:	f021 0104 	bicge.w	r1, r1, #4
 800b118:	6021      	strge	r1, [r4, #0]
 800b11a:	b90e      	cbnz	r6, 800b120 <_printf_i+0x114>
 800b11c:	2d00      	cmp	r5, #0
 800b11e:	d04b      	beq.n	800b1b8 <_printf_i+0x1ac>
 800b120:	4615      	mov	r5, r2
 800b122:	fbb6 f1f3 	udiv	r1, r6, r3
 800b126:	fb03 6711 	mls	r7, r3, r1, r6
 800b12a:	5dc7      	ldrb	r7, [r0, r7]
 800b12c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b130:	4637      	mov	r7, r6
 800b132:	42bb      	cmp	r3, r7
 800b134:	460e      	mov	r6, r1
 800b136:	d9f4      	bls.n	800b122 <_printf_i+0x116>
 800b138:	2b08      	cmp	r3, #8
 800b13a:	d10b      	bne.n	800b154 <_printf_i+0x148>
 800b13c:	6823      	ldr	r3, [r4, #0]
 800b13e:	07de      	lsls	r6, r3, #31
 800b140:	d508      	bpl.n	800b154 <_printf_i+0x148>
 800b142:	6923      	ldr	r3, [r4, #16]
 800b144:	6861      	ldr	r1, [r4, #4]
 800b146:	4299      	cmp	r1, r3
 800b148:	bfde      	ittt	le
 800b14a:	2330      	movle	r3, #48	; 0x30
 800b14c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b150:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b154:	1b52      	subs	r2, r2, r5
 800b156:	6122      	str	r2, [r4, #16]
 800b158:	f8cd a000 	str.w	sl, [sp]
 800b15c:	464b      	mov	r3, r9
 800b15e:	aa03      	add	r2, sp, #12
 800b160:	4621      	mov	r1, r4
 800b162:	4640      	mov	r0, r8
 800b164:	f7ff fee4 	bl	800af30 <_printf_common>
 800b168:	3001      	adds	r0, #1
 800b16a:	d14a      	bne.n	800b202 <_printf_i+0x1f6>
 800b16c:	f04f 30ff 	mov.w	r0, #4294967295
 800b170:	b004      	add	sp, #16
 800b172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b176:	6823      	ldr	r3, [r4, #0]
 800b178:	f043 0320 	orr.w	r3, r3, #32
 800b17c:	6023      	str	r3, [r4, #0]
 800b17e:	4833      	ldr	r0, [pc, #204]	; (800b24c <_printf_i+0x240>)
 800b180:	2778      	movs	r7, #120	; 0x78
 800b182:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b186:	6823      	ldr	r3, [r4, #0]
 800b188:	6829      	ldr	r1, [r5, #0]
 800b18a:	061f      	lsls	r7, r3, #24
 800b18c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b190:	d402      	bmi.n	800b198 <_printf_i+0x18c>
 800b192:	065f      	lsls	r7, r3, #25
 800b194:	bf48      	it	mi
 800b196:	b2b6      	uxthmi	r6, r6
 800b198:	07df      	lsls	r7, r3, #31
 800b19a:	bf48      	it	mi
 800b19c:	f043 0320 	orrmi.w	r3, r3, #32
 800b1a0:	6029      	str	r1, [r5, #0]
 800b1a2:	bf48      	it	mi
 800b1a4:	6023      	strmi	r3, [r4, #0]
 800b1a6:	b91e      	cbnz	r6, 800b1b0 <_printf_i+0x1a4>
 800b1a8:	6823      	ldr	r3, [r4, #0]
 800b1aa:	f023 0320 	bic.w	r3, r3, #32
 800b1ae:	6023      	str	r3, [r4, #0]
 800b1b0:	2310      	movs	r3, #16
 800b1b2:	e7a7      	b.n	800b104 <_printf_i+0xf8>
 800b1b4:	4824      	ldr	r0, [pc, #144]	; (800b248 <_printf_i+0x23c>)
 800b1b6:	e7e4      	b.n	800b182 <_printf_i+0x176>
 800b1b8:	4615      	mov	r5, r2
 800b1ba:	e7bd      	b.n	800b138 <_printf_i+0x12c>
 800b1bc:	682b      	ldr	r3, [r5, #0]
 800b1be:	6826      	ldr	r6, [r4, #0]
 800b1c0:	6961      	ldr	r1, [r4, #20]
 800b1c2:	1d18      	adds	r0, r3, #4
 800b1c4:	6028      	str	r0, [r5, #0]
 800b1c6:	0635      	lsls	r5, r6, #24
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	d501      	bpl.n	800b1d0 <_printf_i+0x1c4>
 800b1cc:	6019      	str	r1, [r3, #0]
 800b1ce:	e002      	b.n	800b1d6 <_printf_i+0x1ca>
 800b1d0:	0670      	lsls	r0, r6, #25
 800b1d2:	d5fb      	bpl.n	800b1cc <_printf_i+0x1c0>
 800b1d4:	8019      	strh	r1, [r3, #0]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	6123      	str	r3, [r4, #16]
 800b1da:	4615      	mov	r5, r2
 800b1dc:	e7bc      	b.n	800b158 <_printf_i+0x14c>
 800b1de:	682b      	ldr	r3, [r5, #0]
 800b1e0:	1d1a      	adds	r2, r3, #4
 800b1e2:	602a      	str	r2, [r5, #0]
 800b1e4:	681d      	ldr	r5, [r3, #0]
 800b1e6:	6862      	ldr	r2, [r4, #4]
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	4628      	mov	r0, r5
 800b1ec:	f7f5 f808 	bl	8000200 <memchr>
 800b1f0:	b108      	cbz	r0, 800b1f6 <_printf_i+0x1ea>
 800b1f2:	1b40      	subs	r0, r0, r5
 800b1f4:	6060      	str	r0, [r4, #4]
 800b1f6:	6863      	ldr	r3, [r4, #4]
 800b1f8:	6123      	str	r3, [r4, #16]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b200:	e7aa      	b.n	800b158 <_printf_i+0x14c>
 800b202:	6923      	ldr	r3, [r4, #16]
 800b204:	462a      	mov	r2, r5
 800b206:	4649      	mov	r1, r9
 800b208:	4640      	mov	r0, r8
 800b20a:	47d0      	blx	sl
 800b20c:	3001      	adds	r0, #1
 800b20e:	d0ad      	beq.n	800b16c <_printf_i+0x160>
 800b210:	6823      	ldr	r3, [r4, #0]
 800b212:	079b      	lsls	r3, r3, #30
 800b214:	d413      	bmi.n	800b23e <_printf_i+0x232>
 800b216:	68e0      	ldr	r0, [r4, #12]
 800b218:	9b03      	ldr	r3, [sp, #12]
 800b21a:	4298      	cmp	r0, r3
 800b21c:	bfb8      	it	lt
 800b21e:	4618      	movlt	r0, r3
 800b220:	e7a6      	b.n	800b170 <_printf_i+0x164>
 800b222:	2301      	movs	r3, #1
 800b224:	4632      	mov	r2, r6
 800b226:	4649      	mov	r1, r9
 800b228:	4640      	mov	r0, r8
 800b22a:	47d0      	blx	sl
 800b22c:	3001      	adds	r0, #1
 800b22e:	d09d      	beq.n	800b16c <_printf_i+0x160>
 800b230:	3501      	adds	r5, #1
 800b232:	68e3      	ldr	r3, [r4, #12]
 800b234:	9903      	ldr	r1, [sp, #12]
 800b236:	1a5b      	subs	r3, r3, r1
 800b238:	42ab      	cmp	r3, r5
 800b23a:	dcf2      	bgt.n	800b222 <_printf_i+0x216>
 800b23c:	e7eb      	b.n	800b216 <_printf_i+0x20a>
 800b23e:	2500      	movs	r5, #0
 800b240:	f104 0619 	add.w	r6, r4, #25
 800b244:	e7f5      	b.n	800b232 <_printf_i+0x226>
 800b246:	bf00      	nop
 800b248:	0800bce7 	.word	0x0800bce7
 800b24c:	0800bcf8 	.word	0x0800bcf8

0800b250 <__sflush_r>:
 800b250:	898a      	ldrh	r2, [r1, #12]
 800b252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b256:	4605      	mov	r5, r0
 800b258:	0710      	lsls	r0, r2, #28
 800b25a:	460c      	mov	r4, r1
 800b25c:	d458      	bmi.n	800b310 <__sflush_r+0xc0>
 800b25e:	684b      	ldr	r3, [r1, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	dc05      	bgt.n	800b270 <__sflush_r+0x20>
 800b264:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b266:	2b00      	cmp	r3, #0
 800b268:	dc02      	bgt.n	800b270 <__sflush_r+0x20>
 800b26a:	2000      	movs	r0, #0
 800b26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b270:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b272:	2e00      	cmp	r6, #0
 800b274:	d0f9      	beq.n	800b26a <__sflush_r+0x1a>
 800b276:	2300      	movs	r3, #0
 800b278:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b27c:	682f      	ldr	r7, [r5, #0]
 800b27e:	6a21      	ldr	r1, [r4, #32]
 800b280:	602b      	str	r3, [r5, #0]
 800b282:	d032      	beq.n	800b2ea <__sflush_r+0x9a>
 800b284:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b286:	89a3      	ldrh	r3, [r4, #12]
 800b288:	075a      	lsls	r2, r3, #29
 800b28a:	d505      	bpl.n	800b298 <__sflush_r+0x48>
 800b28c:	6863      	ldr	r3, [r4, #4]
 800b28e:	1ac0      	subs	r0, r0, r3
 800b290:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b292:	b10b      	cbz	r3, 800b298 <__sflush_r+0x48>
 800b294:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b296:	1ac0      	subs	r0, r0, r3
 800b298:	2300      	movs	r3, #0
 800b29a:	4602      	mov	r2, r0
 800b29c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b29e:	6a21      	ldr	r1, [r4, #32]
 800b2a0:	4628      	mov	r0, r5
 800b2a2:	47b0      	blx	r6
 800b2a4:	1c43      	adds	r3, r0, #1
 800b2a6:	89a3      	ldrh	r3, [r4, #12]
 800b2a8:	d106      	bne.n	800b2b8 <__sflush_r+0x68>
 800b2aa:	6829      	ldr	r1, [r5, #0]
 800b2ac:	291d      	cmp	r1, #29
 800b2ae:	d82b      	bhi.n	800b308 <__sflush_r+0xb8>
 800b2b0:	4a29      	ldr	r2, [pc, #164]	; (800b358 <__sflush_r+0x108>)
 800b2b2:	410a      	asrs	r2, r1
 800b2b4:	07d6      	lsls	r6, r2, #31
 800b2b6:	d427      	bmi.n	800b308 <__sflush_r+0xb8>
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	6062      	str	r2, [r4, #4]
 800b2bc:	04d9      	lsls	r1, r3, #19
 800b2be:	6922      	ldr	r2, [r4, #16]
 800b2c0:	6022      	str	r2, [r4, #0]
 800b2c2:	d504      	bpl.n	800b2ce <__sflush_r+0x7e>
 800b2c4:	1c42      	adds	r2, r0, #1
 800b2c6:	d101      	bne.n	800b2cc <__sflush_r+0x7c>
 800b2c8:	682b      	ldr	r3, [r5, #0]
 800b2ca:	b903      	cbnz	r3, 800b2ce <__sflush_r+0x7e>
 800b2cc:	6560      	str	r0, [r4, #84]	; 0x54
 800b2ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b2d0:	602f      	str	r7, [r5, #0]
 800b2d2:	2900      	cmp	r1, #0
 800b2d4:	d0c9      	beq.n	800b26a <__sflush_r+0x1a>
 800b2d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2da:	4299      	cmp	r1, r3
 800b2dc:	d002      	beq.n	800b2e4 <__sflush_r+0x94>
 800b2de:	4628      	mov	r0, r5
 800b2e0:	f7ff fbce 	bl	800aa80 <_free_r>
 800b2e4:	2000      	movs	r0, #0
 800b2e6:	6360      	str	r0, [r4, #52]	; 0x34
 800b2e8:	e7c0      	b.n	800b26c <__sflush_r+0x1c>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	4628      	mov	r0, r5
 800b2ee:	47b0      	blx	r6
 800b2f0:	1c41      	adds	r1, r0, #1
 800b2f2:	d1c8      	bne.n	800b286 <__sflush_r+0x36>
 800b2f4:	682b      	ldr	r3, [r5, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d0c5      	beq.n	800b286 <__sflush_r+0x36>
 800b2fa:	2b1d      	cmp	r3, #29
 800b2fc:	d001      	beq.n	800b302 <__sflush_r+0xb2>
 800b2fe:	2b16      	cmp	r3, #22
 800b300:	d101      	bne.n	800b306 <__sflush_r+0xb6>
 800b302:	602f      	str	r7, [r5, #0]
 800b304:	e7b1      	b.n	800b26a <__sflush_r+0x1a>
 800b306:	89a3      	ldrh	r3, [r4, #12]
 800b308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b30c:	81a3      	strh	r3, [r4, #12]
 800b30e:	e7ad      	b.n	800b26c <__sflush_r+0x1c>
 800b310:	690f      	ldr	r7, [r1, #16]
 800b312:	2f00      	cmp	r7, #0
 800b314:	d0a9      	beq.n	800b26a <__sflush_r+0x1a>
 800b316:	0793      	lsls	r3, r2, #30
 800b318:	680e      	ldr	r6, [r1, #0]
 800b31a:	bf08      	it	eq
 800b31c:	694b      	ldreq	r3, [r1, #20]
 800b31e:	600f      	str	r7, [r1, #0]
 800b320:	bf18      	it	ne
 800b322:	2300      	movne	r3, #0
 800b324:	eba6 0807 	sub.w	r8, r6, r7
 800b328:	608b      	str	r3, [r1, #8]
 800b32a:	f1b8 0f00 	cmp.w	r8, #0
 800b32e:	dd9c      	ble.n	800b26a <__sflush_r+0x1a>
 800b330:	6a21      	ldr	r1, [r4, #32]
 800b332:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b334:	4643      	mov	r3, r8
 800b336:	463a      	mov	r2, r7
 800b338:	4628      	mov	r0, r5
 800b33a:	47b0      	blx	r6
 800b33c:	2800      	cmp	r0, #0
 800b33e:	dc06      	bgt.n	800b34e <__sflush_r+0xfe>
 800b340:	89a3      	ldrh	r3, [r4, #12]
 800b342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b346:	81a3      	strh	r3, [r4, #12]
 800b348:	f04f 30ff 	mov.w	r0, #4294967295
 800b34c:	e78e      	b.n	800b26c <__sflush_r+0x1c>
 800b34e:	4407      	add	r7, r0
 800b350:	eba8 0800 	sub.w	r8, r8, r0
 800b354:	e7e9      	b.n	800b32a <__sflush_r+0xda>
 800b356:	bf00      	nop
 800b358:	dfbffffe 	.word	0xdfbffffe

0800b35c <_fflush_r>:
 800b35c:	b538      	push	{r3, r4, r5, lr}
 800b35e:	690b      	ldr	r3, [r1, #16]
 800b360:	4605      	mov	r5, r0
 800b362:	460c      	mov	r4, r1
 800b364:	b913      	cbnz	r3, 800b36c <_fflush_r+0x10>
 800b366:	2500      	movs	r5, #0
 800b368:	4628      	mov	r0, r5
 800b36a:	bd38      	pop	{r3, r4, r5, pc}
 800b36c:	b118      	cbz	r0, 800b376 <_fflush_r+0x1a>
 800b36e:	6a03      	ldr	r3, [r0, #32]
 800b370:	b90b      	cbnz	r3, 800b376 <_fflush_r+0x1a>
 800b372:	f7ff f9e7 	bl	800a744 <__sinit>
 800b376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d0f3      	beq.n	800b366 <_fflush_r+0xa>
 800b37e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b380:	07d0      	lsls	r0, r2, #31
 800b382:	d404      	bmi.n	800b38e <_fflush_r+0x32>
 800b384:	0599      	lsls	r1, r3, #22
 800b386:	d402      	bmi.n	800b38e <_fflush_r+0x32>
 800b388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b38a:	f7ff fb4a 	bl	800aa22 <__retarget_lock_acquire_recursive>
 800b38e:	4628      	mov	r0, r5
 800b390:	4621      	mov	r1, r4
 800b392:	f7ff ff5d 	bl	800b250 <__sflush_r>
 800b396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b398:	07da      	lsls	r2, r3, #31
 800b39a:	4605      	mov	r5, r0
 800b39c:	d4e4      	bmi.n	800b368 <_fflush_r+0xc>
 800b39e:	89a3      	ldrh	r3, [r4, #12]
 800b3a0:	059b      	lsls	r3, r3, #22
 800b3a2:	d4e1      	bmi.n	800b368 <_fflush_r+0xc>
 800b3a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3a6:	f7ff fb3d 	bl	800aa24 <__retarget_lock_release_recursive>
 800b3aa:	e7dd      	b.n	800b368 <_fflush_r+0xc>

0800b3ac <fiprintf>:
 800b3ac:	b40e      	push	{r1, r2, r3}
 800b3ae:	b503      	push	{r0, r1, lr}
 800b3b0:	4601      	mov	r1, r0
 800b3b2:	ab03      	add	r3, sp, #12
 800b3b4:	4805      	ldr	r0, [pc, #20]	; (800b3cc <fiprintf+0x20>)
 800b3b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ba:	6800      	ldr	r0, [r0, #0]
 800b3bc:	9301      	str	r3, [sp, #4]
 800b3be:	f000 f891 	bl	800b4e4 <_vfiprintf_r>
 800b3c2:	b002      	add	sp, #8
 800b3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3c8:	b003      	add	sp, #12
 800b3ca:	4770      	bx	lr
 800b3cc:	20000068 	.word	0x20000068

0800b3d0 <memmove>:
 800b3d0:	4288      	cmp	r0, r1
 800b3d2:	b510      	push	{r4, lr}
 800b3d4:	eb01 0402 	add.w	r4, r1, r2
 800b3d8:	d902      	bls.n	800b3e0 <memmove+0x10>
 800b3da:	4284      	cmp	r4, r0
 800b3dc:	4623      	mov	r3, r4
 800b3de:	d807      	bhi.n	800b3f0 <memmove+0x20>
 800b3e0:	1e43      	subs	r3, r0, #1
 800b3e2:	42a1      	cmp	r1, r4
 800b3e4:	d008      	beq.n	800b3f8 <memmove+0x28>
 800b3e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b3ee:	e7f8      	b.n	800b3e2 <memmove+0x12>
 800b3f0:	4402      	add	r2, r0
 800b3f2:	4601      	mov	r1, r0
 800b3f4:	428a      	cmp	r2, r1
 800b3f6:	d100      	bne.n	800b3fa <memmove+0x2a>
 800b3f8:	bd10      	pop	{r4, pc}
 800b3fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b3fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b402:	e7f7      	b.n	800b3f4 <memmove+0x24>

0800b404 <_sbrk_r>:
 800b404:	b538      	push	{r3, r4, r5, lr}
 800b406:	4d06      	ldr	r5, [pc, #24]	; (800b420 <_sbrk_r+0x1c>)
 800b408:	2300      	movs	r3, #0
 800b40a:	4604      	mov	r4, r0
 800b40c:	4608      	mov	r0, r1
 800b40e:	602b      	str	r3, [r5, #0]
 800b410:	f7f6 fc28 	bl	8001c64 <_sbrk>
 800b414:	1c43      	adds	r3, r0, #1
 800b416:	d102      	bne.n	800b41e <_sbrk_r+0x1a>
 800b418:	682b      	ldr	r3, [r5, #0]
 800b41a:	b103      	cbz	r3, 800b41e <_sbrk_r+0x1a>
 800b41c:	6023      	str	r3, [r4, #0]
 800b41e:	bd38      	pop	{r3, r4, r5, pc}
 800b420:	20001cdc 	.word	0x20001cdc

0800b424 <abort>:
 800b424:	b508      	push	{r3, lr}
 800b426:	2006      	movs	r0, #6
 800b428:	f000 fa34 	bl	800b894 <raise>
 800b42c:	2001      	movs	r0, #1
 800b42e:	f7f6 fba2 	bl	8001b76 <_exit>

0800b432 <_realloc_r>:
 800b432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b436:	4680      	mov	r8, r0
 800b438:	4614      	mov	r4, r2
 800b43a:	460e      	mov	r6, r1
 800b43c:	b921      	cbnz	r1, 800b448 <_realloc_r+0x16>
 800b43e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b442:	4611      	mov	r1, r2
 800b444:	f7ff bb90 	b.w	800ab68 <_malloc_r>
 800b448:	b92a      	cbnz	r2, 800b456 <_realloc_r+0x24>
 800b44a:	f7ff fb19 	bl	800aa80 <_free_r>
 800b44e:	4625      	mov	r5, r4
 800b450:	4628      	mov	r0, r5
 800b452:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b456:	f000 fa39 	bl	800b8cc <_malloc_usable_size_r>
 800b45a:	4284      	cmp	r4, r0
 800b45c:	4607      	mov	r7, r0
 800b45e:	d802      	bhi.n	800b466 <_realloc_r+0x34>
 800b460:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b464:	d812      	bhi.n	800b48c <_realloc_r+0x5a>
 800b466:	4621      	mov	r1, r4
 800b468:	4640      	mov	r0, r8
 800b46a:	f7ff fb7d 	bl	800ab68 <_malloc_r>
 800b46e:	4605      	mov	r5, r0
 800b470:	2800      	cmp	r0, #0
 800b472:	d0ed      	beq.n	800b450 <_realloc_r+0x1e>
 800b474:	42bc      	cmp	r4, r7
 800b476:	4622      	mov	r2, r4
 800b478:	4631      	mov	r1, r6
 800b47a:	bf28      	it	cs
 800b47c:	463a      	movcs	r2, r7
 800b47e:	f7ff fad2 	bl	800aa26 <memcpy>
 800b482:	4631      	mov	r1, r6
 800b484:	4640      	mov	r0, r8
 800b486:	f7ff fafb 	bl	800aa80 <_free_r>
 800b48a:	e7e1      	b.n	800b450 <_realloc_r+0x1e>
 800b48c:	4635      	mov	r5, r6
 800b48e:	e7df      	b.n	800b450 <_realloc_r+0x1e>

0800b490 <__sfputc_r>:
 800b490:	6893      	ldr	r3, [r2, #8]
 800b492:	3b01      	subs	r3, #1
 800b494:	2b00      	cmp	r3, #0
 800b496:	b410      	push	{r4}
 800b498:	6093      	str	r3, [r2, #8]
 800b49a:	da08      	bge.n	800b4ae <__sfputc_r+0x1e>
 800b49c:	6994      	ldr	r4, [r2, #24]
 800b49e:	42a3      	cmp	r3, r4
 800b4a0:	db01      	blt.n	800b4a6 <__sfputc_r+0x16>
 800b4a2:	290a      	cmp	r1, #10
 800b4a4:	d103      	bne.n	800b4ae <__sfputc_r+0x1e>
 800b4a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4aa:	f000 b935 	b.w	800b718 <__swbuf_r>
 800b4ae:	6813      	ldr	r3, [r2, #0]
 800b4b0:	1c58      	adds	r0, r3, #1
 800b4b2:	6010      	str	r0, [r2, #0]
 800b4b4:	7019      	strb	r1, [r3, #0]
 800b4b6:	4608      	mov	r0, r1
 800b4b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4bc:	4770      	bx	lr

0800b4be <__sfputs_r>:
 800b4be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4c0:	4606      	mov	r6, r0
 800b4c2:	460f      	mov	r7, r1
 800b4c4:	4614      	mov	r4, r2
 800b4c6:	18d5      	adds	r5, r2, r3
 800b4c8:	42ac      	cmp	r4, r5
 800b4ca:	d101      	bne.n	800b4d0 <__sfputs_r+0x12>
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	e007      	b.n	800b4e0 <__sfputs_r+0x22>
 800b4d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d4:	463a      	mov	r2, r7
 800b4d6:	4630      	mov	r0, r6
 800b4d8:	f7ff ffda 	bl	800b490 <__sfputc_r>
 800b4dc:	1c43      	adds	r3, r0, #1
 800b4de:	d1f3      	bne.n	800b4c8 <__sfputs_r+0xa>
 800b4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4e4 <_vfiprintf_r>:
 800b4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4e8:	460d      	mov	r5, r1
 800b4ea:	b09d      	sub	sp, #116	; 0x74
 800b4ec:	4614      	mov	r4, r2
 800b4ee:	4698      	mov	r8, r3
 800b4f0:	4606      	mov	r6, r0
 800b4f2:	b118      	cbz	r0, 800b4fc <_vfiprintf_r+0x18>
 800b4f4:	6a03      	ldr	r3, [r0, #32]
 800b4f6:	b90b      	cbnz	r3, 800b4fc <_vfiprintf_r+0x18>
 800b4f8:	f7ff f924 	bl	800a744 <__sinit>
 800b4fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4fe:	07d9      	lsls	r1, r3, #31
 800b500:	d405      	bmi.n	800b50e <_vfiprintf_r+0x2a>
 800b502:	89ab      	ldrh	r3, [r5, #12]
 800b504:	059a      	lsls	r2, r3, #22
 800b506:	d402      	bmi.n	800b50e <_vfiprintf_r+0x2a>
 800b508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b50a:	f7ff fa8a 	bl	800aa22 <__retarget_lock_acquire_recursive>
 800b50e:	89ab      	ldrh	r3, [r5, #12]
 800b510:	071b      	lsls	r3, r3, #28
 800b512:	d501      	bpl.n	800b518 <_vfiprintf_r+0x34>
 800b514:	692b      	ldr	r3, [r5, #16]
 800b516:	b99b      	cbnz	r3, 800b540 <_vfiprintf_r+0x5c>
 800b518:	4629      	mov	r1, r5
 800b51a:	4630      	mov	r0, r6
 800b51c:	f000 f93a 	bl	800b794 <__swsetup_r>
 800b520:	b170      	cbz	r0, 800b540 <_vfiprintf_r+0x5c>
 800b522:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b524:	07dc      	lsls	r4, r3, #31
 800b526:	d504      	bpl.n	800b532 <_vfiprintf_r+0x4e>
 800b528:	f04f 30ff 	mov.w	r0, #4294967295
 800b52c:	b01d      	add	sp, #116	; 0x74
 800b52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b532:	89ab      	ldrh	r3, [r5, #12]
 800b534:	0598      	lsls	r0, r3, #22
 800b536:	d4f7      	bmi.n	800b528 <_vfiprintf_r+0x44>
 800b538:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b53a:	f7ff fa73 	bl	800aa24 <__retarget_lock_release_recursive>
 800b53e:	e7f3      	b.n	800b528 <_vfiprintf_r+0x44>
 800b540:	2300      	movs	r3, #0
 800b542:	9309      	str	r3, [sp, #36]	; 0x24
 800b544:	2320      	movs	r3, #32
 800b546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b54a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b54e:	2330      	movs	r3, #48	; 0x30
 800b550:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b704 <_vfiprintf_r+0x220>
 800b554:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b558:	f04f 0901 	mov.w	r9, #1
 800b55c:	4623      	mov	r3, r4
 800b55e:	469a      	mov	sl, r3
 800b560:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b564:	b10a      	cbz	r2, 800b56a <_vfiprintf_r+0x86>
 800b566:	2a25      	cmp	r2, #37	; 0x25
 800b568:	d1f9      	bne.n	800b55e <_vfiprintf_r+0x7a>
 800b56a:	ebba 0b04 	subs.w	fp, sl, r4
 800b56e:	d00b      	beq.n	800b588 <_vfiprintf_r+0xa4>
 800b570:	465b      	mov	r3, fp
 800b572:	4622      	mov	r2, r4
 800b574:	4629      	mov	r1, r5
 800b576:	4630      	mov	r0, r6
 800b578:	f7ff ffa1 	bl	800b4be <__sfputs_r>
 800b57c:	3001      	adds	r0, #1
 800b57e:	f000 80a9 	beq.w	800b6d4 <_vfiprintf_r+0x1f0>
 800b582:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b584:	445a      	add	r2, fp
 800b586:	9209      	str	r2, [sp, #36]	; 0x24
 800b588:	f89a 3000 	ldrb.w	r3, [sl]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f000 80a1 	beq.w	800b6d4 <_vfiprintf_r+0x1f0>
 800b592:	2300      	movs	r3, #0
 800b594:	f04f 32ff 	mov.w	r2, #4294967295
 800b598:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b59c:	f10a 0a01 	add.w	sl, sl, #1
 800b5a0:	9304      	str	r3, [sp, #16]
 800b5a2:	9307      	str	r3, [sp, #28]
 800b5a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5a8:	931a      	str	r3, [sp, #104]	; 0x68
 800b5aa:	4654      	mov	r4, sl
 800b5ac:	2205      	movs	r2, #5
 800b5ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b2:	4854      	ldr	r0, [pc, #336]	; (800b704 <_vfiprintf_r+0x220>)
 800b5b4:	f7f4 fe24 	bl	8000200 <memchr>
 800b5b8:	9a04      	ldr	r2, [sp, #16]
 800b5ba:	b9d8      	cbnz	r0, 800b5f4 <_vfiprintf_r+0x110>
 800b5bc:	06d1      	lsls	r1, r2, #27
 800b5be:	bf44      	itt	mi
 800b5c0:	2320      	movmi	r3, #32
 800b5c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5c6:	0713      	lsls	r3, r2, #28
 800b5c8:	bf44      	itt	mi
 800b5ca:	232b      	movmi	r3, #43	; 0x2b
 800b5cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b5d4:	2b2a      	cmp	r3, #42	; 0x2a
 800b5d6:	d015      	beq.n	800b604 <_vfiprintf_r+0x120>
 800b5d8:	9a07      	ldr	r2, [sp, #28]
 800b5da:	4654      	mov	r4, sl
 800b5dc:	2000      	movs	r0, #0
 800b5de:	f04f 0c0a 	mov.w	ip, #10
 800b5e2:	4621      	mov	r1, r4
 800b5e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5e8:	3b30      	subs	r3, #48	; 0x30
 800b5ea:	2b09      	cmp	r3, #9
 800b5ec:	d94d      	bls.n	800b68a <_vfiprintf_r+0x1a6>
 800b5ee:	b1b0      	cbz	r0, 800b61e <_vfiprintf_r+0x13a>
 800b5f0:	9207      	str	r2, [sp, #28]
 800b5f2:	e014      	b.n	800b61e <_vfiprintf_r+0x13a>
 800b5f4:	eba0 0308 	sub.w	r3, r0, r8
 800b5f8:	fa09 f303 	lsl.w	r3, r9, r3
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	9304      	str	r3, [sp, #16]
 800b600:	46a2      	mov	sl, r4
 800b602:	e7d2      	b.n	800b5aa <_vfiprintf_r+0xc6>
 800b604:	9b03      	ldr	r3, [sp, #12]
 800b606:	1d19      	adds	r1, r3, #4
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	9103      	str	r1, [sp, #12]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	bfbb      	ittet	lt
 800b610:	425b      	neglt	r3, r3
 800b612:	f042 0202 	orrlt.w	r2, r2, #2
 800b616:	9307      	strge	r3, [sp, #28]
 800b618:	9307      	strlt	r3, [sp, #28]
 800b61a:	bfb8      	it	lt
 800b61c:	9204      	strlt	r2, [sp, #16]
 800b61e:	7823      	ldrb	r3, [r4, #0]
 800b620:	2b2e      	cmp	r3, #46	; 0x2e
 800b622:	d10c      	bne.n	800b63e <_vfiprintf_r+0x15a>
 800b624:	7863      	ldrb	r3, [r4, #1]
 800b626:	2b2a      	cmp	r3, #42	; 0x2a
 800b628:	d134      	bne.n	800b694 <_vfiprintf_r+0x1b0>
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	1d1a      	adds	r2, r3, #4
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	9203      	str	r2, [sp, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	bfb8      	it	lt
 800b636:	f04f 33ff 	movlt.w	r3, #4294967295
 800b63a:	3402      	adds	r4, #2
 800b63c:	9305      	str	r3, [sp, #20]
 800b63e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b714 <_vfiprintf_r+0x230>
 800b642:	7821      	ldrb	r1, [r4, #0]
 800b644:	2203      	movs	r2, #3
 800b646:	4650      	mov	r0, sl
 800b648:	f7f4 fdda 	bl	8000200 <memchr>
 800b64c:	b138      	cbz	r0, 800b65e <_vfiprintf_r+0x17a>
 800b64e:	9b04      	ldr	r3, [sp, #16]
 800b650:	eba0 000a 	sub.w	r0, r0, sl
 800b654:	2240      	movs	r2, #64	; 0x40
 800b656:	4082      	lsls	r2, r0
 800b658:	4313      	orrs	r3, r2
 800b65a:	3401      	adds	r4, #1
 800b65c:	9304      	str	r3, [sp, #16]
 800b65e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b662:	4829      	ldr	r0, [pc, #164]	; (800b708 <_vfiprintf_r+0x224>)
 800b664:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b668:	2206      	movs	r2, #6
 800b66a:	f7f4 fdc9 	bl	8000200 <memchr>
 800b66e:	2800      	cmp	r0, #0
 800b670:	d03f      	beq.n	800b6f2 <_vfiprintf_r+0x20e>
 800b672:	4b26      	ldr	r3, [pc, #152]	; (800b70c <_vfiprintf_r+0x228>)
 800b674:	bb1b      	cbnz	r3, 800b6be <_vfiprintf_r+0x1da>
 800b676:	9b03      	ldr	r3, [sp, #12]
 800b678:	3307      	adds	r3, #7
 800b67a:	f023 0307 	bic.w	r3, r3, #7
 800b67e:	3308      	adds	r3, #8
 800b680:	9303      	str	r3, [sp, #12]
 800b682:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b684:	443b      	add	r3, r7
 800b686:	9309      	str	r3, [sp, #36]	; 0x24
 800b688:	e768      	b.n	800b55c <_vfiprintf_r+0x78>
 800b68a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b68e:	460c      	mov	r4, r1
 800b690:	2001      	movs	r0, #1
 800b692:	e7a6      	b.n	800b5e2 <_vfiprintf_r+0xfe>
 800b694:	2300      	movs	r3, #0
 800b696:	3401      	adds	r4, #1
 800b698:	9305      	str	r3, [sp, #20]
 800b69a:	4619      	mov	r1, r3
 800b69c:	f04f 0c0a 	mov.w	ip, #10
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6a6:	3a30      	subs	r2, #48	; 0x30
 800b6a8:	2a09      	cmp	r2, #9
 800b6aa:	d903      	bls.n	800b6b4 <_vfiprintf_r+0x1d0>
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d0c6      	beq.n	800b63e <_vfiprintf_r+0x15a>
 800b6b0:	9105      	str	r1, [sp, #20]
 800b6b2:	e7c4      	b.n	800b63e <_vfiprintf_r+0x15a>
 800b6b4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6b8:	4604      	mov	r4, r0
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e7f0      	b.n	800b6a0 <_vfiprintf_r+0x1bc>
 800b6be:	ab03      	add	r3, sp, #12
 800b6c0:	9300      	str	r3, [sp, #0]
 800b6c2:	462a      	mov	r2, r5
 800b6c4:	4b12      	ldr	r3, [pc, #72]	; (800b710 <_vfiprintf_r+0x22c>)
 800b6c6:	a904      	add	r1, sp, #16
 800b6c8:	4630      	mov	r0, r6
 800b6ca:	f3af 8000 	nop.w
 800b6ce:	4607      	mov	r7, r0
 800b6d0:	1c78      	adds	r0, r7, #1
 800b6d2:	d1d6      	bne.n	800b682 <_vfiprintf_r+0x19e>
 800b6d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6d6:	07d9      	lsls	r1, r3, #31
 800b6d8:	d405      	bmi.n	800b6e6 <_vfiprintf_r+0x202>
 800b6da:	89ab      	ldrh	r3, [r5, #12]
 800b6dc:	059a      	lsls	r2, r3, #22
 800b6de:	d402      	bmi.n	800b6e6 <_vfiprintf_r+0x202>
 800b6e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6e2:	f7ff f99f 	bl	800aa24 <__retarget_lock_release_recursive>
 800b6e6:	89ab      	ldrh	r3, [r5, #12]
 800b6e8:	065b      	lsls	r3, r3, #25
 800b6ea:	f53f af1d 	bmi.w	800b528 <_vfiprintf_r+0x44>
 800b6ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6f0:	e71c      	b.n	800b52c <_vfiprintf_r+0x48>
 800b6f2:	ab03      	add	r3, sp, #12
 800b6f4:	9300      	str	r3, [sp, #0]
 800b6f6:	462a      	mov	r2, r5
 800b6f8:	4b05      	ldr	r3, [pc, #20]	; (800b710 <_vfiprintf_r+0x22c>)
 800b6fa:	a904      	add	r1, sp, #16
 800b6fc:	4630      	mov	r0, r6
 800b6fe:	f7ff fc85 	bl	800b00c <_printf_i>
 800b702:	e7e4      	b.n	800b6ce <_vfiprintf_r+0x1ea>
 800b704:	0800bcd6 	.word	0x0800bcd6
 800b708:	0800bce0 	.word	0x0800bce0
 800b70c:	00000000 	.word	0x00000000
 800b710:	0800b4bf 	.word	0x0800b4bf
 800b714:	0800bcdc 	.word	0x0800bcdc

0800b718 <__swbuf_r>:
 800b718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b71a:	460e      	mov	r6, r1
 800b71c:	4614      	mov	r4, r2
 800b71e:	4605      	mov	r5, r0
 800b720:	b118      	cbz	r0, 800b72a <__swbuf_r+0x12>
 800b722:	6a03      	ldr	r3, [r0, #32]
 800b724:	b90b      	cbnz	r3, 800b72a <__swbuf_r+0x12>
 800b726:	f7ff f80d 	bl	800a744 <__sinit>
 800b72a:	69a3      	ldr	r3, [r4, #24]
 800b72c:	60a3      	str	r3, [r4, #8]
 800b72e:	89a3      	ldrh	r3, [r4, #12]
 800b730:	071a      	lsls	r2, r3, #28
 800b732:	d525      	bpl.n	800b780 <__swbuf_r+0x68>
 800b734:	6923      	ldr	r3, [r4, #16]
 800b736:	b31b      	cbz	r3, 800b780 <__swbuf_r+0x68>
 800b738:	6823      	ldr	r3, [r4, #0]
 800b73a:	6922      	ldr	r2, [r4, #16]
 800b73c:	1a98      	subs	r0, r3, r2
 800b73e:	6963      	ldr	r3, [r4, #20]
 800b740:	b2f6      	uxtb	r6, r6
 800b742:	4283      	cmp	r3, r0
 800b744:	4637      	mov	r7, r6
 800b746:	dc04      	bgt.n	800b752 <__swbuf_r+0x3a>
 800b748:	4621      	mov	r1, r4
 800b74a:	4628      	mov	r0, r5
 800b74c:	f7ff fe06 	bl	800b35c <_fflush_r>
 800b750:	b9e0      	cbnz	r0, 800b78c <__swbuf_r+0x74>
 800b752:	68a3      	ldr	r3, [r4, #8]
 800b754:	3b01      	subs	r3, #1
 800b756:	60a3      	str	r3, [r4, #8]
 800b758:	6823      	ldr	r3, [r4, #0]
 800b75a:	1c5a      	adds	r2, r3, #1
 800b75c:	6022      	str	r2, [r4, #0]
 800b75e:	701e      	strb	r6, [r3, #0]
 800b760:	6962      	ldr	r2, [r4, #20]
 800b762:	1c43      	adds	r3, r0, #1
 800b764:	429a      	cmp	r2, r3
 800b766:	d004      	beq.n	800b772 <__swbuf_r+0x5a>
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	07db      	lsls	r3, r3, #31
 800b76c:	d506      	bpl.n	800b77c <__swbuf_r+0x64>
 800b76e:	2e0a      	cmp	r6, #10
 800b770:	d104      	bne.n	800b77c <__swbuf_r+0x64>
 800b772:	4621      	mov	r1, r4
 800b774:	4628      	mov	r0, r5
 800b776:	f7ff fdf1 	bl	800b35c <_fflush_r>
 800b77a:	b938      	cbnz	r0, 800b78c <__swbuf_r+0x74>
 800b77c:	4638      	mov	r0, r7
 800b77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b780:	4621      	mov	r1, r4
 800b782:	4628      	mov	r0, r5
 800b784:	f000 f806 	bl	800b794 <__swsetup_r>
 800b788:	2800      	cmp	r0, #0
 800b78a:	d0d5      	beq.n	800b738 <__swbuf_r+0x20>
 800b78c:	f04f 37ff 	mov.w	r7, #4294967295
 800b790:	e7f4      	b.n	800b77c <__swbuf_r+0x64>
	...

0800b794 <__swsetup_r>:
 800b794:	b538      	push	{r3, r4, r5, lr}
 800b796:	4b2a      	ldr	r3, [pc, #168]	; (800b840 <__swsetup_r+0xac>)
 800b798:	4605      	mov	r5, r0
 800b79a:	6818      	ldr	r0, [r3, #0]
 800b79c:	460c      	mov	r4, r1
 800b79e:	b118      	cbz	r0, 800b7a8 <__swsetup_r+0x14>
 800b7a0:	6a03      	ldr	r3, [r0, #32]
 800b7a2:	b90b      	cbnz	r3, 800b7a8 <__swsetup_r+0x14>
 800b7a4:	f7fe ffce 	bl	800a744 <__sinit>
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b7ae:	0718      	lsls	r0, r3, #28
 800b7b0:	d422      	bmi.n	800b7f8 <__swsetup_r+0x64>
 800b7b2:	06d9      	lsls	r1, r3, #27
 800b7b4:	d407      	bmi.n	800b7c6 <__swsetup_r+0x32>
 800b7b6:	2309      	movs	r3, #9
 800b7b8:	602b      	str	r3, [r5, #0]
 800b7ba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b7be:	81a3      	strh	r3, [r4, #12]
 800b7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c4:	e034      	b.n	800b830 <__swsetup_r+0x9c>
 800b7c6:	0758      	lsls	r0, r3, #29
 800b7c8:	d512      	bpl.n	800b7f0 <__swsetup_r+0x5c>
 800b7ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b7cc:	b141      	cbz	r1, 800b7e0 <__swsetup_r+0x4c>
 800b7ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b7d2:	4299      	cmp	r1, r3
 800b7d4:	d002      	beq.n	800b7dc <__swsetup_r+0x48>
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	f7ff f952 	bl	800aa80 <_free_r>
 800b7dc:	2300      	movs	r3, #0
 800b7de:	6363      	str	r3, [r4, #52]	; 0x34
 800b7e0:	89a3      	ldrh	r3, [r4, #12]
 800b7e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b7e6:	81a3      	strh	r3, [r4, #12]
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	6063      	str	r3, [r4, #4]
 800b7ec:	6923      	ldr	r3, [r4, #16]
 800b7ee:	6023      	str	r3, [r4, #0]
 800b7f0:	89a3      	ldrh	r3, [r4, #12]
 800b7f2:	f043 0308 	orr.w	r3, r3, #8
 800b7f6:	81a3      	strh	r3, [r4, #12]
 800b7f8:	6923      	ldr	r3, [r4, #16]
 800b7fa:	b94b      	cbnz	r3, 800b810 <__swsetup_r+0x7c>
 800b7fc:	89a3      	ldrh	r3, [r4, #12]
 800b7fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b806:	d003      	beq.n	800b810 <__swsetup_r+0x7c>
 800b808:	4621      	mov	r1, r4
 800b80a:	4628      	mov	r0, r5
 800b80c:	f000 f88c 	bl	800b928 <__smakebuf_r>
 800b810:	89a0      	ldrh	r0, [r4, #12]
 800b812:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b816:	f010 0301 	ands.w	r3, r0, #1
 800b81a:	d00a      	beq.n	800b832 <__swsetup_r+0x9e>
 800b81c:	2300      	movs	r3, #0
 800b81e:	60a3      	str	r3, [r4, #8]
 800b820:	6963      	ldr	r3, [r4, #20]
 800b822:	425b      	negs	r3, r3
 800b824:	61a3      	str	r3, [r4, #24]
 800b826:	6923      	ldr	r3, [r4, #16]
 800b828:	b943      	cbnz	r3, 800b83c <__swsetup_r+0xa8>
 800b82a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b82e:	d1c4      	bne.n	800b7ba <__swsetup_r+0x26>
 800b830:	bd38      	pop	{r3, r4, r5, pc}
 800b832:	0781      	lsls	r1, r0, #30
 800b834:	bf58      	it	pl
 800b836:	6963      	ldrpl	r3, [r4, #20]
 800b838:	60a3      	str	r3, [r4, #8]
 800b83a:	e7f4      	b.n	800b826 <__swsetup_r+0x92>
 800b83c:	2000      	movs	r0, #0
 800b83e:	e7f7      	b.n	800b830 <__swsetup_r+0x9c>
 800b840:	20000068 	.word	0x20000068

0800b844 <_raise_r>:
 800b844:	291f      	cmp	r1, #31
 800b846:	b538      	push	{r3, r4, r5, lr}
 800b848:	4604      	mov	r4, r0
 800b84a:	460d      	mov	r5, r1
 800b84c:	d904      	bls.n	800b858 <_raise_r+0x14>
 800b84e:	2316      	movs	r3, #22
 800b850:	6003      	str	r3, [r0, #0]
 800b852:	f04f 30ff 	mov.w	r0, #4294967295
 800b856:	bd38      	pop	{r3, r4, r5, pc}
 800b858:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b85a:	b112      	cbz	r2, 800b862 <_raise_r+0x1e>
 800b85c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b860:	b94b      	cbnz	r3, 800b876 <_raise_r+0x32>
 800b862:	4620      	mov	r0, r4
 800b864:	f000 f830 	bl	800b8c8 <_getpid_r>
 800b868:	462a      	mov	r2, r5
 800b86a:	4601      	mov	r1, r0
 800b86c:	4620      	mov	r0, r4
 800b86e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b872:	f000 b817 	b.w	800b8a4 <_kill_r>
 800b876:	2b01      	cmp	r3, #1
 800b878:	d00a      	beq.n	800b890 <_raise_r+0x4c>
 800b87a:	1c59      	adds	r1, r3, #1
 800b87c:	d103      	bne.n	800b886 <_raise_r+0x42>
 800b87e:	2316      	movs	r3, #22
 800b880:	6003      	str	r3, [r0, #0]
 800b882:	2001      	movs	r0, #1
 800b884:	e7e7      	b.n	800b856 <_raise_r+0x12>
 800b886:	2400      	movs	r4, #0
 800b888:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b88c:	4628      	mov	r0, r5
 800b88e:	4798      	blx	r3
 800b890:	2000      	movs	r0, #0
 800b892:	e7e0      	b.n	800b856 <_raise_r+0x12>

0800b894 <raise>:
 800b894:	4b02      	ldr	r3, [pc, #8]	; (800b8a0 <raise+0xc>)
 800b896:	4601      	mov	r1, r0
 800b898:	6818      	ldr	r0, [r3, #0]
 800b89a:	f7ff bfd3 	b.w	800b844 <_raise_r>
 800b89e:	bf00      	nop
 800b8a0:	20000068 	.word	0x20000068

0800b8a4 <_kill_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4d07      	ldr	r5, [pc, #28]	; (800b8c4 <_kill_r+0x20>)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	4608      	mov	r0, r1
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	602b      	str	r3, [r5, #0]
 800b8b2:	f7f6 f950 	bl	8001b56 <_kill>
 800b8b6:	1c43      	adds	r3, r0, #1
 800b8b8:	d102      	bne.n	800b8c0 <_kill_r+0x1c>
 800b8ba:	682b      	ldr	r3, [r5, #0]
 800b8bc:	b103      	cbz	r3, 800b8c0 <_kill_r+0x1c>
 800b8be:	6023      	str	r3, [r4, #0]
 800b8c0:	bd38      	pop	{r3, r4, r5, pc}
 800b8c2:	bf00      	nop
 800b8c4:	20001cdc 	.word	0x20001cdc

0800b8c8 <_getpid_r>:
 800b8c8:	f7f6 b93d 	b.w	8001b46 <_getpid>

0800b8cc <_malloc_usable_size_r>:
 800b8cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8d0:	1f18      	subs	r0, r3, #4
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	bfbc      	itt	lt
 800b8d6:	580b      	ldrlt	r3, [r1, r0]
 800b8d8:	18c0      	addlt	r0, r0, r3
 800b8da:	4770      	bx	lr

0800b8dc <__swhatbuf_r>:
 800b8dc:	b570      	push	{r4, r5, r6, lr}
 800b8de:	460c      	mov	r4, r1
 800b8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8e4:	2900      	cmp	r1, #0
 800b8e6:	b096      	sub	sp, #88	; 0x58
 800b8e8:	4615      	mov	r5, r2
 800b8ea:	461e      	mov	r6, r3
 800b8ec:	da0d      	bge.n	800b90a <__swhatbuf_r+0x2e>
 800b8ee:	89a3      	ldrh	r3, [r4, #12]
 800b8f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b8f4:	f04f 0100 	mov.w	r1, #0
 800b8f8:	bf0c      	ite	eq
 800b8fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b8fe:	2340      	movne	r3, #64	; 0x40
 800b900:	2000      	movs	r0, #0
 800b902:	6031      	str	r1, [r6, #0]
 800b904:	602b      	str	r3, [r5, #0]
 800b906:	b016      	add	sp, #88	; 0x58
 800b908:	bd70      	pop	{r4, r5, r6, pc}
 800b90a:	466a      	mov	r2, sp
 800b90c:	f000 f848 	bl	800b9a0 <_fstat_r>
 800b910:	2800      	cmp	r0, #0
 800b912:	dbec      	blt.n	800b8ee <__swhatbuf_r+0x12>
 800b914:	9901      	ldr	r1, [sp, #4]
 800b916:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b91a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b91e:	4259      	negs	r1, r3
 800b920:	4159      	adcs	r1, r3
 800b922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b926:	e7eb      	b.n	800b900 <__swhatbuf_r+0x24>

0800b928 <__smakebuf_r>:
 800b928:	898b      	ldrh	r3, [r1, #12]
 800b92a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b92c:	079d      	lsls	r5, r3, #30
 800b92e:	4606      	mov	r6, r0
 800b930:	460c      	mov	r4, r1
 800b932:	d507      	bpl.n	800b944 <__smakebuf_r+0x1c>
 800b934:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b938:	6023      	str	r3, [r4, #0]
 800b93a:	6123      	str	r3, [r4, #16]
 800b93c:	2301      	movs	r3, #1
 800b93e:	6163      	str	r3, [r4, #20]
 800b940:	b002      	add	sp, #8
 800b942:	bd70      	pop	{r4, r5, r6, pc}
 800b944:	ab01      	add	r3, sp, #4
 800b946:	466a      	mov	r2, sp
 800b948:	f7ff ffc8 	bl	800b8dc <__swhatbuf_r>
 800b94c:	9900      	ldr	r1, [sp, #0]
 800b94e:	4605      	mov	r5, r0
 800b950:	4630      	mov	r0, r6
 800b952:	f7ff f909 	bl	800ab68 <_malloc_r>
 800b956:	b948      	cbnz	r0, 800b96c <__smakebuf_r+0x44>
 800b958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b95c:	059a      	lsls	r2, r3, #22
 800b95e:	d4ef      	bmi.n	800b940 <__smakebuf_r+0x18>
 800b960:	f023 0303 	bic.w	r3, r3, #3
 800b964:	f043 0302 	orr.w	r3, r3, #2
 800b968:	81a3      	strh	r3, [r4, #12]
 800b96a:	e7e3      	b.n	800b934 <__smakebuf_r+0xc>
 800b96c:	89a3      	ldrh	r3, [r4, #12]
 800b96e:	6020      	str	r0, [r4, #0]
 800b970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b974:	81a3      	strh	r3, [r4, #12]
 800b976:	9b00      	ldr	r3, [sp, #0]
 800b978:	6163      	str	r3, [r4, #20]
 800b97a:	9b01      	ldr	r3, [sp, #4]
 800b97c:	6120      	str	r0, [r4, #16]
 800b97e:	b15b      	cbz	r3, 800b998 <__smakebuf_r+0x70>
 800b980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b984:	4630      	mov	r0, r6
 800b986:	f000 f81d 	bl	800b9c4 <_isatty_r>
 800b98a:	b128      	cbz	r0, 800b998 <__smakebuf_r+0x70>
 800b98c:	89a3      	ldrh	r3, [r4, #12]
 800b98e:	f023 0303 	bic.w	r3, r3, #3
 800b992:	f043 0301 	orr.w	r3, r3, #1
 800b996:	81a3      	strh	r3, [r4, #12]
 800b998:	89a3      	ldrh	r3, [r4, #12]
 800b99a:	431d      	orrs	r5, r3
 800b99c:	81a5      	strh	r5, [r4, #12]
 800b99e:	e7cf      	b.n	800b940 <__smakebuf_r+0x18>

0800b9a0 <_fstat_r>:
 800b9a0:	b538      	push	{r3, r4, r5, lr}
 800b9a2:	4d07      	ldr	r5, [pc, #28]	; (800b9c0 <_fstat_r+0x20>)
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	4608      	mov	r0, r1
 800b9aa:	4611      	mov	r1, r2
 800b9ac:	602b      	str	r3, [r5, #0]
 800b9ae:	f7f6 f931 	bl	8001c14 <_fstat>
 800b9b2:	1c43      	adds	r3, r0, #1
 800b9b4:	d102      	bne.n	800b9bc <_fstat_r+0x1c>
 800b9b6:	682b      	ldr	r3, [r5, #0]
 800b9b8:	b103      	cbz	r3, 800b9bc <_fstat_r+0x1c>
 800b9ba:	6023      	str	r3, [r4, #0]
 800b9bc:	bd38      	pop	{r3, r4, r5, pc}
 800b9be:	bf00      	nop
 800b9c0:	20001cdc 	.word	0x20001cdc

0800b9c4 <_isatty_r>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	4d06      	ldr	r5, [pc, #24]	; (800b9e0 <_isatty_r+0x1c>)
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	4608      	mov	r0, r1
 800b9ce:	602b      	str	r3, [r5, #0]
 800b9d0:	f7f6 f930 	bl	8001c34 <_isatty>
 800b9d4:	1c43      	adds	r3, r0, #1
 800b9d6:	d102      	bne.n	800b9de <_isatty_r+0x1a>
 800b9d8:	682b      	ldr	r3, [r5, #0]
 800b9da:	b103      	cbz	r3, 800b9de <_isatty_r+0x1a>
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	bd38      	pop	{r3, r4, r5, pc}
 800b9e0:	20001cdc 	.word	0x20001cdc

0800b9e4 <_init>:
 800b9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e6:	bf00      	nop
 800b9e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ea:	bc08      	pop	{r3}
 800b9ec:	469e      	mov	lr, r3
 800b9ee:	4770      	bx	lr

0800b9f0 <_fini>:
 800b9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f2:	bf00      	nop
 800b9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9f6:	bc08      	pop	{r3}
 800b9f8:	469e      	mov	lr, r3
 800b9fa:	4770      	bx	lr
