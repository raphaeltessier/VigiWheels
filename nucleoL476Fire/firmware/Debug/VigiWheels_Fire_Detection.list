
VigiWheels_Fire_Detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a53c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  0800a6cc  0800a6cc  0001a6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9e0  0800a9e0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9e0  0800a9e0  0001a9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9e8  0800a9e8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9e8  0800a9e8  0001a9e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9ec  0800a9ec  0001a9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800a9f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c34  2000006c  0800aa5c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ca0  0800aa5c  00021ca0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ead2  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d40  00000000  00000000  0003ebb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b18  00000000  00000000  000428f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001514  00000000  00000000  00044410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b0ca  00000000  00000000  00045924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ce40  00000000  00000000  000709ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111d30  00000000  00000000  0008d82e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007fb4  00000000  00000000  0019f560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001a7514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a6b4 	.word	0x0800a6b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800a6b4 	.word	0x0800a6b4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002b4:	f000 b970 	b.w	8000598 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	460d      	mov	r5, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	460f      	mov	r7, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4694      	mov	ip, r2
 80002e4:	d965      	bls.n	80003b2 <__udivmoddi4+0xe2>
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	b143      	cbz	r3, 80002fe <__udivmoddi4+0x2e>
 80002ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f0:	f1c3 0220 	rsb	r2, r3, #32
 80002f4:	409f      	lsls	r7, r3
 80002f6:	fa20 f202 	lsr.w	r2, r0, r2
 80002fa:	4317      	orrs	r7, r2
 80002fc:	409c      	lsls	r4, r3
 80002fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000302:	fa1f f58c 	uxth.w	r5, ip
 8000306:	fbb7 f1fe 	udiv	r1, r7, lr
 800030a:	0c22      	lsrs	r2, r4, #16
 800030c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000310:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000314:	fb01 f005 	mul.w	r0, r1, r5
 8000318:	4290      	cmp	r0, r2
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x62>
 800031c:	eb1c 0202 	adds.w	r2, ip, r2
 8000320:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000324:	f080 811c 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000328:	4290      	cmp	r0, r2
 800032a:	f240 8119 	bls.w	8000560 <__udivmoddi4+0x290>
 800032e:	3902      	subs	r1, #2
 8000330:	4462      	add	r2, ip
 8000332:	1a12      	subs	r2, r2, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000342:	fb00 f505 	mul.w	r5, r0, r5
 8000346:	42a5      	cmp	r5, r4
 8000348:	d90a      	bls.n	8000360 <__udivmoddi4+0x90>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000352:	f080 8107 	bcs.w	8000564 <__udivmoddi4+0x294>
 8000356:	42a5      	cmp	r5, r4
 8000358:	f240 8104 	bls.w	8000564 <__udivmoddi4+0x294>
 800035c:	4464      	add	r4, ip
 800035e:	3802      	subs	r0, #2
 8000360:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	2100      	movs	r1, #0
 8000368:	b11e      	cbz	r6, 8000372 <__udivmoddi4+0xa2>
 800036a:	40dc      	lsrs	r4, r3
 800036c:	2300      	movs	r3, #0
 800036e:	e9c6 4300 	strd	r4, r3, [r6]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0xbc>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80ed 	beq.w	800055a <__udivmoddi4+0x28a>
 8000380:	2100      	movs	r1, #0
 8000382:	e9c6 0500 	strd	r0, r5, [r6]
 8000386:	4608      	mov	r0, r1
 8000388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038c:	fab3 f183 	clz	r1, r3
 8000390:	2900      	cmp	r1, #0
 8000392:	d149      	bne.n	8000428 <__udivmoddi4+0x158>
 8000394:	42ab      	cmp	r3, r5
 8000396:	d302      	bcc.n	800039e <__udivmoddi4+0xce>
 8000398:	4282      	cmp	r2, r0
 800039a:	f200 80f8 	bhi.w	800058e <__udivmoddi4+0x2be>
 800039e:	1a84      	subs	r4, r0, r2
 80003a0:	eb65 0203 	sbc.w	r2, r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	4617      	mov	r7, r2
 80003a8:	2e00      	cmp	r6, #0
 80003aa:	d0e2      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	e9c6 4700 	strd	r4, r7, [r6]
 80003b0:	e7df      	b.n	8000372 <__udivmoddi4+0xa2>
 80003b2:	b902      	cbnz	r2, 80003b6 <__udivmoddi4+0xe6>
 80003b4:	deff      	udf	#255	; 0xff
 80003b6:	fab2 f382 	clz	r3, r2
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	f040 8090 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c6:	fa1f fe8c 	uxth.w	lr, ip
 80003ca:	2101      	movs	r1, #1
 80003cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d0:	fb07 2015 	mls	r0, r7, r5, r2
 80003d4:	0c22      	lsrs	r2, r4, #16
 80003d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003da:	fb0e f005 	mul.w	r0, lr, r5
 80003de:	4290      	cmp	r0, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e2:	eb1c 0202 	adds.w	r2, ip, r2
 80003e6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4290      	cmp	r0, r2
 80003ee:	f200 80cb 	bhi.w	8000588 <__udivmoddi4+0x2b8>
 80003f2:	4645      	mov	r5, r8
 80003f4:	1a12      	subs	r2, r2, r0
 80003f6:	b2a4      	uxth	r4, r4
 80003f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000400:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000404:	fb0e fe00 	mul.w	lr, lr, r0
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x14e>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x14c>
 8000416:	45a6      	cmp	lr, r4
 8000418:	f200 80bb 	bhi.w	8000592 <__udivmoddi4+0x2c2>
 800041c:	4610      	mov	r0, r2
 800041e:	eba4 040e 	sub.w	r4, r4, lr
 8000422:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000426:	e79f      	b.n	8000368 <__udivmoddi4+0x98>
 8000428:	f1c1 0720 	rsb	r7, r1, #32
 800042c:	408b      	lsls	r3, r1
 800042e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000432:	ea4c 0c03 	orr.w	ip, ip, r3
 8000436:	fa05 f401 	lsl.w	r4, r5, r1
 800043a:	fa20 f307 	lsr.w	r3, r0, r7
 800043e:	40fd      	lsrs	r5, r7
 8000440:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000444:	4323      	orrs	r3, r4
 8000446:	fbb5 f8f9 	udiv	r8, r5, r9
 800044a:	fa1f fe8c 	uxth.w	lr, ip
 800044e:	fb09 5518 	mls	r5, r9, r8, r5
 8000452:	0c1c      	lsrs	r4, r3, #16
 8000454:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000458:	fb08 f50e 	mul.w	r5, r8, lr
 800045c:	42a5      	cmp	r5, r4
 800045e:	fa02 f201 	lsl.w	r2, r2, r1
 8000462:	fa00 f001 	lsl.w	r0, r0, r1
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000470:	f080 8088 	bcs.w	8000584 <__udivmoddi4+0x2b4>
 8000474:	42a5      	cmp	r5, r4
 8000476:	f240 8085 	bls.w	8000584 <__udivmoddi4+0x2b4>
 800047a:	f1a8 0802 	sub.w	r8, r8, #2
 800047e:	4464      	add	r4, ip
 8000480:	1b64      	subs	r4, r4, r5
 8000482:	b29d      	uxth	r5, r3
 8000484:	fbb4 f3f9 	udiv	r3, r4, r9
 8000488:	fb09 4413 	mls	r4, r9, r3, r4
 800048c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000490:	fb03 fe0e 	mul.w	lr, r3, lr
 8000494:	45a6      	cmp	lr, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a0:	d26c      	bcs.n	800057c <__udivmoddi4+0x2ac>
 80004a2:	45a6      	cmp	lr, r4
 80004a4:	d96a      	bls.n	800057c <__udivmoddi4+0x2ac>
 80004a6:	3b02      	subs	r3, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ae:	fba3 9502 	umull	r9, r5, r3, r2
 80004b2:	eba4 040e 	sub.w	r4, r4, lr
 80004b6:	42ac      	cmp	r4, r5
 80004b8:	46c8      	mov	r8, r9
 80004ba:	46ae      	mov	lr, r5
 80004bc:	d356      	bcc.n	800056c <__udivmoddi4+0x29c>
 80004be:	d053      	beq.n	8000568 <__udivmoddi4+0x298>
 80004c0:	b156      	cbz	r6, 80004d8 <__udivmoddi4+0x208>
 80004c2:	ebb0 0208 	subs.w	r2, r0, r8
 80004c6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ca:	fa04 f707 	lsl.w	r7, r4, r7
 80004ce:	40ca      	lsrs	r2, r1
 80004d0:	40cc      	lsrs	r4, r1
 80004d2:	4317      	orrs	r7, r2
 80004d4:	e9c6 7400 	strd	r7, r4, [r6]
 80004d8:	4618      	mov	r0, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e0:	f1c3 0120 	rsb	r1, r3, #32
 80004e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004e8:	fa20 f201 	lsr.w	r2, r0, r1
 80004ec:	fa25 f101 	lsr.w	r1, r5, r1
 80004f0:	409d      	lsls	r5, r3
 80004f2:	432a      	orrs	r2, r5
 80004f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f8:	fa1f fe8c 	uxth.w	lr, ip
 80004fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000500:	fb07 1510 	mls	r5, r7, r0, r1
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800050a:	fb00 f50e 	mul.w	r5, r0, lr
 800050e:	428d      	cmp	r5, r1
 8000510:	fa04 f403 	lsl.w	r4, r4, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x258>
 8000516:	eb1c 0101 	adds.w	r1, ip, r1
 800051a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800051e:	d22f      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000520:	428d      	cmp	r5, r1
 8000522:	d92d      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000524:	3802      	subs	r0, #2
 8000526:	4461      	add	r1, ip
 8000528:	1b49      	subs	r1, r1, r5
 800052a:	b292      	uxth	r2, r2
 800052c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000530:	fb07 1115 	mls	r1, r7, r5, r1
 8000534:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000538:	fb05 f10e 	mul.w	r1, r5, lr
 800053c:	4291      	cmp	r1, r2
 800053e:	d908      	bls.n	8000552 <__udivmoddi4+0x282>
 8000540:	eb1c 0202 	adds.w	r2, ip, r2
 8000544:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000548:	d216      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 800054a:	4291      	cmp	r1, r2
 800054c:	d914      	bls.n	8000578 <__udivmoddi4+0x2a8>
 800054e:	3d02      	subs	r5, #2
 8000550:	4462      	add	r2, ip
 8000552:	1a52      	subs	r2, r2, r1
 8000554:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000558:	e738      	b.n	80003cc <__udivmoddi4+0xfc>
 800055a:	4631      	mov	r1, r6
 800055c:	4630      	mov	r0, r6
 800055e:	e708      	b.n	8000372 <__udivmoddi4+0xa2>
 8000560:	4639      	mov	r1, r7
 8000562:	e6e6      	b.n	8000332 <__udivmoddi4+0x62>
 8000564:	4610      	mov	r0, r2
 8000566:	e6fb      	b.n	8000360 <__udivmoddi4+0x90>
 8000568:	4548      	cmp	r0, r9
 800056a:	d2a9      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 800056c:	ebb9 0802 	subs.w	r8, r9, r2
 8000570:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000574:	3b01      	subs	r3, #1
 8000576:	e7a3      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000578:	4645      	mov	r5, r8
 800057a:	e7ea      	b.n	8000552 <__udivmoddi4+0x282>
 800057c:	462b      	mov	r3, r5
 800057e:	e794      	b.n	80004aa <__udivmoddi4+0x1da>
 8000580:	4640      	mov	r0, r8
 8000582:	e7d1      	b.n	8000528 <__udivmoddi4+0x258>
 8000584:	46d0      	mov	r8, sl
 8000586:	e77b      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000588:	3d02      	subs	r5, #2
 800058a:	4462      	add	r2, ip
 800058c:	e732      	b.n	80003f4 <__udivmoddi4+0x124>
 800058e:	4608      	mov	r0, r1
 8000590:	e70a      	b.n	80003a8 <__udivmoddi4+0xd8>
 8000592:	4464      	add	r4, ip
 8000594:	3802      	subs	r0, #2
 8000596:	e742      	b.n	800041e <__udivmoddi4+0x14e>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <reading_analog_sensor>:

#define SIZE_RX 10
#define SIZE_TX 100

void reading_analog_sensor(ADC_HandleTypeDef *hadc, uint16_t *sensorValue)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
    HAL_ADC_Start(hadc);
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f001 fa8a 	bl	8001ac0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(hadc, 100);
 80005ac:	2164      	movs	r1, #100	; 0x64
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f001 fb74 	bl	8001c9c <HAL_ADC_PollForConversion>
    *sensorValue = HAL_ADC_GetValue(hadc);
 80005b4:	6878      	ldr	r0, [r7, #4]
 80005b6:	f001 fc49 	bl	8001e4c <HAL_ADC_GetValue>
 80005ba:	4603      	mov	r3, r0
 80005bc:	b29a      	uxth	r2, r3
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	801a      	strh	r2, [r3, #0]
    HAL_ADC_Stop(hadc);
 80005c2:	6878      	ldr	r0, [r7, #4]
 80005c4:	f001 fb36 	bl	8001c34 <HAL_ADC_Stop>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <reading_digital_sensor>:

void reading_digital_sensor(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint16_t *sensorValue)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	60f8      	str	r0, [r7, #12]
 80005d8:	460b      	mov	r3, r1
 80005da:	607a      	str	r2, [r7, #4]
 80005dc:	817b      	strh	r3, [r7, #10]
    *sensorValue = !HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 80005de:	897b      	ldrh	r3, [r7, #10]
 80005e0:	4619      	mov	r1, r3
 80005e2:	68f8      	ldr	r0, [r7, #12]
 80005e4:	f002 fd3a 	bl	800305c <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	bf0c      	ite	eq
 80005ee:	2301      	moveq	r3, #1
 80005f0:	2300      	movne	r3, #0
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	801a      	strh	r2, [r3, #0]
}
 80005fa:	bf00      	nop
 80005fc:	3710      	adds	r7, #16
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
	...

08000604 <reading_sensor_values>:

void reading_sensor_values()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
    reading_analog_sensor(&hadc1, &ir_sensor1);
 8000608:	490e      	ldr	r1, [pc, #56]	; (8000644 <reading_sensor_values+0x40>)
 800060a:	480f      	ldr	r0, [pc, #60]	; (8000648 <reading_sensor_values+0x44>)
 800060c:	f7ff ffc6 	bl	800059c <reading_analog_sensor>
    reading_digital_sensor(GPIOA, GPIO_PIN_10, &ir_sensor2);
 8000610:	4a0e      	ldr	r2, [pc, #56]	; (800064c <reading_sensor_values+0x48>)
 8000612:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000616:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800061a:	f7ff ffd9 	bl	80005d0 <reading_digital_sensor>
    reading_analog_sensor(&hadc1, &ir_sensor3);
 800061e:	490c      	ldr	r1, [pc, #48]	; (8000650 <reading_sensor_values+0x4c>)
 8000620:	4809      	ldr	r0, [pc, #36]	; (8000648 <reading_sensor_values+0x44>)
 8000622:	f7ff ffbb 	bl	800059c <reading_analog_sensor>
    reading_digital_sensor(GPIOB, GPIO_PIN_3, &ir_sensor4);
 8000626:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <reading_sensor_values+0x50>)
 8000628:	2108      	movs	r1, #8
 800062a:	480b      	ldr	r0, [pc, #44]	; (8000658 <reading_sensor_values+0x54>)
 800062c:	f7ff ffd0 	bl	80005d0 <reading_digital_sensor>
    reading_analog_sensor(&hadc1, &smoke_sensor1);
 8000630:	490a      	ldr	r1, [pc, #40]	; (800065c <reading_sensor_values+0x58>)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <reading_sensor_values+0x44>)
 8000634:	f7ff ffb2 	bl	800059c <reading_analog_sensor>
    reading_analog_sensor(&hadc1, &smoke_sensor2);
 8000638:	4909      	ldr	r1, [pc, #36]	; (8000660 <reading_sensor_values+0x5c>)
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <reading_sensor_values+0x44>)
 800063c:	f7ff ffae 	bl	800059c <reading_analog_sensor>
}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000088 	.word	0x20000088
 8000648:	200000a0 	.word	0x200000a0
 800064c:	2000008a 	.word	0x2000008a
 8000650:	2000008c 	.word	0x2000008c
 8000654:	2000008e 	.word	0x2000008e
 8000658:	48000400 	.word	0x48000400
 800065c:	20000090 	.word	0x20000090
 8000660:	20000092 	.word	0x20000092

08000664 <sending_data_uart>:

void sending_data_uart(void *argument)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b09f      	sub	sp, #124	; 0x7c
 8000668:	af02      	add	r7, sp, #8
 800066a:	6078      	str	r0, [r7, #4]
	char tx[SIZE_TX + 1];

    while (1)
    {
        osMutexAcquire(uartMutex, osWaitForever);
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <sending_data_uart+0x70>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000674:	4618      	mov	r0, r3
 8000676:	f005 fdaa 	bl	80061ce <osMutexAcquire>

        reading_sensor_values();
 800067a:	f7ff ffc3 	bl	8000604 <reading_sensor_values>

        sprintf(tx, "#IR_SENSOR1=%hu|IR_SENSOR2=%u|IR_SENSOR3=%hu|IR_SENSOR4=%u|SMOKE_SENSOR1=4095|SMOKE_SENSOR2=4095\r\n", ir_sensor1, ir_sensor2, ir_sensor3, ir_sensor4);
 800067e:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <sending_data_uart+0x74>)
 8000680:	881b      	ldrh	r3, [r3, #0]
 8000682:	4619      	mov	r1, r3
 8000684:	4b15      	ldr	r3, [pc, #84]	; (80006dc <sending_data_uart+0x78>)
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	461c      	mov	r4, r3
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <sending_data_uart+0x7c>)
 800068c:	881b      	ldrh	r3, [r3, #0]
 800068e:	461a      	mov	r2, r3
 8000690:	4b14      	ldr	r3, [pc, #80]	; (80006e4 <sending_data_uart+0x80>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	f107 0008 	add.w	r0, r7, #8
 8000698:	9301      	str	r3, [sp, #4]
 800069a:	9200      	str	r2, [sp, #0]
 800069c:	4623      	mov	r3, r4
 800069e:	460a      	mov	r2, r1
 80006a0:	4911      	ldr	r1, [pc, #68]	; (80006e8 <sending_data_uart+0x84>)
 80006a2:	f008 feed 	bl	8009480 <siprintf>

        HAL_UART_Transmit(&huart2, (const uint8_t *)tx, strlen(tx), 100);
 80006a6:	f107 0308 	add.w	r3, r7, #8
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fd9a 	bl	80001e4 <strlen>
 80006b0:	4603      	mov	r3, r0
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	f107 0108 	add.w	r1, r7, #8
 80006b8:	2364      	movs	r3, #100	; 0x64
 80006ba:	480c      	ldr	r0, [pc, #48]	; (80006ec <sending_data_uart+0x88>)
 80006bc:	f004 fdb4 	bl	8005228 <HAL_UART_Transmit>

        osMutexRelease(uartMutex);
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <sending_data_uart+0x70>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f005 fdcd 	bl	8006264 <osMutexRelease>

        osDelay(200);
 80006ca:	20c8      	movs	r0, #200	; 0xc8
 80006cc:	f005 fcde 	bl	800608c <osDelay>
        osMutexAcquire(uartMutex, osWaitForever);
 80006d0:	e7cc      	b.n	800066c <sending_data_uart+0x8>
 80006d2:	bf00      	nop
 80006d4:	20000094 	.word	0x20000094
 80006d8:	20000088 	.word	0x20000088
 80006dc:	2000008a 	.word	0x2000008a
 80006e0:	2000008c 	.word	0x2000008c
 80006e4:	2000008e 	.word	0x2000008e
 80006e8:	0800a6d4 	.word	0x0800a6d4
 80006ec:	200001b4 	.word	0x200001b4

080006f0 <receiving_data_uart>:
    }
}

void receiving_data_uart()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
    char buf[1];
    char rx[SIZE_RX + 1];

    while (1)
    {
        osMutexAcquire(uartMutex, osWaitForever);
 80006f6:	4b33      	ldr	r3, [pc, #204]	; (80007c4 <receiving_data_uart+0xd4>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006fe:	4618      	mov	r0, r3
 8000700:	f005 fd65 	bl	80061ce <osMutexAcquire>

        // Wait for "START_OF_FRAME"
        do
        {
            HAL_UART_Receive(&huart2, (uint8_t *)buf, 1, 100);
 8000704:	f107 0110 	add.w	r1, r7, #16
 8000708:	2364      	movs	r3, #100	; 0x64
 800070a:	2201      	movs	r2, #1
 800070c:	482e      	ldr	r0, [pc, #184]	; (80007c8 <receiving_data_uart+0xd8>)
 800070e:	f004 fe15 	bl	800533c <HAL_UART_Receive>
        } while (*buf != START_OF_FRAME);
 8000712:	7c3b      	ldrb	r3, [r7, #16]
 8000714:	2b23      	cmp	r3, #35	; 0x23
 8000716:	d1f5      	bne.n	8000704 <receiving_data_uart+0x14>

        // Receiving data until "END_OF_FRAME"
        int i = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	61fb      	str	r3, [r7, #28]
        do
        {
            HAL_UART_Receive(&huart2, (uint8_t *)buf, 1, 100);
 800071c:	f107 0110 	add.w	r1, r7, #16
 8000720:	2364      	movs	r3, #100	; 0x64
 8000722:	2201      	movs	r2, #1
 8000724:	4828      	ldr	r0, [pc, #160]	; (80007c8 <receiving_data_uart+0xd8>)
 8000726:	f004 fe09 	bl	800533c <HAL_UART_Receive>
            rx[i++] = *buf;
 800072a:	69fb      	ldr	r3, [r7, #28]
 800072c:	1c5a      	adds	r2, r3, #1
 800072e:	61fa      	str	r2, [r7, #28]
 8000730:	7c3a      	ldrb	r2, [r7, #16]
 8000732:	3320      	adds	r3, #32
 8000734:	443b      	add	r3, r7
 8000736:	f803 2c1c 	strb.w	r2, [r3, #-28]

        } while (*buf != END_OF_FRAME);
 800073a:	7c3b      	ldrb	r3, [r7, #16]
 800073c:	2b0a      	cmp	r3, #10
 800073e:	d1ed      	bne.n	800071c <receiving_data_uart+0x2c>

        rx[i] = '\0';
 8000740:	1d3a      	adds	r2, r7, #4
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	4413      	add	r3, r2
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]

        char *id = strtok(rx, "=");  // ID
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	491f      	ldr	r1, [pc, #124]	; (80007cc <receiving_data_uart+0xdc>)
 800074e:	4618      	mov	r0, r3
 8000750:	f008 ff02 	bl	8009558 <strtok>
 8000754:	61b8      	str	r0, [r7, #24]
        char *value = strtok(NULL, "=");  // Value
 8000756:	491d      	ldr	r1, [pc, #116]	; (80007cc <receiving_data_uart+0xdc>)
 8000758:	2000      	movs	r0, #0
 800075a:	f008 fefd 	bl	8009558 <strtok>
 800075e:	6178      	str	r0, [r7, #20]

        if (id != NULL && value != NULL)
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d027      	beq.n	80007b6 <receiving_data_uart+0xc6>
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d024      	beq.n	80007b6 <receiving_data_uart+0xc6>
        {
            if (strcmp(id, "Fire") == 0) //"strcmp" : Retourne 0 si les chaînes sont égales
 800076c:	4918      	ldr	r1, [pc, #96]	; (80007d0 <receiving_data_uart+0xe0>)
 800076e:	69b8      	ldr	r0, [r7, #24]
 8000770:	f7ff fd2e 	bl	80001d0 <strcmp>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d119      	bne.n	80007ae <receiving_data_uart+0xbe>
            {
                if (atoi(value) == 1)
 800077a:	6978      	ldr	r0, [r7, #20]
 800077c:	f008 fd2e 	bl	80091dc <atoi>
 8000780:	4603      	mov	r3, r0
 8000782:	2b01      	cmp	r3, #1
 8000784:	d106      	bne.n	8000794 <receiving_data_uart+0xa4>
                {
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2120      	movs	r1, #32
 800078a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078e:	f002 fc7d 	bl	800308c <HAL_GPIO_WritePin>
 8000792:	e010      	b.n	80007b6 <receiving_data_uart+0xc6>
                }
                else if (atoi(value) == 0)
 8000794:	6978      	ldr	r0, [r7, #20]
 8000796:	f008 fd21 	bl	80091dc <atoi>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d10a      	bne.n	80007b6 <receiving_data_uart+0xc6>
                {
                    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2120      	movs	r1, #32
 80007a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a8:	f002 fc70 	bl	800308c <HAL_GPIO_WritePin>
 80007ac:	e003      	b.n	80007b6 <receiving_data_uart+0xc6>
                else
                {
                	//Error
                }
            }
            else if (strcmp(id, "PWM") == 0)
 80007ae:	4909      	ldr	r1, [pc, #36]	; (80007d4 <receiving_data_uart+0xe4>)
 80007b0:	69b8      	ldr	r0, [r7, #24]
 80007b2:	f7ff fd0d 	bl	80001d0 <strcmp>
            {
            	//Error
            }
        }

        osMutexRelease(uartMutex);
 80007b6:	4b03      	ldr	r3, [pc, #12]	; (80007c4 <receiving_data_uart+0xd4>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 fd52 	bl	8006264 <osMutexRelease>
    {
 80007c0:	e799      	b.n	80006f6 <receiving_data_uart+0x6>
 80007c2:	bf00      	nop
 80007c4:	20000094 	.word	0x20000094
 80007c8:	200001b4 	.word	0x200001b4
 80007cc:	0800a738 	.word	0x0800a738
 80007d0:	0800a73c 	.word	0x0800a73c
 80007d4:	0800a744 	.word	0x0800a744

080007d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007dc:	f000 fd72 	bl	80012c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e0:	f000 f842 	bl	8000868 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007e4:	f000 f891 	bl	800090a <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f000 fa54 	bl	8000c94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007ec:	f000 fa22 	bl	8000c34 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80007f0:	f000 f8b6 	bl	8000960 <MX_ADC1_Init>
  MX_ADC2_Init();
 80007f4:	f000 f92a 	bl	8000a4c <MX_ADC2_Init>
  MX_TIM1_Init();
 80007f8:	f000 f98c 	bl	8000b14 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007fc:	f005 fb6a 	bl	8005ed4 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  uartMutex = osMutexNew(NULL);
 8000800:	2000      	movs	r0, #0
 8000802:	f005 fc5e 	bl	80060c2 <osMutexNew>
 8000806:	4603      	mov	r3, r0
 8000808:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <main+0x6c>)
 800080a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800080c:	4a0e      	ldr	r2, [pc, #56]	; (8000848 <main+0x70>)
 800080e:	2100      	movs	r1, #0
 8000810:	480e      	ldr	r0, [pc, #56]	; (800084c <main+0x74>)
 8000812:	f005 fba9 	bl	8005f68 <osThreadNew>
 8000816:	4603      	mov	r3, r0
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <main+0x78>)
 800081a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* Create tasks */
  senderThreadId = osThreadNew(sending_data_uart, NULL, &senderTask_attributes);
 800081c:	4a0d      	ldr	r2, [pc, #52]	; (8000854 <main+0x7c>)
 800081e:	2100      	movs	r1, #0
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <main+0x80>)
 8000822:	f005 fba1 	bl	8005f68 <osThreadNew>
 8000826:	4603      	mov	r3, r0
 8000828:	4a0c      	ldr	r2, [pc, #48]	; (800085c <main+0x84>)
 800082a:	6013      	str	r3, [r2, #0]
  receiverThreadId = osThreadNew(receiving_data_uart, NULL, NULL);
 800082c:	2200      	movs	r2, #0
 800082e:	2100      	movs	r1, #0
 8000830:	480b      	ldr	r0, [pc, #44]	; (8000860 <main+0x88>)
 8000832:	f005 fb99 	bl	8005f68 <osThreadNew>
 8000836:	4603      	mov	r3, r0
 8000838:	4a0a      	ldr	r2, [pc, #40]	; (8000864 <main+0x8c>)
 800083a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800083c:	f005 fb6e 	bl	8005f1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000840:	e7fe      	b.n	8000840 <main+0x68>
 8000842:	bf00      	nop
 8000844:	20000094 	.word	0x20000094
 8000848:	0800a790 	.word	0x0800a790
 800084c:	08000da9 	.word	0x08000da9
 8000850:	2000023c 	.word	0x2000023c
 8000854:	0800a76c 	.word	0x0800a76c
 8000858:	08000665 	.word	0x08000665
 800085c:	20000098 	.word	0x20000098
 8000860:	080006f1 	.word	0x080006f1
 8000864:	2000009c 	.word	0x2000009c

08000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b096      	sub	sp, #88	; 0x58
 800086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2244      	movs	r2, #68	; 0x44
 8000874:	2100      	movs	r1, #0
 8000876:	4618      	mov	r0, r3
 8000878:	f008 fe65 	bl	8009546 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800088a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800088e:	f002 fc23 	bl	80030d8 <HAL_PWREx_ControlVoltageScaling>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000898:	f000 fa8e 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089c:	2302      	movs	r3, #2
 800089e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a6:	2310      	movs	r3, #16
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ae:	2302      	movs	r3, #2
 80008b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008b6:	230a      	movs	r3, #10
 80008b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008ba:	2307      	movs	r3, #7
 80008bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008be:	2302      	movs	r3, #2
 80008c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 fc5a 	bl	8003184 <HAL_RCC_OscConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008d6:	f000 fa6f 	bl	8000db8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008da:	230f      	movs	r3, #15
 80008dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008de:	2303      	movs	r3, #3
 80008e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008ee:	463b      	mov	r3, r7
 80008f0:	2104      	movs	r1, #4
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 f822 	bl	800393c <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008fe:	f000 fa5b 	bl	8000db8 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3758      	adds	r7, #88	; 0x58
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}

0800090a <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b0a2      	sub	sp, #136	; 0x88
 800090e:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2288      	movs	r2, #136	; 0x88
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f008 fe15 	bl	8009546 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800091c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000920:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000922:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000926:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000928:	2302      	movs	r3, #2
 800092a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800092c:	2301      	movs	r3, #1
 800092e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000930:	2308      	movs	r3, #8
 8000932:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000934:	2307      	movs	r3, #7
 8000936:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800093c:	2302      	movs	r3, #2
 800093e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000944:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000946:	463b      	mov	r3, r7
 8000948:	4618      	mov	r0, r3
 800094a:	f003 fa1b 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000954:	f000 fa30 	bl	8000db8 <Error_Handler>
  }
}
 8000958:	bf00      	nop
 800095a:	3788      	adds	r7, #136	; 0x88
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000982:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <MX_ADC1_Init+0xe0>)
 8000984:	4a2f      	ldr	r2, [pc, #188]	; (8000a44 <MX_ADC1_Init+0xe4>)
 8000986:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000988:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <MX_ADC1_Init+0xe0>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800098e:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <MX_ADC1_Init+0xe0>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000994:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <MX_ADC1_Init+0xe0>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800099a:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <MX_ADC1_Init+0xe0>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009a0:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <MX_ADC1_Init+0xe0>)
 80009a2:	2204      	movs	r2, #4
 80009a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <MX_ADC1_Init+0xe0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <MX_ADC1_Init+0xe0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80009b2:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <MX_ADC1_Init+0xe0>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b8:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <MX_ADC1_Init+0xe0>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MX_ADC1_Init+0xe0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009c6:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <MX_ADC1_Init+0xe0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009cc:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MX_ADC1_Init+0xe0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_ADC1_Init+0xe0>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_ADC1_Init+0xe0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e2:	4817      	ldr	r0, [pc, #92]	; (8000a40 <MX_ADC1_Init+0xe0>)
 80009e4:	f000 ff1c 	bl	8001820 <HAL_ADC_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80009ee:	f000 f9e3 	bl	8000db8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009f6:	f107 031c 	add.w	r3, r7, #28
 80009fa:	4619      	mov	r1, r3
 80009fc:	4810      	ldr	r0, [pc, #64]	; (8000a40 <MX_ADC1_Init+0xe0>)
 80009fe:	f001 ffed 	bl	80029dc <HAL_ADCEx_MultiModeConfigChannel>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a08:	f000 f9d6 	bl	8000db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a0c:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_ADC1_Init+0xe8>)
 8000a0e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a10:	2306      	movs	r3, #6
 8000a12:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a18:	237f      	movs	r3, #127	; 0x7f
 8000a1a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_ADC1_Init+0xe0>)
 8000a2a:	f001 fa1d 	bl	8001e68 <HAL_ADC_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000a34:	f000 f9c0 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200000a0 	.word	0x200000a0
 8000a44:	50040000 	.word	0x50040000
 8000a48:	14f00020 	.word	0x14f00020

08000a4c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a52:	463b      	mov	r3, r7
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]
 8000a60:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a62:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000a64:	4a29      	ldr	r2, [pc, #164]	; (8000b0c <MX_ADC2_Init+0xc0>)
 8000a66:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a68:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000a6e:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a7a:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000a82:	2204      	movs	r2, #4
 8000a84:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a86:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000a92:	4b1d      	ldr	r3, [pc, #116]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000aba:	4b13      	ldr	r3, [pc, #76]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000ac2:	4811      	ldr	r0, [pc, #68]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000ac4:	f000 feac 	bl	8001820 <HAL_ADC_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000ace:	f000 f973 	bl	8000db8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ad2:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <MX_ADC2_Init+0xc4>)
 8000ad4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad6:	2306      	movs	r3, #6
 8000ad8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ade:	237f      	movs	r3, #127	; 0x7f
 8000ae0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	4619      	mov	r1, r3
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <MX_ADC2_Init+0xbc>)
 8000af0:	f001 f9ba 	bl	8001e68 <HAL_ADC_ConfigChannel>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000afa:	f000 f95d 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	3718      	adds	r7, #24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000104 	.word	0x20000104
 8000b0c:	50040100 	.word	0x50040100
 8000b10:	04300002 	.word	0x04300002

08000b14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b096      	sub	sp, #88	; 0x58
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b26:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]
 8000b34:	611a      	str	r2, [r3, #16]
 8000b36:	615a      	str	r2, [r3, #20]
 8000b38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b3a:	1d3b      	adds	r3, r7, #4
 8000b3c:	222c      	movs	r2, #44	; 0x2c
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f008 fd00 	bl	8009546 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b46:	4b39      	ldr	r3, [pc, #228]	; (8000c2c <MX_TIM1_Init+0x118>)
 8000b48:	4a39      	ldr	r2, [pc, #228]	; (8000c30 <MX_TIM1_Init+0x11c>)
 8000b4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b4c:	4b37      	ldr	r3, [pc, #220]	; (8000c2c <MX_TIM1_Init+0x118>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <MX_TIM1_Init+0x118>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b58:	4b34      	ldr	r3, [pc, #208]	; (8000c2c <MX_TIM1_Init+0x118>)
 8000b5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b60:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <MX_TIM1_Init+0x118>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b66:	4b31      	ldr	r3, [pc, #196]	; (8000c2c <MX_TIM1_Init+0x118>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6c:	4b2f      	ldr	r3, [pc, #188]	; (8000c2c <MX_TIM1_Init+0x118>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000b72:	482e      	ldr	r0, [pc, #184]	; (8000c2c <MX_TIM1_Init+0x118>)
 8000b74:	f003 fdc2 	bl	80046fc <HAL_TIM_OC_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b7e:	f000 f91b 	bl	8000db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b8e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000b92:	4619      	mov	r1, r3
 8000b94:	4825      	ldr	r0, [pc, #148]	; (8000c2c <MX_TIM1_Init+0x118>)
 8000b96:	f004 f9f3 	bl	8004f80 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ba0:	f000 f90a 	bl	8000db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bac:	2300      	movs	r3, #0
 8000bae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4818      	ldr	r0, [pc, #96]	; (8000c2c <MX_TIM1_Init+0x118>)
 8000bca:	f003 fdef 	bl	80047ac <HAL_TIM_OC_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000bd4:	f000 f8f0 	bl	8000db8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4807      	ldr	r0, [pc, #28]	; (8000c2c <MX_TIM1_Init+0x118>)
 8000c0e:	f004 fa3f 	bl	8005090 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000c18:	f000 f8ce 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <MX_TIM1_Init+0x118>)
 8000c1e:	f000 f999 	bl	8000f54 <HAL_TIM_MspPostInit>

}
 8000c22:	bf00      	nop
 8000c24:	3758      	adds	r7, #88	; 0x58
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000168 	.word	0x20000168
 8000c30:	40012c00 	.word	0x40012c00

08000c34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c3a:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <MX_USART2_UART_Init+0x5c>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_USART2_UART_Init+0x58>)
 8000c78:	f004 fa88 	bl	800518c <HAL_UART_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c82:	f000 f899 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	200001b4 	.word	0x200001b4
 8000c90:	40004400 	.word	0x40004400

08000c94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	4b3c      	ldr	r3, [pc, #240]	; (8000d9c <MX_GPIO_Init+0x108>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	4a3b      	ldr	r2, [pc, #236]	; (8000d9c <MX_GPIO_Init+0x108>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb6:	4b39      	ldr	r3, [pc, #228]	; (8000d9c <MX_GPIO_Init+0x108>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <MX_GPIO_Init+0x108>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	4a35      	ldr	r2, [pc, #212]	; (8000d9c <MX_GPIO_Init+0x108>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cce:	4b33      	ldr	r3, [pc, #204]	; (8000d9c <MX_GPIO_Init+0x108>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cda:	4b30      	ldr	r3, [pc, #192]	; (8000d9c <MX_GPIO_Init+0x108>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	4a2f      	ldr	r2, [pc, #188]	; (8000d9c <MX_GPIO_Init+0x108>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce6:	4b2d      	ldr	r3, [pc, #180]	; (8000d9c <MX_GPIO_Init+0x108>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2120      	movs	r1, #32
 8000cf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfa:	f002 f9c7 	bl	800308c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D5___BUZZER_Pin|D4___RELAIS_Pin, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2130      	movs	r1, #48	; 0x30
 8000d02:	4827      	ldr	r0, [pc, #156]	; (8000da0 <MX_GPIO_Init+0x10c>)
 8000d04:	f002 f9c2 	bl	800308c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d0e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4821      	ldr	r0, [pc, #132]	; (8000da4 <MX_GPIO_Init+0x110>)
 8000d20:	f001 fff2 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d24:	2320      	movs	r3, #32
 8000d26:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3e:	f001 ffe3 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2___IR_SENSOR2_Pin */
  GPIO_InitStruct.Pin = D2___IR_SENSOR2_Pin;
 8000d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D2___IR_SENSOR2_GPIO_Port, &GPIO_InitStruct);
 8000d50:	f107 030c 	add.w	r3, r7, #12
 8000d54:	4619      	mov	r1, r3
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f001 ffd5 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : D3___IR_SENSOR4_Pin */
  GPIO_InitStruct.Pin = D3___IR_SENSOR4_Pin;
 8000d5e:	2308      	movs	r3, #8
 8000d60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D3___IR_SENSOR4_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	4619      	mov	r1, r3
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <MX_GPIO_Init+0x10c>)
 8000d72:	f001 ffc9 	bl	8002d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : D5___BUZZER_Pin D4___RELAIS_Pin */
  GPIO_InitStruct.Pin = D5___BUZZER_Pin|D4___RELAIS_Pin;
 8000d76:	2330      	movs	r3, #48	; 0x30
 8000d78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d86:	f107 030c 	add.w	r3, r7, #12
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_GPIO_Init+0x10c>)
 8000d8e:	f001 ffbb 	bl	8002d08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d92:	bf00      	nop
 8000d94:	3720      	adds	r7, #32
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	48000400 	.word	0x48000400
 8000da4:	48000800 	.word	0x48000800

08000da8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000db0:	2001      	movs	r0, #1
 8000db2:	f005 f96b 	bl	800608c <osDelay>
 8000db6:	e7fb      	b.n	8000db0 <StartDefaultTask+0x8>

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc0:	e7fe      	b.n	8000dc0 <Error_Handler+0x8>
	...

08000dc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	4a10      	ldr	r2, [pc, #64]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_MspInit+0x4c>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_MspInit+0x4c>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de6:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_MspInit+0x4c>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dec:	6593      	str	r3, [r2, #88]	; 0x58
 8000dee:	4b08      	ldr	r3, [pc, #32]	; (8000e10 <HAL_MspInit+0x4c>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	210f      	movs	r1, #15
 8000dfe:	f06f 0001 	mvn.w	r0, #1
 8000e02:	f001 ff58 	bl	8002cb6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000

08000e14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a33      	ldr	r2, [pc, #204]	; (8000f00 <HAL_ADC_MspInit+0xec>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d12e      	bne.n	8000e94 <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000e36:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <HAL_ADC_MspInit+0xf0>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	4a31      	ldr	r2, [pc, #196]	; (8000f04 <HAL_ADC_MspInit+0xf0>)
 8000e3e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000e40:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <HAL_ADC_MspInit+0xf0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d10b      	bne.n	8000e60 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000e48:	4b2f      	ldr	r3, [pc, #188]	; (8000f08 <HAL_ADC_MspInit+0xf4>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4c:	4a2e      	ldr	r2, [pc, #184]	; (8000f08 <HAL_ADC_MspInit+0xf4>)
 8000e4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e52:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e54:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <HAL_ADC_MspInit+0xf4>)
 8000e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e5c:	61bb      	str	r3, [r7, #24]
 8000e5e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <HAL_ADC_MspInit+0xf4>)
 8000e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e64:	4a28      	ldr	r2, [pc, #160]	; (8000f08 <HAL_ADC_MspInit+0xf4>)
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6c:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <HAL_ADC_MspInit+0xf4>)
 8000e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	617b      	str	r3, [r7, #20]
 8000e76:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000e7c:	230b      	movs	r3, #11
 8000e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f001 ff3b 	bl	8002d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000e92:	e031      	b.n	8000ef8 <HAL_ADC_MspInit+0xe4>
  else if(hadc->Instance==ADC2)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a1c      	ldr	r2, [pc, #112]	; (8000f0c <HAL_ADC_MspInit+0xf8>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d12c      	bne.n	8000ef8 <HAL_ADC_MspInit+0xe4>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_ADC_MspInit+0xf0>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <HAL_ADC_MspInit+0xf0>)
 8000ea6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <HAL_ADC_MspInit+0xf0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d10b      	bne.n	8000ec8 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000eb0:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_ADC_MspInit+0xf4>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <HAL_ADC_MspInit+0xf4>)
 8000eb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_ADC_MspInit+0xf4>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_ADC_MspInit+0xf4>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_ADC_MspInit+0xf4>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_ADC_MspInit+0xf4>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ee4:	230b      	movs	r3, #11
 8000ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4807      	ldr	r0, [pc, #28]	; (8000f10 <HAL_ADC_MspInit+0xfc>)
 8000ef4:	f001 ff08 	bl	8002d08 <HAL_GPIO_Init>
}
 8000ef8:	bf00      	nop
 8000efa:	3730      	adds	r7, #48	; 0x30
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	50040000 	.word	0x50040000
 8000f04:	20000240 	.word	0x20000240
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	50040100 	.word	0x50040100
 8000f10:	48000800 	.word	0x48000800

08000f14 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_TIM_OC_MspInit+0x38>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d10b      	bne.n	8000f3e <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_TIM_OC_MspInit+0x3c>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2a:	4a09      	ldr	r2, [pc, #36]	; (8000f50 <HAL_TIM_OC_MspInit+0x3c>)
 8000f2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f30:	6613      	str	r3, [r2, #96]	; 0x60
 8000f32:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <HAL_TIM_OC_MspInit+0x3c>)
 8000f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3714      	adds	r7, #20
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40012c00 	.word	0x40012c00
 8000f50:	40021000 	.word	0x40021000

08000f54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 030c 	add.w	r3, r7, #12
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <HAL_TIM_MspPostInit+0x68>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d11d      	bne.n	8000fb2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_TIM_MspPostInit+0x6c>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <HAL_TIM_MspPostInit+0x6c>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_TIM_MspPostInit+0x6c>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f92:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	4619      	mov	r1, r3
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fae:	f001 feab 	bl	8002d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000fb2:	bf00      	nop
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40012c00 	.word	0x40012c00
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0ac      	sub	sp, #176	; 0xb0
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2288      	movs	r2, #136	; 0x88
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f008 faae 	bl	8009546 <memset>
  if(huart->Instance==USART2)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a21      	ldr	r2, [pc, #132]	; (8001074 <HAL_UART_MspInit+0xb0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d13b      	bne.n	800106c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	4618      	mov	r0, r3
 8001002:	f002 febf 	bl	8003d84 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800100c:	f7ff fed4 	bl	8000db8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001010:	4b19      	ldr	r3, [pc, #100]	; (8001078 <HAL_UART_MspInit+0xb4>)
 8001012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001014:	4a18      	ldr	r2, [pc, #96]	; (8001078 <HAL_UART_MspInit+0xb4>)
 8001016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101a:	6593      	str	r3, [r2, #88]	; 0x58
 800101c:	4b16      	ldr	r3, [pc, #88]	; (8001078 <HAL_UART_MspInit+0xb4>)
 800101e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001024:	613b      	str	r3, [r7, #16]
 8001026:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <HAL_UART_MspInit+0xb4>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	4a12      	ldr	r2, [pc, #72]	; (8001078 <HAL_UART_MspInit+0xb4>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <HAL_UART_MspInit+0xb4>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001040:	230c      	movs	r3, #12
 8001042:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001058:	2307      	movs	r3, #7
 800105a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001062:	4619      	mov	r1, r3
 8001064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001068:	f001 fe4e 	bl	8002d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	37b0      	adds	r7, #176	; 0xb0
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40004400 	.word	0x40004400
 8001078:	40021000 	.word	0x40021000

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <MemManage_Handler+0x4>

0800108e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <UsageFault_Handler+0x4>

0800109a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 f966 	bl	800137c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80010b0:	f006 ff2c 	bl	8007f0c <xTaskGetSchedulerState>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d001      	beq.n	80010be <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80010ba:	f007 fe15 	bl	8008ce8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  return 1;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <_kill>:

int _kill(int pid, int sig)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80010dc:	f008 fade 	bl	800969c <__errno>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2216      	movs	r2, #22
 80010e4:	601a      	str	r2, [r3, #0]
  return -1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_exit>:

void _exit (int status)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80010fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff ffe7 	bl	80010d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001104:	e7fe      	b.n	8001104 <_exit+0x12>

08001106 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	60f8      	str	r0, [r7, #12]
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	e00a      	b.n	800112e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001118:	f3af 8000 	nop.w
 800111c:	4601      	mov	r1, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1c5a      	adds	r2, r3, #1
 8001122:	60ba      	str	r2, [r7, #8]
 8001124:	b2ca      	uxtb	r2, r1
 8001126:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3301      	adds	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	429a      	cmp	r2, r3
 8001134:	dbf0      	blt.n	8001118 <_read+0x12>
  }

  return len;
 8001136:	687b      	ldr	r3, [r7, #4]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	e009      	b.n	8001166 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	1c5a      	adds	r2, r3, #1
 8001156:	60ba      	str	r2, [r7, #8]
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	4618      	mov	r0, r3
 800115c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3301      	adds	r3, #1
 8001164:	617b      	str	r3, [r7, #20]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	429a      	cmp	r2, r3
 800116c:	dbf1      	blt.n	8001152 <_write+0x12>
  }
  return len;
 800116e:	687b      	ldr	r3, [r7, #4]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <_close>:

int _close(int file)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001184:	4618      	mov	r0, r3
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr

08001190 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011a0:	605a      	str	r2, [r3, #4]
  return 0;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <_isatty>:

int _isatty(int file)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011b8:	2301      	movs	r3, #1
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b085      	sub	sp, #20
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	60f8      	str	r0, [r7, #12]
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011d2:	2300      	movs	r3, #0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e8:	4a14      	ldr	r2, [pc, #80]	; (800123c <_sbrk+0x5c>)
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <_sbrk+0x60>)
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <_sbrk+0x64>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <_sbrk+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d207      	bcs.n	8001220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001210:	f008 fa44 	bl	800969c <__errno>
 8001214:	4603      	mov	r3, r0
 8001216:	220c      	movs	r2, #12
 8001218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800121e:	e009      	b.n	8001234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <_sbrk+0x64>)
 8001230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20018000 	.word	0x20018000
 8001240:	00000400 	.word	0x00000400
 8001244:	20000244 	.word	0x20000244
 8001248:	20001ca0 	.word	0x20001ca0

0800124c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <SystemInit+0x20>)
 8001252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <SystemInit+0x20>)
 8001258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001274:	f7ff ffea 	bl	800124c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <LoopForever+0x6>)
  ldr r1, =_edata
 800127a:	490d      	ldr	r1, [pc, #52]	; (80012b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <LoopForever+0xe>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0a      	ldr	r2, [pc, #40]	; (80012b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001290:	4c0a      	ldr	r4, [pc, #40]	; (80012bc <LoopForever+0x16>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129e:	f008 fa03 	bl	80096a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012a2:	f7ff fa99 	bl	80007d8 <main>

080012a6 <LoopForever>:

LoopForever:
    b LoopForever
 80012a6:	e7fe      	b.n	80012a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80012b4:	0800a9f0 	.word	0x0800a9f0
  ldr r2, =_sbss
 80012b8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80012bc:	20001ca0 	.word	0x20001ca0

080012c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC1_2_IRQHandler>
	...

080012c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012ca:	2300      	movs	r3, #0
 80012cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ce:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <HAL_Init+0x3c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a0b      	ldr	r2, [pc, #44]	; (8001300 <HAL_Init+0x3c>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012da:	2003      	movs	r0, #3
 80012dc:	f001 fce0 	bl	8002ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e0:	200f      	movs	r0, #15
 80012e2:	f000 f80f 	bl	8001304 <HAL_InitTick>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	e001      	b.n	80012f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012f2:	f7ff fd67 	bl	8000dc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012f6:	79fb      	ldrb	r3, [r7, #7]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40022000 	.word	0x40022000

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001310:	4b17      	ldr	r3, [pc, #92]	; (8001370 <HAL_InitTick+0x6c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d023      	beq.n	8001360 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001318:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_InitTick+0x70>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b14      	ldr	r3, [pc, #80]	; (8001370 <HAL_InitTick+0x6c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	4619      	mov	r1, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fbb3 f3f1 	udiv	r3, r3, r1
 800132a:	fbb2 f3f3 	udiv	r3, r2, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f001 fcdd 	bl	8002cee <HAL_SYSTICK_Config>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d10f      	bne.n	800135a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b0f      	cmp	r3, #15
 800133e:	d809      	bhi.n	8001354 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001340:	2200      	movs	r2, #0
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001348:	f001 fcb5 	bl	8002cb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800134c:	4a0a      	ldr	r2, [pc, #40]	; (8001378 <HAL_InitTick+0x74>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e007      	b.n	8001364 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e004      	b.n	8001364 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
 800135e:	e001      	b.n	8001364 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001364:	7bfb      	ldrb	r3, [r7, #15]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000008 	.word	0x20000008
 8001374:	20000000 	.word	0x20000000
 8001378:	20000004 	.word	0x20000004

0800137c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x20>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x24>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_IncTick+0x24>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000008 	.word	0x20000008
 80013a0:	20000248 	.word	0x20000248

080013a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <HAL_GetTick+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000248 	.word	0x20000248

080013bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	609a      	str	r2, [r3, #8]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	609a      	str	r2, [r3, #8]
}
 80013fc:	bf00      	nop
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001424:	b480      	push	{r7}
 8001426:	b087      	sub	sp, #28
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3360      	adds	r3, #96	; 0x60
 8001436:	461a      	mov	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b08      	ldr	r3, [pc, #32]	; (8001468 <LL_ADC_SetOffset+0x44>)
 8001446:	4013      	ands	r3, r2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	4313      	orrs	r3, r2
 8001454:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800145c:	bf00      	nop
 800145e:	371c      	adds	r7, #28
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	03fff000 	.word	0x03fff000

0800146c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3360      	adds	r3, #96	; 0x60
 800147a:	461a      	mov	r2, r3
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4413      	add	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800148c:	4618      	mov	r0, r3
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3360      	adds	r3, #96	; 0x60
 80014a8:	461a      	mov	r2, r3
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	4413      	add	r3, r2
 80014b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	431a      	orrs	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80014c2:	bf00      	nop
 80014c4:	371c      	adds	r7, #28
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3330      	adds	r3, #48	; 0x30
 8001504:	461a      	mov	r2, r3
 8001506:	68bb      	ldr	r3, [r7, #8]
 8001508:	0a1b      	lsrs	r3, r3, #8
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	f003 030c 	and.w	r3, r3, #12
 8001510:	4413      	add	r3, r2
 8001512:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	f003 031f 	and.w	r3, r3, #31
 800151e:	211f      	movs	r1, #31
 8001520:	fa01 f303 	lsl.w	r3, r1, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	401a      	ands	r2, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	0e9b      	lsrs	r3, r3, #26
 800152c:	f003 011f 	and.w	r1, r3, #31
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	f003 031f 	and.w	r3, r3, #31
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	431a      	orrs	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001540:	bf00      	nop
 8001542:	371c      	adds	r7, #28
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	3314      	adds	r3, #20
 800155c:	461a      	mov	r2, r3
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	0e5b      	lsrs	r3, r3, #25
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	4413      	add	r3, r2
 800156a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	0d1b      	lsrs	r3, r3, #20
 8001574:	f003 031f 	and.w	r3, r3, #31
 8001578:	2107      	movs	r1, #7
 800157a:	fa01 f303 	lsl.w	r3, r1, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	401a      	ands	r2, r3
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	0d1b      	lsrs	r3, r3, #20
 8001586:	f003 031f 	and.w	r3, r3, #31
 800158a:	6879      	ldr	r1, [r7, #4]
 800158c:	fa01 f303 	lsl.w	r3, r1, r3
 8001590:	431a      	orrs	r2, r3
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001596:	bf00      	nop
 8001598:	371c      	adds	r7, #28
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015bc:	43db      	mvns	r3, r3
 80015be:	401a      	ands	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f003 0318 	and.w	r3, r3, #24
 80015c6:	4908      	ldr	r1, [pc, #32]	; (80015e8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80015c8:	40d9      	lsrs	r1, r3
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	400b      	ands	r3, r1
 80015ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80015d2:	431a      	orrs	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	0007ffff 	.word	0x0007ffff

080015ec <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 031f 	and.w	r3, r3, #31
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001634:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	6093      	str	r3, [r2, #8]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001658:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800165c:	d101      	bne.n	8001662 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001680:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001684:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016ac:	d101      	bne.n	80016b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016b2:	2300      	movs	r3, #0
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016fc:	f043 0202 	orr.w	r2, r3, #2
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001704:	bf00      	nop
 8001706:	370c      	adds	r7, #12
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	d101      	bne.n	8001728 <LL_ADC_IsEnabled+0x18>
 8001724:	2301      	movs	r3, #1
 8001726:	e000      	b.n	800172a <LL_ADC_IsEnabled+0x1a>
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b02      	cmp	r3, #2
 8001748:	d101      	bne.n	800174e <LL_ADC_IsDisableOngoing+0x18>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <LL_ADC_IsDisableOngoing+0x1a>
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800176c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001770:	f043 0204 	orr.w	r2, r3, #4
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001794:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001798:	f043 0210 	orr.w	r2, r3, #16
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d101      	bne.n	80017c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017c0:	2301      	movs	r3, #1
 80017c2:	e000      	b.n	80017c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80017d2:	b480      	push	{r7}
 80017d4:	b083      	sub	sp, #12
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017e2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017e6:	f043 0220 	orr.w	r2, r3, #32
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	2b08      	cmp	r3, #8
 800180c:	d101      	bne.n	8001812 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001828:	2300      	movs	r3, #0
 800182a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d101      	bne.n	800183a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e130      	b.n	8001a9c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001844:	2b00      	cmp	r3, #0
 8001846:	d109      	bne.n	800185c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fae3 	bl	8000e14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2200      	movs	r2, #0
 8001852:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fef1 	bl	8001648 <LL_ADC_IsDeepPowerDownEnabled>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d004      	beq.n	8001876 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff fed7 	bl	8001624 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff ff0c 	bl	8001698 <LL_ADC_IsInternalRegulatorEnabled>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d115      	bne.n	80018b2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fef0 	bl	8001670 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001890:	4b84      	ldr	r3, [pc, #528]	; (8001aa4 <HAL_ADC_Init+0x284>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	099b      	lsrs	r3, r3, #6
 8001896:	4a84      	ldr	r2, [pc, #528]	; (8001aa8 <HAL_ADC_Init+0x288>)
 8001898:	fba2 2303 	umull	r2, r3, r2, r3
 800189c:	099b      	lsrs	r3, r3, #6
 800189e:	3301      	adds	r3, #1
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018a4:	e002      	b.n	80018ac <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f9      	bne.n	80018a6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff feee 	bl	8001698 <LL_ADC_IsInternalRegulatorEnabled>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10d      	bne.n	80018de <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c6:	f043 0210 	orr.w	r2, r3, #16
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	f043 0201 	orr.w	r2, r3, #1
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff ff62 	bl	80017ac <LL_ADC_REG_IsConversionOngoing>
 80018e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 80c9 	bne.w	8001a8a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f040 80c5 	bne.w	8001a8a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001904:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001908:	f043 0202 	orr.w	r2, r3, #2
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fefb 	bl	8001710 <LL_ADC_IsEnabled>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d115      	bne.n	800194c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001920:	4862      	ldr	r0, [pc, #392]	; (8001aac <HAL_ADC_Init+0x28c>)
 8001922:	f7ff fef5 	bl	8001710 <LL_ADC_IsEnabled>
 8001926:	4604      	mov	r4, r0
 8001928:	4861      	ldr	r0, [pc, #388]	; (8001ab0 <HAL_ADC_Init+0x290>)
 800192a:	f7ff fef1 	bl	8001710 <LL_ADC_IsEnabled>
 800192e:	4603      	mov	r3, r0
 8001930:	431c      	orrs	r4, r3
 8001932:	4860      	ldr	r0, [pc, #384]	; (8001ab4 <HAL_ADC_Init+0x294>)
 8001934:	f7ff feec 	bl	8001710 <LL_ADC_IsEnabled>
 8001938:	4603      	mov	r3, r0
 800193a:	4323      	orrs	r3, r4
 800193c:	2b00      	cmp	r3, #0
 800193e:	d105      	bne.n	800194c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4619      	mov	r1, r3
 8001946:	485c      	ldr	r0, [pc, #368]	; (8001ab8 <HAL_ADC_Init+0x298>)
 8001948:	f7ff fd38 	bl	80013bc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	7e5b      	ldrb	r3, [r3, #25]
 8001950:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001956:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800195c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001962:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3020 	ldrb.w	r3, [r3, #32]
 800196a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001976:	2b01      	cmp	r3, #1
 8001978:	d106      	bne.n	8001988 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197e:	3b01      	subs	r3, #1
 8001980:	045b      	lsls	r3, r3, #17
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800198c:	2b00      	cmp	r3, #0
 800198e:	d009      	beq.n	80019a4 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001994:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	4b44      	ldr	r3, [pc, #272]	; (8001abc <HAL_ADC_Init+0x29c>)
 80019ac:	4013      	ands	r3, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6812      	ldr	r2, [r2, #0]
 80019b2:	69b9      	ldr	r1, [r7, #24]
 80019b4:	430b      	orrs	r3, r1
 80019b6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff1c 	bl	80017fa <LL_ADC_INJ_IsConversionOngoing>
 80019c2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d13d      	bne.n	8001a46 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d13a      	bne.n	8001a46 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019d4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019dc:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80019de:	4313      	orrs	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019ec:	f023 0302 	bic.w	r3, r3, #2
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	6812      	ldr	r2, [r2, #0]
 80019f4:	69b9      	ldr	r1, [r7, #24]
 80019f6:	430b      	orrs	r3, r1
 80019f8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d118      	bne.n	8001a36 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a0e:	f023 0304 	bic.w	r3, r3, #4
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a1a:	4311      	orrs	r1, r2
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a20:	4311      	orrs	r1, r2
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a26:	430a      	orrs	r2, r1
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f042 0201 	orr.w	r2, r2, #1
 8001a32:	611a      	str	r2, [r3, #16]
 8001a34:	e007      	b.n	8001a46 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0201 	bic.w	r2, r2, #1
 8001a44:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d10c      	bne.n	8001a68 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	f023 010f 	bic.w	r1, r3, #15
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	1e5a      	subs	r2, r3, #1
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	631a      	str	r2, [r3, #48]	; 0x30
 8001a66:	e007      	b.n	8001a78 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 020f 	bic.w	r2, r2, #15
 8001a76:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7c:	f023 0303 	bic.w	r3, r3, #3
 8001a80:	f043 0201 	orr.w	r2, r3, #1
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	655a      	str	r2, [r3, #84]	; 0x54
 8001a88:	e007      	b.n	8001a9a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	f043 0210 	orr.w	r2, r3, #16
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3724      	adds	r7, #36	; 0x24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd90      	pop	{r4, r7, pc}
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	053e2d63 	.word	0x053e2d63
 8001aac:	50040000 	.word	0x50040000
 8001ab0:	50040100 	.word	0x50040100
 8001ab4:	50040200 	.word	0x50040200
 8001ab8:	50040300 	.word	0x50040300
 8001abc:	fff0c007 	.word	0xfff0c007

08001ac0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ac8:	4857      	ldr	r0, [pc, #348]	; (8001c28 <HAL_ADC_Start+0x168>)
 8001aca:	f7ff fd8f 	bl	80015ec <LL_ADC_GetMultimode>
 8001ace:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fe69 	bl	80017ac <LL_ADC_REG_IsConversionOngoing>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f040 809c 	bne.w	8001c1a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d101      	bne.n	8001af0 <HAL_ADC_Start+0x30>
 8001aec:	2302      	movs	r3, #2
 8001aee:	e097      	b.n	8001c20 <HAL_ADC_Start+0x160>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 fe63 	bl	80027c4 <ADC_Enable>
 8001afe:	4603      	mov	r3, r0
 8001b00:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001b02:	7dfb      	ldrb	r3, [r7, #23]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	f040 8083 	bne.w	8001c10 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	4a42      	ldr	r2, [pc, #264]	; (8001c2c <HAL_ADC_Start+0x16c>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d002      	beq.n	8001b2e <HAL_ADC_Start+0x6e>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	e000      	b.n	8001b30 <HAL_ADC_Start+0x70>
 8001b2e:	4b40      	ldr	r3, [pc, #256]	; (8001c30 <HAL_ADC_Start+0x170>)
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d002      	beq.n	8001b3e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d105      	bne.n	8001b4a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b56:	d106      	bne.n	8001b66 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	f023 0206 	bic.w	r2, r3, #6
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	659a      	str	r2, [r3, #88]	; 0x58
 8001b64:	e002      	b.n	8001b6c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	221c      	movs	r2, #28
 8001b72:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a2a      	ldr	r2, [pc, #168]	; (8001c2c <HAL_ADC_Start+0x16c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d002      	beq.n	8001b8c <HAL_ADC_Start+0xcc>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	e000      	b.n	8001b8e <HAL_ADC_Start+0xce>
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <HAL_ADC_Start+0x170>)
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d008      	beq.n	8001ba8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d005      	beq.n	8001ba8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b05      	cmp	r3, #5
 8001ba0:	d002      	beq.n	8001ba8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	2b09      	cmp	r3, #9
 8001ba6:	d114      	bne.n	8001bd2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d007      	beq.n	8001bc6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bbe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff fdc6 	bl	800175c <LL_ADC_REG_StartConversion>
 8001bd0:	e025      	b.n	8001c1e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <HAL_ADC_Start+0x16c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d002      	beq.n	8001bee <HAL_ADC_Start+0x12e>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	e000      	b.n	8001bf0 <HAL_ADC_Start+0x130>
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <HAL_ADC_Start+0x170>)
 8001bf0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d00f      	beq.n	8001c1e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	655a      	str	r2, [r3, #84]	; 0x54
 8001c0e:	e006      	b.n	8001c1e <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001c18:	e001      	b.n	8001c1e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	50040300 	.word	0x50040300
 8001c2c:	50040100 	.word	0x50040100
 8001c30:	50040000 	.word	0x50040000

08001c34 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b084      	sub	sp, #16
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d101      	bne.n	8001c4a <HAL_ADC_Stop+0x16>
 8001c46:	2302      	movs	r3, #2
 8001c48:	e023      	b.n	8001c92 <HAL_ADC_Stop+0x5e>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001c52:	2103      	movs	r1, #3
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f000 fcf9 	bl	800264c <ADC_ConversionStop>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d111      	bne.n	8001c88 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 fe33 	bl	80028d0 <ADC_Disable>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c7c:	f023 0301 	bic.w	r3, r3, #1
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ca6:	4866      	ldr	r0, [pc, #408]	; (8001e40 <HAL_ADC_PollForConversion+0x1a4>)
 8001ca8:	f7ff fca0 	bl	80015ec <LL_ADC_GetMultimode>
 8001cac:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	2b08      	cmp	r3, #8
 8001cb4:	d102      	bne.n	8001cbc <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001cb6:	2308      	movs	r3, #8
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	e02a      	b.n	8001d12 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d005      	beq.n	8001cce <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b05      	cmp	r3, #5
 8001cc6:	d002      	beq.n	8001cce <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b09      	cmp	r3, #9
 8001ccc:	d111      	bne.n	8001cf2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d007      	beq.n	8001cec <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce0:	f043 0220 	orr.w	r2, r3, #32
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0a4      	b.n	8001e36 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001cec:	2304      	movs	r3, #4
 8001cee:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001cf0:	e00f      	b.n	8001d12 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001cf2:	4853      	ldr	r0, [pc, #332]	; (8001e40 <HAL_ADC_PollForConversion+0x1a4>)
 8001cf4:	f7ff fc88 	bl	8001608 <LL_ADC_GetMultiDMATransfer>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d007      	beq.n	8001d0e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d02:	f043 0220 	orr.w	r2, r3, #32
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e093      	b.n	8001e36 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001d0e:	2304      	movs	r3, #4
 8001d10:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d12:	f7ff fb47 	bl	80013a4 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d18:	e021      	b.n	8001d5e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d20:	d01d      	beq.n	8001d5e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001d22:	f7ff fb3f 	bl	80013a4 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d302      	bcc.n	8001d38 <HAL_ADC_PollForConversion+0x9c>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d112      	bne.n	8001d5e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10b      	bne.n	8001d5e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d4a:	f043 0204 	orr.w	r2, r3, #4
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e06b      	b.n	8001e36 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	4013      	ands	r3, r2
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0d6      	beq.n	8001d1a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fba6 	bl	80014ce <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d01c      	beq.n	8001dc2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7e5b      	ldrb	r3, [r3, #25]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d118      	bne.n	8001dc2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d111      	bne.n	8001dc2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d105      	bne.n	8001dc2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dba:	f043 0201 	orr.w	r2, r3, #1
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a1f      	ldr	r2, [pc, #124]	; (8001e44 <HAL_ADC_PollForConversion+0x1a8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d002      	beq.n	8001dd2 <HAL_ADC_PollForConversion+0x136>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	e000      	b.n	8001dd4 <HAL_ADC_PollForConversion+0x138>
 8001dd2:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <HAL_ADC_PollForConversion+0x1ac>)
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6812      	ldr	r2, [r2, #0]
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d008      	beq.n	8001dee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d005      	beq.n	8001dee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	2b05      	cmp	r3, #5
 8001de6:	d002      	beq.n	8001dee <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	2b09      	cmp	r3, #9
 8001dec:	d104      	bne.n	8001df8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	e00c      	b.n	8001e12 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a11      	ldr	r2, [pc, #68]	; (8001e44 <HAL_ADC_PollForConversion+0x1a8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d002      	beq.n	8001e08 <HAL_ADC_PollForConversion+0x16c>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	e000      	b.n	8001e0a <HAL_ADC_PollForConversion+0x16e>
 8001e08:	4b0f      	ldr	r3, [pc, #60]	; (8001e48 <HAL_ADC_PollForConversion+0x1ac>)
 8001e0a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d104      	bne.n	8001e22 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	e008      	b.n	8001e34 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d103      	bne.n	8001e34 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	220c      	movs	r2, #12
 8001e32:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3720      	adds	r7, #32
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	50040300 	.word	0x50040300
 8001e44:	50040100 	.word	0x50040100
 8001e48:	50040000 	.word	0x50040000

08001e4c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b0b6      	sub	sp, #216	; 0xd8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_ConfigChannel+0x22>
 8001e86:	2302      	movs	r3, #2
 8001e88:	e3c9      	b.n	800261e <HAL_ADC_ConfigChannel+0x7b6>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fc88 	bl	80017ac <LL_ADC_REG_IsConversionOngoing>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 83aa 	bne.w	80025f8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b05      	cmp	r3, #5
 8001eb2:	d824      	bhi.n	8001efe <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	3b02      	subs	r3, #2
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d81b      	bhi.n	8001ef6 <HAL_ADC_ConfigChannel+0x8e>
 8001ebe:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <HAL_ADC_ConfigChannel+0x5c>)
 8001ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec4:	08001ed5 	.word	0x08001ed5
 8001ec8:	08001edd 	.word	0x08001edd
 8001ecc:	08001ee5 	.word	0x08001ee5
 8001ed0:	08001eed 	.word	0x08001eed
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001ed4:	230c      	movs	r3, #12
 8001ed6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001eda:	e010      	b.n	8001efe <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001edc:	2312      	movs	r3, #18
 8001ede:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ee2:	e00c      	b.n	8001efe <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001ee4:	2318      	movs	r3, #24
 8001ee6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001eea:	e008      	b.n	8001efe <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001eec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ef4:	e003      	b.n	8001efe <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001ef6:	2306      	movs	r3, #6
 8001ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001efc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001f0c:	f7ff faf2 	bl	80014f4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fc49 	bl	80017ac <LL_ADC_REG_IsConversionOngoing>
 8001f1a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fc69 	bl	80017fa <LL_ADC_INJ_IsConversionOngoing>
 8001f28:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f040 81a4 	bne.w	800227e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f040 819f 	bne.w	800227e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	6819      	ldr	r1, [r3, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f7ff fafd 	bl	800154c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	695a      	ldr	r2, [r3, #20]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	08db      	lsrs	r3, r3, #3
 8001f5e:	f003 0303 	and.w	r3, r3, #3
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	2b04      	cmp	r3, #4
 8001f72:	d00a      	beq.n	8001f8a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6818      	ldr	r0, [r3, #0]
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6919      	ldr	r1, [r3, #16]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001f84:	f7ff fa4e 	bl	8001424 <LL_ADC_SetOffset>
 8001f88:	e179      	b.n	800227e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff fa6b 	bl	800146c <LL_ADC_GetOffsetChannel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d10a      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x14e>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff fa60 	bl	800146c <LL_ADC_GetOffsetChannel>
 8001fac:	4603      	mov	r3, r0
 8001fae:	0e9b      	lsrs	r3, r3, #26
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	e01e      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x18c>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2100      	movs	r1, #0
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f7ff fa55 	bl	800146c <LL_ADC_GetOffsetChannel>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fd8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001fe4:	2320      	movs	r3, #32
 8001fe6:	e004      	b.n	8001ff2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001fe8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fec:	fab3 f383 	clz	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d105      	bne.n	800200c <HAL_ADC_ConfigChannel+0x1a4>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	0e9b      	lsrs	r3, r3, #26
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	e018      	b.n	800203e <HAL_ADC_ConfigChannel+0x1d6>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002018:	fa93 f3a3 	rbit	r3, r3
 800201c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002020:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002024:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002028:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002030:	2320      	movs	r3, #32
 8002032:	e004      	b.n	800203e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002034:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002038:	fab3 f383 	clz	r3, r3
 800203c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800203e:	429a      	cmp	r2, r3
 8002040:	d106      	bne.n	8002050 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff fa24 	bl	8001498 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2101      	movs	r1, #1
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fa08 	bl	800146c <LL_ADC_GetOffsetChannel>
 800205c:	4603      	mov	r3, r0
 800205e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10a      	bne.n	800207c <HAL_ADC_ConfigChannel+0x214>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	2101      	movs	r1, #1
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff f9fd 	bl	800146c <LL_ADC_GetOffsetChannel>
 8002072:	4603      	mov	r3, r0
 8002074:	0e9b      	lsrs	r3, r3, #26
 8002076:	f003 021f 	and.w	r2, r3, #31
 800207a:	e01e      	b.n	80020ba <HAL_ADC_ConfigChannel+0x252>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2101      	movs	r1, #1
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff f9f2 	bl	800146c <LL_ADC_GetOffsetChannel>
 8002088:	4603      	mov	r3, r0
 800208a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800209a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800209e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80020a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80020aa:	2320      	movs	r3, #32
 80020ac:	e004      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80020ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d105      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x26a>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	0e9b      	lsrs	r3, r3, #26
 80020cc:	f003 031f 	and.w	r3, r3, #31
 80020d0:	e018      	b.n	8002104 <HAL_ADC_ConfigChannel+0x29c>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020de:	fa93 f3a3 	rbit	r3, r3
 80020e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80020e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80020ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80020ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80020f6:	2320      	movs	r3, #32
 80020f8:	e004      	b.n	8002104 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80020fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002104:	429a      	cmp	r2, r3
 8002106:	d106      	bne.n	8002116 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2200      	movs	r2, #0
 800210e:	2101      	movs	r1, #1
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff f9c1 	bl	8001498 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2102      	movs	r1, #2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff f9a5 	bl	800146c <LL_ADC_GetOffsetChannel>
 8002122:	4603      	mov	r3, r0
 8002124:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10a      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x2da>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2102      	movs	r1, #2
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff f99a 	bl	800146c <LL_ADC_GetOffsetChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	0e9b      	lsrs	r3, r3, #26
 800213c:	f003 021f 	and.w	r2, r3, #31
 8002140:	e01e      	b.n	8002180 <HAL_ADC_ConfigChannel+0x318>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2102      	movs	r1, #2
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff f98f 	bl	800146c <LL_ADC_GetOffsetChannel>
 800214e:	4603      	mov	r3, r0
 8002150:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002160:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002164:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002168:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800216c:	2b00      	cmp	r3, #0
 800216e:	d101      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002170:	2320      	movs	r3, #32
 8002172:	e004      	b.n	800217e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002174:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002188:	2b00      	cmp	r3, #0
 800218a:	d105      	bne.n	8002198 <HAL_ADC_ConfigChannel+0x330>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	0e9b      	lsrs	r3, r3, #26
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	e014      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x35a>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021a0:	fa93 f3a3 	rbit	r3, r3
 80021a4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80021a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80021ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80021b4:	2320      	movs	r3, #32
 80021b6:	e004      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80021b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021bc:	fab3 f383 	clz	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d106      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2200      	movs	r2, #0
 80021cc:	2102      	movs	r1, #2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7ff f962 	bl	8001498 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2103      	movs	r1, #3
 80021da:	4618      	mov	r0, r3
 80021dc:	f7ff f946 	bl	800146c <LL_ADC_GetOffsetChannel>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10a      	bne.n	8002200 <HAL_ADC_ConfigChannel+0x398>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2103      	movs	r1, #3
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff f93b 	bl	800146c <LL_ADC_GetOffsetChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	0e9b      	lsrs	r3, r3, #26
 80021fa:	f003 021f 	and.w	r2, r3, #31
 80021fe:	e017      	b.n	8002230 <HAL_ADC_ConfigChannel+0x3c8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2103      	movs	r1, #3
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff f930 	bl	800146c <LL_ADC_GetOffsetChannel>
 800220c:	4603      	mov	r3, r0
 800220e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800221a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800221c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002222:	2320      	movs	r3, #32
 8002224:	e003      	b.n	800222e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002238:	2b00      	cmp	r3, #0
 800223a:	d105      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x3e0>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	0e9b      	lsrs	r3, r3, #26
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	e011      	b.n	800226c <HAL_ADC_ConfigChannel+0x404>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002258:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800225a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002260:	2320      	movs	r3, #32
 8002262:	e003      	b.n	800226c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002266:	fab3 f383 	clz	r3, r3
 800226a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800226c:	429a      	cmp	r2, r3
 800226e:	d106      	bne.n	800227e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2200      	movs	r2, #0
 8002276:	2103      	movs	r1, #3
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff f90d 	bl	8001498 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f7ff fa44 	bl	8001710 <LL_ADC_IsEnabled>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	f040 8140 	bne.w	8002510 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6819      	ldr	r1, [r3, #0]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	461a      	mov	r2, r3
 800229e:	f7ff f981 	bl	80015a4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	4a8f      	ldr	r2, [pc, #572]	; (80024e4 <HAL_ADC_ConfigChannel+0x67c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	f040 8131 	bne.w	8002510 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10b      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x46e>
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	0e9b      	lsrs	r3, r3, #26
 80022c4:	3301      	adds	r3, #1
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	2b09      	cmp	r3, #9
 80022cc:	bf94      	ite	ls
 80022ce:	2301      	movls	r3, #1
 80022d0:	2300      	movhi	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	e019      	b.n	800230a <HAL_ADC_ConfigChannel+0x4a2>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80022e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80022e6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80022e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80022ee:	2320      	movs	r3, #32
 80022f0:	e003      	b.n	80022fa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80022f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	f003 031f 	and.w	r3, r3, #31
 8002300:	2b09      	cmp	r3, #9
 8002302:	bf94      	ite	ls
 8002304:	2301      	movls	r3, #1
 8002306:	2300      	movhi	r3, #0
 8002308:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800230a:	2b00      	cmp	r3, #0
 800230c:	d079      	beq.n	8002402 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002316:	2b00      	cmp	r3, #0
 8002318:	d107      	bne.n	800232a <HAL_ADC_ConfigChannel+0x4c2>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	0e9b      	lsrs	r3, r3, #26
 8002320:	3301      	adds	r3, #1
 8002322:	069b      	lsls	r3, r3, #26
 8002324:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002328:	e015      	b.n	8002356 <HAL_ADC_ConfigChannel+0x4ee>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002338:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800233a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800233c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002342:	2320      	movs	r3, #32
 8002344:	e003      	b.n	800234e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002348:	fab3 f383 	clz	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	3301      	adds	r3, #1
 8002350:	069b      	lsls	r3, r3, #26
 8002352:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235e:	2b00      	cmp	r3, #0
 8002360:	d109      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x50e>
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	0e9b      	lsrs	r3, r3, #26
 8002368:	3301      	adds	r3, #1
 800236a:	f003 031f 	and.w	r3, r3, #31
 800236e:	2101      	movs	r1, #1
 8002370:	fa01 f303 	lsl.w	r3, r1, r3
 8002374:	e017      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x53e>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002386:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800238e:	2320      	movs	r3, #32
 8002390:	e003      	b.n	800239a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	3301      	adds	r3, #1
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	ea42 0103 	orr.w	r1, r2, r3
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d10a      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x564>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	3301      	adds	r3, #1
 80023be:	f003 021f 	and.w	r2, r3, #31
 80023c2:	4613      	mov	r3, r2
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	4413      	add	r3, r2
 80023c8:	051b      	lsls	r3, r3, #20
 80023ca:	e018      	b.n	80023fe <HAL_ADC_ConfigChannel+0x596>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80023da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023dc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80023de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80023e4:	2320      	movs	r3, #32
 80023e6:	e003      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	3301      	adds	r3, #1
 80023f2:	f003 021f 	and.w	r2, r3, #31
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023fe:	430b      	orrs	r3, r1
 8002400:	e081      	b.n	8002506 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	2b00      	cmp	r3, #0
 800240c:	d107      	bne.n	800241e <HAL_ADC_ConfigChannel+0x5b6>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	0e9b      	lsrs	r3, r3, #26
 8002414:	3301      	adds	r3, #1
 8002416:	069b      	lsls	r3, r3, #26
 8002418:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800241c:	e015      	b.n	800244a <HAL_ADC_ConfigChannel+0x5e2>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002436:	2320      	movs	r3, #32
 8002438:	e003      	b.n	8002442 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	fab3 f383 	clz	r3, r3
 8002440:	b2db      	uxtb	r3, r3
 8002442:	3301      	adds	r3, #1
 8002444:	069b      	lsls	r3, r3, #26
 8002446:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_ADC_ConfigChannel+0x602>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	0e9b      	lsrs	r3, r3, #26
 800245c:	3301      	adds	r3, #1
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	2101      	movs	r1, #1
 8002464:	fa01 f303 	lsl.w	r3, r1, r3
 8002468:	e017      	b.n	800249a <HAL_ADC_ConfigChannel+0x632>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	61bb      	str	r3, [r7, #24]
  return result;
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002482:	2320      	movs	r3, #32
 8002484:	e003      	b.n	800248e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	3301      	adds	r3, #1
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	2101      	movs	r1, #1
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	ea42 0103 	orr.w	r1, r2, r3
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10d      	bne.n	80024c6 <HAL_ADC_ConfigChannel+0x65e>
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	0e9b      	lsrs	r3, r3, #26
 80024b0:	3301      	adds	r3, #1
 80024b2:	f003 021f 	and.w	r2, r3, #31
 80024b6:	4613      	mov	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4413      	add	r3, r2
 80024bc:	3b1e      	subs	r3, #30
 80024be:	051b      	lsls	r3, r3, #20
 80024c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024c4:	e01e      	b.n	8002504 <HAL_ADC_ConfigChannel+0x69c>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	60fb      	str	r3, [r7, #12]
  return result;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d104      	bne.n	80024e8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80024de:	2320      	movs	r3, #32
 80024e0:	e006      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x688>
 80024e2:	bf00      	nop
 80024e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	fab3 f383 	clz	r3, r3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	3301      	adds	r3, #1
 80024f2:	f003 021f 	and.w	r2, r3, #31
 80024f6:	4613      	mov	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4413      	add	r3, r2
 80024fc:	3b1e      	subs	r3, #30
 80024fe:	051b      	lsls	r3, r3, #20
 8002500:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002504:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800250a:	4619      	mov	r1, r3
 800250c:	f7ff f81e 	bl	800154c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b44      	ldr	r3, [pc, #272]	; (8002628 <HAL_ADC_ConfigChannel+0x7c0>)
 8002516:	4013      	ands	r3, r2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d07a      	beq.n	8002612 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800251c:	4843      	ldr	r0, [pc, #268]	; (800262c <HAL_ADC_ConfigChannel+0x7c4>)
 800251e:	f7fe ff73 	bl	8001408 <LL_ADC_GetCommonPathInternalCh>
 8002522:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a41      	ldr	r2, [pc, #260]	; (8002630 <HAL_ADC_ConfigChannel+0x7c8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d12c      	bne.n	800258a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002530:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002534:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d126      	bne.n	800258a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a3c      	ldr	r2, [pc, #240]	; (8002634 <HAL_ADC_ConfigChannel+0x7cc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d004      	beq.n	8002550 <HAL_ADC_ConfigChannel+0x6e8>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a3b      	ldr	r2, [pc, #236]	; (8002638 <HAL_ADC_ConfigChannel+0x7d0>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d15d      	bne.n	800260c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002550:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002554:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002558:	4619      	mov	r1, r3
 800255a:	4834      	ldr	r0, [pc, #208]	; (800262c <HAL_ADC_ConfigChannel+0x7c4>)
 800255c:	f7fe ff41 	bl	80013e2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002560:	4b36      	ldr	r3, [pc, #216]	; (800263c <HAL_ADC_ConfigChannel+0x7d4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	099b      	lsrs	r3, r3, #6
 8002566:	4a36      	ldr	r2, [pc, #216]	; (8002640 <HAL_ADC_ConfigChannel+0x7d8>)
 8002568:	fba2 2303 	umull	r2, r3, r2, r3
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	4613      	mov	r3, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800257a:	e002      	b.n	8002582 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	3b01      	subs	r3, #1
 8002580:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f9      	bne.n	800257c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002588:	e040      	b.n	800260c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a2d      	ldr	r2, [pc, #180]	; (8002644 <HAL_ADC_ConfigChannel+0x7dc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d118      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002594:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d112      	bne.n	80025c6 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a23      	ldr	r2, [pc, #140]	; (8002634 <HAL_ADC_ConfigChannel+0x7cc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d004      	beq.n	80025b4 <HAL_ADC_ConfigChannel+0x74c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a22      	ldr	r2, [pc, #136]	; (8002638 <HAL_ADC_ConfigChannel+0x7d0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d12d      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025bc:	4619      	mov	r1, r3
 80025be:	481b      	ldr	r0, [pc, #108]	; (800262c <HAL_ADC_ConfigChannel+0x7c4>)
 80025c0:	f7fe ff0f 	bl	80013e2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025c4:	e024      	b.n	8002610 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a1f      	ldr	r2, [pc, #124]	; (8002648 <HAL_ADC_ConfigChannel+0x7e0>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d120      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d11a      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a14      	ldr	r2, [pc, #80]	; (8002634 <HAL_ADC_ConfigChannel+0x7cc>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d115      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80025ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025ee:	4619      	mov	r1, r3
 80025f0:	480e      	ldr	r0, [pc, #56]	; (800262c <HAL_ADC_ConfigChannel+0x7c4>)
 80025f2:	f7fe fef6 	bl	80013e2 <LL_ADC_SetCommonPathInternalCh>
 80025f6:	e00c      	b.n	8002612 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	f043 0220 	orr.w	r2, r3, #32
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800260a:	e002      	b.n	8002612 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800260c:	bf00      	nop
 800260e:	e000      	b.n	8002612 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002610:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800261a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800261e:	4618      	mov	r0, r3
 8002620:	37d8      	adds	r7, #216	; 0xd8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	80080000 	.word	0x80080000
 800262c:	50040300 	.word	0x50040300
 8002630:	c7520000 	.word	0xc7520000
 8002634:	50040000 	.word	0x50040000
 8002638:	50040200 	.word	0x50040200
 800263c:	20000000 	.word	0x20000000
 8002640:	053e2d63 	.word	0x053e2d63
 8002644:	cb840000 	.word	0xcb840000
 8002648:	80000001 	.word	0x80000001

0800264c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff f8a2 	bl	80017ac <LL_ADC_REG_IsConversionOngoing>
 8002668:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff f8c3 	bl	80017fa <LL_ADC_INJ_IsConversionOngoing>
 8002674:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d103      	bne.n	8002684 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 8098 	beq.w	80027b4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d02a      	beq.n	80026e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	7e5b      	ldrb	r3, [r3, #25]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d126      	bne.n	80026e8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7e1b      	ldrb	r3, [r3, #24]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d122      	bne.n	80026e8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80026a2:	2301      	movs	r3, #1
 80026a4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80026a6:	e014      	b.n	80026d2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	4a45      	ldr	r2, [pc, #276]	; (80027c0 <ADC_ConversionStop+0x174>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d90d      	bls.n	80026cc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b4:	f043 0210 	orr.w	r2, r3, #16
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e074      	b.n	80027b6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	3301      	adds	r3, #1
 80026d0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026dc:	2b40      	cmp	r3, #64	; 0x40
 80026de:	d1e3      	bne.n	80026a8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2240      	movs	r2, #64	; 0x40
 80026e6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d014      	beq.n	8002718 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff f85a 	bl	80017ac <LL_ADC_REG_IsConversionOngoing>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00c      	beq.n	8002718 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff f817 	bl	8001736 <LL_ADC_IsDisableOngoing>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d104      	bne.n	8002718 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff f836 	bl	8001784 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d014      	beq.n	8002748 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff f869 	bl	80017fa <LL_ADC_INJ_IsConversionOngoing>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00c      	beq.n	8002748 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f7fe ffff 	bl	8001736 <LL_ADC_IsDisableOngoing>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d104      	bne.n	8002748 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f7ff f845 	bl	80017d2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d005      	beq.n	800275a <ADC_ConversionStop+0x10e>
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d105      	bne.n	8002760 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002754:	230c      	movs	r3, #12
 8002756:	617b      	str	r3, [r7, #20]
        break;
 8002758:	e005      	b.n	8002766 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800275a:	2308      	movs	r3, #8
 800275c:	617b      	str	r3, [r7, #20]
        break;
 800275e:	e002      	b.n	8002766 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002760:	2304      	movs	r3, #4
 8002762:	617b      	str	r3, [r7, #20]
        break;
 8002764:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002766:	f7fe fe1d 	bl	80013a4 <HAL_GetTick>
 800276a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800276c:	e01b      	b.n	80027a6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800276e:	f7fe fe19 	bl	80013a4 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b05      	cmp	r3, #5
 800277a:	d914      	bls.n	80027a6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	4013      	ands	r3, r2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00d      	beq.n	80027a6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	f043 0210 	orr.w	r2, r3, #16
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	f043 0201 	orr.w	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e007      	b.n	80027b6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1dc      	bne.n	800276e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3720      	adds	r7, #32
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	a33fffff 	.word	0xa33fffff

080027c4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7fe ff9b 	bl	8001710 <LL_ADC_IsEnabled>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d169      	bne.n	80028b4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <ADC_Enable+0xfc>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00d      	beq.n	800280a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f043 0210 	orr.w	r2, r3, #16
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	f043 0201 	orr.w	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e055      	b.n	80028b6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fe ff56 	bl	80016c0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002814:	482b      	ldr	r0, [pc, #172]	; (80028c4 <ADC_Enable+0x100>)
 8002816:	f7fe fdf7 	bl	8001408 <LL_ADC_GetCommonPathInternalCh>
 800281a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800281c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002824:	4b28      	ldr	r3, [pc, #160]	; (80028c8 <ADC_Enable+0x104>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	099b      	lsrs	r3, r3, #6
 800282a:	4a28      	ldr	r2, [pc, #160]	; (80028cc <ADC_Enable+0x108>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	099b      	lsrs	r3, r3, #6
 8002832:	1c5a      	adds	r2, r3, #1
 8002834:	4613      	mov	r3, r2
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800283e:	e002      	b.n	8002846 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	3b01      	subs	r3, #1
 8002844:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f9      	bne.n	8002840 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800284c:	f7fe fdaa 	bl	80013a4 <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002852:	e028      	b.n	80028a6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fe ff59 	bl	8001710 <LL_ADC_IsEnabled>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d104      	bne.n	800286e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe ff29 	bl	80016c0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800286e:	f7fe fd99 	bl	80013a4 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d914      	bls.n	80028a6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b01      	cmp	r3, #1
 8002888:	d00d      	beq.n	80028a6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288e:	f043 0210 	orr.w	r2, r3, #16
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e007      	b.n	80028b6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d1cf      	bne.n	8002854 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	8000003f 	.word	0x8000003f
 80028c4:	50040300 	.word	0x50040300
 80028c8:	20000000 	.word	0x20000000
 80028cc:	053e2d63 	.word	0x053e2d63

080028d0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe ff2a 	bl	8001736 <LL_ADC_IsDisableOngoing>
 80028e2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fe ff11 	bl	8001710 <LL_ADC_IsEnabled>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d047      	beq.n	8002984 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d144      	bne.n	8002984 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 030d 	and.w	r3, r3, #13
 8002904:	2b01      	cmp	r3, #1
 8002906:	d10c      	bne.n	8002922 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4618      	mov	r0, r3
 800290e:	f7fe feeb 	bl	80016e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2203      	movs	r2, #3
 8002918:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800291a:	f7fe fd43 	bl	80013a4 <HAL_GetTick>
 800291e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002920:	e029      	b.n	8002976 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002926:	f043 0210 	orr.w	r2, r3, #16
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	f043 0201 	orr.w	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e023      	b.n	8002986 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800293e:	f7fe fd31 	bl	80013a4 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d914      	bls.n	8002976 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00d      	beq.n	8002976 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295e:	f043 0210 	orr.w	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	f043 0201 	orr.w	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e007      	b.n	8002986 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1dc      	bne.n	800293e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <LL_ADC_IsEnabled>:
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d101      	bne.n	80029a6 <LL_ADC_IsEnabled+0x18>
 80029a2:	2301      	movs	r3, #1
 80029a4:	e000      	b.n	80029a8 <LL_ADC_IsEnabled+0x1a>
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <LL_ADC_REG_IsConversionOngoing>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b04      	cmp	r3, #4
 80029c6:	d101      	bne.n	80029cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80029c8:	2301      	movs	r3, #1
 80029ca:	e000      	b.n	80029ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b09f      	sub	sp, #124	; 0x7c
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e093      	b.n	8002b22 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002a02:	2300      	movs	r3, #0
 8002a04:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002a06:	2300      	movs	r3, #0
 8002a08:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a47      	ldr	r2, [pc, #284]	; (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d102      	bne.n	8002a1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a14:	4b46      	ldr	r3, [pc, #280]	; (8002b30 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	e001      	b.n	8002a1e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d10b      	bne.n	8002a3c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a28:	f043 0220 	orr.w	r2, r3, #32
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e072      	b.n	8002b22 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff ffb8 	bl	80029b4 <LL_ADC_REG_IsConversionOngoing>
 8002a44:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff ffb2 	bl	80029b4 <LL_ADC_REG_IsConversionOngoing>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d154      	bne.n	8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d151      	bne.n	8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002a5c:	4b35      	ldr	r3, [pc, #212]	; (8002b34 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002a5e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d02c      	beq.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a7a:	035b      	lsls	r3, r3, #13
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a84:	4829      	ldr	r0, [pc, #164]	; (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002a86:	f7ff ff82 	bl	800298e <LL_ADC_IsEnabled>
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	4828      	ldr	r0, [pc, #160]	; (8002b30 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002a8e:	f7ff ff7e 	bl	800298e <LL_ADC_IsEnabled>
 8002a92:	4603      	mov	r3, r0
 8002a94:	431c      	orrs	r4, r3
 8002a96:	4828      	ldr	r0, [pc, #160]	; (8002b38 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002a98:	f7ff ff79 	bl	800298e <LL_ADC_IsEnabled>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4323      	orrs	r3, r4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d137      	bne.n	8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002aa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002aac:	f023 030f 	bic.w	r3, r3, #15
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	6811      	ldr	r1, [r2, #0]
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	6892      	ldr	r2, [r2, #8]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	431a      	orrs	r2, r3
 8002abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002abe:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ac0:	e028      	b.n	8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002acc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ace:	4817      	ldr	r0, [pc, #92]	; (8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002ad0:	f7ff ff5d 	bl	800298e <LL_ADC_IsEnabled>
 8002ad4:	4604      	mov	r4, r0
 8002ad6:	4816      	ldr	r0, [pc, #88]	; (8002b30 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002ad8:	f7ff ff59 	bl	800298e <LL_ADC_IsEnabled>
 8002adc:	4603      	mov	r3, r0
 8002ade:	431c      	orrs	r4, r3
 8002ae0:	4815      	ldr	r0, [pc, #84]	; (8002b38 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002ae2:	f7ff ff54 	bl	800298e <LL_ADC_IsEnabled>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4323      	orrs	r3, r4
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d112      	bne.n	8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002aee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002af6:	f023 030f 	bic.w	r3, r3, #15
 8002afa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002afc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002afe:	e009      	b.n	8002b14 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b04:	f043 0220 	orr.w	r2, r3, #32
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002b12:	e000      	b.n	8002b16 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b14:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002b1e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	377c      	adds	r7, #124	; 0x7c
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd90      	pop	{r4, r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	50040000 	.word	0x50040000
 8002b30:	50040100 	.word	0x50040100
 8002b34:	50040300 	.word	0x50040300
 8002b38:	50040200 	.word	0x50040200

08002b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f003 0307 	and.w	r3, r3, #7
 8002b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b4c:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <__NVIC_SetPriorityGrouping+0x44>)
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b58:	4013      	ands	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b6e:	4a04      	ldr	r2, [pc, #16]	; (8002b80 <__NVIC_SetPriorityGrouping+0x44>)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	60d3      	str	r3, [r2, #12]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	e000ed00 	.word	0xe000ed00

08002b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b88:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <__NVIC_GetPriorityGrouping+0x18>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	f003 0307 	and.w	r3, r3, #7
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b083      	sub	sp, #12
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	6039      	str	r1, [r7, #0]
 8002baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	db0a      	blt.n	8002bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	490c      	ldr	r1, [pc, #48]	; (8002bec <__NVIC_SetPriority+0x4c>)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	0112      	lsls	r2, r2, #4
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bc8:	e00a      	b.n	8002be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	4908      	ldr	r1, [pc, #32]	; (8002bf0 <__NVIC_SetPriority+0x50>)
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	3b04      	subs	r3, #4
 8002bd8:	0112      	lsls	r2, r2, #4
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	440b      	add	r3, r1
 8002bde:	761a      	strb	r2, [r3, #24]
}
 8002be0:	bf00      	nop
 8002be2:	370c      	adds	r7, #12
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	e000e100 	.word	0xe000e100
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	; 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f1c3 0307 	rsb	r3, r3, #7
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	bf28      	it	cs
 8002c12:	2304      	movcs	r3, #4
 8002c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	2b06      	cmp	r3, #6
 8002c1c:	d902      	bls.n	8002c24 <NVIC_EncodePriority+0x30>
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	3b03      	subs	r3, #3
 8002c22:	e000      	b.n	8002c26 <NVIC_EncodePriority+0x32>
 8002c24:	2300      	movs	r3, #0
 8002c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	43da      	mvns	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	401a      	ands	r2, r3
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fa01 f303 	lsl.w	r3, r1, r3
 8002c46:	43d9      	mvns	r1, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c4c:	4313      	orrs	r3, r2
         );
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3724      	adds	r7, #36	; 0x24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c6c:	d301      	bcc.n	8002c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00f      	b.n	8002c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c72:	4a0a      	ldr	r2, [pc, #40]	; (8002c9c <SysTick_Config+0x40>)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7a:	210f      	movs	r1, #15
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c80:	f7ff ff8e 	bl	8002ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c84:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <SysTick_Config+0x40>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8a:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <SysTick_Config+0x40>)
 8002c8c:	2207      	movs	r2, #7
 8002c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	e000e010 	.word	0xe000e010

08002ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff ff47 	bl	8002b3c <__NVIC_SetPriorityGrouping>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc8:	f7ff ff5c 	bl	8002b84 <__NVIC_GetPriorityGrouping>
 8002ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	6978      	ldr	r0, [r7, #20]
 8002cd4:	f7ff ff8e 	bl	8002bf4 <NVIC_EncodePriority>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff5d 	bl	8002ba0 <__NVIC_SetPriority>
}
 8002ce6:	bf00      	nop
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ffb0 	bl	8002c5c <SysTick_Config>
 8002cfc:	4603      	mov	r3, r0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b087      	sub	sp, #28
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d16:	e17f      	b.n	8003018 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	4013      	ands	r3, r2
 8002d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8171 	beq.w	8003012 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d005      	beq.n	8002d48 <HAL_GPIO_Init+0x40>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0303 	and.w	r3, r3, #3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d130      	bne.n	8002daa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	2203      	movs	r2, #3
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	68da      	ldr	r2, [r3, #12]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	005b      	lsls	r3, r3, #1
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d7e:	2201      	movs	r2, #1
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	091b      	lsrs	r3, r3, #4
 8002d94:	f003 0201 	and.w	r2, r3, #1
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	693a      	ldr	r2, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d118      	bne.n	8002de8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	08db      	lsrs	r3, r3, #3
 8002dd2:	f003 0201 	and.w	r2, r3, #1
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f003 0303 	and.w	r3, r3, #3
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d017      	beq.n	8002e24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	005b      	lsls	r3, r3, #1
 8002dfe:	2203      	movs	r2, #3
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d123      	bne.n	8002e78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	08da      	lsrs	r2, r3, #3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3208      	adds	r2, #8
 8002e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f003 0307 	and.w	r3, r3, #7
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	220f      	movs	r2, #15
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	4013      	ands	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	08da      	lsrs	r2, r3, #3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	3208      	adds	r2, #8
 8002e72:	6939      	ldr	r1, [r7, #16]
 8002e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	2203      	movs	r2, #3
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0203 	and.w	r2, r3, #3
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f000 80ac 	beq.w	8003012 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eba:	4b5f      	ldr	r3, [pc, #380]	; (8003038 <HAL_GPIO_Init+0x330>)
 8002ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ebe:	4a5e      	ldr	r2, [pc, #376]	; (8003038 <HAL_GPIO_Init+0x330>)
 8002ec0:	f043 0301 	orr.w	r3, r3, #1
 8002ec4:	6613      	str	r3, [r2, #96]	; 0x60
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	; (8003038 <HAL_GPIO_Init+0x330>)
 8002ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002ed2:	4a5a      	ldr	r2, [pc, #360]	; (800303c <HAL_GPIO_Init+0x334>)
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	089b      	lsrs	r3, r3, #2
 8002ed8:	3302      	adds	r3, #2
 8002eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ede:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	f003 0303 	and.w	r3, r3, #3
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	220f      	movs	r2, #15
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002efc:	d025      	beq.n	8002f4a <HAL_GPIO_Init+0x242>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a4f      	ldr	r2, [pc, #316]	; (8003040 <HAL_GPIO_Init+0x338>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01f      	beq.n	8002f46 <HAL_GPIO_Init+0x23e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a4e      	ldr	r2, [pc, #312]	; (8003044 <HAL_GPIO_Init+0x33c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d019      	beq.n	8002f42 <HAL_GPIO_Init+0x23a>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a4d      	ldr	r2, [pc, #308]	; (8003048 <HAL_GPIO_Init+0x340>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_GPIO_Init+0x236>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a4c      	ldr	r2, [pc, #304]	; (800304c <HAL_GPIO_Init+0x344>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00d      	beq.n	8002f3a <HAL_GPIO_Init+0x232>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4b      	ldr	r2, [pc, #300]	; (8003050 <HAL_GPIO_Init+0x348>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d007      	beq.n	8002f36 <HAL_GPIO_Init+0x22e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4a      	ldr	r2, [pc, #296]	; (8003054 <HAL_GPIO_Init+0x34c>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <HAL_GPIO_Init+0x22a>
 8002f2e:	2306      	movs	r3, #6
 8002f30:	e00c      	b.n	8002f4c <HAL_GPIO_Init+0x244>
 8002f32:	2307      	movs	r3, #7
 8002f34:	e00a      	b.n	8002f4c <HAL_GPIO_Init+0x244>
 8002f36:	2305      	movs	r3, #5
 8002f38:	e008      	b.n	8002f4c <HAL_GPIO_Init+0x244>
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	e006      	b.n	8002f4c <HAL_GPIO_Init+0x244>
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e004      	b.n	8002f4c <HAL_GPIO_Init+0x244>
 8002f42:	2302      	movs	r3, #2
 8002f44:	e002      	b.n	8002f4c <HAL_GPIO_Init+0x244>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e000      	b.n	8002f4c <HAL_GPIO_Init+0x244>
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	f002 0203 	and.w	r2, r2, #3
 8002f52:	0092      	lsls	r2, r2, #2
 8002f54:	4093      	lsls	r3, r2
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002f5c:	4937      	ldr	r1, [pc, #220]	; (800303c <HAL_GPIO_Init+0x334>)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	089b      	lsrs	r3, r3, #2
 8002f62:	3302      	adds	r3, #2
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f6a:	4b3b      	ldr	r3, [pc, #236]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4013      	ands	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002f8e:	4a32      	ldr	r2, [pc, #200]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002f94:	4b30      	ldr	r3, [pc, #192]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002fb8:	4a27      	ldr	r2, [pc, #156]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002fbe:	4b26      	ldr	r3, [pc, #152]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	43db      	mvns	r3, r3
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002fe2:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <HAL_GPIO_Init+0x350>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800300c:	4a12      	ldr	r2, [pc, #72]	; (8003058 <HAL_GPIO_Init+0x350>)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	3301      	adds	r3, #1
 8003016:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa22 f303 	lsr.w	r3, r2, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	f47f ae78 	bne.w	8002d18 <HAL_GPIO_Init+0x10>
  }
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	40010000 	.word	0x40010000
 8003040:	48000400 	.word	0x48000400
 8003044:	48000800 	.word	0x48000800
 8003048:	48000c00 	.word	0x48000c00
 800304c:	48001000 	.word	0x48001000
 8003050:	48001400 	.word	0x48001400
 8003054:	48001800 	.word	0x48001800
 8003058:	40010400 	.word	0x40010400

0800305c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	887b      	ldrh	r3, [r7, #2]
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003074:	2301      	movs	r3, #1
 8003076:	73fb      	strb	r3, [r7, #15]
 8003078:	e001      	b.n	800307e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800307a:	2300      	movs	r3, #0
 800307c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800307e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	460b      	mov	r3, r1
 8003096:	807b      	strh	r3, [r7, #2]
 8003098:	4613      	mov	r3, r2
 800309a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800309c:	787b      	ldrb	r3, [r7, #1]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030a2:	887a      	ldrh	r2, [r7, #2]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030a8:	e002      	b.n	80030b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030aa:	887a      	ldrh	r2, [r7, #2]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	40007000 	.word	0x40007000

080030d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030e6:	d130      	bne.n	800314a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80030e8:	4b23      	ldr	r3, [pc, #140]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030f4:	d038      	beq.n	8003168 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030f6:	4b20      	ldr	r3, [pc, #128]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030fe:	4a1e      	ldr	r2, [pc, #120]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003100:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003104:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003106:	4b1d      	ldr	r3, [pc, #116]	; (800317c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2232      	movs	r2, #50	; 0x32
 800310c:	fb02 f303 	mul.w	r3, r2, r3
 8003110:	4a1b      	ldr	r2, [pc, #108]	; (8003180 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	0c9b      	lsrs	r3, r3, #18
 8003118:	3301      	adds	r3, #1
 800311a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800311c:	e002      	b.n	8003124 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	3b01      	subs	r3, #1
 8003122:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003124:	4b14      	ldr	r3, [pc, #80]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003130:	d102      	bne.n	8003138 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1f2      	bne.n	800311e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003138:	4b0f      	ldr	r3, [pc, #60]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003144:	d110      	bne.n	8003168 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e00f      	b.n	800316a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800314a:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003156:	d007      	beq.n	8003168 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003158:	4b07      	ldr	r3, [pc, #28]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003160:	4a05      	ldr	r2, [pc, #20]	; (8003178 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003166:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40007000 	.word	0x40007000
 800317c:	20000000 	.word	0x20000000
 8003180:	431bde83 	.word	0x431bde83

08003184 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e3ca      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003196:	4b97      	ldr	r3, [pc, #604]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a0:	4b94      	ldr	r3, [pc, #592]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0310 	and.w	r3, r3, #16
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f000 80e4 	beq.w	8003380 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <HAL_RCC_OscConfig+0x4a>
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	f040 808b 	bne.w	80032dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	f040 8087 	bne.w	80032dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80031ce:	4b89      	ldr	r3, [pc, #548]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d005      	beq.n	80031e6 <HAL_RCC_OscConfig+0x62>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e3a2      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1a      	ldr	r2, [r3, #32]
 80031ea:	4b82      	ldr	r3, [pc, #520]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0308 	and.w	r3, r3, #8
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d004      	beq.n	8003200 <HAL_RCC_OscConfig+0x7c>
 80031f6:	4b7f      	ldr	r3, [pc, #508]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031fe:	e005      	b.n	800320c <HAL_RCC_OscConfig+0x88>
 8003200:	4b7c      	ldr	r3, [pc, #496]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003202:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003206:	091b      	lsrs	r3, r3, #4
 8003208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800320c:	4293      	cmp	r3, r2
 800320e:	d223      	bcs.n	8003258 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	4618      	mov	r0, r3
 8003216:	f000 fd55 	bl	8003cc4 <RCC_SetFlashLatencyFromMSIRange>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e383      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003224:	4b73      	ldr	r3, [pc, #460]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a72      	ldr	r2, [pc, #456]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 800322a:	f043 0308 	orr.w	r3, r3, #8
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	4b70      	ldr	r3, [pc, #448]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	496d      	ldr	r1, [pc, #436]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003242:	4b6c      	ldr	r3, [pc, #432]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	021b      	lsls	r3, r3, #8
 8003250:	4968      	ldr	r1, [pc, #416]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003252:	4313      	orrs	r3, r2
 8003254:	604b      	str	r3, [r1, #4]
 8003256:	e025      	b.n	80032a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003258:	4b66      	ldr	r3, [pc, #408]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a65      	ldr	r2, [pc, #404]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 800325e:	f043 0308 	orr.w	r3, r3, #8
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	4b63      	ldr	r3, [pc, #396]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	4960      	ldr	r1, [pc, #384]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003272:	4313      	orrs	r3, r2
 8003274:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003276:	4b5f      	ldr	r3, [pc, #380]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	021b      	lsls	r3, r3, #8
 8003284:	495b      	ldr	r1, [pc, #364]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003286:	4313      	orrs	r3, r2
 8003288:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fd15 	bl	8003cc4 <RCC_SetFlashLatencyFromMSIRange>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e343      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80032a4:	f000 fc4a 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 80032a8:	4602      	mov	r2, r0
 80032aa:	4b52      	ldr	r3, [pc, #328]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	091b      	lsrs	r3, r3, #4
 80032b0:	f003 030f 	and.w	r3, r3, #15
 80032b4:	4950      	ldr	r1, [pc, #320]	; (80033f8 <HAL_RCC_OscConfig+0x274>)
 80032b6:	5ccb      	ldrb	r3, [r1, r3]
 80032b8:	f003 031f 	and.w	r3, r3, #31
 80032bc:	fa22 f303 	lsr.w	r3, r2, r3
 80032c0:	4a4e      	ldr	r2, [pc, #312]	; (80033fc <HAL_RCC_OscConfig+0x278>)
 80032c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80032c4:	4b4e      	ldr	r3, [pc, #312]	; (8003400 <HAL_RCC_OscConfig+0x27c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe f81b 	bl	8001304 <HAL_InitTick>
 80032ce:	4603      	mov	r3, r0
 80032d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d052      	beq.n	800337e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80032d8:	7bfb      	ldrb	r3, [r7, #15]
 80032da:	e327      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d032      	beq.n	800334a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80032e4:	4b43      	ldr	r3, [pc, #268]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a42      	ldr	r2, [pc, #264]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80032ea:	f043 0301 	orr.w	r3, r3, #1
 80032ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032f0:	f7fe f858 	bl	80013a4 <HAL_GetTick>
 80032f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032f8:	f7fe f854 	bl	80013a4 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e310      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800330a:	4b3a      	ldr	r3, [pc, #232]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003316:	4b37      	ldr	r3, [pc, #220]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a36      	ldr	r2, [pc, #216]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 800331c:	f043 0308 	orr.w	r3, r3, #8
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	4b34      	ldr	r3, [pc, #208]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	4931      	ldr	r1, [pc, #196]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003330:	4313      	orrs	r3, r2
 8003332:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003334:	4b2f      	ldr	r3, [pc, #188]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	492c      	ldr	r1, [pc, #176]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
 8003348:	e01a      	b.n	8003380 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800334a:	4b2a      	ldr	r3, [pc, #168]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a29      	ldr	r2, [pc, #164]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003350:	f023 0301 	bic.w	r3, r3, #1
 8003354:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003356:	f7fe f825 	bl	80013a4 <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800335e:	f7fe f821 	bl	80013a4 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e2dd      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003370:	4b20      	ldr	r3, [pc, #128]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1f0      	bne.n	800335e <HAL_RCC_OscConfig+0x1da>
 800337c:	e000      	b.n	8003380 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800337e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d074      	beq.n	8003476 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	2b08      	cmp	r3, #8
 8003390:	d005      	beq.n	800339e <HAL_RCC_OscConfig+0x21a>
 8003392:	69bb      	ldr	r3, [r7, #24]
 8003394:	2b0c      	cmp	r3, #12
 8003396:	d10e      	bne.n	80033b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b03      	cmp	r3, #3
 800339c:	d10b      	bne.n	80033b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339e:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d064      	beq.n	8003474 <HAL_RCC_OscConfig+0x2f0>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d160      	bne.n	8003474 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e2ba      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033be:	d106      	bne.n	80033ce <HAL_RCC_OscConfig+0x24a>
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a0b      	ldr	r2, [pc, #44]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80033c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	e026      	b.n	800341c <HAL_RCC_OscConfig+0x298>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033d6:	d115      	bne.n	8003404 <HAL_RCC_OscConfig+0x280>
 80033d8:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a05      	ldr	r2, [pc, #20]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80033de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033e2:	6013      	str	r3, [r2, #0]
 80033e4:	4b03      	ldr	r3, [pc, #12]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a02      	ldr	r2, [pc, #8]	; (80033f4 <HAL_RCC_OscConfig+0x270>)
 80033ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	e014      	b.n	800341c <HAL_RCC_OscConfig+0x298>
 80033f2:	bf00      	nop
 80033f4:	40021000 	.word	0x40021000
 80033f8:	0800a7b4 	.word	0x0800a7b4
 80033fc:	20000000 	.word	0x20000000
 8003400:	20000004 	.word	0x20000004
 8003404:	4ba0      	ldr	r3, [pc, #640]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a9f      	ldr	r2, [pc, #636]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 800340a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	4b9d      	ldr	r3, [pc, #628]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a9c      	ldr	r2, [pc, #624]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 8003416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d013      	beq.n	800344c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003424:	f7fd ffbe 	bl	80013a4 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800342c:	f7fd ffba 	bl	80013a4 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e276      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800343e:	4b92      	ldr	r3, [pc, #584]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0x2a8>
 800344a:	e014      	b.n	8003476 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fd ffaa 	bl	80013a4 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003454:	f7fd ffa6 	bl	80013a4 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e262      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003466:	4b88      	ldr	r3, [pc, #544]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x2d0>
 8003472:	e000      	b.n	8003476 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d060      	beq.n	8003544 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d005      	beq.n	8003494 <HAL_RCC_OscConfig+0x310>
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	2b0c      	cmp	r3, #12
 800348c:	d119      	bne.n	80034c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b02      	cmp	r3, #2
 8003492:	d116      	bne.n	80034c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003494:	4b7c      	ldr	r3, [pc, #496]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800349c:	2b00      	cmp	r3, #0
 800349e:	d005      	beq.n	80034ac <HAL_RCC_OscConfig+0x328>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e23f      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ac:	4b76      	ldr	r3, [pc, #472]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	061b      	lsls	r3, r3, #24
 80034ba:	4973      	ldr	r1, [pc, #460]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034c0:	e040      	b.n	8003544 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d023      	beq.n	8003512 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ca:	4b6f      	ldr	r3, [pc, #444]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a6e      	ldr	r2, [pc, #440]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 80034d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d6:	f7fd ff65 	bl	80013a4 <HAL_GetTick>
 80034da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034dc:	e008      	b.n	80034f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034de:	f7fd ff61 	bl	80013a4 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d901      	bls.n	80034f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e21d      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034f0:	4b65      	ldr	r3, [pc, #404]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0f0      	beq.n	80034de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fc:	4b62      	ldr	r3, [pc, #392]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	061b      	lsls	r3, r3, #24
 800350a:	495f      	ldr	r1, [pc, #380]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 800350c:	4313      	orrs	r3, r2
 800350e:	604b      	str	r3, [r1, #4]
 8003510:	e018      	b.n	8003544 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003512:	4b5d      	ldr	r3, [pc, #372]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a5c      	ldr	r2, [pc, #368]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 8003518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800351c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351e:	f7fd ff41 	bl	80013a4 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003524:	e008      	b.n	8003538 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003526:	f7fd ff3d 	bl	80013a4 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	2b02      	cmp	r3, #2
 8003532:	d901      	bls.n	8003538 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e1f9      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003538:	4b53      	ldr	r3, [pc, #332]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f0      	bne.n	8003526 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d03c      	beq.n	80035ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01c      	beq.n	8003592 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003558:	4b4b      	ldr	r3, [pc, #300]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 800355a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800355e:	4a4a      	ldr	r2, [pc, #296]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003568:	f7fd ff1c 	bl	80013a4 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003570:	f7fd ff18 	bl	80013a4 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e1d4      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003582:	4b41      	ldr	r3, [pc, #260]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 8003584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0ef      	beq.n	8003570 <HAL_RCC_OscConfig+0x3ec>
 8003590:	e01b      	b.n	80035ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003592:	4b3d      	ldr	r3, [pc, #244]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 8003594:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003598:	4a3b      	ldr	r2, [pc, #236]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 800359a:	f023 0301 	bic.w	r3, r3, #1
 800359e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a2:	f7fd feff 	bl	80013a4 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035aa:	f7fd fefb 	bl	80013a4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e1b7      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035bc:	4b32      	ldr	r3, [pc, #200]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 80035be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1ef      	bne.n	80035aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 80a6 	beq.w	8003724 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d8:	2300      	movs	r3, #0
 80035da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80035dc:	4b2a      	ldr	r3, [pc, #168]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 80035de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10d      	bne.n	8003604 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e8:	4b27      	ldr	r3, [pc, #156]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 80035ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ec:	4a26      	ldr	r2, [pc, #152]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 80035ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f2:	6593      	str	r3, [r2, #88]	; 0x58
 80035f4:	4b24      	ldr	r3, [pc, #144]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003600:	2301      	movs	r3, #1
 8003602:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003604:	4b21      	ldr	r3, [pc, #132]	; (800368c <HAL_RCC_OscConfig+0x508>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d118      	bne.n	8003642 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003610:	4b1e      	ldr	r3, [pc, #120]	; (800368c <HAL_RCC_OscConfig+0x508>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a1d      	ldr	r2, [pc, #116]	; (800368c <HAL_RCC_OscConfig+0x508>)
 8003616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361c:	f7fd fec2 	bl	80013a4 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003624:	f7fd febe 	bl	80013a4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e17a      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <HAL_RCC_OscConfig+0x508>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363e:	2b00      	cmp	r3, #0
 8003640:	d0f0      	beq.n	8003624 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d108      	bne.n	800365c <HAL_RCC_OscConfig+0x4d8>
 800364a:	4b0f      	ldr	r3, [pc, #60]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 800364c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003650:	4a0d      	ldr	r2, [pc, #52]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800365a:	e029      	b.n	80036b0 <HAL_RCC_OscConfig+0x52c>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	2b05      	cmp	r3, #5
 8003662:	d115      	bne.n	8003690 <HAL_RCC_OscConfig+0x50c>
 8003664:	4b08      	ldr	r3, [pc, #32]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	4a07      	ldr	r2, [pc, #28]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 800366c:	f043 0304 	orr.w	r3, r3, #4
 8003670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003674:	4b04      	ldr	r3, [pc, #16]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 8003676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367a:	4a03      	ldr	r2, [pc, #12]	; (8003688 <HAL_RCC_OscConfig+0x504>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003684:	e014      	b.n	80036b0 <HAL_RCC_OscConfig+0x52c>
 8003686:	bf00      	nop
 8003688:	40021000 	.word	0x40021000
 800368c:	40007000 	.word	0x40007000
 8003690:	4b9c      	ldr	r3, [pc, #624]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	4a9b      	ldr	r2, [pc, #620]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 8003698:	f023 0301 	bic.w	r3, r3, #1
 800369c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036a0:	4b98      	ldr	r3, [pc, #608]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a6:	4a97      	ldr	r2, [pc, #604]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 80036a8:	f023 0304 	bic.w	r3, r3, #4
 80036ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d016      	beq.n	80036e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fd fe74 	bl	80013a4 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036be:	e00a      	b.n	80036d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c0:	f7fd fe70 	bl	80013a4 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e12a      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036d6:	4b8b      	ldr	r3, [pc, #556]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 80036d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d0ed      	beq.n	80036c0 <HAL_RCC_OscConfig+0x53c>
 80036e4:	e015      	b.n	8003712 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e6:	f7fd fe5d 	bl	80013a4 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ec:	e00a      	b.n	8003704 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ee:	f7fd fe59 	bl	80013a4 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e113      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003704:	4b7f      	ldr	r3, [pc, #508]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 8003706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1ed      	bne.n	80036ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003712:	7ffb      	ldrb	r3, [r7, #31]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d105      	bne.n	8003724 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003718:	4b7a      	ldr	r3, [pc, #488]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 800371a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371c:	4a79      	ldr	r2, [pc, #484]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 800371e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003722:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80fe 	beq.w	800392a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	2b02      	cmp	r3, #2
 8003734:	f040 80d0 	bne.w	80038d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003738:	4b72      	ldr	r3, [pc, #456]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f003 0203 	and.w	r2, r3, #3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	429a      	cmp	r2, r3
 800374a:	d130      	bne.n	80037ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003756:	3b01      	subs	r3, #1
 8003758:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800375a:	429a      	cmp	r2, r3
 800375c:	d127      	bne.n	80037ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003768:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800376a:	429a      	cmp	r2, r3
 800376c:	d11f      	bne.n	80037ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003778:	2a07      	cmp	r2, #7
 800377a:	bf14      	ite	ne
 800377c:	2201      	movne	r2, #1
 800377e:	2200      	moveq	r2, #0
 8003780:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003782:	4293      	cmp	r3, r2
 8003784:	d113      	bne.n	80037ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003790:	085b      	lsrs	r3, r3, #1
 8003792:	3b01      	subs	r3, #1
 8003794:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003796:	429a      	cmp	r2, r3
 8003798:	d109      	bne.n	80037ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	085b      	lsrs	r3, r3, #1
 80037a6:	3b01      	subs	r3, #1
 80037a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d06e      	beq.n	800388c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	2b0c      	cmp	r3, #12
 80037b2:	d069      	beq.n	8003888 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037b4:	4b53      	ldr	r3, [pc, #332]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d105      	bne.n	80037cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037c0:	4b50      	ldr	r3, [pc, #320]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e0ad      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037d0:	4b4c      	ldr	r3, [pc, #304]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a4b      	ldr	r2, [pc, #300]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 80037d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037dc:	f7fd fde2 	bl	80013a4 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e4:	f7fd fdde 	bl	80013a4 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e09a      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f6:	4b43      	ldr	r3, [pc, #268]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003802:	4b40      	ldr	r3, [pc, #256]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	4b40      	ldr	r3, [pc, #256]	; (8003908 <HAL_RCC_OscConfig+0x784>)
 8003808:	4013      	ands	r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003812:	3a01      	subs	r2, #1
 8003814:	0112      	lsls	r2, r2, #4
 8003816:	4311      	orrs	r1, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800381c:	0212      	lsls	r2, r2, #8
 800381e:	4311      	orrs	r1, r2
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003824:	0852      	lsrs	r2, r2, #1
 8003826:	3a01      	subs	r2, #1
 8003828:	0552      	lsls	r2, r2, #21
 800382a:	4311      	orrs	r1, r2
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003830:	0852      	lsrs	r2, r2, #1
 8003832:	3a01      	subs	r2, #1
 8003834:	0652      	lsls	r2, r2, #25
 8003836:	4311      	orrs	r1, r2
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800383c:	0912      	lsrs	r2, r2, #4
 800383e:	0452      	lsls	r2, r2, #17
 8003840:	430a      	orrs	r2, r1
 8003842:	4930      	ldr	r1, [pc, #192]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 8003844:	4313      	orrs	r3, r2
 8003846:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003848:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a2d      	ldr	r2, [pc, #180]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 800384e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003852:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003854:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	4a2a      	ldr	r2, [pc, #168]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 800385a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800385e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003860:	f7fd fda0 	bl	80013a4 <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003868:	f7fd fd9c 	bl	80013a4 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e058      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800387a:	4b22      	ldr	r3, [pc, #136]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d0f0      	beq.n	8003868 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003886:	e050      	b.n	800392a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e04f      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800388c:	4b1d      	ldr	r3, [pc, #116]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d148      	bne.n	800392a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003898:	4b1a      	ldr	r3, [pc, #104]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a19      	ldr	r2, [pc, #100]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 800389e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038a4:	4b17      	ldr	r3, [pc, #92]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4a16      	ldr	r2, [pc, #88]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 80038aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038b0:	f7fd fd78 	bl	80013a4 <HAL_GetTick>
 80038b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b6:	e008      	b.n	80038ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b8:	f7fd fd74 	bl	80013a4 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d901      	bls.n	80038ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e030      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ca:	4b0e      	ldr	r3, [pc, #56]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d0f0      	beq.n	80038b8 <HAL_RCC_OscConfig+0x734>
 80038d6:	e028      	b.n	800392a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b0c      	cmp	r3, #12
 80038dc:	d023      	beq.n	8003926 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a08      	ldr	r2, [pc, #32]	; (8003904 <HAL_RCC_OscConfig+0x780>)
 80038e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ea:	f7fd fd5b 	bl	80013a4 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f0:	e00c      	b.n	800390c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f2:	f7fd fd57 	bl	80013a4 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d905      	bls.n	800390c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e013      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
 8003904:	40021000 	.word	0x40021000
 8003908:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800390c:	4b09      	ldr	r3, [pc, #36]	; (8003934 <HAL_RCC_OscConfig+0x7b0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1ec      	bne.n	80038f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003918:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCC_OscConfig+0x7b0>)
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	4905      	ldr	r1, [pc, #20]	; (8003934 <HAL_RCC_OscConfig+0x7b0>)
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_RCC_OscConfig+0x7b4>)
 8003920:	4013      	ands	r3, r2
 8003922:	60cb      	str	r3, [r1, #12]
 8003924:	e001      	b.n	800392a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3720      	adds	r7, #32
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000
 8003938:	feeefffc 	.word	0xfeeefffc

0800393c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0e7      	b.n	8003b20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003950:	4b75      	ldr	r3, [pc, #468]	; (8003b28 <HAL_RCC_ClockConfig+0x1ec>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d910      	bls.n	8003980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b72      	ldr	r3, [pc, #456]	; (8003b28 <HAL_RCC_ClockConfig+0x1ec>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 0207 	bic.w	r2, r3, #7
 8003966:	4970      	ldr	r1, [pc, #448]	; (8003b28 <HAL_RCC_ClockConfig+0x1ec>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b6e      	ldr	r3, [pc, #440]	; (8003b28 <HAL_RCC_ClockConfig+0x1ec>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0cf      	b.n	8003b20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d010      	beq.n	80039ae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	4b66      	ldr	r3, [pc, #408]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003998:	429a      	cmp	r2, r3
 800399a:	d908      	bls.n	80039ae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800399c:	4b63      	ldr	r3, [pc, #396]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	4960      	ldr	r1, [pc, #384]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d04c      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d107      	bne.n	80039d2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c2:	4b5a      	ldr	r3, [pc, #360]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d121      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e0a6      	b.n	8003b20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d107      	bne.n	80039ea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039da:	4b54      	ldr	r3, [pc, #336]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d115      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e09a      	b.n	8003b20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d107      	bne.n	8003a02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80039f2:	4b4e      	ldr	r3, [pc, #312]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d109      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e08e      	b.n	8003b20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a02:	4b4a      	ldr	r3, [pc, #296]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e086      	b.n	8003b20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a12:	4b46      	ldr	r3, [pc, #280]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f023 0203 	bic.w	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4943      	ldr	r1, [pc, #268]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003a20:	4313      	orrs	r3, r2
 8003a22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a24:	f7fd fcbe 	bl	80013a4 <HAL_GetTick>
 8003a28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2a:	e00a      	b.n	8003a42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a2c:	f7fd fcba 	bl	80013a4 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e06e      	b.n	8003b20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a42:	4b3a      	ldr	r3, [pc, #232]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f003 020c 	and.w	r2, r3, #12
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d1eb      	bne.n	8003a2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d010      	beq.n	8003a82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689a      	ldr	r2, [r3, #8]
 8003a64:	4b31      	ldr	r3, [pc, #196]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d208      	bcs.n	8003a82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a70:	4b2e      	ldr	r3, [pc, #184]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	492b      	ldr	r1, [pc, #172]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a82:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <HAL_RCC_ClockConfig+0x1ec>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d210      	bcs.n	8003ab2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a90:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_RCC_ClockConfig+0x1ec>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f023 0207 	bic.w	r2, r3, #7
 8003a98:	4923      	ldr	r1, [pc, #140]	; (8003b28 <HAL_RCC_ClockConfig+0x1ec>)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa0:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <HAL_RCC_ClockConfig+0x1ec>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e036      	b.n	8003b20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d008      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003abe:	4b1b      	ldr	r3, [pc, #108]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	4918      	ldr	r1, [pc, #96]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0308 	and.w	r3, r3, #8
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d009      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003adc:	4b13      	ldr	r3, [pc, #76]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4910      	ldr	r1, [pc, #64]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003af0:	f000 f824 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 8003af4:	4602      	mov	r2, r0
 8003af6:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <HAL_RCC_ClockConfig+0x1f0>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	091b      	lsrs	r3, r3, #4
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	490b      	ldr	r1, [pc, #44]	; (8003b30 <HAL_RCC_ClockConfig+0x1f4>)
 8003b02:	5ccb      	ldrb	r3, [r1, r3]
 8003b04:	f003 031f 	and.w	r3, r3, #31
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0c:	4a09      	ldr	r2, [pc, #36]	; (8003b34 <HAL_RCC_ClockConfig+0x1f8>)
 8003b0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b10:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_RCC_ClockConfig+0x1fc>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fd fbf5 	bl	8001304 <HAL_InitTick>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40022000 	.word	0x40022000
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	0800a7b4 	.word	0x0800a7b4
 8003b34:	20000000 	.word	0x20000000
 8003b38:	20000004 	.word	0x20000004

08003b3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b089      	sub	sp, #36	; 0x24
 8003b40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	2300      	movs	r3, #0
 8003b48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b4a:	4b3e      	ldr	r3, [pc, #248]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
 8003b52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b54:	4b3b      	ldr	r3, [pc, #236]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d005      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0x34>
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	2b0c      	cmp	r3, #12
 8003b68:	d121      	bne.n	8003bae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d11e      	bne.n	8003bae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b70:	4b34      	ldr	r3, [pc, #208]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d107      	bne.n	8003b8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b7c:	4b31      	ldr	r3, [pc, #196]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b82:	0a1b      	lsrs	r3, r3, #8
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	61fb      	str	r3, [r7, #28]
 8003b8a:	e005      	b.n	8003b98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b8c:	4b2d      	ldr	r3, [pc, #180]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	091b      	lsrs	r3, r3, #4
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b98:	4a2b      	ldr	r2, [pc, #172]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d10d      	bne.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bac:	e00a      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b04      	cmp	r3, #4
 8003bb2:	d102      	bne.n	8003bba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x110>)
 8003bb6:	61bb      	str	r3, [r7, #24]
 8003bb8:	e004      	b.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d101      	bne.n	8003bc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003bc0:	4b23      	ldr	r3, [pc, #140]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	2b0c      	cmp	r3, #12
 8003bc8:	d134      	bne.n	8003c34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003bca:	4b1e      	ldr	r3, [pc, #120]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	f003 0303 	and.w	r3, r3, #3
 8003bd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d003      	beq.n	8003be2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d003      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0xac>
 8003be0:	e005      	b.n	8003bee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003be2:	4b1a      	ldr	r3, [pc, #104]	; (8003c4c <HAL_RCC_GetSysClockFreq+0x110>)
 8003be4:	617b      	str	r3, [r7, #20]
      break;
 8003be6:	e005      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003be8:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <HAL_RCC_GetSysClockFreq+0x114>)
 8003bea:	617b      	str	r3, [r7, #20]
      break;
 8003bec:	e002      	b.n	8003bf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	617b      	str	r3, [r7, #20]
      break;
 8003bf2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bf4:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	091b      	lsrs	r3, r3, #4
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	3301      	adds	r3, #1
 8003c00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	0a1b      	lsrs	r3, r3, #8
 8003c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	fb03 f202 	mul.w	r2, r3, r2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c1a:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	0e5b      	lsrs	r3, r3, #25
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	3301      	adds	r3, #1
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c34:	69bb      	ldr	r3, [r7, #24]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3724      	adds	r7, #36	; 0x24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000
 8003c48:	0800a7cc 	.word	0x0800a7cc
 8003c4c:	00f42400 	.word	0x00f42400
 8003c50:	007a1200 	.word	0x007a1200

08003c54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000000 	.word	0x20000000

08003c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c70:	f7ff fff0 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8003c74:	4602      	mov	r2, r0
 8003c76:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	0a1b      	lsrs	r3, r3, #8
 8003c7c:	f003 0307 	and.w	r3, r3, #7
 8003c80:	4904      	ldr	r1, [pc, #16]	; (8003c94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c82:	5ccb      	ldrb	r3, [r1, r3]
 8003c84:	f003 031f 	and.w	r3, r3, #31
 8003c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40021000 	.word	0x40021000
 8003c94:	0800a7c4 	.word	0x0800a7c4

08003c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c9c:	f7ff ffda 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	0adb      	lsrs	r3, r3, #11
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	4904      	ldr	r1, [pc, #16]	; (8003cc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003cae:	5ccb      	ldrb	r3, [r1, r3]
 8003cb0:	f003 031f 	and.w	r3, r3, #31
 8003cb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	0800a7c4 	.word	0x0800a7c4

08003cc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ccc:	2300      	movs	r3, #0
 8003cce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cd0:	4b2a      	ldr	r3, [pc, #168]	; (8003d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003cdc:	f7ff f9ee 	bl	80030bc <HAL_PWREx_GetVoltageRange>
 8003ce0:	6178      	str	r0, [r7, #20]
 8003ce2:	e014      	b.n	8003d0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ce4:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce8:	4a24      	ldr	r2, [pc, #144]	; (8003d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cee:	6593      	str	r3, [r2, #88]	; 0x58
 8003cf0:	4b22      	ldr	r3, [pc, #136]	; (8003d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	60fb      	str	r3, [r7, #12]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003cfc:	f7ff f9de 	bl	80030bc <HAL_PWREx_GetVoltageRange>
 8003d00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d02:	4b1e      	ldr	r3, [pc, #120]	; (8003d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d06:	4a1d      	ldr	r2, [pc, #116]	; (8003d7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d14:	d10b      	bne.n	8003d2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b80      	cmp	r3, #128	; 0x80
 8003d1a:	d919      	bls.n	8003d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2ba0      	cmp	r3, #160	; 0xa0
 8003d20:	d902      	bls.n	8003d28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d22:	2302      	movs	r3, #2
 8003d24:	613b      	str	r3, [r7, #16]
 8003d26:	e013      	b.n	8003d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d28:	2301      	movs	r3, #1
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	e010      	b.n	8003d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b80      	cmp	r3, #128	; 0x80
 8003d32:	d902      	bls.n	8003d3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d34:	2303      	movs	r3, #3
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	e00a      	b.n	8003d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b80      	cmp	r3, #128	; 0x80
 8003d3e:	d102      	bne.n	8003d46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d40:	2302      	movs	r3, #2
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	e004      	b.n	8003d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b70      	cmp	r3, #112	; 0x70
 8003d4a:	d101      	bne.n	8003d50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 0207 	bic.w	r2, r3, #7
 8003d58:	4909      	ldr	r1, [pc, #36]	; (8003d80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d60:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d001      	beq.n	8003d72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	40022000 	.word	0x40022000

08003d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d90:	2300      	movs	r3, #0
 8003d92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d041      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003da4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003da8:	d02a      	beq.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003daa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003dae:	d824      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003db0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003db4:	d008      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003db6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003dba:	d81e      	bhi.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00a      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc4:	d010      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003dc6:	e018      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dc8:	4b86      	ldr	r3, [pc, #536]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	4a85      	ldr	r2, [pc, #532]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dd2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dd4:	e015      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3304      	adds	r3, #4
 8003dda:	2100      	movs	r1, #0
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fabb 	bl	8004358 <RCCEx_PLLSAI1_Config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003de6:	e00c      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3320      	adds	r3, #32
 8003dec:	2100      	movs	r1, #0
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fba6 	bl	8004540 <RCCEx_PLLSAI2_Config>
 8003df4:	4603      	mov	r3, r0
 8003df6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003df8:	e003      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	74fb      	strb	r3, [r7, #19]
      break;
 8003dfe:	e000      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e02:	7cfb      	ldrb	r3, [r7, #19]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10b      	bne.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e08:	4b76      	ldr	r3, [pc, #472]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e16:	4973      	ldr	r1, [pc, #460]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003e1e:	e001      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e20:	7cfb      	ldrb	r3, [r7, #19]
 8003e22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d041      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e38:	d02a      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003e3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003e3e:	d824      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e44:	d008      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e4a:	d81e      	bhi.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e54:	d010      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e56:	e018      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e58:	4b62      	ldr	r3, [pc, #392]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	4a61      	ldr	r2, [pc, #388]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e64:	e015      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	3304      	adds	r3, #4
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 fa73 	bl	8004358 <RCCEx_PLLSAI1_Config>
 8003e72:	4603      	mov	r3, r0
 8003e74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e76:	e00c      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3320      	adds	r3, #32
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f000 fb5e 	bl	8004540 <RCCEx_PLLSAI2_Config>
 8003e84:	4603      	mov	r3, r0
 8003e86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e88:	e003      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	74fb      	strb	r3, [r7, #19]
      break;
 8003e8e:	e000      	b.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e92:	7cfb      	ldrb	r3, [r7, #19]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10b      	bne.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e98:	4b52      	ldr	r3, [pc, #328]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ea6:	494f      	ldr	r1, [pc, #316]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003eae:	e001      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 80a0 	beq.w	8004002 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ec6:	4b47      	ldr	r3, [pc, #284]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00d      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003edc:	4b41      	ldr	r3, [pc, #260]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee0:	4a40      	ldr	r2, [pc, #256]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ee8:	4b3e      	ldr	r3, [pc, #248]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef8:	4b3b      	ldr	r3, [pc, #236]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a3a      	ldr	r2, [pc, #232]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f04:	f7fd fa4e 	bl	80013a4 <HAL_GetTick>
 8003f08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f0a:	e009      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f0c:	f7fd fa4a 	bl	80013a4 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d902      	bls.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	74fb      	strb	r3, [r7, #19]
        break;
 8003f1e:	e005      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f20:	4b31      	ldr	r3, [pc, #196]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0ef      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f2c:	7cfb      	ldrb	r3, [r7, #19]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d15c      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f32:	4b2c      	ldr	r3, [pc, #176]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d01f      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d019      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f50:	4b24      	ldr	r3, [pc, #144]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f5c:	4b21      	ldr	r3, [pc, #132]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f62:	4a20      	ldr	r2, [pc, #128]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f6c:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f72:	4a1c      	ldr	r2, [pc, #112]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f7c:	4a19      	ldr	r2, [pc, #100]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8e:	f7fd fa09 	bl	80013a4 <HAL_GetTick>
 8003f92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f94:	e00b      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f96:	f7fd fa05 	bl	80013a4 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d902      	bls.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	74fb      	strb	r3, [r7, #19]
            break;
 8003fac:	e006      	b.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fae:	4b0d      	ldr	r3, [pc, #52]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0ec      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003fbc:	7cfb      	ldrb	r3, [r7, #19]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10c      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd2:	4904      	ldr	r1, [pc, #16]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fda:	e009      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fdc:	7cfb      	ldrb	r3, [r7, #19]
 8003fde:	74bb      	strb	r3, [r7, #18]
 8003fe0:	e006      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003fe2:	bf00      	nop
 8003fe4:	40021000 	.word	0x40021000
 8003fe8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fec:	7cfb      	ldrb	r3, [r7, #19]
 8003fee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ff0:	7c7b      	ldrb	r3, [r7, #17]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d105      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff6:	4b9e      	ldr	r3, [pc, #632]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	4a9d      	ldr	r2, [pc, #628]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004000:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0301 	and.w	r3, r3, #1
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800400e:	4b98      	ldr	r3, [pc, #608]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004014:	f023 0203 	bic.w	r2, r3, #3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800401c:	4994      	ldr	r1, [pc, #592]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401e:	4313      	orrs	r3, r2
 8004020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0302 	and.w	r3, r3, #2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00a      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004030:	4b8f      	ldr	r3, [pc, #572]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	f023 020c 	bic.w	r2, r3, #12
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800403e:	498c      	ldr	r1, [pc, #560]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00a      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004052:	4b87      	ldr	r3, [pc, #540]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004054:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004058:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	4983      	ldr	r1, [pc, #524]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004062:	4313      	orrs	r3, r2
 8004064:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00a      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004074:	4b7e      	ldr	r3, [pc, #504]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004082:	497b      	ldr	r1, [pc, #492]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004084:	4313      	orrs	r3, r2
 8004086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00a      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004096:	4b76      	ldr	r3, [pc, #472]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a4:	4972      	ldr	r1, [pc, #456]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0320 	and.w	r3, r3, #32
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d00a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040b8:	4b6d      	ldr	r3, [pc, #436]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c6:	496a      	ldr	r1, [pc, #424]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00a      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040da:	4b65      	ldr	r3, [pc, #404]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040e8:	4961      	ldr	r1, [pc, #388]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040fc:	4b5c      	ldr	r3, [pc, #368]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004102:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800410a:	4959      	ldr	r1, [pc, #356]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800411e:	4b54      	ldr	r3, [pc, #336]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004124:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412c:	4950      	ldr	r1, [pc, #320]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004140:	4b4b      	ldr	r3, [pc, #300]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004146:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800414e:	4948      	ldr	r1, [pc, #288]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004162:	4b43      	ldr	r3, [pc, #268]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004168:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004170:	493f      	ldr	r1, [pc, #252]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d028      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004184:	4b3a      	ldr	r3, [pc, #232]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004192:	4937      	ldr	r1, [pc, #220]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800419e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041a2:	d106      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041a4:	4b32      	ldr	r3, [pc, #200]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	4a31      	ldr	r2, [pc, #196]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ae:	60d3      	str	r3, [r2, #12]
 80041b0:	e011      	b.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041ba:	d10c      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3304      	adds	r3, #4
 80041c0:	2101      	movs	r1, #1
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 f8c8 	bl	8004358 <RCCEx_PLLSAI1_Config>
 80041c8:	4603      	mov	r3, r0
 80041ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041cc:	7cfb      	ldrb	r3, [r7, #19]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d001      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80041d2:	7cfb      	ldrb	r3, [r7, #19]
 80041d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d028      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041e2:	4b23      	ldr	r3, [pc, #140]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f0:	491f      	ldr	r1, [pc, #124]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004200:	d106      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004202:	4b1b      	ldr	r3, [pc, #108]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	4a1a      	ldr	r2, [pc, #104]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004208:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800420c:	60d3      	str	r3, [r2, #12]
 800420e:	e011      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004218:	d10c      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	3304      	adds	r3, #4
 800421e:	2101      	movs	r1, #1
 8004220:	4618      	mov	r0, r3
 8004222:	f000 f899 	bl	8004358 <RCCEx_PLLSAI1_Config>
 8004226:	4603      	mov	r3, r0
 8004228:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800422a:	7cfb      	ldrb	r3, [r7, #19]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004230:	7cfb      	ldrb	r3, [r7, #19]
 8004232:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d02b      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004246:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800424e:	4908      	ldr	r1, [pc, #32]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800425e:	d109      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004260:	4b03      	ldr	r3, [pc, #12]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4a02      	ldr	r2, [pc, #8]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004266:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800426a:	60d3      	str	r3, [r2, #12]
 800426c:	e014      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800426e:	bf00      	nop
 8004270:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004278:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800427c:	d10c      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3304      	adds	r3, #4
 8004282:	2101      	movs	r1, #1
 8004284:	4618      	mov	r0, r3
 8004286:	f000 f867 	bl	8004358 <RCCEx_PLLSAI1_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800428e:	7cfb      	ldrb	r3, [r7, #19]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004294:	7cfb      	ldrb	r3, [r7, #19]
 8004296:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d02f      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042a4:	4b2b      	ldr	r3, [pc, #172]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042b2:	4928      	ldr	r1, [pc, #160]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042c2:	d10d      	bne.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3304      	adds	r3, #4
 80042c8:	2102      	movs	r1, #2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 f844 	bl	8004358 <RCCEx_PLLSAI1_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042d4:	7cfb      	ldrb	r3, [r7, #19]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d014      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042da:	7cfb      	ldrb	r3, [r7, #19]
 80042dc:	74bb      	strb	r3, [r7, #18]
 80042de:	e011      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80042e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042e8:	d10c      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3320      	adds	r3, #32
 80042ee:	2102      	movs	r1, #2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 f925 	bl	8004540 <RCCEx_PLLSAI2_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042fa:	7cfb      	ldrb	r3, [r7, #19]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d001      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004300:	7cfb      	ldrb	r3, [r7, #19]
 8004302:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004310:	4b10      	ldr	r3, [pc, #64]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004316:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800431e:	490d      	ldr	r1, [pc, #52]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004320:	4313      	orrs	r3, r2
 8004322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004342:	4904      	ldr	r1, [pc, #16]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800434a:	7cbb      	ldrb	r3, [r7, #18]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3718      	adds	r7, #24
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	40021000 	.word	0x40021000

08004358 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004362:	2300      	movs	r3, #0
 8004364:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004366:	4b75      	ldr	r3, [pc, #468]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	f003 0303 	and.w	r3, r3, #3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d018      	beq.n	80043a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004372:	4b72      	ldr	r3, [pc, #456]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f003 0203 	and.w	r2, r3, #3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	429a      	cmp	r2, r3
 8004380:	d10d      	bne.n	800439e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
       ||
 8004386:	2b00      	cmp	r3, #0
 8004388:	d009      	beq.n	800439e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800438a:	4b6c      	ldr	r3, [pc, #432]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	091b      	lsrs	r3, r3, #4
 8004390:	f003 0307 	and.w	r3, r3, #7
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
       ||
 800439a:	429a      	cmp	r2, r3
 800439c:	d047      	beq.n	800442e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	73fb      	strb	r3, [r7, #15]
 80043a2:	e044      	b.n	800442e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b03      	cmp	r3, #3
 80043aa:	d018      	beq.n	80043de <RCCEx_PLLSAI1_Config+0x86>
 80043ac:	2b03      	cmp	r3, #3
 80043ae:	d825      	bhi.n	80043fc <RCCEx_PLLSAI1_Config+0xa4>
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d002      	beq.n	80043ba <RCCEx_PLLSAI1_Config+0x62>
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d009      	beq.n	80043cc <RCCEx_PLLSAI1_Config+0x74>
 80043b8:	e020      	b.n	80043fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043ba:	4b60      	ldr	r3, [pc, #384]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d11d      	bne.n	8004402 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043ca:	e01a      	b.n	8004402 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043cc:	4b5b      	ldr	r3, [pc, #364]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d116      	bne.n	8004406 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043dc:	e013      	b.n	8004406 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043de:	4b57      	ldr	r3, [pc, #348]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d10f      	bne.n	800440a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043ea:	4b54      	ldr	r3, [pc, #336]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80043fa:	e006      	b.n	800440a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004400:	e004      	b.n	800440c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004402:	bf00      	nop
 8004404:	e002      	b.n	800440c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800440a:	bf00      	nop
    }

    if(status == HAL_OK)
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10d      	bne.n	800442e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004412:	4b4a      	ldr	r3, [pc, #296]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6819      	ldr	r1, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	3b01      	subs	r3, #1
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	430b      	orrs	r3, r1
 8004428:	4944      	ldr	r1, [pc, #272]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 800442a:	4313      	orrs	r3, r2
 800442c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800442e:	7bfb      	ldrb	r3, [r7, #15]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d17d      	bne.n	8004530 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004434:	4b41      	ldr	r3, [pc, #260]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a40      	ldr	r2, [pc, #256]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 800443a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800443e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004440:	f7fc ffb0 	bl	80013a4 <HAL_GetTick>
 8004444:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004446:	e009      	b.n	800445c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004448:	f7fc ffac 	bl	80013a4 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d902      	bls.n	800445c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	73fb      	strb	r3, [r7, #15]
        break;
 800445a:	e005      	b.n	8004468 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800445c:	4b37      	ldr	r3, [pc, #220]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1ef      	bne.n	8004448 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d160      	bne.n	8004530 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d111      	bne.n	8004498 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004474:	4b31      	ldr	r3, [pc, #196]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800447c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6892      	ldr	r2, [r2, #8]
 8004484:	0211      	lsls	r1, r2, #8
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68d2      	ldr	r2, [r2, #12]
 800448a:	0912      	lsrs	r2, r2, #4
 800448c:	0452      	lsls	r2, r2, #17
 800448e:	430a      	orrs	r2, r1
 8004490:	492a      	ldr	r1, [pc, #168]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004492:	4313      	orrs	r3, r2
 8004494:	610b      	str	r3, [r1, #16]
 8004496:	e027      	b.n	80044e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d112      	bne.n	80044c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800449e:	4b27      	ldr	r3, [pc, #156]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80044a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6892      	ldr	r2, [r2, #8]
 80044ae:	0211      	lsls	r1, r2, #8
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6912      	ldr	r2, [r2, #16]
 80044b4:	0852      	lsrs	r2, r2, #1
 80044b6:	3a01      	subs	r2, #1
 80044b8:	0552      	lsls	r2, r2, #21
 80044ba:	430a      	orrs	r2, r1
 80044bc:	491f      	ldr	r1, [pc, #124]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	610b      	str	r3, [r1, #16]
 80044c2:	e011      	b.n	80044e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044c4:	4b1d      	ldr	r3, [pc, #116]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80044cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6892      	ldr	r2, [r2, #8]
 80044d4:	0211      	lsls	r1, r2, #8
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6952      	ldr	r2, [r2, #20]
 80044da:	0852      	lsrs	r2, r2, #1
 80044dc:	3a01      	subs	r2, #1
 80044de:	0652      	lsls	r2, r2, #25
 80044e0:	430a      	orrs	r2, r1
 80044e2:	4916      	ldr	r1, [pc, #88]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044e8:	4b14      	ldr	r3, [pc, #80]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a13      	ldr	r2, [pc, #76]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fc ff56 	bl	80013a4 <HAL_GetTick>
 80044f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80044fa:	e009      	b.n	8004510 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044fc:	f7fc ff52 	bl	80013a4 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d902      	bls.n	8004510 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	73fb      	strb	r3, [r7, #15]
          break;
 800450e:	e005      	b.n	800451c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004510:	4b0a      	ldr	r3, [pc, #40]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0ef      	beq.n	80044fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800451c:	7bfb      	ldrb	r3, [r7, #15]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004522:	4b06      	ldr	r3, [pc, #24]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	4904      	ldr	r1, [pc, #16]	; (800453c <RCCEx_PLLSAI1_Config+0x1e4>)
 800452c:	4313      	orrs	r3, r2
 800452e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004530:	7bfb      	ldrb	r3, [r7, #15]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000

08004540 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800454e:	4b6a      	ldr	r3, [pc, #424]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f003 0303 	and.w	r3, r3, #3
 8004556:	2b00      	cmp	r3, #0
 8004558:	d018      	beq.n	800458c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800455a:	4b67      	ldr	r3, [pc, #412]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f003 0203 	and.w	r2, r3, #3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d10d      	bne.n	8004586 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
       ||
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004572:	4b61      	ldr	r3, [pc, #388]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	091b      	lsrs	r3, r3, #4
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
       ||
 8004582:	429a      	cmp	r2, r3
 8004584:	d047      	beq.n	8004616 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	73fb      	strb	r3, [r7, #15]
 800458a:	e044      	b.n	8004616 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2b03      	cmp	r3, #3
 8004592:	d018      	beq.n	80045c6 <RCCEx_PLLSAI2_Config+0x86>
 8004594:	2b03      	cmp	r3, #3
 8004596:	d825      	bhi.n	80045e4 <RCCEx_PLLSAI2_Config+0xa4>
 8004598:	2b01      	cmp	r3, #1
 800459a:	d002      	beq.n	80045a2 <RCCEx_PLLSAI2_Config+0x62>
 800459c:	2b02      	cmp	r3, #2
 800459e:	d009      	beq.n	80045b4 <RCCEx_PLLSAI2_Config+0x74>
 80045a0:	e020      	b.n	80045e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045a2:	4b55      	ldr	r3, [pc, #340]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d11d      	bne.n	80045ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b2:	e01a      	b.n	80045ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045b4:	4b50      	ldr	r3, [pc, #320]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d116      	bne.n	80045ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c4:	e013      	b.n	80045ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045c6:	4b4c      	ldr	r3, [pc, #304]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10f      	bne.n	80045f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045d2:	4b49      	ldr	r3, [pc, #292]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045e2:	e006      	b.n	80045f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	73fb      	strb	r3, [r7, #15]
      break;
 80045e8:	e004      	b.n	80045f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045ea:	bf00      	nop
 80045ec:	e002      	b.n	80045f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045ee:	bf00      	nop
 80045f0:	e000      	b.n	80045f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d10d      	bne.n	8004616 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045fa:	4b3f      	ldr	r3, [pc, #252]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6819      	ldr	r1, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	3b01      	subs	r3, #1
 800460c:	011b      	lsls	r3, r3, #4
 800460e:	430b      	orrs	r3, r1
 8004610:	4939      	ldr	r1, [pc, #228]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004612:	4313      	orrs	r3, r2
 8004614:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d167      	bne.n	80046ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800461c:	4b36      	ldr	r3, [pc, #216]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a35      	ldr	r2, [pc, #212]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004628:	f7fc febc 	bl	80013a4 <HAL_GetTick>
 800462c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800462e:	e009      	b.n	8004644 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004630:	f7fc feb8 	bl	80013a4 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d902      	bls.n	8004644 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	73fb      	strb	r3, [r7, #15]
        break;
 8004642:	e005      	b.n	8004650 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004644:	4b2c      	ldr	r3, [pc, #176]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1ef      	bne.n	8004630 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004650:	7bfb      	ldrb	r3, [r7, #15]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d14a      	bne.n	80046ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d111      	bne.n	8004680 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800465c:	4b26      	ldr	r3, [pc, #152]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004664:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	6892      	ldr	r2, [r2, #8]
 800466c:	0211      	lsls	r1, r2, #8
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68d2      	ldr	r2, [r2, #12]
 8004672:	0912      	lsrs	r2, r2, #4
 8004674:	0452      	lsls	r2, r2, #17
 8004676:	430a      	orrs	r2, r1
 8004678:	491f      	ldr	r1, [pc, #124]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800467a:	4313      	orrs	r3, r2
 800467c:	614b      	str	r3, [r1, #20]
 800467e:	e011      	b.n	80046a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004680:	4b1d      	ldr	r3, [pc, #116]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004688:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6892      	ldr	r2, [r2, #8]
 8004690:	0211      	lsls	r1, r2, #8
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6912      	ldr	r2, [r2, #16]
 8004696:	0852      	lsrs	r2, r2, #1
 8004698:	3a01      	subs	r2, #1
 800469a:	0652      	lsls	r2, r2, #25
 800469c:	430a      	orrs	r2, r1
 800469e:	4916      	ldr	r1, [pc, #88]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046a4:	4b14      	ldr	r3, [pc, #80]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a13      	ldr	r2, [pc, #76]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b0:	f7fc fe78 	bl	80013a4 <HAL_GetTick>
 80046b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046b6:	e009      	b.n	80046cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046b8:	f7fc fe74 	bl	80013a4 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d902      	bls.n	80046cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	73fb      	strb	r3, [r7, #15]
          break;
 80046ca:	e005      	b.n	80046d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046cc:	4b0a      	ldr	r3, [pc, #40]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0ef      	beq.n	80046b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046de:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e0:	695a      	ldr	r2, [r3, #20]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	4904      	ldr	r1, [pc, #16]	; (80046f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	40021000 	.word	0x40021000

080046fc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d101      	bne.n	800470e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e049      	b.n	80047a2 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d106      	bne.n	8004728 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7fc fbf6 	bl	8000f14 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	3304      	adds	r3, #4
 8004738:	4619      	mov	r1, r3
 800473a:	4610      	mov	r0, r2
 800473c:	f000 f8b0 	bl	80048a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2201      	movs	r2, #1
 8004764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2201      	movs	r2, #1
 8004774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047b8:	2300      	movs	r3, #0
 80047ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d101      	bne.n	80047ca <HAL_TIM_OC_ConfigChannel+0x1e>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e066      	b.n	8004898 <HAL_TIM_OC_ConfigChannel+0xec>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b14      	cmp	r3, #20
 80047d6:	d857      	bhi.n	8004888 <HAL_TIM_OC_ConfigChannel+0xdc>
 80047d8:	a201      	add	r2, pc, #4	; (adr r2, 80047e0 <HAL_TIM_OC_ConfigChannel+0x34>)
 80047da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047de:	bf00      	nop
 80047e0:	08004835 	.word	0x08004835
 80047e4:	08004889 	.word	0x08004889
 80047e8:	08004889 	.word	0x08004889
 80047ec:	08004889 	.word	0x08004889
 80047f0:	08004843 	.word	0x08004843
 80047f4:	08004889 	.word	0x08004889
 80047f8:	08004889 	.word	0x08004889
 80047fc:	08004889 	.word	0x08004889
 8004800:	08004851 	.word	0x08004851
 8004804:	08004889 	.word	0x08004889
 8004808:	08004889 	.word	0x08004889
 800480c:	08004889 	.word	0x08004889
 8004810:	0800485f 	.word	0x0800485f
 8004814:	08004889 	.word	0x08004889
 8004818:	08004889 	.word	0x08004889
 800481c:	08004889 	.word	0x08004889
 8004820:	0800486d 	.word	0x0800486d
 8004824:	08004889 	.word	0x08004889
 8004828:	08004889 	.word	0x08004889
 800482c:	08004889 	.word	0x08004889
 8004830:	0800487b 	.word	0x0800487b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 f8ca 	bl	80049d4 <TIM_OC1_SetConfig>
      break;
 8004840:	e025      	b.n	800488e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68b9      	ldr	r1, [r7, #8]
 8004848:	4618      	mov	r0, r3
 800484a:	f000 f953 	bl	8004af4 <TIM_OC2_SetConfig>
      break;
 800484e:	e01e      	b.n	800488e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68b9      	ldr	r1, [r7, #8]
 8004856:	4618      	mov	r0, r3
 8004858:	f000 f9d6 	bl	8004c08 <TIM_OC3_SetConfig>
      break;
 800485c:	e017      	b.n	800488e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68b9      	ldr	r1, [r7, #8]
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fa57 	bl	8004d18 <TIM_OC4_SetConfig>
      break;
 800486a:	e010      	b.n	800488e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	4618      	mov	r0, r3
 8004874:	f000 faba 	bl	8004dec <TIM_OC5_SetConfig>
      break;
 8004878:	e009      	b.n	800488e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68b9      	ldr	r1, [r7, #8]
 8004880:	4618      	mov	r0, r3
 8004882:	f000 fb17 	bl	8004eb4 <TIM_OC6_SetConfig>
      break;
 8004886:	e002      	b.n	800488e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	75fb      	strb	r3, [r7, #23]
      break;
 800488c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004896:	7dfb      	ldrb	r3, [r7, #23]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a40      	ldr	r2, [pc, #256]	; (80049b4 <TIM_Base_SetConfig+0x114>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d013      	beq.n	80048e0 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048be:	d00f      	beq.n	80048e0 <TIM_Base_SetConfig+0x40>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a3d      	ldr	r2, [pc, #244]	; (80049b8 <TIM_Base_SetConfig+0x118>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d00b      	beq.n	80048e0 <TIM_Base_SetConfig+0x40>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a3c      	ldr	r2, [pc, #240]	; (80049bc <TIM_Base_SetConfig+0x11c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d007      	beq.n	80048e0 <TIM_Base_SetConfig+0x40>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a3b      	ldr	r2, [pc, #236]	; (80049c0 <TIM_Base_SetConfig+0x120>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d003      	beq.n	80048e0 <TIM_Base_SetConfig+0x40>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a3a      	ldr	r2, [pc, #232]	; (80049c4 <TIM_Base_SetConfig+0x124>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d108      	bne.n	80048f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2f      	ldr	r2, [pc, #188]	; (80049b4 <TIM_Base_SetConfig+0x114>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01f      	beq.n	800493a <TIM_Base_SetConfig+0x9a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004900:	d01b      	beq.n	800493a <TIM_Base_SetConfig+0x9a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2c      	ldr	r2, [pc, #176]	; (80049b8 <TIM_Base_SetConfig+0x118>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d017      	beq.n	800493a <TIM_Base_SetConfig+0x9a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2b      	ldr	r2, [pc, #172]	; (80049bc <TIM_Base_SetConfig+0x11c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d013      	beq.n	800493a <TIM_Base_SetConfig+0x9a>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a2a      	ldr	r2, [pc, #168]	; (80049c0 <TIM_Base_SetConfig+0x120>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00f      	beq.n	800493a <TIM_Base_SetConfig+0x9a>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a29      	ldr	r2, [pc, #164]	; (80049c4 <TIM_Base_SetConfig+0x124>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00b      	beq.n	800493a <TIM_Base_SetConfig+0x9a>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a28      	ldr	r2, [pc, #160]	; (80049c8 <TIM_Base_SetConfig+0x128>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d007      	beq.n	800493a <TIM_Base_SetConfig+0x9a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a27      	ldr	r2, [pc, #156]	; (80049cc <TIM_Base_SetConfig+0x12c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d003      	beq.n	800493a <TIM_Base_SetConfig+0x9a>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a26      	ldr	r2, [pc, #152]	; (80049d0 <TIM_Base_SetConfig+0x130>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d108      	bne.n	800494c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a10      	ldr	r2, [pc, #64]	; (80049b4 <TIM_Base_SetConfig+0x114>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d00f      	beq.n	8004998 <TIM_Base_SetConfig+0xf8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a12      	ldr	r2, [pc, #72]	; (80049c4 <TIM_Base_SetConfig+0x124>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00b      	beq.n	8004998 <TIM_Base_SetConfig+0xf8>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a11      	ldr	r2, [pc, #68]	; (80049c8 <TIM_Base_SetConfig+0x128>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d007      	beq.n	8004998 <TIM_Base_SetConfig+0xf8>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a10      	ldr	r2, [pc, #64]	; (80049cc <TIM_Base_SetConfig+0x12c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_Base_SetConfig+0xf8>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a0f      	ldr	r2, [pc, #60]	; (80049d0 <TIM_Base_SetConfig+0x130>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d103      	bne.n	80049a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	615a      	str	r2, [r3, #20]
}
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	40012c00 	.word	0x40012c00
 80049b8:	40000400 	.word	0x40000400
 80049bc:	40000800 	.word	0x40000800
 80049c0:	40000c00 	.word	0x40000c00
 80049c4:	40013400 	.word	0x40013400
 80049c8:	40014000 	.word	0x40014000
 80049cc:	40014400 	.word	0x40014400
 80049d0:	40014800 	.word	0x40014800

080049d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	f023 0201 	bic.w	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f023 0303 	bic.w	r3, r3, #3
 8004a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f023 0302 	bic.w	r3, r3, #2
 8004a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a2c      	ldr	r2, [pc, #176]	; (8004ae0 <TIM_OC1_SetConfig+0x10c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00f      	beq.n	8004a54 <TIM_OC1_SetConfig+0x80>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a2b      	ldr	r2, [pc, #172]	; (8004ae4 <TIM_OC1_SetConfig+0x110>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00b      	beq.n	8004a54 <TIM_OC1_SetConfig+0x80>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a2a      	ldr	r2, [pc, #168]	; (8004ae8 <TIM_OC1_SetConfig+0x114>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d007      	beq.n	8004a54 <TIM_OC1_SetConfig+0x80>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a29      	ldr	r2, [pc, #164]	; (8004aec <TIM_OC1_SetConfig+0x118>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_OC1_SetConfig+0x80>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a28      	ldr	r2, [pc, #160]	; (8004af0 <TIM_OC1_SetConfig+0x11c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d10c      	bne.n	8004a6e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f023 0308 	bic.w	r3, r3, #8
 8004a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	697a      	ldr	r2, [r7, #20]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f023 0304 	bic.w	r3, r3, #4
 8004a6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a1b      	ldr	r2, [pc, #108]	; (8004ae0 <TIM_OC1_SetConfig+0x10c>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d00f      	beq.n	8004a96 <TIM_OC1_SetConfig+0xc2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a1a      	ldr	r2, [pc, #104]	; (8004ae4 <TIM_OC1_SetConfig+0x110>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00b      	beq.n	8004a96 <TIM_OC1_SetConfig+0xc2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a19      	ldr	r2, [pc, #100]	; (8004ae8 <TIM_OC1_SetConfig+0x114>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d007      	beq.n	8004a96 <TIM_OC1_SetConfig+0xc2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a18      	ldr	r2, [pc, #96]	; (8004aec <TIM_OC1_SetConfig+0x118>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d003      	beq.n	8004a96 <TIM_OC1_SetConfig+0xc2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a17      	ldr	r2, [pc, #92]	; (8004af0 <TIM_OC1_SetConfig+0x11c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d111      	bne.n	8004aba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	68fa      	ldr	r2, [r7, #12]
 8004ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	621a      	str	r2, [r3, #32]
}
 8004ad4:	bf00      	nop
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	40012c00 	.word	0x40012c00
 8004ae4:	40013400 	.word	0x40013400
 8004ae8:	40014000 	.word	0x40014000
 8004aec:	40014400 	.word	0x40014400
 8004af0:	40014800 	.word	0x40014800

08004af4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a1b      	ldr	r3, [r3, #32]
 8004b08:	f023 0210 	bic.w	r2, r3, #16
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f023 0320 	bic.w	r3, r3, #32
 8004b42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a28      	ldr	r2, [pc, #160]	; (8004bf4 <TIM_OC2_SetConfig+0x100>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d003      	beq.n	8004b60 <TIM_OC2_SetConfig+0x6c>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a27      	ldr	r2, [pc, #156]	; (8004bf8 <TIM_OC2_SetConfig+0x104>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d10d      	bne.n	8004b7c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a1d      	ldr	r2, [pc, #116]	; (8004bf4 <TIM_OC2_SetConfig+0x100>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d00f      	beq.n	8004ba4 <TIM_OC2_SetConfig+0xb0>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a1c      	ldr	r2, [pc, #112]	; (8004bf8 <TIM_OC2_SetConfig+0x104>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00b      	beq.n	8004ba4 <TIM_OC2_SetConfig+0xb0>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a1b      	ldr	r2, [pc, #108]	; (8004bfc <TIM_OC2_SetConfig+0x108>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d007      	beq.n	8004ba4 <TIM_OC2_SetConfig+0xb0>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a1a      	ldr	r2, [pc, #104]	; (8004c00 <TIM_OC2_SetConfig+0x10c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d003      	beq.n	8004ba4 <TIM_OC2_SetConfig+0xb0>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a19      	ldr	r2, [pc, #100]	; (8004c04 <TIM_OC2_SetConfig+0x110>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d113      	bne.n	8004bcc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004baa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004bb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40012c00 	.word	0x40012c00
 8004bf8:	40013400 	.word	0x40013400
 8004bfc:	40014000 	.word	0x40014000
 8004c00:	40014400 	.word	0x40014400
 8004c04:	40014800 	.word	0x40014800

08004c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0303 	bic.w	r3, r3, #3
 8004c42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	021b      	lsls	r3, r3, #8
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a27      	ldr	r2, [pc, #156]	; (8004d04 <TIM_OC3_SetConfig+0xfc>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d003      	beq.n	8004c72 <TIM_OC3_SetConfig+0x6a>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a26      	ldr	r2, [pc, #152]	; (8004d08 <TIM_OC3_SetConfig+0x100>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d10d      	bne.n	8004c8e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	021b      	lsls	r3, r3, #8
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a1c      	ldr	r2, [pc, #112]	; (8004d04 <TIM_OC3_SetConfig+0xfc>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00f      	beq.n	8004cb6 <TIM_OC3_SetConfig+0xae>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a1b      	ldr	r2, [pc, #108]	; (8004d08 <TIM_OC3_SetConfig+0x100>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00b      	beq.n	8004cb6 <TIM_OC3_SetConfig+0xae>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a1a      	ldr	r2, [pc, #104]	; (8004d0c <TIM_OC3_SetConfig+0x104>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d007      	beq.n	8004cb6 <TIM_OC3_SetConfig+0xae>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a19      	ldr	r2, [pc, #100]	; (8004d10 <TIM_OC3_SetConfig+0x108>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d003      	beq.n	8004cb6 <TIM_OC3_SetConfig+0xae>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a18      	ldr	r2, [pc, #96]	; (8004d14 <TIM_OC3_SetConfig+0x10c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d113      	bne.n	8004cde <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	011b      	lsls	r3, r3, #4
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	621a      	str	r2, [r3, #32]
}
 8004cf8:	bf00      	nop
 8004cfa:	371c      	adds	r7, #28
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	40012c00 	.word	0x40012c00
 8004d08:	40013400 	.word	0x40013400
 8004d0c:	40014000 	.word	0x40014000
 8004d10:	40014400 	.word	0x40014400
 8004d14:	40014800 	.word	0x40014800

08004d18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b087      	sub	sp, #28
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69db      	ldr	r3, [r3, #28]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	031b      	lsls	r3, r3, #12
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a18      	ldr	r2, [pc, #96]	; (8004dd8 <TIM_OC4_SetConfig+0xc0>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00f      	beq.n	8004d9c <TIM_OC4_SetConfig+0x84>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a17      	ldr	r2, [pc, #92]	; (8004ddc <TIM_OC4_SetConfig+0xc4>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00b      	beq.n	8004d9c <TIM_OC4_SetConfig+0x84>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a16      	ldr	r2, [pc, #88]	; (8004de0 <TIM_OC4_SetConfig+0xc8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d007      	beq.n	8004d9c <TIM_OC4_SetConfig+0x84>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a15      	ldr	r2, [pc, #84]	; (8004de4 <TIM_OC4_SetConfig+0xcc>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d003      	beq.n	8004d9c <TIM_OC4_SetConfig+0x84>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <TIM_OC4_SetConfig+0xd0>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d109      	bne.n	8004db0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004da2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	695b      	ldr	r3, [r3, #20]
 8004da8:	019b      	lsls	r3, r3, #6
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	693a      	ldr	r2, [r7, #16]
 8004dc8:	621a      	str	r2, [r3, #32]
}
 8004dca:	bf00      	nop
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40012c00 	.word	0x40012c00
 8004ddc:	40013400 	.word	0x40013400
 8004de0:	40014000 	.word	0x40014000
 8004de4:	40014400 	.word	0x40014400
 8004de8:	40014800 	.word	0x40014800

08004dec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b087      	sub	sp, #28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
 8004e00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	041b      	lsls	r3, r3, #16
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a17      	ldr	r2, [pc, #92]	; (8004ea0 <TIM_OC5_SetConfig+0xb4>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00f      	beq.n	8004e66 <TIM_OC5_SetConfig+0x7a>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a16      	ldr	r2, [pc, #88]	; (8004ea4 <TIM_OC5_SetConfig+0xb8>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d00b      	beq.n	8004e66 <TIM_OC5_SetConfig+0x7a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a15      	ldr	r2, [pc, #84]	; (8004ea8 <TIM_OC5_SetConfig+0xbc>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d007      	beq.n	8004e66 <TIM_OC5_SetConfig+0x7a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a14      	ldr	r2, [pc, #80]	; (8004eac <TIM_OC5_SetConfig+0xc0>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_OC5_SetConfig+0x7a>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a13      	ldr	r2, [pc, #76]	; (8004eb0 <TIM_OC5_SetConfig+0xc4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d109      	bne.n	8004e7a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	021b      	lsls	r3, r3, #8
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	621a      	str	r2, [r3, #32]
}
 8004e94:	bf00      	nop
 8004e96:	371c      	adds	r7, #28
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	40012c00 	.word	0x40012c00
 8004ea4:	40013400 	.word	0x40013400
 8004ea8:	40014000 	.word	0x40014000
 8004eac:	40014400 	.word	0x40014400
 8004eb0:	40014800 	.word	0x40014800

08004eb4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b087      	sub	sp, #28
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a1b      	ldr	r3, [r3, #32]
 8004ec8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	021b      	lsls	r3, r3, #8
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004efa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	051b      	lsls	r3, r3, #20
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <TIM_OC6_SetConfig+0xb8>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00f      	beq.n	8004f30 <TIM_OC6_SetConfig+0x7c>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a17      	ldr	r2, [pc, #92]	; (8004f70 <TIM_OC6_SetConfig+0xbc>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00b      	beq.n	8004f30 <TIM_OC6_SetConfig+0x7c>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a16      	ldr	r2, [pc, #88]	; (8004f74 <TIM_OC6_SetConfig+0xc0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d007      	beq.n	8004f30 <TIM_OC6_SetConfig+0x7c>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a15      	ldr	r2, [pc, #84]	; (8004f78 <TIM_OC6_SetConfig+0xc4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d003      	beq.n	8004f30 <TIM_OC6_SetConfig+0x7c>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a14      	ldr	r2, [pc, #80]	; (8004f7c <TIM_OC6_SetConfig+0xc8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d109      	bne.n	8004f44 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	029b      	lsls	r3, r3, #10
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685a      	ldr	r2, [r3, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	621a      	str	r2, [r3, #32]
}
 8004f5e:	bf00      	nop
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40012c00 	.word	0x40012c00
 8004f70:	40013400 	.word	0x40013400
 8004f74:	40014000 	.word	0x40014000
 8004f78:	40014400 	.word	0x40014400
 8004f7c:	40014800 	.word	0x40014800

08004f80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d101      	bne.n	8004f98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f94:	2302      	movs	r3, #2
 8004f96:	e068      	b.n	800506a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a2e      	ldr	r2, [pc, #184]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d004      	beq.n	8004fcc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a2d      	ldr	r2, [pc, #180]	; (800507c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d108      	bne.n	8004fde <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004fd2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a1e      	ldr	r2, [pc, #120]	; (8005078 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d01d      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500a:	d018      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a1b      	ldr	r2, [pc, #108]	; (8005080 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a1a      	ldr	r2, [pc, #104]	; (8005084 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d00e      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a18      	ldr	r2, [pc, #96]	; (8005088 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d009      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a13      	ldr	r2, [pc, #76]	; (800507c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d004      	beq.n	800503e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a14      	ldr	r2, [pc, #80]	; (800508c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d10c      	bne.n	8005058 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005044:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	4313      	orrs	r3, r2
 800504e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
 8005076:	bf00      	nop
 8005078:	40012c00 	.word	0x40012c00
 800507c:	40013400 	.word	0x40013400
 8005080:	40000400 	.word	0x40000400
 8005084:	40000800 	.word	0x40000800
 8005088:	40000c00 	.word	0x40000c00
 800508c:	40014000 	.word	0x40014000

08005090 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d101      	bne.n	80050ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050a8:	2302      	movs	r3, #2
 80050aa:	e065      	b.n	8005178 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	4313      	orrs	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	4313      	orrs	r3, r2
 80050dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	041b      	lsls	r3, r3, #16
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a16      	ldr	r2, [pc, #88]	; (8005184 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d004      	beq.n	800513a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a14      	ldr	r2, [pc, #80]	; (8005188 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d115      	bne.n	8005166 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	051b      	lsls	r3, r3, #20
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	4313      	orrs	r3, r2
 8005156:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	4313      	orrs	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	3714      	adds	r7, #20
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40013400 	.word	0x40013400

0800518c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e040      	b.n	8005220 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d106      	bne.n	80051b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f7fb ff08 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2224      	movs	r2, #36	; 0x24
 80051b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0201 	bic.w	r2, r2, #1
 80051c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fc34 	bl	8005a40 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f979 	bl	80054d0 <UART_SetConfig>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e01b      	b.n	8005220 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005206:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0201 	orr.w	r2, r2, #1
 8005216:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 fcb3 	bl	8005b84 <UART_CheckIdleState>
 800521e:	4603      	mov	r3, r0
}
 8005220:	4618      	mov	r0, r3
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08a      	sub	sp, #40	; 0x28
 800522c:	af02      	add	r7, sp, #8
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	603b      	str	r3, [r7, #0]
 8005234:	4613      	mov	r3, r2
 8005236:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800523c:	2b20      	cmp	r3, #32
 800523e:	d178      	bne.n	8005332 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d002      	beq.n	800524c <HAL_UART_Transmit+0x24>
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e071      	b.n	8005334 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2221      	movs	r2, #33	; 0x21
 800525c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800525e:	f7fc f8a1 	bl	80013a4 <HAL_GetTick>
 8005262:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	88fa      	ldrh	r2, [r7, #6]
 8005268:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	88fa      	ldrh	r2, [r7, #6]
 8005270:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527c:	d108      	bne.n	8005290 <HAL_UART_Transmit+0x68>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d104      	bne.n	8005290 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	e003      	b.n	8005298 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005294:	2300      	movs	r3, #0
 8005296:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005298:	e030      	b.n	80052fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2200      	movs	r2, #0
 80052a2:	2180      	movs	r1, #128	; 0x80
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 fd15 	bl	8005cd4 <UART_WaitOnFlagUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d004      	beq.n	80052ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2220      	movs	r2, #32
 80052b4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e03c      	b.n	8005334 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80052ba:	69fb      	ldr	r3, [r7, #28]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10b      	bne.n	80052d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	881a      	ldrh	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052cc:	b292      	uxth	r2, r2
 80052ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	3302      	adds	r3, #2
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	e008      	b.n	80052ea <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	781a      	ldrb	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	b292      	uxth	r2, r2
 80052e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	3301      	adds	r3, #1
 80052e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005302:	b29b      	uxth	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1c8      	bne.n	800529a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2200      	movs	r2, #0
 8005310:	2140      	movs	r1, #64	; 0x40
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 fcde 	bl	8005cd4 <UART_WaitOnFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d004      	beq.n	8005328 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e005      	b.n	8005334 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	e000      	b.n	8005334 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005332:	2302      	movs	r3, #2
  }
}
 8005334:	4618      	mov	r0, r3
 8005336:	3720      	adds	r7, #32
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b08a      	sub	sp, #40	; 0x28
 8005340:	af02      	add	r7, sp, #8
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	603b      	str	r3, [r7, #0]
 8005348:	4613      	mov	r3, r2
 800534a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005352:	2b20      	cmp	r3, #32
 8005354:	f040 80b6 	bne.w	80054c4 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <HAL_UART_Receive+0x28>
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0ae      	b.n	80054c6 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2222      	movs	r2, #34	; 0x22
 8005374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800537e:	f7fc f811 	bl	80013a4 <HAL_GetTick>
 8005382:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	88fa      	ldrh	r2, [r7, #6]
 8005388:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	88fa      	ldrh	r2, [r7, #6]
 8005390:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539c:	d10e      	bne.n	80053bc <HAL_UART_Receive+0x80>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d105      	bne.n	80053b2 <HAL_UART_Receive+0x76>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f240 12ff 	movw	r2, #511	; 0x1ff
 80053ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053b0:	e02d      	b.n	800540e <HAL_UART_Receive+0xd2>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	22ff      	movs	r2, #255	; 0xff
 80053b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053ba:	e028      	b.n	800540e <HAL_UART_Receive+0xd2>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10d      	bne.n	80053e0 <HAL_UART_Receive+0xa4>
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <HAL_UART_Receive+0x9a>
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	22ff      	movs	r2, #255	; 0xff
 80053d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053d4:	e01b      	b.n	800540e <HAL_UART_Receive+0xd2>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	227f      	movs	r2, #127	; 0x7f
 80053da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053de:	e016      	b.n	800540e <HAL_UART_Receive+0xd2>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053e8:	d10d      	bne.n	8005406 <HAL_UART_Receive+0xca>
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d104      	bne.n	80053fc <HAL_UART_Receive+0xc0>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	227f      	movs	r2, #127	; 0x7f
 80053f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80053fa:	e008      	b.n	800540e <HAL_UART_Receive+0xd2>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	223f      	movs	r2, #63	; 0x3f
 8005400:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005404:	e003      	b.n	800540e <HAL_UART_Receive+0xd2>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005414:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541e:	d108      	bne.n	8005432 <HAL_UART_Receive+0xf6>
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d104      	bne.n	8005432 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005428:	2300      	movs	r3, #0
 800542a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	61bb      	str	r3, [r7, #24]
 8005430:	e003      	b.n	800543a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005436:	2300      	movs	r3, #0
 8005438:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800543a:	e037      	b.n	80054ac <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	9300      	str	r3, [sp, #0]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2200      	movs	r2, #0
 8005444:	2120      	movs	r1, #32
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 fc44 	bl	8005cd4 <UART_WaitOnFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d005      	beq.n	800545e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e033      	b.n	80054c6 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10c      	bne.n	800547e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800546a:	b29a      	uxth	r2, r3
 800546c:	8a7b      	ldrh	r3, [r7, #18]
 800546e:	4013      	ands	r3, r2
 8005470:	b29a      	uxth	r2, r3
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	3302      	adds	r3, #2
 800547a:	61bb      	str	r3, [r7, #24]
 800547c:	e00d      	b.n	800549a <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005484:	b29b      	uxth	r3, r3
 8005486:	b2da      	uxtb	r2, r3
 8005488:	8a7b      	ldrh	r3, [r7, #18]
 800548a:	b2db      	uxtb	r3, r3
 800548c:	4013      	ands	r3, r2
 800548e:	b2da      	uxtb	r2, r3
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	3301      	adds	r3, #1
 8005498:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	3b01      	subs	r3, #1
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1c1      	bne.n	800543c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2220      	movs	r2, #32
 80054bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	e000      	b.n	80054c6 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 80054c4:	2302      	movs	r3, #2
  }
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3720      	adds	r7, #32
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
	...

080054d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054d4:	b08a      	sub	sp, #40	; 0x28
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	431a      	orrs	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	431a      	orrs	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	69db      	ldr	r3, [r3, #28]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4ba4      	ldr	r3, [pc, #656]	; (8005790 <UART_SetConfig+0x2c0>)
 8005500:	4013      	ands	r3, r2
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	6812      	ldr	r2, [r2, #0]
 8005506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005508:	430b      	orrs	r3, r1
 800550a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	68da      	ldr	r2, [r3, #12]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a99      	ldr	r2, [pc, #612]	; (8005794 <UART_SetConfig+0x2c4>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005538:	4313      	orrs	r3, r2
 800553a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554c:	430a      	orrs	r2, r1
 800554e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a90      	ldr	r2, [pc, #576]	; (8005798 <UART_SetConfig+0x2c8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d126      	bne.n	80055a8 <UART_SetConfig+0xd8>
 800555a:	4b90      	ldr	r3, [pc, #576]	; (800579c <UART_SetConfig+0x2cc>)
 800555c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005560:	f003 0303 	and.w	r3, r3, #3
 8005564:	2b03      	cmp	r3, #3
 8005566:	d81b      	bhi.n	80055a0 <UART_SetConfig+0xd0>
 8005568:	a201      	add	r2, pc, #4	; (adr r2, 8005570 <UART_SetConfig+0xa0>)
 800556a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800556e:	bf00      	nop
 8005570:	08005581 	.word	0x08005581
 8005574:	08005591 	.word	0x08005591
 8005578:	08005589 	.word	0x08005589
 800557c:	08005599 	.word	0x08005599
 8005580:	2301      	movs	r3, #1
 8005582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005586:	e116      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005588:	2302      	movs	r3, #2
 800558a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800558e:	e112      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005590:	2304      	movs	r3, #4
 8005592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005596:	e10e      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005598:	2308      	movs	r3, #8
 800559a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800559e:	e10a      	b.n	80057b6 <UART_SetConfig+0x2e6>
 80055a0:	2310      	movs	r3, #16
 80055a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80055a6:	e106      	b.n	80057b6 <UART_SetConfig+0x2e6>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a7c      	ldr	r2, [pc, #496]	; (80057a0 <UART_SetConfig+0x2d0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d138      	bne.n	8005624 <UART_SetConfig+0x154>
 80055b2:	4b7a      	ldr	r3, [pc, #488]	; (800579c <UART_SetConfig+0x2cc>)
 80055b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b8:	f003 030c 	and.w	r3, r3, #12
 80055bc:	2b0c      	cmp	r3, #12
 80055be:	d82d      	bhi.n	800561c <UART_SetConfig+0x14c>
 80055c0:	a201      	add	r2, pc, #4	; (adr r2, 80055c8 <UART_SetConfig+0xf8>)
 80055c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c6:	bf00      	nop
 80055c8:	080055fd 	.word	0x080055fd
 80055cc:	0800561d 	.word	0x0800561d
 80055d0:	0800561d 	.word	0x0800561d
 80055d4:	0800561d 	.word	0x0800561d
 80055d8:	0800560d 	.word	0x0800560d
 80055dc:	0800561d 	.word	0x0800561d
 80055e0:	0800561d 	.word	0x0800561d
 80055e4:	0800561d 	.word	0x0800561d
 80055e8:	08005605 	.word	0x08005605
 80055ec:	0800561d 	.word	0x0800561d
 80055f0:	0800561d 	.word	0x0800561d
 80055f4:	0800561d 	.word	0x0800561d
 80055f8:	08005615 	.word	0x08005615
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005602:	e0d8      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005604:	2302      	movs	r3, #2
 8005606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800560a:	e0d4      	b.n	80057b6 <UART_SetConfig+0x2e6>
 800560c:	2304      	movs	r3, #4
 800560e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005612:	e0d0      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005614:	2308      	movs	r3, #8
 8005616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800561a:	e0cc      	b.n	80057b6 <UART_SetConfig+0x2e6>
 800561c:	2310      	movs	r3, #16
 800561e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005622:	e0c8      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a5e      	ldr	r2, [pc, #376]	; (80057a4 <UART_SetConfig+0x2d4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d125      	bne.n	800567a <UART_SetConfig+0x1aa>
 800562e:	4b5b      	ldr	r3, [pc, #364]	; (800579c <UART_SetConfig+0x2cc>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005638:	2b30      	cmp	r3, #48	; 0x30
 800563a:	d016      	beq.n	800566a <UART_SetConfig+0x19a>
 800563c:	2b30      	cmp	r3, #48	; 0x30
 800563e:	d818      	bhi.n	8005672 <UART_SetConfig+0x1a2>
 8005640:	2b20      	cmp	r3, #32
 8005642:	d00a      	beq.n	800565a <UART_SetConfig+0x18a>
 8005644:	2b20      	cmp	r3, #32
 8005646:	d814      	bhi.n	8005672 <UART_SetConfig+0x1a2>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <UART_SetConfig+0x182>
 800564c:	2b10      	cmp	r3, #16
 800564e:	d008      	beq.n	8005662 <UART_SetConfig+0x192>
 8005650:	e00f      	b.n	8005672 <UART_SetConfig+0x1a2>
 8005652:	2300      	movs	r3, #0
 8005654:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005658:	e0ad      	b.n	80057b6 <UART_SetConfig+0x2e6>
 800565a:	2302      	movs	r3, #2
 800565c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005660:	e0a9      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005662:	2304      	movs	r3, #4
 8005664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005668:	e0a5      	b.n	80057b6 <UART_SetConfig+0x2e6>
 800566a:	2308      	movs	r3, #8
 800566c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005670:	e0a1      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005672:	2310      	movs	r3, #16
 8005674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005678:	e09d      	b.n	80057b6 <UART_SetConfig+0x2e6>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a4a      	ldr	r2, [pc, #296]	; (80057a8 <UART_SetConfig+0x2d8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d125      	bne.n	80056d0 <UART_SetConfig+0x200>
 8005684:	4b45      	ldr	r3, [pc, #276]	; (800579c <UART_SetConfig+0x2cc>)
 8005686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800568e:	2bc0      	cmp	r3, #192	; 0xc0
 8005690:	d016      	beq.n	80056c0 <UART_SetConfig+0x1f0>
 8005692:	2bc0      	cmp	r3, #192	; 0xc0
 8005694:	d818      	bhi.n	80056c8 <UART_SetConfig+0x1f8>
 8005696:	2b80      	cmp	r3, #128	; 0x80
 8005698:	d00a      	beq.n	80056b0 <UART_SetConfig+0x1e0>
 800569a:	2b80      	cmp	r3, #128	; 0x80
 800569c:	d814      	bhi.n	80056c8 <UART_SetConfig+0x1f8>
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <UART_SetConfig+0x1d8>
 80056a2:	2b40      	cmp	r3, #64	; 0x40
 80056a4:	d008      	beq.n	80056b8 <UART_SetConfig+0x1e8>
 80056a6:	e00f      	b.n	80056c8 <UART_SetConfig+0x1f8>
 80056a8:	2300      	movs	r3, #0
 80056aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ae:	e082      	b.n	80057b6 <UART_SetConfig+0x2e6>
 80056b0:	2302      	movs	r3, #2
 80056b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056b6:	e07e      	b.n	80057b6 <UART_SetConfig+0x2e6>
 80056b8:	2304      	movs	r3, #4
 80056ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056be:	e07a      	b.n	80057b6 <UART_SetConfig+0x2e6>
 80056c0:	2308      	movs	r3, #8
 80056c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056c6:	e076      	b.n	80057b6 <UART_SetConfig+0x2e6>
 80056c8:	2310      	movs	r3, #16
 80056ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80056ce:	e072      	b.n	80057b6 <UART_SetConfig+0x2e6>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a35      	ldr	r2, [pc, #212]	; (80057ac <UART_SetConfig+0x2dc>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d12a      	bne.n	8005730 <UART_SetConfig+0x260>
 80056da:	4b30      	ldr	r3, [pc, #192]	; (800579c <UART_SetConfig+0x2cc>)
 80056dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056e8:	d01a      	beq.n	8005720 <UART_SetConfig+0x250>
 80056ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056ee:	d81b      	bhi.n	8005728 <UART_SetConfig+0x258>
 80056f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f4:	d00c      	beq.n	8005710 <UART_SetConfig+0x240>
 80056f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056fa:	d815      	bhi.n	8005728 <UART_SetConfig+0x258>
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <UART_SetConfig+0x238>
 8005700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005704:	d008      	beq.n	8005718 <UART_SetConfig+0x248>
 8005706:	e00f      	b.n	8005728 <UART_SetConfig+0x258>
 8005708:	2300      	movs	r3, #0
 800570a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800570e:	e052      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005710:	2302      	movs	r3, #2
 8005712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005716:	e04e      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005718:	2304      	movs	r3, #4
 800571a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800571e:	e04a      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005720:	2308      	movs	r3, #8
 8005722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005726:	e046      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005728:	2310      	movs	r3, #16
 800572a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800572e:	e042      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a17      	ldr	r2, [pc, #92]	; (8005794 <UART_SetConfig+0x2c4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d13a      	bne.n	80057b0 <UART_SetConfig+0x2e0>
 800573a:	4b18      	ldr	r3, [pc, #96]	; (800579c <UART_SetConfig+0x2cc>)
 800573c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005740:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005744:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005748:	d01a      	beq.n	8005780 <UART_SetConfig+0x2b0>
 800574a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800574e:	d81b      	bhi.n	8005788 <UART_SetConfig+0x2b8>
 8005750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005754:	d00c      	beq.n	8005770 <UART_SetConfig+0x2a0>
 8005756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800575a:	d815      	bhi.n	8005788 <UART_SetConfig+0x2b8>
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <UART_SetConfig+0x298>
 8005760:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005764:	d008      	beq.n	8005778 <UART_SetConfig+0x2a8>
 8005766:	e00f      	b.n	8005788 <UART_SetConfig+0x2b8>
 8005768:	2300      	movs	r3, #0
 800576a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800576e:	e022      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005770:	2302      	movs	r3, #2
 8005772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005776:	e01e      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005778:	2304      	movs	r3, #4
 800577a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800577e:	e01a      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005780:	2308      	movs	r3, #8
 8005782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005786:	e016      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005788:	2310      	movs	r3, #16
 800578a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800578e:	e012      	b.n	80057b6 <UART_SetConfig+0x2e6>
 8005790:	efff69f3 	.word	0xefff69f3
 8005794:	40008000 	.word	0x40008000
 8005798:	40013800 	.word	0x40013800
 800579c:	40021000 	.word	0x40021000
 80057a0:	40004400 	.word	0x40004400
 80057a4:	40004800 	.word	0x40004800
 80057a8:	40004c00 	.word	0x40004c00
 80057ac:	40005000 	.word	0x40005000
 80057b0:	2310      	movs	r3, #16
 80057b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a9f      	ldr	r2, [pc, #636]	; (8005a38 <UART_SetConfig+0x568>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d17a      	bne.n	80058b6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80057c4:	2b08      	cmp	r3, #8
 80057c6:	d824      	bhi.n	8005812 <UART_SetConfig+0x342>
 80057c8:	a201      	add	r2, pc, #4	; (adr r2, 80057d0 <UART_SetConfig+0x300>)
 80057ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ce:	bf00      	nop
 80057d0:	080057f5 	.word	0x080057f5
 80057d4:	08005813 	.word	0x08005813
 80057d8:	080057fd 	.word	0x080057fd
 80057dc:	08005813 	.word	0x08005813
 80057e0:	08005803 	.word	0x08005803
 80057e4:	08005813 	.word	0x08005813
 80057e8:	08005813 	.word	0x08005813
 80057ec:	08005813 	.word	0x08005813
 80057f0:	0800580b 	.word	0x0800580b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057f4:	f7fe fa3a 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 80057f8:	61f8      	str	r0, [r7, #28]
        break;
 80057fa:	e010      	b.n	800581e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057fc:	4b8f      	ldr	r3, [pc, #572]	; (8005a3c <UART_SetConfig+0x56c>)
 80057fe:	61fb      	str	r3, [r7, #28]
        break;
 8005800:	e00d      	b.n	800581e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005802:	f7fe f99b 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 8005806:	61f8      	str	r0, [r7, #28]
        break;
 8005808:	e009      	b.n	800581e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800580e:	61fb      	str	r3, [r7, #28]
        break;
 8005810:	e005      	b.n	800581e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800581c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 80fb 	beq.w	8005a1c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	4613      	mov	r3, r2
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	4413      	add	r3, r2
 8005830:	69fa      	ldr	r2, [r7, #28]
 8005832:	429a      	cmp	r2, r3
 8005834:	d305      	bcc.n	8005842 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800583c:	69fa      	ldr	r2, [r7, #28]
 800583e:	429a      	cmp	r2, r3
 8005840:	d903      	bls.n	800584a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005848:	e0e8      	b.n	8005a1c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	2200      	movs	r2, #0
 800584e:	461c      	mov	r4, r3
 8005850:	4615      	mov	r5, r2
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	022b      	lsls	r3, r5, #8
 800585c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005860:	0222      	lsls	r2, r4, #8
 8005862:	68f9      	ldr	r1, [r7, #12]
 8005864:	6849      	ldr	r1, [r1, #4]
 8005866:	0849      	lsrs	r1, r1, #1
 8005868:	2000      	movs	r0, #0
 800586a:	4688      	mov	r8, r1
 800586c:	4681      	mov	r9, r0
 800586e:	eb12 0a08 	adds.w	sl, r2, r8
 8005872:	eb43 0b09 	adc.w	fp, r3, r9
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	603b      	str	r3, [r7, #0]
 800587e:	607a      	str	r2, [r7, #4]
 8005880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005884:	4650      	mov	r0, sl
 8005886:	4659      	mov	r1, fp
 8005888:	f7fa fd0a 	bl	80002a0 <__aeabi_uldivmod>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4613      	mov	r3, r2
 8005892:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800589a:	d308      	bcc.n	80058ae <UART_SetConfig+0x3de>
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058a2:	d204      	bcs.n	80058ae <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	60da      	str	r2, [r3, #12]
 80058ac:	e0b6      	b.n	8005a1c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80058b4:	e0b2      	b.n	8005a1c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058be:	d15e      	bne.n	800597e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80058c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d828      	bhi.n	800591a <UART_SetConfig+0x44a>
 80058c8:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <UART_SetConfig+0x400>)
 80058ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ce:	bf00      	nop
 80058d0:	080058f5 	.word	0x080058f5
 80058d4:	080058fd 	.word	0x080058fd
 80058d8:	08005905 	.word	0x08005905
 80058dc:	0800591b 	.word	0x0800591b
 80058e0:	0800590b 	.word	0x0800590b
 80058e4:	0800591b 	.word	0x0800591b
 80058e8:	0800591b 	.word	0x0800591b
 80058ec:	0800591b 	.word	0x0800591b
 80058f0:	08005913 	.word	0x08005913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f4:	f7fe f9ba 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 80058f8:	61f8      	str	r0, [r7, #28]
        break;
 80058fa:	e014      	b.n	8005926 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058fc:	f7fe f9cc 	bl	8003c98 <HAL_RCC_GetPCLK2Freq>
 8005900:	61f8      	str	r0, [r7, #28]
        break;
 8005902:	e010      	b.n	8005926 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005904:	4b4d      	ldr	r3, [pc, #308]	; (8005a3c <UART_SetConfig+0x56c>)
 8005906:	61fb      	str	r3, [r7, #28]
        break;
 8005908:	e00d      	b.n	8005926 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800590a:	f7fe f917 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 800590e:	61f8      	str	r0, [r7, #28]
        break;
 8005910:	e009      	b.n	8005926 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005916:	61fb      	str	r3, [r7, #28]
        break;
 8005918:	e005      	b.n	8005926 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005924:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d077      	beq.n	8005a1c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	005a      	lsls	r2, r3, #1
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	085b      	lsrs	r3, r3, #1
 8005936:	441a      	add	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005940:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	2b0f      	cmp	r3, #15
 8005946:	d916      	bls.n	8005976 <UART_SetConfig+0x4a6>
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800594e:	d212      	bcs.n	8005976 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	b29b      	uxth	r3, r3
 8005954:	f023 030f 	bic.w	r3, r3, #15
 8005958:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	085b      	lsrs	r3, r3, #1
 800595e:	b29b      	uxth	r3, r3
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	b29a      	uxth	r2, r3
 8005966:	8afb      	ldrh	r3, [r7, #22]
 8005968:	4313      	orrs	r3, r2
 800596a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	8afa      	ldrh	r2, [r7, #22]
 8005972:	60da      	str	r2, [r3, #12]
 8005974:	e052      	b.n	8005a1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800597c:	e04e      	b.n	8005a1c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800597e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005982:	2b08      	cmp	r3, #8
 8005984:	d827      	bhi.n	80059d6 <UART_SetConfig+0x506>
 8005986:	a201      	add	r2, pc, #4	; (adr r2, 800598c <UART_SetConfig+0x4bc>)
 8005988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598c:	080059b1 	.word	0x080059b1
 8005990:	080059b9 	.word	0x080059b9
 8005994:	080059c1 	.word	0x080059c1
 8005998:	080059d7 	.word	0x080059d7
 800599c:	080059c7 	.word	0x080059c7
 80059a0:	080059d7 	.word	0x080059d7
 80059a4:	080059d7 	.word	0x080059d7
 80059a8:	080059d7 	.word	0x080059d7
 80059ac:	080059cf 	.word	0x080059cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059b0:	f7fe f95c 	bl	8003c6c <HAL_RCC_GetPCLK1Freq>
 80059b4:	61f8      	str	r0, [r7, #28]
        break;
 80059b6:	e014      	b.n	80059e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80059b8:	f7fe f96e 	bl	8003c98 <HAL_RCC_GetPCLK2Freq>
 80059bc:	61f8      	str	r0, [r7, #28]
        break;
 80059be:	e010      	b.n	80059e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059c0:	4b1e      	ldr	r3, [pc, #120]	; (8005a3c <UART_SetConfig+0x56c>)
 80059c2:	61fb      	str	r3, [r7, #28]
        break;
 80059c4:	e00d      	b.n	80059e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059c6:	f7fe f8b9 	bl	8003b3c <HAL_RCC_GetSysClockFreq>
 80059ca:	61f8      	str	r0, [r7, #28]
        break;
 80059cc:	e009      	b.n	80059e2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059d2:	61fb      	str	r3, [r7, #28]
        break;
 80059d4:	e005      	b.n	80059e2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80059e0:	bf00      	nop
    }

    if (pclk != 0U)
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d019      	beq.n	8005a1c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	085a      	lsrs	r2, r3, #1
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	441a      	add	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059fa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	2b0f      	cmp	r3, #15
 8005a00:	d909      	bls.n	8005a16 <UART_SetConfig+0x546>
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a08:	d205      	bcs.n	8005a16 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	b29a      	uxth	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	60da      	str	r2, [r3, #12]
 8005a14:	e002      	b.n	8005a1c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005a28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3728      	adds	r7, #40	; 0x28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a36:	bf00      	nop
 8005a38:	40008000 	.word	0x40008000
 8005a3c:	00f42400 	.word	0x00f42400

08005a40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	f003 0304 	and.w	r3, r3, #4
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	f003 0310 	and.w	r3, r3, #16
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af6:	f003 0320 	and.w	r3, r3, #32
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	430a      	orrs	r2, r1
 8005b12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01a      	beq.n	8005b56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	430a      	orrs	r2, r1
 8005b34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b3e:	d10a      	bne.n	8005b56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00a      	beq.n	8005b78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	430a      	orrs	r2, r1
 8005b76:	605a      	str	r2, [r3, #4]
  }
}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b098      	sub	sp, #96	; 0x60
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b94:	f7fb fc06 	bl	80013a4 <HAL_GetTick>
 8005b98:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0308 	and.w	r3, r3, #8
 8005ba4:	2b08      	cmp	r3, #8
 8005ba6:	d12e      	bne.n	8005c06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bac:	9300      	str	r3, [sp, #0]
 8005bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 f88c 	bl	8005cd4 <UART_WaitOnFlagUntilTimeout>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d021      	beq.n	8005c06 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bca:	e853 3f00 	ldrex	r3, [r3]
 8005bce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bd6:	653b      	str	r3, [r7, #80]	; 0x50
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	461a      	mov	r2, r3
 8005bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005be0:	647b      	str	r3, [r7, #68]	; 0x44
 8005be2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005be8:	e841 2300 	strex	r3, r2, [r1]
 8005bec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1e6      	bne.n	8005bc2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2220      	movs	r2, #32
 8005bf8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e062      	b.n	8005ccc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0304 	and.w	r3, r3, #4
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d149      	bne.n	8005ca8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f000 f856 	bl	8005cd4 <UART_WaitOnFlagUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d03c      	beq.n	8005ca8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	623b      	str	r3, [r7, #32]
   return(result);
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	461a      	mov	r2, r3
 8005c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c4c:	633b      	str	r3, [r7, #48]	; 0x30
 8005c4e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e6      	bne.n	8005c2e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3308      	adds	r3, #8
 8005c66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	e853 3f00 	ldrex	r3, [r3]
 8005c6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f023 0301 	bic.w	r3, r3, #1
 8005c76:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c80:	61fa      	str	r2, [r7, #28]
 8005c82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c84:	69b9      	ldr	r1, [r7, #24]
 8005c86:	69fa      	ldr	r2, [r7, #28]
 8005c88:	e841 2300 	strex	r3, r2, [r1]
 8005c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1e5      	bne.n	8005c60 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2220      	movs	r2, #32
 8005c98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ca4:	2303      	movs	r3, #3
 8005ca6:	e011      	b.n	8005ccc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2220      	movs	r2, #32
 8005cac:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3758      	adds	r7, #88	; 0x58
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce4:	e049      	b.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cec:	d045      	beq.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cee:	f7fb fb59 	bl	80013a4 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	69ba      	ldr	r2, [r7, #24]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d302      	bcc.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d101      	bne.n	8005d08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d04:	2303      	movs	r3, #3
 8005d06:	e048      	b.n	8005d9a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d031      	beq.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d110      	bne.n	8005d46 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2208      	movs	r2, #8
 8005d2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f838 	bl	8005da2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2208      	movs	r2, #8
 8005d36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e029      	b.n	8005d9a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d54:	d111      	bne.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f81e 	bl	8005da2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e00f      	b.n	8005d9a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69da      	ldr	r2, [r3, #28]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4013      	ands	r3, r2
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	bf0c      	ite	eq
 8005d8a:	2301      	moveq	r3, #1
 8005d8c:	2300      	movne	r3, #0
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	79fb      	ldrb	r3, [r7, #7]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d0a6      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b095      	sub	sp, #84	; 0x54
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db2:	e853 3f00 	ldrex	r3, [r3]
 8005db6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005dbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dc8:	643b      	str	r3, [r7, #64]	; 0x40
 8005dca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005dce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dd0:	e841 2300 	strex	r3, r2, [r1]
 8005dd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e6      	bne.n	8005daa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3308      	adds	r3, #8
 8005de2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	6a3b      	ldr	r3, [r7, #32]
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	f023 0301 	bic.w	r3, r3, #1
 8005df2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3308      	adds	r3, #8
 8005dfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e5      	bne.n	8005ddc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d118      	bne.n	8005e4a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	e853 3f00 	ldrex	r3, [r3]
 8005e24:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f023 0310 	bic.w	r3, r3, #16
 8005e2c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	461a      	mov	r2, r3
 8005e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e36:	61bb      	str	r3, [r7, #24]
 8005e38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3a:	6979      	ldr	r1, [r7, #20]
 8005e3c:	69ba      	ldr	r2, [r7, #24]
 8005e3e:	e841 2300 	strex	r3, r2, [r1]
 8005e42:	613b      	str	r3, [r7, #16]
   return(result);
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1e6      	bne.n	8005e18 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2220      	movs	r2, #32
 8005e4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005e5e:	bf00      	nop
 8005e60:	3754      	adds	r7, #84	; 0x54
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
	...

08005e6c <__NVIC_SetPriority>:
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b083      	sub	sp, #12
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	4603      	mov	r3, r0
 8005e74:	6039      	str	r1, [r7, #0]
 8005e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	db0a      	blt.n	8005e96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	b2da      	uxtb	r2, r3
 8005e84:	490c      	ldr	r1, [pc, #48]	; (8005eb8 <__NVIC_SetPriority+0x4c>)
 8005e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e8a:	0112      	lsls	r2, r2, #4
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	440b      	add	r3, r1
 8005e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e94:	e00a      	b.n	8005eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	4908      	ldr	r1, [pc, #32]	; (8005ebc <__NVIC_SetPriority+0x50>)
 8005e9c:	79fb      	ldrb	r3, [r7, #7]
 8005e9e:	f003 030f 	and.w	r3, r3, #15
 8005ea2:	3b04      	subs	r3, #4
 8005ea4:	0112      	lsls	r2, r2, #4
 8005ea6:	b2d2      	uxtb	r2, r2
 8005ea8:	440b      	add	r3, r1
 8005eaa:	761a      	strb	r2, [r3, #24]
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr
 8005eb8:	e000e100 	.word	0xe000e100
 8005ebc:	e000ed00 	.word	0xe000ed00

08005ec0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	f06f 0004 	mvn.w	r0, #4
 8005eca:	f7ff ffcf 	bl	8005e6c <__NVIC_SetPriority>
#endif
}
 8005ece:	bf00      	nop
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eda:	f3ef 8305 	mrs	r3, IPSR
 8005ede:	603b      	str	r3, [r7, #0]
  return(result);
 8005ee0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005ee6:	f06f 0305 	mvn.w	r3, #5
 8005eea:	607b      	str	r3, [r7, #4]
 8005eec:	e00c      	b.n	8005f08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005eee:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <osKernelInitialize+0x44>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d105      	bne.n	8005f02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005ef6:	4b08      	ldr	r3, [pc, #32]	; (8005f18 <osKernelInitialize+0x44>)
 8005ef8:	2201      	movs	r2, #1
 8005efa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	607b      	str	r3, [r7, #4]
 8005f00:	e002      	b.n	8005f08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f08:	687b      	ldr	r3, [r7, #4]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	370c      	adds	r7, #12
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	2000024c 	.word	0x2000024c

08005f1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f22:	f3ef 8305 	mrs	r3, IPSR
 8005f26:	603b      	str	r3, [r7, #0]
  return(result);
 8005f28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005f2e:	f06f 0305 	mvn.w	r3, #5
 8005f32:	607b      	str	r3, [r7, #4]
 8005f34:	e010      	b.n	8005f58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005f36:	4b0b      	ldr	r3, [pc, #44]	; (8005f64 <osKernelStart+0x48>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d109      	bne.n	8005f52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005f3e:	f7ff ffbf 	bl	8005ec0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005f42:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <osKernelStart+0x48>)
 8005f44:	2202      	movs	r2, #2
 8005f46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005f48:	f001 fb88 	bl	800765c <vTaskStartScheduler>
      stat = osOK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	607b      	str	r3, [r7, #4]
 8005f50:	e002      	b.n	8005f58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005f52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005f58:	687b      	ldr	r3, [r7, #4]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	2000024c 	.word	0x2000024c

08005f68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08e      	sub	sp, #56	; 0x38
 8005f6c:	af04      	add	r7, sp, #16
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005f74:	2300      	movs	r3, #0
 8005f76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f78:	f3ef 8305 	mrs	r3, IPSR
 8005f7c:	617b      	str	r3, [r7, #20]
  return(result);
 8005f7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d17e      	bne.n	8006082 <osThreadNew+0x11a>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d07b      	beq.n	8006082 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005f8a:	2380      	movs	r3, #128	; 0x80
 8005f8c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005f8e:	2318      	movs	r3, #24
 8005f90:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d045      	beq.n	800602e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <osThreadNew+0x48>
        name = attr->name;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d002      	beq.n	8005fbe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	699b      	ldr	r3, [r3, #24]
 8005fbc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d008      	beq.n	8005fd6 <osThreadNew+0x6e>
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	2b38      	cmp	r3, #56	; 0x38
 8005fc8:	d805      	bhi.n	8005fd6 <osThreadNew+0x6e>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d001      	beq.n	8005fda <osThreadNew+0x72>
        return (NULL);
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	e054      	b.n	8006084 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	089b      	lsrs	r3, r3, #2
 8005fe8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d00e      	beq.n	8006010 <osThreadNew+0xa8>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	2b5b      	cmp	r3, #91	; 0x5b
 8005ff8:	d90a      	bls.n	8006010 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d006      	beq.n	8006010 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <osThreadNew+0xa8>
        mem = 1;
 800600a:	2301      	movs	r3, #1
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	e010      	b.n	8006032 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d10c      	bne.n	8006032 <osThreadNew+0xca>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d108      	bne.n	8006032 <osThreadNew+0xca>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	691b      	ldr	r3, [r3, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d104      	bne.n	8006032 <osThreadNew+0xca>
          mem = 0;
 8006028:	2300      	movs	r3, #0
 800602a:	61bb      	str	r3, [r7, #24]
 800602c:	e001      	b.n	8006032 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d110      	bne.n	800605a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006040:	9202      	str	r2, [sp, #8]
 8006042:	9301      	str	r3, [sp, #4]
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	6a3a      	ldr	r2, [r7, #32]
 800604c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f001 f92e 	bl	80072b0 <xTaskCreateStatic>
 8006054:	4603      	mov	r3, r0
 8006056:	613b      	str	r3, [r7, #16]
 8006058:	e013      	b.n	8006082 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d110      	bne.n	8006082 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006060:	6a3b      	ldr	r3, [r7, #32]
 8006062:	b29a      	uxth	r2, r3
 8006064:	f107 0310 	add.w	r3, r7, #16
 8006068:	9301      	str	r3, [sp, #4]
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	9300      	str	r3, [sp, #0]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f001 f979 	bl	800736a <xTaskCreate>
 8006078:	4603      	mov	r3, r0
 800607a:	2b01      	cmp	r3, #1
 800607c:	d001      	beq.n	8006082 <osThreadNew+0x11a>
            hTask = NULL;
 800607e:	2300      	movs	r3, #0
 8006080:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006082:	693b      	ldr	r3, [r7, #16]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3728      	adds	r7, #40	; 0x28
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006094:	f3ef 8305 	mrs	r3, IPSR
 8006098:	60bb      	str	r3, [r7, #8]
  return(result);
 800609a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800609c:	2b00      	cmp	r3, #0
 800609e:	d003      	beq.n	80060a8 <osDelay+0x1c>
    stat = osErrorISR;
 80060a0:	f06f 0305 	mvn.w	r3, #5
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	e007      	b.n	80060b8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 fa9e 	bl	80075f4 <vTaskDelay>
    }
  }

  return (stat);
 80060b8:	68fb      	ldr	r3, [r7, #12]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b088      	sub	sp, #32
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ce:	f3ef 8305 	mrs	r3, IPSR
 80060d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80060d4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d174      	bne.n	80061c4 <osMutexNew+0x102>
    if (attr != NULL) {
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <osMutexNew+0x26>
      type = attr->attr_bits;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	e001      	b.n	80060ec <osMutexNew+0x2a>
    } else {
      type = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	f003 0301 	and.w	r3, r3, #1
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <osMutexNew+0x3a>
      rmtx = 1U;
 80060f6:	2301      	movs	r3, #1
 80060f8:	617b      	str	r3, [r7, #20]
 80060fa:	e001      	b.n	8006100 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d15c      	bne.n	80061c4 <osMutexNew+0x102>
      mem = -1;
 800610a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800610e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d015      	beq.n	8006142 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d006      	beq.n	800612c <osMutexNew+0x6a>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	2b4f      	cmp	r3, #79	; 0x4f
 8006124:	d902      	bls.n	800612c <osMutexNew+0x6a>
          mem = 1;
 8006126:	2301      	movs	r3, #1
 8006128:	613b      	str	r3, [r7, #16]
 800612a:	e00c      	b.n	8006146 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d108      	bne.n	8006146 <osMutexNew+0x84>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d104      	bne.n	8006146 <osMutexNew+0x84>
            mem = 0;
 800613c:	2300      	movs	r3, #0
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	e001      	b.n	8006146 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d112      	bne.n	8006172 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d007      	beq.n	8006162 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	4619      	mov	r1, r3
 8006158:	2004      	movs	r0, #4
 800615a:	f000 fb18 	bl	800678e <xQueueCreateMutexStatic>
 800615e:	61f8      	str	r0, [r7, #28]
 8006160:	e016      	b.n	8006190 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	4619      	mov	r1, r3
 8006168:	2001      	movs	r0, #1
 800616a:	f000 fb10 	bl	800678e <xQueueCreateMutexStatic>
 800616e:	61f8      	str	r0, [r7, #28]
 8006170:	e00e      	b.n	8006190 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10b      	bne.n	8006190 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d004      	beq.n	8006188 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800617e:	2004      	movs	r0, #4
 8006180:	f000 faed 	bl	800675e <xQueueCreateMutex>
 8006184:	61f8      	str	r0, [r7, #28]
 8006186:	e003      	b.n	8006190 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8006188:	2001      	movs	r0, #1
 800618a:	f000 fae8 	bl	800675e <xQueueCreateMutex>
 800618e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00c      	beq.n	80061b0 <osMutexNew+0xee>
        if (attr != NULL) {
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <osMutexNew+0xe2>
          name = attr->name;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	e001      	b.n	80061a8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80061a4:	2300      	movs	r3, #0
 80061a6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80061a8:	68f9      	ldr	r1, [r7, #12]
 80061aa:	69f8      	ldr	r0, [r7, #28]
 80061ac:	f001 f822 	bl	80071f4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d006      	beq.n	80061c4 <osMutexNew+0x102>
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f043 0301 	orr.w	r3, r3, #1
 80061c2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80061c4:	69fb      	ldr	r3, [r7, #28]
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3720      	adds	r7, #32
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b086      	sub	sp, #24
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f023 0301 	bic.w	r3, r3, #1
 80061de:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80061e8:	2300      	movs	r3, #0
 80061ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061ec:	f3ef 8305 	mrs	r3, IPSR
 80061f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80061f2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d003      	beq.n	8006200 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80061f8:	f06f 0305 	mvn.w	r3, #5
 80061fc:	617b      	str	r3, [r7, #20]
 80061fe:	e02c      	b.n	800625a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d103      	bne.n	800620e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8006206:	f06f 0303 	mvn.w	r3, #3
 800620a:	617b      	str	r3, [r7, #20]
 800620c:	e025      	b.n	800625a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d011      	beq.n	8006238 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6938      	ldr	r0, [r7, #16]
 8006218:	f000 fb08 	bl	800682c <xQueueTakeMutexRecursive>
 800621c:	4603      	mov	r3, r0
 800621e:	2b01      	cmp	r3, #1
 8006220:	d01b      	beq.n	800625a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8006228:	f06f 0301 	mvn.w	r3, #1
 800622c:	617b      	str	r3, [r7, #20]
 800622e:	e014      	b.n	800625a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006230:	f06f 0302 	mvn.w	r3, #2
 8006234:	617b      	str	r3, [r7, #20]
 8006236:	e010      	b.n	800625a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	6938      	ldr	r0, [r7, #16]
 800623c:	f000 fda6 	bl	8006d8c <xQueueSemaphoreTake>
 8006240:	4603      	mov	r3, r0
 8006242:	2b01      	cmp	r3, #1
 8006244:	d009      	beq.n	800625a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800624c:	f06f 0301 	mvn.w	r3, #1
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	e002      	b.n	800625a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8006254:	f06f 0302 	mvn.w	r3, #2
 8006258:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800625a:	697b      	ldr	r3, [r7, #20]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3718      	adds	r7, #24
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800627c:	2300      	movs	r3, #0
 800627e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006280:	f3ef 8305 	mrs	r3, IPSR
 8006284:	60bb      	str	r3, [r7, #8]
  return(result);
 8006286:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <osMutexRelease+0x30>
    stat = osErrorISR;
 800628c:	f06f 0305 	mvn.w	r3, #5
 8006290:	617b      	str	r3, [r7, #20]
 8006292:	e01f      	b.n	80062d4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800629a:	f06f 0303 	mvn.w	r3, #3
 800629e:	617b      	str	r3, [r7, #20]
 80062a0:	e018      	b.n	80062d4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d009      	beq.n	80062bc <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80062a8:	6938      	ldr	r0, [r7, #16]
 80062aa:	f000 fa8b 	bl	80067c4 <xQueueGiveMutexRecursive>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d00f      	beq.n	80062d4 <osMutexRelease+0x70>
        stat = osErrorResource;
 80062b4:	f06f 0302 	mvn.w	r3, #2
 80062b8:	617b      	str	r3, [r7, #20]
 80062ba:	e00b      	b.n	80062d4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80062bc:	2300      	movs	r3, #0
 80062be:	2200      	movs	r2, #0
 80062c0:	2100      	movs	r1, #0
 80062c2:	6938      	ldr	r0, [r7, #16]
 80062c4:	f000 fae8 	bl	8006898 <xQueueGenericSend>
 80062c8:	4603      	mov	r3, r0
 80062ca:	2b01      	cmp	r3, #1
 80062cc:	d002      	beq.n	80062d4 <osMutexRelease+0x70>
        stat = osErrorResource;
 80062ce:	f06f 0302 	mvn.w	r3, #2
 80062d2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80062d4:	697b      	ldr	r3, [r7, #20]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4a07      	ldr	r2, [pc, #28]	; (800630c <vApplicationGetIdleTaskMemory+0x2c>)
 80062f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	4a06      	ldr	r2, [pc, #24]	; (8006310 <vApplicationGetIdleTaskMemory+0x30>)
 80062f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2280      	movs	r2, #128	; 0x80
 80062fc:	601a      	str	r2, [r3, #0]
}
 80062fe:	bf00      	nop
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	20000250 	.word	0x20000250
 8006310:	200002ac 	.word	0x200002ac

08006314 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4a07      	ldr	r2, [pc, #28]	; (8006340 <vApplicationGetTimerTaskMemory+0x2c>)
 8006324:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	4a06      	ldr	r2, [pc, #24]	; (8006344 <vApplicationGetTimerTaskMemory+0x30>)
 800632a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006332:	601a      	str	r2, [r3, #0]
}
 8006334:	bf00      	nop
 8006336:	3714      	adds	r7, #20
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr
 8006340:	200004ac 	.word	0x200004ac
 8006344:	20000508 	.word	0x20000508

08006348 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f103 0208 	add.w	r2, r3, #8
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006360:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f103 0208 	add.w	r2, r3, #8
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f103 0208 	add.w	r2, r3, #8
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800637c:	bf00      	nop
 800637e:	370c      	adds	r7, #12
 8006380:	46bd      	mov	sp, r7
 8006382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006386:	4770      	bx	lr

08006388 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063a2:	b480      	push	{r7}
 80063a4:	b085      	sub	sp, #20
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
 80063aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	601a      	str	r2, [r3, #0]
}
 80063de:	bf00      	nop
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80063ea:	b480      	push	{r7}
 80063ec:	b085      	sub	sp, #20
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006400:	d103      	bne.n	800640a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	e00c      	b.n	8006424 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	3308      	adds	r3, #8
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	e002      	b.n	8006418 <vListInsert+0x2e>
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68ba      	ldr	r2, [r7, #8]
 8006420:	429a      	cmp	r2, r3
 8006422:	d2f6      	bcs.n	8006412 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	683a      	ldr	r2, [r7, #0]
 800643e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	601a      	str	r2, [r3, #0]
}
 8006450:	bf00      	nop
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6892      	ldr	r2, [r2, #8]
 8006472:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	6852      	ldr	r2, [r2, #4]
 800647c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	429a      	cmp	r2, r3
 8006486:	d103      	bne.n	8006490 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	1e5a      	subs	r2, r3, #1
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d10a      	bne.n	80064da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80064d6:	bf00      	nop
 80064d8:	e7fe      	b.n	80064d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80064da:	f002 fb73 	bl	8008bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e6:	68f9      	ldr	r1, [r7, #12]
 80064e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80064ea:	fb01 f303 	mul.w	r3, r1, r3
 80064ee:	441a      	add	r2, r3
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650a:	3b01      	subs	r3, #1
 800650c:	68f9      	ldr	r1, [r7, #12]
 800650e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006510:	fb01 f303 	mul.w	r3, r1, r3
 8006514:	441a      	add	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	22ff      	movs	r2, #255	; 0xff
 800651e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	22ff      	movs	r2, #255	; 0xff
 8006526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d114      	bne.n	800655a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d01a      	beq.n	800656e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3310      	adds	r3, #16
 800653c:	4618      	mov	r0, r3
 800653e:	f001 fb17 	bl	8007b70 <xTaskRemoveFromEventList>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d012      	beq.n	800656e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006548:	4b0c      	ldr	r3, [pc, #48]	; (800657c <xQueueGenericReset+0xcc>)
 800654a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	f3bf 8f6f 	isb	sy
 8006558:	e009      	b.n	800656e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3310      	adds	r3, #16
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff fef2 	bl	8006348 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3324      	adds	r3, #36	; 0x24
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff feed 	bl	8006348 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800656e:	f002 fb59 	bl	8008c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006572:	2301      	movs	r3, #1
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	e000ed04 	.word	0xe000ed04

08006580 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08e      	sub	sp, #56	; 0x38
 8006584:	af02      	add	r7, sp, #8
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	60b9      	str	r1, [r7, #8]
 800658a:	607a      	str	r2, [r7, #4]
 800658c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d10a      	bne.n	80065aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006598:	f383 8811 	msr	BASEPRI, r3
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80065a6:	bf00      	nop
 80065a8:	e7fe      	b.n	80065a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10a      	bne.n	80065c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80065b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b4:	f383 8811 	msr	BASEPRI, r3
 80065b8:	f3bf 8f6f 	isb	sy
 80065bc:	f3bf 8f4f 	dsb	sy
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065c2:	bf00      	nop
 80065c4:	e7fe      	b.n	80065c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <xQueueGenericCreateStatic+0x52>
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <xQueueGenericCreateStatic+0x56>
 80065d2:	2301      	movs	r3, #1
 80065d4:	e000      	b.n	80065d8 <xQueueGenericCreateStatic+0x58>
 80065d6:	2300      	movs	r3, #0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d10a      	bne.n	80065f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	623b      	str	r3, [r7, #32]
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d102      	bne.n	80065fe <xQueueGenericCreateStatic+0x7e>
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <xQueueGenericCreateStatic+0x82>
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <xQueueGenericCreateStatic+0x84>
 8006602:	2300      	movs	r3, #0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	61fb      	str	r3, [r7, #28]
}
 800661a:	bf00      	nop
 800661c:	e7fe      	b.n	800661c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800661e:	2350      	movs	r3, #80	; 0x50
 8006620:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2b50      	cmp	r3, #80	; 0x50
 8006626:	d00a      	beq.n	800663e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	61bb      	str	r3, [r7, #24]
}
 800663a:	bf00      	nop
 800663c:	e7fe      	b.n	800663c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800663e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00d      	beq.n	8006666 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800664a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006652:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	4613      	mov	r3, r2
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 f83f 	bl	80066e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006668:	4618      	mov	r0, r3
 800666a:	3730      	adds	r7, #48	; 0x30
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}

08006670 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08a      	sub	sp, #40	; 0x28
 8006674:	af02      	add	r7, sp, #8
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	4613      	mov	r3, r2
 800667c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	613b      	str	r3, [r7, #16]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	fb02 f303 	mul.w	r3, r2, r3
 80066a2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	3350      	adds	r3, #80	; 0x50
 80066a8:	4618      	mov	r0, r3
 80066aa:	f002 fbad 	bl	8008e08 <pvPortMalloc>
 80066ae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d011      	beq.n	80066da <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	3350      	adds	r3, #80	; 0x50
 80066be:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066c8:	79fa      	ldrb	r2, [r7, #7]
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	4613      	mov	r3, r2
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 f805 	bl	80066e4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066da:	69bb      	ldr	r3, [r7, #24]
	}
 80066dc:	4618      	mov	r0, r3
 80066de:	3720      	adds	r7, #32
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
 80066f0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d103      	bne.n	8006700 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	69ba      	ldr	r2, [r7, #24]
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	e002      	b.n	8006706 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	68ba      	ldr	r2, [r7, #8]
 8006710:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006712:	2101      	movs	r1, #1
 8006714:	69b8      	ldr	r0, [r7, #24]
 8006716:	f7ff fecb 	bl	80064b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	78fa      	ldrb	r2, [r7, #3]
 800671e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006722:	bf00      	nop
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800672a:	b580      	push	{r7, lr}
 800672c:	b082      	sub	sp, #8
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d00e      	beq.n	8006756 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800674a:	2300      	movs	r3, #0
 800674c:	2200      	movs	r2, #0
 800674e:	2100      	movs	r1, #0
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f8a1 	bl	8006898 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006756:	bf00      	nop
 8006758:	3708      	adds	r7, #8
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800675e:	b580      	push	{r7, lr}
 8006760:	b086      	sub	sp, #24
 8006762:	af00      	add	r7, sp, #0
 8006764:	4603      	mov	r3, r0
 8006766:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006768:	2301      	movs	r3, #1
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	2300      	movs	r3, #0
 800676e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006770:	79fb      	ldrb	r3, [r7, #7]
 8006772:	461a      	mov	r2, r3
 8006774:	6939      	ldr	r1, [r7, #16]
 8006776:	6978      	ldr	r0, [r7, #20]
 8006778:	f7ff ff7a 	bl	8006670 <xQueueGenericCreate>
 800677c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f7ff ffd3 	bl	800672a <prvInitialiseMutex>

		return xNewQueue;
 8006784:	68fb      	ldr	r3, [r7, #12]
	}
 8006786:	4618      	mov	r0, r3
 8006788:	3718      	adds	r7, #24
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800678e:	b580      	push	{r7, lr}
 8006790:	b088      	sub	sp, #32
 8006792:	af02      	add	r7, sp, #8
 8006794:	4603      	mov	r3, r0
 8006796:	6039      	str	r1, [r7, #0]
 8006798:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800679a:	2301      	movs	r3, #1
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	2300      	movs	r3, #0
 80067a0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80067a2:	79fb      	ldrb	r3, [r7, #7]
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	2200      	movs	r2, #0
 80067aa:	6939      	ldr	r1, [r7, #16]
 80067ac:	6978      	ldr	r0, [r7, #20]
 80067ae:	f7ff fee7 	bl	8006580 <xQueueGenericCreateStatic>
 80067b2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7ff ffb8 	bl	800672a <prvInitialiseMutex>

		return xNewQueue;
 80067ba:	68fb      	ldr	r3, [r7, #12]
	}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80067c4:	b590      	push	{r4, r7, lr}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	60fb      	str	r3, [r7, #12]
}
 80067e8:	bf00      	nop
 80067ea:	e7fe      	b.n	80067ea <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	689c      	ldr	r4, [r3, #8]
 80067f0:	f001 fb7c 	bl	8007eec <xTaskGetCurrentTaskHandle>
 80067f4:	4603      	mov	r3, r0
 80067f6:	429c      	cmp	r4, r3
 80067f8:	d111      	bne.n	800681e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	1e5a      	subs	r2, r3, #1
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d105      	bne.n	8006818 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800680c:	2300      	movs	r3, #0
 800680e:	2200      	movs	r2, #0
 8006810:	2100      	movs	r1, #0
 8006812:	6938      	ldr	r0, [r7, #16]
 8006814:	f000 f840 	bl	8006898 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006818:	2301      	movs	r3, #1
 800681a:	617b      	str	r3, [r7, #20]
 800681c:	e001      	b.n	8006822 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800681e:	2300      	movs	r3, #0
 8006820:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006822:	697b      	ldr	r3, [r7, #20]
	}
 8006824:	4618      	mov	r0, r3
 8006826:	371c      	adds	r7, #28
 8006828:	46bd      	mov	sp, r7
 800682a:	bd90      	pop	{r4, r7, pc}

0800682c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800682c:	b590      	push	{r4, r7, lr}
 800682e:	b087      	sub	sp, #28
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10a      	bne.n	8006856 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	60fb      	str	r3, [r7, #12]
}
 8006852:	bf00      	nop
 8006854:	e7fe      	b.n	8006854 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	689c      	ldr	r4, [r3, #8]
 800685a:	f001 fb47 	bl	8007eec <xTaskGetCurrentTaskHandle>
 800685e:	4603      	mov	r3, r0
 8006860:	429c      	cmp	r4, r3
 8006862:	d107      	bne.n	8006874 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800686e:	2301      	movs	r3, #1
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	e00c      	b.n	800688e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6938      	ldr	r0, [r7, #16]
 8006878:	f000 fa88 	bl	8006d8c <xQueueSemaphoreTake>
 800687c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d004      	beq.n	800688e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800688e:	697b      	ldr	r3, [r7, #20]
	}
 8006890:	4618      	mov	r0, r3
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	bd90      	pop	{r4, r7, pc}

08006898 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08e      	sub	sp, #56	; 0x38
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068a6:	2300      	movs	r3, #0
 80068a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <xQueueGenericSend+0x32>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80068c6:	bf00      	nop
 80068c8:	e7fe      	b.n	80068c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d103      	bne.n	80068d8 <xQueueGenericSend+0x40>
 80068d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d101      	bne.n	80068dc <xQueueGenericSend+0x44>
 80068d8:	2301      	movs	r3, #1
 80068da:	e000      	b.n	80068de <xQueueGenericSend+0x46>
 80068dc:	2300      	movs	r3, #0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10a      	bne.n	80068f8 <xQueueGenericSend+0x60>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80068f4:	bf00      	nop
 80068f6:	e7fe      	b.n	80068f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d103      	bne.n	8006906 <xQueueGenericSend+0x6e>
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006902:	2b01      	cmp	r3, #1
 8006904:	d101      	bne.n	800690a <xQueueGenericSend+0x72>
 8006906:	2301      	movs	r3, #1
 8006908:	e000      	b.n	800690c <xQueueGenericSend+0x74>
 800690a:	2300      	movs	r3, #0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10a      	bne.n	8006926 <xQueueGenericSend+0x8e>
	__asm volatile
 8006910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006914:	f383 8811 	msr	BASEPRI, r3
 8006918:	f3bf 8f6f 	isb	sy
 800691c:	f3bf 8f4f 	dsb	sy
 8006920:	623b      	str	r3, [r7, #32]
}
 8006922:	bf00      	nop
 8006924:	e7fe      	b.n	8006924 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006926:	f001 faf1 	bl	8007f0c <xTaskGetSchedulerState>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d102      	bne.n	8006936 <xQueueGenericSend+0x9e>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <xQueueGenericSend+0xa2>
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <xQueueGenericSend+0xa4>
 800693a:	2300      	movs	r3, #0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <xQueueGenericSend+0xbe>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	61fb      	str	r3, [r7, #28]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006956:	f002 f935 	bl	8008bc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800695a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800695e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006962:	429a      	cmp	r2, r3
 8006964:	d302      	bcc.n	800696c <xQueueGenericSend+0xd4>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	2b02      	cmp	r3, #2
 800696a:	d129      	bne.n	80069c0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	68b9      	ldr	r1, [r7, #8]
 8006970:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006972:	f000 fb2f 	bl	8006fd4 <prvCopyDataToQueue>
 8006976:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	2b00      	cmp	r3, #0
 800697e:	d010      	beq.n	80069a2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	3324      	adds	r3, #36	; 0x24
 8006984:	4618      	mov	r0, r3
 8006986:	f001 f8f3 	bl	8007b70 <xTaskRemoveFromEventList>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d013      	beq.n	80069b8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006990:	4b3f      	ldr	r3, [pc, #252]	; (8006a90 <xQueueGenericSend+0x1f8>)
 8006992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006996:	601a      	str	r2, [r3, #0]
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	e00a      	b.n	80069b8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d007      	beq.n	80069b8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069a8:	4b39      	ldr	r3, [pc, #228]	; (8006a90 <xQueueGenericSend+0x1f8>)
 80069aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069b8:	f002 f934 	bl	8008c24 <vPortExitCritical>
				return pdPASS;
 80069bc:	2301      	movs	r3, #1
 80069be:	e063      	b.n	8006a88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d103      	bne.n	80069ce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069c6:	f002 f92d 	bl	8008c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069ca:	2300      	movs	r3, #0
 80069cc:	e05c      	b.n	8006a88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d106      	bne.n	80069e2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80069d4:	f107 0314 	add.w	r3, r7, #20
 80069d8:	4618      	mov	r0, r3
 80069da:	f001 f92d 	bl	8007c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80069de:	2301      	movs	r3, #1
 80069e0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80069e2:	f002 f91f 	bl	8008c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80069e6:	f000 fe9f 	bl	8007728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80069ea:	f002 f8eb 	bl	8008bc4 <vPortEnterCritical>
 80069ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069f4:	b25b      	sxtb	r3, r3
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069fa:	d103      	bne.n	8006a04 <xQueueGenericSend+0x16c>
 80069fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a0a:	b25b      	sxtb	r3, r3
 8006a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a10:	d103      	bne.n	8006a1a <xQueueGenericSend+0x182>
 8006a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a1a:	f002 f903 	bl	8008c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a1e:	1d3a      	adds	r2, r7, #4
 8006a20:	f107 0314 	add.w	r3, r7, #20
 8006a24:	4611      	mov	r1, r2
 8006a26:	4618      	mov	r0, r3
 8006a28:	f001 f91c 	bl	8007c64 <xTaskCheckForTimeOut>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d124      	bne.n	8006a7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a34:	f000 fbc6 	bl	80071c4 <prvIsQueueFull>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d018      	beq.n	8006a70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a40:	3310      	adds	r3, #16
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	4611      	mov	r1, r2
 8006a46:	4618      	mov	r0, r3
 8006a48:	f001 f842 	bl	8007ad0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a4e:	f000 fb51 	bl	80070f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a52:	f000 fe77 	bl	8007744 <xTaskResumeAll>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	f47f af7c 	bne.w	8006956 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006a5e:	4b0c      	ldr	r3, [pc, #48]	; (8006a90 <xQueueGenericSend+0x1f8>)
 8006a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a64:	601a      	str	r2, [r3, #0]
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	e772      	b.n	8006956 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006a70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a72:	f000 fb3f 	bl	80070f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a76:	f000 fe65 	bl	8007744 <xTaskResumeAll>
 8006a7a:	e76c      	b.n	8006956 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006a7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a7e:	f000 fb39 	bl	80070f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a82:	f000 fe5f 	bl	8007744 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006a86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3738      	adds	r7, #56	; 0x38
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	e000ed04 	.word	0xe000ed04

08006a94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b090      	sub	sp, #64	; 0x40
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10a      	bne.n	8006ac2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab0:	f383 8811 	msr	BASEPRI, r3
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006abe:	bf00      	nop
 8006ac0:	e7fe      	b.n	8006ac0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d103      	bne.n	8006ad0 <xQueueGenericSendFromISR+0x3c>
 8006ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <xQueueGenericSendFromISR+0x40>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e000      	b.n	8006ad6 <xQueueGenericSendFromISR+0x42>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10a      	bne.n	8006af0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ade:	f383 8811 	msr	BASEPRI, r3
 8006ae2:	f3bf 8f6f 	isb	sy
 8006ae6:	f3bf 8f4f 	dsb	sy
 8006aea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006aec:	bf00      	nop
 8006aee:	e7fe      	b.n	8006aee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d103      	bne.n	8006afe <xQueueGenericSendFromISR+0x6a>
 8006af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d101      	bne.n	8006b02 <xQueueGenericSendFromISR+0x6e>
 8006afe:	2301      	movs	r3, #1
 8006b00:	e000      	b.n	8006b04 <xQueueGenericSendFromISR+0x70>
 8006b02:	2300      	movs	r3, #0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d10a      	bne.n	8006b1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b0c:	f383 8811 	msr	BASEPRI, r3
 8006b10:	f3bf 8f6f 	isb	sy
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	623b      	str	r3, [r7, #32]
}
 8006b1a:	bf00      	nop
 8006b1c:	e7fe      	b.n	8006b1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b1e:	f002 f933 	bl	8008d88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b22:	f3ef 8211 	mrs	r2, BASEPRI
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	61fa      	str	r2, [r7, #28]
 8006b38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d302      	bcc.n	8006b50 <xQueueGenericSendFromISR+0xbc>
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d12f      	bne.n	8006bb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	68b9      	ldr	r1, [r7, #8]
 8006b64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006b66:	f000 fa35 	bl	8006fd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006b6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006b6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b72:	d112      	bne.n	8006b9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d016      	beq.n	8006baa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	3324      	adds	r3, #36	; 0x24
 8006b80:	4618      	mov	r0, r3
 8006b82:	f000 fff5 	bl	8007b70 <xTaskRemoveFromEventList>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d00e      	beq.n	8006baa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00b      	beq.n	8006baa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	e007      	b.n	8006baa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	b25a      	sxtb	r2, r3
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006baa:	2301      	movs	r3, #1
 8006bac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006bae:	e001      	b.n	8006bb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bb6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006bbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3740      	adds	r7, #64	; 0x40
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
	...

08006bcc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b08c      	sub	sp, #48	; 0x30
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10a      	bne.n	8006bfc <xQueueReceive+0x30>
	__asm volatile
 8006be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bea:	f383 8811 	msr	BASEPRI, r3
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	f3bf 8f4f 	dsb	sy
 8006bf6:	623b      	str	r3, [r7, #32]
}
 8006bf8:	bf00      	nop
 8006bfa:	e7fe      	b.n	8006bfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d103      	bne.n	8006c0a <xQueueReceive+0x3e>
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <xQueueReceive+0x42>
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <xQueueReceive+0x44>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10a      	bne.n	8006c2a <xQueueReceive+0x5e>
	__asm volatile
 8006c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c18:	f383 8811 	msr	BASEPRI, r3
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	f3bf 8f4f 	dsb	sy
 8006c24:	61fb      	str	r3, [r7, #28]
}
 8006c26:	bf00      	nop
 8006c28:	e7fe      	b.n	8006c28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c2a:	f001 f96f 	bl	8007f0c <xTaskGetSchedulerState>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d102      	bne.n	8006c3a <xQueueReceive+0x6e>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d101      	bne.n	8006c3e <xQueueReceive+0x72>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	e000      	b.n	8006c40 <xQueueReceive+0x74>
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d10a      	bne.n	8006c5a <xQueueReceive+0x8e>
	__asm volatile
 8006c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	61bb      	str	r3, [r7, #24]
}
 8006c56:	bf00      	nop
 8006c58:	e7fe      	b.n	8006c58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c5a:	f001 ffb3 	bl	8008bc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d01f      	beq.n	8006caa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006c6a:	68b9      	ldr	r1, [r7, #8]
 8006c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c6e:	f000 fa1b 	bl	80070a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c74:	1e5a      	subs	r2, r3, #1
 8006c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00f      	beq.n	8006ca2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	3310      	adds	r3, #16
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 ff72 	bl	8007b70 <xTaskRemoveFromEventList>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d007      	beq.n	8006ca2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c92:	4b3d      	ldr	r3, [pc, #244]	; (8006d88 <xQueueReceive+0x1bc>)
 8006c94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	f3bf 8f4f 	dsb	sy
 8006c9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006ca2:	f001 ffbf 	bl	8008c24 <vPortExitCritical>
				return pdPASS;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e069      	b.n	8006d7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d103      	bne.n	8006cb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cb0:	f001 ffb8 	bl	8008c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	e062      	b.n	8006d7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d106      	bne.n	8006ccc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cbe:	f107 0310 	add.w	r3, r7, #16
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f000 ffb8 	bl	8007c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ccc:	f001 ffaa 	bl	8008c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006cd0:	f000 fd2a 	bl	8007728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006cd4:	f001 ff76 	bl	8008bc4 <vPortEnterCritical>
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cde:	b25b      	sxtb	r3, r3
 8006ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ce4:	d103      	bne.n	8006cee <xQueueReceive+0x122>
 8006ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cf4:	b25b      	sxtb	r3, r3
 8006cf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006cfa:	d103      	bne.n	8006d04 <xQueueReceive+0x138>
 8006cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d04:	f001 ff8e 	bl	8008c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d08:	1d3a      	adds	r2, r7, #4
 8006d0a:	f107 0310 	add.w	r3, r7, #16
 8006d0e:	4611      	mov	r1, r2
 8006d10:	4618      	mov	r0, r3
 8006d12:	f000 ffa7 	bl	8007c64 <xTaskCheckForTimeOut>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d123      	bne.n	8006d64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d1e:	f000 fa3b 	bl	8007198 <prvIsQueueEmpty>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d017      	beq.n	8006d58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	3324      	adds	r3, #36	; 0x24
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	4611      	mov	r1, r2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fecd 	bl	8007ad0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d38:	f000 f9dc 	bl	80070f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d3c:	f000 fd02 	bl	8007744 <xTaskResumeAll>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d189      	bne.n	8006c5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006d46:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <xQueueReceive+0x1bc>)
 8006d48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d4c:	601a      	str	r2, [r3, #0]
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	e780      	b.n	8006c5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d5a:	f000 f9cb 	bl	80070f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d5e:	f000 fcf1 	bl	8007744 <xTaskResumeAll>
 8006d62:	e77a      	b.n	8006c5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d66:	f000 f9c5 	bl	80070f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d6a:	f000 fceb 	bl	8007744 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d70:	f000 fa12 	bl	8007198 <prvIsQueueEmpty>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f43f af6f 	beq.w	8006c5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006d7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3730      	adds	r7, #48	; 0x30
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	e000ed04 	.word	0xe000ed04

08006d8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b08e      	sub	sp, #56	; 0x38
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
 8006d94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d96:	2300      	movs	r3, #0
 8006d98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	623b      	str	r3, [r7, #32]
}
 8006dba:	bf00      	nop
 8006dbc:	e7fe      	b.n	8006dbc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00a      	beq.n	8006ddc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	61fb      	str	r3, [r7, #28]
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ddc:	f001 f896 	bl	8007f0c <xTaskGetSchedulerState>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d102      	bne.n	8006dec <xQueueSemaphoreTake+0x60>
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d101      	bne.n	8006df0 <xQueueSemaphoreTake+0x64>
 8006dec:	2301      	movs	r3, #1
 8006dee:	e000      	b.n	8006df2 <xQueueSemaphoreTake+0x66>
 8006df0:	2300      	movs	r3, #0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10a      	bne.n	8006e0c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfa:	f383 8811 	msr	BASEPRI, r3
 8006dfe:	f3bf 8f6f 	isb	sy
 8006e02:	f3bf 8f4f 	dsb	sy
 8006e06:	61bb      	str	r3, [r7, #24]
}
 8006e08:	bf00      	nop
 8006e0a:	e7fe      	b.n	8006e0a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e0c:	f001 feda 	bl	8008bc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d024      	beq.n	8006e66 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	1e5a      	subs	r2, r3, #1
 8006e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e22:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d104      	bne.n	8006e36 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006e2c:	f001 f9e4 	bl	80081f8 <pvTaskIncrementMutexHeldCount>
 8006e30:	4602      	mov	r2, r0
 8006e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e34:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e38:	691b      	ldr	r3, [r3, #16]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00f      	beq.n	8006e5e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e40:	3310      	adds	r3, #16
 8006e42:	4618      	mov	r0, r3
 8006e44:	f000 fe94 	bl	8007b70 <xTaskRemoveFromEventList>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d007      	beq.n	8006e5e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006e4e:	4b54      	ldr	r3, [pc, #336]	; (8006fa0 <xQueueSemaphoreTake+0x214>)
 8006e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e5e:	f001 fee1 	bl	8008c24 <vPortExitCritical>
				return pdPASS;
 8006e62:	2301      	movs	r3, #1
 8006e64:	e097      	b.n	8006f96 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d111      	bne.n	8006e90 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e76:	f383 8811 	msr	BASEPRI, r3
 8006e7a:	f3bf 8f6f 	isb	sy
 8006e7e:	f3bf 8f4f 	dsb	sy
 8006e82:	617b      	str	r3, [r7, #20]
}
 8006e84:	bf00      	nop
 8006e86:	e7fe      	b.n	8006e86 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006e88:	f001 fecc 	bl	8008c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	e082      	b.n	8006f96 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d106      	bne.n	8006ea4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e96:	f107 030c 	add.w	r3, r7, #12
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f000 fecc 	bl	8007c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006ea4:	f001 febe 	bl	8008c24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006ea8:	f000 fc3e 	bl	8007728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006eac:	f001 fe8a 	bl	8008bc4 <vPortEnterCritical>
 8006eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eb6:	b25b      	sxtb	r3, r3
 8006eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ebc:	d103      	bne.n	8006ec6 <xQueueSemaphoreTake+0x13a>
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ecc:	b25b      	sxtb	r3, r3
 8006ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ed2:	d103      	bne.n	8006edc <xQueueSemaphoreTake+0x150>
 8006ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006edc:	f001 fea2 	bl	8008c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ee0:	463a      	mov	r2, r7
 8006ee2:	f107 030c 	add.w	r3, r7, #12
 8006ee6:	4611      	mov	r1, r2
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 febb 	bl	8007c64 <xTaskCheckForTimeOut>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d132      	bne.n	8006f5a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ef4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006ef6:	f000 f94f 	bl	8007198 <prvIsQueueEmpty>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d026      	beq.n	8006f4e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d109      	bne.n	8006f1c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006f08:	f001 fe5c 	bl	8008bc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0e:	689b      	ldr	r3, [r3, #8]
 8006f10:	4618      	mov	r0, r3
 8006f12:	f001 f819 	bl	8007f48 <xTaskPriorityInherit>
 8006f16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006f18:	f001 fe84 	bl	8008c24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1e:	3324      	adds	r3, #36	; 0x24
 8006f20:	683a      	ldr	r2, [r7, #0]
 8006f22:	4611      	mov	r1, r2
 8006f24:	4618      	mov	r0, r3
 8006f26:	f000 fdd3 	bl	8007ad0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f2c:	f000 f8e2 	bl	80070f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f30:	f000 fc08 	bl	8007744 <xTaskResumeAll>
 8006f34:	4603      	mov	r3, r0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f47f af68 	bne.w	8006e0c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006f3c:	4b18      	ldr	r3, [pc, #96]	; (8006fa0 <xQueueSemaphoreTake+0x214>)
 8006f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	e75e      	b.n	8006e0c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f50:	f000 f8d0 	bl	80070f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f54:	f000 fbf6 	bl	8007744 <xTaskResumeAll>
 8006f58:	e758      	b.n	8006e0c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006f5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f5c:	f000 f8ca 	bl	80070f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006f60:	f000 fbf0 	bl	8007744 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f66:	f000 f917 	bl	8007198 <prvIsQueueEmpty>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f43f af4d 	beq.w	8006e0c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d00d      	beq.n	8006f94 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006f78:	f001 fe24 	bl	8008bc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006f7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006f7e:	f000 f811 	bl	8006fa4 <prvGetDisinheritPriorityAfterTimeout>
 8006f82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f001 f8b2 	bl	80080f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006f90:	f001 fe48 	bl	8008c24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006f94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3738      	adds	r7, #56	; 0x38
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	e000ed04 	.word	0xe000ed04

08006fa4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d006      	beq.n	8006fc2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	e001      	b.n	8006fc6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
	}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3714      	adds	r7, #20
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d10d      	bne.n	800700e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d14d      	bne.n	8007096 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	4618      	mov	r0, r3
 8007000:	f001 f80a 	bl	8008018 <xTaskPriorityDisinherit>
 8007004:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	609a      	str	r2, [r3, #8]
 800700c:	e043      	b.n	8007096 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d119      	bne.n	8007048 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	6858      	ldr	r0, [r3, #4]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	461a      	mov	r2, r3
 800701e:	68b9      	ldr	r1, [r7, #8]
 8007020:	f002 fb69 	bl	80096f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	685a      	ldr	r2, [r3, #4]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702c:	441a      	add	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	429a      	cmp	r2, r3
 800703c:	d32b      	bcc.n	8007096 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	605a      	str	r2, [r3, #4]
 8007046:	e026      	b.n	8007096 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	68d8      	ldr	r0, [r3, #12]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007050:	461a      	mov	r2, r3
 8007052:	68b9      	ldr	r1, [r7, #8]
 8007054:	f002 fb4f 	bl	80096f6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	425b      	negs	r3, r3
 8007062:	441a      	add	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	429a      	cmp	r2, r3
 8007072:	d207      	bcs.n	8007084 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707c:	425b      	negs	r3, r3
 800707e:	441a      	add	r2, r3
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b02      	cmp	r3, #2
 8007088:	d105      	bne.n	8007096 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d002      	beq.n	8007096 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	3b01      	subs	r3, #1
 8007094:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	1c5a      	adds	r2, r3, #1
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800709e:	697b      	ldr	r3, [r7, #20]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3718      	adds	r7, #24
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b082      	sub	sp, #8
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
 80070b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d018      	beq.n	80070ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c2:	441a      	add	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68da      	ldr	r2, [r3, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d303      	bcc.n	80070dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68d9      	ldr	r1, [r3, #12]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e4:	461a      	mov	r2, r3
 80070e6:	6838      	ldr	r0, [r7, #0]
 80070e8:	f002 fb05 	bl	80096f6 <memcpy>
	}
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070fc:	f001 fd62 	bl	8008bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007106:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007108:	e011      	b.n	800712e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710e:	2b00      	cmp	r3, #0
 8007110:	d012      	beq.n	8007138 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	3324      	adds	r3, #36	; 0x24
 8007116:	4618      	mov	r0, r3
 8007118:	f000 fd2a 	bl	8007b70 <xTaskRemoveFromEventList>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007122:	f000 fe01 	bl	8007d28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	3b01      	subs	r3, #1
 800712a:	b2db      	uxtb	r3, r3
 800712c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800712e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007132:	2b00      	cmp	r3, #0
 8007134:	dce9      	bgt.n	800710a <prvUnlockQueue+0x16>
 8007136:	e000      	b.n	800713a <prvUnlockQueue+0x46>
					break;
 8007138:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	22ff      	movs	r2, #255	; 0xff
 800713e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007142:	f001 fd6f 	bl	8008c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007146:	f001 fd3d 	bl	8008bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007150:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007152:	e011      	b.n	8007178 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d012      	beq.n	8007182 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3310      	adds	r3, #16
 8007160:	4618      	mov	r0, r3
 8007162:	f000 fd05 	bl	8007b70 <xTaskRemoveFromEventList>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800716c:	f000 fddc 	bl	8007d28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007170:	7bbb      	ldrb	r3, [r7, #14]
 8007172:	3b01      	subs	r3, #1
 8007174:	b2db      	uxtb	r3, r3
 8007176:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800717c:	2b00      	cmp	r3, #0
 800717e:	dce9      	bgt.n	8007154 <prvUnlockQueue+0x60>
 8007180:	e000      	b.n	8007184 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007182:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	22ff      	movs	r2, #255	; 0xff
 8007188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800718c:	f001 fd4a 	bl	8008c24 <vPortExitCritical>
}
 8007190:	bf00      	nop
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071a0:	f001 fd10 	bl	8008bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d102      	bne.n	80071b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071ac:	2301      	movs	r3, #1
 80071ae:	60fb      	str	r3, [r7, #12]
 80071b0:	e001      	b.n	80071b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071b6:	f001 fd35 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 80071ba:	68fb      	ldr	r3, [r7, #12]
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3710      	adds	r7, #16
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}

080071c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b084      	sub	sp, #16
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071cc:	f001 fcfa 	bl	8008bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d8:	429a      	cmp	r2, r3
 80071da:	d102      	bne.n	80071e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071dc:	2301      	movs	r3, #1
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	e001      	b.n	80071e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071e2:	2300      	movs	r3, #0
 80071e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071e6:	f001 fd1d 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 80071ea:	68fb      	ldr	r3, [r7, #12]
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071fe:	2300      	movs	r3, #0
 8007200:	60fb      	str	r3, [r7, #12]
 8007202:	e014      	b.n	800722e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007204:	4a0f      	ldr	r2, [pc, #60]	; (8007244 <vQueueAddToRegistry+0x50>)
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d10b      	bne.n	8007228 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007210:	490c      	ldr	r1, [pc, #48]	; (8007244 <vQueueAddToRegistry+0x50>)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	683a      	ldr	r2, [r7, #0]
 8007216:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800721a:	4a0a      	ldr	r2, [pc, #40]	; (8007244 <vQueueAddToRegistry+0x50>)
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	00db      	lsls	r3, r3, #3
 8007220:	4413      	add	r3, r2
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007226:	e006      	b.n	8007236 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3301      	adds	r3, #1
 800722c:	60fb      	str	r3, [r7, #12]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2b07      	cmp	r3, #7
 8007232:	d9e7      	bls.n	8007204 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007234:	bf00      	nop
 8007236:	bf00      	nop
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	20000908 	.word	0x20000908

08007248 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007258:	f001 fcb4 	bl	8008bc4 <vPortEnterCritical>
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007262:	b25b      	sxtb	r3, r3
 8007264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007268:	d103      	bne.n	8007272 <vQueueWaitForMessageRestricted+0x2a>
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007278:	b25b      	sxtb	r3, r3
 800727a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800727e:	d103      	bne.n	8007288 <vQueueWaitForMessageRestricted+0x40>
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007288:	f001 fccc 	bl	8008c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007290:	2b00      	cmp	r3, #0
 8007292:	d106      	bne.n	80072a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	3324      	adds	r3, #36	; 0x24
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	68b9      	ldr	r1, [r7, #8]
 800729c:	4618      	mov	r0, r3
 800729e:	f000 fc3b 	bl	8007b18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072a2:	6978      	ldr	r0, [r7, #20]
 80072a4:	f7ff ff26 	bl	80070f4 <prvUnlockQueue>
	}
 80072a8:	bf00      	nop
 80072aa:	3718      	adds	r7, #24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08e      	sub	sp, #56	; 0x38
 80072b4:	af04      	add	r7, sp, #16
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <xTaskCreateStatic+0x2a>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	623b      	str	r3, [r7, #32]
}
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80072da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d10a      	bne.n	80072f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	61fb      	str	r3, [r7, #28]
}
 80072f2:	bf00      	nop
 80072f4:	e7fe      	b.n	80072f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80072f6:	235c      	movs	r3, #92	; 0x5c
 80072f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	2b5c      	cmp	r3, #92	; 0x5c
 80072fe:	d00a      	beq.n	8007316 <xTaskCreateStatic+0x66>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	61bb      	str	r3, [r7, #24]
}
 8007312:	bf00      	nop
 8007314:	e7fe      	b.n	8007314 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007316:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731a:	2b00      	cmp	r3, #0
 800731c:	d01e      	beq.n	800735c <xTaskCreateStatic+0xac>
 800731e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007320:	2b00      	cmp	r3, #0
 8007322:	d01b      	beq.n	800735c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800732c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800732e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007330:	2202      	movs	r2, #2
 8007332:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007336:	2300      	movs	r3, #0
 8007338:	9303      	str	r3, [sp, #12]
 800733a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733c:	9302      	str	r3, [sp, #8]
 800733e:	f107 0314 	add.w	r3, r7, #20
 8007342:	9301      	str	r3, [sp, #4]
 8007344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007346:	9300      	str	r3, [sp, #0]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	68b9      	ldr	r1, [r7, #8]
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 f850 	bl	80073f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007354:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007356:	f000 f8dd 	bl	8007514 <prvAddNewTaskToReadyList>
 800735a:	e001      	b.n	8007360 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800735c:	2300      	movs	r3, #0
 800735e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007360:	697b      	ldr	r3, [r7, #20]
	}
 8007362:	4618      	mov	r0, r3
 8007364:	3728      	adds	r7, #40	; 0x28
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800736a:	b580      	push	{r7, lr}
 800736c:	b08c      	sub	sp, #48	; 0x30
 800736e:	af04      	add	r7, sp, #16
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	60b9      	str	r1, [r7, #8]
 8007374:	603b      	str	r3, [r7, #0]
 8007376:	4613      	mov	r3, r2
 8007378:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800737a:	88fb      	ldrh	r3, [r7, #6]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4618      	mov	r0, r3
 8007380:	f001 fd42 	bl	8008e08 <pvPortMalloc>
 8007384:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00e      	beq.n	80073aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800738c:	205c      	movs	r0, #92	; 0x5c
 800738e:	f001 fd3b 	bl	8008e08 <pvPortMalloc>
 8007392:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	631a      	str	r2, [r3, #48]	; 0x30
 80073a0:	e005      	b.n	80073ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073a2:	6978      	ldr	r0, [r7, #20]
 80073a4:	f001 fdfc 	bl	8008fa0 <vPortFree>
 80073a8:	e001      	b.n	80073ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d017      	beq.n	80073e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073bc:	88fa      	ldrh	r2, [r7, #6]
 80073be:	2300      	movs	r3, #0
 80073c0:	9303      	str	r3, [sp, #12]
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	9302      	str	r3, [sp, #8]
 80073c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c8:	9301      	str	r3, [sp, #4]
 80073ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	68b9      	ldr	r1, [r7, #8]
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f000 f80e 	bl	80073f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073d8:	69f8      	ldr	r0, [r7, #28]
 80073da:	f000 f89b 	bl	8007514 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073de:	2301      	movs	r3, #1
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	e002      	b.n	80073ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073ea:	69bb      	ldr	r3, [r7, #24]
	}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3720      	adds	r7, #32
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
 8007400:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007404:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	461a      	mov	r2, r3
 800740c:	21a5      	movs	r1, #165	; 0xa5
 800740e:	f002 f89a 	bl	8009546 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800741c:	3b01      	subs	r3, #1
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	f023 0307 	bic.w	r3, r3, #7
 800742a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	617b      	str	r3, [r7, #20]
}
 8007448:	bf00      	nop
 800744a:	e7fe      	b.n	800744a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d01f      	beq.n	8007492 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007452:	2300      	movs	r3, #0
 8007454:	61fb      	str	r3, [r7, #28]
 8007456:	e012      	b.n	800747e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	4413      	add	r3, r2
 800745e:	7819      	ldrb	r1, [r3, #0]
 8007460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	4413      	add	r3, r2
 8007466:	3334      	adds	r3, #52	; 0x34
 8007468:	460a      	mov	r2, r1
 800746a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	4413      	add	r3, r2
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d006      	beq.n	8007486 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007478:	69fb      	ldr	r3, [r7, #28]
 800747a:	3301      	adds	r3, #1
 800747c:	61fb      	str	r3, [r7, #28]
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	2b0f      	cmp	r3, #15
 8007482:	d9e9      	bls.n	8007458 <prvInitialiseNewTask+0x64>
 8007484:	e000      	b.n	8007488 <prvInitialiseNewTask+0x94>
			{
				break;
 8007486:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	2200      	movs	r2, #0
 800748c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007490:	e003      	b.n	800749a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007494:	2200      	movs	r2, #0
 8007496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749c:	2b37      	cmp	r3, #55	; 0x37
 800749e:	d901      	bls.n	80074a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074a0:	2337      	movs	r3, #55	; 0x37
 80074a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	2200      	movs	r2, #0
 80074b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	3304      	adds	r3, #4
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fe ff64 	bl	8006388 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	3318      	adds	r3, #24
 80074c4:	4618      	mov	r0, r3
 80074c6:	f7fe ff5f 	bl	8006388 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e2:	2200      	movs	r2, #0
 80074e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	2200      	movs	r2, #0
 80074ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	68f9      	ldr	r1, [r7, #12]
 80074f2:	69b8      	ldr	r0, [r7, #24]
 80074f4:	f001 fa36 	bl	8008964 <pxPortInitialiseStack>
 80074f8:	4602      	mov	r2, r0
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80074fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007500:	2b00      	cmp	r3, #0
 8007502:	d002      	beq.n	800750a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007508:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800750a:	bf00      	nop
 800750c:	3720      	adds	r7, #32
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800751c:	f001 fb52 	bl	8008bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007520:	4b2d      	ldr	r3, [pc, #180]	; (80075d8 <prvAddNewTaskToReadyList+0xc4>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	3301      	adds	r3, #1
 8007526:	4a2c      	ldr	r2, [pc, #176]	; (80075d8 <prvAddNewTaskToReadyList+0xc4>)
 8007528:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800752a:	4b2c      	ldr	r3, [pc, #176]	; (80075dc <prvAddNewTaskToReadyList+0xc8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d109      	bne.n	8007546 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007532:	4a2a      	ldr	r2, [pc, #168]	; (80075dc <prvAddNewTaskToReadyList+0xc8>)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007538:	4b27      	ldr	r3, [pc, #156]	; (80075d8 <prvAddNewTaskToReadyList+0xc4>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d110      	bne.n	8007562 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007540:	f000 fc16 	bl	8007d70 <prvInitialiseTaskLists>
 8007544:	e00d      	b.n	8007562 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007546:	4b26      	ldr	r3, [pc, #152]	; (80075e0 <prvAddNewTaskToReadyList+0xcc>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d109      	bne.n	8007562 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800754e:	4b23      	ldr	r3, [pc, #140]	; (80075dc <prvAddNewTaskToReadyList+0xc8>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007558:	429a      	cmp	r2, r3
 800755a:	d802      	bhi.n	8007562 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800755c:	4a1f      	ldr	r2, [pc, #124]	; (80075dc <prvAddNewTaskToReadyList+0xc8>)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007562:	4b20      	ldr	r3, [pc, #128]	; (80075e4 <prvAddNewTaskToReadyList+0xd0>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3301      	adds	r3, #1
 8007568:	4a1e      	ldr	r2, [pc, #120]	; (80075e4 <prvAddNewTaskToReadyList+0xd0>)
 800756a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800756c:	4b1d      	ldr	r3, [pc, #116]	; (80075e4 <prvAddNewTaskToReadyList+0xd0>)
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007578:	4b1b      	ldr	r3, [pc, #108]	; (80075e8 <prvAddNewTaskToReadyList+0xd4>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	429a      	cmp	r2, r3
 800757e:	d903      	bls.n	8007588 <prvAddNewTaskToReadyList+0x74>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	4a18      	ldr	r2, [pc, #96]	; (80075e8 <prvAddNewTaskToReadyList+0xd4>)
 8007586:	6013      	str	r3, [r2, #0]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4a15      	ldr	r2, [pc, #84]	; (80075ec <prvAddNewTaskToReadyList+0xd8>)
 8007596:	441a      	add	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3304      	adds	r3, #4
 800759c:	4619      	mov	r1, r3
 800759e:	4610      	mov	r0, r2
 80075a0:	f7fe feff 	bl	80063a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075a4:	f001 fb3e 	bl	8008c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075a8:	4b0d      	ldr	r3, [pc, #52]	; (80075e0 <prvAddNewTaskToReadyList+0xcc>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d00e      	beq.n	80075ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075b0:	4b0a      	ldr	r3, [pc, #40]	; (80075dc <prvAddNewTaskToReadyList+0xc8>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d207      	bcs.n	80075ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075be:	4b0c      	ldr	r3, [pc, #48]	; (80075f0 <prvAddNewTaskToReadyList+0xdc>)
 80075c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c4:	601a      	str	r2, [r3, #0]
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075ce:	bf00      	nop
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20000e1c 	.word	0x20000e1c
 80075dc:	20000948 	.word	0x20000948
 80075e0:	20000e28 	.word	0x20000e28
 80075e4:	20000e38 	.word	0x20000e38
 80075e8:	20000e24 	.word	0x20000e24
 80075ec:	2000094c 	.word	0x2000094c
 80075f0:	e000ed04 	.word	0xe000ed04

080075f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80075fc:	2300      	movs	r3, #0
 80075fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d017      	beq.n	8007636 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007606:	4b13      	ldr	r3, [pc, #76]	; (8007654 <vTaskDelay+0x60>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00a      	beq.n	8007624 <vTaskDelay+0x30>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	60bb      	str	r3, [r7, #8]
}
 8007620:	bf00      	nop
 8007622:	e7fe      	b.n	8007622 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007624:	f000 f880 	bl	8007728 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007628:	2100      	movs	r1, #0
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f000 fdf8 	bl	8008220 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007630:	f000 f888 	bl	8007744 <xTaskResumeAll>
 8007634:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d107      	bne.n	800764c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800763c:	4b06      	ldr	r3, [pc, #24]	; (8007658 <vTaskDelay+0x64>)
 800763e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800764c:	bf00      	nop
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	20000e44 	.word	0x20000e44
 8007658:	e000ed04 	.word	0xe000ed04

0800765c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08a      	sub	sp, #40	; 0x28
 8007660:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007662:	2300      	movs	r3, #0
 8007664:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007666:	2300      	movs	r3, #0
 8007668:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800766a:	463a      	mov	r2, r7
 800766c:	1d39      	adds	r1, r7, #4
 800766e:	f107 0308 	add.w	r3, r7, #8
 8007672:	4618      	mov	r0, r3
 8007674:	f7fe fe34 	bl	80062e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	9202      	str	r2, [sp, #8]
 8007680:	9301      	str	r3, [sp, #4]
 8007682:	2300      	movs	r3, #0
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	2300      	movs	r3, #0
 8007688:	460a      	mov	r2, r1
 800768a:	4921      	ldr	r1, [pc, #132]	; (8007710 <vTaskStartScheduler+0xb4>)
 800768c:	4821      	ldr	r0, [pc, #132]	; (8007714 <vTaskStartScheduler+0xb8>)
 800768e:	f7ff fe0f 	bl	80072b0 <xTaskCreateStatic>
 8007692:	4603      	mov	r3, r0
 8007694:	4a20      	ldr	r2, [pc, #128]	; (8007718 <vTaskStartScheduler+0xbc>)
 8007696:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007698:	4b1f      	ldr	r3, [pc, #124]	; (8007718 <vTaskStartScheduler+0xbc>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80076a0:	2301      	movs	r3, #1
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	e001      	b.n	80076aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d102      	bne.n	80076b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80076b0:	f000 fe0a 	bl	80082c8 <xTimerCreateTimerTask>
 80076b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d116      	bne.n	80076ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80076bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	613b      	str	r3, [r7, #16]
}
 80076ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80076d0:	4b12      	ldr	r3, [pc, #72]	; (800771c <vTaskStartScheduler+0xc0>)
 80076d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80076d8:	4b11      	ldr	r3, [pc, #68]	; (8007720 <vTaskStartScheduler+0xc4>)
 80076da:	2201      	movs	r2, #1
 80076dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80076de:	4b11      	ldr	r3, [pc, #68]	; (8007724 <vTaskStartScheduler+0xc8>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80076e4:	f001 f9cc 	bl	8008a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80076e8:	e00e      	b.n	8007708 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076f0:	d10a      	bne.n	8007708 <vTaskStartScheduler+0xac>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60fb      	str	r3, [r7, #12]
}
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <vTaskStartScheduler+0xaa>
}
 8007708:	bf00      	nop
 800770a:	3718      	adds	r7, #24
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}
 8007710:	0800a754 	.word	0x0800a754
 8007714:	08007d41 	.word	0x08007d41
 8007718:	20000e40 	.word	0x20000e40
 800771c:	20000e3c 	.word	0x20000e3c
 8007720:	20000e28 	.word	0x20000e28
 8007724:	20000e20 	.word	0x20000e20

08007728 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007728:	b480      	push	{r7}
 800772a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800772c:	4b04      	ldr	r3, [pc, #16]	; (8007740 <vTaskSuspendAll+0x18>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	3301      	adds	r3, #1
 8007732:	4a03      	ldr	r2, [pc, #12]	; (8007740 <vTaskSuspendAll+0x18>)
 8007734:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007736:	bf00      	nop
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	20000e44 	.word	0x20000e44

08007744 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b084      	sub	sp, #16
 8007748:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800774a:	2300      	movs	r3, #0
 800774c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800774e:	2300      	movs	r3, #0
 8007750:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007752:	4b42      	ldr	r3, [pc, #264]	; (800785c <xTaskResumeAll+0x118>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d10a      	bne.n	8007770 <xTaskResumeAll+0x2c>
	__asm volatile
 800775a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800775e:	f383 8811 	msr	BASEPRI, r3
 8007762:	f3bf 8f6f 	isb	sy
 8007766:	f3bf 8f4f 	dsb	sy
 800776a:	603b      	str	r3, [r7, #0]
}
 800776c:	bf00      	nop
 800776e:	e7fe      	b.n	800776e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007770:	f001 fa28 	bl	8008bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007774:	4b39      	ldr	r3, [pc, #228]	; (800785c <xTaskResumeAll+0x118>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	3b01      	subs	r3, #1
 800777a:	4a38      	ldr	r2, [pc, #224]	; (800785c <xTaskResumeAll+0x118>)
 800777c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800777e:	4b37      	ldr	r3, [pc, #220]	; (800785c <xTaskResumeAll+0x118>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d162      	bne.n	800784c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007786:	4b36      	ldr	r3, [pc, #216]	; (8007860 <xTaskResumeAll+0x11c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d05e      	beq.n	800784c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800778e:	e02f      	b.n	80077f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007790:	4b34      	ldr	r3, [pc, #208]	; (8007864 <xTaskResumeAll+0x120>)
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	3318      	adds	r3, #24
 800779c:	4618      	mov	r0, r3
 800779e:	f7fe fe5d 	bl	800645c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	3304      	adds	r3, #4
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7fe fe58 	bl	800645c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b0:	4b2d      	ldr	r3, [pc, #180]	; (8007868 <xTaskResumeAll+0x124>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d903      	bls.n	80077c0 <xTaskResumeAll+0x7c>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077bc:	4a2a      	ldr	r2, [pc, #168]	; (8007868 <xTaskResumeAll+0x124>)
 80077be:	6013      	str	r3, [r2, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077c4:	4613      	mov	r3, r2
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4a27      	ldr	r2, [pc, #156]	; (800786c <xTaskResumeAll+0x128>)
 80077ce:	441a      	add	r2, r3
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f7fe fde3 	bl	80063a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077e0:	4b23      	ldr	r3, [pc, #140]	; (8007870 <xTaskResumeAll+0x12c>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	429a      	cmp	r2, r3
 80077e8:	d302      	bcc.n	80077f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80077ea:	4b22      	ldr	r3, [pc, #136]	; (8007874 <xTaskResumeAll+0x130>)
 80077ec:	2201      	movs	r2, #1
 80077ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80077f0:	4b1c      	ldr	r3, [pc, #112]	; (8007864 <xTaskResumeAll+0x120>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1cb      	bne.n	8007790 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80077fe:	f000 fb55 	bl	8007eac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007802:	4b1d      	ldr	r3, [pc, #116]	; (8007878 <xTaskResumeAll+0x134>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d010      	beq.n	8007830 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800780e:	f000 f847 	bl	80078a0 <xTaskIncrementTick>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007818:	4b16      	ldr	r3, [pc, #88]	; (8007874 <xTaskResumeAll+0x130>)
 800781a:	2201      	movs	r2, #1
 800781c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3b01      	subs	r3, #1
 8007822:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d1f1      	bne.n	800780e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800782a:	4b13      	ldr	r3, [pc, #76]	; (8007878 <xTaskResumeAll+0x134>)
 800782c:	2200      	movs	r2, #0
 800782e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007830:	4b10      	ldr	r3, [pc, #64]	; (8007874 <xTaskResumeAll+0x130>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d009      	beq.n	800784c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007838:	2301      	movs	r3, #1
 800783a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800783c:	4b0f      	ldr	r3, [pc, #60]	; (800787c <xTaskResumeAll+0x138>)
 800783e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007842:	601a      	str	r2, [r3, #0]
 8007844:	f3bf 8f4f 	dsb	sy
 8007848:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800784c:	f001 f9ea 	bl	8008c24 <vPortExitCritical>

	return xAlreadyYielded;
 8007850:	68bb      	ldr	r3, [r7, #8]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20000e44 	.word	0x20000e44
 8007860:	20000e1c 	.word	0x20000e1c
 8007864:	20000ddc 	.word	0x20000ddc
 8007868:	20000e24 	.word	0x20000e24
 800786c:	2000094c 	.word	0x2000094c
 8007870:	20000948 	.word	0x20000948
 8007874:	20000e30 	.word	0x20000e30
 8007878:	20000e2c 	.word	0x20000e2c
 800787c:	e000ed04 	.word	0xe000ed04

08007880 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007886:	4b05      	ldr	r3, [pc, #20]	; (800789c <xTaskGetTickCount+0x1c>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800788c:	687b      	ldr	r3, [r7, #4]
}
 800788e:	4618      	mov	r0, r3
 8007890:	370c      	adds	r7, #12
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	20000e20 	.word	0x20000e20

080078a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80078a6:	2300      	movs	r3, #0
 80078a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078aa:	4b4f      	ldr	r3, [pc, #316]	; (80079e8 <xTaskIncrementTick+0x148>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	f040 808f 	bne.w	80079d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80078b4:	4b4d      	ldr	r3, [pc, #308]	; (80079ec <xTaskIncrementTick+0x14c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	3301      	adds	r3, #1
 80078ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80078bc:	4a4b      	ldr	r2, [pc, #300]	; (80079ec <xTaskIncrementTick+0x14c>)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d120      	bne.n	800790a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80078c8:	4b49      	ldr	r3, [pc, #292]	; (80079f0 <xTaskIncrementTick+0x150>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	603b      	str	r3, [r7, #0]
}
 80078e4:	bf00      	nop
 80078e6:	e7fe      	b.n	80078e6 <xTaskIncrementTick+0x46>
 80078e8:	4b41      	ldr	r3, [pc, #260]	; (80079f0 <xTaskIncrementTick+0x150>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	60fb      	str	r3, [r7, #12]
 80078ee:	4b41      	ldr	r3, [pc, #260]	; (80079f4 <xTaskIncrementTick+0x154>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a3f      	ldr	r2, [pc, #252]	; (80079f0 <xTaskIncrementTick+0x150>)
 80078f4:	6013      	str	r3, [r2, #0]
 80078f6:	4a3f      	ldr	r2, [pc, #252]	; (80079f4 <xTaskIncrementTick+0x154>)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6013      	str	r3, [r2, #0]
 80078fc:	4b3e      	ldr	r3, [pc, #248]	; (80079f8 <xTaskIncrementTick+0x158>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	3301      	adds	r3, #1
 8007902:	4a3d      	ldr	r2, [pc, #244]	; (80079f8 <xTaskIncrementTick+0x158>)
 8007904:	6013      	str	r3, [r2, #0]
 8007906:	f000 fad1 	bl	8007eac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800790a:	4b3c      	ldr	r3, [pc, #240]	; (80079fc <xTaskIncrementTick+0x15c>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	429a      	cmp	r2, r3
 8007912:	d349      	bcc.n	80079a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007914:	4b36      	ldr	r3, [pc, #216]	; (80079f0 <xTaskIncrementTick+0x150>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d104      	bne.n	8007928 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800791e:	4b37      	ldr	r3, [pc, #220]	; (80079fc <xTaskIncrementTick+0x15c>)
 8007920:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007924:	601a      	str	r2, [r3, #0]
					break;
 8007926:	e03f      	b.n	80079a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007928:	4b31      	ldr	r3, [pc, #196]	; (80079f0 <xTaskIncrementTick+0x150>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	685b      	ldr	r3, [r3, #4]
 8007936:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007938:	693a      	ldr	r2, [r7, #16]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	429a      	cmp	r2, r3
 800793e:	d203      	bcs.n	8007948 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007940:	4a2e      	ldr	r2, [pc, #184]	; (80079fc <xTaskIncrementTick+0x15c>)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007946:	e02f      	b.n	80079a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	3304      	adds	r3, #4
 800794c:	4618      	mov	r0, r3
 800794e:	f7fe fd85 	bl	800645c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007956:	2b00      	cmp	r3, #0
 8007958:	d004      	beq.n	8007964 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	3318      	adds	r3, #24
 800795e:	4618      	mov	r0, r3
 8007960:	f7fe fd7c 	bl	800645c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007968:	4b25      	ldr	r3, [pc, #148]	; (8007a00 <xTaskIncrementTick+0x160>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	429a      	cmp	r2, r3
 800796e:	d903      	bls.n	8007978 <xTaskIncrementTick+0xd8>
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007974:	4a22      	ldr	r2, [pc, #136]	; (8007a00 <xTaskIncrementTick+0x160>)
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800797c:	4613      	mov	r3, r2
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	009b      	lsls	r3, r3, #2
 8007984:	4a1f      	ldr	r2, [pc, #124]	; (8007a04 <xTaskIncrementTick+0x164>)
 8007986:	441a      	add	r2, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	3304      	adds	r3, #4
 800798c:	4619      	mov	r1, r3
 800798e:	4610      	mov	r0, r2
 8007990:	f7fe fd07 	bl	80063a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007998:	4b1b      	ldr	r3, [pc, #108]	; (8007a08 <xTaskIncrementTick+0x168>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799e:	429a      	cmp	r2, r3
 80079a0:	d3b8      	bcc.n	8007914 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80079a2:	2301      	movs	r3, #1
 80079a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079a6:	e7b5      	b.n	8007914 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80079a8:	4b17      	ldr	r3, [pc, #92]	; (8007a08 <xTaskIncrementTick+0x168>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ae:	4915      	ldr	r1, [pc, #84]	; (8007a04 <xTaskIncrementTick+0x164>)
 80079b0:	4613      	mov	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	4413      	add	r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	440b      	add	r3, r1
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d901      	bls.n	80079c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80079c0:	2301      	movs	r3, #1
 80079c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80079c4:	4b11      	ldr	r3, [pc, #68]	; (8007a0c <xTaskIncrementTick+0x16c>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d007      	beq.n	80079dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80079cc:	2301      	movs	r3, #1
 80079ce:	617b      	str	r3, [r7, #20]
 80079d0:	e004      	b.n	80079dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80079d2:	4b0f      	ldr	r3, [pc, #60]	; (8007a10 <xTaskIncrementTick+0x170>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3301      	adds	r3, #1
 80079d8:	4a0d      	ldr	r2, [pc, #52]	; (8007a10 <xTaskIncrementTick+0x170>)
 80079da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80079dc:	697b      	ldr	r3, [r7, #20]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3718      	adds	r7, #24
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}
 80079e6:	bf00      	nop
 80079e8:	20000e44 	.word	0x20000e44
 80079ec:	20000e20 	.word	0x20000e20
 80079f0:	20000dd4 	.word	0x20000dd4
 80079f4:	20000dd8 	.word	0x20000dd8
 80079f8:	20000e34 	.word	0x20000e34
 80079fc:	20000e3c 	.word	0x20000e3c
 8007a00:	20000e24 	.word	0x20000e24
 8007a04:	2000094c 	.word	0x2000094c
 8007a08:	20000948 	.word	0x20000948
 8007a0c:	20000e30 	.word	0x20000e30
 8007a10:	20000e2c 	.word	0x20000e2c

08007a14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a1a:	4b28      	ldr	r3, [pc, #160]	; (8007abc <vTaskSwitchContext+0xa8>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d003      	beq.n	8007a2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a22:	4b27      	ldr	r3, [pc, #156]	; (8007ac0 <vTaskSwitchContext+0xac>)
 8007a24:	2201      	movs	r2, #1
 8007a26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007a28:	e041      	b.n	8007aae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007a2a:	4b25      	ldr	r3, [pc, #148]	; (8007ac0 <vTaskSwitchContext+0xac>)
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a30:	4b24      	ldr	r3, [pc, #144]	; (8007ac4 <vTaskSwitchContext+0xb0>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	60fb      	str	r3, [r7, #12]
 8007a36:	e010      	b.n	8007a5a <vTaskSwitchContext+0x46>
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d10a      	bne.n	8007a54 <vTaskSwitchContext+0x40>
	__asm volatile
 8007a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a42:	f383 8811 	msr	BASEPRI, r3
 8007a46:	f3bf 8f6f 	isb	sy
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	607b      	str	r3, [r7, #4]
}
 8007a50:	bf00      	nop
 8007a52:	e7fe      	b.n	8007a52 <vTaskSwitchContext+0x3e>
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	3b01      	subs	r3, #1
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	491b      	ldr	r1, [pc, #108]	; (8007ac8 <vTaskSwitchContext+0xb4>)
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	440b      	add	r3, r1
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d0e4      	beq.n	8007a38 <vTaskSwitchContext+0x24>
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4613      	mov	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4a13      	ldr	r2, [pc, #76]	; (8007ac8 <vTaskSwitchContext+0xb4>)
 8007a7a:	4413      	add	r3, r2
 8007a7c:	60bb      	str	r3, [r7, #8]
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	685b      	ldr	r3, [r3, #4]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	605a      	str	r2, [r3, #4]
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	685a      	ldr	r2, [r3, #4]
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	3308      	adds	r3, #8
 8007a90:	429a      	cmp	r2, r3
 8007a92:	d104      	bne.n	8007a9e <vTaskSwitchContext+0x8a>
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	685a      	ldr	r2, [r3, #4]
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	605a      	str	r2, [r3, #4]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	4a09      	ldr	r2, [pc, #36]	; (8007acc <vTaskSwitchContext+0xb8>)
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	4a06      	ldr	r2, [pc, #24]	; (8007ac4 <vTaskSwitchContext+0xb0>)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6013      	str	r3, [r2, #0]
}
 8007aae:	bf00      	nop
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	20000e44 	.word	0x20000e44
 8007ac0:	20000e30 	.word	0x20000e30
 8007ac4:	20000e24 	.word	0x20000e24
 8007ac8:	2000094c 	.word	0x2000094c
 8007acc:	20000948 	.word	0x20000948

08007ad0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10a      	bne.n	8007af6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	60fb      	str	r3, [r7, #12]
}
 8007af2:	bf00      	nop
 8007af4:	e7fe      	b.n	8007af4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007af6:	4b07      	ldr	r3, [pc, #28]	; (8007b14 <vTaskPlaceOnEventList+0x44>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3318      	adds	r3, #24
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7fe fc73 	bl	80063ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b04:	2101      	movs	r1, #1
 8007b06:	6838      	ldr	r0, [r7, #0]
 8007b08:	f000 fb8a 	bl	8008220 <prvAddCurrentTaskToDelayedList>
}
 8007b0c:	bf00      	nop
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	20000948 	.word	0x20000948

08007b18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b086      	sub	sp, #24
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10a      	bne.n	8007b40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	617b      	str	r3, [r7, #20]
}
 8007b3c:	bf00      	nop
 8007b3e:	e7fe      	b.n	8007b3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b40:	4b0a      	ldr	r3, [pc, #40]	; (8007b6c <vTaskPlaceOnEventListRestricted+0x54>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3318      	adds	r3, #24
 8007b46:	4619      	mov	r1, r3
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f7fe fc2a 	bl	80063a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d002      	beq.n	8007b5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	68b8      	ldr	r0, [r7, #8]
 8007b5e:	f000 fb5f 	bl	8008220 <prvAddCurrentTaskToDelayedList>
	}
 8007b62:	bf00      	nop
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20000948 	.word	0x20000948

08007b70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d10a      	bne.n	8007b9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b8a:	f383 8811 	msr	BASEPRI, r3
 8007b8e:	f3bf 8f6f 	isb	sy
 8007b92:	f3bf 8f4f 	dsb	sy
 8007b96:	60fb      	str	r3, [r7, #12]
}
 8007b98:	bf00      	nop
 8007b9a:	e7fe      	b.n	8007b9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	3318      	adds	r3, #24
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fe fc5b 	bl	800645c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ba6:	4b1e      	ldr	r3, [pc, #120]	; (8007c20 <xTaskRemoveFromEventList+0xb0>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d11d      	bne.n	8007bea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007bae:	693b      	ldr	r3, [r7, #16]
 8007bb0:	3304      	adds	r3, #4
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fe fc52 	bl	800645c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bbc:	4b19      	ldr	r3, [pc, #100]	; (8007c24 <xTaskRemoveFromEventList+0xb4>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d903      	bls.n	8007bcc <xTaskRemoveFromEventList+0x5c>
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	4a16      	ldr	r2, [pc, #88]	; (8007c24 <xTaskRemoveFromEventList+0xb4>)
 8007bca:	6013      	str	r3, [r2, #0]
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4a13      	ldr	r2, [pc, #76]	; (8007c28 <xTaskRemoveFromEventList+0xb8>)
 8007bda:	441a      	add	r2, r3
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	3304      	adds	r3, #4
 8007be0:	4619      	mov	r1, r3
 8007be2:	4610      	mov	r0, r2
 8007be4:	f7fe fbdd 	bl	80063a2 <vListInsertEnd>
 8007be8:	e005      	b.n	8007bf6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	3318      	adds	r3, #24
 8007bee:	4619      	mov	r1, r3
 8007bf0:	480e      	ldr	r0, [pc, #56]	; (8007c2c <xTaskRemoveFromEventList+0xbc>)
 8007bf2:	f7fe fbd6 	bl	80063a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfa:	4b0d      	ldr	r3, [pc, #52]	; (8007c30 <xTaskRemoveFromEventList+0xc0>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d905      	bls.n	8007c10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c04:	2301      	movs	r3, #1
 8007c06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c08:	4b0a      	ldr	r3, [pc, #40]	; (8007c34 <xTaskRemoveFromEventList+0xc4>)
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	601a      	str	r2, [r3, #0]
 8007c0e:	e001      	b.n	8007c14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007c10:	2300      	movs	r3, #0
 8007c12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c14:	697b      	ldr	r3, [r7, #20]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20000e44 	.word	0x20000e44
 8007c24:	20000e24 	.word	0x20000e24
 8007c28:	2000094c 	.word	0x2000094c
 8007c2c:	20000ddc 	.word	0x20000ddc
 8007c30:	20000948 	.word	0x20000948
 8007c34:	20000e30 	.word	0x20000e30

08007c38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007c40:	4b06      	ldr	r3, [pc, #24]	; (8007c5c <vTaskInternalSetTimeOutState+0x24>)
 8007c42:	681a      	ldr	r2, [r3, #0]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007c48:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <vTaskInternalSetTimeOutState+0x28>)
 8007c4a:	681a      	ldr	r2, [r3, #0]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	605a      	str	r2, [r3, #4]
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	20000e34 	.word	0x20000e34
 8007c60:	20000e20 	.word	0x20000e20

08007c64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b088      	sub	sp, #32
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10a      	bne.n	8007c8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c78:	f383 8811 	msr	BASEPRI, r3
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f3bf 8f4f 	dsb	sy
 8007c84:	613b      	str	r3, [r7, #16]
}
 8007c86:	bf00      	nop
 8007c88:	e7fe      	b.n	8007c88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10a      	bne.n	8007ca6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c94:	f383 8811 	msr	BASEPRI, r3
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	60fb      	str	r3, [r7, #12]
}
 8007ca2:	bf00      	nop
 8007ca4:	e7fe      	b.n	8007ca4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007ca6:	f000 ff8d 	bl	8008bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007caa:	4b1d      	ldr	r3, [pc, #116]	; (8007d20 <xTaskCheckForTimeOut+0xbc>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	69ba      	ldr	r2, [r7, #24]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cc2:	d102      	bne.n	8007cca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	61fb      	str	r3, [r7, #28]
 8007cc8:	e023      	b.n	8007d12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	4b15      	ldr	r3, [pc, #84]	; (8007d24 <xTaskCheckForTimeOut+0xc0>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d007      	beq.n	8007ce6 <xTaskCheckForTimeOut+0x82>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	69ba      	ldr	r2, [r7, #24]
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d302      	bcc.n	8007ce6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	61fb      	str	r3, [r7, #28]
 8007ce4:	e015      	b.n	8007d12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d20b      	bcs.n	8007d08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	1ad2      	subs	r2, r2, r3
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7ff ff9b 	bl	8007c38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d02:	2300      	movs	r3, #0
 8007d04:	61fb      	str	r3, [r7, #28]
 8007d06:	e004      	b.n	8007d12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d12:	f000 ff87 	bl	8008c24 <vPortExitCritical>

	return xReturn;
 8007d16:	69fb      	ldr	r3, [r7, #28]
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3720      	adds	r7, #32
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}
 8007d20:	20000e20 	.word	0x20000e20
 8007d24:	20000e34 	.word	0x20000e34

08007d28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007d28:	b480      	push	{r7}
 8007d2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007d2c:	4b03      	ldr	r3, [pc, #12]	; (8007d3c <vTaskMissedYield+0x14>)
 8007d2e:	2201      	movs	r2, #1
 8007d30:	601a      	str	r2, [r3, #0]
}
 8007d32:	bf00      	nop
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	20000e30 	.word	0x20000e30

08007d40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d48:	f000 f852 	bl	8007df0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d4c:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <prvIdleTask+0x28>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d9f9      	bls.n	8007d48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d54:	4b05      	ldr	r3, [pc, #20]	; (8007d6c <prvIdleTask+0x2c>)
 8007d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d5a:	601a      	str	r2, [r3, #0]
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d64:	e7f0      	b.n	8007d48 <prvIdleTask+0x8>
 8007d66:	bf00      	nop
 8007d68:	2000094c 	.word	0x2000094c
 8007d6c:	e000ed04 	.word	0xe000ed04

08007d70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b082      	sub	sp, #8
 8007d74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d76:	2300      	movs	r3, #0
 8007d78:	607b      	str	r3, [r7, #4]
 8007d7a:	e00c      	b.n	8007d96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	009b      	lsls	r3, r3, #2
 8007d82:	4413      	add	r3, r2
 8007d84:	009b      	lsls	r3, r3, #2
 8007d86:	4a12      	ldr	r2, [pc, #72]	; (8007dd0 <prvInitialiseTaskLists+0x60>)
 8007d88:	4413      	add	r3, r2
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe fadc 	bl	8006348 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	3301      	adds	r3, #1
 8007d94:	607b      	str	r3, [r7, #4]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2b37      	cmp	r3, #55	; 0x37
 8007d9a:	d9ef      	bls.n	8007d7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d9c:	480d      	ldr	r0, [pc, #52]	; (8007dd4 <prvInitialiseTaskLists+0x64>)
 8007d9e:	f7fe fad3 	bl	8006348 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007da2:	480d      	ldr	r0, [pc, #52]	; (8007dd8 <prvInitialiseTaskLists+0x68>)
 8007da4:	f7fe fad0 	bl	8006348 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007da8:	480c      	ldr	r0, [pc, #48]	; (8007ddc <prvInitialiseTaskLists+0x6c>)
 8007daa:	f7fe facd 	bl	8006348 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007dae:	480c      	ldr	r0, [pc, #48]	; (8007de0 <prvInitialiseTaskLists+0x70>)
 8007db0:	f7fe faca 	bl	8006348 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007db4:	480b      	ldr	r0, [pc, #44]	; (8007de4 <prvInitialiseTaskLists+0x74>)
 8007db6:	f7fe fac7 	bl	8006348 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007dba:	4b0b      	ldr	r3, [pc, #44]	; (8007de8 <prvInitialiseTaskLists+0x78>)
 8007dbc:	4a05      	ldr	r2, [pc, #20]	; (8007dd4 <prvInitialiseTaskLists+0x64>)
 8007dbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007dc0:	4b0a      	ldr	r3, [pc, #40]	; (8007dec <prvInitialiseTaskLists+0x7c>)
 8007dc2:	4a05      	ldr	r2, [pc, #20]	; (8007dd8 <prvInitialiseTaskLists+0x68>)
 8007dc4:	601a      	str	r2, [r3, #0]
}
 8007dc6:	bf00      	nop
 8007dc8:	3708      	adds	r7, #8
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	2000094c 	.word	0x2000094c
 8007dd4:	20000dac 	.word	0x20000dac
 8007dd8:	20000dc0 	.word	0x20000dc0
 8007ddc:	20000ddc 	.word	0x20000ddc
 8007de0:	20000df0 	.word	0x20000df0
 8007de4:	20000e08 	.word	0x20000e08
 8007de8:	20000dd4 	.word	0x20000dd4
 8007dec:	20000dd8 	.word	0x20000dd8

08007df0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007df6:	e019      	b.n	8007e2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007df8:	f000 fee4 	bl	8008bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dfc:	4b10      	ldr	r3, [pc, #64]	; (8007e40 <prvCheckTasksWaitingTermination+0x50>)
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3304      	adds	r3, #4
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fe fb27 	bl	800645c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e0e:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <prvCheckTasksWaitingTermination+0x54>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	3b01      	subs	r3, #1
 8007e14:	4a0b      	ldr	r2, [pc, #44]	; (8007e44 <prvCheckTasksWaitingTermination+0x54>)
 8007e16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e18:	4b0b      	ldr	r3, [pc, #44]	; (8007e48 <prvCheckTasksWaitingTermination+0x58>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	4a0a      	ldr	r2, [pc, #40]	; (8007e48 <prvCheckTasksWaitingTermination+0x58>)
 8007e20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007e22:	f000 feff 	bl	8008c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f810 	bl	8007e4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e2c:	4b06      	ldr	r3, [pc, #24]	; (8007e48 <prvCheckTasksWaitingTermination+0x58>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1e1      	bne.n	8007df8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	20000df0 	.word	0x20000df0
 8007e44:	20000e1c 	.word	0x20000e1c
 8007e48:	20000e04 	.word	0x20000e04

08007e4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d108      	bne.n	8007e70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e62:	4618      	mov	r0, r3
 8007e64:	f001 f89c 	bl	8008fa0 <vPortFree>
				vPortFree( pxTCB );
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f001 f899 	bl	8008fa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e6e:	e018      	b.n	8007ea2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d103      	bne.n	8007e82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f001 f890 	bl	8008fa0 <vPortFree>
	}
 8007e80:	e00f      	b.n	8007ea2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d00a      	beq.n	8007ea2 <prvDeleteTCB+0x56>
	__asm volatile
 8007e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	60fb      	str	r3, [r7, #12]
}
 8007e9e:	bf00      	nop
 8007ea0:	e7fe      	b.n	8007ea0 <prvDeleteTCB+0x54>
	}
 8007ea2:	bf00      	nop
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
	...

08007eac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eb2:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <prvResetNextTaskUnblockTime+0x38>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d104      	bne.n	8007ec6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ebc:	4b0a      	ldr	r3, [pc, #40]	; (8007ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8007ebe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ec2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ec4:	e008      	b.n	8007ed8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ec6:	4b07      	ldr	r3, [pc, #28]	; (8007ee4 <prvResetNextTaskUnblockTime+0x38>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	68db      	ldr	r3, [r3, #12]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	4a04      	ldr	r2, [pc, #16]	; (8007ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8007ed6:	6013      	str	r3, [r2, #0]
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	20000dd4 	.word	0x20000dd4
 8007ee8:	20000e3c 	.word	0x20000e3c

08007eec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007ef2:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <xTaskGetCurrentTaskHandle+0x1c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007ef8:	687b      	ldr	r3, [r7, #4]
	}
 8007efa:	4618      	mov	r0, r3
 8007efc:	370c      	adds	r7, #12
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	20000948 	.word	0x20000948

08007f0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f12:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <xTaskGetSchedulerState+0x34>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d102      	bne.n	8007f20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	607b      	str	r3, [r7, #4]
 8007f1e:	e008      	b.n	8007f32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f20:	4b08      	ldr	r3, [pc, #32]	; (8007f44 <xTaskGetSchedulerState+0x38>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d102      	bne.n	8007f2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f28:	2302      	movs	r3, #2
 8007f2a:	607b      	str	r3, [r7, #4]
 8007f2c:	e001      	b.n	8007f32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f32:	687b      	ldr	r3, [r7, #4]
	}
 8007f34:	4618      	mov	r0, r3
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	20000e28 	.word	0x20000e28
 8007f44:	20000e44 	.word	0x20000e44

08007f48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007f54:	2300      	movs	r3, #0
 8007f56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d051      	beq.n	8008002 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f62:	4b2a      	ldr	r3, [pc, #168]	; (800800c <xTaskPriorityInherit+0xc4>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d241      	bcs.n	8007ff0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	db06      	blt.n	8007f82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f74:	4b25      	ldr	r3, [pc, #148]	; (800800c <xTaskPriorityInherit+0xc4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	6959      	ldr	r1, [r3, #20]
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4a1f      	ldr	r2, [pc, #124]	; (8008010 <xTaskPriorityInherit+0xc8>)
 8007f94:	4413      	add	r3, r2
 8007f96:	4299      	cmp	r1, r3
 8007f98:	d122      	bne.n	8007fe0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fe fa5c 	bl	800645c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fa4:	4b19      	ldr	r3, [pc, #100]	; (800800c <xTaskPriorityInherit+0xc4>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb2:	4b18      	ldr	r3, [pc, #96]	; (8008014 <xTaskPriorityInherit+0xcc>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d903      	bls.n	8007fc2 <xTaskPriorityInherit+0x7a>
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fbe:	4a15      	ldr	r2, [pc, #84]	; (8008014 <xTaskPriorityInherit+0xcc>)
 8007fc0:	6013      	str	r3, [r2, #0]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc6:	4613      	mov	r3, r2
 8007fc8:	009b      	lsls	r3, r3, #2
 8007fca:	4413      	add	r3, r2
 8007fcc:	009b      	lsls	r3, r3, #2
 8007fce:	4a10      	ldr	r2, [pc, #64]	; (8008010 <xTaskPriorityInherit+0xc8>)
 8007fd0:	441a      	add	r2, r3
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	3304      	adds	r3, #4
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	4610      	mov	r0, r2
 8007fda:	f7fe f9e2 	bl	80063a2 <vListInsertEnd>
 8007fde:	e004      	b.n	8007fea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007fe0:	4b0a      	ldr	r3, [pc, #40]	; (800800c <xTaskPriorityInherit+0xc4>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007fea:	2301      	movs	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	e008      	b.n	8008002 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ff4:	4b05      	ldr	r3, [pc, #20]	; (800800c <xTaskPriorityInherit+0xc4>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d201      	bcs.n	8008002 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007ffe:	2301      	movs	r3, #1
 8008000:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008002:	68fb      	ldr	r3, [r7, #12]
	}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	20000948 	.word	0x20000948
 8008010:	2000094c 	.word	0x2000094c
 8008014:	20000e24 	.word	0x20000e24

08008018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008018:	b580      	push	{r7, lr}
 800801a:	b086      	sub	sp, #24
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008024:	2300      	movs	r3, #0
 8008026:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d056      	beq.n	80080dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800802e:	4b2e      	ldr	r3, [pc, #184]	; (80080e8 <xTaskPriorityDisinherit+0xd0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	429a      	cmp	r2, r3
 8008036:	d00a      	beq.n	800804e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800803c:	f383 8811 	msr	BASEPRI, r3
 8008040:	f3bf 8f6f 	isb	sy
 8008044:	f3bf 8f4f 	dsb	sy
 8008048:	60fb      	str	r3, [r7, #12]
}
 800804a:	bf00      	nop
 800804c:	e7fe      	b.n	800804c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008052:	2b00      	cmp	r3, #0
 8008054:	d10a      	bne.n	800806c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	60bb      	str	r3, [r7, #8]
}
 8008068:	bf00      	nop
 800806a:	e7fe      	b.n	800806a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008070:	1e5a      	subs	r2, r3, #1
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800807e:	429a      	cmp	r2, r3
 8008080:	d02c      	beq.n	80080dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008086:	2b00      	cmp	r3, #0
 8008088:	d128      	bne.n	80080dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	3304      	adds	r3, #4
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe f9e4 	bl	800645c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ac:	4b0f      	ldr	r3, [pc, #60]	; (80080ec <xTaskPriorityDisinherit+0xd4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d903      	bls.n	80080bc <xTaskPriorityDisinherit+0xa4>
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b8:	4a0c      	ldr	r2, [pc, #48]	; (80080ec <xTaskPriorityDisinherit+0xd4>)
 80080ba:	6013      	str	r3, [r2, #0]
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080c0:	4613      	mov	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4413      	add	r3, r2
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	4a09      	ldr	r2, [pc, #36]	; (80080f0 <xTaskPriorityDisinherit+0xd8>)
 80080ca:	441a      	add	r2, r3
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	3304      	adds	r3, #4
 80080d0:	4619      	mov	r1, r3
 80080d2:	4610      	mov	r0, r2
 80080d4:	f7fe f965 	bl	80063a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080d8:	2301      	movs	r3, #1
 80080da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080dc:	697b      	ldr	r3, [r7, #20]
	}
 80080de:	4618      	mov	r0, r3
 80080e0:	3718      	adds	r7, #24
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	20000948 	.word	0x20000948
 80080ec:	20000e24 	.word	0x20000e24
 80080f0:	2000094c 	.word	0x2000094c

080080f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b088      	sub	sp, #32
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008102:	2301      	movs	r3, #1
 8008104:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d06a      	beq.n	80081e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800810c:	69bb      	ldr	r3, [r7, #24]
 800810e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10a      	bne.n	800812a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	60fb      	str	r3, [r7, #12]
}
 8008126:	bf00      	nop
 8008128:	e7fe      	b.n	8008128 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800812a:	69bb      	ldr	r3, [r7, #24]
 800812c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	429a      	cmp	r2, r3
 8008132:	d902      	bls.n	800813a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	61fb      	str	r3, [r7, #28]
 8008138:	e002      	b.n	8008140 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800813e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008144:	69fa      	ldr	r2, [r7, #28]
 8008146:	429a      	cmp	r2, r3
 8008148:	d04b      	beq.n	80081e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	429a      	cmp	r2, r3
 8008152:	d146      	bne.n	80081e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008154:	4b25      	ldr	r3, [pc, #148]	; (80081ec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	69ba      	ldr	r2, [r7, #24]
 800815a:	429a      	cmp	r2, r3
 800815c:	d10a      	bne.n	8008174 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	60bb      	str	r3, [r7, #8]
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	69fa      	ldr	r2, [r7, #28]
 800817e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	699b      	ldr	r3, [r3, #24]
 8008184:	2b00      	cmp	r3, #0
 8008186:	db04      	blt.n	8008192 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800818e:	69bb      	ldr	r3, [r7, #24]
 8008190:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	6959      	ldr	r1, [r3, #20]
 8008196:	693a      	ldr	r2, [r7, #16]
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4a13      	ldr	r2, [pc, #76]	; (80081f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80081a2:	4413      	add	r3, r2
 80081a4:	4299      	cmp	r1, r3
 80081a6:	d11c      	bne.n	80081e2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081a8:	69bb      	ldr	r3, [r7, #24]
 80081aa:	3304      	adds	r3, #4
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fe f955 	bl	800645c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b6:	4b0f      	ldr	r3, [pc, #60]	; (80081f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d903      	bls.n	80081c6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80081be:	69bb      	ldr	r3, [r7, #24]
 80081c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081c2:	4a0c      	ldr	r2, [pc, #48]	; (80081f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80081c4:	6013      	str	r3, [r2, #0]
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ca:	4613      	mov	r3, r2
 80081cc:	009b      	lsls	r3, r3, #2
 80081ce:	4413      	add	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4a07      	ldr	r2, [pc, #28]	; (80081f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80081d4:	441a      	add	r2, r3
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	3304      	adds	r3, #4
 80081da:	4619      	mov	r1, r3
 80081dc:	4610      	mov	r0, r2
 80081de:	f7fe f8e0 	bl	80063a2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80081e2:	bf00      	nop
 80081e4:	3720      	adds	r7, #32
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop
 80081ec:	20000948 	.word	0x20000948
 80081f0:	2000094c 	.word	0x2000094c
 80081f4:	20000e24 	.word	0x20000e24

080081f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80081f8:	b480      	push	{r7}
 80081fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80081fc:	4b07      	ldr	r3, [pc, #28]	; (800821c <pvTaskIncrementMutexHeldCount+0x24>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d004      	beq.n	800820e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008204:	4b05      	ldr	r3, [pc, #20]	; (800821c <pvTaskIncrementMutexHeldCount+0x24>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800820a:	3201      	adds	r2, #1
 800820c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800820e:	4b03      	ldr	r3, [pc, #12]	; (800821c <pvTaskIncrementMutexHeldCount+0x24>)
 8008210:	681b      	ldr	r3, [r3, #0]
	}
 8008212:	4618      	mov	r0, r3
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	20000948 	.word	0x20000948

08008220 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800822a:	4b21      	ldr	r3, [pc, #132]	; (80082b0 <prvAddCurrentTaskToDelayedList+0x90>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008230:	4b20      	ldr	r3, [pc, #128]	; (80082b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3304      	adds	r3, #4
 8008236:	4618      	mov	r0, r3
 8008238:	f7fe f910 	bl	800645c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008242:	d10a      	bne.n	800825a <prvAddCurrentTaskToDelayedList+0x3a>
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d007      	beq.n	800825a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800824a:	4b1a      	ldr	r3, [pc, #104]	; (80082b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	3304      	adds	r3, #4
 8008250:	4619      	mov	r1, r3
 8008252:	4819      	ldr	r0, [pc, #100]	; (80082b8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008254:	f7fe f8a5 	bl	80063a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008258:	e026      	b.n	80082a8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4413      	add	r3, r2
 8008260:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008262:	4b14      	ldr	r3, [pc, #80]	; (80082b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68ba      	ldr	r2, [r7, #8]
 8008268:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800826a:	68ba      	ldr	r2, [r7, #8]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	429a      	cmp	r2, r3
 8008270:	d209      	bcs.n	8008286 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008272:	4b12      	ldr	r3, [pc, #72]	; (80082bc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	4b0f      	ldr	r3, [pc, #60]	; (80082b4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3304      	adds	r3, #4
 800827c:	4619      	mov	r1, r3
 800827e:	4610      	mov	r0, r2
 8008280:	f7fe f8b3 	bl	80063ea <vListInsert>
}
 8008284:	e010      	b.n	80082a8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008286:	4b0e      	ldr	r3, [pc, #56]	; (80082c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <prvAddCurrentTaskToDelayedList+0x94>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3304      	adds	r3, #4
 8008290:	4619      	mov	r1, r3
 8008292:	4610      	mov	r0, r2
 8008294:	f7fe f8a9 	bl	80063ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008298:	4b0a      	ldr	r3, [pc, #40]	; (80082c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d202      	bcs.n	80082a8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80082a2:	4a08      	ldr	r2, [pc, #32]	; (80082c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	6013      	str	r3, [r2, #0]
}
 80082a8:	bf00      	nop
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	20000e20 	.word	0x20000e20
 80082b4:	20000948 	.word	0x20000948
 80082b8:	20000e08 	.word	0x20000e08
 80082bc:	20000dd8 	.word	0x20000dd8
 80082c0:	20000dd4 	.word	0x20000dd4
 80082c4:	20000e3c 	.word	0x20000e3c

080082c8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b08a      	sub	sp, #40	; 0x28
 80082cc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80082d2:	f000 fb07 	bl	80088e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80082d6:	4b1c      	ldr	r3, [pc, #112]	; (8008348 <xTimerCreateTimerTask+0x80>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d021      	beq.n	8008322 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80082de:	2300      	movs	r3, #0
 80082e0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80082e2:	2300      	movs	r3, #0
 80082e4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80082e6:	1d3a      	adds	r2, r7, #4
 80082e8:	f107 0108 	add.w	r1, r7, #8
 80082ec:	f107 030c 	add.w	r3, r7, #12
 80082f0:	4618      	mov	r0, r3
 80082f2:	f7fe f80f 	bl	8006314 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80082f6:	6879      	ldr	r1, [r7, #4]
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	68fa      	ldr	r2, [r7, #12]
 80082fc:	9202      	str	r2, [sp, #8]
 80082fe:	9301      	str	r3, [sp, #4]
 8008300:	2302      	movs	r3, #2
 8008302:	9300      	str	r3, [sp, #0]
 8008304:	2300      	movs	r3, #0
 8008306:	460a      	mov	r2, r1
 8008308:	4910      	ldr	r1, [pc, #64]	; (800834c <xTimerCreateTimerTask+0x84>)
 800830a:	4811      	ldr	r0, [pc, #68]	; (8008350 <xTimerCreateTimerTask+0x88>)
 800830c:	f7fe ffd0 	bl	80072b0 <xTaskCreateStatic>
 8008310:	4603      	mov	r3, r0
 8008312:	4a10      	ldr	r2, [pc, #64]	; (8008354 <xTimerCreateTimerTask+0x8c>)
 8008314:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008316:	4b0f      	ldr	r3, [pc, #60]	; (8008354 <xTimerCreateTimerTask+0x8c>)
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800831e:	2301      	movs	r3, #1
 8008320:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10a      	bne.n	800833e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	613b      	str	r3, [r7, #16]
}
 800833a:	bf00      	nop
 800833c:	e7fe      	b.n	800833c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800833e:	697b      	ldr	r3, [r7, #20]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}
 8008348:	20000e78 	.word	0x20000e78
 800834c:	0800a75c 	.word	0x0800a75c
 8008350:	0800848d 	.word	0x0800848d
 8008354:	20000e7c 	.word	0x20000e7c

08008358 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b08a      	sub	sp, #40	; 0x28
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008366:	2300      	movs	r3, #0
 8008368:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10a      	bne.n	8008386 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	623b      	str	r3, [r7, #32]
}
 8008382:	bf00      	nop
 8008384:	e7fe      	b.n	8008384 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008386:	4b1a      	ldr	r3, [pc, #104]	; (80083f0 <xTimerGenericCommand+0x98>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d02a      	beq.n	80083e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	2b05      	cmp	r3, #5
 800839e:	dc18      	bgt.n	80083d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80083a0:	f7ff fdb4 	bl	8007f0c <xTaskGetSchedulerState>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	d109      	bne.n	80083be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80083aa:	4b11      	ldr	r3, [pc, #68]	; (80083f0 <xTimerGenericCommand+0x98>)
 80083ac:	6818      	ldr	r0, [r3, #0]
 80083ae:	f107 0110 	add.w	r1, r7, #16
 80083b2:	2300      	movs	r3, #0
 80083b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083b6:	f7fe fa6f 	bl	8006898 <xQueueGenericSend>
 80083ba:	6278      	str	r0, [r7, #36]	; 0x24
 80083bc:	e012      	b.n	80083e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80083be:	4b0c      	ldr	r3, [pc, #48]	; (80083f0 <xTimerGenericCommand+0x98>)
 80083c0:	6818      	ldr	r0, [r3, #0]
 80083c2:	f107 0110 	add.w	r1, r7, #16
 80083c6:	2300      	movs	r3, #0
 80083c8:	2200      	movs	r2, #0
 80083ca:	f7fe fa65 	bl	8006898 <xQueueGenericSend>
 80083ce:	6278      	str	r0, [r7, #36]	; 0x24
 80083d0:	e008      	b.n	80083e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80083d2:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <xTimerGenericCommand+0x98>)
 80083d4:	6818      	ldr	r0, [r3, #0]
 80083d6:	f107 0110 	add.w	r1, r7, #16
 80083da:	2300      	movs	r3, #0
 80083dc:	683a      	ldr	r2, [r7, #0]
 80083de:	f7fe fb59 	bl	8006a94 <xQueueGenericSendFromISR>
 80083e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3728      	adds	r7, #40	; 0x28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	20000e78 	.word	0x20000e78

080083f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b088      	sub	sp, #32
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	6078      	str	r0, [r7, #4]
 80083fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083fe:	4b22      	ldr	r3, [pc, #136]	; (8008488 <prvProcessExpiredTimer+0x94>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	3304      	adds	r3, #4
 800840c:	4618      	mov	r0, r3
 800840e:	f7fe f825 	bl	800645c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008418:	f003 0304 	and.w	r3, r3, #4
 800841c:	2b00      	cmp	r3, #0
 800841e:	d022      	beq.n	8008466 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	699a      	ldr	r2, [r3, #24]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	18d1      	adds	r1, r2, r3
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	6978      	ldr	r0, [r7, #20]
 800842e:	f000 f8d1 	bl	80085d4 <prvInsertTimerInActiveList>
 8008432:	4603      	mov	r3, r0
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01f      	beq.n	8008478 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008438:	2300      	movs	r3, #0
 800843a:	9300      	str	r3, [sp, #0]
 800843c:	2300      	movs	r3, #0
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	2100      	movs	r1, #0
 8008442:	6978      	ldr	r0, [r7, #20]
 8008444:	f7ff ff88 	bl	8008358 <xTimerGenericCommand>
 8008448:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	2b00      	cmp	r3, #0
 800844e:	d113      	bne.n	8008478 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	60fb      	str	r3, [r7, #12]
}
 8008462:	bf00      	nop
 8008464:	e7fe      	b.n	8008464 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800846c:	f023 0301 	bic.w	r3, r3, #1
 8008470:	b2da      	uxtb	r2, r3
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	6a1b      	ldr	r3, [r3, #32]
 800847c:	6978      	ldr	r0, [r7, #20]
 800847e:	4798      	blx	r3
}
 8008480:	bf00      	nop
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	20000e70 	.word	0x20000e70

0800848c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b084      	sub	sp, #16
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008494:	f107 0308 	add.w	r3, r7, #8
 8008498:	4618      	mov	r0, r3
 800849a:	f000 f857 	bl	800854c <prvGetNextExpireTime>
 800849e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	4619      	mov	r1, r3
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f000 f803 	bl	80084b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084aa:	f000 f8d5 	bl	8008658 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084ae:	e7f1      	b.n	8008494 <prvTimerTask+0x8>

080084b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80084ba:	f7ff f935 	bl	8007728 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80084be:	f107 0308 	add.w	r3, r7, #8
 80084c2:	4618      	mov	r0, r3
 80084c4:	f000 f866 	bl	8008594 <prvSampleTimeNow>
 80084c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d130      	bne.n	8008532 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d10a      	bne.n	80084ec <prvProcessTimerOrBlockTask+0x3c>
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d806      	bhi.n	80084ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80084de:	f7ff f931 	bl	8007744 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80084e2:	68f9      	ldr	r1, [r7, #12]
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f7ff ff85 	bl	80083f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80084ea:	e024      	b.n	8008536 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d008      	beq.n	8008504 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80084f2:	4b13      	ldr	r3, [pc, #76]	; (8008540 <prvProcessTimerOrBlockTask+0x90>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d101      	bne.n	8008500 <prvProcessTimerOrBlockTask+0x50>
 80084fc:	2301      	movs	r3, #1
 80084fe:	e000      	b.n	8008502 <prvProcessTimerOrBlockTask+0x52>
 8008500:	2300      	movs	r3, #0
 8008502:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008504:	4b0f      	ldr	r3, [pc, #60]	; (8008544 <prvProcessTimerOrBlockTask+0x94>)
 8008506:	6818      	ldr	r0, [r3, #0]
 8008508:	687a      	ldr	r2, [r7, #4]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	4619      	mov	r1, r3
 8008512:	f7fe fe99 	bl	8007248 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008516:	f7ff f915 	bl	8007744 <xTaskResumeAll>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d10a      	bne.n	8008536 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008520:	4b09      	ldr	r3, [pc, #36]	; (8008548 <prvProcessTimerOrBlockTask+0x98>)
 8008522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008526:	601a      	str	r2, [r3, #0]
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	f3bf 8f6f 	isb	sy
}
 8008530:	e001      	b.n	8008536 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008532:	f7ff f907 	bl	8007744 <xTaskResumeAll>
}
 8008536:	bf00      	nop
 8008538:	3710      	adds	r7, #16
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	20000e74 	.word	0x20000e74
 8008544:	20000e78 	.word	0x20000e78
 8008548:	e000ed04 	.word	0xe000ed04

0800854c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008554:	4b0e      	ldr	r3, [pc, #56]	; (8008590 <prvGetNextExpireTime+0x44>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <prvGetNextExpireTime+0x16>
 800855e:	2201      	movs	r2, #1
 8008560:	e000      	b.n	8008564 <prvGetNextExpireTime+0x18>
 8008562:	2200      	movs	r2, #0
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d105      	bne.n	800857c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <prvGetNextExpireTime+0x44>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	e001      	b.n	8008580 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008580:	68fb      	ldr	r3, [r7, #12]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3714      	adds	r7, #20
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	20000e70 	.word	0x20000e70

08008594 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800859c:	f7ff f970 	bl	8007880 <xTaskGetTickCount>
 80085a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085a2:	4b0b      	ldr	r3, [pc, #44]	; (80085d0 <prvSampleTimeNow+0x3c>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	68fa      	ldr	r2, [r7, #12]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d205      	bcs.n	80085b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085ac:	f000 f936 	bl	800881c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2201      	movs	r2, #1
 80085b4:	601a      	str	r2, [r3, #0]
 80085b6:	e002      	b.n	80085be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80085be:	4a04      	ldr	r2, [pc, #16]	; (80085d0 <prvSampleTimeNow+0x3c>)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80085c4:	68fb      	ldr	r3, [r7, #12]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	20000e80 	.word	0x20000e80

080085d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
 80085e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80085e2:	2300      	movs	r3, #0
 80085e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d812      	bhi.n	8008620 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	1ad2      	subs	r2, r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	699b      	ldr	r3, [r3, #24]
 8008604:	429a      	cmp	r2, r3
 8008606:	d302      	bcc.n	800860e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008608:	2301      	movs	r3, #1
 800860a:	617b      	str	r3, [r7, #20]
 800860c:	e01b      	b.n	8008646 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800860e:	4b10      	ldr	r3, [pc, #64]	; (8008650 <prvInsertTimerInActiveList+0x7c>)
 8008610:	681a      	ldr	r2, [r3, #0]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3304      	adds	r3, #4
 8008616:	4619      	mov	r1, r3
 8008618:	4610      	mov	r0, r2
 800861a:	f7fd fee6 	bl	80063ea <vListInsert>
 800861e:	e012      	b.n	8008646 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	429a      	cmp	r2, r3
 8008626:	d206      	bcs.n	8008636 <prvInsertTimerInActiveList+0x62>
 8008628:	68ba      	ldr	r2, [r7, #8]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	429a      	cmp	r2, r3
 800862e:	d302      	bcc.n	8008636 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008630:	2301      	movs	r3, #1
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	e007      	b.n	8008646 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008636:	4b07      	ldr	r3, [pc, #28]	; (8008654 <prvInsertTimerInActiveList+0x80>)
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3304      	adds	r3, #4
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f7fd fed2 	bl	80063ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008646:	697b      	ldr	r3, [r7, #20]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3718      	adds	r7, #24
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}
 8008650:	20000e74 	.word	0x20000e74
 8008654:	20000e70 	.word	0x20000e70

08008658 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b08e      	sub	sp, #56	; 0x38
 800865c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800865e:	e0ca      	b.n	80087f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2b00      	cmp	r3, #0
 8008664:	da18      	bge.n	8008698 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008666:	1d3b      	adds	r3, r7, #4
 8008668:	3304      	adds	r3, #4
 800866a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800866c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866e:	2b00      	cmp	r3, #0
 8008670:	d10a      	bne.n	8008688 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008676:	f383 8811 	msr	BASEPRI, r3
 800867a:	f3bf 8f6f 	isb	sy
 800867e:	f3bf 8f4f 	dsb	sy
 8008682:	61fb      	str	r3, [r7, #28]
}
 8008684:	bf00      	nop
 8008686:	e7fe      	b.n	8008686 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800868e:	6850      	ldr	r0, [r2, #4]
 8008690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008692:	6892      	ldr	r2, [r2, #8]
 8008694:	4611      	mov	r1, r2
 8008696:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	f2c0 80ab 	blt.w	80087f6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d004      	beq.n	80086b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ae:	3304      	adds	r3, #4
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fd fed3 	bl	800645c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086b6:	463b      	mov	r3, r7
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7ff ff6b 	bl	8008594 <prvSampleTimeNow>
 80086be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b09      	cmp	r3, #9
 80086c4:	f200 8096 	bhi.w	80087f4 <prvProcessReceivedCommands+0x19c>
 80086c8:	a201      	add	r2, pc, #4	; (adr r2, 80086d0 <prvProcessReceivedCommands+0x78>)
 80086ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ce:	bf00      	nop
 80086d0:	080086f9 	.word	0x080086f9
 80086d4:	080086f9 	.word	0x080086f9
 80086d8:	080086f9 	.word	0x080086f9
 80086dc:	0800876d 	.word	0x0800876d
 80086e0:	08008781 	.word	0x08008781
 80086e4:	080087cb 	.word	0x080087cb
 80086e8:	080086f9 	.word	0x080086f9
 80086ec:	080086f9 	.word	0x080086f9
 80086f0:	0800876d 	.word	0x0800876d
 80086f4:	08008781 	.word	0x08008781
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80086f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086fe:	f043 0301 	orr.w	r3, r3, #1
 8008702:	b2da      	uxtb	r2, r3
 8008704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008706:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800870a:	68ba      	ldr	r2, [r7, #8]
 800870c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	18d1      	adds	r1, r2, r3
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008718:	f7ff ff5c 	bl	80085d4 <prvInsertTimerInActiveList>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d069      	beq.n	80087f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008724:	6a1b      	ldr	r3, [r3, #32]
 8008726:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008728:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800872a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008730:	f003 0304 	and.w	r3, r3, #4
 8008734:	2b00      	cmp	r3, #0
 8008736:	d05e      	beq.n	80087f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873c:	699b      	ldr	r3, [r3, #24]
 800873e:	441a      	add	r2, r3
 8008740:	2300      	movs	r3, #0
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	2300      	movs	r3, #0
 8008746:	2100      	movs	r1, #0
 8008748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800874a:	f7ff fe05 	bl	8008358 <xTimerGenericCommand>
 800874e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008750:	6a3b      	ldr	r3, [r7, #32]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d14f      	bne.n	80087f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	61bb      	str	r3, [r7, #24]
}
 8008768:	bf00      	nop
 800876a:	e7fe      	b.n	800876a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800876c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008772:	f023 0301 	bic.w	r3, r3, #1
 8008776:	b2da      	uxtb	r2, r3
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800877e:	e03a      	b.n	80087f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008786:	f043 0301 	orr.w	r3, r3, #1
 800878a:	b2da      	uxtb	r2, r3
 800878c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008792:	68ba      	ldr	r2, [r7, #8]
 8008794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008796:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879a:	699b      	ldr	r3, [r3, #24]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	617b      	str	r3, [r7, #20]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087b8:	699a      	ldr	r2, [r3, #24]
 80087ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087bc:	18d1      	adds	r1, r2, r3
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087c4:	f7ff ff06 	bl	80085d4 <prvInsertTimerInActiveList>
					break;
 80087c8:	e015      	b.n	80087f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80087ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087d0:	f003 0302 	and.w	r3, r3, #2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d103      	bne.n	80087e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80087d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087da:	f000 fbe1 	bl	8008fa0 <vPortFree>
 80087de:	e00a      	b.n	80087f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80087e6:	f023 0301 	bic.w	r3, r3, #1
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087f2:	e000      	b.n	80087f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80087f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087f6:	4b08      	ldr	r3, [pc, #32]	; (8008818 <prvProcessReceivedCommands+0x1c0>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	1d39      	adds	r1, r7, #4
 80087fc:	2200      	movs	r2, #0
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe f9e4 	bl	8006bcc <xQueueReceive>
 8008804:	4603      	mov	r3, r0
 8008806:	2b00      	cmp	r3, #0
 8008808:	f47f af2a 	bne.w	8008660 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800880c:	bf00      	nop
 800880e:	bf00      	nop
 8008810:	3730      	adds	r7, #48	; 0x30
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}
 8008816:	bf00      	nop
 8008818:	20000e78 	.word	0x20000e78

0800881c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b088      	sub	sp, #32
 8008820:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008822:	e048      	b.n	80088b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008824:	4b2d      	ldr	r3, [pc, #180]	; (80088dc <prvSwitchTimerLists+0xc0>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800882e:	4b2b      	ldr	r3, [pc, #172]	; (80088dc <prvSwitchTimerLists+0xc0>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3304      	adds	r3, #4
 800883c:	4618      	mov	r0, r3
 800883e:	f7fd fe0d 	bl	800645c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6a1b      	ldr	r3, [r3, #32]
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008850:	f003 0304 	and.w	r3, r3, #4
 8008854:	2b00      	cmp	r3, #0
 8008856:	d02e      	beq.n	80088b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	4413      	add	r3, r2
 8008860:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	429a      	cmp	r2, r3
 8008868:	d90e      	bls.n	8008888 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008876:	4b19      	ldr	r3, [pc, #100]	; (80088dc <prvSwitchTimerLists+0xc0>)
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3304      	adds	r3, #4
 800887e:	4619      	mov	r1, r3
 8008880:	4610      	mov	r0, r2
 8008882:	f7fd fdb2 	bl	80063ea <vListInsert>
 8008886:	e016      	b.n	80088b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008888:	2300      	movs	r3, #0
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	2300      	movs	r3, #0
 800888e:	693a      	ldr	r2, [r7, #16]
 8008890:	2100      	movs	r1, #0
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f7ff fd60 	bl	8008358 <xTimerGenericCommand>
 8008898:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10a      	bne.n	80088b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	603b      	str	r3, [r7, #0]
}
 80088b2:	bf00      	nop
 80088b4:	e7fe      	b.n	80088b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088b6:	4b09      	ldr	r3, [pc, #36]	; (80088dc <prvSwitchTimerLists+0xc0>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d1b1      	bne.n	8008824 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088c0:	4b06      	ldr	r3, [pc, #24]	; (80088dc <prvSwitchTimerLists+0xc0>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088c6:	4b06      	ldr	r3, [pc, #24]	; (80088e0 <prvSwitchTimerLists+0xc4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4a04      	ldr	r2, [pc, #16]	; (80088dc <prvSwitchTimerLists+0xc0>)
 80088cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088ce:	4a04      	ldr	r2, [pc, #16]	; (80088e0 <prvSwitchTimerLists+0xc4>)
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	6013      	str	r3, [r2, #0]
}
 80088d4:	bf00      	nop
 80088d6:	3718      	adds	r7, #24
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	20000e70 	.word	0x20000e70
 80088e0:	20000e74 	.word	0x20000e74

080088e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088ea:	f000 f96b 	bl	8008bc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088ee:	4b15      	ldr	r3, [pc, #84]	; (8008944 <prvCheckForValidListAndQueue+0x60>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d120      	bne.n	8008938 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088f6:	4814      	ldr	r0, [pc, #80]	; (8008948 <prvCheckForValidListAndQueue+0x64>)
 80088f8:	f7fd fd26 	bl	8006348 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088fc:	4813      	ldr	r0, [pc, #76]	; (800894c <prvCheckForValidListAndQueue+0x68>)
 80088fe:	f7fd fd23 	bl	8006348 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008902:	4b13      	ldr	r3, [pc, #76]	; (8008950 <prvCheckForValidListAndQueue+0x6c>)
 8008904:	4a10      	ldr	r2, [pc, #64]	; (8008948 <prvCheckForValidListAndQueue+0x64>)
 8008906:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008908:	4b12      	ldr	r3, [pc, #72]	; (8008954 <prvCheckForValidListAndQueue+0x70>)
 800890a:	4a10      	ldr	r2, [pc, #64]	; (800894c <prvCheckForValidListAndQueue+0x68>)
 800890c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800890e:	2300      	movs	r3, #0
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	4b11      	ldr	r3, [pc, #68]	; (8008958 <prvCheckForValidListAndQueue+0x74>)
 8008914:	4a11      	ldr	r2, [pc, #68]	; (800895c <prvCheckForValidListAndQueue+0x78>)
 8008916:	2110      	movs	r1, #16
 8008918:	200a      	movs	r0, #10
 800891a:	f7fd fe31 	bl	8006580 <xQueueGenericCreateStatic>
 800891e:	4603      	mov	r3, r0
 8008920:	4a08      	ldr	r2, [pc, #32]	; (8008944 <prvCheckForValidListAndQueue+0x60>)
 8008922:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008924:	4b07      	ldr	r3, [pc, #28]	; (8008944 <prvCheckForValidListAndQueue+0x60>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d005      	beq.n	8008938 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800892c:	4b05      	ldr	r3, [pc, #20]	; (8008944 <prvCheckForValidListAndQueue+0x60>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	490b      	ldr	r1, [pc, #44]	; (8008960 <prvCheckForValidListAndQueue+0x7c>)
 8008932:	4618      	mov	r0, r3
 8008934:	f7fe fc5e 	bl	80071f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008938:	f000 f974 	bl	8008c24 <vPortExitCritical>
}
 800893c:	bf00      	nop
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20000e78 	.word	0x20000e78
 8008948:	20000e48 	.word	0x20000e48
 800894c:	20000e5c 	.word	0x20000e5c
 8008950:	20000e70 	.word	0x20000e70
 8008954:	20000e74 	.word	0x20000e74
 8008958:	20000f24 	.word	0x20000f24
 800895c:	20000e84 	.word	0x20000e84
 8008960:	0800a764 	.word	0x0800a764

08008964 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	3b04      	subs	r3, #4
 8008974:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800897c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3b04      	subs	r3, #4
 8008982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f023 0201 	bic.w	r2, r3, #1
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3b04      	subs	r3, #4
 8008992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008994:	4a0c      	ldr	r2, [pc, #48]	; (80089c8 <pxPortInitialiseStack+0x64>)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	3b14      	subs	r3, #20
 800899e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3b04      	subs	r3, #4
 80089aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	f06f 0202 	mvn.w	r2, #2
 80089b2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	3b20      	subs	r3, #32
 80089b8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089ba:	68fb      	ldr	r3, [r7, #12]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3714      	adds	r7, #20
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	080089cd 	.word	0x080089cd

080089cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089cc:	b480      	push	{r7}
 80089ce:	b085      	sub	sp, #20
 80089d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089d6:	4b12      	ldr	r3, [pc, #72]	; (8008a20 <prvTaskExitError+0x54>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80089de:	d00a      	beq.n	80089f6 <prvTaskExitError+0x2a>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	60fb      	str	r3, [r7, #12]
}
 80089f2:	bf00      	nop
 80089f4:	e7fe      	b.n	80089f4 <prvTaskExitError+0x28>
	__asm volatile
 80089f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089fa:	f383 8811 	msr	BASEPRI, r3
 80089fe:	f3bf 8f6f 	isb	sy
 8008a02:	f3bf 8f4f 	dsb	sy
 8008a06:	60bb      	str	r3, [r7, #8]
}
 8008a08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008a0a:	bf00      	nop
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d0fc      	beq.n	8008a0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008a12:	bf00      	nop
 8008a14:	bf00      	nop
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	2000000c 	.word	0x2000000c
	...

08008a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a30:	4b07      	ldr	r3, [pc, #28]	; (8008a50 <pxCurrentTCBConst2>)
 8008a32:	6819      	ldr	r1, [r3, #0]
 8008a34:	6808      	ldr	r0, [r1, #0]
 8008a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a3a:	f380 8809 	msr	PSP, r0
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f04f 0000 	mov.w	r0, #0
 8008a46:	f380 8811 	msr	BASEPRI, r0
 8008a4a:	4770      	bx	lr
 8008a4c:	f3af 8000 	nop.w

08008a50 <pxCurrentTCBConst2>:
 8008a50:	20000948 	.word	0x20000948
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a54:	bf00      	nop
 8008a56:	bf00      	nop

08008a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008a58:	4808      	ldr	r0, [pc, #32]	; (8008a7c <prvPortStartFirstTask+0x24>)
 8008a5a:	6800      	ldr	r0, [r0, #0]
 8008a5c:	6800      	ldr	r0, [r0, #0]
 8008a5e:	f380 8808 	msr	MSP, r0
 8008a62:	f04f 0000 	mov.w	r0, #0
 8008a66:	f380 8814 	msr	CONTROL, r0
 8008a6a:	b662      	cpsie	i
 8008a6c:	b661      	cpsie	f
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	df00      	svc	0
 8008a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a7a:	bf00      	nop
 8008a7c:	e000ed08 	.word	0xe000ed08

08008a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a86:	4b46      	ldr	r3, [pc, #280]	; (8008ba0 <xPortStartScheduler+0x120>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a46      	ldr	r2, [pc, #280]	; (8008ba4 <xPortStartScheduler+0x124>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d10a      	bne.n	8008aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8008a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a94:	f383 8811 	msr	BASEPRI, r3
 8008a98:	f3bf 8f6f 	isb	sy
 8008a9c:	f3bf 8f4f 	dsb	sy
 8008aa0:	613b      	str	r3, [r7, #16]
}
 8008aa2:	bf00      	nop
 8008aa4:	e7fe      	b.n	8008aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008aa6:	4b3e      	ldr	r3, [pc, #248]	; (8008ba0 <xPortStartScheduler+0x120>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a3f      	ldr	r2, [pc, #252]	; (8008ba8 <xPortStartScheduler+0x128>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d10a      	bne.n	8008ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab4:	f383 8811 	msr	BASEPRI, r3
 8008ab8:	f3bf 8f6f 	isb	sy
 8008abc:	f3bf 8f4f 	dsb	sy
 8008ac0:	60fb      	str	r3, [r7, #12]
}
 8008ac2:	bf00      	nop
 8008ac4:	e7fe      	b.n	8008ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ac6:	4b39      	ldr	r3, [pc, #228]	; (8008bac <xPortStartScheduler+0x12c>)
 8008ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	22ff      	movs	r2, #255	; 0xff
 8008ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	b2db      	uxtb	r3, r3
 8008ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008ae0:	78fb      	ldrb	r3, [r7, #3]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008ae8:	b2da      	uxtb	r2, r3
 8008aea:	4b31      	ldr	r3, [pc, #196]	; (8008bb0 <xPortStartScheduler+0x130>)
 8008aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008aee:	4b31      	ldr	r3, [pc, #196]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008af0:	2207      	movs	r2, #7
 8008af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008af4:	e009      	b.n	8008b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008af6:	4b2f      	ldr	r3, [pc, #188]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	4a2d      	ldr	r2, [pc, #180]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008b00:	78fb      	ldrb	r3, [r7, #3]
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	005b      	lsls	r3, r3, #1
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b0a:	78fb      	ldrb	r3, [r7, #3]
 8008b0c:	b2db      	uxtb	r3, r3
 8008b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b12:	2b80      	cmp	r3, #128	; 0x80
 8008b14:	d0ef      	beq.n	8008af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008b16:	4b27      	ldr	r3, [pc, #156]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f1c3 0307 	rsb	r3, r3, #7
 8008b1e:	2b04      	cmp	r3, #4
 8008b20:	d00a      	beq.n	8008b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8008b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b26:	f383 8811 	msr	BASEPRI, r3
 8008b2a:	f3bf 8f6f 	isb	sy
 8008b2e:	f3bf 8f4f 	dsb	sy
 8008b32:	60bb      	str	r3, [r7, #8]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008b38:	4b1e      	ldr	r3, [pc, #120]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	021b      	lsls	r3, r3, #8
 8008b3e:	4a1d      	ldr	r2, [pc, #116]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008b42:	4b1c      	ldr	r3, [pc, #112]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008b4a:	4a1a      	ldr	r2, [pc, #104]	; (8008bb4 <xPortStartScheduler+0x134>)
 8008b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008b56:	4b18      	ldr	r3, [pc, #96]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a17      	ldr	r2, [pc, #92]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b62:	4b15      	ldr	r3, [pc, #84]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a14      	ldr	r2, [pc, #80]	; (8008bb8 <xPortStartScheduler+0x138>)
 8008b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b6e:	f000 f8dd 	bl	8008d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b72:	4b12      	ldr	r3, [pc, #72]	; (8008bbc <xPortStartScheduler+0x13c>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b78:	f000 f8fc 	bl	8008d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b7c:	4b10      	ldr	r3, [pc, #64]	; (8008bc0 <xPortStartScheduler+0x140>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a0f      	ldr	r2, [pc, #60]	; (8008bc0 <xPortStartScheduler+0x140>)
 8008b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b88:	f7ff ff66 	bl	8008a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b8c:	f7fe ff42 	bl	8007a14 <vTaskSwitchContext>
	prvTaskExitError();
 8008b90:	f7ff ff1c 	bl	80089cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3718      	adds	r7, #24
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	e000ed00 	.word	0xe000ed00
 8008ba4:	410fc271 	.word	0x410fc271
 8008ba8:	410fc270 	.word	0x410fc270
 8008bac:	e000e400 	.word	0xe000e400
 8008bb0:	20000f74 	.word	0x20000f74
 8008bb4:	20000f78 	.word	0x20000f78
 8008bb8:	e000ed20 	.word	0xe000ed20
 8008bbc:	2000000c 	.word	0x2000000c
 8008bc0:	e000ef34 	.word	0xe000ef34

08008bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8008bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bce:	f383 8811 	msr	BASEPRI, r3
 8008bd2:	f3bf 8f6f 	isb	sy
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	607b      	str	r3, [r7, #4]
}
 8008bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008bde:	4b0f      	ldr	r3, [pc, #60]	; (8008c1c <vPortEnterCritical+0x58>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	3301      	adds	r3, #1
 8008be4:	4a0d      	ldr	r2, [pc, #52]	; (8008c1c <vPortEnterCritical+0x58>)
 8008be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008be8:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <vPortEnterCritical+0x58>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d10f      	bne.n	8008c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008bf0:	4b0b      	ldr	r3, [pc, #44]	; (8008c20 <vPortEnterCritical+0x5c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d00a      	beq.n	8008c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8008bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bfe:	f383 8811 	msr	BASEPRI, r3
 8008c02:	f3bf 8f6f 	isb	sy
 8008c06:	f3bf 8f4f 	dsb	sy
 8008c0a:	603b      	str	r3, [r7, #0]
}
 8008c0c:	bf00      	nop
 8008c0e:	e7fe      	b.n	8008c0e <vPortEnterCritical+0x4a>
	}
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	2000000c 	.word	0x2000000c
 8008c20:	e000ed04 	.word	0xe000ed04

08008c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008c2a:	4b12      	ldr	r3, [pc, #72]	; (8008c74 <vPortExitCritical+0x50>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10a      	bne.n	8008c48 <vPortExitCritical+0x24>
	__asm volatile
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	607b      	str	r3, [r7, #4]
}
 8008c44:	bf00      	nop
 8008c46:	e7fe      	b.n	8008c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008c48:	4b0a      	ldr	r3, [pc, #40]	; (8008c74 <vPortExitCritical+0x50>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	4a09      	ldr	r2, [pc, #36]	; (8008c74 <vPortExitCritical+0x50>)
 8008c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008c52:	4b08      	ldr	r3, [pc, #32]	; (8008c74 <vPortExitCritical+0x50>)
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d105      	bne.n	8008c66 <vPortExitCritical+0x42>
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	f383 8811 	msr	BASEPRI, r3
}
 8008c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	2000000c 	.word	0x2000000c
	...

08008c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c80:	f3ef 8009 	mrs	r0, PSP
 8008c84:	f3bf 8f6f 	isb	sy
 8008c88:	4b15      	ldr	r3, [pc, #84]	; (8008ce0 <pxCurrentTCBConst>)
 8008c8a:	681a      	ldr	r2, [r3, #0]
 8008c8c:	f01e 0f10 	tst.w	lr, #16
 8008c90:	bf08      	it	eq
 8008c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9a:	6010      	str	r0, [r2, #0]
 8008c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008ca4:	f380 8811 	msr	BASEPRI, r0
 8008ca8:	f3bf 8f4f 	dsb	sy
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f7fe feb0 	bl	8007a14 <vTaskSwitchContext>
 8008cb4:	f04f 0000 	mov.w	r0, #0
 8008cb8:	f380 8811 	msr	BASEPRI, r0
 8008cbc:	bc09      	pop	{r0, r3}
 8008cbe:	6819      	ldr	r1, [r3, #0]
 8008cc0:	6808      	ldr	r0, [r1, #0]
 8008cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc6:	f01e 0f10 	tst.w	lr, #16
 8008cca:	bf08      	it	eq
 8008ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008cd0:	f380 8809 	msr	PSP, r0
 8008cd4:	f3bf 8f6f 	isb	sy
 8008cd8:	4770      	bx	lr
 8008cda:	bf00      	nop
 8008cdc:	f3af 8000 	nop.w

08008ce0 <pxCurrentTCBConst>:
 8008ce0:	20000948 	.word	0x20000948
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop

08008ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
	__asm volatile
 8008cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf2:	f383 8811 	msr	BASEPRI, r3
 8008cf6:	f3bf 8f6f 	isb	sy
 8008cfa:	f3bf 8f4f 	dsb	sy
 8008cfe:	607b      	str	r3, [r7, #4]
}
 8008d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008d02:	f7fe fdcd 	bl	80078a0 <xTaskIncrementTick>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d003      	beq.n	8008d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008d0c:	4b06      	ldr	r3, [pc, #24]	; (8008d28 <xPortSysTickHandler+0x40>)
 8008d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d12:	601a      	str	r2, [r3, #0]
 8008d14:	2300      	movs	r3, #0
 8008d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	f383 8811 	msr	BASEPRI, r3
}
 8008d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008d20:	bf00      	nop
 8008d22:	3708      	adds	r7, #8
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	e000ed04 	.word	0xe000ed04

08008d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008d30:	4b0b      	ldr	r3, [pc, #44]	; (8008d60 <vPortSetupTimerInterrupt+0x34>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008d36:	4b0b      	ldr	r3, [pc, #44]	; (8008d64 <vPortSetupTimerInterrupt+0x38>)
 8008d38:	2200      	movs	r2, #0
 8008d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008d3c:	4b0a      	ldr	r3, [pc, #40]	; (8008d68 <vPortSetupTimerInterrupt+0x3c>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a0a      	ldr	r2, [pc, #40]	; (8008d6c <vPortSetupTimerInterrupt+0x40>)
 8008d42:	fba2 2303 	umull	r2, r3, r2, r3
 8008d46:	099b      	lsrs	r3, r3, #6
 8008d48:	4a09      	ldr	r2, [pc, #36]	; (8008d70 <vPortSetupTimerInterrupt+0x44>)
 8008d4a:	3b01      	subs	r3, #1
 8008d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008d4e:	4b04      	ldr	r3, [pc, #16]	; (8008d60 <vPortSetupTimerInterrupt+0x34>)
 8008d50:	2207      	movs	r2, #7
 8008d52:	601a      	str	r2, [r3, #0]
}
 8008d54:	bf00      	nop
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	e000e010 	.word	0xe000e010
 8008d64:	e000e018 	.word	0xe000e018
 8008d68:	20000000 	.word	0x20000000
 8008d6c:	10624dd3 	.word	0x10624dd3
 8008d70:	e000e014 	.word	0xe000e014

08008d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d84 <vPortEnableVFP+0x10>
 8008d78:	6801      	ldr	r1, [r0, #0]
 8008d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d7e:	6001      	str	r1, [r0, #0]
 8008d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d82:	bf00      	nop
 8008d84:	e000ed88 	.word	0xe000ed88

08008d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d88:	b480      	push	{r7}
 8008d8a:	b085      	sub	sp, #20
 8008d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d8e:	f3ef 8305 	mrs	r3, IPSR
 8008d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2b0f      	cmp	r3, #15
 8008d98:	d914      	bls.n	8008dc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d9a:	4a17      	ldr	r2, [pc, #92]	; (8008df8 <vPortValidateInterruptPriority+0x70>)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4413      	add	r3, r2
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008da4:	4b15      	ldr	r3, [pc, #84]	; (8008dfc <vPortValidateInterruptPriority+0x74>)
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	7afa      	ldrb	r2, [r7, #11]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d20a      	bcs.n	8008dc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db2:	f383 8811 	msr	BASEPRI, r3
 8008db6:	f3bf 8f6f 	isb	sy
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	607b      	str	r3, [r7, #4]
}
 8008dc0:	bf00      	nop
 8008dc2:	e7fe      	b.n	8008dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008dc4:	4b0e      	ldr	r3, [pc, #56]	; (8008e00 <vPortValidateInterruptPriority+0x78>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008dcc:	4b0d      	ldr	r3, [pc, #52]	; (8008e04 <vPortValidateInterruptPriority+0x7c>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d90a      	bls.n	8008dea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	603b      	str	r3, [r7, #0]
}
 8008de6:	bf00      	nop
 8008de8:	e7fe      	b.n	8008de8 <vPortValidateInterruptPriority+0x60>
	}
 8008dea:	bf00      	nop
 8008dec:	3714      	adds	r7, #20
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	e000e3f0 	.word	0xe000e3f0
 8008dfc:	20000f74 	.word	0x20000f74
 8008e00:	e000ed0c 	.word	0xe000ed0c
 8008e04:	20000f78 	.word	0x20000f78

08008e08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b08a      	sub	sp, #40	; 0x28
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008e14:	f7fe fc88 	bl	8007728 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008e18:	4b5b      	ldr	r3, [pc, #364]	; (8008f88 <pvPortMalloc+0x180>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d101      	bne.n	8008e24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008e20:	f000 f920 	bl	8009064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008e24:	4b59      	ldr	r3, [pc, #356]	; (8008f8c <pvPortMalloc+0x184>)
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4013      	ands	r3, r2
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f040 8093 	bne.w	8008f58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d01d      	beq.n	8008e74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008e38:	2208      	movs	r2, #8
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d014      	beq.n	8008e74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f023 0307 	bic.w	r3, r3, #7
 8008e50:	3308      	adds	r3, #8
 8008e52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f003 0307 	and.w	r3, r3, #7
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <pvPortMalloc+0x6c>
	__asm volatile
 8008e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e62:	f383 8811 	msr	BASEPRI, r3
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	f3bf 8f4f 	dsb	sy
 8008e6e:	617b      	str	r3, [r7, #20]
}
 8008e70:	bf00      	nop
 8008e72:	e7fe      	b.n	8008e72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d06e      	beq.n	8008f58 <pvPortMalloc+0x150>
 8008e7a:	4b45      	ldr	r3, [pc, #276]	; (8008f90 <pvPortMalloc+0x188>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d869      	bhi.n	8008f58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e84:	4b43      	ldr	r3, [pc, #268]	; (8008f94 <pvPortMalloc+0x18c>)
 8008e86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e88:	4b42      	ldr	r3, [pc, #264]	; (8008f94 <pvPortMalloc+0x18c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e8e:	e004      	b.n	8008e9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d903      	bls.n	8008eac <pvPortMalloc+0xa4>
 8008ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d1f1      	bne.n	8008e90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008eac:	4b36      	ldr	r3, [pc, #216]	; (8008f88 <pvPortMalloc+0x180>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d050      	beq.n	8008f58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2208      	movs	r2, #8
 8008ebc:	4413      	add	r3, r2
 8008ebe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	1ad2      	subs	r2, r2, r3
 8008ed0:	2308      	movs	r3, #8
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d91f      	bls.n	8008f18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008ed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4413      	add	r3, r2
 8008ede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ee0:	69bb      	ldr	r3, [r7, #24]
 8008ee2:	f003 0307 	and.w	r3, r3, #7
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00a      	beq.n	8008f00 <pvPortMalloc+0xf8>
	__asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	613b      	str	r3, [r7, #16]
}
 8008efc:	bf00      	nop
 8008efe:	e7fe      	b.n	8008efe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	685a      	ldr	r2, [r3, #4]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	1ad2      	subs	r2, r2, r3
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008f12:	69b8      	ldr	r0, [r7, #24]
 8008f14:	f000 f908 	bl	8009128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008f18:	4b1d      	ldr	r3, [pc, #116]	; (8008f90 <pvPortMalloc+0x188>)
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	4a1b      	ldr	r2, [pc, #108]	; (8008f90 <pvPortMalloc+0x188>)
 8008f24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008f26:	4b1a      	ldr	r3, [pc, #104]	; (8008f90 <pvPortMalloc+0x188>)
 8008f28:	681a      	ldr	r2, [r3, #0]
 8008f2a:	4b1b      	ldr	r3, [pc, #108]	; (8008f98 <pvPortMalloc+0x190>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d203      	bcs.n	8008f3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008f32:	4b17      	ldr	r3, [pc, #92]	; (8008f90 <pvPortMalloc+0x188>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a18      	ldr	r2, [pc, #96]	; (8008f98 <pvPortMalloc+0x190>)
 8008f38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	4b13      	ldr	r3, [pc, #76]	; (8008f8c <pvPortMalloc+0x184>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	431a      	orrs	r2, r3
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008f4e:	4b13      	ldr	r3, [pc, #76]	; (8008f9c <pvPortMalloc+0x194>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3301      	adds	r3, #1
 8008f54:	4a11      	ldr	r2, [pc, #68]	; (8008f9c <pvPortMalloc+0x194>)
 8008f56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f58:	f7fe fbf4 	bl	8007744 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f5c:	69fb      	ldr	r3, [r7, #28]
 8008f5e:	f003 0307 	and.w	r3, r3, #7
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d00a      	beq.n	8008f7c <pvPortMalloc+0x174>
	__asm volatile
 8008f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6a:	f383 8811 	msr	BASEPRI, r3
 8008f6e:	f3bf 8f6f 	isb	sy
 8008f72:	f3bf 8f4f 	dsb	sy
 8008f76:	60fb      	str	r3, [r7, #12]
}
 8008f78:	bf00      	nop
 8008f7a:	e7fe      	b.n	8008f7a <pvPortMalloc+0x172>
	return pvReturn;
 8008f7c:	69fb      	ldr	r3, [r7, #28]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3728      	adds	r7, #40	; 0x28
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20001b3c 	.word	0x20001b3c
 8008f8c:	20001b50 	.word	0x20001b50
 8008f90:	20001b40 	.word	0x20001b40
 8008f94:	20001b34 	.word	0x20001b34
 8008f98:	20001b44 	.word	0x20001b44
 8008f9c:	20001b48 	.word	0x20001b48

08008fa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d04d      	beq.n	800904e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008fb2:	2308      	movs	r3, #8
 8008fb4:	425b      	negs	r3, r3
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	4413      	add	r3, r2
 8008fba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	4b24      	ldr	r3, [pc, #144]	; (8009058 <vPortFree+0xb8>)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4013      	ands	r3, r2
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <vPortFree+0x44>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	60fb      	str	r3, [r7, #12]
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <vPortFree+0x62>
	__asm volatile
 8008fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff0:	f383 8811 	msr	BASEPRI, r3
 8008ff4:	f3bf 8f6f 	isb	sy
 8008ff8:	f3bf 8f4f 	dsb	sy
 8008ffc:	60bb      	str	r3, [r7, #8]
}
 8008ffe:	bf00      	nop
 8009000:	e7fe      	b.n	8009000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	685a      	ldr	r2, [r3, #4]
 8009006:	4b14      	ldr	r3, [pc, #80]	; (8009058 <vPortFree+0xb8>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4013      	ands	r3, r2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d01e      	beq.n	800904e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d11a      	bne.n	800904e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009018:	693b      	ldr	r3, [r7, #16]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	4b0e      	ldr	r3, [pc, #56]	; (8009058 <vPortFree+0xb8>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	43db      	mvns	r3, r3
 8009022:	401a      	ands	r2, r3
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009028:	f7fe fb7e 	bl	8007728 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800902c:	693b      	ldr	r3, [r7, #16]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	4b0a      	ldr	r3, [pc, #40]	; (800905c <vPortFree+0xbc>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4413      	add	r3, r2
 8009036:	4a09      	ldr	r2, [pc, #36]	; (800905c <vPortFree+0xbc>)
 8009038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800903a:	6938      	ldr	r0, [r7, #16]
 800903c:	f000 f874 	bl	8009128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009040:	4b07      	ldr	r3, [pc, #28]	; (8009060 <vPortFree+0xc0>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	3301      	adds	r3, #1
 8009046:	4a06      	ldr	r2, [pc, #24]	; (8009060 <vPortFree+0xc0>)
 8009048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800904a:	f7fe fb7b 	bl	8007744 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800904e:	bf00      	nop
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	20001b50 	.word	0x20001b50
 800905c:	20001b40 	.word	0x20001b40
 8009060:	20001b4c 	.word	0x20001b4c

08009064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800906a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800906e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009070:	4b27      	ldr	r3, [pc, #156]	; (8009110 <prvHeapInit+0xac>)
 8009072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f003 0307 	and.w	r3, r3, #7
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00c      	beq.n	8009098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3307      	adds	r3, #7
 8009082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f023 0307 	bic.w	r3, r3, #7
 800908a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	4a1f      	ldr	r2, [pc, #124]	; (8009110 <prvHeapInit+0xac>)
 8009094:	4413      	add	r3, r2
 8009096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800909c:	4a1d      	ldr	r2, [pc, #116]	; (8009114 <prvHeapInit+0xb0>)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80090a2:	4b1c      	ldr	r3, [pc, #112]	; (8009114 <prvHeapInit+0xb0>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	4413      	add	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80090b0:	2208      	movs	r2, #8
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	1a9b      	subs	r3, r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f023 0307 	bic.w	r3, r3, #7
 80090be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4a15      	ldr	r2, [pc, #84]	; (8009118 <prvHeapInit+0xb4>)
 80090c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80090c6:	4b14      	ldr	r3, [pc, #80]	; (8009118 <prvHeapInit+0xb4>)
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2200      	movs	r2, #0
 80090cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80090ce:	4b12      	ldr	r3, [pc, #72]	; (8009118 <prvHeapInit+0xb4>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2200      	movs	r2, #0
 80090d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	1ad2      	subs	r2, r2, r3
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80090e4:	4b0c      	ldr	r3, [pc, #48]	; (8009118 <prvHeapInit+0xb4>)
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	4a0a      	ldr	r2, [pc, #40]	; (800911c <prvHeapInit+0xb8>)
 80090f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	4a09      	ldr	r2, [pc, #36]	; (8009120 <prvHeapInit+0xbc>)
 80090fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090fc:	4b09      	ldr	r3, [pc, #36]	; (8009124 <prvHeapInit+0xc0>)
 80090fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009102:	601a      	str	r2, [r3, #0]
}
 8009104:	bf00      	nop
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	20000f7c 	.word	0x20000f7c
 8009114:	20001b34 	.word	0x20001b34
 8009118:	20001b3c 	.word	0x20001b3c
 800911c:	20001b44 	.word	0x20001b44
 8009120:	20001b40 	.word	0x20001b40
 8009124:	20001b50 	.word	0x20001b50

08009128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009130:	4b28      	ldr	r3, [pc, #160]	; (80091d4 <prvInsertBlockIntoFreeList+0xac>)
 8009132:	60fb      	str	r3, [r7, #12]
 8009134:	e002      	b.n	800913c <prvInsertBlockIntoFreeList+0x14>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	60fb      	str	r3, [r7, #12]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	429a      	cmp	r2, r3
 8009144:	d8f7      	bhi.n	8009136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	4413      	add	r3, r2
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	429a      	cmp	r2, r3
 8009156:	d108      	bne.n	800916a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	685a      	ldr	r2, [r3, #4]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	441a      	add	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	441a      	add	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	429a      	cmp	r2, r3
 800917c:	d118      	bne.n	80091b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681a      	ldr	r2, [r3, #0]
 8009182:	4b15      	ldr	r3, [pc, #84]	; (80091d8 <prvInsertBlockIntoFreeList+0xb0>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	429a      	cmp	r2, r3
 8009188:	d00d      	beq.n	80091a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	441a      	add	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	601a      	str	r2, [r3, #0]
 80091a4:	e008      	b.n	80091b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80091a6:	4b0c      	ldr	r3, [pc, #48]	; (80091d8 <prvInsertBlockIntoFreeList+0xb0>)
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	601a      	str	r2, [r3, #0]
 80091ae:	e003      	b.n	80091b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681a      	ldr	r2, [r3, #0]
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	429a      	cmp	r2, r3
 80091be:	d002      	beq.n	80091c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091c6:	bf00      	nop
 80091c8:	3714      	adds	r7, #20
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	20001b34 	.word	0x20001b34
 80091d8:	20001b3c 	.word	0x20001b3c

080091dc <atoi>:
 80091dc:	220a      	movs	r2, #10
 80091de:	2100      	movs	r1, #0
 80091e0:	f000 b882 	b.w	80092e8 <strtol>

080091e4 <_strtol_l.constprop.0>:
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091ea:	d001      	beq.n	80091f0 <_strtol_l.constprop.0+0xc>
 80091ec:	2b24      	cmp	r3, #36	; 0x24
 80091ee:	d906      	bls.n	80091fe <_strtol_l.constprop.0+0x1a>
 80091f0:	f000 fa54 	bl	800969c <__errno>
 80091f4:	2316      	movs	r3, #22
 80091f6:	6003      	str	r3, [r0, #0]
 80091f8:	2000      	movs	r0, #0
 80091fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fe:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80092e4 <_strtol_l.constprop.0+0x100>
 8009202:	460d      	mov	r5, r1
 8009204:	462e      	mov	r6, r5
 8009206:	f815 4b01 	ldrb.w	r4, [r5], #1
 800920a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800920e:	f017 0708 	ands.w	r7, r7, #8
 8009212:	d1f7      	bne.n	8009204 <_strtol_l.constprop.0+0x20>
 8009214:	2c2d      	cmp	r4, #45	; 0x2d
 8009216:	d132      	bne.n	800927e <_strtol_l.constprop.0+0x9a>
 8009218:	782c      	ldrb	r4, [r5, #0]
 800921a:	2701      	movs	r7, #1
 800921c:	1cb5      	adds	r5, r6, #2
 800921e:	2b00      	cmp	r3, #0
 8009220:	d05b      	beq.n	80092da <_strtol_l.constprop.0+0xf6>
 8009222:	2b10      	cmp	r3, #16
 8009224:	d109      	bne.n	800923a <_strtol_l.constprop.0+0x56>
 8009226:	2c30      	cmp	r4, #48	; 0x30
 8009228:	d107      	bne.n	800923a <_strtol_l.constprop.0+0x56>
 800922a:	782c      	ldrb	r4, [r5, #0]
 800922c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009230:	2c58      	cmp	r4, #88	; 0x58
 8009232:	d14d      	bne.n	80092d0 <_strtol_l.constprop.0+0xec>
 8009234:	786c      	ldrb	r4, [r5, #1]
 8009236:	2310      	movs	r3, #16
 8009238:	3502      	adds	r5, #2
 800923a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800923e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8009242:	f04f 0e00 	mov.w	lr, #0
 8009246:	fbb8 f9f3 	udiv	r9, r8, r3
 800924a:	4676      	mov	r6, lr
 800924c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009250:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009254:	f1bc 0f09 	cmp.w	ip, #9
 8009258:	d816      	bhi.n	8009288 <_strtol_l.constprop.0+0xa4>
 800925a:	4664      	mov	r4, ip
 800925c:	42a3      	cmp	r3, r4
 800925e:	dd24      	ble.n	80092aa <_strtol_l.constprop.0+0xc6>
 8009260:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 8009264:	d008      	beq.n	8009278 <_strtol_l.constprop.0+0x94>
 8009266:	45b1      	cmp	r9, r6
 8009268:	d31c      	bcc.n	80092a4 <_strtol_l.constprop.0+0xc0>
 800926a:	d101      	bne.n	8009270 <_strtol_l.constprop.0+0x8c>
 800926c:	45a2      	cmp	sl, r4
 800926e:	db19      	blt.n	80092a4 <_strtol_l.constprop.0+0xc0>
 8009270:	fb06 4603 	mla	r6, r6, r3, r4
 8009274:	f04f 0e01 	mov.w	lr, #1
 8009278:	f815 4b01 	ldrb.w	r4, [r5], #1
 800927c:	e7e8      	b.n	8009250 <_strtol_l.constprop.0+0x6c>
 800927e:	2c2b      	cmp	r4, #43	; 0x2b
 8009280:	bf04      	itt	eq
 8009282:	782c      	ldrbeq	r4, [r5, #0]
 8009284:	1cb5      	addeq	r5, r6, #2
 8009286:	e7ca      	b.n	800921e <_strtol_l.constprop.0+0x3a>
 8009288:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800928c:	f1bc 0f19 	cmp.w	ip, #25
 8009290:	d801      	bhi.n	8009296 <_strtol_l.constprop.0+0xb2>
 8009292:	3c37      	subs	r4, #55	; 0x37
 8009294:	e7e2      	b.n	800925c <_strtol_l.constprop.0+0x78>
 8009296:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800929a:	f1bc 0f19 	cmp.w	ip, #25
 800929e:	d804      	bhi.n	80092aa <_strtol_l.constprop.0+0xc6>
 80092a0:	3c57      	subs	r4, #87	; 0x57
 80092a2:	e7db      	b.n	800925c <_strtol_l.constprop.0+0x78>
 80092a4:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 80092a8:	e7e6      	b.n	8009278 <_strtol_l.constprop.0+0x94>
 80092aa:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80092ae:	d105      	bne.n	80092bc <_strtol_l.constprop.0+0xd8>
 80092b0:	2322      	movs	r3, #34	; 0x22
 80092b2:	6003      	str	r3, [r0, #0]
 80092b4:	4646      	mov	r6, r8
 80092b6:	b942      	cbnz	r2, 80092ca <_strtol_l.constprop.0+0xe6>
 80092b8:	4630      	mov	r0, r6
 80092ba:	e79e      	b.n	80091fa <_strtol_l.constprop.0+0x16>
 80092bc:	b107      	cbz	r7, 80092c0 <_strtol_l.constprop.0+0xdc>
 80092be:	4276      	negs	r6, r6
 80092c0:	2a00      	cmp	r2, #0
 80092c2:	d0f9      	beq.n	80092b8 <_strtol_l.constprop.0+0xd4>
 80092c4:	f1be 0f00 	cmp.w	lr, #0
 80092c8:	d000      	beq.n	80092cc <_strtol_l.constprop.0+0xe8>
 80092ca:	1e69      	subs	r1, r5, #1
 80092cc:	6011      	str	r1, [r2, #0]
 80092ce:	e7f3      	b.n	80092b8 <_strtol_l.constprop.0+0xd4>
 80092d0:	2430      	movs	r4, #48	; 0x30
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1b1      	bne.n	800923a <_strtol_l.constprop.0+0x56>
 80092d6:	2308      	movs	r3, #8
 80092d8:	e7af      	b.n	800923a <_strtol_l.constprop.0+0x56>
 80092da:	2c30      	cmp	r4, #48	; 0x30
 80092dc:	d0a5      	beq.n	800922a <_strtol_l.constprop.0+0x46>
 80092de:	230a      	movs	r3, #10
 80092e0:	e7ab      	b.n	800923a <_strtol_l.constprop.0+0x56>
 80092e2:	bf00      	nop
 80092e4:	0800a7fd 	.word	0x0800a7fd

080092e8 <strtol>:
 80092e8:	4613      	mov	r3, r2
 80092ea:	460a      	mov	r2, r1
 80092ec:	4601      	mov	r1, r0
 80092ee:	4802      	ldr	r0, [pc, #8]	; (80092f8 <strtol+0x10>)
 80092f0:	6800      	ldr	r0, [r0, #0]
 80092f2:	f7ff bf77 	b.w	80091e4 <_strtol_l.constprop.0>
 80092f6:	bf00      	nop
 80092f8:	20000068 	.word	0x20000068

080092fc <std>:
 80092fc:	2300      	movs	r3, #0
 80092fe:	b510      	push	{r4, lr}
 8009300:	4604      	mov	r4, r0
 8009302:	e9c0 3300 	strd	r3, r3, [r0]
 8009306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800930a:	6083      	str	r3, [r0, #8]
 800930c:	8181      	strh	r1, [r0, #12]
 800930e:	6643      	str	r3, [r0, #100]	; 0x64
 8009310:	81c2      	strh	r2, [r0, #14]
 8009312:	6183      	str	r3, [r0, #24]
 8009314:	4619      	mov	r1, r3
 8009316:	2208      	movs	r2, #8
 8009318:	305c      	adds	r0, #92	; 0x5c
 800931a:	f000 f914 	bl	8009546 <memset>
 800931e:	4b0d      	ldr	r3, [pc, #52]	; (8009354 <std+0x58>)
 8009320:	6263      	str	r3, [r4, #36]	; 0x24
 8009322:	4b0d      	ldr	r3, [pc, #52]	; (8009358 <std+0x5c>)
 8009324:	62a3      	str	r3, [r4, #40]	; 0x28
 8009326:	4b0d      	ldr	r3, [pc, #52]	; (800935c <std+0x60>)
 8009328:	62e3      	str	r3, [r4, #44]	; 0x2c
 800932a:	4b0d      	ldr	r3, [pc, #52]	; (8009360 <std+0x64>)
 800932c:	6323      	str	r3, [r4, #48]	; 0x30
 800932e:	4b0d      	ldr	r3, [pc, #52]	; (8009364 <std+0x68>)
 8009330:	6224      	str	r4, [r4, #32]
 8009332:	429c      	cmp	r4, r3
 8009334:	d006      	beq.n	8009344 <std+0x48>
 8009336:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800933a:	4294      	cmp	r4, r2
 800933c:	d002      	beq.n	8009344 <std+0x48>
 800933e:	33d0      	adds	r3, #208	; 0xd0
 8009340:	429c      	cmp	r4, r3
 8009342:	d105      	bne.n	8009350 <std+0x54>
 8009344:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800934c:	f000 b9d0 	b.w	80096f0 <__retarget_lock_init_recursive>
 8009350:	bd10      	pop	{r4, pc}
 8009352:	bf00      	nop
 8009354:	080094c1 	.word	0x080094c1
 8009358:	080094e3 	.word	0x080094e3
 800935c:	0800951b 	.word	0x0800951b
 8009360:	0800953f 	.word	0x0800953f
 8009364:	20001b54 	.word	0x20001b54

08009368 <stdio_exit_handler>:
 8009368:	4a02      	ldr	r2, [pc, #8]	; (8009374 <stdio_exit_handler+0xc>)
 800936a:	4903      	ldr	r1, [pc, #12]	; (8009378 <stdio_exit_handler+0x10>)
 800936c:	4803      	ldr	r0, [pc, #12]	; (800937c <stdio_exit_handler+0x14>)
 800936e:	f000 b869 	b.w	8009444 <_fwalk_sglue>
 8009372:	bf00      	nop
 8009374:	20000010 	.word	0x20000010
 8009378:	0800a02d 	.word	0x0800a02d
 800937c:	2000001c 	.word	0x2000001c

08009380 <cleanup_stdio>:
 8009380:	6841      	ldr	r1, [r0, #4]
 8009382:	4b0c      	ldr	r3, [pc, #48]	; (80093b4 <cleanup_stdio+0x34>)
 8009384:	4299      	cmp	r1, r3
 8009386:	b510      	push	{r4, lr}
 8009388:	4604      	mov	r4, r0
 800938a:	d001      	beq.n	8009390 <cleanup_stdio+0x10>
 800938c:	f000 fe4e 	bl	800a02c <_fflush_r>
 8009390:	68a1      	ldr	r1, [r4, #8]
 8009392:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <cleanup_stdio+0x38>)
 8009394:	4299      	cmp	r1, r3
 8009396:	d002      	beq.n	800939e <cleanup_stdio+0x1e>
 8009398:	4620      	mov	r0, r4
 800939a:	f000 fe47 	bl	800a02c <_fflush_r>
 800939e:	68e1      	ldr	r1, [r4, #12]
 80093a0:	4b06      	ldr	r3, [pc, #24]	; (80093bc <cleanup_stdio+0x3c>)
 80093a2:	4299      	cmp	r1, r3
 80093a4:	d004      	beq.n	80093b0 <cleanup_stdio+0x30>
 80093a6:	4620      	mov	r0, r4
 80093a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ac:	f000 be3e 	b.w	800a02c <_fflush_r>
 80093b0:	bd10      	pop	{r4, pc}
 80093b2:	bf00      	nop
 80093b4:	20001b54 	.word	0x20001b54
 80093b8:	20001bbc 	.word	0x20001bbc
 80093bc:	20001c24 	.word	0x20001c24

080093c0 <global_stdio_init.part.0>:
 80093c0:	b510      	push	{r4, lr}
 80093c2:	4b0b      	ldr	r3, [pc, #44]	; (80093f0 <global_stdio_init.part.0+0x30>)
 80093c4:	4c0b      	ldr	r4, [pc, #44]	; (80093f4 <global_stdio_init.part.0+0x34>)
 80093c6:	4a0c      	ldr	r2, [pc, #48]	; (80093f8 <global_stdio_init.part.0+0x38>)
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	4620      	mov	r0, r4
 80093cc:	2200      	movs	r2, #0
 80093ce:	2104      	movs	r1, #4
 80093d0:	f7ff ff94 	bl	80092fc <std>
 80093d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80093d8:	2201      	movs	r2, #1
 80093da:	2109      	movs	r1, #9
 80093dc:	f7ff ff8e 	bl	80092fc <std>
 80093e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80093e4:	2202      	movs	r2, #2
 80093e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ea:	2112      	movs	r1, #18
 80093ec:	f7ff bf86 	b.w	80092fc <std>
 80093f0:	20001c8c 	.word	0x20001c8c
 80093f4:	20001b54 	.word	0x20001b54
 80093f8:	08009369 	.word	0x08009369

080093fc <__sfp_lock_acquire>:
 80093fc:	4801      	ldr	r0, [pc, #4]	; (8009404 <__sfp_lock_acquire+0x8>)
 80093fe:	f000 b978 	b.w	80096f2 <__retarget_lock_acquire_recursive>
 8009402:	bf00      	nop
 8009404:	20001c95 	.word	0x20001c95

08009408 <__sfp_lock_release>:
 8009408:	4801      	ldr	r0, [pc, #4]	; (8009410 <__sfp_lock_release+0x8>)
 800940a:	f000 b973 	b.w	80096f4 <__retarget_lock_release_recursive>
 800940e:	bf00      	nop
 8009410:	20001c95 	.word	0x20001c95

08009414 <__sinit>:
 8009414:	b510      	push	{r4, lr}
 8009416:	4604      	mov	r4, r0
 8009418:	f7ff fff0 	bl	80093fc <__sfp_lock_acquire>
 800941c:	6a23      	ldr	r3, [r4, #32]
 800941e:	b11b      	cbz	r3, 8009428 <__sinit+0x14>
 8009420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009424:	f7ff bff0 	b.w	8009408 <__sfp_lock_release>
 8009428:	4b04      	ldr	r3, [pc, #16]	; (800943c <__sinit+0x28>)
 800942a:	6223      	str	r3, [r4, #32]
 800942c:	4b04      	ldr	r3, [pc, #16]	; (8009440 <__sinit+0x2c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d1f5      	bne.n	8009420 <__sinit+0xc>
 8009434:	f7ff ffc4 	bl	80093c0 <global_stdio_init.part.0>
 8009438:	e7f2      	b.n	8009420 <__sinit+0xc>
 800943a:	bf00      	nop
 800943c:	08009381 	.word	0x08009381
 8009440:	20001c8c 	.word	0x20001c8c

08009444 <_fwalk_sglue>:
 8009444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009448:	4607      	mov	r7, r0
 800944a:	4688      	mov	r8, r1
 800944c:	4614      	mov	r4, r2
 800944e:	2600      	movs	r6, #0
 8009450:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009454:	f1b9 0901 	subs.w	r9, r9, #1
 8009458:	d505      	bpl.n	8009466 <_fwalk_sglue+0x22>
 800945a:	6824      	ldr	r4, [r4, #0]
 800945c:	2c00      	cmp	r4, #0
 800945e:	d1f7      	bne.n	8009450 <_fwalk_sglue+0xc>
 8009460:	4630      	mov	r0, r6
 8009462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009466:	89ab      	ldrh	r3, [r5, #12]
 8009468:	2b01      	cmp	r3, #1
 800946a:	d907      	bls.n	800947c <_fwalk_sglue+0x38>
 800946c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009470:	3301      	adds	r3, #1
 8009472:	d003      	beq.n	800947c <_fwalk_sglue+0x38>
 8009474:	4629      	mov	r1, r5
 8009476:	4638      	mov	r0, r7
 8009478:	47c0      	blx	r8
 800947a:	4306      	orrs	r6, r0
 800947c:	3568      	adds	r5, #104	; 0x68
 800947e:	e7e9      	b.n	8009454 <_fwalk_sglue+0x10>

08009480 <siprintf>:
 8009480:	b40e      	push	{r1, r2, r3}
 8009482:	b500      	push	{lr}
 8009484:	b09c      	sub	sp, #112	; 0x70
 8009486:	ab1d      	add	r3, sp, #116	; 0x74
 8009488:	9002      	str	r0, [sp, #8]
 800948a:	9006      	str	r0, [sp, #24]
 800948c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009490:	4809      	ldr	r0, [pc, #36]	; (80094b8 <siprintf+0x38>)
 8009492:	9107      	str	r1, [sp, #28]
 8009494:	9104      	str	r1, [sp, #16]
 8009496:	4909      	ldr	r1, [pc, #36]	; (80094bc <siprintf+0x3c>)
 8009498:	f853 2b04 	ldr.w	r2, [r3], #4
 800949c:	9105      	str	r1, [sp, #20]
 800949e:	6800      	ldr	r0, [r0, #0]
 80094a0:	9301      	str	r3, [sp, #4]
 80094a2:	a902      	add	r1, sp, #8
 80094a4:	f000 faae 	bl	8009a04 <_svfiprintf_r>
 80094a8:	9b02      	ldr	r3, [sp, #8]
 80094aa:	2200      	movs	r2, #0
 80094ac:	701a      	strb	r2, [r3, #0]
 80094ae:	b01c      	add	sp, #112	; 0x70
 80094b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094b4:	b003      	add	sp, #12
 80094b6:	4770      	bx	lr
 80094b8:	20000068 	.word	0x20000068
 80094bc:	ffff0208 	.word	0xffff0208

080094c0 <__sread>:
 80094c0:	b510      	push	{r4, lr}
 80094c2:	460c      	mov	r4, r1
 80094c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c8:	f000 f8c4 	bl	8009654 <_read_r>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	bfab      	itete	ge
 80094d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094d2:	89a3      	ldrhlt	r3, [r4, #12]
 80094d4:	181b      	addge	r3, r3, r0
 80094d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094da:	bfac      	ite	ge
 80094dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80094de:	81a3      	strhlt	r3, [r4, #12]
 80094e0:	bd10      	pop	{r4, pc}

080094e2 <__swrite>:
 80094e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e6:	461f      	mov	r7, r3
 80094e8:	898b      	ldrh	r3, [r1, #12]
 80094ea:	05db      	lsls	r3, r3, #23
 80094ec:	4605      	mov	r5, r0
 80094ee:	460c      	mov	r4, r1
 80094f0:	4616      	mov	r6, r2
 80094f2:	d505      	bpl.n	8009500 <__swrite+0x1e>
 80094f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f8:	2302      	movs	r3, #2
 80094fa:	2200      	movs	r2, #0
 80094fc:	f000 f898 	bl	8009630 <_lseek_r>
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800950a:	81a3      	strh	r3, [r4, #12]
 800950c:	4632      	mov	r2, r6
 800950e:	463b      	mov	r3, r7
 8009510:	4628      	mov	r0, r5
 8009512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009516:	f000 b8af 	b.w	8009678 <_write_r>

0800951a <__sseek>:
 800951a:	b510      	push	{r4, lr}
 800951c:	460c      	mov	r4, r1
 800951e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009522:	f000 f885 	bl	8009630 <_lseek_r>
 8009526:	1c43      	adds	r3, r0, #1
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	bf15      	itete	ne
 800952c:	6560      	strne	r0, [r4, #84]	; 0x54
 800952e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009532:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009536:	81a3      	strheq	r3, [r4, #12]
 8009538:	bf18      	it	ne
 800953a:	81a3      	strhne	r3, [r4, #12]
 800953c:	bd10      	pop	{r4, pc}

0800953e <__sclose>:
 800953e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009542:	f000 b865 	b.w	8009610 <_close_r>

08009546 <memset>:
 8009546:	4402      	add	r2, r0
 8009548:	4603      	mov	r3, r0
 800954a:	4293      	cmp	r3, r2
 800954c:	d100      	bne.n	8009550 <memset+0xa>
 800954e:	4770      	bx	lr
 8009550:	f803 1b01 	strb.w	r1, [r3], #1
 8009554:	e7f9      	b.n	800954a <memset+0x4>
	...

08009558 <strtok>:
 8009558:	4b16      	ldr	r3, [pc, #88]	; (80095b4 <strtok+0x5c>)
 800955a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800955c:	681e      	ldr	r6, [r3, #0]
 800955e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8009560:	4605      	mov	r5, r0
 8009562:	b9fc      	cbnz	r4, 80095a4 <strtok+0x4c>
 8009564:	2050      	movs	r0, #80	; 0x50
 8009566:	9101      	str	r1, [sp, #4]
 8009568:	f000 f93e 	bl	80097e8 <malloc>
 800956c:	9901      	ldr	r1, [sp, #4]
 800956e:	6470      	str	r0, [r6, #68]	; 0x44
 8009570:	4602      	mov	r2, r0
 8009572:	b920      	cbnz	r0, 800957e <strtok+0x26>
 8009574:	4b10      	ldr	r3, [pc, #64]	; (80095b8 <strtok+0x60>)
 8009576:	4811      	ldr	r0, [pc, #68]	; (80095bc <strtok+0x64>)
 8009578:	215b      	movs	r1, #91	; 0x5b
 800957a:	f000 f8cb 	bl	8009714 <__assert_func>
 800957e:	e9c0 4400 	strd	r4, r4, [r0]
 8009582:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009586:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800958a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800958e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009592:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009596:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800959a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800959e:	6184      	str	r4, [r0, #24]
 80095a0:	7704      	strb	r4, [r0, #28]
 80095a2:	6244      	str	r4, [r0, #36]	; 0x24
 80095a4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80095a6:	2301      	movs	r3, #1
 80095a8:	4628      	mov	r0, r5
 80095aa:	b002      	add	sp, #8
 80095ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80095b0:	f000 b806 	b.w	80095c0 <__strtok_r>
 80095b4:	20000068 	.word	0x20000068
 80095b8:	0800a8fd 	.word	0x0800a8fd
 80095bc:	0800a914 	.word	0x0800a914

080095c0 <__strtok_r>:
 80095c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095c2:	b908      	cbnz	r0, 80095c8 <__strtok_r+0x8>
 80095c4:	6810      	ldr	r0, [r2, #0]
 80095c6:	b188      	cbz	r0, 80095ec <__strtok_r+0x2c>
 80095c8:	4604      	mov	r4, r0
 80095ca:	4620      	mov	r0, r4
 80095cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80095d0:	460f      	mov	r7, r1
 80095d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80095d6:	b91e      	cbnz	r6, 80095e0 <__strtok_r+0x20>
 80095d8:	b965      	cbnz	r5, 80095f4 <__strtok_r+0x34>
 80095da:	6015      	str	r5, [r2, #0]
 80095dc:	4628      	mov	r0, r5
 80095de:	e005      	b.n	80095ec <__strtok_r+0x2c>
 80095e0:	42b5      	cmp	r5, r6
 80095e2:	d1f6      	bne.n	80095d2 <__strtok_r+0x12>
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1f0      	bne.n	80095ca <__strtok_r+0xa>
 80095e8:	6014      	str	r4, [r2, #0]
 80095ea:	7003      	strb	r3, [r0, #0]
 80095ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ee:	461c      	mov	r4, r3
 80095f0:	e00c      	b.n	800960c <__strtok_r+0x4c>
 80095f2:	b915      	cbnz	r5, 80095fa <__strtok_r+0x3a>
 80095f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095f8:	460e      	mov	r6, r1
 80095fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80095fe:	42ab      	cmp	r3, r5
 8009600:	d1f7      	bne.n	80095f2 <__strtok_r+0x32>
 8009602:	2b00      	cmp	r3, #0
 8009604:	d0f3      	beq.n	80095ee <__strtok_r+0x2e>
 8009606:	2300      	movs	r3, #0
 8009608:	f804 3c01 	strb.w	r3, [r4, #-1]
 800960c:	6014      	str	r4, [r2, #0]
 800960e:	e7ed      	b.n	80095ec <__strtok_r+0x2c>

08009610 <_close_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	4d06      	ldr	r5, [pc, #24]	; (800962c <_close_r+0x1c>)
 8009614:	2300      	movs	r3, #0
 8009616:	4604      	mov	r4, r0
 8009618:	4608      	mov	r0, r1
 800961a:	602b      	str	r3, [r5, #0]
 800961c:	f7f7 fdac 	bl	8001178 <_close>
 8009620:	1c43      	adds	r3, r0, #1
 8009622:	d102      	bne.n	800962a <_close_r+0x1a>
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	b103      	cbz	r3, 800962a <_close_r+0x1a>
 8009628:	6023      	str	r3, [r4, #0]
 800962a:	bd38      	pop	{r3, r4, r5, pc}
 800962c:	20001c90 	.word	0x20001c90

08009630 <_lseek_r>:
 8009630:	b538      	push	{r3, r4, r5, lr}
 8009632:	4d07      	ldr	r5, [pc, #28]	; (8009650 <_lseek_r+0x20>)
 8009634:	4604      	mov	r4, r0
 8009636:	4608      	mov	r0, r1
 8009638:	4611      	mov	r1, r2
 800963a:	2200      	movs	r2, #0
 800963c:	602a      	str	r2, [r5, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	f7f7 fdc1 	bl	80011c6 <_lseek>
 8009644:	1c43      	adds	r3, r0, #1
 8009646:	d102      	bne.n	800964e <_lseek_r+0x1e>
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	b103      	cbz	r3, 800964e <_lseek_r+0x1e>
 800964c:	6023      	str	r3, [r4, #0]
 800964e:	bd38      	pop	{r3, r4, r5, pc}
 8009650:	20001c90 	.word	0x20001c90

08009654 <_read_r>:
 8009654:	b538      	push	{r3, r4, r5, lr}
 8009656:	4d07      	ldr	r5, [pc, #28]	; (8009674 <_read_r+0x20>)
 8009658:	4604      	mov	r4, r0
 800965a:	4608      	mov	r0, r1
 800965c:	4611      	mov	r1, r2
 800965e:	2200      	movs	r2, #0
 8009660:	602a      	str	r2, [r5, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	f7f7 fd4f 	bl	8001106 <_read>
 8009668:	1c43      	adds	r3, r0, #1
 800966a:	d102      	bne.n	8009672 <_read_r+0x1e>
 800966c:	682b      	ldr	r3, [r5, #0]
 800966e:	b103      	cbz	r3, 8009672 <_read_r+0x1e>
 8009670:	6023      	str	r3, [r4, #0]
 8009672:	bd38      	pop	{r3, r4, r5, pc}
 8009674:	20001c90 	.word	0x20001c90

08009678 <_write_r>:
 8009678:	b538      	push	{r3, r4, r5, lr}
 800967a:	4d07      	ldr	r5, [pc, #28]	; (8009698 <_write_r+0x20>)
 800967c:	4604      	mov	r4, r0
 800967e:	4608      	mov	r0, r1
 8009680:	4611      	mov	r1, r2
 8009682:	2200      	movs	r2, #0
 8009684:	602a      	str	r2, [r5, #0]
 8009686:	461a      	mov	r2, r3
 8009688:	f7f7 fd5a 	bl	8001140 <_write>
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	d102      	bne.n	8009696 <_write_r+0x1e>
 8009690:	682b      	ldr	r3, [r5, #0]
 8009692:	b103      	cbz	r3, 8009696 <_write_r+0x1e>
 8009694:	6023      	str	r3, [r4, #0]
 8009696:	bd38      	pop	{r3, r4, r5, pc}
 8009698:	20001c90 	.word	0x20001c90

0800969c <__errno>:
 800969c:	4b01      	ldr	r3, [pc, #4]	; (80096a4 <__errno+0x8>)
 800969e:	6818      	ldr	r0, [r3, #0]
 80096a0:	4770      	bx	lr
 80096a2:	bf00      	nop
 80096a4:	20000068 	.word	0x20000068

080096a8 <__libc_init_array>:
 80096a8:	b570      	push	{r4, r5, r6, lr}
 80096aa:	4d0d      	ldr	r5, [pc, #52]	; (80096e0 <__libc_init_array+0x38>)
 80096ac:	4c0d      	ldr	r4, [pc, #52]	; (80096e4 <__libc_init_array+0x3c>)
 80096ae:	1b64      	subs	r4, r4, r5
 80096b0:	10a4      	asrs	r4, r4, #2
 80096b2:	2600      	movs	r6, #0
 80096b4:	42a6      	cmp	r6, r4
 80096b6:	d109      	bne.n	80096cc <__libc_init_array+0x24>
 80096b8:	4d0b      	ldr	r5, [pc, #44]	; (80096e8 <__libc_init_array+0x40>)
 80096ba:	4c0c      	ldr	r4, [pc, #48]	; (80096ec <__libc_init_array+0x44>)
 80096bc:	f000 fffa 	bl	800a6b4 <_init>
 80096c0:	1b64      	subs	r4, r4, r5
 80096c2:	10a4      	asrs	r4, r4, #2
 80096c4:	2600      	movs	r6, #0
 80096c6:	42a6      	cmp	r6, r4
 80096c8:	d105      	bne.n	80096d6 <__libc_init_array+0x2e>
 80096ca:	bd70      	pop	{r4, r5, r6, pc}
 80096cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d0:	4798      	blx	r3
 80096d2:	3601      	adds	r6, #1
 80096d4:	e7ee      	b.n	80096b4 <__libc_init_array+0xc>
 80096d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096da:	4798      	blx	r3
 80096dc:	3601      	adds	r6, #1
 80096de:	e7f2      	b.n	80096c6 <__libc_init_array+0x1e>
 80096e0:	0800a9e8 	.word	0x0800a9e8
 80096e4:	0800a9e8 	.word	0x0800a9e8
 80096e8:	0800a9e8 	.word	0x0800a9e8
 80096ec:	0800a9ec 	.word	0x0800a9ec

080096f0 <__retarget_lock_init_recursive>:
 80096f0:	4770      	bx	lr

080096f2 <__retarget_lock_acquire_recursive>:
 80096f2:	4770      	bx	lr

080096f4 <__retarget_lock_release_recursive>:
 80096f4:	4770      	bx	lr

080096f6 <memcpy>:
 80096f6:	440a      	add	r2, r1
 80096f8:	4291      	cmp	r1, r2
 80096fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80096fe:	d100      	bne.n	8009702 <memcpy+0xc>
 8009700:	4770      	bx	lr
 8009702:	b510      	push	{r4, lr}
 8009704:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009708:	f803 4f01 	strb.w	r4, [r3, #1]!
 800970c:	4291      	cmp	r1, r2
 800970e:	d1f9      	bne.n	8009704 <memcpy+0xe>
 8009710:	bd10      	pop	{r4, pc}
	...

08009714 <__assert_func>:
 8009714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009716:	4614      	mov	r4, r2
 8009718:	461a      	mov	r2, r3
 800971a:	4b09      	ldr	r3, [pc, #36]	; (8009740 <__assert_func+0x2c>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4605      	mov	r5, r0
 8009720:	68d8      	ldr	r0, [r3, #12]
 8009722:	b14c      	cbz	r4, 8009738 <__assert_func+0x24>
 8009724:	4b07      	ldr	r3, [pc, #28]	; (8009744 <__assert_func+0x30>)
 8009726:	9100      	str	r1, [sp, #0]
 8009728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800972c:	4906      	ldr	r1, [pc, #24]	; (8009748 <__assert_func+0x34>)
 800972e:	462b      	mov	r3, r5
 8009730:	f000 fca4 	bl	800a07c <fiprintf>
 8009734:	f000 fcde 	bl	800a0f4 <abort>
 8009738:	4b04      	ldr	r3, [pc, #16]	; (800974c <__assert_func+0x38>)
 800973a:	461c      	mov	r4, r3
 800973c:	e7f3      	b.n	8009726 <__assert_func+0x12>
 800973e:	bf00      	nop
 8009740:	20000068 	.word	0x20000068
 8009744:	0800a96e 	.word	0x0800a96e
 8009748:	0800a97b 	.word	0x0800a97b
 800974c:	0800a9a9 	.word	0x0800a9a9

08009750 <_free_r>:
 8009750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009752:	2900      	cmp	r1, #0
 8009754:	d044      	beq.n	80097e0 <_free_r+0x90>
 8009756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800975a:	9001      	str	r0, [sp, #4]
 800975c:	2b00      	cmp	r3, #0
 800975e:	f1a1 0404 	sub.w	r4, r1, #4
 8009762:	bfb8      	it	lt
 8009764:	18e4      	addlt	r4, r4, r3
 8009766:	f000 f8e7 	bl	8009938 <__malloc_lock>
 800976a:	4a1e      	ldr	r2, [pc, #120]	; (80097e4 <_free_r+0x94>)
 800976c:	9801      	ldr	r0, [sp, #4]
 800976e:	6813      	ldr	r3, [r2, #0]
 8009770:	b933      	cbnz	r3, 8009780 <_free_r+0x30>
 8009772:	6063      	str	r3, [r4, #4]
 8009774:	6014      	str	r4, [r2, #0]
 8009776:	b003      	add	sp, #12
 8009778:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800977c:	f000 b8e2 	b.w	8009944 <__malloc_unlock>
 8009780:	42a3      	cmp	r3, r4
 8009782:	d908      	bls.n	8009796 <_free_r+0x46>
 8009784:	6825      	ldr	r5, [r4, #0]
 8009786:	1961      	adds	r1, r4, r5
 8009788:	428b      	cmp	r3, r1
 800978a:	bf01      	itttt	eq
 800978c:	6819      	ldreq	r1, [r3, #0]
 800978e:	685b      	ldreq	r3, [r3, #4]
 8009790:	1949      	addeq	r1, r1, r5
 8009792:	6021      	streq	r1, [r4, #0]
 8009794:	e7ed      	b.n	8009772 <_free_r+0x22>
 8009796:	461a      	mov	r2, r3
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	b10b      	cbz	r3, 80097a0 <_free_r+0x50>
 800979c:	42a3      	cmp	r3, r4
 800979e:	d9fa      	bls.n	8009796 <_free_r+0x46>
 80097a0:	6811      	ldr	r1, [r2, #0]
 80097a2:	1855      	adds	r5, r2, r1
 80097a4:	42a5      	cmp	r5, r4
 80097a6:	d10b      	bne.n	80097c0 <_free_r+0x70>
 80097a8:	6824      	ldr	r4, [r4, #0]
 80097aa:	4421      	add	r1, r4
 80097ac:	1854      	adds	r4, r2, r1
 80097ae:	42a3      	cmp	r3, r4
 80097b0:	6011      	str	r1, [r2, #0]
 80097b2:	d1e0      	bne.n	8009776 <_free_r+0x26>
 80097b4:	681c      	ldr	r4, [r3, #0]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	6053      	str	r3, [r2, #4]
 80097ba:	440c      	add	r4, r1
 80097bc:	6014      	str	r4, [r2, #0]
 80097be:	e7da      	b.n	8009776 <_free_r+0x26>
 80097c0:	d902      	bls.n	80097c8 <_free_r+0x78>
 80097c2:	230c      	movs	r3, #12
 80097c4:	6003      	str	r3, [r0, #0]
 80097c6:	e7d6      	b.n	8009776 <_free_r+0x26>
 80097c8:	6825      	ldr	r5, [r4, #0]
 80097ca:	1961      	adds	r1, r4, r5
 80097cc:	428b      	cmp	r3, r1
 80097ce:	bf04      	itt	eq
 80097d0:	6819      	ldreq	r1, [r3, #0]
 80097d2:	685b      	ldreq	r3, [r3, #4]
 80097d4:	6063      	str	r3, [r4, #4]
 80097d6:	bf04      	itt	eq
 80097d8:	1949      	addeq	r1, r1, r5
 80097da:	6021      	streq	r1, [r4, #0]
 80097dc:	6054      	str	r4, [r2, #4]
 80097de:	e7ca      	b.n	8009776 <_free_r+0x26>
 80097e0:	b003      	add	sp, #12
 80097e2:	bd30      	pop	{r4, r5, pc}
 80097e4:	20001c98 	.word	0x20001c98

080097e8 <malloc>:
 80097e8:	4b02      	ldr	r3, [pc, #8]	; (80097f4 <malloc+0xc>)
 80097ea:	4601      	mov	r1, r0
 80097ec:	6818      	ldr	r0, [r3, #0]
 80097ee:	f000 b823 	b.w	8009838 <_malloc_r>
 80097f2:	bf00      	nop
 80097f4:	20000068 	.word	0x20000068

080097f8 <sbrk_aligned>:
 80097f8:	b570      	push	{r4, r5, r6, lr}
 80097fa:	4e0e      	ldr	r6, [pc, #56]	; (8009834 <sbrk_aligned+0x3c>)
 80097fc:	460c      	mov	r4, r1
 80097fe:	6831      	ldr	r1, [r6, #0]
 8009800:	4605      	mov	r5, r0
 8009802:	b911      	cbnz	r1, 800980a <sbrk_aligned+0x12>
 8009804:	f000 fc66 	bl	800a0d4 <_sbrk_r>
 8009808:	6030      	str	r0, [r6, #0]
 800980a:	4621      	mov	r1, r4
 800980c:	4628      	mov	r0, r5
 800980e:	f000 fc61 	bl	800a0d4 <_sbrk_r>
 8009812:	1c43      	adds	r3, r0, #1
 8009814:	d00a      	beq.n	800982c <sbrk_aligned+0x34>
 8009816:	1cc4      	adds	r4, r0, #3
 8009818:	f024 0403 	bic.w	r4, r4, #3
 800981c:	42a0      	cmp	r0, r4
 800981e:	d007      	beq.n	8009830 <sbrk_aligned+0x38>
 8009820:	1a21      	subs	r1, r4, r0
 8009822:	4628      	mov	r0, r5
 8009824:	f000 fc56 	bl	800a0d4 <_sbrk_r>
 8009828:	3001      	adds	r0, #1
 800982a:	d101      	bne.n	8009830 <sbrk_aligned+0x38>
 800982c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009830:	4620      	mov	r0, r4
 8009832:	bd70      	pop	{r4, r5, r6, pc}
 8009834:	20001c9c 	.word	0x20001c9c

08009838 <_malloc_r>:
 8009838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800983c:	1ccd      	adds	r5, r1, #3
 800983e:	f025 0503 	bic.w	r5, r5, #3
 8009842:	3508      	adds	r5, #8
 8009844:	2d0c      	cmp	r5, #12
 8009846:	bf38      	it	cc
 8009848:	250c      	movcc	r5, #12
 800984a:	2d00      	cmp	r5, #0
 800984c:	4607      	mov	r7, r0
 800984e:	db01      	blt.n	8009854 <_malloc_r+0x1c>
 8009850:	42a9      	cmp	r1, r5
 8009852:	d905      	bls.n	8009860 <_malloc_r+0x28>
 8009854:	230c      	movs	r3, #12
 8009856:	603b      	str	r3, [r7, #0]
 8009858:	2600      	movs	r6, #0
 800985a:	4630      	mov	r0, r6
 800985c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009860:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009934 <_malloc_r+0xfc>
 8009864:	f000 f868 	bl	8009938 <__malloc_lock>
 8009868:	f8d8 3000 	ldr.w	r3, [r8]
 800986c:	461c      	mov	r4, r3
 800986e:	bb5c      	cbnz	r4, 80098c8 <_malloc_r+0x90>
 8009870:	4629      	mov	r1, r5
 8009872:	4638      	mov	r0, r7
 8009874:	f7ff ffc0 	bl	80097f8 <sbrk_aligned>
 8009878:	1c43      	adds	r3, r0, #1
 800987a:	4604      	mov	r4, r0
 800987c:	d155      	bne.n	800992a <_malloc_r+0xf2>
 800987e:	f8d8 4000 	ldr.w	r4, [r8]
 8009882:	4626      	mov	r6, r4
 8009884:	2e00      	cmp	r6, #0
 8009886:	d145      	bne.n	8009914 <_malloc_r+0xdc>
 8009888:	2c00      	cmp	r4, #0
 800988a:	d048      	beq.n	800991e <_malloc_r+0xe6>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	4631      	mov	r1, r6
 8009890:	4638      	mov	r0, r7
 8009892:	eb04 0903 	add.w	r9, r4, r3
 8009896:	f000 fc1d 	bl	800a0d4 <_sbrk_r>
 800989a:	4581      	cmp	r9, r0
 800989c:	d13f      	bne.n	800991e <_malloc_r+0xe6>
 800989e:	6821      	ldr	r1, [r4, #0]
 80098a0:	1a6d      	subs	r5, r5, r1
 80098a2:	4629      	mov	r1, r5
 80098a4:	4638      	mov	r0, r7
 80098a6:	f7ff ffa7 	bl	80097f8 <sbrk_aligned>
 80098aa:	3001      	adds	r0, #1
 80098ac:	d037      	beq.n	800991e <_malloc_r+0xe6>
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	442b      	add	r3, r5
 80098b2:	6023      	str	r3, [r4, #0]
 80098b4:	f8d8 3000 	ldr.w	r3, [r8]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d038      	beq.n	800992e <_malloc_r+0xf6>
 80098bc:	685a      	ldr	r2, [r3, #4]
 80098be:	42a2      	cmp	r2, r4
 80098c0:	d12b      	bne.n	800991a <_malloc_r+0xe2>
 80098c2:	2200      	movs	r2, #0
 80098c4:	605a      	str	r2, [r3, #4]
 80098c6:	e00f      	b.n	80098e8 <_malloc_r+0xb0>
 80098c8:	6822      	ldr	r2, [r4, #0]
 80098ca:	1b52      	subs	r2, r2, r5
 80098cc:	d41f      	bmi.n	800990e <_malloc_r+0xd6>
 80098ce:	2a0b      	cmp	r2, #11
 80098d0:	d917      	bls.n	8009902 <_malloc_r+0xca>
 80098d2:	1961      	adds	r1, r4, r5
 80098d4:	42a3      	cmp	r3, r4
 80098d6:	6025      	str	r5, [r4, #0]
 80098d8:	bf18      	it	ne
 80098da:	6059      	strne	r1, [r3, #4]
 80098dc:	6863      	ldr	r3, [r4, #4]
 80098de:	bf08      	it	eq
 80098e0:	f8c8 1000 	streq.w	r1, [r8]
 80098e4:	5162      	str	r2, [r4, r5]
 80098e6:	604b      	str	r3, [r1, #4]
 80098e8:	4638      	mov	r0, r7
 80098ea:	f104 060b 	add.w	r6, r4, #11
 80098ee:	f000 f829 	bl	8009944 <__malloc_unlock>
 80098f2:	f026 0607 	bic.w	r6, r6, #7
 80098f6:	1d23      	adds	r3, r4, #4
 80098f8:	1af2      	subs	r2, r6, r3
 80098fa:	d0ae      	beq.n	800985a <_malloc_r+0x22>
 80098fc:	1b9b      	subs	r3, r3, r6
 80098fe:	50a3      	str	r3, [r4, r2]
 8009900:	e7ab      	b.n	800985a <_malloc_r+0x22>
 8009902:	42a3      	cmp	r3, r4
 8009904:	6862      	ldr	r2, [r4, #4]
 8009906:	d1dd      	bne.n	80098c4 <_malloc_r+0x8c>
 8009908:	f8c8 2000 	str.w	r2, [r8]
 800990c:	e7ec      	b.n	80098e8 <_malloc_r+0xb0>
 800990e:	4623      	mov	r3, r4
 8009910:	6864      	ldr	r4, [r4, #4]
 8009912:	e7ac      	b.n	800986e <_malloc_r+0x36>
 8009914:	4634      	mov	r4, r6
 8009916:	6876      	ldr	r6, [r6, #4]
 8009918:	e7b4      	b.n	8009884 <_malloc_r+0x4c>
 800991a:	4613      	mov	r3, r2
 800991c:	e7cc      	b.n	80098b8 <_malloc_r+0x80>
 800991e:	230c      	movs	r3, #12
 8009920:	603b      	str	r3, [r7, #0]
 8009922:	4638      	mov	r0, r7
 8009924:	f000 f80e 	bl	8009944 <__malloc_unlock>
 8009928:	e797      	b.n	800985a <_malloc_r+0x22>
 800992a:	6025      	str	r5, [r4, #0]
 800992c:	e7dc      	b.n	80098e8 <_malloc_r+0xb0>
 800992e:	605b      	str	r3, [r3, #4]
 8009930:	deff      	udf	#255	; 0xff
 8009932:	bf00      	nop
 8009934:	20001c98 	.word	0x20001c98

08009938 <__malloc_lock>:
 8009938:	4801      	ldr	r0, [pc, #4]	; (8009940 <__malloc_lock+0x8>)
 800993a:	f7ff beda 	b.w	80096f2 <__retarget_lock_acquire_recursive>
 800993e:	bf00      	nop
 8009940:	20001c94 	.word	0x20001c94

08009944 <__malloc_unlock>:
 8009944:	4801      	ldr	r0, [pc, #4]	; (800994c <__malloc_unlock+0x8>)
 8009946:	f7ff bed5 	b.w	80096f4 <__retarget_lock_release_recursive>
 800994a:	bf00      	nop
 800994c:	20001c94 	.word	0x20001c94

08009950 <__ssputs_r>:
 8009950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009954:	688e      	ldr	r6, [r1, #8]
 8009956:	461f      	mov	r7, r3
 8009958:	42be      	cmp	r6, r7
 800995a:	680b      	ldr	r3, [r1, #0]
 800995c:	4682      	mov	sl, r0
 800995e:	460c      	mov	r4, r1
 8009960:	4690      	mov	r8, r2
 8009962:	d82c      	bhi.n	80099be <__ssputs_r+0x6e>
 8009964:	898a      	ldrh	r2, [r1, #12]
 8009966:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800996a:	d026      	beq.n	80099ba <__ssputs_r+0x6a>
 800996c:	6965      	ldr	r5, [r4, #20]
 800996e:	6909      	ldr	r1, [r1, #16]
 8009970:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009974:	eba3 0901 	sub.w	r9, r3, r1
 8009978:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800997c:	1c7b      	adds	r3, r7, #1
 800997e:	444b      	add	r3, r9
 8009980:	106d      	asrs	r5, r5, #1
 8009982:	429d      	cmp	r5, r3
 8009984:	bf38      	it	cc
 8009986:	461d      	movcc	r5, r3
 8009988:	0553      	lsls	r3, r2, #21
 800998a:	d527      	bpl.n	80099dc <__ssputs_r+0x8c>
 800998c:	4629      	mov	r1, r5
 800998e:	f7ff ff53 	bl	8009838 <_malloc_r>
 8009992:	4606      	mov	r6, r0
 8009994:	b360      	cbz	r0, 80099f0 <__ssputs_r+0xa0>
 8009996:	6921      	ldr	r1, [r4, #16]
 8009998:	464a      	mov	r2, r9
 800999a:	f7ff feac 	bl	80096f6 <memcpy>
 800999e:	89a3      	ldrh	r3, [r4, #12]
 80099a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80099a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a8:	81a3      	strh	r3, [r4, #12]
 80099aa:	6126      	str	r6, [r4, #16]
 80099ac:	6165      	str	r5, [r4, #20]
 80099ae:	444e      	add	r6, r9
 80099b0:	eba5 0509 	sub.w	r5, r5, r9
 80099b4:	6026      	str	r6, [r4, #0]
 80099b6:	60a5      	str	r5, [r4, #8]
 80099b8:	463e      	mov	r6, r7
 80099ba:	42be      	cmp	r6, r7
 80099bc:	d900      	bls.n	80099c0 <__ssputs_r+0x70>
 80099be:	463e      	mov	r6, r7
 80099c0:	6820      	ldr	r0, [r4, #0]
 80099c2:	4632      	mov	r2, r6
 80099c4:	4641      	mov	r1, r8
 80099c6:	f000 fb6b 	bl	800a0a0 <memmove>
 80099ca:	68a3      	ldr	r3, [r4, #8]
 80099cc:	1b9b      	subs	r3, r3, r6
 80099ce:	60a3      	str	r3, [r4, #8]
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	4433      	add	r3, r6
 80099d4:	6023      	str	r3, [r4, #0]
 80099d6:	2000      	movs	r0, #0
 80099d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099dc:	462a      	mov	r2, r5
 80099de:	f000 fb90 	bl	800a102 <_realloc_r>
 80099e2:	4606      	mov	r6, r0
 80099e4:	2800      	cmp	r0, #0
 80099e6:	d1e0      	bne.n	80099aa <__ssputs_r+0x5a>
 80099e8:	6921      	ldr	r1, [r4, #16]
 80099ea:	4650      	mov	r0, sl
 80099ec:	f7ff feb0 	bl	8009750 <_free_r>
 80099f0:	230c      	movs	r3, #12
 80099f2:	f8ca 3000 	str.w	r3, [sl]
 80099f6:	89a3      	ldrh	r3, [r4, #12]
 80099f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099fc:	81a3      	strh	r3, [r4, #12]
 80099fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a02:	e7e9      	b.n	80099d8 <__ssputs_r+0x88>

08009a04 <_svfiprintf_r>:
 8009a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a08:	4698      	mov	r8, r3
 8009a0a:	898b      	ldrh	r3, [r1, #12]
 8009a0c:	061b      	lsls	r3, r3, #24
 8009a0e:	b09d      	sub	sp, #116	; 0x74
 8009a10:	4607      	mov	r7, r0
 8009a12:	460d      	mov	r5, r1
 8009a14:	4614      	mov	r4, r2
 8009a16:	d50e      	bpl.n	8009a36 <_svfiprintf_r+0x32>
 8009a18:	690b      	ldr	r3, [r1, #16]
 8009a1a:	b963      	cbnz	r3, 8009a36 <_svfiprintf_r+0x32>
 8009a1c:	2140      	movs	r1, #64	; 0x40
 8009a1e:	f7ff ff0b 	bl	8009838 <_malloc_r>
 8009a22:	6028      	str	r0, [r5, #0]
 8009a24:	6128      	str	r0, [r5, #16]
 8009a26:	b920      	cbnz	r0, 8009a32 <_svfiprintf_r+0x2e>
 8009a28:	230c      	movs	r3, #12
 8009a2a:	603b      	str	r3, [r7, #0]
 8009a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a30:	e0d0      	b.n	8009bd4 <_svfiprintf_r+0x1d0>
 8009a32:	2340      	movs	r3, #64	; 0x40
 8009a34:	616b      	str	r3, [r5, #20]
 8009a36:	2300      	movs	r3, #0
 8009a38:	9309      	str	r3, [sp, #36]	; 0x24
 8009a3a:	2320      	movs	r3, #32
 8009a3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009a40:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a44:	2330      	movs	r3, #48	; 0x30
 8009a46:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009bec <_svfiprintf_r+0x1e8>
 8009a4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009a4e:	f04f 0901 	mov.w	r9, #1
 8009a52:	4623      	mov	r3, r4
 8009a54:	469a      	mov	sl, r3
 8009a56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a5a:	b10a      	cbz	r2, 8009a60 <_svfiprintf_r+0x5c>
 8009a5c:	2a25      	cmp	r2, #37	; 0x25
 8009a5e:	d1f9      	bne.n	8009a54 <_svfiprintf_r+0x50>
 8009a60:	ebba 0b04 	subs.w	fp, sl, r4
 8009a64:	d00b      	beq.n	8009a7e <_svfiprintf_r+0x7a>
 8009a66:	465b      	mov	r3, fp
 8009a68:	4622      	mov	r2, r4
 8009a6a:	4629      	mov	r1, r5
 8009a6c:	4638      	mov	r0, r7
 8009a6e:	f7ff ff6f 	bl	8009950 <__ssputs_r>
 8009a72:	3001      	adds	r0, #1
 8009a74:	f000 80a9 	beq.w	8009bca <_svfiprintf_r+0x1c6>
 8009a78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a7a:	445a      	add	r2, fp
 8009a7c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a7e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f000 80a1 	beq.w	8009bca <_svfiprintf_r+0x1c6>
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a92:	f10a 0a01 	add.w	sl, sl, #1
 8009a96:	9304      	str	r3, [sp, #16]
 8009a98:	9307      	str	r3, [sp, #28]
 8009a9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a9e:	931a      	str	r3, [sp, #104]	; 0x68
 8009aa0:	4654      	mov	r4, sl
 8009aa2:	2205      	movs	r2, #5
 8009aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aa8:	4850      	ldr	r0, [pc, #320]	; (8009bec <_svfiprintf_r+0x1e8>)
 8009aaa:	f7f6 fba9 	bl	8000200 <memchr>
 8009aae:	9a04      	ldr	r2, [sp, #16]
 8009ab0:	b9d8      	cbnz	r0, 8009aea <_svfiprintf_r+0xe6>
 8009ab2:	06d0      	lsls	r0, r2, #27
 8009ab4:	bf44      	itt	mi
 8009ab6:	2320      	movmi	r3, #32
 8009ab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009abc:	0711      	lsls	r1, r2, #28
 8009abe:	bf44      	itt	mi
 8009ac0:	232b      	movmi	r3, #43	; 0x2b
 8009ac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ac6:	f89a 3000 	ldrb.w	r3, [sl]
 8009aca:	2b2a      	cmp	r3, #42	; 0x2a
 8009acc:	d015      	beq.n	8009afa <_svfiprintf_r+0xf6>
 8009ace:	9a07      	ldr	r2, [sp, #28]
 8009ad0:	4654      	mov	r4, sl
 8009ad2:	2000      	movs	r0, #0
 8009ad4:	f04f 0c0a 	mov.w	ip, #10
 8009ad8:	4621      	mov	r1, r4
 8009ada:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ade:	3b30      	subs	r3, #48	; 0x30
 8009ae0:	2b09      	cmp	r3, #9
 8009ae2:	d94d      	bls.n	8009b80 <_svfiprintf_r+0x17c>
 8009ae4:	b1b0      	cbz	r0, 8009b14 <_svfiprintf_r+0x110>
 8009ae6:	9207      	str	r2, [sp, #28]
 8009ae8:	e014      	b.n	8009b14 <_svfiprintf_r+0x110>
 8009aea:	eba0 0308 	sub.w	r3, r0, r8
 8009aee:	fa09 f303 	lsl.w	r3, r9, r3
 8009af2:	4313      	orrs	r3, r2
 8009af4:	9304      	str	r3, [sp, #16]
 8009af6:	46a2      	mov	sl, r4
 8009af8:	e7d2      	b.n	8009aa0 <_svfiprintf_r+0x9c>
 8009afa:	9b03      	ldr	r3, [sp, #12]
 8009afc:	1d19      	adds	r1, r3, #4
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	9103      	str	r1, [sp, #12]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	bfbb      	ittet	lt
 8009b06:	425b      	neglt	r3, r3
 8009b08:	f042 0202 	orrlt.w	r2, r2, #2
 8009b0c:	9307      	strge	r3, [sp, #28]
 8009b0e:	9307      	strlt	r3, [sp, #28]
 8009b10:	bfb8      	it	lt
 8009b12:	9204      	strlt	r2, [sp, #16]
 8009b14:	7823      	ldrb	r3, [r4, #0]
 8009b16:	2b2e      	cmp	r3, #46	; 0x2e
 8009b18:	d10c      	bne.n	8009b34 <_svfiprintf_r+0x130>
 8009b1a:	7863      	ldrb	r3, [r4, #1]
 8009b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b1e:	d134      	bne.n	8009b8a <_svfiprintf_r+0x186>
 8009b20:	9b03      	ldr	r3, [sp, #12]
 8009b22:	1d1a      	adds	r2, r3, #4
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	9203      	str	r2, [sp, #12]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	bfb8      	it	lt
 8009b2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009b30:	3402      	adds	r4, #2
 8009b32:	9305      	str	r3, [sp, #20]
 8009b34:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009bfc <_svfiprintf_r+0x1f8>
 8009b38:	7821      	ldrb	r1, [r4, #0]
 8009b3a:	2203      	movs	r2, #3
 8009b3c:	4650      	mov	r0, sl
 8009b3e:	f7f6 fb5f 	bl	8000200 <memchr>
 8009b42:	b138      	cbz	r0, 8009b54 <_svfiprintf_r+0x150>
 8009b44:	9b04      	ldr	r3, [sp, #16]
 8009b46:	eba0 000a 	sub.w	r0, r0, sl
 8009b4a:	2240      	movs	r2, #64	; 0x40
 8009b4c:	4082      	lsls	r2, r0
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	3401      	adds	r4, #1
 8009b52:	9304      	str	r3, [sp, #16]
 8009b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b58:	4825      	ldr	r0, [pc, #148]	; (8009bf0 <_svfiprintf_r+0x1ec>)
 8009b5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009b5e:	2206      	movs	r2, #6
 8009b60:	f7f6 fb4e 	bl	8000200 <memchr>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d038      	beq.n	8009bda <_svfiprintf_r+0x1d6>
 8009b68:	4b22      	ldr	r3, [pc, #136]	; (8009bf4 <_svfiprintf_r+0x1f0>)
 8009b6a:	bb1b      	cbnz	r3, 8009bb4 <_svfiprintf_r+0x1b0>
 8009b6c:	9b03      	ldr	r3, [sp, #12]
 8009b6e:	3307      	adds	r3, #7
 8009b70:	f023 0307 	bic.w	r3, r3, #7
 8009b74:	3308      	adds	r3, #8
 8009b76:	9303      	str	r3, [sp, #12]
 8009b78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7a:	4433      	add	r3, r6
 8009b7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b7e:	e768      	b.n	8009a52 <_svfiprintf_r+0x4e>
 8009b80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b84:	460c      	mov	r4, r1
 8009b86:	2001      	movs	r0, #1
 8009b88:	e7a6      	b.n	8009ad8 <_svfiprintf_r+0xd4>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	3401      	adds	r4, #1
 8009b8e:	9305      	str	r3, [sp, #20]
 8009b90:	4619      	mov	r1, r3
 8009b92:	f04f 0c0a 	mov.w	ip, #10
 8009b96:	4620      	mov	r0, r4
 8009b98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b9c:	3a30      	subs	r2, #48	; 0x30
 8009b9e:	2a09      	cmp	r2, #9
 8009ba0:	d903      	bls.n	8009baa <_svfiprintf_r+0x1a6>
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d0c6      	beq.n	8009b34 <_svfiprintf_r+0x130>
 8009ba6:	9105      	str	r1, [sp, #20]
 8009ba8:	e7c4      	b.n	8009b34 <_svfiprintf_r+0x130>
 8009baa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bae:	4604      	mov	r4, r0
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e7f0      	b.n	8009b96 <_svfiprintf_r+0x192>
 8009bb4:	ab03      	add	r3, sp, #12
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	462a      	mov	r2, r5
 8009bba:	4b0f      	ldr	r3, [pc, #60]	; (8009bf8 <_svfiprintf_r+0x1f4>)
 8009bbc:	a904      	add	r1, sp, #16
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	f3af 8000 	nop.w
 8009bc4:	1c42      	adds	r2, r0, #1
 8009bc6:	4606      	mov	r6, r0
 8009bc8:	d1d6      	bne.n	8009b78 <_svfiprintf_r+0x174>
 8009bca:	89ab      	ldrh	r3, [r5, #12]
 8009bcc:	065b      	lsls	r3, r3, #25
 8009bce:	f53f af2d 	bmi.w	8009a2c <_svfiprintf_r+0x28>
 8009bd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009bd4:	b01d      	add	sp, #116	; 0x74
 8009bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bda:	ab03      	add	r3, sp, #12
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	462a      	mov	r2, r5
 8009be0:	4b05      	ldr	r3, [pc, #20]	; (8009bf8 <_svfiprintf_r+0x1f4>)
 8009be2:	a904      	add	r1, sp, #16
 8009be4:	4638      	mov	r0, r7
 8009be6:	f000 f879 	bl	8009cdc <_printf_i>
 8009bea:	e7eb      	b.n	8009bc4 <_svfiprintf_r+0x1c0>
 8009bec:	0800a9aa 	.word	0x0800a9aa
 8009bf0:	0800a9b4 	.word	0x0800a9b4
 8009bf4:	00000000 	.word	0x00000000
 8009bf8:	08009951 	.word	0x08009951
 8009bfc:	0800a9b0 	.word	0x0800a9b0

08009c00 <_printf_common>:
 8009c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c04:	4616      	mov	r6, r2
 8009c06:	4699      	mov	r9, r3
 8009c08:	688a      	ldr	r2, [r1, #8]
 8009c0a:	690b      	ldr	r3, [r1, #16]
 8009c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c10:	4293      	cmp	r3, r2
 8009c12:	bfb8      	it	lt
 8009c14:	4613      	movlt	r3, r2
 8009c16:	6033      	str	r3, [r6, #0]
 8009c18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c1c:	4607      	mov	r7, r0
 8009c1e:	460c      	mov	r4, r1
 8009c20:	b10a      	cbz	r2, 8009c26 <_printf_common+0x26>
 8009c22:	3301      	adds	r3, #1
 8009c24:	6033      	str	r3, [r6, #0]
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	0699      	lsls	r1, r3, #26
 8009c2a:	bf42      	ittt	mi
 8009c2c:	6833      	ldrmi	r3, [r6, #0]
 8009c2e:	3302      	addmi	r3, #2
 8009c30:	6033      	strmi	r3, [r6, #0]
 8009c32:	6825      	ldr	r5, [r4, #0]
 8009c34:	f015 0506 	ands.w	r5, r5, #6
 8009c38:	d106      	bne.n	8009c48 <_printf_common+0x48>
 8009c3a:	f104 0a19 	add.w	sl, r4, #25
 8009c3e:	68e3      	ldr	r3, [r4, #12]
 8009c40:	6832      	ldr	r2, [r6, #0]
 8009c42:	1a9b      	subs	r3, r3, r2
 8009c44:	42ab      	cmp	r3, r5
 8009c46:	dc26      	bgt.n	8009c96 <_printf_common+0x96>
 8009c48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c4c:	1e13      	subs	r3, r2, #0
 8009c4e:	6822      	ldr	r2, [r4, #0]
 8009c50:	bf18      	it	ne
 8009c52:	2301      	movne	r3, #1
 8009c54:	0692      	lsls	r2, r2, #26
 8009c56:	d42b      	bmi.n	8009cb0 <_printf_common+0xb0>
 8009c58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	4638      	mov	r0, r7
 8009c60:	47c0      	blx	r8
 8009c62:	3001      	adds	r0, #1
 8009c64:	d01e      	beq.n	8009ca4 <_printf_common+0xa4>
 8009c66:	6823      	ldr	r3, [r4, #0]
 8009c68:	6922      	ldr	r2, [r4, #16]
 8009c6a:	f003 0306 	and.w	r3, r3, #6
 8009c6e:	2b04      	cmp	r3, #4
 8009c70:	bf02      	ittt	eq
 8009c72:	68e5      	ldreq	r5, [r4, #12]
 8009c74:	6833      	ldreq	r3, [r6, #0]
 8009c76:	1aed      	subeq	r5, r5, r3
 8009c78:	68a3      	ldr	r3, [r4, #8]
 8009c7a:	bf0c      	ite	eq
 8009c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c80:	2500      	movne	r5, #0
 8009c82:	4293      	cmp	r3, r2
 8009c84:	bfc4      	itt	gt
 8009c86:	1a9b      	subgt	r3, r3, r2
 8009c88:	18ed      	addgt	r5, r5, r3
 8009c8a:	2600      	movs	r6, #0
 8009c8c:	341a      	adds	r4, #26
 8009c8e:	42b5      	cmp	r5, r6
 8009c90:	d11a      	bne.n	8009cc8 <_printf_common+0xc8>
 8009c92:	2000      	movs	r0, #0
 8009c94:	e008      	b.n	8009ca8 <_printf_common+0xa8>
 8009c96:	2301      	movs	r3, #1
 8009c98:	4652      	mov	r2, sl
 8009c9a:	4649      	mov	r1, r9
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	47c0      	blx	r8
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	d103      	bne.n	8009cac <_printf_common+0xac>
 8009ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cac:	3501      	adds	r5, #1
 8009cae:	e7c6      	b.n	8009c3e <_printf_common+0x3e>
 8009cb0:	18e1      	adds	r1, r4, r3
 8009cb2:	1c5a      	adds	r2, r3, #1
 8009cb4:	2030      	movs	r0, #48	; 0x30
 8009cb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009cba:	4422      	add	r2, r4
 8009cbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009cc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009cc4:	3302      	adds	r3, #2
 8009cc6:	e7c7      	b.n	8009c58 <_printf_common+0x58>
 8009cc8:	2301      	movs	r3, #1
 8009cca:	4622      	mov	r2, r4
 8009ccc:	4649      	mov	r1, r9
 8009cce:	4638      	mov	r0, r7
 8009cd0:	47c0      	blx	r8
 8009cd2:	3001      	adds	r0, #1
 8009cd4:	d0e6      	beq.n	8009ca4 <_printf_common+0xa4>
 8009cd6:	3601      	adds	r6, #1
 8009cd8:	e7d9      	b.n	8009c8e <_printf_common+0x8e>
	...

08009cdc <_printf_i>:
 8009cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce0:	7e0f      	ldrb	r7, [r1, #24]
 8009ce2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ce4:	2f78      	cmp	r7, #120	; 0x78
 8009ce6:	4691      	mov	r9, r2
 8009ce8:	4680      	mov	r8, r0
 8009cea:	460c      	mov	r4, r1
 8009cec:	469a      	mov	sl, r3
 8009cee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009cf2:	d807      	bhi.n	8009d04 <_printf_i+0x28>
 8009cf4:	2f62      	cmp	r7, #98	; 0x62
 8009cf6:	d80a      	bhi.n	8009d0e <_printf_i+0x32>
 8009cf8:	2f00      	cmp	r7, #0
 8009cfa:	f000 80d4 	beq.w	8009ea6 <_printf_i+0x1ca>
 8009cfe:	2f58      	cmp	r7, #88	; 0x58
 8009d00:	f000 80c0 	beq.w	8009e84 <_printf_i+0x1a8>
 8009d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d0c:	e03a      	b.n	8009d84 <_printf_i+0xa8>
 8009d0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d12:	2b15      	cmp	r3, #21
 8009d14:	d8f6      	bhi.n	8009d04 <_printf_i+0x28>
 8009d16:	a101      	add	r1, pc, #4	; (adr r1, 8009d1c <_printf_i+0x40>)
 8009d18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d1c:	08009d75 	.word	0x08009d75
 8009d20:	08009d89 	.word	0x08009d89
 8009d24:	08009d05 	.word	0x08009d05
 8009d28:	08009d05 	.word	0x08009d05
 8009d2c:	08009d05 	.word	0x08009d05
 8009d30:	08009d05 	.word	0x08009d05
 8009d34:	08009d89 	.word	0x08009d89
 8009d38:	08009d05 	.word	0x08009d05
 8009d3c:	08009d05 	.word	0x08009d05
 8009d40:	08009d05 	.word	0x08009d05
 8009d44:	08009d05 	.word	0x08009d05
 8009d48:	08009e8d 	.word	0x08009e8d
 8009d4c:	08009db5 	.word	0x08009db5
 8009d50:	08009e47 	.word	0x08009e47
 8009d54:	08009d05 	.word	0x08009d05
 8009d58:	08009d05 	.word	0x08009d05
 8009d5c:	08009eaf 	.word	0x08009eaf
 8009d60:	08009d05 	.word	0x08009d05
 8009d64:	08009db5 	.word	0x08009db5
 8009d68:	08009d05 	.word	0x08009d05
 8009d6c:	08009d05 	.word	0x08009d05
 8009d70:	08009e4f 	.word	0x08009e4f
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	1d1a      	adds	r2, r3, #4
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	602a      	str	r2, [r5, #0]
 8009d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d84:	2301      	movs	r3, #1
 8009d86:	e09f      	b.n	8009ec8 <_printf_i+0x1ec>
 8009d88:	6820      	ldr	r0, [r4, #0]
 8009d8a:	682b      	ldr	r3, [r5, #0]
 8009d8c:	0607      	lsls	r7, r0, #24
 8009d8e:	f103 0104 	add.w	r1, r3, #4
 8009d92:	6029      	str	r1, [r5, #0]
 8009d94:	d501      	bpl.n	8009d9a <_printf_i+0xbe>
 8009d96:	681e      	ldr	r6, [r3, #0]
 8009d98:	e003      	b.n	8009da2 <_printf_i+0xc6>
 8009d9a:	0646      	lsls	r6, r0, #25
 8009d9c:	d5fb      	bpl.n	8009d96 <_printf_i+0xba>
 8009d9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009da2:	2e00      	cmp	r6, #0
 8009da4:	da03      	bge.n	8009dae <_printf_i+0xd2>
 8009da6:	232d      	movs	r3, #45	; 0x2d
 8009da8:	4276      	negs	r6, r6
 8009daa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dae:	485a      	ldr	r0, [pc, #360]	; (8009f18 <_printf_i+0x23c>)
 8009db0:	230a      	movs	r3, #10
 8009db2:	e012      	b.n	8009dda <_printf_i+0xfe>
 8009db4:	682b      	ldr	r3, [r5, #0]
 8009db6:	6820      	ldr	r0, [r4, #0]
 8009db8:	1d19      	adds	r1, r3, #4
 8009dba:	6029      	str	r1, [r5, #0]
 8009dbc:	0605      	lsls	r5, r0, #24
 8009dbe:	d501      	bpl.n	8009dc4 <_printf_i+0xe8>
 8009dc0:	681e      	ldr	r6, [r3, #0]
 8009dc2:	e002      	b.n	8009dca <_printf_i+0xee>
 8009dc4:	0641      	lsls	r1, r0, #25
 8009dc6:	d5fb      	bpl.n	8009dc0 <_printf_i+0xe4>
 8009dc8:	881e      	ldrh	r6, [r3, #0]
 8009dca:	4853      	ldr	r0, [pc, #332]	; (8009f18 <_printf_i+0x23c>)
 8009dcc:	2f6f      	cmp	r7, #111	; 0x6f
 8009dce:	bf0c      	ite	eq
 8009dd0:	2308      	moveq	r3, #8
 8009dd2:	230a      	movne	r3, #10
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009dda:	6865      	ldr	r5, [r4, #4]
 8009ddc:	60a5      	str	r5, [r4, #8]
 8009dde:	2d00      	cmp	r5, #0
 8009de0:	bfa2      	ittt	ge
 8009de2:	6821      	ldrge	r1, [r4, #0]
 8009de4:	f021 0104 	bicge.w	r1, r1, #4
 8009de8:	6021      	strge	r1, [r4, #0]
 8009dea:	b90e      	cbnz	r6, 8009df0 <_printf_i+0x114>
 8009dec:	2d00      	cmp	r5, #0
 8009dee:	d04b      	beq.n	8009e88 <_printf_i+0x1ac>
 8009df0:	4615      	mov	r5, r2
 8009df2:	fbb6 f1f3 	udiv	r1, r6, r3
 8009df6:	fb03 6711 	mls	r7, r3, r1, r6
 8009dfa:	5dc7      	ldrb	r7, [r0, r7]
 8009dfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e00:	4637      	mov	r7, r6
 8009e02:	42bb      	cmp	r3, r7
 8009e04:	460e      	mov	r6, r1
 8009e06:	d9f4      	bls.n	8009df2 <_printf_i+0x116>
 8009e08:	2b08      	cmp	r3, #8
 8009e0a:	d10b      	bne.n	8009e24 <_printf_i+0x148>
 8009e0c:	6823      	ldr	r3, [r4, #0]
 8009e0e:	07de      	lsls	r6, r3, #31
 8009e10:	d508      	bpl.n	8009e24 <_printf_i+0x148>
 8009e12:	6923      	ldr	r3, [r4, #16]
 8009e14:	6861      	ldr	r1, [r4, #4]
 8009e16:	4299      	cmp	r1, r3
 8009e18:	bfde      	ittt	le
 8009e1a:	2330      	movle	r3, #48	; 0x30
 8009e1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e20:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009e24:	1b52      	subs	r2, r2, r5
 8009e26:	6122      	str	r2, [r4, #16]
 8009e28:	f8cd a000 	str.w	sl, [sp]
 8009e2c:	464b      	mov	r3, r9
 8009e2e:	aa03      	add	r2, sp, #12
 8009e30:	4621      	mov	r1, r4
 8009e32:	4640      	mov	r0, r8
 8009e34:	f7ff fee4 	bl	8009c00 <_printf_common>
 8009e38:	3001      	adds	r0, #1
 8009e3a:	d14a      	bne.n	8009ed2 <_printf_i+0x1f6>
 8009e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e40:	b004      	add	sp, #16
 8009e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e46:	6823      	ldr	r3, [r4, #0]
 8009e48:	f043 0320 	orr.w	r3, r3, #32
 8009e4c:	6023      	str	r3, [r4, #0]
 8009e4e:	4833      	ldr	r0, [pc, #204]	; (8009f1c <_printf_i+0x240>)
 8009e50:	2778      	movs	r7, #120	; 0x78
 8009e52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009e56:	6823      	ldr	r3, [r4, #0]
 8009e58:	6829      	ldr	r1, [r5, #0]
 8009e5a:	061f      	lsls	r7, r3, #24
 8009e5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009e60:	d402      	bmi.n	8009e68 <_printf_i+0x18c>
 8009e62:	065f      	lsls	r7, r3, #25
 8009e64:	bf48      	it	mi
 8009e66:	b2b6      	uxthmi	r6, r6
 8009e68:	07df      	lsls	r7, r3, #31
 8009e6a:	bf48      	it	mi
 8009e6c:	f043 0320 	orrmi.w	r3, r3, #32
 8009e70:	6029      	str	r1, [r5, #0]
 8009e72:	bf48      	it	mi
 8009e74:	6023      	strmi	r3, [r4, #0]
 8009e76:	b91e      	cbnz	r6, 8009e80 <_printf_i+0x1a4>
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	f023 0320 	bic.w	r3, r3, #32
 8009e7e:	6023      	str	r3, [r4, #0]
 8009e80:	2310      	movs	r3, #16
 8009e82:	e7a7      	b.n	8009dd4 <_printf_i+0xf8>
 8009e84:	4824      	ldr	r0, [pc, #144]	; (8009f18 <_printf_i+0x23c>)
 8009e86:	e7e4      	b.n	8009e52 <_printf_i+0x176>
 8009e88:	4615      	mov	r5, r2
 8009e8a:	e7bd      	b.n	8009e08 <_printf_i+0x12c>
 8009e8c:	682b      	ldr	r3, [r5, #0]
 8009e8e:	6826      	ldr	r6, [r4, #0]
 8009e90:	6961      	ldr	r1, [r4, #20]
 8009e92:	1d18      	adds	r0, r3, #4
 8009e94:	6028      	str	r0, [r5, #0]
 8009e96:	0635      	lsls	r5, r6, #24
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	d501      	bpl.n	8009ea0 <_printf_i+0x1c4>
 8009e9c:	6019      	str	r1, [r3, #0]
 8009e9e:	e002      	b.n	8009ea6 <_printf_i+0x1ca>
 8009ea0:	0670      	lsls	r0, r6, #25
 8009ea2:	d5fb      	bpl.n	8009e9c <_printf_i+0x1c0>
 8009ea4:	8019      	strh	r1, [r3, #0]
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	6123      	str	r3, [r4, #16]
 8009eaa:	4615      	mov	r5, r2
 8009eac:	e7bc      	b.n	8009e28 <_printf_i+0x14c>
 8009eae:	682b      	ldr	r3, [r5, #0]
 8009eb0:	1d1a      	adds	r2, r3, #4
 8009eb2:	602a      	str	r2, [r5, #0]
 8009eb4:	681d      	ldr	r5, [r3, #0]
 8009eb6:	6862      	ldr	r2, [r4, #4]
 8009eb8:	2100      	movs	r1, #0
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f7f6 f9a0 	bl	8000200 <memchr>
 8009ec0:	b108      	cbz	r0, 8009ec6 <_printf_i+0x1ea>
 8009ec2:	1b40      	subs	r0, r0, r5
 8009ec4:	6060      	str	r0, [r4, #4]
 8009ec6:	6863      	ldr	r3, [r4, #4]
 8009ec8:	6123      	str	r3, [r4, #16]
 8009eca:	2300      	movs	r3, #0
 8009ecc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ed0:	e7aa      	b.n	8009e28 <_printf_i+0x14c>
 8009ed2:	6923      	ldr	r3, [r4, #16]
 8009ed4:	462a      	mov	r2, r5
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	4640      	mov	r0, r8
 8009eda:	47d0      	blx	sl
 8009edc:	3001      	adds	r0, #1
 8009ede:	d0ad      	beq.n	8009e3c <_printf_i+0x160>
 8009ee0:	6823      	ldr	r3, [r4, #0]
 8009ee2:	079b      	lsls	r3, r3, #30
 8009ee4:	d413      	bmi.n	8009f0e <_printf_i+0x232>
 8009ee6:	68e0      	ldr	r0, [r4, #12]
 8009ee8:	9b03      	ldr	r3, [sp, #12]
 8009eea:	4298      	cmp	r0, r3
 8009eec:	bfb8      	it	lt
 8009eee:	4618      	movlt	r0, r3
 8009ef0:	e7a6      	b.n	8009e40 <_printf_i+0x164>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	4632      	mov	r2, r6
 8009ef6:	4649      	mov	r1, r9
 8009ef8:	4640      	mov	r0, r8
 8009efa:	47d0      	blx	sl
 8009efc:	3001      	adds	r0, #1
 8009efe:	d09d      	beq.n	8009e3c <_printf_i+0x160>
 8009f00:	3501      	adds	r5, #1
 8009f02:	68e3      	ldr	r3, [r4, #12]
 8009f04:	9903      	ldr	r1, [sp, #12]
 8009f06:	1a5b      	subs	r3, r3, r1
 8009f08:	42ab      	cmp	r3, r5
 8009f0a:	dcf2      	bgt.n	8009ef2 <_printf_i+0x216>
 8009f0c:	e7eb      	b.n	8009ee6 <_printf_i+0x20a>
 8009f0e:	2500      	movs	r5, #0
 8009f10:	f104 0619 	add.w	r6, r4, #25
 8009f14:	e7f5      	b.n	8009f02 <_printf_i+0x226>
 8009f16:	bf00      	nop
 8009f18:	0800a9bb 	.word	0x0800a9bb
 8009f1c:	0800a9cc 	.word	0x0800a9cc

08009f20 <__sflush_r>:
 8009f20:	898a      	ldrh	r2, [r1, #12]
 8009f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f26:	4605      	mov	r5, r0
 8009f28:	0710      	lsls	r0, r2, #28
 8009f2a:	460c      	mov	r4, r1
 8009f2c:	d458      	bmi.n	8009fe0 <__sflush_r+0xc0>
 8009f2e:	684b      	ldr	r3, [r1, #4]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	dc05      	bgt.n	8009f40 <__sflush_r+0x20>
 8009f34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	dc02      	bgt.n	8009f40 <__sflush_r+0x20>
 8009f3a:	2000      	movs	r0, #0
 8009f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f42:	2e00      	cmp	r6, #0
 8009f44:	d0f9      	beq.n	8009f3a <__sflush_r+0x1a>
 8009f46:	2300      	movs	r3, #0
 8009f48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009f4c:	682f      	ldr	r7, [r5, #0]
 8009f4e:	6a21      	ldr	r1, [r4, #32]
 8009f50:	602b      	str	r3, [r5, #0]
 8009f52:	d032      	beq.n	8009fba <__sflush_r+0x9a>
 8009f54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	075a      	lsls	r2, r3, #29
 8009f5a:	d505      	bpl.n	8009f68 <__sflush_r+0x48>
 8009f5c:	6863      	ldr	r3, [r4, #4]
 8009f5e:	1ac0      	subs	r0, r0, r3
 8009f60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f62:	b10b      	cbz	r3, 8009f68 <__sflush_r+0x48>
 8009f64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f66:	1ac0      	subs	r0, r0, r3
 8009f68:	2300      	movs	r3, #0
 8009f6a:	4602      	mov	r2, r0
 8009f6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f6e:	6a21      	ldr	r1, [r4, #32]
 8009f70:	4628      	mov	r0, r5
 8009f72:	47b0      	blx	r6
 8009f74:	1c43      	adds	r3, r0, #1
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	d106      	bne.n	8009f88 <__sflush_r+0x68>
 8009f7a:	6829      	ldr	r1, [r5, #0]
 8009f7c:	291d      	cmp	r1, #29
 8009f7e:	d82b      	bhi.n	8009fd8 <__sflush_r+0xb8>
 8009f80:	4a29      	ldr	r2, [pc, #164]	; (800a028 <__sflush_r+0x108>)
 8009f82:	410a      	asrs	r2, r1
 8009f84:	07d6      	lsls	r6, r2, #31
 8009f86:	d427      	bmi.n	8009fd8 <__sflush_r+0xb8>
 8009f88:	2200      	movs	r2, #0
 8009f8a:	6062      	str	r2, [r4, #4]
 8009f8c:	04d9      	lsls	r1, r3, #19
 8009f8e:	6922      	ldr	r2, [r4, #16]
 8009f90:	6022      	str	r2, [r4, #0]
 8009f92:	d504      	bpl.n	8009f9e <__sflush_r+0x7e>
 8009f94:	1c42      	adds	r2, r0, #1
 8009f96:	d101      	bne.n	8009f9c <__sflush_r+0x7c>
 8009f98:	682b      	ldr	r3, [r5, #0]
 8009f9a:	b903      	cbnz	r3, 8009f9e <__sflush_r+0x7e>
 8009f9c:	6560      	str	r0, [r4, #84]	; 0x54
 8009f9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fa0:	602f      	str	r7, [r5, #0]
 8009fa2:	2900      	cmp	r1, #0
 8009fa4:	d0c9      	beq.n	8009f3a <__sflush_r+0x1a>
 8009fa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009faa:	4299      	cmp	r1, r3
 8009fac:	d002      	beq.n	8009fb4 <__sflush_r+0x94>
 8009fae:	4628      	mov	r0, r5
 8009fb0:	f7ff fbce 	bl	8009750 <_free_r>
 8009fb4:	2000      	movs	r0, #0
 8009fb6:	6360      	str	r0, [r4, #52]	; 0x34
 8009fb8:	e7c0      	b.n	8009f3c <__sflush_r+0x1c>
 8009fba:	2301      	movs	r3, #1
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	47b0      	blx	r6
 8009fc0:	1c41      	adds	r1, r0, #1
 8009fc2:	d1c8      	bne.n	8009f56 <__sflush_r+0x36>
 8009fc4:	682b      	ldr	r3, [r5, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d0c5      	beq.n	8009f56 <__sflush_r+0x36>
 8009fca:	2b1d      	cmp	r3, #29
 8009fcc:	d001      	beq.n	8009fd2 <__sflush_r+0xb2>
 8009fce:	2b16      	cmp	r3, #22
 8009fd0:	d101      	bne.n	8009fd6 <__sflush_r+0xb6>
 8009fd2:	602f      	str	r7, [r5, #0]
 8009fd4:	e7b1      	b.n	8009f3a <__sflush_r+0x1a>
 8009fd6:	89a3      	ldrh	r3, [r4, #12]
 8009fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fdc:	81a3      	strh	r3, [r4, #12]
 8009fde:	e7ad      	b.n	8009f3c <__sflush_r+0x1c>
 8009fe0:	690f      	ldr	r7, [r1, #16]
 8009fe2:	2f00      	cmp	r7, #0
 8009fe4:	d0a9      	beq.n	8009f3a <__sflush_r+0x1a>
 8009fe6:	0793      	lsls	r3, r2, #30
 8009fe8:	680e      	ldr	r6, [r1, #0]
 8009fea:	bf08      	it	eq
 8009fec:	694b      	ldreq	r3, [r1, #20]
 8009fee:	600f      	str	r7, [r1, #0]
 8009ff0:	bf18      	it	ne
 8009ff2:	2300      	movne	r3, #0
 8009ff4:	eba6 0807 	sub.w	r8, r6, r7
 8009ff8:	608b      	str	r3, [r1, #8]
 8009ffa:	f1b8 0f00 	cmp.w	r8, #0
 8009ffe:	dd9c      	ble.n	8009f3a <__sflush_r+0x1a>
 800a000:	6a21      	ldr	r1, [r4, #32]
 800a002:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a004:	4643      	mov	r3, r8
 800a006:	463a      	mov	r2, r7
 800a008:	4628      	mov	r0, r5
 800a00a:	47b0      	blx	r6
 800a00c:	2800      	cmp	r0, #0
 800a00e:	dc06      	bgt.n	800a01e <__sflush_r+0xfe>
 800a010:	89a3      	ldrh	r3, [r4, #12]
 800a012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a016:	81a3      	strh	r3, [r4, #12]
 800a018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a01c:	e78e      	b.n	8009f3c <__sflush_r+0x1c>
 800a01e:	4407      	add	r7, r0
 800a020:	eba8 0800 	sub.w	r8, r8, r0
 800a024:	e7e9      	b.n	8009ffa <__sflush_r+0xda>
 800a026:	bf00      	nop
 800a028:	dfbffffe 	.word	0xdfbffffe

0800a02c <_fflush_r>:
 800a02c:	b538      	push	{r3, r4, r5, lr}
 800a02e:	690b      	ldr	r3, [r1, #16]
 800a030:	4605      	mov	r5, r0
 800a032:	460c      	mov	r4, r1
 800a034:	b913      	cbnz	r3, 800a03c <_fflush_r+0x10>
 800a036:	2500      	movs	r5, #0
 800a038:	4628      	mov	r0, r5
 800a03a:	bd38      	pop	{r3, r4, r5, pc}
 800a03c:	b118      	cbz	r0, 800a046 <_fflush_r+0x1a>
 800a03e:	6a03      	ldr	r3, [r0, #32]
 800a040:	b90b      	cbnz	r3, 800a046 <_fflush_r+0x1a>
 800a042:	f7ff f9e7 	bl	8009414 <__sinit>
 800a046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0f3      	beq.n	800a036 <_fflush_r+0xa>
 800a04e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a050:	07d0      	lsls	r0, r2, #31
 800a052:	d404      	bmi.n	800a05e <_fflush_r+0x32>
 800a054:	0599      	lsls	r1, r3, #22
 800a056:	d402      	bmi.n	800a05e <_fflush_r+0x32>
 800a058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a05a:	f7ff fb4a 	bl	80096f2 <__retarget_lock_acquire_recursive>
 800a05e:	4628      	mov	r0, r5
 800a060:	4621      	mov	r1, r4
 800a062:	f7ff ff5d 	bl	8009f20 <__sflush_r>
 800a066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a068:	07da      	lsls	r2, r3, #31
 800a06a:	4605      	mov	r5, r0
 800a06c:	d4e4      	bmi.n	800a038 <_fflush_r+0xc>
 800a06e:	89a3      	ldrh	r3, [r4, #12]
 800a070:	059b      	lsls	r3, r3, #22
 800a072:	d4e1      	bmi.n	800a038 <_fflush_r+0xc>
 800a074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a076:	f7ff fb3d 	bl	80096f4 <__retarget_lock_release_recursive>
 800a07a:	e7dd      	b.n	800a038 <_fflush_r+0xc>

0800a07c <fiprintf>:
 800a07c:	b40e      	push	{r1, r2, r3}
 800a07e:	b503      	push	{r0, r1, lr}
 800a080:	4601      	mov	r1, r0
 800a082:	ab03      	add	r3, sp, #12
 800a084:	4805      	ldr	r0, [pc, #20]	; (800a09c <fiprintf+0x20>)
 800a086:	f853 2b04 	ldr.w	r2, [r3], #4
 800a08a:	6800      	ldr	r0, [r0, #0]
 800a08c:	9301      	str	r3, [sp, #4]
 800a08e:	f000 f891 	bl	800a1b4 <_vfiprintf_r>
 800a092:	b002      	add	sp, #8
 800a094:	f85d eb04 	ldr.w	lr, [sp], #4
 800a098:	b003      	add	sp, #12
 800a09a:	4770      	bx	lr
 800a09c:	20000068 	.word	0x20000068

0800a0a0 <memmove>:
 800a0a0:	4288      	cmp	r0, r1
 800a0a2:	b510      	push	{r4, lr}
 800a0a4:	eb01 0402 	add.w	r4, r1, r2
 800a0a8:	d902      	bls.n	800a0b0 <memmove+0x10>
 800a0aa:	4284      	cmp	r4, r0
 800a0ac:	4623      	mov	r3, r4
 800a0ae:	d807      	bhi.n	800a0c0 <memmove+0x20>
 800a0b0:	1e43      	subs	r3, r0, #1
 800a0b2:	42a1      	cmp	r1, r4
 800a0b4:	d008      	beq.n	800a0c8 <memmove+0x28>
 800a0b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0be:	e7f8      	b.n	800a0b2 <memmove+0x12>
 800a0c0:	4402      	add	r2, r0
 800a0c2:	4601      	mov	r1, r0
 800a0c4:	428a      	cmp	r2, r1
 800a0c6:	d100      	bne.n	800a0ca <memmove+0x2a>
 800a0c8:	bd10      	pop	{r4, pc}
 800a0ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0d2:	e7f7      	b.n	800a0c4 <memmove+0x24>

0800a0d4 <_sbrk_r>:
 800a0d4:	b538      	push	{r3, r4, r5, lr}
 800a0d6:	4d06      	ldr	r5, [pc, #24]	; (800a0f0 <_sbrk_r+0x1c>)
 800a0d8:	2300      	movs	r3, #0
 800a0da:	4604      	mov	r4, r0
 800a0dc:	4608      	mov	r0, r1
 800a0de:	602b      	str	r3, [r5, #0]
 800a0e0:	f7f7 f87e 	bl	80011e0 <_sbrk>
 800a0e4:	1c43      	adds	r3, r0, #1
 800a0e6:	d102      	bne.n	800a0ee <_sbrk_r+0x1a>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	b103      	cbz	r3, 800a0ee <_sbrk_r+0x1a>
 800a0ec:	6023      	str	r3, [r4, #0]
 800a0ee:	bd38      	pop	{r3, r4, r5, pc}
 800a0f0:	20001c90 	.word	0x20001c90

0800a0f4 <abort>:
 800a0f4:	b508      	push	{r3, lr}
 800a0f6:	2006      	movs	r0, #6
 800a0f8:	f000 fa34 	bl	800a564 <raise>
 800a0fc:	2001      	movs	r0, #1
 800a0fe:	f7f6 fff8 	bl	80010f2 <_exit>

0800a102 <_realloc_r>:
 800a102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a106:	4680      	mov	r8, r0
 800a108:	4614      	mov	r4, r2
 800a10a:	460e      	mov	r6, r1
 800a10c:	b921      	cbnz	r1, 800a118 <_realloc_r+0x16>
 800a10e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a112:	4611      	mov	r1, r2
 800a114:	f7ff bb90 	b.w	8009838 <_malloc_r>
 800a118:	b92a      	cbnz	r2, 800a126 <_realloc_r+0x24>
 800a11a:	f7ff fb19 	bl	8009750 <_free_r>
 800a11e:	4625      	mov	r5, r4
 800a120:	4628      	mov	r0, r5
 800a122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a126:	f000 fa39 	bl	800a59c <_malloc_usable_size_r>
 800a12a:	4284      	cmp	r4, r0
 800a12c:	4607      	mov	r7, r0
 800a12e:	d802      	bhi.n	800a136 <_realloc_r+0x34>
 800a130:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a134:	d812      	bhi.n	800a15c <_realloc_r+0x5a>
 800a136:	4621      	mov	r1, r4
 800a138:	4640      	mov	r0, r8
 800a13a:	f7ff fb7d 	bl	8009838 <_malloc_r>
 800a13e:	4605      	mov	r5, r0
 800a140:	2800      	cmp	r0, #0
 800a142:	d0ed      	beq.n	800a120 <_realloc_r+0x1e>
 800a144:	42bc      	cmp	r4, r7
 800a146:	4622      	mov	r2, r4
 800a148:	4631      	mov	r1, r6
 800a14a:	bf28      	it	cs
 800a14c:	463a      	movcs	r2, r7
 800a14e:	f7ff fad2 	bl	80096f6 <memcpy>
 800a152:	4631      	mov	r1, r6
 800a154:	4640      	mov	r0, r8
 800a156:	f7ff fafb 	bl	8009750 <_free_r>
 800a15a:	e7e1      	b.n	800a120 <_realloc_r+0x1e>
 800a15c:	4635      	mov	r5, r6
 800a15e:	e7df      	b.n	800a120 <_realloc_r+0x1e>

0800a160 <__sfputc_r>:
 800a160:	6893      	ldr	r3, [r2, #8]
 800a162:	3b01      	subs	r3, #1
 800a164:	2b00      	cmp	r3, #0
 800a166:	b410      	push	{r4}
 800a168:	6093      	str	r3, [r2, #8]
 800a16a:	da08      	bge.n	800a17e <__sfputc_r+0x1e>
 800a16c:	6994      	ldr	r4, [r2, #24]
 800a16e:	42a3      	cmp	r3, r4
 800a170:	db01      	blt.n	800a176 <__sfputc_r+0x16>
 800a172:	290a      	cmp	r1, #10
 800a174:	d103      	bne.n	800a17e <__sfputc_r+0x1e>
 800a176:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a17a:	f000 b935 	b.w	800a3e8 <__swbuf_r>
 800a17e:	6813      	ldr	r3, [r2, #0]
 800a180:	1c58      	adds	r0, r3, #1
 800a182:	6010      	str	r0, [r2, #0]
 800a184:	7019      	strb	r1, [r3, #0]
 800a186:	4608      	mov	r0, r1
 800a188:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a18c:	4770      	bx	lr

0800a18e <__sfputs_r>:
 800a18e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a190:	4606      	mov	r6, r0
 800a192:	460f      	mov	r7, r1
 800a194:	4614      	mov	r4, r2
 800a196:	18d5      	adds	r5, r2, r3
 800a198:	42ac      	cmp	r4, r5
 800a19a:	d101      	bne.n	800a1a0 <__sfputs_r+0x12>
 800a19c:	2000      	movs	r0, #0
 800a19e:	e007      	b.n	800a1b0 <__sfputs_r+0x22>
 800a1a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1a4:	463a      	mov	r2, r7
 800a1a6:	4630      	mov	r0, r6
 800a1a8:	f7ff ffda 	bl	800a160 <__sfputc_r>
 800a1ac:	1c43      	adds	r3, r0, #1
 800a1ae:	d1f3      	bne.n	800a198 <__sfputs_r+0xa>
 800a1b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1b4 <_vfiprintf_r>:
 800a1b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1b8:	460d      	mov	r5, r1
 800a1ba:	b09d      	sub	sp, #116	; 0x74
 800a1bc:	4614      	mov	r4, r2
 800a1be:	4698      	mov	r8, r3
 800a1c0:	4606      	mov	r6, r0
 800a1c2:	b118      	cbz	r0, 800a1cc <_vfiprintf_r+0x18>
 800a1c4:	6a03      	ldr	r3, [r0, #32]
 800a1c6:	b90b      	cbnz	r3, 800a1cc <_vfiprintf_r+0x18>
 800a1c8:	f7ff f924 	bl	8009414 <__sinit>
 800a1cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1ce:	07d9      	lsls	r1, r3, #31
 800a1d0:	d405      	bmi.n	800a1de <_vfiprintf_r+0x2a>
 800a1d2:	89ab      	ldrh	r3, [r5, #12]
 800a1d4:	059a      	lsls	r2, r3, #22
 800a1d6:	d402      	bmi.n	800a1de <_vfiprintf_r+0x2a>
 800a1d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1da:	f7ff fa8a 	bl	80096f2 <__retarget_lock_acquire_recursive>
 800a1de:	89ab      	ldrh	r3, [r5, #12]
 800a1e0:	071b      	lsls	r3, r3, #28
 800a1e2:	d501      	bpl.n	800a1e8 <_vfiprintf_r+0x34>
 800a1e4:	692b      	ldr	r3, [r5, #16]
 800a1e6:	b99b      	cbnz	r3, 800a210 <_vfiprintf_r+0x5c>
 800a1e8:	4629      	mov	r1, r5
 800a1ea:	4630      	mov	r0, r6
 800a1ec:	f000 f93a 	bl	800a464 <__swsetup_r>
 800a1f0:	b170      	cbz	r0, 800a210 <_vfiprintf_r+0x5c>
 800a1f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1f4:	07dc      	lsls	r4, r3, #31
 800a1f6:	d504      	bpl.n	800a202 <_vfiprintf_r+0x4e>
 800a1f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1fc:	b01d      	add	sp, #116	; 0x74
 800a1fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a202:	89ab      	ldrh	r3, [r5, #12]
 800a204:	0598      	lsls	r0, r3, #22
 800a206:	d4f7      	bmi.n	800a1f8 <_vfiprintf_r+0x44>
 800a208:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a20a:	f7ff fa73 	bl	80096f4 <__retarget_lock_release_recursive>
 800a20e:	e7f3      	b.n	800a1f8 <_vfiprintf_r+0x44>
 800a210:	2300      	movs	r3, #0
 800a212:	9309      	str	r3, [sp, #36]	; 0x24
 800a214:	2320      	movs	r3, #32
 800a216:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a21a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a21e:	2330      	movs	r3, #48	; 0x30
 800a220:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a3d4 <_vfiprintf_r+0x220>
 800a224:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a228:	f04f 0901 	mov.w	r9, #1
 800a22c:	4623      	mov	r3, r4
 800a22e:	469a      	mov	sl, r3
 800a230:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a234:	b10a      	cbz	r2, 800a23a <_vfiprintf_r+0x86>
 800a236:	2a25      	cmp	r2, #37	; 0x25
 800a238:	d1f9      	bne.n	800a22e <_vfiprintf_r+0x7a>
 800a23a:	ebba 0b04 	subs.w	fp, sl, r4
 800a23e:	d00b      	beq.n	800a258 <_vfiprintf_r+0xa4>
 800a240:	465b      	mov	r3, fp
 800a242:	4622      	mov	r2, r4
 800a244:	4629      	mov	r1, r5
 800a246:	4630      	mov	r0, r6
 800a248:	f7ff ffa1 	bl	800a18e <__sfputs_r>
 800a24c:	3001      	adds	r0, #1
 800a24e:	f000 80a9 	beq.w	800a3a4 <_vfiprintf_r+0x1f0>
 800a252:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a254:	445a      	add	r2, fp
 800a256:	9209      	str	r2, [sp, #36]	; 0x24
 800a258:	f89a 3000 	ldrb.w	r3, [sl]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	f000 80a1 	beq.w	800a3a4 <_vfiprintf_r+0x1f0>
 800a262:	2300      	movs	r3, #0
 800a264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a268:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a26c:	f10a 0a01 	add.w	sl, sl, #1
 800a270:	9304      	str	r3, [sp, #16]
 800a272:	9307      	str	r3, [sp, #28]
 800a274:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a278:	931a      	str	r3, [sp, #104]	; 0x68
 800a27a:	4654      	mov	r4, sl
 800a27c:	2205      	movs	r2, #5
 800a27e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a282:	4854      	ldr	r0, [pc, #336]	; (800a3d4 <_vfiprintf_r+0x220>)
 800a284:	f7f5 ffbc 	bl	8000200 <memchr>
 800a288:	9a04      	ldr	r2, [sp, #16]
 800a28a:	b9d8      	cbnz	r0, 800a2c4 <_vfiprintf_r+0x110>
 800a28c:	06d1      	lsls	r1, r2, #27
 800a28e:	bf44      	itt	mi
 800a290:	2320      	movmi	r3, #32
 800a292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a296:	0713      	lsls	r3, r2, #28
 800a298:	bf44      	itt	mi
 800a29a:	232b      	movmi	r3, #43	; 0x2b
 800a29c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a2a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a2a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a2a6:	d015      	beq.n	800a2d4 <_vfiprintf_r+0x120>
 800a2a8:	9a07      	ldr	r2, [sp, #28]
 800a2aa:	4654      	mov	r4, sl
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	f04f 0c0a 	mov.w	ip, #10
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2b8:	3b30      	subs	r3, #48	; 0x30
 800a2ba:	2b09      	cmp	r3, #9
 800a2bc:	d94d      	bls.n	800a35a <_vfiprintf_r+0x1a6>
 800a2be:	b1b0      	cbz	r0, 800a2ee <_vfiprintf_r+0x13a>
 800a2c0:	9207      	str	r2, [sp, #28]
 800a2c2:	e014      	b.n	800a2ee <_vfiprintf_r+0x13a>
 800a2c4:	eba0 0308 	sub.w	r3, r0, r8
 800a2c8:	fa09 f303 	lsl.w	r3, r9, r3
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	9304      	str	r3, [sp, #16]
 800a2d0:	46a2      	mov	sl, r4
 800a2d2:	e7d2      	b.n	800a27a <_vfiprintf_r+0xc6>
 800a2d4:	9b03      	ldr	r3, [sp, #12]
 800a2d6:	1d19      	adds	r1, r3, #4
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	9103      	str	r1, [sp, #12]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	bfbb      	ittet	lt
 800a2e0:	425b      	neglt	r3, r3
 800a2e2:	f042 0202 	orrlt.w	r2, r2, #2
 800a2e6:	9307      	strge	r3, [sp, #28]
 800a2e8:	9307      	strlt	r3, [sp, #28]
 800a2ea:	bfb8      	it	lt
 800a2ec:	9204      	strlt	r2, [sp, #16]
 800a2ee:	7823      	ldrb	r3, [r4, #0]
 800a2f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a2f2:	d10c      	bne.n	800a30e <_vfiprintf_r+0x15a>
 800a2f4:	7863      	ldrb	r3, [r4, #1]
 800a2f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a2f8:	d134      	bne.n	800a364 <_vfiprintf_r+0x1b0>
 800a2fa:	9b03      	ldr	r3, [sp, #12]
 800a2fc:	1d1a      	adds	r2, r3, #4
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	9203      	str	r2, [sp, #12]
 800a302:	2b00      	cmp	r3, #0
 800a304:	bfb8      	it	lt
 800a306:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a30a:	3402      	adds	r4, #2
 800a30c:	9305      	str	r3, [sp, #20]
 800a30e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a3e4 <_vfiprintf_r+0x230>
 800a312:	7821      	ldrb	r1, [r4, #0]
 800a314:	2203      	movs	r2, #3
 800a316:	4650      	mov	r0, sl
 800a318:	f7f5 ff72 	bl	8000200 <memchr>
 800a31c:	b138      	cbz	r0, 800a32e <_vfiprintf_r+0x17a>
 800a31e:	9b04      	ldr	r3, [sp, #16]
 800a320:	eba0 000a 	sub.w	r0, r0, sl
 800a324:	2240      	movs	r2, #64	; 0x40
 800a326:	4082      	lsls	r2, r0
 800a328:	4313      	orrs	r3, r2
 800a32a:	3401      	adds	r4, #1
 800a32c:	9304      	str	r3, [sp, #16]
 800a32e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a332:	4829      	ldr	r0, [pc, #164]	; (800a3d8 <_vfiprintf_r+0x224>)
 800a334:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a338:	2206      	movs	r2, #6
 800a33a:	f7f5 ff61 	bl	8000200 <memchr>
 800a33e:	2800      	cmp	r0, #0
 800a340:	d03f      	beq.n	800a3c2 <_vfiprintf_r+0x20e>
 800a342:	4b26      	ldr	r3, [pc, #152]	; (800a3dc <_vfiprintf_r+0x228>)
 800a344:	bb1b      	cbnz	r3, 800a38e <_vfiprintf_r+0x1da>
 800a346:	9b03      	ldr	r3, [sp, #12]
 800a348:	3307      	adds	r3, #7
 800a34a:	f023 0307 	bic.w	r3, r3, #7
 800a34e:	3308      	adds	r3, #8
 800a350:	9303      	str	r3, [sp, #12]
 800a352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a354:	443b      	add	r3, r7
 800a356:	9309      	str	r3, [sp, #36]	; 0x24
 800a358:	e768      	b.n	800a22c <_vfiprintf_r+0x78>
 800a35a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a35e:	460c      	mov	r4, r1
 800a360:	2001      	movs	r0, #1
 800a362:	e7a6      	b.n	800a2b2 <_vfiprintf_r+0xfe>
 800a364:	2300      	movs	r3, #0
 800a366:	3401      	adds	r4, #1
 800a368:	9305      	str	r3, [sp, #20]
 800a36a:	4619      	mov	r1, r3
 800a36c:	f04f 0c0a 	mov.w	ip, #10
 800a370:	4620      	mov	r0, r4
 800a372:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a376:	3a30      	subs	r2, #48	; 0x30
 800a378:	2a09      	cmp	r2, #9
 800a37a:	d903      	bls.n	800a384 <_vfiprintf_r+0x1d0>
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d0c6      	beq.n	800a30e <_vfiprintf_r+0x15a>
 800a380:	9105      	str	r1, [sp, #20]
 800a382:	e7c4      	b.n	800a30e <_vfiprintf_r+0x15a>
 800a384:	fb0c 2101 	mla	r1, ip, r1, r2
 800a388:	4604      	mov	r4, r0
 800a38a:	2301      	movs	r3, #1
 800a38c:	e7f0      	b.n	800a370 <_vfiprintf_r+0x1bc>
 800a38e:	ab03      	add	r3, sp, #12
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	462a      	mov	r2, r5
 800a394:	4b12      	ldr	r3, [pc, #72]	; (800a3e0 <_vfiprintf_r+0x22c>)
 800a396:	a904      	add	r1, sp, #16
 800a398:	4630      	mov	r0, r6
 800a39a:	f3af 8000 	nop.w
 800a39e:	4607      	mov	r7, r0
 800a3a0:	1c78      	adds	r0, r7, #1
 800a3a2:	d1d6      	bne.n	800a352 <_vfiprintf_r+0x19e>
 800a3a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3a6:	07d9      	lsls	r1, r3, #31
 800a3a8:	d405      	bmi.n	800a3b6 <_vfiprintf_r+0x202>
 800a3aa:	89ab      	ldrh	r3, [r5, #12]
 800a3ac:	059a      	lsls	r2, r3, #22
 800a3ae:	d402      	bmi.n	800a3b6 <_vfiprintf_r+0x202>
 800a3b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3b2:	f7ff f99f 	bl	80096f4 <__retarget_lock_release_recursive>
 800a3b6:	89ab      	ldrh	r3, [r5, #12]
 800a3b8:	065b      	lsls	r3, r3, #25
 800a3ba:	f53f af1d 	bmi.w	800a1f8 <_vfiprintf_r+0x44>
 800a3be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3c0:	e71c      	b.n	800a1fc <_vfiprintf_r+0x48>
 800a3c2:	ab03      	add	r3, sp, #12
 800a3c4:	9300      	str	r3, [sp, #0]
 800a3c6:	462a      	mov	r2, r5
 800a3c8:	4b05      	ldr	r3, [pc, #20]	; (800a3e0 <_vfiprintf_r+0x22c>)
 800a3ca:	a904      	add	r1, sp, #16
 800a3cc:	4630      	mov	r0, r6
 800a3ce:	f7ff fc85 	bl	8009cdc <_printf_i>
 800a3d2:	e7e4      	b.n	800a39e <_vfiprintf_r+0x1ea>
 800a3d4:	0800a9aa 	.word	0x0800a9aa
 800a3d8:	0800a9b4 	.word	0x0800a9b4
 800a3dc:	00000000 	.word	0x00000000
 800a3e0:	0800a18f 	.word	0x0800a18f
 800a3e4:	0800a9b0 	.word	0x0800a9b0

0800a3e8 <__swbuf_r>:
 800a3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ea:	460e      	mov	r6, r1
 800a3ec:	4614      	mov	r4, r2
 800a3ee:	4605      	mov	r5, r0
 800a3f0:	b118      	cbz	r0, 800a3fa <__swbuf_r+0x12>
 800a3f2:	6a03      	ldr	r3, [r0, #32]
 800a3f4:	b90b      	cbnz	r3, 800a3fa <__swbuf_r+0x12>
 800a3f6:	f7ff f80d 	bl	8009414 <__sinit>
 800a3fa:	69a3      	ldr	r3, [r4, #24]
 800a3fc:	60a3      	str	r3, [r4, #8]
 800a3fe:	89a3      	ldrh	r3, [r4, #12]
 800a400:	071a      	lsls	r2, r3, #28
 800a402:	d525      	bpl.n	800a450 <__swbuf_r+0x68>
 800a404:	6923      	ldr	r3, [r4, #16]
 800a406:	b31b      	cbz	r3, 800a450 <__swbuf_r+0x68>
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	6922      	ldr	r2, [r4, #16]
 800a40c:	1a98      	subs	r0, r3, r2
 800a40e:	6963      	ldr	r3, [r4, #20]
 800a410:	b2f6      	uxtb	r6, r6
 800a412:	4283      	cmp	r3, r0
 800a414:	4637      	mov	r7, r6
 800a416:	dc04      	bgt.n	800a422 <__swbuf_r+0x3a>
 800a418:	4621      	mov	r1, r4
 800a41a:	4628      	mov	r0, r5
 800a41c:	f7ff fe06 	bl	800a02c <_fflush_r>
 800a420:	b9e0      	cbnz	r0, 800a45c <__swbuf_r+0x74>
 800a422:	68a3      	ldr	r3, [r4, #8]
 800a424:	3b01      	subs	r3, #1
 800a426:	60a3      	str	r3, [r4, #8]
 800a428:	6823      	ldr	r3, [r4, #0]
 800a42a:	1c5a      	adds	r2, r3, #1
 800a42c:	6022      	str	r2, [r4, #0]
 800a42e:	701e      	strb	r6, [r3, #0]
 800a430:	6962      	ldr	r2, [r4, #20]
 800a432:	1c43      	adds	r3, r0, #1
 800a434:	429a      	cmp	r2, r3
 800a436:	d004      	beq.n	800a442 <__swbuf_r+0x5a>
 800a438:	89a3      	ldrh	r3, [r4, #12]
 800a43a:	07db      	lsls	r3, r3, #31
 800a43c:	d506      	bpl.n	800a44c <__swbuf_r+0x64>
 800a43e:	2e0a      	cmp	r6, #10
 800a440:	d104      	bne.n	800a44c <__swbuf_r+0x64>
 800a442:	4621      	mov	r1, r4
 800a444:	4628      	mov	r0, r5
 800a446:	f7ff fdf1 	bl	800a02c <_fflush_r>
 800a44a:	b938      	cbnz	r0, 800a45c <__swbuf_r+0x74>
 800a44c:	4638      	mov	r0, r7
 800a44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a450:	4621      	mov	r1, r4
 800a452:	4628      	mov	r0, r5
 800a454:	f000 f806 	bl	800a464 <__swsetup_r>
 800a458:	2800      	cmp	r0, #0
 800a45a:	d0d5      	beq.n	800a408 <__swbuf_r+0x20>
 800a45c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a460:	e7f4      	b.n	800a44c <__swbuf_r+0x64>
	...

0800a464 <__swsetup_r>:
 800a464:	b538      	push	{r3, r4, r5, lr}
 800a466:	4b2a      	ldr	r3, [pc, #168]	; (800a510 <__swsetup_r+0xac>)
 800a468:	4605      	mov	r5, r0
 800a46a:	6818      	ldr	r0, [r3, #0]
 800a46c:	460c      	mov	r4, r1
 800a46e:	b118      	cbz	r0, 800a478 <__swsetup_r+0x14>
 800a470:	6a03      	ldr	r3, [r0, #32]
 800a472:	b90b      	cbnz	r3, 800a478 <__swsetup_r+0x14>
 800a474:	f7fe ffce 	bl	8009414 <__sinit>
 800a478:	89a3      	ldrh	r3, [r4, #12]
 800a47a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a47e:	0718      	lsls	r0, r3, #28
 800a480:	d422      	bmi.n	800a4c8 <__swsetup_r+0x64>
 800a482:	06d9      	lsls	r1, r3, #27
 800a484:	d407      	bmi.n	800a496 <__swsetup_r+0x32>
 800a486:	2309      	movs	r3, #9
 800a488:	602b      	str	r3, [r5, #0]
 800a48a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a48e:	81a3      	strh	r3, [r4, #12]
 800a490:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a494:	e034      	b.n	800a500 <__swsetup_r+0x9c>
 800a496:	0758      	lsls	r0, r3, #29
 800a498:	d512      	bpl.n	800a4c0 <__swsetup_r+0x5c>
 800a49a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a49c:	b141      	cbz	r1, 800a4b0 <__swsetup_r+0x4c>
 800a49e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4a2:	4299      	cmp	r1, r3
 800a4a4:	d002      	beq.n	800a4ac <__swsetup_r+0x48>
 800a4a6:	4628      	mov	r0, r5
 800a4a8:	f7ff f952 	bl	8009750 <_free_r>
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	6363      	str	r3, [r4, #52]	; 0x34
 800a4b0:	89a3      	ldrh	r3, [r4, #12]
 800a4b2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4b6:	81a3      	strh	r3, [r4, #12]
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	6063      	str	r3, [r4, #4]
 800a4bc:	6923      	ldr	r3, [r4, #16]
 800a4be:	6023      	str	r3, [r4, #0]
 800a4c0:	89a3      	ldrh	r3, [r4, #12]
 800a4c2:	f043 0308 	orr.w	r3, r3, #8
 800a4c6:	81a3      	strh	r3, [r4, #12]
 800a4c8:	6923      	ldr	r3, [r4, #16]
 800a4ca:	b94b      	cbnz	r3, 800a4e0 <__swsetup_r+0x7c>
 800a4cc:	89a3      	ldrh	r3, [r4, #12]
 800a4ce:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4d6:	d003      	beq.n	800a4e0 <__swsetup_r+0x7c>
 800a4d8:	4621      	mov	r1, r4
 800a4da:	4628      	mov	r0, r5
 800a4dc:	f000 f88c 	bl	800a5f8 <__smakebuf_r>
 800a4e0:	89a0      	ldrh	r0, [r4, #12]
 800a4e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4e6:	f010 0301 	ands.w	r3, r0, #1
 800a4ea:	d00a      	beq.n	800a502 <__swsetup_r+0x9e>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	60a3      	str	r3, [r4, #8]
 800a4f0:	6963      	ldr	r3, [r4, #20]
 800a4f2:	425b      	negs	r3, r3
 800a4f4:	61a3      	str	r3, [r4, #24]
 800a4f6:	6923      	ldr	r3, [r4, #16]
 800a4f8:	b943      	cbnz	r3, 800a50c <__swsetup_r+0xa8>
 800a4fa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4fe:	d1c4      	bne.n	800a48a <__swsetup_r+0x26>
 800a500:	bd38      	pop	{r3, r4, r5, pc}
 800a502:	0781      	lsls	r1, r0, #30
 800a504:	bf58      	it	pl
 800a506:	6963      	ldrpl	r3, [r4, #20]
 800a508:	60a3      	str	r3, [r4, #8]
 800a50a:	e7f4      	b.n	800a4f6 <__swsetup_r+0x92>
 800a50c:	2000      	movs	r0, #0
 800a50e:	e7f7      	b.n	800a500 <__swsetup_r+0x9c>
 800a510:	20000068 	.word	0x20000068

0800a514 <_raise_r>:
 800a514:	291f      	cmp	r1, #31
 800a516:	b538      	push	{r3, r4, r5, lr}
 800a518:	4604      	mov	r4, r0
 800a51a:	460d      	mov	r5, r1
 800a51c:	d904      	bls.n	800a528 <_raise_r+0x14>
 800a51e:	2316      	movs	r3, #22
 800a520:	6003      	str	r3, [r0, #0]
 800a522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a526:	bd38      	pop	{r3, r4, r5, pc}
 800a528:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a52a:	b112      	cbz	r2, 800a532 <_raise_r+0x1e>
 800a52c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a530:	b94b      	cbnz	r3, 800a546 <_raise_r+0x32>
 800a532:	4620      	mov	r0, r4
 800a534:	f000 f830 	bl	800a598 <_getpid_r>
 800a538:	462a      	mov	r2, r5
 800a53a:	4601      	mov	r1, r0
 800a53c:	4620      	mov	r0, r4
 800a53e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a542:	f000 b817 	b.w	800a574 <_kill_r>
 800a546:	2b01      	cmp	r3, #1
 800a548:	d00a      	beq.n	800a560 <_raise_r+0x4c>
 800a54a:	1c59      	adds	r1, r3, #1
 800a54c:	d103      	bne.n	800a556 <_raise_r+0x42>
 800a54e:	2316      	movs	r3, #22
 800a550:	6003      	str	r3, [r0, #0]
 800a552:	2001      	movs	r0, #1
 800a554:	e7e7      	b.n	800a526 <_raise_r+0x12>
 800a556:	2400      	movs	r4, #0
 800a558:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a55c:	4628      	mov	r0, r5
 800a55e:	4798      	blx	r3
 800a560:	2000      	movs	r0, #0
 800a562:	e7e0      	b.n	800a526 <_raise_r+0x12>

0800a564 <raise>:
 800a564:	4b02      	ldr	r3, [pc, #8]	; (800a570 <raise+0xc>)
 800a566:	4601      	mov	r1, r0
 800a568:	6818      	ldr	r0, [r3, #0]
 800a56a:	f7ff bfd3 	b.w	800a514 <_raise_r>
 800a56e:	bf00      	nop
 800a570:	20000068 	.word	0x20000068

0800a574 <_kill_r>:
 800a574:	b538      	push	{r3, r4, r5, lr}
 800a576:	4d07      	ldr	r5, [pc, #28]	; (800a594 <_kill_r+0x20>)
 800a578:	2300      	movs	r3, #0
 800a57a:	4604      	mov	r4, r0
 800a57c:	4608      	mov	r0, r1
 800a57e:	4611      	mov	r1, r2
 800a580:	602b      	str	r3, [r5, #0]
 800a582:	f7f6 fda6 	bl	80010d2 <_kill>
 800a586:	1c43      	adds	r3, r0, #1
 800a588:	d102      	bne.n	800a590 <_kill_r+0x1c>
 800a58a:	682b      	ldr	r3, [r5, #0]
 800a58c:	b103      	cbz	r3, 800a590 <_kill_r+0x1c>
 800a58e:	6023      	str	r3, [r4, #0]
 800a590:	bd38      	pop	{r3, r4, r5, pc}
 800a592:	bf00      	nop
 800a594:	20001c90 	.word	0x20001c90

0800a598 <_getpid_r>:
 800a598:	f7f6 bd93 	b.w	80010c2 <_getpid>

0800a59c <_malloc_usable_size_r>:
 800a59c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5a0:	1f18      	subs	r0, r3, #4
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	bfbc      	itt	lt
 800a5a6:	580b      	ldrlt	r3, [r1, r0]
 800a5a8:	18c0      	addlt	r0, r0, r3
 800a5aa:	4770      	bx	lr

0800a5ac <__swhatbuf_r>:
 800a5ac:	b570      	push	{r4, r5, r6, lr}
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5b4:	2900      	cmp	r1, #0
 800a5b6:	b096      	sub	sp, #88	; 0x58
 800a5b8:	4615      	mov	r5, r2
 800a5ba:	461e      	mov	r6, r3
 800a5bc:	da0d      	bge.n	800a5da <__swhatbuf_r+0x2e>
 800a5be:	89a3      	ldrh	r3, [r4, #12]
 800a5c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a5c4:	f04f 0100 	mov.w	r1, #0
 800a5c8:	bf0c      	ite	eq
 800a5ca:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a5ce:	2340      	movne	r3, #64	; 0x40
 800a5d0:	2000      	movs	r0, #0
 800a5d2:	6031      	str	r1, [r6, #0]
 800a5d4:	602b      	str	r3, [r5, #0]
 800a5d6:	b016      	add	sp, #88	; 0x58
 800a5d8:	bd70      	pop	{r4, r5, r6, pc}
 800a5da:	466a      	mov	r2, sp
 800a5dc:	f000 f848 	bl	800a670 <_fstat_r>
 800a5e0:	2800      	cmp	r0, #0
 800a5e2:	dbec      	blt.n	800a5be <__swhatbuf_r+0x12>
 800a5e4:	9901      	ldr	r1, [sp, #4]
 800a5e6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a5ea:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a5ee:	4259      	negs	r1, r3
 800a5f0:	4159      	adcs	r1, r3
 800a5f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5f6:	e7eb      	b.n	800a5d0 <__swhatbuf_r+0x24>

0800a5f8 <__smakebuf_r>:
 800a5f8:	898b      	ldrh	r3, [r1, #12]
 800a5fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5fc:	079d      	lsls	r5, r3, #30
 800a5fe:	4606      	mov	r6, r0
 800a600:	460c      	mov	r4, r1
 800a602:	d507      	bpl.n	800a614 <__smakebuf_r+0x1c>
 800a604:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a608:	6023      	str	r3, [r4, #0]
 800a60a:	6123      	str	r3, [r4, #16]
 800a60c:	2301      	movs	r3, #1
 800a60e:	6163      	str	r3, [r4, #20]
 800a610:	b002      	add	sp, #8
 800a612:	bd70      	pop	{r4, r5, r6, pc}
 800a614:	ab01      	add	r3, sp, #4
 800a616:	466a      	mov	r2, sp
 800a618:	f7ff ffc8 	bl	800a5ac <__swhatbuf_r>
 800a61c:	9900      	ldr	r1, [sp, #0]
 800a61e:	4605      	mov	r5, r0
 800a620:	4630      	mov	r0, r6
 800a622:	f7ff f909 	bl	8009838 <_malloc_r>
 800a626:	b948      	cbnz	r0, 800a63c <__smakebuf_r+0x44>
 800a628:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a62c:	059a      	lsls	r2, r3, #22
 800a62e:	d4ef      	bmi.n	800a610 <__smakebuf_r+0x18>
 800a630:	f023 0303 	bic.w	r3, r3, #3
 800a634:	f043 0302 	orr.w	r3, r3, #2
 800a638:	81a3      	strh	r3, [r4, #12]
 800a63a:	e7e3      	b.n	800a604 <__smakebuf_r+0xc>
 800a63c:	89a3      	ldrh	r3, [r4, #12]
 800a63e:	6020      	str	r0, [r4, #0]
 800a640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a644:	81a3      	strh	r3, [r4, #12]
 800a646:	9b00      	ldr	r3, [sp, #0]
 800a648:	6163      	str	r3, [r4, #20]
 800a64a:	9b01      	ldr	r3, [sp, #4]
 800a64c:	6120      	str	r0, [r4, #16]
 800a64e:	b15b      	cbz	r3, 800a668 <__smakebuf_r+0x70>
 800a650:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a654:	4630      	mov	r0, r6
 800a656:	f000 f81d 	bl	800a694 <_isatty_r>
 800a65a:	b128      	cbz	r0, 800a668 <__smakebuf_r+0x70>
 800a65c:	89a3      	ldrh	r3, [r4, #12]
 800a65e:	f023 0303 	bic.w	r3, r3, #3
 800a662:	f043 0301 	orr.w	r3, r3, #1
 800a666:	81a3      	strh	r3, [r4, #12]
 800a668:	89a3      	ldrh	r3, [r4, #12]
 800a66a:	431d      	orrs	r5, r3
 800a66c:	81a5      	strh	r5, [r4, #12]
 800a66e:	e7cf      	b.n	800a610 <__smakebuf_r+0x18>

0800a670 <_fstat_r>:
 800a670:	b538      	push	{r3, r4, r5, lr}
 800a672:	4d07      	ldr	r5, [pc, #28]	; (800a690 <_fstat_r+0x20>)
 800a674:	2300      	movs	r3, #0
 800a676:	4604      	mov	r4, r0
 800a678:	4608      	mov	r0, r1
 800a67a:	4611      	mov	r1, r2
 800a67c:	602b      	str	r3, [r5, #0]
 800a67e:	f7f6 fd87 	bl	8001190 <_fstat>
 800a682:	1c43      	adds	r3, r0, #1
 800a684:	d102      	bne.n	800a68c <_fstat_r+0x1c>
 800a686:	682b      	ldr	r3, [r5, #0]
 800a688:	b103      	cbz	r3, 800a68c <_fstat_r+0x1c>
 800a68a:	6023      	str	r3, [r4, #0]
 800a68c:	bd38      	pop	{r3, r4, r5, pc}
 800a68e:	bf00      	nop
 800a690:	20001c90 	.word	0x20001c90

0800a694 <_isatty_r>:
 800a694:	b538      	push	{r3, r4, r5, lr}
 800a696:	4d06      	ldr	r5, [pc, #24]	; (800a6b0 <_isatty_r+0x1c>)
 800a698:	2300      	movs	r3, #0
 800a69a:	4604      	mov	r4, r0
 800a69c:	4608      	mov	r0, r1
 800a69e:	602b      	str	r3, [r5, #0]
 800a6a0:	f7f6 fd86 	bl	80011b0 <_isatty>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d102      	bne.n	800a6ae <_isatty_r+0x1a>
 800a6a8:	682b      	ldr	r3, [r5, #0]
 800a6aa:	b103      	cbz	r3, 800a6ae <_isatty_r+0x1a>
 800a6ac:	6023      	str	r3, [r4, #0]
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	20001c90 	.word	0x20001c90

0800a6b4 <_init>:
 800a6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6b6:	bf00      	nop
 800a6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ba:	bc08      	pop	{r3}
 800a6bc:	469e      	mov	lr, r3
 800a6be:	4770      	bx	lr

0800a6c0 <_fini>:
 800a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c2:	bf00      	nop
 800a6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6c6:	bc08      	pop	{r3}
 800a6c8:	469e      	mov	lr, r3
 800a6ca:	4770      	bx	lr
