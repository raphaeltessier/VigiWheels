
VigiWheels_Fire_Detection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000030c  0800bb7c  0800bb7c  0001bb7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be88  0800be88  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800be88  0800be88  0001be88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be90  0800be90  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be90  0800be90  0001be90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be94  0800be94  0001be94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800be98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c18  2000006c  0800bf04  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c84  0800bf04  00021c84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001eff4  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dfb  00000000  00000000  0003f0d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b50  00000000  00000000  00042ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000153f  00000000  00000000  00044a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b9c7  00000000  00000000  00045f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d0d3  00000000  00000000  00071926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00111f15  00000000  00000000  0008e9f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000081e4  00000000  00000000  001a0910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001a8af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb64 	.word	0x0800bb64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	0800bb64 	.word	0x0800bb64

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_uldivmod>:
 8000a7c:	b953      	cbnz	r3, 8000a94 <__aeabi_uldivmod+0x18>
 8000a7e:	b94a      	cbnz	r2, 8000a94 <__aeabi_uldivmod+0x18>
 8000a80:	2900      	cmp	r1, #0
 8000a82:	bf08      	it	eq
 8000a84:	2800      	cmpeq	r0, #0
 8000a86:	bf1c      	itt	ne
 8000a88:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a8c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a90:	f000 b970 	b.w	8000d74 <__aeabi_idiv0>
 8000a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a9c:	f000 f806 	bl	8000aac <__udivmoddi4>
 8000aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa8:	b004      	add	sp, #16
 8000aaa:	4770      	bx	lr

08000aac <__udivmoddi4>:
 8000aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab0:	9e08      	ldr	r6, [sp, #32]
 8000ab2:	460d      	mov	r5, r1
 8000ab4:	4604      	mov	r4, r0
 8000ab6:	460f      	mov	r7, r1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d14a      	bne.n	8000b52 <__udivmoddi4+0xa6>
 8000abc:	428a      	cmp	r2, r1
 8000abe:	4694      	mov	ip, r2
 8000ac0:	d965      	bls.n	8000b8e <__udivmoddi4+0xe2>
 8000ac2:	fab2 f382 	clz	r3, r2
 8000ac6:	b143      	cbz	r3, 8000ada <__udivmoddi4+0x2e>
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	f1c3 0220 	rsb	r2, r3, #32
 8000ad0:	409f      	lsls	r7, r3
 8000ad2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ad6:	4317      	orrs	r7, r2
 8000ad8:	409c      	lsls	r4, r3
 8000ada:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ade:	fa1f f58c 	uxth.w	r5, ip
 8000ae2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ae6:	0c22      	lsrs	r2, r4, #16
 8000ae8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000aec:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000af0:	fb01 f005 	mul.w	r0, r1, r5
 8000af4:	4290      	cmp	r0, r2
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x62>
 8000af8:	eb1c 0202 	adds.w	r2, ip, r2
 8000afc:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b00:	f080 811c 	bcs.w	8000d3c <__udivmoddi4+0x290>
 8000b04:	4290      	cmp	r0, r2
 8000b06:	f240 8119 	bls.w	8000d3c <__udivmoddi4+0x290>
 8000b0a:	3902      	subs	r1, #2
 8000b0c:	4462      	add	r2, ip
 8000b0e:	1a12      	subs	r2, r2, r0
 8000b10:	b2a4      	uxth	r4, r4
 8000b12:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b16:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b1e:	fb00 f505 	mul.w	r5, r0, r5
 8000b22:	42a5      	cmp	r5, r4
 8000b24:	d90a      	bls.n	8000b3c <__udivmoddi4+0x90>
 8000b26:	eb1c 0404 	adds.w	r4, ip, r4
 8000b2a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b2e:	f080 8107 	bcs.w	8000d40 <__udivmoddi4+0x294>
 8000b32:	42a5      	cmp	r5, r4
 8000b34:	f240 8104 	bls.w	8000d40 <__udivmoddi4+0x294>
 8000b38:	4464      	add	r4, ip
 8000b3a:	3802      	subs	r0, #2
 8000b3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b40:	1b64      	subs	r4, r4, r5
 8000b42:	2100      	movs	r1, #0
 8000b44:	b11e      	cbz	r6, 8000b4e <__udivmoddi4+0xa2>
 8000b46:	40dc      	lsrs	r4, r3
 8000b48:	2300      	movs	r3, #0
 8000b4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	428b      	cmp	r3, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0xbc>
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	f000 80ed 	beq.w	8000d36 <__udivmoddi4+0x28a>
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b62:	4608      	mov	r0, r1
 8000b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b68:	fab3 f183 	clz	r1, r3
 8000b6c:	2900      	cmp	r1, #0
 8000b6e:	d149      	bne.n	8000c04 <__udivmoddi4+0x158>
 8000b70:	42ab      	cmp	r3, r5
 8000b72:	d302      	bcc.n	8000b7a <__udivmoddi4+0xce>
 8000b74:	4282      	cmp	r2, r0
 8000b76:	f200 80f8 	bhi.w	8000d6a <__udivmoddi4+0x2be>
 8000b7a:	1a84      	subs	r4, r0, r2
 8000b7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b80:	2001      	movs	r0, #1
 8000b82:	4617      	mov	r7, r2
 8000b84:	2e00      	cmp	r6, #0
 8000b86:	d0e2      	beq.n	8000b4e <__udivmoddi4+0xa2>
 8000b88:	e9c6 4700 	strd	r4, r7, [r6]
 8000b8c:	e7df      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000b8e:	b902      	cbnz	r2, 8000b92 <__udivmoddi4+0xe6>
 8000b90:	deff      	udf	#255	; 0xff
 8000b92:	fab2 f382 	clz	r3, r2
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	f040 8090 	bne.w	8000cbc <__udivmoddi4+0x210>
 8000b9c:	1a8a      	subs	r2, r1, r2
 8000b9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ba2:	fa1f fe8c 	uxth.w	lr, ip
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bac:	fb07 2015 	mls	r0, r7, r5, r2
 8000bb0:	0c22      	lsrs	r2, r4, #16
 8000bb2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bb6:	fb0e f005 	mul.w	r0, lr, r5
 8000bba:	4290      	cmp	r0, r2
 8000bbc:	d908      	bls.n	8000bd0 <__udivmoddi4+0x124>
 8000bbe:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x122>
 8000bc8:	4290      	cmp	r0, r2
 8000bca:	f200 80cb 	bhi.w	8000d64 <__udivmoddi4+0x2b8>
 8000bce:	4645      	mov	r5, r8
 8000bd0:	1a12      	subs	r2, r2, r0
 8000bd2:	b2a4      	uxth	r4, r4
 8000bd4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000be0:	fb0e fe00 	mul.w	lr, lr, r0
 8000be4:	45a6      	cmp	lr, r4
 8000be6:	d908      	bls.n	8000bfa <__udivmoddi4+0x14e>
 8000be8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bec:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bf0:	d202      	bcs.n	8000bf8 <__udivmoddi4+0x14c>
 8000bf2:	45a6      	cmp	lr, r4
 8000bf4:	f200 80bb 	bhi.w	8000d6e <__udivmoddi4+0x2c2>
 8000bf8:	4610      	mov	r0, r2
 8000bfa:	eba4 040e 	sub.w	r4, r4, lr
 8000bfe:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c02:	e79f      	b.n	8000b44 <__udivmoddi4+0x98>
 8000c04:	f1c1 0720 	rsb	r7, r1, #32
 8000c08:	408b      	lsls	r3, r1
 8000c0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c12:	fa05 f401 	lsl.w	r4, r5, r1
 8000c16:	fa20 f307 	lsr.w	r3, r0, r7
 8000c1a:	40fd      	lsrs	r5, r7
 8000c1c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c20:	4323      	orrs	r3, r4
 8000c22:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c26:	fa1f fe8c 	uxth.w	lr, ip
 8000c2a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c2e:	0c1c      	lsrs	r4, r3, #16
 8000c30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c34:	fb08 f50e 	mul.w	r5, r8, lr
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c3e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c42:	d90b      	bls.n	8000c5c <__udivmoddi4+0x1b0>
 8000c44:	eb1c 0404 	adds.w	r4, ip, r4
 8000c48:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c4c:	f080 8088 	bcs.w	8000d60 <__udivmoddi4+0x2b4>
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	f240 8085 	bls.w	8000d60 <__udivmoddi4+0x2b4>
 8000c56:	f1a8 0802 	sub.w	r8, r8, #2
 8000c5a:	4464      	add	r4, ip
 8000c5c:	1b64      	subs	r4, r4, r5
 8000c5e:	b29d      	uxth	r5, r3
 8000c60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c64:	fb09 4413 	mls	r4, r9, r3, r4
 8000c68:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c6c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c70:	45a6      	cmp	lr, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x1da>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000c7c:	d26c      	bcs.n	8000d58 <__udivmoddi4+0x2ac>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	d96a      	bls.n	8000d58 <__udivmoddi4+0x2ac>
 8000c82:	3b02      	subs	r3, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c8a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c8e:	eba4 040e 	sub.w	r4, r4, lr
 8000c92:	42ac      	cmp	r4, r5
 8000c94:	46c8      	mov	r8, r9
 8000c96:	46ae      	mov	lr, r5
 8000c98:	d356      	bcc.n	8000d48 <__udivmoddi4+0x29c>
 8000c9a:	d053      	beq.n	8000d44 <__udivmoddi4+0x298>
 8000c9c:	b156      	cbz	r6, 8000cb4 <__udivmoddi4+0x208>
 8000c9e:	ebb0 0208 	subs.w	r2, r0, r8
 8000ca2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ca6:	fa04 f707 	lsl.w	r7, r4, r7
 8000caa:	40ca      	lsrs	r2, r1
 8000cac:	40cc      	lsrs	r4, r1
 8000cae:	4317      	orrs	r7, r2
 8000cb0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbc:	f1c3 0120 	rsb	r1, r3, #32
 8000cc0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ccc:	409d      	lsls	r5, r3
 8000cce:	432a      	orrs	r2, r5
 8000cd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cdc:	fb07 1510 	mls	r5, r7, r0, r1
 8000ce0:	0c11      	lsrs	r1, r2, #16
 8000ce2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ce6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cea:	428d      	cmp	r5, r1
 8000cec:	fa04 f403 	lsl.w	r4, r4, r3
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x258>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000cfa:	d22f      	bcs.n	8000d5c <__udivmoddi4+0x2b0>
 8000cfc:	428d      	cmp	r5, r1
 8000cfe:	d92d      	bls.n	8000d5c <__udivmoddi4+0x2b0>
 8000d00:	3802      	subs	r0, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1b49      	subs	r1, r1, r5
 8000d06:	b292      	uxth	r2, r2
 8000d08:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d0c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d14:	fb05 f10e 	mul.w	r1, r5, lr
 8000d18:	4291      	cmp	r1, r2
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x282>
 8000d1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d20:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d24:	d216      	bcs.n	8000d54 <__udivmoddi4+0x2a8>
 8000d26:	4291      	cmp	r1, r2
 8000d28:	d914      	bls.n	8000d54 <__udivmoddi4+0x2a8>
 8000d2a:	3d02      	subs	r5, #2
 8000d2c:	4462      	add	r2, ip
 8000d2e:	1a52      	subs	r2, r2, r1
 8000d30:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d34:	e738      	b.n	8000ba8 <__udivmoddi4+0xfc>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e708      	b.n	8000b4e <__udivmoddi4+0xa2>
 8000d3c:	4639      	mov	r1, r7
 8000d3e:	e6e6      	b.n	8000b0e <__udivmoddi4+0x62>
 8000d40:	4610      	mov	r0, r2
 8000d42:	e6fb      	b.n	8000b3c <__udivmoddi4+0x90>
 8000d44:	4548      	cmp	r0, r9
 8000d46:	d2a9      	bcs.n	8000c9c <__udivmoddi4+0x1f0>
 8000d48:	ebb9 0802 	subs.w	r8, r9, r2
 8000d4c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d50:	3b01      	subs	r3, #1
 8000d52:	e7a3      	b.n	8000c9c <__udivmoddi4+0x1f0>
 8000d54:	4645      	mov	r5, r8
 8000d56:	e7ea      	b.n	8000d2e <__udivmoddi4+0x282>
 8000d58:	462b      	mov	r3, r5
 8000d5a:	e794      	b.n	8000c86 <__udivmoddi4+0x1da>
 8000d5c:	4640      	mov	r0, r8
 8000d5e:	e7d1      	b.n	8000d04 <__udivmoddi4+0x258>
 8000d60:	46d0      	mov	r8, sl
 8000d62:	e77b      	b.n	8000c5c <__udivmoddi4+0x1b0>
 8000d64:	3d02      	subs	r5, #2
 8000d66:	4462      	add	r2, ip
 8000d68:	e732      	b.n	8000bd0 <__udivmoddi4+0x124>
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e70a      	b.n	8000b84 <__udivmoddi4+0xd8>
 8000d6e:	4464      	add	r4, ip
 8000d70:	3802      	subs	r0, #2
 8000d72:	e742      	b.n	8000bfa <__udivmoddi4+0x14e>

08000d74 <__aeabi_idiv0>:
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <msToTicks>:

#define SIZE_RX 10
#define SIZE_TX 100

TickType_t msToTicks(TickType_t ms)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	TickType_t tmp = ms;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	60fb      	str	r3, [r7, #12]

	if (ms<(1000/configTICK_RATE_HZ))
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d102      	bne.n	8000d90 <msToTicks+0x18>
		tmp = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	e001      	b.n	8000d94 <msToTicks+0x1c>
	else {
		tmp = ms/(1000/configTICK_RATE_HZ);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	60fb      	str	r3, [r7, #12]

		if (ms % (1000/configTICK_RATE_HZ))
			tmp ++;
	}
	return tmp;
 8000d94:	68fb      	ldr	r3, [r7, #12]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <reading_analog_ir_sensor1>:

void reading_analog_ir_sensor1(ADC_HandleTypeDef *hadc, uint16_t *sensorValue)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000dae:	f107 0308 	add.w	r3, r7, #8
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	611a      	str	r2, [r3, #16]
 8000dbe:	615a      	str	r2, [r3, #20]

	// Configure and start ADC conversions for A0
	sConfig.Channel = ADC_CHANNEL_5;
 8000dc0:	4b13      	ldr	r3, [pc, #76]	; (8000e10 <reading_analog_ir_sensor1+0x6c>)
 8000dc2:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dc4:	2306      	movs	r3, #6
 8000dc6:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000dcc:	237f      	movs	r3, #127	; 0x7f
 8000dce:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]

	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000dd8:	f107 0308 	add.w	r3, r7, #8
 8000ddc:	4619      	mov	r1, r3
 8000dde:	480d      	ldr	r0, [pc, #52]	; (8000e14 <reading_analog_ir_sensor1+0x70>)
 8000de0:	f001 fe1c 	bl	8002a1c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <reading_analog_ir_sensor1+0x70>)
 8000de6:	f001 fc45 	bl	8002674 <HAL_ADC_Start>

	// Wait for conversion to complete
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000dea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dee:	4809      	ldr	r0, [pc, #36]	; (8000e14 <reading_analog_ir_sensor1+0x70>)
 8000df0:	f001 fd2e 	bl	8002850 <HAL_ADC_PollForConversion>

	// Read ADC value for A0
    *sensorValue = HAL_ADC_GetValue(hadc);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f001 fe03 	bl	8002a00 <HAL_ADC_GetValue>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	801a      	strh	r2, [r3, #0]

	// Stop ADC conversions for A0
    HAL_ADC_Stop(hadc);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f001 fcf0 	bl	80027e8 <HAL_ADC_Stop>
}
 8000e08:	bf00      	nop
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	14f00020 	.word	0x14f00020
 8000e14:	200000a0 	.word	0x200000a0

08000e18 <reading_analog_ir_sensor3>:

void reading_analog_ir_sensor3(ADC_HandleTypeDef *hadc, uint16_t *sensorValue)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
 8000e30:	611a      	str	r2, [r3, #16]
 8000e32:	615a      	str	r2, [r3, #20]

	// Configure and start ADC conversions for A1
	sConfig.Channel = ADC_CHANNEL_6;
 8000e34:	4b13      	ldr	r3, [pc, #76]	; (8000e84 <reading_analog_ir_sensor3+0x6c>)
 8000e36:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e38:	2306      	movs	r3, #6
 8000e3a:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e40:	237f      	movs	r3, #127	; 0x7f
 8000e42:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e44:	2304      	movs	r3, #4
 8000e46:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]

	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	4619      	mov	r1, r3
 8000e52:	480d      	ldr	r0, [pc, #52]	; (8000e88 <reading_analog_ir_sensor3+0x70>)
 8000e54:	f001 fde2 	bl	8002a1c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000e58:	480b      	ldr	r0, [pc, #44]	; (8000e88 <reading_analog_ir_sensor3+0x70>)
 8000e5a:	f001 fc0b 	bl	8002674 <HAL_ADC_Start>

	// Wait for conversion to complete
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e62:	4809      	ldr	r0, [pc, #36]	; (8000e88 <reading_analog_ir_sensor3+0x70>)
 8000e64:	f001 fcf4 	bl	8002850 <HAL_ADC_PollForConversion>

	// Read ADC value for A0
    *sensorValue = HAL_ADC_GetValue(hadc);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f001 fdc9 	bl	8002a00 <HAL_ADC_GetValue>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	801a      	strh	r2, [r3, #0]

	// Stop ADC conversions for A0
    HAL_ADC_Stop(hadc);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f001 fcb6 	bl	80027e8 <HAL_ADC_Stop>
}
 8000e7c:	bf00      	nop
 8000e7e:	3720      	adds	r7, #32
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	19200040 	.word	0x19200040
 8000e88:	200000a0 	.word	0x200000a0

08000e8c <reading_analog_smoke_sensor1>:

void reading_analog_smoke_sensor1(ADC_HandleTypeDef *hadc, uint16_t *sensorValue)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]
 8000ea6:	615a      	str	r2, [r3, #20]

	// Configure and start ADC conversions for A0
	sConfig.Channel = ADC_CHANNEL_9;
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <reading_analog_smoke_sensor1+0x6c>)
 8000eaa:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eac:	2306      	movs	r3, #6
 8000eae:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb4:	237f      	movs	r3, #127	; 0x7f
 8000eb6:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eb8:	2304      	movs	r3, #4
 8000eba:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]

	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000ec0:	f107 0308 	add.w	r3, r7, #8
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	480d      	ldr	r0, [pc, #52]	; (8000efc <reading_analog_smoke_sensor1+0x70>)
 8000ec8:	f001 fda8 	bl	8002a1c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <reading_analog_smoke_sensor1+0x70>)
 8000ece:	f001 fbd1 	bl	8002674 <HAL_ADC_Start>

	// Wait for conversion to complete
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ed2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ed6:	4809      	ldr	r0, [pc, #36]	; (8000efc <reading_analog_smoke_sensor1+0x70>)
 8000ed8:	f001 fcba 	bl	8002850 <HAL_ADC_PollForConversion>

	// Read ADC value for A0
    *sensorValue = HAL_ADC_GetValue(hadc);
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f001 fd8f 	bl	8002a00 <HAL_ADC_GetValue>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	801a      	strh	r2, [r3, #0]

	// Stop ADC conversions for A0
    HAL_ADC_Stop(hadc);
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f001 fc7c 	bl	80027e8 <HAL_ADC_Stop>
}
 8000ef0:	bf00      	nop
 8000ef2:	3720      	adds	r7, #32
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	25b00200 	.word	0x25b00200
 8000efc:	200000a0 	.word	0x200000a0

08000f00 <reading_analog_smoke_sensor2>:

void reading_analog_smoke_sensor2(ADC_HandleTypeDef *hadc, uint16_t *sensorValue)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b088      	sub	sp, #32
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f0a:	f107 0308 	add.w	r3, r7, #8
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]
 8000f1a:	615a      	str	r2, [r3, #20]

	// Configure and start ADC conversions for A0
	sConfig.Channel = ADC_CHANNEL_15;
 8000f1c:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <reading_analog_smoke_sensor2+0x6c>)
 8000f1e:	60bb      	str	r3, [r7, #8]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f20:	2306      	movs	r3, #6
 8000f22:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000f24:	2300      	movs	r3, #0
 8000f26:	613b      	str	r3, [r7, #16]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f28:	237f      	movs	r3, #127	; 0x7f
 8000f2a:	617b      	str	r3, [r7, #20]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	61bb      	str	r3, [r7, #24]
	sConfig.Offset = 0;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]

	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480d      	ldr	r0, [pc, #52]	; (8000f70 <reading_analog_smoke_sensor2+0x70>)
 8000f3c:	f001 fd6e 	bl	8002a1c <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc1);
 8000f40:	480b      	ldr	r0, [pc, #44]	; (8000f70 <reading_analog_smoke_sensor2+0x70>)
 8000f42:	f001 fb97 	bl	8002674 <HAL_ADC_Start>

	// Wait for conversion to complete
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f4a:	4809      	ldr	r0, [pc, #36]	; (8000f70 <reading_analog_smoke_sensor2+0x70>)
 8000f4c:	f001 fc80 	bl	8002850 <HAL_ADC_PollForConversion>

	// Read ADC value for A0
    *sensorValue = HAL_ADC_GetValue(hadc);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f001 fd55 	bl	8002a00 <HAL_ADC_GetValue>
 8000f56:	4603      	mov	r3, r0
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	801a      	strh	r2, [r3, #0]

	// Stop ADC conversions for A0
    HAL_ADC_Stop(hadc);
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f001 fc42 	bl	80027e8 <HAL_ADC_Stop>
}
 8000f64:	bf00      	nop
 8000f66:	3720      	adds	r7, #32
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	3ef08000 	.word	0x3ef08000
 8000f70:	200000a0 	.word	0x200000a0

08000f74 <reading_digital_sensor>:

// Function to read digital sensor values
void reading_digital_sensor(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint16_t *sensorValue)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	817b      	strh	r3, [r7, #10]
	*sensorValue = !HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8000f82:	897b      	ldrh	r3, [r7, #10]
 8000f84:	4619      	mov	r1, r3
 8000f86:	68f8      	ldr	r0, [r7, #12]
 8000f88:	f002 fe42 	bl	8003c10 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bf0c      	ite	eq
 8000f92:	2301      	moveq	r3, #1
 8000f94:	2300      	movne	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	801a      	strh	r2, [r3, #0]
}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <reading_sensor_values>:

// Function to read all sensor values
void reading_sensor_values()
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	reading_analog_ir_sensor1(&hadc1, &ir_sensor1);
 8000fac:	490e      	ldr	r1, [pc, #56]	; (8000fe8 <reading_sensor_values+0x40>)
 8000fae:	480f      	ldr	r0, [pc, #60]	; (8000fec <reading_sensor_values+0x44>)
 8000fb0:	f7ff fef8 	bl	8000da4 <reading_analog_ir_sensor1>
	reading_digital_sensor(GPIOA, GPIO_PIN_10, &ir_sensor2);
 8000fb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <reading_sensor_values+0x48>)
 8000fb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f7ff ffd9 	bl	8000f74 <reading_digital_sensor>
	reading_analog_ir_sensor3(&hadc1, &ir_sensor3);
 8000fc2:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <reading_sensor_values+0x4c>)
 8000fc4:	4809      	ldr	r0, [pc, #36]	; (8000fec <reading_sensor_values+0x44>)
 8000fc6:	f7ff ff27 	bl	8000e18 <reading_analog_ir_sensor3>
	reading_digital_sensor(GPIOB, GPIO_PIN_3, &ir_sensor4);
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <reading_sensor_values+0x50>)
 8000fcc:	2108      	movs	r1, #8
 8000fce:	480b      	ldr	r0, [pc, #44]	; (8000ffc <reading_sensor_values+0x54>)
 8000fd0:	f7ff ffd0 	bl	8000f74 <reading_digital_sensor>
	reading_analog_smoke_sensor1(&hadc1, &smoke_sensor1);
 8000fd4:	490a      	ldr	r1, [pc, #40]	; (8001000 <reading_sensor_values+0x58>)
 8000fd6:	4805      	ldr	r0, [pc, #20]	; (8000fec <reading_sensor_values+0x44>)
 8000fd8:	f7ff ff58 	bl	8000e8c <reading_analog_smoke_sensor1>
	reading_analog_smoke_sensor2(&hadc1, &smoke_sensor2);
 8000fdc:	4909      	ldr	r1, [pc, #36]	; (8001004 <reading_sensor_values+0x5c>)
 8000fde:	4803      	ldr	r0, [pc, #12]	; (8000fec <reading_sensor_values+0x44>)
 8000fe0:	f7ff ff8e 	bl	8000f00 <reading_analog_smoke_sensor2>
}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000088 	.word	0x20000088
 8000fec:	200000a0 	.word	0x200000a0
 8000ff0:	2000008a 	.word	0x2000008a
 8000ff4:	2000008c 	.word	0x2000008c
 8000ff8:	2000008e 	.word	0x2000008e
 8000ffc:	48000400 	.word	0x48000400
 8001000:	20000090 	.word	0x20000090
 8001004:	20000092 	.word	0x20000092

08001008 <wait_for_frame>:

// Helper function to wait for a specific frame with timeout
int wait_for_frame(char frame_char, uint32_t timeout_ms)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	6039      	str	r1, [r7, #0]
 8001012:	71fb      	strb	r3, [r7, #7]
    char buf[1];
    uint32_t start_time = osKernelGetTickCount();
 8001014:	f006 f9de 	bl	80073d4 <osKernelGetTickCount>
 8001018:	60f8      	str	r0, [r7, #12]

    do
    {
        HAL_UART_Receive(&huart2, (uint8_t *)buf, 1, 100);
 800101a:	f107 0108 	add.w	r1, r7, #8
 800101e:	2364      	movs	r3, #100	; 0x64
 8001020:	2201      	movs	r2, #1
 8001022:	480b      	ldr	r0, [pc, #44]	; (8001050 <wait_for_frame+0x48>)
 8001024:	f005 fbc0 	bl	80067a8 <HAL_UART_Receive>

        if (*buf == frame_char)
 8001028:	7a3b      	ldrb	r3, [r7, #8]
 800102a:	79fa      	ldrb	r2, [r7, #7]
 800102c:	429a      	cmp	r2, r3
 800102e:	d101      	bne.n	8001034 <wait_for_frame+0x2c>
        {
            return 1; // Frame received
 8001030:	2301      	movs	r3, #1
 8001032:	e008      	b.n	8001046 <wait_for_frame+0x3e>
        }

    } while ((osKernelGetTickCount() - start_time) < timeout_ms);
 8001034:	f006 f9ce 	bl	80073d4 <osKernelGetTickCount>
 8001038:	4602      	mov	r2, r0
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8ea      	bhi.n	800101a <wait_for_frame+0x12>

    return 0; // Timeout occurred
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000019c 	.word	0x2000019c

08001054 <sending_data_uart>:

// Frame format: "#[ID]=[Value]|[ID]=[Value]|[ID]=[Value]\n"
void sending_data_uart(void *argument)
{
 8001054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001056:	b0a1      	sub	sp, #132	; 0x84
 8001058:	af04      	add	r7, sp, #16
 800105a:	6078      	str	r0, [r7, #4]
	char tx[SIZE_TX + 1];

	while (1)
	{
		osMutexAcquire(uartMutex, osWaitForever);
 800105c:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <sending_data_uart+0x88>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001064:	4618      	mov	r0, r3
 8001066:	f006 fafd 	bl	8007664 <osMutexAcquire>

		reading_sensor_values();
 800106a:	f7ff ff9d 	bl	8000fa8 <reading_sensor_values>

		// Create and transmit the frame
		sprintf(tx, "#IR_SENSOR1=%hu|IR_SENSOR2=%u|IR_SENSOR3=%hu|IR_SENSOR4=%u|SMOKE_SENSOR1=%hu|SMOKE_SENSOR2=%hu\n", ir_sensor1, ir_sensor2, ir_sensor3, ir_sensor4, smoke_sensor1, smoke_sensor2);
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <sending_data_uart+0x8c>)
 8001070:	881b      	ldrh	r3, [r3, #0]
 8001072:	461d      	mov	r5, r3
 8001074:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <sending_data_uart+0x90>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	461e      	mov	r6, r3
 800107a:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <sending_data_uart+0x94>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <sending_data_uart+0x98>)
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	4619      	mov	r1, r3
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <sending_data_uart+0x9c>)
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	461c      	mov	r4, r3
 800108c:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <sending_data_uart+0xa0>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	f107 0008 	add.w	r0, r7, #8
 8001094:	9303      	str	r3, [sp, #12]
 8001096:	9402      	str	r4, [sp, #8]
 8001098:	9101      	str	r1, [sp, #4]
 800109a:	9200      	str	r2, [sp, #0]
 800109c:	4633      	mov	r3, r6
 800109e:	462a      	mov	r2, r5
 80010a0:	4915      	ldr	r1, [pc, #84]	; (80010f8 <sending_data_uart+0xa4>)
 80010a2:	f009 fc45 	bl	800a930 <siprintf>

		HAL_UART_Transmit(&huart2, (const uint8_t *)tx, strlen(tx), 100);
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff f89a 	bl	80001e4 <strlen>
 80010b0:	4603      	mov	r3, r0
 80010b2:	b29a      	uxth	r2, r3
 80010b4:	f107 0108 	add.w	r1, r7, #8
 80010b8:	2364      	movs	r3, #100	; 0x64
 80010ba:	4810      	ldr	r0, [pc, #64]	; (80010fc <sending_data_uart+0xa8>)
 80010bc:	f005 faea 	bl	8006694 <HAL_UART_Transmit>

		osMutexRelease(uartMutex);
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <sending_data_uart+0x88>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f006 fb18 	bl	80076fa <osMutexRelease>

        osDelay(msToTicks(350));
 80010ca:	f44f 70af 	mov.w	r0, #350	; 0x15e
 80010ce:	f7ff fe53 	bl	8000d78 <msToTicks>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4618      	mov	r0, r3
 80010d6:	f006 fa24 	bl	8007522 <osDelay>
		osMutexAcquire(uartMutex, osWaitForever);
 80010da:	e7bf      	b.n	800105c <sending_data_uart+0x8>
 80010dc:	20000094 	.word	0x20000094
 80010e0:	20000088 	.word	0x20000088
 80010e4:	2000008a 	.word	0x2000008a
 80010e8:	2000008c 	.word	0x2000008c
 80010ec:	2000008e 	.word	0x2000008e
 80010f0:	20000090 	.word	0x20000090
 80010f4:	20000092 	.word	0x20000092
 80010f8:	0800bb84 	.word	0x0800bb84
 80010fc:	2000019c 	.word	0x2000019c

08001100 <receiving_data_uart>:
	}
}

// Frame format: "#[ID]=[Value]\n"
void receiving_data_uart()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
    char buf[1];
    char rx[SIZE_RX + 1];

    while (1)
    {
        osMutexAcquire(uartMutex, osWaitForever);
 8001106:	4b42      	ldr	r3, [pc, #264]	; (8001210 <receiving_data_uart+0x110>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800110e:	4618      	mov	r0, r3
 8001110:	f006 faa8 	bl	8007664 <osMutexAcquire>

        // Wait for "START_OF_FRAME" with timeout
        if (!wait_for_frame(START_OF_FRAME, 100))
 8001114:	2164      	movs	r1, #100	; 0x64
 8001116:	2023      	movs	r0, #35	; 0x23
 8001118:	f7ff ff76 	bl	8001008 <wait_for_frame>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d105      	bne.n	800112e <receiving_data_uart+0x2e>
        {
            // Timeout occurred, release the mutex and continue to the next iteration
            osMutexRelease(uartMutex);
 8001122:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <receiving_data_uart+0x110>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f006 fae7 	bl	80076fa <osMutexRelease>
            continue;
 800112c:	e06e      	b.n	800120c <receiving_data_uart+0x10c>
        }

        // Receive data until "END_OF_FRAME" with timeout
        int i = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
        if (wait_for_frame(END_OF_FRAME, 100))
 8001132:	2164      	movs	r1, #100	; 0x64
 8001134:	200a      	movs	r0, #10
 8001136:	f7ff ff67 	bl	8001008 <wait_for_frame>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d060      	beq.n	8001202 <receiving_data_uart+0x102>
        {
            do
            {
                HAL_UART_Receive(&huart2, (uint8_t *)buf, 1, 100);
 8001140:	f107 010c 	add.w	r1, r7, #12
 8001144:	2364      	movs	r3, #100	; 0x64
 8001146:	2201      	movs	r2, #1
 8001148:	4832      	ldr	r0, [pc, #200]	; (8001214 <receiving_data_uart+0x114>)
 800114a:	f005 fb2d 	bl	80067a8 <HAL_UART_Receive>
                rx[i++] = *buf;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	1c5a      	adds	r2, r3, #1
 8001152:	61fa      	str	r2, [r7, #28]
 8001154:	7b3a      	ldrb	r2, [r7, #12]
 8001156:	3320      	adds	r3, #32
 8001158:	443b      	add	r3, r7
 800115a:	f803 2c20 	strb.w	r2, [r3, #-32]
            } while (*buf != END_OF_FRAME);
 800115e:	7b3b      	ldrb	r3, [r7, #12]
 8001160:	2b0a      	cmp	r3, #10
 8001162:	d1ed      	bne.n	8001140 <receiving_data_uart+0x40>

            rx[i] = '\0';
 8001164:	463a      	mov	r2, r7
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	4413      	add	r3, r2
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]

            // Extract ID and Value from the received frame
            char *id = strtok(rx, "=");    // ID
 800116e:	463b      	mov	r3, r7
 8001170:	4929      	ldr	r1, [pc, #164]	; (8001218 <receiving_data_uart+0x118>)
 8001172:	4618      	mov	r0, r3
 8001174:	f009 fc48 	bl	800aa08 <strtok>
 8001178:	61b8      	str	r0, [r7, #24]
            char *value = strtok(NULL, "="); // Value
 800117a:	4927      	ldr	r1, [pc, #156]	; (8001218 <receiving_data_uart+0x118>)
 800117c:	2000      	movs	r0, #0
 800117e:	f009 fc43 	bl	800aa08 <strtok>
 8001182:	6178      	str	r0, [r7, #20]

            // Process based on ID and Value
            if (id != NULL && value != NULL)
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d03b      	beq.n	8001202 <receiving_data_uart+0x102>
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d038      	beq.n	8001202 <receiving_data_uart+0x102>
            {
                if (strcmp(id, "f") == 0)
 8001190:	4922      	ldr	r1, [pc, #136]	; (800121c <receiving_data_uart+0x11c>)
 8001192:	69b8      	ldr	r0, [r7, #24]
 8001194:	f7ff f81c 	bl	80001d0 <strcmp>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d121      	bne.n	80011e2 <receiving_data_uart+0xe2>
                {
                    // Handle Fire sensor values
                    if (atoi(value) == 1)
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f009 fa74 	bl	800a68c <atoi>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d10a      	bne.n	80011c0 <receiving_data_uart+0xc0>
                    {
                        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2110      	movs	r1, #16
 80011ae:	481c      	ldr	r0, [pc, #112]	; (8001220 <receiving_data_uart+0x120>)
 80011b0:	f002 fd46 	bl	8003c40 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2120      	movs	r1, #32
 80011b8:	4819      	ldr	r0, [pc, #100]	; (8001220 <receiving_data_uart+0x120>)
 80011ba:	f002 fd41 	bl	8003c40 <HAL_GPIO_WritePin>
 80011be:	e020      	b.n	8001202 <receiving_data_uart+0x102>
                    }
                    else if (atoi(value) == 0)
 80011c0:	6978      	ldr	r0, [r7, #20]
 80011c2:	f009 fa63 	bl	800a68c <atoi>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d11a      	bne.n	8001202 <receiving_data_uart+0x102>
                    {
                        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2110      	movs	r1, #16
 80011d0:	4813      	ldr	r0, [pc, #76]	; (8001220 <receiving_data_uart+0x120>)
 80011d2:	f002 fd35 	bl	8003c40 <HAL_GPIO_WritePin>
                        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2120      	movs	r1, #32
 80011da:	4811      	ldr	r0, [pc, #68]	; (8001220 <receiving_data_uart+0x120>)
 80011dc:	f002 fd30 	bl	8003c40 <HAL_GPIO_WritePin>
 80011e0:	e00f      	b.n	8001202 <receiving_data_uart+0x102>
                    else
                    {
                        // Handle error
                    }
                }
                else if (strcmp(id, "c") == 0)
 80011e2:	4910      	ldr	r1, [pc, #64]	; (8001224 <receiving_data_uart+0x124>)
 80011e4:	69b8      	ldr	r0, [r7, #24]
 80011e6:	f7fe fff3 	bl	80001d0 <strcmp>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d108      	bne.n	8001202 <receiving_data_uart+0x102>
                {
                    // Handle PWM value
                    uint32_t cmd_angle = atoi(value);
 80011f0:	6978      	ldr	r0, [r7, #20]
 80011f2:	f009 fa4b 	bl	800a68c <atoi>
 80011f6:	4603      	mov	r3, r0
 80011f8:	613b      	str	r3, [r7, #16]
                    update_CCR_timer_PWM(cmd_angle, &htim3);
 80011fa:	490b      	ldr	r1, [pc, #44]	; (8001228 <receiving_data_uart+0x128>)
 80011fc:	6938      	ldr	r0, [r7, #16]
 80011fe:	f000 f817 	bl	8001230 <update_CCR_timer_PWM>
                    // Handle other IDs or report error
                }
            }
        }

        osMutexRelease(uartMutex);
 8001202:	4b03      	ldr	r3, [pc, #12]	; (8001210 <receiving_data_uart+0x110>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f006 fa77 	bl	80076fa <osMutexRelease>
    {
 800120c:	e77b      	b.n	8001106 <receiving_data_uart+0x6>
 800120e:	bf00      	nop
 8001210:	20000094 	.word	0x20000094
 8001214:	2000019c 	.word	0x2000019c
 8001218:	0800bbe4 	.word	0x0800bbe4
 800121c:	0800bbe8 	.word	0x0800bbe8
 8001220:	48000400 	.word	0x48000400
 8001224:	0800bbec 	.word	0x0800bbec
 8001228:	20000150 	.word	0x20000150
 800122c:	00000000 	.word	0x00000000

08001230 <update_CCR_timer_PWM>:
    }
}


void update_CCR_timer_PWM(uint32_t cmd_angle_deg, TIM_HandleTypeDef * htim)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
	if (cmd_angle_deg < 0)
	{
		cmd_angle_deg = 0;
	} else if (cmd_angle_deg > 180)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2bb4      	cmp	r3, #180	; 0xb4
 800123e:	d901      	bls.n	8001244 <update_CCR_timer_PWM+0x14>
	{
		cmd_angle_deg = 180;
 8001240:	23b4      	movs	r3, #180	; 0xb4
 8001242:	607b      	str	r3, [r7, #4]
	}
	uint32_t ARR_timer = htim->Instance->ARR;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800124a:	613b      	str	r3, [r7, #16]

	uint32_t CCR_value_180_deg = angle_180_duty_ratio_PWM*ARR_timer/100; //2100 here
 800124c:	6938      	ldr	r0, [r7, #16]
 800124e:	f7ff f969 	bl	8000524 <__aeabi_ui2d>
 8001252:	a32d      	add	r3, pc, #180	; (adr r3, 8001308 <update_CCR_timer_PWM+0xd8>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f9de 	bl	8000618 <__aeabi_dmul>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	4b25      	ldr	r3, [pc, #148]	; (8001300 <update_CCR_timer_PWM+0xd0>)
 800126a:	f7ff faff 	bl	800086c <__aeabi_ddiv>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4610      	mov	r0, r2
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fbe1 	bl	8000a3c <__aeabi_d2uiz>
 800127a:	4603      	mov	r3, r0
 800127c:	60fb      	str	r3, [r7, #12]
	uint32_t CCR_value_0_deg = angle_0_duty_ratio_PWM*ARR_timer/100; // 450 here
 800127e:	6938      	ldr	r0, [r7, #16]
 8001280:	f7ff f950 	bl	8000524 <__aeabi_ui2d>
 8001284:	a31c      	add	r3, pc, #112	; (adr r3, 80012f8 <update_CCR_timer_PWM+0xc8>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f9c5 	bl	8000618 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	f04f 0200 	mov.w	r2, #0
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <update_CCR_timer_PWM+0xd0>)
 800129c:	f7ff fae6 	bl	800086c <__aeabi_ddiv>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fbc8 	bl	8000a3c <__aeabi_d2uiz>
 80012ac:	4603      	mov	r3, r0
 80012ae:	60bb      	str	r3, [r7, #8]

	int CCR_required = (CCR_value_180_deg-CCR_value_0_deg) * cmd_angle_deg / 180 + CCR_value_0_deg;
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <update_CCR_timer_PWM+0xd4>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	089a      	lsrs	r2, r3, #2
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	4413      	add	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]

	if (CCR_required > CCR_value_180_deg)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d202      	bcs.n	80012da <update_CCR_timer_PWM+0xaa>
	{
		CCR_required = CCR_value_180_deg ;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e005      	b.n	80012e6 <update_CCR_timer_PWM+0xb6>
	} else if (CCR_required < CCR_value_0_deg)
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	68ba      	ldr	r2, [r7, #8]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d901      	bls.n	80012e6 <update_CCR_timer_PWM+0xb6>
	{
		CCR_required = CCR_value_0_deg;
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	617b      	str	r3, [r7, #20]
	}
	htim->Instance->CCR1=CCR_required;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012ee:	bf00      	nop
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	47ae147b 	.word	0x47ae147b
 80012fc:	40067ae1 	.word	0x40067ae1
 8001300:	40590000 	.word	0x40590000
 8001304:	16c16c17 	.word	0x16c16c17
 8001308:	5c28f5c3 	.word	0x5c28f5c3
 800130c:	402a428f 	.word	0x402a428f

08001310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001314:	f000 fdb0 	bl	8001e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001318:	f000 f84c 	bl	80013b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800131c:	f000 fa4a 	bl	80017b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001320:	f000 fa18 	bl	8001754 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001324:	f000 f898 	bl	8001458 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001328:	f000 f90c 	bl	8001544 <MX_TIM1_Init>
  MX_TIM3_Init();
 800132c:	f000 f99a 	bl	8001664 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Init(&htim3);
 8001330:	4816      	ldr	r0, [pc, #88]	; (800138c <main+0x7c>)
 8001332:	f004 f86b 	bl	800540c <HAL_TIM_PWM_Init>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001336:	2100      	movs	r1, #0
 8001338:	4814      	ldr	r0, [pc, #80]	; (800138c <main+0x7c>)
 800133a:	f004 f8c9 	bl	80054d0 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800133e:	f005 ffff 	bl	8007340 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  uartMutex = osMutexNew(NULL);
 8001342:	2000      	movs	r0, #0
 8001344:	f006 f908 	bl	8007558 <osMutexNew>
 8001348:	4603      	mov	r3, r0
 800134a:	4a11      	ldr	r2, [pc, #68]	; (8001390 <main+0x80>)
 800134c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800134e:	4a11      	ldr	r2, [pc, #68]	; (8001394 <main+0x84>)
 8001350:	2100      	movs	r1, #0
 8001352:	4811      	ldr	r0, [pc, #68]	; (8001398 <main+0x88>)
 8001354:	f006 f853 	bl	80073fe <osThreadNew>
 8001358:	4603      	mov	r3, r0
 800135a:	4a10      	ldr	r2, [pc, #64]	; (800139c <main+0x8c>)
 800135c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* Create tasks */
  senderThreadId = osThreadNew(sending_data_uart, NULL, &senderTask_attributes);
 800135e:	4a10      	ldr	r2, [pc, #64]	; (80013a0 <main+0x90>)
 8001360:	2100      	movs	r1, #0
 8001362:	4810      	ldr	r0, [pc, #64]	; (80013a4 <main+0x94>)
 8001364:	f006 f84b 	bl	80073fe <osThreadNew>
 8001368:	4603      	mov	r3, r0
 800136a:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <main+0x98>)
 800136c:	6013      	str	r3, [r2, #0]
  receiverThreadId = osThreadNew(receiving_data_uart, NULL, NULL);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	480e      	ldr	r0, [pc, #56]	; (80013ac <main+0x9c>)
 8001374:	f006 f843 	bl	80073fe <osThreadNew>
 8001378:	4603      	mov	r3, r0
 800137a:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <main+0xa0>)
 800137c:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  update_CCR_timer_PWM(90,&htim3);
 800137e:	4903      	ldr	r1, [pc, #12]	; (800138c <main+0x7c>)
 8001380:	205a      	movs	r0, #90	; 0x5a
 8001382:	f7ff ff55 	bl	8001230 <update_CCR_timer_PWM>
//update_CCR_timer_PWM(0,&htim3);
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001386:	f005 ffff 	bl	8007388 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800138a:	e7fe      	b.n	800138a <main+0x7a>
 800138c:	20000150 	.word	0x20000150
 8001390:	20000094 	.word	0x20000094
 8001394:	0800bc38 	.word	0x0800bc38
 8001398:	080018c9 	.word	0x080018c9
 800139c:	20000224 	.word	0x20000224
 80013a0:	0800bc14 	.word	0x0800bc14
 80013a4:	08001055 	.word	0x08001055
 80013a8:	20000098 	.word	0x20000098
 80013ac:	08001101 	.word	0x08001101
 80013b0:	2000009c 	.word	0x2000009c

080013b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b096      	sub	sp, #88	; 0x58
 80013b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	2244      	movs	r2, #68	; 0x44
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f009 fb17 	bl	800a9f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013c8:	463b      	mov	r3, r7
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013d6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013da:	f002 fc57 	bl	8003c8c <HAL_PWREx_ControlVoltageScaling>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013e4:	f000 fa78 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013e8:	2302      	movs	r3, #2
 80013ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f2:	2310      	movs	r3, #16
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013f6:	2302      	movs	r3, #2
 80013f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013fa:	2302      	movs	r3, #2
 80013fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013fe:	2301      	movs	r3, #1
 8001400:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001402:	230a      	movs	r3, #10
 8001404:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001406:	2307      	movs	r3, #7
 8001408:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800140a:	2302      	movs	r3, #2
 800140c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800140e:	2302      	movs	r3, #2
 8001410:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4618      	mov	r0, r3
 8001418:	f002 fc8e 	bl	8003d38 <HAL_RCC_OscConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001422:	f000 fa59 	bl	80018d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001426:	230f      	movs	r3, #15
 8001428:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142a:	2303      	movs	r3, #3
 800142c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800143a:	463b      	mov	r3, r7
 800143c:	2104      	movs	r1, #4
 800143e:	4618      	mov	r0, r3
 8001440:	f003 f856 	bl	80044f0 <HAL_RCC_ClockConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800144a:	f000 fa45 	bl	80018d8 <Error_Handler>
  }
}
 800144e:	bf00      	nop
 8001450:	3758      	adds	r7, #88	; 0x58
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800147a:	4b2f      	ldr	r3, [pc, #188]	; (8001538 <MX_ADC1_Init+0xe0>)
 800147c:	4a2f      	ldr	r2, [pc, #188]	; (800153c <MX_ADC1_Init+0xe4>)
 800147e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001480:	4b2d      	ldr	r3, [pc, #180]	; (8001538 <MX_ADC1_Init+0xe0>)
 8001482:	2200      	movs	r2, #0
 8001484:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001486:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <MX_ADC1_Init+0xe0>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <MX_ADC1_Init+0xe0>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001492:	4b29      	ldr	r3, [pc, #164]	; (8001538 <MX_ADC1_Init+0xe0>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001498:	4b27      	ldr	r3, [pc, #156]	; (8001538 <MX_ADC1_Init+0xe0>)
 800149a:	2204      	movs	r2, #4
 800149c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <MX_ADC1_Init+0xe0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014a4:	4b24      	ldr	r3, [pc, #144]	; (8001538 <MX_ADC1_Init+0xe0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80014aa:	4b23      	ldr	r3, [pc, #140]	; (8001538 <MX_ADC1_Init+0xe0>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014b0:	4b21      	ldr	r3, [pc, #132]	; (8001538 <MX_ADC1_Init+0xe0>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014b8:	4b1f      	ldr	r3, [pc, #124]	; (8001538 <MX_ADC1_Init+0xe0>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014be:	4b1e      	ldr	r3, [pc, #120]	; (8001538 <MX_ADC1_Init+0xe0>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <MX_ADC1_Init+0xe0>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80014cc:	4b1a      	ldr	r3, [pc, #104]	; (8001538 <MX_ADC1_Init+0xe0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80014d2:	4b19      	ldr	r3, [pc, #100]	; (8001538 <MX_ADC1_Init+0xe0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014da:	4817      	ldr	r0, [pc, #92]	; (8001538 <MX_ADC1_Init+0xe0>)
 80014dc:	f000 ff7a 	bl	80023d4 <HAL_ADC_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80014e6:	f000 f9f7 	bl	80018d8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	4619      	mov	r1, r3
 80014f4:	4810      	ldr	r0, [pc, #64]	; (8001538 <MX_ADC1_Init+0xe0>)
 80014f6:	f002 f84b 	bl	8003590 <HAL_ADCEx_MultiModeConfigChannel>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001500:	f000 f9ea 	bl	80018d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001504:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_ADC1_Init+0xe8>)
 8001506:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001508:	2306      	movs	r3, #6
 800150a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001510:	237f      	movs	r3, #127	; 0x7f
 8001512:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001514:	2304      	movs	r3, #4
 8001516:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <MX_ADC1_Init+0xe0>)
 8001522:	f001 fa7b 	bl	8002a1c <HAL_ADC_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800152c:	f000 f9d4 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	3728      	adds	r7, #40	; 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	200000a0 	.word	0x200000a0
 800153c:	50040000 	.word	0x50040000
 8001540:	14f00020 	.word	0x14f00020

08001544 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b096      	sub	sp, #88	; 0x58
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001556:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800156a:	1d3b      	adds	r3, r7, #4
 800156c:	222c      	movs	r2, #44	; 0x2c
 800156e:	2100      	movs	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f009 fa40 	bl	800a9f6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001576:	4b39      	ldr	r3, [pc, #228]	; (800165c <MX_TIM1_Init+0x118>)
 8001578:	4a39      	ldr	r2, [pc, #228]	; (8001660 <MX_TIM1_Init+0x11c>)
 800157a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800157c:	4b37      	ldr	r3, [pc, #220]	; (800165c <MX_TIM1_Init+0x118>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b36      	ldr	r3, [pc, #216]	; (800165c <MX_TIM1_Init+0x118>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001588:	4b34      	ldr	r3, [pc, #208]	; (800165c <MX_TIM1_Init+0x118>)
 800158a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001590:	4b32      	ldr	r3, [pc, #200]	; (800165c <MX_TIM1_Init+0x118>)
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001596:	4b31      	ldr	r3, [pc, #196]	; (800165c <MX_TIM1_Init+0x118>)
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159c:	4b2f      	ldr	r3, [pc, #188]	; (800165c <MX_TIM1_Init+0x118>)
 800159e:	2200      	movs	r2, #0
 80015a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80015a2:	482e      	ldr	r0, [pc, #184]	; (800165c <MX_TIM1_Init+0x118>)
 80015a4:	f003 fedb 	bl	800535e <HAL_TIM_OC_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80015ae:	f000 f993 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015c2:	4619      	mov	r1, r3
 80015c4:	4825      	ldr	r0, [pc, #148]	; (800165c <MX_TIM1_Init+0x118>)
 80015c6:	f004 ff11 	bl	80063ec <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015d0:	f000 f982 	bl	80018d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80015d4:	2300      	movs	r3, #0
 80015d6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015dc:	2300      	movs	r3, #0
 80015de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015e0:	2300      	movs	r3, #0
 80015e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015e4:	2300      	movs	r3, #0
 80015e6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015f4:	2200      	movs	r2, #0
 80015f6:	4619      	mov	r1, r3
 80015f8:	4818      	ldr	r0, [pc, #96]	; (800165c <MX_TIM1_Init+0x118>)
 80015fa:	f004 f86f 	bl	80056dc <HAL_TIM_OC_ConfigChannel>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001604:	f000 f968 	bl	80018d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800161c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001620:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800162a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	4619      	mov	r1, r3
 800163c:	4807      	ldr	r0, [pc, #28]	; (800165c <MX_TIM1_Init+0x118>)
 800163e:	f004 ff5d 	bl	80064fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001648:	f000 f946 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800164c:	4803      	ldr	r0, [pc, #12]	; (800165c <MX_TIM1_Init+0x118>)
 800164e:	f000 fa37 	bl	8001ac0 <HAL_TIM_MspPostInit>

}
 8001652:	bf00      	nop
 8001654:	3758      	adds	r7, #88	; 0x58
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000104 	.word	0x20000104
 8001660:	40012c00 	.word	0x40012c00

08001664 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08e      	sub	sp, #56	; 0x38
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	f107 031c 	add.w	r3, r7, #28
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001684:	463b      	mov	r3, r7
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]
 8001692:	615a      	str	r2, [r3, #20]
 8001694:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001696:	4b2d      	ldr	r3, [pc, #180]	; (800174c <MX_TIM3_Init+0xe8>)
 8001698:	4a2d      	ldr	r2, [pc, #180]	; (8001750 <MX_TIM3_Init+0xec>)
 800169a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800169c:	4b2b      	ldr	r3, [pc, #172]	; (800174c <MX_TIM3_Init+0xe8>)
 800169e:	2263      	movs	r2, #99	; 0x63
 80016a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a2:	4b2a      	ldr	r3, [pc, #168]	; (800174c <MX_TIM3_Init+0xe8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16000;
 80016a8:	4b28      	ldr	r3, [pc, #160]	; (800174c <MX_TIM3_Init+0xe8>)
 80016aa:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80016ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b0:	4b26      	ldr	r3, [pc, #152]	; (800174c <MX_TIM3_Init+0xe8>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b6:	4b25      	ldr	r3, [pc, #148]	; (800174c <MX_TIM3_Init+0xe8>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016bc:	4823      	ldr	r0, [pc, #140]	; (800174c <MX_TIM3_Init+0xe8>)
 80016be:	f003 fdf7 	bl	80052b0 <HAL_TIM_Base_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80016c8:	f000 f906 	bl	80018d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016d6:	4619      	mov	r1, r3
 80016d8:	481c      	ldr	r0, [pc, #112]	; (800174c <MX_TIM3_Init+0xe8>)
 80016da:	f004 f98d 	bl	80059f8 <HAL_TIM_ConfigClockSource>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80016e4:	f000 f8f8 	bl	80018d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016e8:	4818      	ldr	r0, [pc, #96]	; (800174c <MX_TIM3_Init+0xe8>)
 80016ea:	f003 fe8f 	bl	800540c <HAL_TIM_PWM_Init>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80016f4:	f000 f8f0 	bl	80018d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	4619      	mov	r1, r3
 8001706:	4811      	ldr	r0, [pc, #68]	; (800174c <MX_TIM3_Init+0xe8>)
 8001708:	f004 fe70 	bl	80063ec <HAL_TIMEx_MasterConfigSynchronization>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001712:	f000 f8e1 	bl	80018d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001716:	2360      	movs	r3, #96	; 0x60
 8001718:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1500;
 800171a:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800171e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001728:	463b      	mov	r3, r7
 800172a:	2200      	movs	r2, #0
 800172c:	4619      	mov	r1, r3
 800172e:	4807      	ldr	r0, [pc, #28]	; (800174c <MX_TIM3_Init+0xe8>)
 8001730:	f004 f84e 	bl	80057d0 <HAL_TIM_PWM_ConfigChannel>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 800173a:	f000 f8cd 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800173e:	4803      	ldr	r0, [pc, #12]	; (800174c <MX_TIM3_Init+0xe8>)
 8001740:	f000 f9be 	bl	8001ac0 <HAL_TIM_MspPostInit>

}
 8001744:	bf00      	nop
 8001746:	3738      	adds	r7, #56	; 0x38
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	20000150 	.word	0x20000150
 8001750:	40000400 	.word	0x40000400

08001754 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <MX_USART2_UART_Init+0x58>)
 800175a:	4a15      	ldr	r2, [pc, #84]	; (80017b0 <MX_USART2_UART_Init+0x5c>)
 800175c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <MX_USART2_UART_Init+0x58>)
 8001760:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001764:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART2_UART_Init+0x58>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_USART2_UART_Init+0x58>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART2_UART_Init+0x58>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART2_UART_Init+0x58>)
 800177a:	220c      	movs	r2, #12
 800177c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART2_UART_Init+0x58>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART2_UART_Init+0x58>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART2_UART_Init+0x58>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART2_UART_Init+0x58>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART2_UART_Init+0x58>)
 8001798:	f004 ff2e 	bl	80065f8 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017a2:	f000 f899 	bl	80018d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000019c 	.word	0x2000019c
 80017b0:	40004400 	.word	0x40004400

080017b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ba:	f107 030c 	add.w	r3, r7, #12
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	605a      	str	r2, [r3, #4]
 80017c4:	609a      	str	r2, [r3, #8]
 80017c6:	60da      	str	r2, [r3, #12]
 80017c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ca:	4b3c      	ldr	r3, [pc, #240]	; (80018bc <MX_GPIO_Init+0x108>)
 80017cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ce:	4a3b      	ldr	r2, [pc, #236]	; (80018bc <MX_GPIO_Init+0x108>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d6:	4b39      	ldr	r3, [pc, #228]	; (80018bc <MX_GPIO_Init+0x108>)
 80017d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	4b36      	ldr	r3, [pc, #216]	; (80018bc <MX_GPIO_Init+0x108>)
 80017e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e6:	4a35      	ldr	r2, [pc, #212]	; (80018bc <MX_GPIO_Init+0x108>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ee:	4b33      	ldr	r3, [pc, #204]	; (80018bc <MX_GPIO_Init+0x108>)
 80017f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	4b30      	ldr	r3, [pc, #192]	; (80018bc <MX_GPIO_Init+0x108>)
 80017fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fe:	4a2f      	ldr	r2, [pc, #188]	; (80018bc <MX_GPIO_Init+0x108>)
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <MX_GPIO_Init+0x108>)
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001812:	2200      	movs	r2, #0
 8001814:	2120      	movs	r1, #32
 8001816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181a:	f002 fa11 	bl	8003c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D5___BUZZER_Pin|D4___RELAIS_Pin, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	2130      	movs	r1, #48	; 0x30
 8001822:	4827      	ldr	r0, [pc, #156]	; (80018c0 <MX_GPIO_Init+0x10c>)
 8001824:	f002 fa0c 	bl	8003c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800182c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800182e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	4619      	mov	r1, r3
 800183e:	4821      	ldr	r0, [pc, #132]	; (80018c4 <MX_GPIO_Init+0x110>)
 8001840:	f002 f83c 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001844:	2320      	movs	r3, #32
 8001846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001848:	2301      	movs	r3, #1
 800184a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4619      	mov	r1, r3
 800185a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185e:	f002 f82d 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : D2___IR_SENSOR2_Pin */
  GPIO_InitStruct.Pin = D2___IR_SENSOR2_Pin;
 8001862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001866:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D2___IR_SENSOR2_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	4619      	mov	r1, r3
 8001876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187a:	f002 f81f 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pin : D3___IR_SENSOR4_Pin */
  GPIO_InitStruct.Pin = D3___IR_SENSOR4_Pin;
 800187e:	2308      	movs	r3, #8
 8001880:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D3___IR_SENSOR4_GPIO_Port, &GPIO_InitStruct);
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	4619      	mov	r1, r3
 8001890:	480b      	ldr	r0, [pc, #44]	; (80018c0 <MX_GPIO_Init+0x10c>)
 8001892:	f002 f813 	bl	80038bc <HAL_GPIO_Init>

  /*Configure GPIO pins : D5___BUZZER_Pin D4___RELAIS_Pin */
  GPIO_InitStruct.Pin = D5___BUZZER_Pin|D4___RELAIS_Pin;
 8001896:	2330      	movs	r3, #48	; 0x30
 8001898:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189a:	2301      	movs	r3, #1
 800189c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a6:	f107 030c 	add.w	r3, r7, #12
 80018aa:	4619      	mov	r1, r3
 80018ac:	4804      	ldr	r0, [pc, #16]	; (80018c0 <MX_GPIO_Init+0x10c>)
 80018ae:	f002 f805 	bl	80038bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b2:	bf00      	nop
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40021000 	.word	0x40021000
 80018c0:	48000400 	.word	0x48000400
 80018c4:	48000800 	.word	0x48000800

080018c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80018d0:	2001      	movs	r0, #1
 80018d2:	f005 fe26 	bl	8007522 <osDelay>
 80018d6:	e7fb      	b.n	80018d0 <StartDefaultTask+0x8>

080018d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <Error_Handler+0x8>
	...

080018e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <HAL_MspInit+0x4c>)
 80018ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ee:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_MspInit+0x4c>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6613      	str	r3, [r2, #96]	; 0x60
 80018f6:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_MspInit+0x4c>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_MspInit+0x4c>)
 8001904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001906:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_MspInit+0x4c>)
 8001908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800190c:	6593      	str	r3, [r2, #88]	; 0x58
 800190e:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_MspInit+0x4c>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	210f      	movs	r1, #15
 800191e:	f06f 0001 	mvn.w	r0, #1
 8001922:	f001 ffa2 	bl	800386a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	3708      	adds	r7, #8
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000

08001934 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0ac      	sub	sp, #176	; 0xb0
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
 8001946:	609a      	str	r2, [r3, #8]
 8001948:	60da      	str	r2, [r3, #12]
 800194a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	2288      	movs	r2, #136	; 0x88
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f009 f84e 	bl	800a9f6 <memset>
  if(hadc->Instance==ADC1)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a35      	ldr	r2, [pc, #212]	; (8001a34 <HAL_ADC_MspInit+0x100>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d162      	bne.n	8001a2a <HAL_ADC_MspInit+0xf6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001964:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001968:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800196a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800196e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001972:	2302      	movs	r3, #2
 8001974:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001976:	2301      	movs	r3, #1
 8001978:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800197a:	2308      	movs	r3, #8
 800197c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800197e:	2307      	movs	r3, #7
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001982:	2302      	movs	r3, #2
 8001984:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001986:	2302      	movs	r3, #2
 8001988:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800198a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001990:	f107 0314 	add.w	r3, r7, #20
 8001994:	4618      	mov	r0, r3
 8001996:	f002 ffcf 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80019a0:	f7ff ff9a 	bl	80018d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <HAL_ADC_MspInit+0x104>)
 80019a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019a8:	4a23      	ldr	r2, [pc, #140]	; (8001a38 <HAL_ADC_MspInit+0x104>)
 80019aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <HAL_ADC_MspInit+0x104>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019bc:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <HAL_ADC_MspInit+0x104>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c0:	4a1d      	ldr	r2, [pc, #116]	; (8001a38 <HAL_ADC_MspInit+0x104>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_ADC_MspInit+0x104>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d4:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <HAL_ADC_MspInit+0x104>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d8:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <HAL_ADC_MspInit+0x104>)
 80019da:	f043 0302 	orr.w	r3, r3, #2
 80019de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019e0:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_ADC_MspInit+0x104>)
 80019e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    PA4     ------> ADC1_IN9
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = A0___IR_SENSOR1_Pin|A1___IR_SENSOR3_Pin|A2___SMOKE_SENSOR1_Pin;
 80019ec:	2313      	movs	r3, #19
 80019ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019f2:	230b      	movs	r3, #11
 80019f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a02:	4619      	mov	r1, r3
 8001a04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a08:	f001 ff58 	bl	80038bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = A2___SMOKE_SENSOR2_Pin;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001a12:	230b      	movs	r3, #11
 8001a14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(A2___SMOKE_SENSOR2_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a22:	4619      	mov	r1, r3
 8001a24:	4805      	ldr	r0, [pc, #20]	; (8001a3c <HAL_ADC_MspInit+0x108>)
 8001a26:	f001 ff49 	bl	80038bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	37b0      	adds	r7, #176	; 0xb0
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	50040000 	.word	0x50040000
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	48000400 	.word	0x48000400

08001a40 <HAL_TIM_OC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_oc: TIM_OC handle pointer
* @retval None
*/
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a0a      	ldr	r2, [pc, #40]	; (8001a78 <HAL_TIM_OC_MspInit+0x38>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10b      	bne.n	8001a6a <HAL_TIM_OC_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a52:	4b0a      	ldr	r3, [pc, #40]	; (8001a7c <HAL_TIM_OC_MspInit+0x3c>)
 8001a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a56:	4a09      	ldr	r2, [pc, #36]	; (8001a7c <HAL_TIM_OC_MspInit+0x3c>)
 8001a58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_TIM_OC_MspInit+0x3c>)
 8001a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40012c00 	.word	0x40012c00
 8001a7c:	40021000 	.word	0x40021000

08001a80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <HAL_TIM_Base_MspInit+0x38>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d10b      	bne.n	8001aaa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <HAL_TIM_Base_MspInit+0x3c>)
 8001a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a96:	4a09      	ldr	r2, [pc, #36]	; (8001abc <HAL_TIM_Base_MspInit+0x3c>)
 8001a98:	f043 0302 	orr.w	r3, r3, #2
 8001a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8001a9e:	4b07      	ldr	r3, [pc, #28]	; (8001abc <HAL_TIM_Base_MspInit+0x3c>)
 8001aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	60fb      	str	r3, [r7, #12]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001aaa:	bf00      	nop
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40000400 	.word	0x40000400
 8001abc:	40021000 	.word	0x40021000

08001ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08a      	sub	sp, #40	; 0x28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0314 	add.w	r3, r7, #20
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a23      	ldr	r2, [pc, #140]	; (8001b6c <HAL_TIM_MspPostInit+0xac>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d11e      	bne.n	8001b20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <HAL_TIM_MspPostInit+0xb0>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae6:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <HAL_TIM_MspPostInit+0xb0>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aee:	4b20      	ldr	r3, [pc, #128]	; (8001b70 <HAL_TIM_MspPostInit+0xb0>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001afa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	f107 0314 	add.w	r3, r7, #20
 8001b14:	4619      	mov	r1, r3
 8001b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1a:	f001 fecf 	bl	80038bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b1e:	e021      	b.n	8001b64 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM3)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a13      	ldr	r2, [pc, #76]	; (8001b74 <HAL_TIM_MspPostInit+0xb4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d11c      	bne.n	8001b64 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <HAL_TIM_MspPostInit+0xb0>)
 8001b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2e:	4a10      	ldr	r2, [pc, #64]	; (8001b70 <HAL_TIM_MspPostInit+0xb0>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <HAL_TIM_MspPostInit+0xb0>)
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b42:	2340      	movs	r3, #64	; 0x40
 8001b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b52:	2302      	movs	r3, #2
 8001b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b60:	f001 feac 	bl	80038bc <HAL_GPIO_Init>
}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	; 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40012c00 	.word	0x40012c00
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40000400 	.word	0x40000400

08001b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0ac      	sub	sp, #176	; 0xb0
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b90:	f107 0314 	add.w	r3, r7, #20
 8001b94:	2288      	movs	r2, #136	; 0x88
 8001b96:	2100      	movs	r1, #0
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f008 ff2c 	bl	800a9f6 <memset>
  if(huart->Instance==USART2)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a21      	ldr	r2, [pc, #132]	; (8001c28 <HAL_UART_MspInit+0xb0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d13b      	bne.n	8001c20 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 febf 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bc0:	f7ff fe8a 	bl	80018d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc4:	4b19      	ldr	r3, [pc, #100]	; (8001c2c <HAL_UART_MspInit+0xb4>)
 8001bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc8:	4a18      	ldr	r2, [pc, #96]	; (8001c2c <HAL_UART_MspInit+0xb4>)
 8001bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bce:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_UART_MspInit+0xb4>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <HAL_UART_MspInit+0xb4>)
 8001bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be0:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <HAL_UART_MspInit+0xb4>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be8:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <HAL_UART_MspInit+0xb4>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bf4:	230c      	movs	r3, #12
 8001bf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c06:	2303      	movs	r3, #3
 8001c08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c0c:	2307      	movs	r3, #7
 8001c0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c16:	4619      	mov	r1, r3
 8001c18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1c:	f001 fe4e 	bl	80038bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c20:	bf00      	nop
 8001c22:	37b0      	adds	r7, #176	; 0xb0
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40004400 	.word	0x40004400
 8001c2c:	40021000 	.word	0x40021000

08001c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c34:	e7fe      	b.n	8001c34 <NMI_Handler+0x4>

08001c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3a:	e7fe      	b.n	8001c3a <HardFault_Handler+0x4>

08001c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c40:	e7fe      	b.n	8001c40 <MemManage_Handler+0x4>

08001c42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c46:	e7fe      	b.n	8001c46 <BusFault_Handler+0x4>

08001c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <UsageFault_Handler+0x4>

08001c4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c60:	f000 f966 	bl	8001f30 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001c64:	f007 fbae 	bl	80093c4 <xTaskGetSchedulerState>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d001      	beq.n	8001c72 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001c6e:	f008 fa93 	bl	800a198 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  return 1;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_kill>:

int _kill(int pid, int sig)
{
 8001c86:	b580      	push	{r7, lr}
 8001c88:	b082      	sub	sp, #8
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c90:	f008 ff5c 	bl	800ab4c <__errno>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2216      	movs	r2, #22
 8001c98:	601a      	str	r2, [r3, #0]
  return -1;
 8001c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_exit>:

void _exit (int status)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ffe7 	bl	8001c86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cb8:	e7fe      	b.n	8001cb8 <_exit+0x12>

08001cba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b086      	sub	sp, #24
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	e00a      	b.n	8001ce2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	4601      	mov	r1, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	60ba      	str	r2, [r7, #8]
 8001cd8:	b2ca      	uxtb	r2, r1
 8001cda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	dbf0      	blt.n	8001ccc <_read+0x12>
  }

  return len;
 8001cea:	687b      	ldr	r3, [r7, #4]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
 8001d04:	e009      	b.n	8001d1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	60ba      	str	r2, [r7, #8]
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	3301      	adds	r3, #1
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	dbf1      	blt.n	8001d06 <_write+0x12>
  }
  return len;
 8001d22:	687b      	ldr	r3, [r7, #4]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3718      	adds	r7, #24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_close>:

int _close(int file)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d54:	605a      	str	r2, [r3, #4]
  return 0;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <_isatty>:

int _isatty(int file)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d6c:	2301      	movs	r3, #1
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <_sbrk+0x5c>)
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <_sbrk+0x60>)
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <_sbrk+0x64>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <_sbrk+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d207      	bcs.n	8001dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc4:	f008 fec2 	bl	800ab4c <__errno>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	220c      	movs	r2, #12
 8001dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dd2:	e009      	b.n	8001de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <_sbrk+0x64>)
 8001de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20018000 	.word	0x20018000
 8001df4:	00000400 	.word	0x00000400
 8001df8:	20000228 	.word	0x20000228
 8001dfc:	20001c88 	.word	0x20001c88

08001e00 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <SystemInit+0x20>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <SystemInit+0x20>)
 8001e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e28:	f7ff ffea 	bl	8001e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e2c:	480c      	ldr	r0, [pc, #48]	; (8001e60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e2e:	490d      	ldr	r1, [pc, #52]	; (8001e64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <LoopForever+0xe>)
  movs r3, #0
 8001e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e34:	e002      	b.n	8001e3c <LoopCopyDataInit>

08001e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e3a:	3304      	adds	r3, #4

08001e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e40:	d3f9      	bcc.n	8001e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e44:	4c0a      	ldr	r4, [pc, #40]	; (8001e70 <LoopForever+0x16>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e48:	e001      	b.n	8001e4e <LoopFillZerobss>

08001e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e4c:	3204      	adds	r2, #4

08001e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e50:	d3fb      	bcc.n	8001e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e52:	f008 fe81 	bl	800ab58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e56:	f7ff fa5b 	bl	8001310 <main>

08001e5a <LoopForever>:

LoopForever:
    b LoopForever
 8001e5a:	e7fe      	b.n	8001e5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e5c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e64:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001e68:	0800be98 	.word	0x0800be98
  ldr r2, =_sbss
 8001e6c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001e70:	20001c84 	.word	0x20001c84

08001e74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e74:	e7fe      	b.n	8001e74 <ADC1_2_IRQHandler>
	...

08001e78 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <HAL_Init+0x3c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <HAL_Init+0x3c>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e8e:	2003      	movs	r0, #3
 8001e90:	f001 fce0 	bl	8003854 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e94:	200f      	movs	r0, #15
 8001e96:	f000 f80f 	bl	8001eb8 <HAL_InitTick>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	71fb      	strb	r3, [r7, #7]
 8001ea4:	e001      	b.n	8001eaa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ea6:	f7ff fd1d 	bl	80018e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40022000 	.word	0x40022000

08001eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_InitTick+0x6c>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d023      	beq.n	8001f14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ecc:	4b16      	ldr	r3, [pc, #88]	; (8001f28 <HAL_InitTick+0x70>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_InitTick+0x6c>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f001 fcdd 	bl	80038a2 <HAL_SYSTICK_Config>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d10f      	bne.n	8001f0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b0f      	cmp	r3, #15
 8001ef2:	d809      	bhi.n	8001f08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	6879      	ldr	r1, [r7, #4]
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001efc:	f001 fcb5 	bl	800386a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f00:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <HAL_InitTick+0x74>)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e007      	b.n	8001f18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	73fb      	strb	r3, [r7, #15]
 8001f0c:	e004      	b.n	8001f18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	73fb      	strb	r3, [r7, #15]
 8001f12:	e001      	b.n	8001f18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000008 	.word	0x20000008
 8001f28:	20000000 	.word	0x20000000
 8001f2c:	20000004 	.word	0x20000004

08001f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_IncTick+0x20>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_IncTick+0x24>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	4a04      	ldr	r2, [pc, #16]	; (8001f54 <HAL_IncTick+0x24>)
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	20000008 	.word	0x20000008
 8001f54:	2000022c 	.word	0x2000022c

08001f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <HAL_GetTick+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	2000022c 	.word	0x2000022c

08001f70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	609a      	str	r2, [r3, #8]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	609a      	str	r2, [r3, #8]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3360      	adds	r3, #96	; 0x60
 8001fea:	461a      	mov	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <LL_ADC_SetOffset+0x44>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	4313      	orrs	r3, r2
 8002008:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002010:	bf00      	nop
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	03fff000 	.word	0x03fff000

08002020 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3360      	adds	r3, #96	; 0x60
 800202e:	461a      	mov	r2, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3360      	adds	r3, #96	; 0x60
 800205c:	461a      	mov	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	431a      	orrs	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002076:	bf00      	nop
 8002078:	371c      	adds	r7, #28
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002096:	2301      	movs	r3, #1
 8002098:	e000      	b.n	800209c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	3330      	adds	r3, #48	; 0x30
 80020b8:	461a      	mov	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	4413      	add	r3, r2
 80020c6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	211f      	movs	r1, #31
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	401a      	ands	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	0e9b      	lsrs	r3, r3, #26
 80020e0:	f003 011f 	and.w	r1, r3, #31
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	431a      	orrs	r2, r3
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020f4:	bf00      	nop
 80020f6:	371c      	adds	r7, #28
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002100:	b480      	push	{r7}
 8002102:	b087      	sub	sp, #28
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3314      	adds	r3, #20
 8002110:	461a      	mov	r2, r3
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	0e5b      	lsrs	r3, r3, #25
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	4413      	add	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	0d1b      	lsrs	r3, r3, #20
 8002128:	f003 031f 	and.w	r3, r3, #31
 800212c:	2107      	movs	r1, #7
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	401a      	ands	r2, r3
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	0d1b      	lsrs	r3, r3, #20
 800213a:	f003 031f 	and.w	r3, r3, #31
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	fa01 f303 	lsl.w	r3, r1, r3
 8002144:	431a      	orrs	r2, r3
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800214a:	bf00      	nop
 800214c:	371c      	adds	r7, #28
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
	...

08002158 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002170:	43db      	mvns	r3, r3
 8002172:	401a      	ands	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0318 	and.w	r3, r3, #24
 800217a:	4908      	ldr	r1, [pc, #32]	; (800219c <LL_ADC_SetChannelSingleDiff+0x44>)
 800217c:	40d9      	lsrs	r1, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	400b      	ands	r3, r1
 8002182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002186:	431a      	orrs	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	0007ffff 	.word	0x0007ffff

080021a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 031f 	and.w	r3, r3, #31
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80021e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6093      	str	r3, [r2, #8]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800220c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002210:	d101      	bne.n	8002216 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002234:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002238:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002260:	d101      	bne.n	8002266 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002262:	2301      	movs	r3, #1
 8002264:	e000      	b.n	8002268 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002284:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002288:	f043 0201 	orr.w	r2, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022b0:	f043 0202 	orr.w	r2, r3, #2
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d101      	bne.n	80022dc <LL_ADC_IsEnabled+0x18>
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <LL_ADC_IsEnabled+0x1a>
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d101      	bne.n	8002302 <LL_ADC_IsDisableOngoing+0x18>
 80022fe:	2301      	movs	r3, #1
 8002300:	e000      	b.n	8002304 <LL_ADC_IsDisableOngoing+0x1a>
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002320:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002324:	f043 0204 	orr.w	r2, r3, #4
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002348:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800234c:	f043 0210 	orr.w	r2, r3, #16
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b04      	cmp	r3, #4
 8002372:	d101      	bne.n	8002378 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002374:	2301      	movs	r3, #1
 8002376:	e000      	b.n	800237a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002386:	b480      	push	{r7}
 8002388:	b083      	sub	sp, #12
 800238a:	af00      	add	r7, sp, #0
 800238c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002396:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800239a:	f043 0220 	orr.w	r2, r3, #32
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80023ae:	b480      	push	{r7}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d101      	bne.n	80023c6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e000      	b.n	80023c8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023d4:	b590      	push	{r4, r7, lr}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023dc:	2300      	movs	r3, #0
 80023de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e130      	b.n	8002650 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff fa99 	bl	8001934 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fef1 	bl	80021fc <LL_ADC_IsDeepPowerDownEnabled>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d004      	beq.n	800242a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff fed7 	bl	80021d8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff0c 	bl	800224c <LL_ADC_IsInternalRegulatorEnabled>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d115      	bne.n	8002466 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fef0 	bl	8002224 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002444:	4b84      	ldr	r3, [pc, #528]	; (8002658 <HAL_ADC_Init+0x284>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	4a84      	ldr	r2, [pc, #528]	; (800265c <HAL_ADC_Init+0x288>)
 800244c:	fba2 2303 	umull	r2, r3, r2, r3
 8002450:	099b      	lsrs	r3, r3, #6
 8002452:	3301      	adds	r3, #1
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002458:	e002      	b.n	8002460 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	3b01      	subs	r3, #1
 800245e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f9      	bne.n	800245a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff feee 	bl	800224c <LL_ADC_IsInternalRegulatorEnabled>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d10d      	bne.n	8002492 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800247a:	f043 0210 	orr.w	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	f043 0201 	orr.w	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ff62 	bl	8002360 <LL_ADC_REG_IsConversionOngoing>
 800249c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a2:	f003 0310 	and.w	r3, r3, #16
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f040 80c9 	bne.w	800263e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f040 80c5 	bne.w	800263e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024bc:	f043 0202 	orr.w	r2, r3, #2
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fefb 	bl	80022c4 <LL_ADC_IsEnabled>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d115      	bne.n	8002500 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024d4:	4862      	ldr	r0, [pc, #392]	; (8002660 <HAL_ADC_Init+0x28c>)
 80024d6:	f7ff fef5 	bl	80022c4 <LL_ADC_IsEnabled>
 80024da:	4604      	mov	r4, r0
 80024dc:	4861      	ldr	r0, [pc, #388]	; (8002664 <HAL_ADC_Init+0x290>)
 80024de:	f7ff fef1 	bl	80022c4 <LL_ADC_IsEnabled>
 80024e2:	4603      	mov	r3, r0
 80024e4:	431c      	orrs	r4, r3
 80024e6:	4860      	ldr	r0, [pc, #384]	; (8002668 <HAL_ADC_Init+0x294>)
 80024e8:	f7ff feec 	bl	80022c4 <LL_ADC_IsEnabled>
 80024ec:	4603      	mov	r3, r0
 80024ee:	4323      	orrs	r3, r4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d105      	bne.n	8002500 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4619      	mov	r1, r3
 80024fa:	485c      	ldr	r0, [pc, #368]	; (800266c <HAL_ADC_Init+0x298>)
 80024fc:	f7ff fd38 	bl	8001f70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	7e5b      	ldrb	r3, [r3, #25]
 8002504:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800250a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002510:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002516:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800251e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002520:	4313      	orrs	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d106      	bne.n	800253c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	3b01      	subs	r3, #1
 8002534:	045b      	lsls	r3, r3, #17
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	d009      	beq.n	8002558 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	68da      	ldr	r2, [r3, #12]
 800255e:	4b44      	ldr	r3, [pc, #272]	; (8002670 <HAL_ADC_Init+0x29c>)
 8002560:	4013      	ands	r3, r2
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	69b9      	ldr	r1, [r7, #24]
 8002568:	430b      	orrs	r3, r1
 800256a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff ff1c 	bl	80023ae <LL_ADC_INJ_IsConversionOngoing>
 8002576:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d13d      	bne.n	80025fa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d13a      	bne.n	80025fa <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002588:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002590:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025a0:	f023 0302 	bic.w	r3, r3, #2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	69b9      	ldr	r1, [r7, #24]
 80025aa:	430b      	orrs	r3, r1
 80025ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d118      	bne.n	80025ea <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025c2:	f023 0304 	bic.w	r3, r3, #4
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025ce:	4311      	orrs	r1, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025d4:	4311      	orrs	r1, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025da:	430a      	orrs	r2, r1
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	611a      	str	r2, [r3, #16]
 80025e8:	e007      	b.n	80025fa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0201 	bic.w	r2, r2, #1
 80025f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d10c      	bne.n	800261c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	f023 010f 	bic.w	r1, r3, #15
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	69db      	ldr	r3, [r3, #28]
 8002610:	1e5a      	subs	r2, r3, #1
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	430a      	orrs	r2, r1
 8002618:	631a      	str	r2, [r3, #48]	; 0x30
 800261a:	e007      	b.n	800262c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 020f 	bic.w	r2, r2, #15
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002630:	f023 0303 	bic.w	r3, r3, #3
 8002634:	f043 0201 	orr.w	r2, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	655a      	str	r2, [r3, #84]	; 0x54
 800263c:	e007      	b.n	800264e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	f043 0210 	orr.w	r2, r3, #16
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800264e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002650:	4618      	mov	r0, r3
 8002652:	3724      	adds	r7, #36	; 0x24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd90      	pop	{r4, r7, pc}
 8002658:	20000000 	.word	0x20000000
 800265c:	053e2d63 	.word	0x053e2d63
 8002660:	50040000 	.word	0x50040000
 8002664:	50040100 	.word	0x50040100
 8002668:	50040200 	.word	0x50040200
 800266c:	50040300 	.word	0x50040300
 8002670:	fff0c007 	.word	0xfff0c007

08002674 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800267c:	4857      	ldr	r0, [pc, #348]	; (80027dc <HAL_ADC_Start+0x168>)
 800267e:	f7ff fd8f 	bl	80021a0 <LL_ADC_GetMultimode>
 8002682:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fe69 	bl	8002360 <LL_ADC_REG_IsConversionOngoing>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	f040 809c 	bne.w	80027ce <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_Start+0x30>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e097      	b.n	80027d4 <HAL_ADC_Start+0x160>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2201      	movs	r2, #1
 80026a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 fe63 	bl	8003378 <ADC_Enable>
 80026b2:	4603      	mov	r3, r0
 80026b4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026b6:	7dfb      	ldrb	r3, [r7, #23]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f040 8083 	bne.w	80027c4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a42      	ldr	r2, [pc, #264]	; (80027e0 <HAL_ADC_Start+0x16c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d002      	beq.n	80026e2 <HAL_ADC_Start+0x6e>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	e000      	b.n	80026e4 <HAL_ADC_Start+0x70>
 80026e2:	4b40      	ldr	r3, [pc, #256]	; (80027e4 <HAL_ADC_Start+0x170>)
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d002      	beq.n	80026f2 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d105      	bne.n	80026fe <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270a:	d106      	bne.n	800271a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002710:	f023 0206 	bic.w	r2, r3, #6
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	659a      	str	r2, [r3, #88]	; 0x58
 8002718:	e002      	b.n	8002720 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	221c      	movs	r2, #28
 8002726:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a2a      	ldr	r2, [pc, #168]	; (80027e0 <HAL_ADC_Start+0x16c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d002      	beq.n	8002740 <HAL_ADC_Start+0xcc>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	e000      	b.n	8002742 <HAL_ADC_Start+0xce>
 8002740:	4b28      	ldr	r3, [pc, #160]	; (80027e4 <HAL_ADC_Start+0x170>)
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	4293      	cmp	r3, r2
 8002748:	d008      	beq.n	800275c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	2b05      	cmp	r3, #5
 8002754:	d002      	beq.n	800275c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	2b09      	cmp	r3, #9
 800275a:	d114      	bne.n	8002786 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d007      	beq.n	800277a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002772:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7ff fdc6 	bl	8002310 <LL_ADC_REG_StartConversion>
 8002784:	e025      	b.n	80027d2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a12      	ldr	r2, [pc, #72]	; (80027e0 <HAL_ADC_Start+0x16c>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d002      	beq.n	80027a2 <HAL_ADC_Start+0x12e>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	e000      	b.n	80027a4 <HAL_ADC_Start+0x130>
 80027a2:	4b10      	ldr	r3, [pc, #64]	; (80027e4 <HAL_ADC_Start+0x170>)
 80027a4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00f      	beq.n	80027d2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ba:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54
 80027c2:	e006      	b.n	80027d2 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80027cc:	e001      	b.n	80027d2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027ce:	2302      	movs	r3, #2
 80027d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	50040300 	.word	0x50040300
 80027e0:	50040100 	.word	0x50040100
 80027e4:	50040000 	.word	0x50040000

080027e8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_Stop+0x16>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e023      	b.n	8002846 <HAL_ADC_Stop+0x5e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002806:	2103      	movs	r1, #3
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fcf9 	bl	8003200 <ADC_ConversionStop>
 800280e:	4603      	mov	r3, r0
 8002810:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d111      	bne.n	800283c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 fe33 	bl	8003484 <ADC_Disable>
 800281e:	4603      	mov	r3, r0
 8002820:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d109      	bne.n	800283c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	f043 0201 	orr.w	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
	...

08002850 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800285a:	4866      	ldr	r0, [pc, #408]	; (80029f4 <HAL_ADC_PollForConversion+0x1a4>)
 800285c:	f7ff fca0 	bl	80021a0 <LL_ADC_GetMultimode>
 8002860:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	2b08      	cmp	r3, #8
 8002868:	d102      	bne.n	8002870 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800286a:	2308      	movs	r3, #8
 800286c:	61fb      	str	r3, [r7, #28]
 800286e:	e02a      	b.n	80028c6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d005      	beq.n	8002882 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	2b05      	cmp	r3, #5
 800287a:	d002      	beq.n	8002882 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	2b09      	cmp	r3, #9
 8002880:	d111      	bne.n	80028a6 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	f043 0220 	orr.w	r2, r3, #32
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0a4      	b.n	80029ea <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028a0:	2304      	movs	r3, #4
 80028a2:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80028a4:	e00f      	b.n	80028c6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80028a6:	4853      	ldr	r0, [pc, #332]	; (80029f4 <HAL_ADC_PollForConversion+0x1a4>)
 80028a8:	f7ff fc88 	bl	80021bc <LL_ADC_GetMultiDMATransfer>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	f043 0220 	orr.w	r2, r3, #32
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e093      	b.n	80029ea <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80028c2:	2304      	movs	r3, #4
 80028c4:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80028c6:	f7ff fb47 	bl	8001f58 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028cc:	e021      	b.n	8002912 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028d4:	d01d      	beq.n	8002912 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028d6:	f7ff fb3f 	bl	8001f58 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d302      	bcc.n	80028ec <HAL_ADC_PollForConversion+0x9c>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d112      	bne.n	8002912 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10b      	bne.n	8002912 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fe:	f043 0204 	orr.w	r2, r3, #4
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e06b      	b.n	80029ea <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0d6      	beq.n	80028ce <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002924:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fba6 	bl	8002082 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01c      	beq.n	8002976 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	7e5b      	ldrb	r3, [r3, #25]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d118      	bne.n	8002976 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b08      	cmp	r3, #8
 8002950:	d111      	bne.n	8002976 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002956:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002962:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d105      	bne.n	8002976 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1f      	ldr	r2, [pc, #124]	; (80029f8 <HAL_ADC_PollForConversion+0x1a8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d002      	beq.n	8002986 <HAL_ADC_PollForConversion+0x136>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	e000      	b.n	8002988 <HAL_ADC_PollForConversion+0x138>
 8002986:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <HAL_ADC_PollForConversion+0x1ac>)
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	4293      	cmp	r3, r2
 800298e:	d008      	beq.n	80029a2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d005      	beq.n	80029a2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	2b05      	cmp	r3, #5
 800299a:	d002      	beq.n	80029a2 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b09      	cmp	r3, #9
 80029a0:	d104      	bne.n	80029ac <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	e00c      	b.n	80029c6 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a11      	ldr	r2, [pc, #68]	; (80029f8 <HAL_ADC_PollForConversion+0x1a8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d002      	beq.n	80029bc <HAL_ADC_PollForConversion+0x16c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	e000      	b.n	80029be <HAL_ADC_PollForConversion+0x16e>
 80029bc:	4b0f      	ldr	r3, [pc, #60]	; (80029fc <HAL_ADC_PollForConversion+0x1ac>)
 80029be:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d104      	bne.n	80029d6 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2208      	movs	r2, #8
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	e008      	b.n	80029e8 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d103      	bne.n	80029e8 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	220c      	movs	r2, #12
 80029e6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3720      	adds	r7, #32
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	50040300 	.word	0x50040300
 80029f8:	50040100 	.word	0x50040100
 80029fc:	50040000 	.word	0x50040000

08002a00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b0b6      	sub	sp, #216	; 0xd8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_ADC_ConfigChannel+0x22>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e3c9      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x7b6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fc88 	bl	8002360 <LL_ADC_REG_IsConversionOngoing>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f040 83aa 	bne.w	80031ac <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d824      	bhi.n	8002ab2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	3b02      	subs	r3, #2
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d81b      	bhi.n	8002aaa <HAL_ADC_ConfigChannel+0x8e>
 8002a72:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <HAL_ADC_ConfigChannel+0x5c>)
 8002a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a78:	08002a89 	.word	0x08002a89
 8002a7c:	08002a91 	.word	0x08002a91
 8002a80:	08002a99 	.word	0x08002a99
 8002a84:	08002aa1 	.word	0x08002aa1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002a88:	230c      	movs	r3, #12
 8002a8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002a8e:	e010      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002a90:	2312      	movs	r3, #18
 8002a92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002a96:	e00c      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002a98:	2318      	movs	r3, #24
 8002a9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002a9e:	e008      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002aa8:	e003      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002aaa:	2306      	movs	r3, #6
 8002aac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ab0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6818      	ldr	r0, [r3, #0]
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002ac0:	f7ff faf2 	bl	80020a8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fc49 	bl	8002360 <LL_ADC_REG_IsConversionOngoing>
 8002ace:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fc69 	bl	80023ae <LL_ADC_INJ_IsConversionOngoing>
 8002adc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002ae0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	f040 81a4 	bne.w	8002e32 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f040 819f 	bne.w	8002e32 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	6819      	ldr	r1, [r3, #0]
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	461a      	mov	r2, r3
 8002b02:	f7ff fafd 	bl	8002100 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	08db      	lsrs	r3, r3, #3
 8002b12:	f003 0303 	and.w	r3, r3, #3
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d00a      	beq.n	8002b3e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6818      	ldr	r0, [r3, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	6919      	ldr	r1, [r3, #16]
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002b38:	f7ff fa4e 	bl	8001fd8 <LL_ADC_SetOffset>
 8002b3c:	e179      	b.n	8002e32 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fa6b 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x14e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7ff fa60 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002b60:	4603      	mov	r3, r0
 8002b62:	0e9b      	lsrs	r3, r3, #26
 8002b64:	f003 021f 	and.w	r2, r3, #31
 8002b68:	e01e      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x18c>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fa55 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b80:	fa93 f3a3 	rbit	r3, r3
 8002b84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b88:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d101      	bne.n	8002b9c <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002b98:	2320      	movs	r3, #32
 8002b9a:	e004      	b.n	8002ba6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002b9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ba0:	fab3 f383 	clz	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <HAL_ADC_ConfigChannel+0x1a4>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	0e9b      	lsrs	r3, r3, #26
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	e018      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x1d6>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002bd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002bdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002be4:	2320      	movs	r3, #32
 8002be6:	e004      	b.n	8002bf2 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002be8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bec:	fab3 f383 	clz	r3, r3
 8002bf0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d106      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fa24 	bl	800204c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2101      	movs	r1, #1
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff fa08 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10a      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x214>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2101      	movs	r1, #1
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff f9fd 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	0e9b      	lsrs	r3, r3, #26
 8002c2a:	f003 021f 	and.w	r2, r3, #31
 8002c2e:	e01e      	b.n	8002c6e <HAL_ADC_ConfigChannel+0x252>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2101      	movs	r1, #1
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff f9f2 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002c4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002c56:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002c5e:	2320      	movs	r3, #32
 8002c60:	e004      	b.n	8002c6c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002c62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c66:	fab3 f383 	clz	r3, r3
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d105      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x26a>
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	0e9b      	lsrs	r3, r3, #26
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	e018      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x29c>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002c9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c9e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002ca2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002caa:	2320      	movs	r3, #32
 8002cac:	e004      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002cae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cb2:	fab3 f383 	clz	r3, r3
 8002cb6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d106      	bne.n	8002cca <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff f9c1 	bl	800204c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2102      	movs	r1, #2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff f9a5 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10a      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x2da>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff f99a 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002cec:	4603      	mov	r3, r0
 8002cee:	0e9b      	lsrs	r3, r3, #26
 8002cf0:	f003 021f 	and.w	r2, r3, #31
 8002cf4:	e01e      	b.n	8002d34 <HAL_ADC_ConfigChannel+0x318>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff f98f 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d0c:	fa93 f3a3 	rbit	r3, r3
 8002d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d101      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002d24:	2320      	movs	r3, #32
 8002d26:	e004      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002d28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d2c:	fab3 f383 	clz	r3, r3
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d105      	bne.n	8002d4c <HAL_ADC_ConfigChannel+0x330>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	0e9b      	lsrs	r3, r3, #26
 8002d46:	f003 031f 	and.w	r3, r3, #31
 8002d4a:	e014      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x35a>
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002d60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d101      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002d68:	2320      	movs	r3, #32
 8002d6a:	e004      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002d6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d70:	fab3 f383 	clz	r3, r3
 8002d74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d106      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2102      	movs	r1, #2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff f962 	bl	800204c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2103      	movs	r1, #3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff f946 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10a      	bne.n	8002db4 <HAL_ADC_ConfigChannel+0x398>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2103      	movs	r1, #3
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff f93b 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002daa:	4603      	mov	r3, r0
 8002dac:	0e9b      	lsrs	r3, r3, #26
 8002dae:	f003 021f 	and.w	r2, r3, #31
 8002db2:	e017      	b.n	8002de4 <HAL_ADC_ConfigChannel+0x3c8>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2103      	movs	r1, #3
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff f930 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dc6:	fa93 f3a3 	rbit	r3, r3
 8002dca:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dce:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002dd6:	2320      	movs	r3, #32
 8002dd8:	e003      	b.n	8002de2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ddc:	fab3 f383 	clz	r3, r3
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <HAL_ADC_ConfigChannel+0x3e0>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	0e9b      	lsrs	r3, r3, #26
 8002df6:	f003 031f 	and.w	r3, r3, #31
 8002dfa:	e011      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x404>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e04:	fa93 f3a3 	rbit	r3, r3
 8002e08:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e0c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002e0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002e14:	2320      	movs	r3, #32
 8002e16:	e003      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d106      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2103      	movs	r1, #3
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff f90d 	bl	800204c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fa44 	bl	80022c4 <LL_ADC_IsEnabled>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	f040 8140 	bne.w	80030c4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	6819      	ldr	r1, [r3, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	461a      	mov	r2, r3
 8002e52:	f7ff f981 	bl	8002158 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	4a8f      	ldr	r2, [pc, #572]	; (8003098 <HAL_ADC_ConfigChannel+0x67c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	f040 8131 	bne.w	80030c4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10b      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x46e>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	0e9b      	lsrs	r3, r3, #26
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	2b09      	cmp	r3, #9
 8002e80:	bf94      	ite	ls
 8002e82:	2301      	movls	r3, #1
 8002e84:	2300      	movhi	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	e019      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x4a2>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e92:	fa93 f3a3 	rbit	r3, r3
 8002e96:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e9a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002ea2:	2320      	movs	r3, #32
 8002ea4:	e003      	b.n	8002eae <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002ea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ea8:	fab3 f383 	clz	r3, r3
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	f003 031f 	and.w	r3, r3, #31
 8002eb4:	2b09      	cmp	r3, #9
 8002eb6:	bf94      	ite	ls
 8002eb8:	2301      	movls	r3, #1
 8002eba:	2300      	movhi	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d079      	beq.n	8002fb6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d107      	bne.n	8002ede <HAL_ADC_ConfigChannel+0x4c2>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	0e9b      	lsrs	r3, r3, #26
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	069b      	lsls	r3, r3, #26
 8002ed8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002edc:	e015      	b.n	8002f0a <HAL_ADC_ConfigChannel+0x4ee>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee6:	fa93 f3a3 	rbit	r3, r3
 8002eea:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eee:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002ef6:	2320      	movs	r3, #32
 8002ef8:	e003      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002efc:	fab3 f383 	clz	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	069b      	lsls	r3, r3, #26
 8002f06:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_ADC_ConfigChannel+0x50e>
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	0e9b      	lsrs	r3, r3, #26
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f003 031f 	and.w	r3, r3, #31
 8002f22:	2101      	movs	r1, #1
 8002f24:	fa01 f303 	lsl.w	r3, r1, r3
 8002f28:	e017      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x53e>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f32:	fa93 f3a3 	rbit	r3, r3
 8002f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002f42:	2320      	movs	r3, #32
 8002f44:	e003      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002f46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f48:	fab3 f383 	clz	r3, r3
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	2101      	movs	r1, #1
 8002f56:	fa01 f303 	lsl.w	r3, r1, r3
 8002f5a:	ea42 0103 	orr.w	r1, r2, r3
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10a      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x564>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	0e9b      	lsrs	r3, r3, #26
 8002f70:	3301      	adds	r3, #1
 8002f72:	f003 021f 	and.w	r2, r3, #31
 8002f76:	4613      	mov	r3, r2
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	4413      	add	r3, r2
 8002f7c:	051b      	lsls	r3, r3, #20
 8002f7e:	e018      	b.n	8002fb2 <HAL_ADC_ConfigChannel+0x596>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f90:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002f98:	2320      	movs	r3, #32
 8002f9a:	e003      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	f003 021f 	and.w	r2, r3, #31
 8002faa:	4613      	mov	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	4413      	add	r3, r2
 8002fb0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	e081      	b.n	80030ba <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d107      	bne.n	8002fd2 <HAL_ADC_ConfigChannel+0x5b6>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	0e9b      	lsrs	r3, r3, #26
 8002fc8:	3301      	adds	r3, #1
 8002fca:	069b      	lsls	r3, r3, #26
 8002fcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fd0:	e015      	b.n	8002ffe <HAL_ADC_ConfigChannel+0x5e2>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002fea:	2320      	movs	r3, #32
 8002fec:	e003      	b.n	8002ff6 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	fab3 f383 	clz	r3, r3
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	069b      	lsls	r3, r3, #26
 8002ffa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003006:	2b00      	cmp	r3, #0
 8003008:	d109      	bne.n	800301e <HAL_ADC_ConfigChannel+0x602>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	0e9b      	lsrs	r3, r3, #26
 8003010:	3301      	adds	r3, #1
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	2101      	movs	r1, #1
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	e017      	b.n	800304e <HAL_ADC_ConfigChannel+0x632>
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	61bb      	str	r3, [r7, #24]
  return result;
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003036:	2320      	movs	r3, #32
 8003038:	e003      	b.n	8003042 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	fab3 f383 	clz	r3, r3
 8003040:	b2db      	uxtb	r3, r3
 8003042:	3301      	adds	r3, #1
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	2101      	movs	r1, #1
 800304a:	fa01 f303 	lsl.w	r3, r1, r3
 800304e:	ea42 0103 	orr.w	r1, r2, r3
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10d      	bne.n	800307a <HAL_ADC_ConfigChannel+0x65e>
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	0e9b      	lsrs	r3, r3, #26
 8003064:	3301      	adds	r3, #1
 8003066:	f003 021f 	and.w	r2, r3, #31
 800306a:	4613      	mov	r3, r2
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4413      	add	r3, r2
 8003070:	3b1e      	subs	r3, #30
 8003072:	051b      	lsls	r3, r3, #20
 8003074:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003078:	e01e      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x69c>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	60fb      	str	r3, [r7, #12]
  return result;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d104      	bne.n	800309c <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003092:	2320      	movs	r3, #32
 8003094:	e006      	b.n	80030a4 <HAL_ADC_ConfigChannel+0x688>
 8003096:	bf00      	nop
 8003098:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	fab3 f383 	clz	r3, r3
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	3301      	adds	r3, #1
 80030a6:	f003 021f 	and.w	r2, r3, #31
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	3b1e      	subs	r3, #30
 80030b2:	051b      	lsls	r3, r3, #20
 80030b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030b8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030be:	4619      	mov	r1, r3
 80030c0:	f7ff f81e 	bl	8002100 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b44      	ldr	r3, [pc, #272]	; (80031dc <HAL_ADC_ConfigChannel+0x7c0>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d07a      	beq.n	80031c6 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030d0:	4843      	ldr	r0, [pc, #268]	; (80031e0 <HAL_ADC_ConfigChannel+0x7c4>)
 80030d2:	f7fe ff73 	bl	8001fbc <LL_ADC_GetCommonPathInternalCh>
 80030d6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a41      	ldr	r2, [pc, #260]	; (80031e4 <HAL_ADC_ConfigChannel+0x7c8>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d12c      	bne.n	800313e <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d126      	bne.n	800313e <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a3c      	ldr	r2, [pc, #240]	; (80031e8 <HAL_ADC_ConfigChannel+0x7cc>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d004      	beq.n	8003104 <HAL_ADC_ConfigChannel+0x6e8>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a3b      	ldr	r2, [pc, #236]	; (80031ec <HAL_ADC_ConfigChannel+0x7d0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d15d      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003104:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003108:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800310c:	4619      	mov	r1, r3
 800310e:	4834      	ldr	r0, [pc, #208]	; (80031e0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003110:	f7fe ff41 	bl	8001f96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003114:	4b36      	ldr	r3, [pc, #216]	; (80031f0 <HAL_ADC_ConfigChannel+0x7d4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	099b      	lsrs	r3, r3, #6
 800311a:	4a36      	ldr	r2, [pc, #216]	; (80031f4 <HAL_ADC_ConfigChannel+0x7d8>)
 800311c:	fba2 2303 	umull	r2, r3, r2, r3
 8003120:	099b      	lsrs	r3, r3, #6
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800312e:	e002      	b.n	8003136 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	3b01      	subs	r3, #1
 8003134:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1f9      	bne.n	8003130 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800313c:	e040      	b.n	80031c0 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a2d      	ldr	r2, [pc, #180]	; (80031f8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d118      	bne.n	800317a <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003148:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800314c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d112      	bne.n	800317a <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a23      	ldr	r2, [pc, #140]	; (80031e8 <HAL_ADC_ConfigChannel+0x7cc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d004      	beq.n	8003168 <HAL_ADC_ConfigChannel+0x74c>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a22      	ldr	r2, [pc, #136]	; (80031ec <HAL_ADC_ConfigChannel+0x7d0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d12d      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003168:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800316c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003170:	4619      	mov	r1, r3
 8003172:	481b      	ldr	r0, [pc, #108]	; (80031e0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003174:	f7fe ff0f 	bl	8001f96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003178:	e024      	b.n	80031c4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a1f      	ldr	r2, [pc, #124]	; (80031fc <HAL_ADC_ConfigChannel+0x7e0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d120      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003184:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003188:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d11a      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a14      	ldr	r2, [pc, #80]	; (80031e8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d115      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800319a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800319e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80031a2:	4619      	mov	r1, r3
 80031a4:	480e      	ldr	r0, [pc, #56]	; (80031e0 <HAL_ADC_ConfigChannel+0x7c4>)
 80031a6:	f7fe fef6 	bl	8001f96 <LL_ADC_SetCommonPathInternalCh>
 80031aa:	e00c      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b0:	f043 0220 	orr.w	r2, r3, #32
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80031be:	e002      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031c0:	bf00      	nop
 80031c2:	e000      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80031ce:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	37d8      	adds	r7, #216	; 0xd8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	80080000 	.word	0x80080000
 80031e0:	50040300 	.word	0x50040300
 80031e4:	c7520000 	.word	0xc7520000
 80031e8:	50040000 	.word	0x50040000
 80031ec:	50040200 	.word	0x50040200
 80031f0:	20000000 	.word	0x20000000
 80031f4:	053e2d63 	.word	0x053e2d63
 80031f8:	cb840000 	.word	0xcb840000
 80031fc:	80000001 	.word	0x80000001

08003200 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff f8a2 	bl	8002360 <LL_ADC_REG_IsConversionOngoing>
 800321c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff f8c3 	bl	80023ae <LL_ADC_INJ_IsConversionOngoing>
 8003228:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d103      	bne.n	8003238 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f000 8098 	beq.w	8003368 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d02a      	beq.n	800329c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7e5b      	ldrb	r3, [r3, #25]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d126      	bne.n	800329c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	7e1b      	ldrb	r3, [r3, #24]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d122      	bne.n	800329c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003256:	2301      	movs	r3, #1
 8003258:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800325a:	e014      	b.n	8003286 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	4a45      	ldr	r2, [pc, #276]	; (8003374 <ADC_ConversionStop+0x174>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d90d      	bls.n	8003280 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003268:	f043 0210 	orr.w	r2, r3, #16
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	f043 0201 	orr.w	r2, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e074      	b.n	800336a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	3301      	adds	r3, #1
 8003284:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d1e3      	bne.n	800325c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2240      	movs	r2, #64	; 0x40
 800329a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d014      	beq.n	80032cc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7ff f85a 	bl	8002360 <LL_ADC_REG_IsConversionOngoing>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00c      	beq.n	80032cc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff f817 	bl	80022ea <LL_ADC_IsDisableOngoing>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d104      	bne.n	80032cc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff f836 	bl	8002338 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d014      	beq.n	80032fc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff f869 	bl	80023ae <LL_ADC_INJ_IsConversionOngoing>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00c      	beq.n	80032fc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f7fe ffff 	bl	80022ea <LL_ADC_IsDisableOngoing>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d104      	bne.n	80032fc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff f845 	bl	8002386 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d005      	beq.n	800330e <ADC_ConversionStop+0x10e>
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	2b03      	cmp	r3, #3
 8003306:	d105      	bne.n	8003314 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003308:	230c      	movs	r3, #12
 800330a:	617b      	str	r3, [r7, #20]
        break;
 800330c:	e005      	b.n	800331a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800330e:	2308      	movs	r3, #8
 8003310:	617b      	str	r3, [r7, #20]
        break;
 8003312:	e002      	b.n	800331a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003314:	2304      	movs	r3, #4
 8003316:	617b      	str	r3, [r7, #20]
        break;
 8003318:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800331a:	f7fe fe1d 	bl	8001f58 <HAL_GetTick>
 800331e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003320:	e01b      	b.n	800335a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003322:	f7fe fe19 	bl	8001f58 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b05      	cmp	r3, #5
 800332e:	d914      	bls.n	800335a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00d      	beq.n	800335a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003342:	f043 0210 	orr.w	r2, r3, #16
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800334e:	f043 0201 	orr.w	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e007      	b.n	800336a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1dc      	bne.n	8003322 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3720      	adds	r7, #32
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	a33fffff 	.word	0xa33fffff

08003378 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003380:	2300      	movs	r3, #0
 8003382:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7fe ff9b 	bl	80022c4 <LL_ADC_IsEnabled>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d169      	bne.n	8003468 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	4b36      	ldr	r3, [pc, #216]	; (8003474 <ADC_Enable+0xfc>)
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00d      	beq.n	80033be <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033a6:	f043 0210 	orr.w	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e055      	b.n	800346a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe ff56 	bl	8002274 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033c8:	482b      	ldr	r0, [pc, #172]	; (8003478 <ADC_Enable+0x100>)
 80033ca:	f7fe fdf7 	bl	8001fbc <LL_ADC_GetCommonPathInternalCh>
 80033ce:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80033d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d013      	beq.n	8003400 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033d8:	4b28      	ldr	r3, [pc, #160]	; (800347c <ADC_Enable+0x104>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	099b      	lsrs	r3, r3, #6
 80033de:	4a28      	ldr	r2, [pc, #160]	; (8003480 <ADC_Enable+0x108>)
 80033e0:	fba2 2303 	umull	r2, r3, r2, r3
 80033e4:	099b      	lsrs	r3, r3, #6
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033f2:	e002      	b.n	80033fa <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	3b01      	subs	r3, #1
 80033f8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1f9      	bne.n	80033f4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003400:	f7fe fdaa 	bl	8001f58 <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003406:	e028      	b.n	800345a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe ff59 	bl	80022c4 <LL_ADC_IsEnabled>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d104      	bne.n	8003422 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe ff29 	bl	8002274 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003422:	f7fe fd99 	bl	8001f58 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b02      	cmp	r3, #2
 800342e:	d914      	bls.n	800345a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b01      	cmp	r3, #1
 800343c:	d00d      	beq.n	800345a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003442:	f043 0210 	orr.w	r2, r3, #16
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344e:	f043 0201 	orr.w	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e007      	b.n	800346a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	2b01      	cmp	r3, #1
 8003466:	d1cf      	bne.n	8003408 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	8000003f 	.word	0x8000003f
 8003478:	50040300 	.word	0x50040300
 800347c:	20000000 	.word	0x20000000
 8003480:	053e2d63 	.word	0x053e2d63

08003484 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fe ff2a 	bl	80022ea <LL_ADC_IsDisableOngoing>
 8003496:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f7fe ff11 	bl	80022c4 <LL_ADC_IsEnabled>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d047      	beq.n	8003538 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d144      	bne.n	8003538 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 030d 	and.w	r3, r3, #13
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d10c      	bne.n	80034d6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe feeb 	bl	800229c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2203      	movs	r2, #3
 80034cc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034ce:	f7fe fd43 	bl	8001f58 <HAL_GetTick>
 80034d2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034d4:	e029      	b.n	800352a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	f043 0210 	orr.w	r2, r3, #16
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	f043 0201 	orr.w	r2, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e023      	b.n	800353a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034f2:	f7fe fd31 	bl	8001f58 <HAL_GetTick>
 80034f6:	4602      	mov	r2, r0
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	1ad3      	subs	r3, r2, r3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d914      	bls.n	800352a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00d      	beq.n	800352a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003512:	f043 0210 	orr.w	r2, r3, #16
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351e:	f043 0201 	orr.w	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e007      	b.n	800353a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1dc      	bne.n	80034f2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <LL_ADC_IsEnabled>:
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <LL_ADC_IsEnabled+0x18>
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <LL_ADC_IsEnabled+0x1a>
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <LL_ADC_REG_IsConversionOngoing>:
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b04      	cmp	r3, #4
 800357a:	d101      	bne.n	8003580 <LL_ADC_REG_IsConversionOngoing+0x18>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
	...

08003590 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003590:	b590      	push	{r4, r7, lr}
 8003592:	b09f      	sub	sp, #124	; 0x7c
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e093      	b.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80035b6:	2300      	movs	r3, #0
 80035b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80035ba:	2300      	movs	r3, #0
 80035bc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a47      	ldr	r2, [pc, #284]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d102      	bne.n	80035ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035c8:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	e001      	b.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035dc:	f043 0220 	orr.w	r2, r3, #32
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e072      	b.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff ffb8 	bl	8003568 <LL_ADC_REG_IsConversionOngoing>
 80035f8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ffb2 	bl	8003568 <LL_ADC_REG_IsConversionOngoing>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d154      	bne.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800360a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800360c:	2b00      	cmp	r3, #0
 800360e:	d151      	bne.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003610:	4b35      	ldr	r3, [pc, #212]	; (80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003612:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d02c      	beq.n	8003676 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800361c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800362e:	035b      	lsls	r3, r3, #13
 8003630:	430b      	orrs	r3, r1
 8003632:	431a      	orrs	r2, r3
 8003634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003636:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003638:	4829      	ldr	r0, [pc, #164]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800363a:	f7ff ff82 	bl	8003542 <LL_ADC_IsEnabled>
 800363e:	4604      	mov	r4, r0
 8003640:	4828      	ldr	r0, [pc, #160]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003642:	f7ff ff7e 	bl	8003542 <LL_ADC_IsEnabled>
 8003646:	4603      	mov	r3, r0
 8003648:	431c      	orrs	r4, r3
 800364a:	4828      	ldr	r0, [pc, #160]	; (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800364c:	f7ff ff79 	bl	8003542 <LL_ADC_IsEnabled>
 8003650:	4603      	mov	r3, r0
 8003652:	4323      	orrs	r3, r4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d137      	bne.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003660:	f023 030f 	bic.w	r3, r3, #15
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	6811      	ldr	r1, [r2, #0]
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	6892      	ldr	r2, [r2, #8]
 800366c:	430a      	orrs	r2, r1
 800366e:	431a      	orrs	r2, r3
 8003670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003672:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003674:	e028      	b.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800367e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003680:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003682:	4817      	ldr	r0, [pc, #92]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003684:	f7ff ff5d 	bl	8003542 <LL_ADC_IsEnabled>
 8003688:	4604      	mov	r4, r0
 800368a:	4816      	ldr	r0, [pc, #88]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800368c:	f7ff ff59 	bl	8003542 <LL_ADC_IsEnabled>
 8003690:	4603      	mov	r3, r0
 8003692:	431c      	orrs	r4, r3
 8003694:	4815      	ldr	r0, [pc, #84]	; (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003696:	f7ff ff54 	bl	8003542 <LL_ADC_IsEnabled>
 800369a:	4603      	mov	r3, r0
 800369c:	4323      	orrs	r3, r4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d112      	bne.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036aa:	f023 030f 	bic.w	r3, r3, #15
 80036ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036b0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036b2:	e009      	b.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80036c6:	e000      	b.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80036d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	377c      	adds	r7, #124	; 0x7c
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd90      	pop	{r4, r7, pc}
 80036de:	bf00      	nop
 80036e0:	50040000 	.word	0x50040000
 80036e4:	50040100 	.word	0x50040100
 80036e8:	50040300 	.word	0x50040300
 80036ec:	50040200 	.word	0x50040200

080036f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800370c:	4013      	ands	r3, r2
 800370e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800371c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003722:	4a04      	ldr	r2, [pc, #16]	; (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	60d3      	str	r3, [r2, #12]
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <__NVIC_GetPriorityGrouping+0x18>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	f003 0307 	and.w	r3, r3, #7
}
 8003746:	4618      	mov	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	6039      	str	r1, [r7, #0]
 800375e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003764:	2b00      	cmp	r3, #0
 8003766:	db0a      	blt.n	800377e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	b2da      	uxtb	r2, r3
 800376c:	490c      	ldr	r1, [pc, #48]	; (80037a0 <__NVIC_SetPriority+0x4c>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	0112      	lsls	r2, r2, #4
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	440b      	add	r3, r1
 8003778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800377c:	e00a      	b.n	8003794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	4908      	ldr	r1, [pc, #32]	; (80037a4 <__NVIC_SetPriority+0x50>)
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	3b04      	subs	r3, #4
 800378c:	0112      	lsls	r2, r2, #4
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	440b      	add	r3, r1
 8003792:	761a      	strb	r2, [r3, #24]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000e100 	.word	0xe000e100
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b089      	sub	sp, #36	; 0x24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f1c3 0307 	rsb	r3, r3, #7
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	bf28      	it	cs
 80037c6:	2304      	movcs	r3, #4
 80037c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d902      	bls.n	80037d8 <NVIC_EncodePriority+0x30>
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3b03      	subs	r3, #3
 80037d6:	e000      	b.n	80037da <NVIC_EncodePriority+0x32>
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43da      	mvns	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	401a      	ands	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	43d9      	mvns	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003800:	4313      	orrs	r3, r2
         );
}
 8003802:	4618      	mov	r0, r3
 8003804:	3724      	adds	r7, #36	; 0x24
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	3b01      	subs	r3, #1
 800381c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003820:	d301      	bcc.n	8003826 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003822:	2301      	movs	r3, #1
 8003824:	e00f      	b.n	8003846 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003826:	4a0a      	ldr	r2, [pc, #40]	; (8003850 <SysTick_Config+0x40>)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3b01      	subs	r3, #1
 800382c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800382e:	210f      	movs	r1, #15
 8003830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003834:	f7ff ff8e 	bl	8003754 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003838:	4b05      	ldr	r3, [pc, #20]	; (8003850 <SysTick_Config+0x40>)
 800383a:	2200      	movs	r2, #0
 800383c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800383e:	4b04      	ldr	r3, [pc, #16]	; (8003850 <SysTick_Config+0x40>)
 8003840:	2207      	movs	r2, #7
 8003842:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	e000e010 	.word	0xe000e010

08003854 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f7ff ff47 	bl	80036f0 <__NVIC_SetPriorityGrouping>
}
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b086      	sub	sp, #24
 800386e:	af00      	add	r7, sp, #0
 8003870:	4603      	mov	r3, r0
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003878:	2300      	movs	r3, #0
 800387a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800387c:	f7ff ff5c 	bl	8003738 <__NVIC_GetPriorityGrouping>
 8003880:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	6978      	ldr	r0, [r7, #20]
 8003888:	f7ff ff8e 	bl	80037a8 <NVIC_EncodePriority>
 800388c:	4602      	mov	r2, r0
 800388e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003892:	4611      	mov	r1, r2
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff ff5d 	bl	8003754 <__NVIC_SetPriority>
}
 800389a:	bf00      	nop
 800389c:	3718      	adds	r7, #24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b082      	sub	sp, #8
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff ffb0 	bl	8003810 <SysTick_Config>
 80038b0:	4603      	mov	r3, r0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ca:	e17f      	b.n	8003bcc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	2101      	movs	r1, #1
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	fa01 f303 	lsl.w	r3, r1, r3
 80038d8:	4013      	ands	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 8171 	beq.w	8003bc6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 0303 	and.w	r3, r3, #3
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d005      	beq.n	80038fc <HAL_GPIO_Init+0x40>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f003 0303 	and.w	r3, r3, #3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d130      	bne.n	800395e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	2203      	movs	r2, #3
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	43db      	mvns	r3, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4013      	ands	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	68da      	ldr	r2, [r3, #12]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	693a      	ldr	r2, [r7, #16]
 800392a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003932:	2201      	movs	r2, #1
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	fa02 f303 	lsl.w	r3, r2, r3
 800393a:	43db      	mvns	r3, r3
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	4013      	ands	r3, r2
 8003940:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	091b      	lsrs	r3, r3, #4
 8003948:	f003 0201 	and.w	r2, r3, #1
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	fa02 f303 	lsl.w	r3, r2, r3
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	4313      	orrs	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f003 0303 	and.w	r3, r3, #3
 8003966:	2b03      	cmp	r3, #3
 8003968:	d118      	bne.n	800399c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003970:	2201      	movs	r2, #1
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	43db      	mvns	r3, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	08db      	lsrs	r3, r3, #3
 8003986:	f003 0201 	and.w	r2, r3, #1
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	693a      	ldr	r2, [r7, #16]
 800399a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d017      	beq.n	80039d8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	2203      	movs	r2, #3
 80039b4:	fa02 f303 	lsl.w	r3, r2, r3
 80039b8:	43db      	mvns	r3, r3
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4013      	ands	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	fa02 f303 	lsl.w	r3, r2, r3
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d123      	bne.n	8003a2c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	08da      	lsrs	r2, r3, #3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3208      	adds	r2, #8
 80039ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	220f      	movs	r2, #15
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4013      	ands	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	08da      	lsrs	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3208      	adds	r2, #8
 8003a26:	6939      	ldr	r1, [r7, #16]
 8003a28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	2203      	movs	r2, #3
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 0203 	and.w	r2, r3, #3
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80ac 	beq.w	8003bc6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6e:	4b5f      	ldr	r3, [pc, #380]	; (8003bec <HAL_GPIO_Init+0x330>)
 8003a70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a72:	4a5e      	ldr	r2, [pc, #376]	; (8003bec <HAL_GPIO_Init+0x330>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6613      	str	r3, [r2, #96]	; 0x60
 8003a7a:	4b5c      	ldr	r3, [pc, #368]	; (8003bec <HAL_GPIO_Init+0x330>)
 8003a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a86:	4a5a      	ldr	r2, [pc, #360]	; (8003bf0 <HAL_GPIO_Init+0x334>)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	089b      	lsrs	r3, r3, #2
 8003a8c:	3302      	adds	r3, #2
 8003a8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a92:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	220f      	movs	r2, #15
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ab0:	d025      	beq.n	8003afe <HAL_GPIO_Init+0x242>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a4f      	ldr	r2, [pc, #316]	; (8003bf4 <HAL_GPIO_Init+0x338>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01f      	beq.n	8003afa <HAL_GPIO_Init+0x23e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a4e      	ldr	r2, [pc, #312]	; (8003bf8 <HAL_GPIO_Init+0x33c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d019      	beq.n	8003af6 <HAL_GPIO_Init+0x23a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a4d      	ldr	r2, [pc, #308]	; (8003bfc <HAL_GPIO_Init+0x340>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d013      	beq.n	8003af2 <HAL_GPIO_Init+0x236>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a4c      	ldr	r2, [pc, #304]	; (8003c00 <HAL_GPIO_Init+0x344>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d00d      	beq.n	8003aee <HAL_GPIO_Init+0x232>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a4b      	ldr	r2, [pc, #300]	; (8003c04 <HAL_GPIO_Init+0x348>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d007      	beq.n	8003aea <HAL_GPIO_Init+0x22e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a4a      	ldr	r2, [pc, #296]	; (8003c08 <HAL_GPIO_Init+0x34c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d101      	bne.n	8003ae6 <HAL_GPIO_Init+0x22a>
 8003ae2:	2306      	movs	r3, #6
 8003ae4:	e00c      	b.n	8003b00 <HAL_GPIO_Init+0x244>
 8003ae6:	2307      	movs	r3, #7
 8003ae8:	e00a      	b.n	8003b00 <HAL_GPIO_Init+0x244>
 8003aea:	2305      	movs	r3, #5
 8003aec:	e008      	b.n	8003b00 <HAL_GPIO_Init+0x244>
 8003aee:	2304      	movs	r3, #4
 8003af0:	e006      	b.n	8003b00 <HAL_GPIO_Init+0x244>
 8003af2:	2303      	movs	r3, #3
 8003af4:	e004      	b.n	8003b00 <HAL_GPIO_Init+0x244>
 8003af6:	2302      	movs	r3, #2
 8003af8:	e002      	b.n	8003b00 <HAL_GPIO_Init+0x244>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e000      	b.n	8003b00 <HAL_GPIO_Init+0x244>
 8003afe:	2300      	movs	r3, #0
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	f002 0203 	and.w	r2, r2, #3
 8003b06:	0092      	lsls	r2, r2, #2
 8003b08:	4093      	lsls	r3, r2
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b10:	4937      	ldr	r1, [pc, #220]	; (8003bf0 <HAL_GPIO_Init+0x334>)
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	089b      	lsrs	r3, r3, #2
 8003b16:	3302      	adds	r3, #2
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b1e:	4b3b      	ldr	r3, [pc, #236]	; (8003c0c <HAL_GPIO_Init+0x350>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	43db      	mvns	r3, r3
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b42:	4a32      	ldr	r2, [pc, #200]	; (8003c0c <HAL_GPIO_Init+0x350>)
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b48:	4b30      	ldr	r3, [pc, #192]	; (8003c0c <HAL_GPIO_Init+0x350>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	43db      	mvns	r3, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4013      	ands	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b6c:	4a27      	ldr	r2, [pc, #156]	; (8003c0c <HAL_GPIO_Init+0x350>)
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b72:	4b26      	ldr	r3, [pc, #152]	; (8003c0c <HAL_GPIO_Init+0x350>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b96:	4a1d      	ldr	r2, [pc, #116]	; (8003c0c <HAL_GPIO_Init+0x350>)
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_GPIO_Init+0x350>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003bc0:	4a12      	ldr	r2, [pc, #72]	; (8003c0c <HAL_GPIO_Init+0x350>)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	f47f ae78 	bne.w	80038cc <HAL_GPIO_Init+0x10>
  }
}
 8003bdc:	bf00      	nop
 8003bde:	bf00      	nop
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	48000400 	.word	0x48000400
 8003bf8:	48000800 	.word	0x48000800
 8003bfc:	48000c00 	.word	0x48000c00
 8003c00:	48001000 	.word	0x48001000
 8003c04:	48001400 	.word	0x48001400
 8003c08:	48001800 	.word	0x48001800
 8003c0c:	40010400 	.word	0x40010400

08003c10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	887b      	ldrh	r3, [r7, #2]
 8003c22:	4013      	ands	r3, r2
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	73fb      	strb	r3, [r7, #15]
 8003c2c:	e001      	b.n	8003c32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	807b      	strh	r3, [r7, #2]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c50:	787b      	ldrb	r3, [r7, #1]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c56:	887a      	ldrh	r2, [r7, #2]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c5c:	e002      	b.n	8003c64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c5e:	887a      	ldrh	r2, [r7, #2]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c74:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	40007000 	.word	0x40007000

08003c8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c9a:	d130      	bne.n	8003cfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c9c:	4b23      	ldr	r3, [pc, #140]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ca8:	d038      	beq.n	8003d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003caa:	4b20      	ldr	r3, [pc, #128]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cba:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2232      	movs	r2, #50	; 0x32
 8003cc0:	fb02 f303 	mul.w	r3, r2, r3
 8003cc4:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cca:	0c9b      	lsrs	r3, r3, #18
 8003ccc:	3301      	adds	r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cd0:	e002      	b.n	8003cd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cd8:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce4:	d102      	bne.n	8003cec <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1f2      	bne.n	8003cd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf8:	d110      	bne.n	8003d1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e00f      	b.n	8003d1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cfe:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0a:	d007      	beq.n	8003d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d0c:	4b07      	ldr	r3, [pc, #28]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d14:	4a05      	ldr	r2, [pc, #20]	; (8003d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40007000 	.word	0x40007000
 8003d30:	20000000 	.word	0x20000000
 8003d34:	431bde83 	.word	0x431bde83

08003d38 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e3ca      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d4a:	4b97      	ldr	r3, [pc, #604]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 030c 	and.w	r3, r3, #12
 8003d52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d54:	4b94      	ldr	r3, [pc, #592]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 80e4 	beq.w	8003f34 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d007      	beq.n	8003d82 <HAL_RCC_OscConfig+0x4a>
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	2b0c      	cmp	r3, #12
 8003d76:	f040 808b 	bne.w	8003e90 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	f040 8087 	bne.w	8003e90 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d82:	4b89      	ldr	r3, [pc, #548]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0302 	and.w	r3, r3, #2
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d005      	beq.n	8003d9a <HAL_RCC_OscConfig+0x62>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d101      	bne.n	8003d9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e3a2      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1a      	ldr	r2, [r3, #32]
 8003d9e:	4b82      	ldr	r3, [pc, #520]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d004      	beq.n	8003db4 <HAL_RCC_OscConfig+0x7c>
 8003daa:	4b7f      	ldr	r3, [pc, #508]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db2:	e005      	b.n	8003dc0 <HAL_RCC_OscConfig+0x88>
 8003db4:	4b7c      	ldr	r3, [pc, #496]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dba:	091b      	lsrs	r3, r3, #4
 8003dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d223      	bcs.n	8003e0c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1b      	ldr	r3, [r3, #32]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fd55 	bl	8004878 <RCC_SetFlashLatencyFromMSIRange>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e383      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dd8:	4b73      	ldr	r3, [pc, #460]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a72      	ldr	r2, [pc, #456]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003dde:	f043 0308 	orr.w	r3, r3, #8
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	4b70      	ldr	r3, [pc, #448]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	496d      	ldr	r1, [pc, #436]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003df6:	4b6c      	ldr	r3, [pc, #432]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69db      	ldr	r3, [r3, #28]
 8003e02:	021b      	lsls	r3, r3, #8
 8003e04:	4968      	ldr	r1, [pc, #416]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	604b      	str	r3, [r1, #4]
 8003e0a:	e025      	b.n	8003e58 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e0c:	4b66      	ldr	r3, [pc, #408]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a65      	ldr	r2, [pc, #404]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e12:	f043 0308 	orr.w	r3, r3, #8
 8003e16:	6013      	str	r3, [r2, #0]
 8003e18:	4b63      	ldr	r3, [pc, #396]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	4960      	ldr	r1, [pc, #384]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e2a:	4b5f      	ldr	r3, [pc, #380]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	495b      	ldr	r1, [pc, #364]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d109      	bne.n	8003e58 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fd15 	bl	8004878 <RCC_SetFlashLatencyFromMSIRange>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e343      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e58:	f000 fc4a 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	4b52      	ldr	r3, [pc, #328]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	091b      	lsrs	r3, r3, #4
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	4950      	ldr	r1, [pc, #320]	; (8003fac <HAL_RCC_OscConfig+0x274>)
 8003e6a:	5ccb      	ldrb	r3, [r1, r3]
 8003e6c:	f003 031f 	and.w	r3, r3, #31
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
 8003e74:	4a4e      	ldr	r2, [pc, #312]	; (8003fb0 <HAL_RCC_OscConfig+0x278>)
 8003e76:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e78:	4b4e      	ldr	r3, [pc, #312]	; (8003fb4 <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fe f81b 	bl	8001eb8 <HAL_InitTick>
 8003e82:	4603      	mov	r3, r0
 8003e84:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e86:	7bfb      	ldrb	r3, [r7, #15]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d052      	beq.n	8003f32 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003e8c:	7bfb      	ldrb	r3, [r7, #15]
 8003e8e:	e327      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d032      	beq.n	8003efe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e98:	4b43      	ldr	r3, [pc, #268]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a42      	ldr	r2, [pc, #264]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003e9e:	f043 0301 	orr.w	r3, r3, #1
 8003ea2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ea4:	f7fe f858 	bl	8001f58 <HAL_GetTick>
 8003ea8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eaa:	e008      	b.n	8003ebe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003eac:	f7fe f854 	bl	8001f58 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e310      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ebe:	4b3a      	ldr	r3, [pc, #232]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0f0      	beq.n	8003eac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eca:	4b37      	ldr	r3, [pc, #220]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a36      	ldr	r2, [pc, #216]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003ed0:	f043 0308 	orr.w	r3, r3, #8
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	4931      	ldr	r1, [pc, #196]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ee8:	4b2f      	ldr	r3, [pc, #188]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	492c      	ldr	r1, [pc, #176]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	604b      	str	r3, [r1, #4]
 8003efc:	e01a      	b.n	8003f34 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003efe:	4b2a      	ldr	r3, [pc, #168]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a29      	ldr	r2, [pc, #164]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f0a:	f7fe f825 	bl	8001f58 <HAL_GetTick>
 8003f0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f10:	e008      	b.n	8003f24 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f12:	f7fe f821 	bl	8001f58 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e2dd      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f24:	4b20      	ldr	r3, [pc, #128]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1f0      	bne.n	8003f12 <HAL_RCC_OscConfig+0x1da>
 8003f30:	e000      	b.n	8003f34 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d074      	beq.n	800402a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	2b08      	cmp	r3, #8
 8003f44:	d005      	beq.n	8003f52 <HAL_RCC_OscConfig+0x21a>
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b0c      	cmp	r3, #12
 8003f4a:	d10e      	bne.n	8003f6a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d10b      	bne.n	8003f6a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f52:	4b15      	ldr	r3, [pc, #84]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d064      	beq.n	8004028 <HAL_RCC_OscConfig+0x2f0>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d160      	bne.n	8004028 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e2ba      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f72:	d106      	bne.n	8003f82 <HAL_RCC_OscConfig+0x24a>
 8003f74:	4b0c      	ldr	r3, [pc, #48]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a0b      	ldr	r2, [pc, #44]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	e026      	b.n	8003fd0 <HAL_RCC_OscConfig+0x298>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f8a:	d115      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x280>
 8003f8c:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a05      	ldr	r2, [pc, #20]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a02      	ldr	r2, [pc, #8]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	e014      	b.n	8003fd0 <HAL_RCC_OscConfig+0x298>
 8003fa6:	bf00      	nop
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	0800bc5c 	.word	0x0800bc5c
 8003fb0:	20000000 	.word	0x20000000
 8003fb4:	20000004 	.word	0x20000004
 8003fb8:	4ba0      	ldr	r3, [pc, #640]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a9f      	ldr	r2, [pc, #636]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8003fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	4b9d      	ldr	r3, [pc, #628]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a9c      	ldr	r2, [pc, #624]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8003fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d013      	beq.n	8004000 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd8:	f7fd ffbe 	bl	8001f58 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe0:	f7fd ffba 	bl	8001f58 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b64      	cmp	r3, #100	; 0x64
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e276      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff2:	4b92      	ldr	r3, [pc, #584]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0f0      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x2a8>
 8003ffe:	e014      	b.n	800402a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7fd ffaa 	bl	8001f58 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004008:	f7fd ffa6 	bl	8001f58 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	; 0x64
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e262      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800401a:	4b88      	ldr	r3, [pc, #544]	; (800423c <HAL_RCC_OscConfig+0x504>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <HAL_RCC_OscConfig+0x2d0>
 8004026:	e000      	b.n	800402a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d060      	beq.n	80040f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	2b04      	cmp	r3, #4
 800403a:	d005      	beq.n	8004048 <HAL_RCC_OscConfig+0x310>
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b0c      	cmp	r3, #12
 8004040:	d119      	bne.n	8004076 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b02      	cmp	r3, #2
 8004046:	d116      	bne.n	8004076 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004048:	4b7c      	ldr	r3, [pc, #496]	; (800423c <HAL_RCC_OscConfig+0x504>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_RCC_OscConfig+0x328>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d101      	bne.n	8004060 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e23f      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004060:	4b76      	ldr	r3, [pc, #472]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	061b      	lsls	r3, r3, #24
 800406e:	4973      	ldr	r1, [pc, #460]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004070:	4313      	orrs	r3, r2
 8004072:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004074:	e040      	b.n	80040f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d023      	beq.n	80040c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800407e:	4b6f      	ldr	r3, [pc, #444]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a6e      	ldr	r2, [pc, #440]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408a:	f7fd ff65 	bl	8001f58 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004092:	f7fd ff61 	bl	8001f58 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e21d      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040a4:	4b65      	ldr	r3, [pc, #404]	; (800423c <HAL_RCC_OscConfig+0x504>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b0:	4b62      	ldr	r3, [pc, #392]	; (800423c <HAL_RCC_OscConfig+0x504>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	061b      	lsls	r3, r3, #24
 80040be:	495f      	ldr	r1, [pc, #380]	; (800423c <HAL_RCC_OscConfig+0x504>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	604b      	str	r3, [r1, #4]
 80040c4:	e018      	b.n	80040f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040c6:	4b5d      	ldr	r3, [pc, #372]	; (800423c <HAL_RCC_OscConfig+0x504>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a5c      	ldr	r2, [pc, #368]	; (800423c <HAL_RCC_OscConfig+0x504>)
 80040cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d2:	f7fd ff41 	bl	8001f58 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040da:	f7fd ff3d 	bl	8001f58 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e1f9      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040ec:	4b53      	ldr	r3, [pc, #332]	; (800423c <HAL_RCC_OscConfig+0x504>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1f0      	bne.n	80040da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d03c      	beq.n	800417e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	695b      	ldr	r3, [r3, #20]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01c      	beq.n	8004146 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800410c:	4b4b      	ldr	r3, [pc, #300]	; (800423c <HAL_RCC_OscConfig+0x504>)
 800410e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004112:	4a4a      	ldr	r2, [pc, #296]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004114:	f043 0301 	orr.w	r3, r3, #1
 8004118:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800411c:	f7fd ff1c 	bl	8001f58 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004124:	f7fd ff18 	bl	8001f58 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e1d4      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004136:	4b41      	ldr	r3, [pc, #260]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0ef      	beq.n	8004124 <HAL_RCC_OscConfig+0x3ec>
 8004144:	e01b      	b.n	800417e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004146:	4b3d      	ldr	r3, [pc, #244]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414c:	4a3b      	ldr	r2, [pc, #236]	; (800423c <HAL_RCC_OscConfig+0x504>)
 800414e:	f023 0301 	bic.w	r3, r3, #1
 8004152:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004156:	f7fd feff 	bl	8001f58 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800415e:	f7fd fefb 	bl	8001f58 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e1b7      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004170:	4b32      	ldr	r3, [pc, #200]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1ef      	bne.n	800415e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 80a6 	beq.w	80042d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800418c:	2300      	movs	r3, #0
 800418e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004190:	4b2a      	ldr	r3, [pc, #168]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10d      	bne.n	80041b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800419c:	4b27      	ldr	r3, [pc, #156]	; (800423c <HAL_RCC_OscConfig+0x504>)
 800419e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a0:	4a26      	ldr	r2, [pc, #152]	; (800423c <HAL_RCC_OscConfig+0x504>)
 80041a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a6:	6593      	str	r3, [r2, #88]	; 0x58
 80041a8:	4b24      	ldr	r3, [pc, #144]	; (800423c <HAL_RCC_OscConfig+0x504>)
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041b4:	2301      	movs	r3, #1
 80041b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041b8:	4b21      	ldr	r3, [pc, #132]	; (8004240 <HAL_RCC_OscConfig+0x508>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d118      	bne.n	80041f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041c4:	4b1e      	ldr	r3, [pc, #120]	; (8004240 <HAL_RCC_OscConfig+0x508>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1d      	ldr	r2, [pc, #116]	; (8004240 <HAL_RCC_OscConfig+0x508>)
 80041ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d0:	f7fd fec2 	bl	8001f58 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d6:	e008      	b.n	80041ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041d8:	f7fd febe 	bl	8001f58 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d901      	bls.n	80041ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e17a      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041ea:	4b15      	ldr	r3, [pc, #84]	; (8004240 <HAL_RCC_OscConfig+0x508>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0f0      	beq.n	80041d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d108      	bne.n	8004210 <HAL_RCC_OscConfig+0x4d8>
 80041fe:	4b0f      	ldr	r3, [pc, #60]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004204:	4a0d      	ldr	r2, [pc, #52]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004206:	f043 0301 	orr.w	r3, r3, #1
 800420a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800420e:	e029      	b.n	8004264 <HAL_RCC_OscConfig+0x52c>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	2b05      	cmp	r3, #5
 8004216:	d115      	bne.n	8004244 <HAL_RCC_OscConfig+0x50c>
 8004218:	4b08      	ldr	r3, [pc, #32]	; (800423c <HAL_RCC_OscConfig+0x504>)
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421e:	4a07      	ldr	r2, [pc, #28]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004220:	f043 0304 	orr.w	r3, r3, #4
 8004224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004228:	4b04      	ldr	r3, [pc, #16]	; (800423c <HAL_RCC_OscConfig+0x504>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422e:	4a03      	ldr	r2, [pc, #12]	; (800423c <HAL_RCC_OscConfig+0x504>)
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004238:	e014      	b.n	8004264 <HAL_RCC_OscConfig+0x52c>
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000
 8004240:	40007000 	.word	0x40007000
 8004244:	4b9c      	ldr	r3, [pc, #624]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	4a9b      	ldr	r2, [pc, #620]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800424c:	f023 0301 	bic.w	r3, r3, #1
 8004250:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004254:	4b98      	ldr	r3, [pc, #608]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425a:	4a97      	ldr	r2, [pc, #604]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800425c:	f023 0304 	bic.w	r3, r3, #4
 8004260:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d016      	beq.n	800429a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426c:	f7fd fe74 	bl	8001f58 <HAL_GetTick>
 8004270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004272:	e00a      	b.n	800428a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004274:	f7fd fe70 	bl	8001f58 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004282:	4293      	cmp	r3, r2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e12a      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800428a:	4b8b      	ldr	r3, [pc, #556]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800428c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004290:	f003 0302 	and.w	r3, r3, #2
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0ed      	beq.n	8004274 <HAL_RCC_OscConfig+0x53c>
 8004298:	e015      	b.n	80042c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429a:	f7fd fe5d 	bl	8001f58 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042a0:	e00a      	b.n	80042b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a2:	f7fd fe59 	bl	8001f58 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e113      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042b8:	4b7f      	ldr	r3, [pc, #508]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1ed      	bne.n	80042a2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042c6:	7ffb      	ldrb	r3, [r7, #31]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d105      	bne.n	80042d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042cc:	4b7a      	ldr	r3, [pc, #488]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 80042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d0:	4a79      	ldr	r2, [pc, #484]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 80042d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80fe 	beq.w	80044de <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	f040 80d0 	bne.w	800448c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042ec:	4b72      	ldr	r3, [pc, #456]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f003 0203 	and.w	r2, r3, #3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d130      	bne.n	8004362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430a:	3b01      	subs	r3, #1
 800430c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800430e:	429a      	cmp	r2, r3
 8004310:	d127      	bne.n	8004362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800431e:	429a      	cmp	r2, r3
 8004320:	d11f      	bne.n	8004362 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800432c:	2a07      	cmp	r2, #7
 800432e:	bf14      	ite	ne
 8004330:	2201      	movne	r2, #1
 8004332:	2200      	moveq	r2, #0
 8004334:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004336:	4293      	cmp	r3, r2
 8004338:	d113      	bne.n	8004362 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	3b01      	subs	r3, #1
 8004348:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800434a:	429a      	cmp	r2, r3
 800434c:	d109      	bne.n	8004362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004358:	085b      	lsrs	r3, r3, #1
 800435a:	3b01      	subs	r3, #1
 800435c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800435e:	429a      	cmp	r2, r3
 8004360:	d06e      	beq.n	8004440 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	2b0c      	cmp	r3, #12
 8004366:	d069      	beq.n	800443c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004368:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d105      	bne.n	8004380 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004374:	4b50      	ldr	r3, [pc, #320]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e0ad      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004384:	4b4c      	ldr	r3, [pc, #304]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a4b      	ldr	r2, [pc, #300]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800438a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800438e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004390:	f7fd fde2 	bl	8001f58 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004398:	f7fd fdde 	bl	8001f58 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e09a      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043aa:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043b6:	4b40      	ldr	r3, [pc, #256]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	4b40      	ldr	r3, [pc, #256]	; (80044bc <HAL_RCC_OscConfig+0x784>)
 80043bc:	4013      	ands	r3, r2
 80043be:	687a      	ldr	r2, [r7, #4]
 80043c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043c6:	3a01      	subs	r2, #1
 80043c8:	0112      	lsls	r2, r2, #4
 80043ca:	4311      	orrs	r1, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043d0:	0212      	lsls	r2, r2, #8
 80043d2:	4311      	orrs	r1, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043d8:	0852      	lsrs	r2, r2, #1
 80043da:	3a01      	subs	r2, #1
 80043dc:	0552      	lsls	r2, r2, #21
 80043de:	4311      	orrs	r1, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043e4:	0852      	lsrs	r2, r2, #1
 80043e6:	3a01      	subs	r2, #1
 80043e8:	0652      	lsls	r2, r2, #25
 80043ea:	4311      	orrs	r1, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043f0:	0912      	lsrs	r2, r2, #4
 80043f2:	0452      	lsls	r2, r2, #17
 80043f4:	430a      	orrs	r2, r1
 80043f6:	4930      	ldr	r1, [pc, #192]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043fc:	4b2e      	ldr	r3, [pc, #184]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a2d      	ldr	r2, [pc, #180]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004406:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004408:	4b2b      	ldr	r3, [pc, #172]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a2a      	ldr	r2, [pc, #168]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800440e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004412:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004414:	f7fd fda0 	bl	8001f58 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800441c:	f7fd fd9c 	bl	8001f58 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b02      	cmp	r3, #2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e058      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800442e:	4b22      	ldr	r3, [pc, #136]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0f0      	beq.n	800441c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800443a:	e050      	b.n	80044de <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e04f      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004440:	4b1d      	ldr	r3, [pc, #116]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d148      	bne.n	80044de <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800444c:	4b1a      	ldr	r3, [pc, #104]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a19      	ldr	r2, [pc, #100]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004456:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004458:	4b17      	ldr	r3, [pc, #92]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4a16      	ldr	r2, [pc, #88]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 800445e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004462:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004464:	f7fd fd78 	bl	8001f58 <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800446a:	e008      	b.n	800447e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800446c:	f7fd fd74 	bl	8001f58 <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d901      	bls.n	800447e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e030      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800447e:	4b0e      	ldr	r3, [pc, #56]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0f0      	beq.n	800446c <HAL_RCC_OscConfig+0x734>
 800448a:	e028      	b.n	80044de <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b0c      	cmp	r3, #12
 8004490:	d023      	beq.n	80044da <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004492:	4b09      	ldr	r3, [pc, #36]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a08      	ldr	r2, [pc, #32]	; (80044b8 <HAL_RCC_OscConfig+0x780>)
 8004498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800449c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7fd fd5b 	bl	8001f58 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044a4:	e00c      	b.n	80044c0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044a6:	f7fd fd57 	bl	8001f58 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d905      	bls.n	80044c0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e013      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
 80044b8:	40021000 	.word	0x40021000
 80044bc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c0:	4b09      	ldr	r3, [pc, #36]	; (80044e8 <HAL_RCC_OscConfig+0x7b0>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1ec      	bne.n	80044a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044cc:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <HAL_RCC_OscConfig+0x7b0>)
 80044ce:	68da      	ldr	r2, [r3, #12]
 80044d0:	4905      	ldr	r1, [pc, #20]	; (80044e8 <HAL_RCC_OscConfig+0x7b0>)
 80044d2:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_RCC_OscConfig+0x7b4>)
 80044d4:	4013      	ands	r3, r2
 80044d6:	60cb      	str	r3, [r1, #12]
 80044d8:	e001      	b.n	80044de <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3720      	adds	r7, #32
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40021000 	.word	0x40021000
 80044ec:	feeefffc 	.word	0xfeeefffc

080044f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0e7      	b.n	80046d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004504:	4b75      	ldr	r3, [pc, #468]	; (80046dc <HAL_RCC_ClockConfig+0x1ec>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0307 	and.w	r3, r3, #7
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d910      	bls.n	8004534 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b72      	ldr	r3, [pc, #456]	; (80046dc <HAL_RCC_ClockConfig+0x1ec>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f023 0207 	bic.w	r2, r3, #7
 800451a:	4970      	ldr	r1, [pc, #448]	; (80046dc <HAL_RCC_ClockConfig+0x1ec>)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	4313      	orrs	r3, r2
 8004520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004522:	4b6e      	ldr	r3, [pc, #440]	; (80046dc <HAL_RCC_ClockConfig+0x1ec>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	683a      	ldr	r2, [r7, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d001      	beq.n	8004534 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e0cf      	b.n	80046d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0302 	and.w	r3, r3, #2
 800453c:	2b00      	cmp	r3, #0
 800453e:	d010      	beq.n	8004562 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	4b66      	ldr	r3, [pc, #408]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800454c:	429a      	cmp	r2, r3
 800454e:	d908      	bls.n	8004562 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004550:	4b63      	ldr	r3, [pc, #396]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4960      	ldr	r1, [pc, #384]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 800455e:	4313      	orrs	r3, r2
 8004560:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d04c      	beq.n	8004608 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b03      	cmp	r3, #3
 8004574:	d107      	bne.n	8004586 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004576:	4b5a      	ldr	r3, [pc, #360]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d121      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e0a6      	b.n	80046d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d107      	bne.n	800459e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800458e:	4b54      	ldr	r3, [pc, #336]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d115      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e09a      	b.n	80046d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d107      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045a6:	4b4e      	ldr	r3, [pc, #312]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e08e      	b.n	80046d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b6:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e086      	b.n	80046d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045c6:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f023 0203 	bic.w	r2, r3, #3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4943      	ldr	r1, [pc, #268]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045d8:	f7fd fcbe 	bl	8001f58 <HAL_GetTick>
 80045dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045de:	e00a      	b.n	80045f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e0:	f7fd fcba 	bl	8001f58 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e06e      	b.n	80046d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045f6:	4b3a      	ldr	r3, [pc, #232]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 020c 	and.w	r2, r3, #12
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	429a      	cmp	r2, r3
 8004606:	d1eb      	bne.n	80045e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d010      	beq.n	8004636 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	4b31      	ldr	r3, [pc, #196]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004620:	429a      	cmp	r2, r3
 8004622:	d208      	bcs.n	8004636 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004624:	4b2e      	ldr	r3, [pc, #184]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	492b      	ldr	r1, [pc, #172]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004632:	4313      	orrs	r3, r2
 8004634:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004636:	4b29      	ldr	r3, [pc, #164]	; (80046dc <HAL_RCC_ClockConfig+0x1ec>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0307 	and.w	r3, r3, #7
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d210      	bcs.n	8004666 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004644:	4b25      	ldr	r3, [pc, #148]	; (80046dc <HAL_RCC_ClockConfig+0x1ec>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f023 0207 	bic.w	r2, r3, #7
 800464c:	4923      	ldr	r1, [pc, #140]	; (80046dc <HAL_RCC_ClockConfig+0x1ec>)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	4313      	orrs	r3, r2
 8004652:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004654:	4b21      	ldr	r3, [pc, #132]	; (80046dc <HAL_RCC_ClockConfig+0x1ec>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0307 	and.w	r3, r3, #7
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	429a      	cmp	r2, r3
 8004660:	d001      	beq.n	8004666 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e036      	b.n	80046d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004672:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	4918      	ldr	r1, [pc, #96]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004680:	4313      	orrs	r3, r2
 8004682:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d009      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004690:	4b13      	ldr	r3, [pc, #76]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	00db      	lsls	r3, r3, #3
 800469e:	4910      	ldr	r1, [pc, #64]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046a4:	f000 f824 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <HAL_RCC_ClockConfig+0x1f0>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	091b      	lsrs	r3, r3, #4
 80046b0:	f003 030f 	and.w	r3, r3, #15
 80046b4:	490b      	ldr	r1, [pc, #44]	; (80046e4 <HAL_RCC_ClockConfig+0x1f4>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	f003 031f 	and.w	r3, r3, #31
 80046bc:	fa22 f303 	lsr.w	r3, r2, r3
 80046c0:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <HAL_RCC_ClockConfig+0x1f8>)
 80046c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046c4:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_RCC_ClockConfig+0x1fc>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fd fbf5 	bl	8001eb8 <HAL_InitTick>
 80046ce:	4603      	mov	r3, r0
 80046d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80046d2:	7afb      	ldrb	r3, [r7, #11]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3710      	adds	r7, #16
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	40022000 	.word	0x40022000
 80046e0:	40021000 	.word	0x40021000
 80046e4:	0800bc5c 	.word	0x0800bc5c
 80046e8:	20000000 	.word	0x20000000
 80046ec:	20000004 	.word	0x20000004

080046f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b089      	sub	sp, #36	; 0x24
 80046f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	2300      	movs	r3, #0
 80046fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046fe:	4b3e      	ldr	r3, [pc, #248]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004708:	4b3b      	ldr	r3, [pc, #236]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x34>
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d121      	bne.n	8004762 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d11e      	bne.n	8004762 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004724:	4b34      	ldr	r3, [pc, #208]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d107      	bne.n	8004740 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004730:	4b31      	ldr	r3, [pc, #196]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004736:	0a1b      	lsrs	r3, r3, #8
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	e005      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004740:	4b2d      	ldr	r3, [pc, #180]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800474c:	4a2b      	ldr	r2, [pc, #172]	; (80047fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004754:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10d      	bne.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004760:	e00a      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d102      	bne.n	800476e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <HAL_RCC_GetSysClockFreq+0x110>)
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	e004      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d101      	bne.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004774:	4b23      	ldr	r3, [pc, #140]	; (8004804 <HAL_RCC_GetSysClockFreq+0x114>)
 8004776:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b0c      	cmp	r3, #12
 800477c:	d134      	bne.n	80047e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800477e:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d003      	beq.n	8004796 <HAL_RCC_GetSysClockFreq+0xa6>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d003      	beq.n	800479c <HAL_RCC_GetSysClockFreq+0xac>
 8004794:	e005      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004796:	4b1a      	ldr	r3, [pc, #104]	; (8004800 <HAL_RCC_GetSysClockFreq+0x110>)
 8004798:	617b      	str	r3, [r7, #20]
      break;
 800479a:	e005      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_RCC_GetSysClockFreq+0x114>)
 800479e:	617b      	str	r3, [r7, #20]
      break;
 80047a0:	e002      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	617b      	str	r3, [r7, #20]
      break;
 80047a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047a8:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	091b      	lsrs	r3, r3, #4
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	3301      	adds	r3, #1
 80047b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	fb03 f202 	mul.w	r2, r3, r2
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	0e5b      	lsrs	r3, r3, #25
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	3301      	adds	r3, #1
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047e8:	69bb      	ldr	r3, [r7, #24]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3724      	adds	r7, #36	; 0x24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
 80047fc:	0800bc74 	.word	0x0800bc74
 8004800:	00f42400 	.word	0x00f42400
 8004804:	007a1200 	.word	0x007a1200

08004808 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800480c:	4b03      	ldr	r3, [pc, #12]	; (800481c <HAL_RCC_GetHCLKFreq+0x14>)
 800480e:	681b      	ldr	r3, [r3, #0]
}
 8004810:	4618      	mov	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000000 	.word	0x20000000

08004820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004824:	f7ff fff0 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	0a1b      	lsrs	r3, r3, #8
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4904      	ldr	r1, [pc, #16]	; (8004848 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40021000 	.word	0x40021000
 8004848:	0800bc6c 	.word	0x0800bc6c

0800484c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004850:	f7ff ffda 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b06      	ldr	r3, [pc, #24]	; (8004870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	0adb      	lsrs	r3, r3, #11
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4904      	ldr	r1, [pc, #16]	; (8004874 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800486c:	4618      	mov	r0, r3
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40021000 	.word	0x40021000
 8004874:	0800bc6c 	.word	0x0800bc6c

08004878 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004880:	2300      	movs	r3, #0
 8004882:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004884:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004890:	f7ff f9ee 	bl	8003c70 <HAL_PWREx_GetVoltageRange>
 8004894:	6178      	str	r0, [r7, #20]
 8004896:	e014      	b.n	80048c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004898:	4b25      	ldr	r3, [pc, #148]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800489a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489c:	4a24      	ldr	r2, [pc, #144]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800489e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a2:	6593      	str	r3, [r2, #88]	; 0x58
 80048a4:	4b22      	ldr	r3, [pc, #136]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048b0:	f7ff f9de 	bl	8003c70 <HAL_PWREx_GetVoltageRange>
 80048b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048b6:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ba:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c8:	d10b      	bne.n	80048e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b80      	cmp	r3, #128	; 0x80
 80048ce:	d919      	bls.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2ba0      	cmp	r3, #160	; 0xa0
 80048d4:	d902      	bls.n	80048dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048d6:	2302      	movs	r3, #2
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	e013      	b.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048dc:	2301      	movs	r3, #1
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	e010      	b.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b80      	cmp	r3, #128	; 0x80
 80048e6:	d902      	bls.n	80048ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048e8:	2303      	movs	r3, #3
 80048ea:	613b      	str	r3, [r7, #16]
 80048ec:	e00a      	b.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b80      	cmp	r3, #128	; 0x80
 80048f2:	d102      	bne.n	80048fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048f4:	2302      	movs	r3, #2
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	e004      	b.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b70      	cmp	r3, #112	; 0x70
 80048fe:	d101      	bne.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004900:	2301      	movs	r3, #1
 8004902:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f023 0207 	bic.w	r2, r3, #7
 800490c:	4909      	ldr	r1, [pc, #36]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004914:	4b07      	ldr	r3, [pc, #28]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	429a      	cmp	r2, r3
 8004920:	d001      	beq.n	8004926 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000
 8004934:	40022000 	.word	0x40022000

08004938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004940:	2300      	movs	r3, #0
 8004942:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004944:	2300      	movs	r3, #0
 8004946:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004950:	2b00      	cmp	r3, #0
 8004952:	d041      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004958:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800495c:	d02a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800495e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004962:	d824      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004964:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004968:	d008      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800496a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800496e:	d81e      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004978:	d010      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800497a:	e018      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800497c:	4b86      	ldr	r3, [pc, #536]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4a85      	ldr	r2, [pc, #532]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004986:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004988:	e015      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3304      	adds	r3, #4
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fabb 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800499a:	e00c      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3320      	adds	r3, #32
 80049a0:	2100      	movs	r1, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fba6 	bl	80050f4 <RCCEx_PLLSAI2_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049ac:	e003      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	74fb      	strb	r3, [r7, #19]
      break;
 80049b2:	e000      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b6:	7cfb      	ldrb	r3, [r7, #19]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049bc:	4b76      	ldr	r3, [pc, #472]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ca:	4973      	ldr	r1, [pc, #460]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049d2:	e001      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d4:	7cfb      	ldrb	r3, [r7, #19]
 80049d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d041      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049ec:	d02a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80049ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049f2:	d824      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049f8:	d008      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049fe:	d81e      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a08:	d010      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a0a:	e018      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a0c:	4b62      	ldr	r3, [pc, #392]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a61      	ldr	r2, [pc, #388]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a18:	e015      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fa73 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a2a:	e00c      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3320      	adds	r3, #32
 8004a30:	2100      	movs	r1, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fb5e 	bl	80050f4 <RCCEx_PLLSAI2_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a3c:	e003      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	74fb      	strb	r3, [r7, #19]
      break;
 8004a42:	e000      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10b      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a4c:	4b52      	ldr	r3, [pc, #328]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a5a:	494f      	ldr	r1, [pc, #316]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a62:	e001      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	7cfb      	ldrb	r3, [r7, #19]
 8004a66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80a0 	beq.w	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a76:	2300      	movs	r3, #0
 8004a78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a7a:	4b47      	ldr	r3, [pc, #284]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00d      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a90:	4b41      	ldr	r3, [pc, #260]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	4a40      	ldr	r2, [pc, #256]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a9c:	4b3e      	ldr	r3, [pc, #248]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aac:	4b3b      	ldr	r3, [pc, #236]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a3a      	ldr	r2, [pc, #232]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ab8:	f7fd fa4e 	bl	8001f58 <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004abe:	e009      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac0:	f7fd fa4a 	bl	8001f58 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d902      	bls.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	74fb      	strb	r3, [r7, #19]
        break;
 8004ad2:	e005      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ad4:	4b31      	ldr	r3, [pc, #196]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0ef      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d15c      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ae6:	4b2c      	ldr	r3, [pc, #176]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01f      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d019      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b04:	4b24      	ldr	r3, [pc, #144]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b10:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	4a20      	ldr	r2, [pc, #128]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b20:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b26:	4a1c      	ldr	r2, [pc, #112]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b30:	4a19      	ldr	r2, [pc, #100]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d016      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b42:	f7fd fa09 	bl	8001f58 <HAL_GetTick>
 8004b46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b48:	e00b      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4a:	f7fd fa05 	bl	8001f58 <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d902      	bls.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	74fb      	strb	r3, [r7, #19]
            break;
 8004b60:	e006      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b62:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0ec      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10c      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b86:	4904      	ldr	r1, [pc, #16]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b8e:	e009      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b90:	7cfb      	ldrb	r3, [r7, #19]
 8004b92:	74bb      	strb	r3, [r7, #18]
 8004b94:	e006      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba0:	7cfb      	ldrb	r3, [r7, #19]
 8004ba2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ba4:	7c7b      	ldrb	r3, [r7, #17]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d105      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004baa:	4b9e      	ldr	r3, [pc, #632]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bae:	4a9d      	ldr	r2, [pc, #628]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bc2:	4b98      	ldr	r3, [pc, #608]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	f023 0203 	bic.w	r2, r3, #3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	4994      	ldr	r1, [pc, #592]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004be4:	4b8f      	ldr	r3, [pc, #572]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f023 020c 	bic.w	r2, r3, #12
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf2:	498c      	ldr	r1, [pc, #560]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c06:	4b87      	ldr	r3, [pc, #540]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	4983      	ldr	r1, [pc, #524]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c28:	4b7e      	ldr	r3, [pc, #504]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	497b      	ldr	r1, [pc, #492]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c4a:	4b76      	ldr	r3, [pc, #472]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c58:	4972      	ldr	r1, [pc, #456]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c6c:	4b6d      	ldr	r3, [pc, #436]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7a:	496a      	ldr	r1, [pc, #424]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c8e:	4b65      	ldr	r3, [pc, #404]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9c:	4961      	ldr	r1, [pc, #388]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cb0:	4b5c      	ldr	r3, [pc, #368]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbe:	4959      	ldr	r1, [pc, #356]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cd2:	4b54      	ldr	r3, [pc, #336]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce0:	4950      	ldr	r1, [pc, #320]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cf4:	4b4b      	ldr	r3, [pc, #300]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d02:	4948      	ldr	r1, [pc, #288]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d16:	4b43      	ldr	r3, [pc, #268]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d24:	493f      	ldr	r1, [pc, #252]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d028      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d38:	4b3a      	ldr	r3, [pc, #232]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d46:	4937      	ldr	r1, [pc, #220]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d56:	d106      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d58:	4b32      	ldr	r3, [pc, #200]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4a31      	ldr	r2, [pc, #196]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d62:	60d3      	str	r3, [r2, #12]
 8004d64:	e011      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d6e:	d10c      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3304      	adds	r3, #4
 8004d74:	2101      	movs	r1, #1
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 f8c8 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d80:	7cfb      	ldrb	r3, [r7, #19]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004d86:	7cfb      	ldrb	r3, [r7, #19]
 8004d88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d028      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d96:	4b23      	ldr	r3, [pc, #140]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	491f      	ldr	r1, [pc, #124]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db4:	d106      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004db6:	4b1b      	ldr	r3, [pc, #108]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	4a1a      	ldr	r2, [pc, #104]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dc0:	60d3      	str	r3, [r2, #12]
 8004dc2:	e011      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dcc:	d10c      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f899 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dde:	7cfb      	ldrb	r3, [r7, #19]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004de4:	7cfb      	ldrb	r3, [r7, #19]
 8004de6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d02b      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e02:	4908      	ldr	r1, [pc, #32]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e12:	d109      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e14:	4b03      	ldr	r3, [pc, #12]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4a02      	ldr	r2, [pc, #8]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e1e:	60d3      	str	r3, [r2, #12]
 8004e20:	e014      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e22:	bf00      	nop
 8004e24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e30:	d10c      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3304      	adds	r3, #4
 8004e36:	2101      	movs	r1, #1
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 f867 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e42:	7cfb      	ldrb	r3, [r7, #19]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d02f      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e58:	4b2b      	ldr	r3, [pc, #172]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e66:	4928      	ldr	r1, [pc, #160]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e76:	d10d      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 f844 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e88:	7cfb      	ldrb	r3, [r7, #19]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d014      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e8e:	7cfb      	ldrb	r3, [r7, #19]
 8004e90:	74bb      	strb	r3, [r7, #18]
 8004e92:	e011      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3320      	adds	r3, #32
 8004ea2:	2102      	movs	r1, #2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 f925 	bl	80050f4 <RCCEx_PLLSAI2_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eae:	7cfb      	ldrb	r3, [r7, #19]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004eb4:	7cfb      	ldrb	r3, [r7, #19]
 8004eb6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ec4:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed2:	490d      	ldr	r1, [pc, #52]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00b      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ee6:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef6:	4904      	ldr	r1, [pc, #16]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004efe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40021000 	.word	0x40021000

08004f0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f1a:	4b75      	ldr	r3, [pc, #468]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d018      	beq.n	8004f58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f26:	4b72      	ldr	r3, [pc, #456]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f003 0203 	and.w	r2, r3, #3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d10d      	bne.n	8004f52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
       ||
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d009      	beq.n	8004f52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f3e:	4b6c      	ldr	r3, [pc, #432]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	091b      	lsrs	r3, r3, #4
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d047      	beq.n	8004fe2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
 8004f56:	e044      	b.n	8004fe2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d018      	beq.n	8004f92 <RCCEx_PLLSAI1_Config+0x86>
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d825      	bhi.n	8004fb0 <RCCEx_PLLSAI1_Config+0xa4>
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d002      	beq.n	8004f6e <RCCEx_PLLSAI1_Config+0x62>
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d009      	beq.n	8004f80 <RCCEx_PLLSAI1_Config+0x74>
 8004f6c:	e020      	b.n	8004fb0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f6e:	4b60      	ldr	r3, [pc, #384]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d11d      	bne.n	8004fb6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f7e:	e01a      	b.n	8004fb6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f80:	4b5b      	ldr	r3, [pc, #364]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d116      	bne.n	8004fba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f90:	e013      	b.n	8004fba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f92:	4b57      	ldr	r3, [pc, #348]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10f      	bne.n	8004fbe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f9e:	4b54      	ldr	r3, [pc, #336]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fae:	e006      	b.n	8004fbe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb4:	e004      	b.n	8004fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e002      	b.n	8004fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e000      	b.n	8004fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10d      	bne.n	8004fe2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fc6:	4b4a      	ldr	r3, [pc, #296]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6819      	ldr	r1, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	4944      	ldr	r1, [pc, #272]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d17d      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004fe8:	4b41      	ldr	r3, [pc, #260]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a40      	ldr	r2, [pc, #256]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff4:	f7fc ffb0 	bl	8001f58 <HAL_GetTick>
 8004ff8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ffa:	e009      	b.n	8005010 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ffc:	f7fc ffac 	bl	8001f58 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d902      	bls.n	8005010 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	73fb      	strb	r3, [r7, #15]
        break;
 800500e:	e005      	b.n	800501c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005010:	4b37      	ldr	r3, [pc, #220]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1ef      	bne.n	8004ffc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d160      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d111      	bne.n	800504c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005028:	4b31      	ldr	r3, [pc, #196]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6892      	ldr	r2, [r2, #8]
 8005038:	0211      	lsls	r1, r2, #8
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	68d2      	ldr	r2, [r2, #12]
 800503e:	0912      	lsrs	r2, r2, #4
 8005040:	0452      	lsls	r2, r2, #17
 8005042:	430a      	orrs	r2, r1
 8005044:	492a      	ldr	r1, [pc, #168]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005046:	4313      	orrs	r3, r2
 8005048:	610b      	str	r3, [r1, #16]
 800504a:	e027      	b.n	800509c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d112      	bne.n	8005078 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005052:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800505a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6892      	ldr	r2, [r2, #8]
 8005062:	0211      	lsls	r1, r2, #8
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6912      	ldr	r2, [r2, #16]
 8005068:	0852      	lsrs	r2, r2, #1
 800506a:	3a01      	subs	r2, #1
 800506c:	0552      	lsls	r2, r2, #21
 800506e:	430a      	orrs	r2, r1
 8005070:	491f      	ldr	r1, [pc, #124]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005072:	4313      	orrs	r3, r2
 8005074:	610b      	str	r3, [r1, #16]
 8005076:	e011      	b.n	800509c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005078:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005080:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6892      	ldr	r2, [r2, #8]
 8005088:	0211      	lsls	r1, r2, #8
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6952      	ldr	r2, [r2, #20]
 800508e:	0852      	lsrs	r2, r2, #1
 8005090:	3a01      	subs	r2, #1
 8005092:	0652      	lsls	r2, r2, #25
 8005094:	430a      	orrs	r2, r1
 8005096:	4916      	ldr	r1, [pc, #88]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005098:	4313      	orrs	r3, r2
 800509a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800509c:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a8:	f7fc ff56 	bl	8001f58 <HAL_GetTick>
 80050ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050ae:	e009      	b.n	80050c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050b0:	f7fc ff52 	bl	8001f58 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d902      	bls.n	80050c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	73fb      	strb	r3, [r7, #15]
          break;
 80050c2:	e005      	b.n	80050d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050c4:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ef      	beq.n	80050b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	4904      	ldr	r1, [pc, #16]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000

080050f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005102:	4b6a      	ldr	r3, [pc, #424]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d018      	beq.n	8005140 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800510e:	4b67      	ldr	r3, [pc, #412]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f003 0203 	and.w	r2, r3, #3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d10d      	bne.n	800513a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
       ||
 8005122:	2b00      	cmp	r3, #0
 8005124:	d009      	beq.n	800513a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005126:	4b61      	ldr	r3, [pc, #388]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
       ||
 8005136:	429a      	cmp	r2, r3
 8005138:	d047      	beq.n	80051ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
 800513e:	e044      	b.n	80051ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b03      	cmp	r3, #3
 8005146:	d018      	beq.n	800517a <RCCEx_PLLSAI2_Config+0x86>
 8005148:	2b03      	cmp	r3, #3
 800514a:	d825      	bhi.n	8005198 <RCCEx_PLLSAI2_Config+0xa4>
 800514c:	2b01      	cmp	r3, #1
 800514e:	d002      	beq.n	8005156 <RCCEx_PLLSAI2_Config+0x62>
 8005150:	2b02      	cmp	r3, #2
 8005152:	d009      	beq.n	8005168 <RCCEx_PLLSAI2_Config+0x74>
 8005154:	e020      	b.n	8005198 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005156:	4b55      	ldr	r3, [pc, #340]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d11d      	bne.n	800519e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005166:	e01a      	b.n	800519e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005168:	4b50      	ldr	r3, [pc, #320]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005170:	2b00      	cmp	r3, #0
 8005172:	d116      	bne.n	80051a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005178:	e013      	b.n	80051a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800517a:	4b4c      	ldr	r3, [pc, #304]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10f      	bne.n	80051a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005186:	4b49      	ldr	r3, [pc, #292]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005196:	e006      	b.n	80051a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]
      break;
 800519c:	e004      	b.n	80051a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800519e:	bf00      	nop
 80051a0:	e002      	b.n	80051a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10d      	bne.n	80051ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ae:	4b3f      	ldr	r3, [pc, #252]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6819      	ldr	r1, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	3b01      	subs	r3, #1
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	430b      	orrs	r3, r1
 80051c4:	4939      	ldr	r1, [pc, #228]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d167      	bne.n	80052a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051d0:	4b36      	ldr	r3, [pc, #216]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a35      	ldr	r2, [pc, #212]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051dc:	f7fc febc 	bl	8001f58 <HAL_GetTick>
 80051e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051e2:	e009      	b.n	80051f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051e4:	f7fc feb8 	bl	8001f58 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d902      	bls.n	80051f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	73fb      	strb	r3, [r7, #15]
        break;
 80051f6:	e005      	b.n	8005204 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051f8:	4b2c      	ldr	r3, [pc, #176]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1ef      	bne.n	80051e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d14a      	bne.n	80052a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d111      	bne.n	8005234 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005210:	4b26      	ldr	r3, [pc, #152]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6892      	ldr	r2, [r2, #8]
 8005220:	0211      	lsls	r1, r2, #8
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68d2      	ldr	r2, [r2, #12]
 8005226:	0912      	lsrs	r2, r2, #4
 8005228:	0452      	lsls	r2, r2, #17
 800522a:	430a      	orrs	r2, r1
 800522c:	491f      	ldr	r1, [pc, #124]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800522e:	4313      	orrs	r3, r2
 8005230:	614b      	str	r3, [r1, #20]
 8005232:	e011      	b.n	8005258 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005234:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800523c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6892      	ldr	r2, [r2, #8]
 8005244:	0211      	lsls	r1, r2, #8
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6912      	ldr	r2, [r2, #16]
 800524a:	0852      	lsrs	r2, r2, #1
 800524c:	3a01      	subs	r2, #1
 800524e:	0652      	lsls	r2, r2, #25
 8005250:	430a      	orrs	r2, r1
 8005252:	4916      	ldr	r1, [pc, #88]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005254:	4313      	orrs	r3, r2
 8005256:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005258:	4b14      	ldr	r3, [pc, #80]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a13      	ldr	r2, [pc, #76]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800525e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005262:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005264:	f7fc fe78 	bl	8001f58 <HAL_GetTick>
 8005268:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800526a:	e009      	b.n	8005280 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800526c:	f7fc fe74 	bl	8001f58 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d902      	bls.n	8005280 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	73fb      	strb	r3, [r7, #15]
          break;
 800527e:	e005      	b.n	800528c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005280:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0ef      	beq.n	800526c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	4904      	ldr	r1, [pc, #16]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800529c:	4313      	orrs	r3, r2
 800529e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000

080052b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e049      	b.n	8005356 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fc fbd2 	bl	8001a80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	4619      	mov	r1, r3
 80052ee:	4610      	mov	r0, r2
 80052f0:	f000 fc4c 	bl	8005b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e049      	b.n	8005404 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d106      	bne.n	800538a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7fc fb5b 	bl	8001a40 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3304      	adds	r3, #4
 800539a:	4619      	mov	r1, r3
 800539c:	4610      	mov	r0, r2
 800539e:	f000 fbf5 	bl	8005b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2201      	movs	r2, #1
 80053a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2201      	movs	r2, #1
 80053f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2201      	movs	r2, #1
 80053fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d101      	bne.n	800541e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e049      	b.n	80054b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d106      	bne.n	8005438 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f841 	bl	80054ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3304      	adds	r3, #4
 8005448:	4619      	mov	r1, r3
 800544a:	4610      	mov	r0, r2
 800544c:	f000 fb9e 	bl	8005b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2201      	movs	r2, #1
 80054ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054b0:	2300      	movs	r3, #0
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
	...

080054d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b084      	sub	sp, #16
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d109      	bne.n	80054f4 <HAL_TIM_PWM_Start+0x24>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	bf14      	ite	ne
 80054ec:	2301      	movne	r3, #1
 80054ee:	2300      	moveq	r3, #0
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	e03c      	b.n	800556e <HAL_TIM_PWM_Start+0x9e>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d109      	bne.n	800550e <HAL_TIM_PWM_Start+0x3e>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b01      	cmp	r3, #1
 8005504:	bf14      	ite	ne
 8005506:	2301      	movne	r3, #1
 8005508:	2300      	moveq	r3, #0
 800550a:	b2db      	uxtb	r3, r3
 800550c:	e02f      	b.n	800556e <HAL_TIM_PWM_Start+0x9e>
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2b08      	cmp	r3, #8
 8005512:	d109      	bne.n	8005528 <HAL_TIM_PWM_Start+0x58>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	bf14      	ite	ne
 8005520:	2301      	movne	r3, #1
 8005522:	2300      	moveq	r3, #0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	e022      	b.n	800556e <HAL_TIM_PWM_Start+0x9e>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2b0c      	cmp	r3, #12
 800552c:	d109      	bne.n	8005542 <HAL_TIM_PWM_Start+0x72>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b01      	cmp	r3, #1
 8005538:	bf14      	ite	ne
 800553a:	2301      	movne	r3, #1
 800553c:	2300      	moveq	r3, #0
 800553e:	b2db      	uxtb	r3, r3
 8005540:	e015      	b.n	800556e <HAL_TIM_PWM_Start+0x9e>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b10      	cmp	r3, #16
 8005546:	d109      	bne.n	800555c <HAL_TIM_PWM_Start+0x8c>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b01      	cmp	r3, #1
 8005552:	bf14      	ite	ne
 8005554:	2301      	movne	r3, #1
 8005556:	2300      	moveq	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	e008      	b.n	800556e <HAL_TIM_PWM_Start+0x9e>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b01      	cmp	r3, #1
 8005566:	bf14      	ite	ne
 8005568:	2301      	movne	r3, #1
 800556a:	2300      	moveq	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e09c      	b.n	80056b0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d104      	bne.n	8005586 <HAL_TIM_PWM_Start+0xb6>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005584:	e023      	b.n	80055ce <HAL_TIM_PWM_Start+0xfe>
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b04      	cmp	r3, #4
 800558a:	d104      	bne.n	8005596 <HAL_TIM_PWM_Start+0xc6>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2202      	movs	r2, #2
 8005590:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005594:	e01b      	b.n	80055ce <HAL_TIM_PWM_Start+0xfe>
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b08      	cmp	r3, #8
 800559a:	d104      	bne.n	80055a6 <HAL_TIM_PWM_Start+0xd6>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055a4:	e013      	b.n	80055ce <HAL_TIM_PWM_Start+0xfe>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	2b0c      	cmp	r3, #12
 80055aa:	d104      	bne.n	80055b6 <HAL_TIM_PWM_Start+0xe6>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055b4:	e00b      	b.n	80055ce <HAL_TIM_PWM_Start+0xfe>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b10      	cmp	r3, #16
 80055ba:	d104      	bne.n	80055c6 <HAL_TIM_PWM_Start+0xf6>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055c4:	e003      	b.n	80055ce <HAL_TIM_PWM_Start+0xfe>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2202      	movs	r2, #2
 80055ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2201      	movs	r2, #1
 80055d4:	6839      	ldr	r1, [r7, #0]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fee2 	bl	80063a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a35      	ldr	r2, [pc, #212]	; (80056b8 <HAL_TIM_PWM_Start+0x1e8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d013      	beq.n	800560e <HAL_TIM_PWM_Start+0x13e>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a34      	ldr	r2, [pc, #208]	; (80056bc <HAL_TIM_PWM_Start+0x1ec>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00e      	beq.n	800560e <HAL_TIM_PWM_Start+0x13e>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a32      	ldr	r2, [pc, #200]	; (80056c0 <HAL_TIM_PWM_Start+0x1f0>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d009      	beq.n	800560e <HAL_TIM_PWM_Start+0x13e>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a31      	ldr	r2, [pc, #196]	; (80056c4 <HAL_TIM_PWM_Start+0x1f4>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d004      	beq.n	800560e <HAL_TIM_PWM_Start+0x13e>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a2f      	ldr	r2, [pc, #188]	; (80056c8 <HAL_TIM_PWM_Start+0x1f8>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d101      	bne.n	8005612 <HAL_TIM_PWM_Start+0x142>
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <HAL_TIM_PWM_Start+0x144>
 8005612:	2300      	movs	r3, #0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d007      	beq.n	8005628 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005626:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a22      	ldr	r2, [pc, #136]	; (80056b8 <HAL_TIM_PWM_Start+0x1e8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01d      	beq.n	800566e <HAL_TIM_PWM_Start+0x19e>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563a:	d018      	beq.n	800566e <HAL_TIM_PWM_Start+0x19e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a22      	ldr	r2, [pc, #136]	; (80056cc <HAL_TIM_PWM_Start+0x1fc>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d013      	beq.n	800566e <HAL_TIM_PWM_Start+0x19e>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a21      	ldr	r2, [pc, #132]	; (80056d0 <HAL_TIM_PWM_Start+0x200>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00e      	beq.n	800566e <HAL_TIM_PWM_Start+0x19e>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a1f      	ldr	r2, [pc, #124]	; (80056d4 <HAL_TIM_PWM_Start+0x204>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d009      	beq.n	800566e <HAL_TIM_PWM_Start+0x19e>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a17      	ldr	r2, [pc, #92]	; (80056bc <HAL_TIM_PWM_Start+0x1ec>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d004      	beq.n	800566e <HAL_TIM_PWM_Start+0x19e>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a15      	ldr	r2, [pc, #84]	; (80056c0 <HAL_TIM_PWM_Start+0x1f0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d115      	bne.n	800569a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	4b18      	ldr	r3, [pc, #96]	; (80056d8 <HAL_TIM_PWM_Start+0x208>)
 8005676:	4013      	ands	r3, r2
 8005678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2b06      	cmp	r3, #6
 800567e:	d015      	beq.n	80056ac <HAL_TIM_PWM_Start+0x1dc>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005686:	d011      	beq.n	80056ac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005698:	e008      	b.n	80056ac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f042 0201 	orr.w	r2, r2, #1
 80056a8:	601a      	str	r2, [r3, #0]
 80056aa:	e000      	b.n	80056ae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40012c00 	.word	0x40012c00
 80056bc:	40013400 	.word	0x40013400
 80056c0:	40014000 	.word	0x40014000
 80056c4:	40014400 	.word	0x40014400
 80056c8:	40014800 	.word	0x40014800
 80056cc:	40000400 	.word	0x40000400
 80056d0:	40000800 	.word	0x40000800
 80056d4:	40000c00 	.word	0x40000c00
 80056d8:	00010007 	.word	0x00010007

080056dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d101      	bne.n	80056fa <HAL_TIM_OC_ConfigChannel+0x1e>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e066      	b.n	80057c8 <HAL_TIM_OC_ConfigChannel+0xec>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2b14      	cmp	r3, #20
 8005706:	d857      	bhi.n	80057b8 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005708:	a201      	add	r2, pc, #4	; (adr r2, 8005710 <HAL_TIM_OC_ConfigChannel+0x34>)
 800570a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570e:	bf00      	nop
 8005710:	08005765 	.word	0x08005765
 8005714:	080057b9 	.word	0x080057b9
 8005718:	080057b9 	.word	0x080057b9
 800571c:	080057b9 	.word	0x080057b9
 8005720:	08005773 	.word	0x08005773
 8005724:	080057b9 	.word	0x080057b9
 8005728:	080057b9 	.word	0x080057b9
 800572c:	080057b9 	.word	0x080057b9
 8005730:	08005781 	.word	0x08005781
 8005734:	080057b9 	.word	0x080057b9
 8005738:	080057b9 	.word	0x080057b9
 800573c:	080057b9 	.word	0x080057b9
 8005740:	0800578f 	.word	0x0800578f
 8005744:	080057b9 	.word	0x080057b9
 8005748:	080057b9 	.word	0x080057b9
 800574c:	080057b9 	.word	0x080057b9
 8005750:	0800579d 	.word	0x0800579d
 8005754:	080057b9 	.word	0x080057b9
 8005758:	080057b9 	.word	0x080057b9
 800575c:	080057b9 	.word	0x080057b9
 8005760:	080057ab 	.word	0x080057ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68b9      	ldr	r1, [r7, #8]
 800576a:	4618      	mov	r0, r3
 800576c:	f000 faa8 	bl	8005cc0 <TIM_OC1_SetConfig>
      break;
 8005770:	e025      	b.n	80057be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68b9      	ldr	r1, [r7, #8]
 8005778:	4618      	mov	r0, r3
 800577a:	f000 fb31 	bl	8005de0 <TIM_OC2_SetConfig>
      break;
 800577e:	e01e      	b.n	80057be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68b9      	ldr	r1, [r7, #8]
 8005786:	4618      	mov	r0, r3
 8005788:	f000 fbb4 	bl	8005ef4 <TIM_OC3_SetConfig>
      break;
 800578c:	e017      	b.n	80057be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	4618      	mov	r0, r3
 8005796:	f000 fc35 	bl	8006004 <TIM_OC4_SetConfig>
      break;
 800579a:	e010      	b.n	80057be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fc98 	bl	80060d8 <TIM_OC5_SetConfig>
      break;
 80057a8:	e009      	b.n	80057be <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f000 fcf5 	bl	80061a0 <TIM_OC6_SetConfig>
      break;
 80057b6:	e002      	b.n	80057be <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	75fb      	strb	r3, [r7, #23]
      break;
 80057bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3718      	adds	r7, #24
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d101      	bne.n	80057ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057ea:	2302      	movs	r3, #2
 80057ec:	e0ff      	b.n	80059ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b14      	cmp	r3, #20
 80057fa:	f200 80f0 	bhi.w	80059de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80057fe:	a201      	add	r2, pc, #4	; (adr r2, 8005804 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	08005859 	.word	0x08005859
 8005808:	080059df 	.word	0x080059df
 800580c:	080059df 	.word	0x080059df
 8005810:	080059df 	.word	0x080059df
 8005814:	08005899 	.word	0x08005899
 8005818:	080059df 	.word	0x080059df
 800581c:	080059df 	.word	0x080059df
 8005820:	080059df 	.word	0x080059df
 8005824:	080058db 	.word	0x080058db
 8005828:	080059df 	.word	0x080059df
 800582c:	080059df 	.word	0x080059df
 8005830:	080059df 	.word	0x080059df
 8005834:	0800591b 	.word	0x0800591b
 8005838:	080059df 	.word	0x080059df
 800583c:	080059df 	.word	0x080059df
 8005840:	080059df 	.word	0x080059df
 8005844:	0800595d 	.word	0x0800595d
 8005848:	080059df 	.word	0x080059df
 800584c:	080059df 	.word	0x080059df
 8005850:	080059df 	.word	0x080059df
 8005854:	0800599d 	.word	0x0800599d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68b9      	ldr	r1, [r7, #8]
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fa2e 	bl	8005cc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0208 	orr.w	r2, r2, #8
 8005872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f022 0204 	bic.w	r2, r2, #4
 8005882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6999      	ldr	r1, [r3, #24]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	691a      	ldr	r2, [r3, #16]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	619a      	str	r2, [r3, #24]
      break;
 8005896:	e0a5      	b.n	80059e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fa9e 	bl	8005de0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	6999      	ldr	r1, [r3, #24]
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	021a      	lsls	r2, r3, #8
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	619a      	str	r2, [r3, #24]
      break;
 80058d8:	e084      	b.n	80059e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fb07 	bl	8005ef4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69da      	ldr	r2, [r3, #28]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0208 	orr.w	r2, r2, #8
 80058f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69da      	ldr	r2, [r3, #28]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 0204 	bic.w	r2, r2, #4
 8005904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69d9      	ldr	r1, [r3, #28]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	61da      	str	r2, [r3, #28]
      break;
 8005918:	e064      	b.n	80059e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68b9      	ldr	r1, [r7, #8]
 8005920:	4618      	mov	r0, r3
 8005922:	f000 fb6f 	bl	8006004 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69da      	ldr	r2, [r3, #28]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005934:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	69da      	ldr	r2, [r3, #28]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005944:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	69d9      	ldr	r1, [r3, #28]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	691b      	ldr	r3, [r3, #16]
 8005950:	021a      	lsls	r2, r3, #8
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	61da      	str	r2, [r3, #28]
      break;
 800595a:	e043      	b.n	80059e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	4618      	mov	r0, r3
 8005964:	f000 fbb8 	bl	80060d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0208 	orr.w	r2, r2, #8
 8005976:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0204 	bic.w	r2, r2, #4
 8005986:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	691a      	ldr	r2, [r3, #16]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800599a:	e023      	b.n	80059e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68b9      	ldr	r1, [r7, #8]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f000 fbfc 	bl	80061a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	021a      	lsls	r2, r3, #8
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80059dc:	e002      	b.n	80059e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80059de:	2301      	movs	r3, #1
 80059e0:	75fb      	strb	r3, [r7, #23]
      break;
 80059e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80059ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3718      	adds	r7, #24
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop

080059f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b084      	sub	sp, #16
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a02:	2300      	movs	r3, #0
 8005a04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d101      	bne.n	8005a14 <HAL_TIM_ConfigClockSource+0x1c>
 8005a10:	2302      	movs	r3, #2
 8005a12:	e0b6      	b.n	8005b82 <HAL_TIM_ConfigClockSource+0x18a>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a50:	d03e      	beq.n	8005ad0 <HAL_TIM_ConfigClockSource+0xd8>
 8005a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a56:	f200 8087 	bhi.w	8005b68 <HAL_TIM_ConfigClockSource+0x170>
 8005a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a5e:	f000 8086 	beq.w	8005b6e <HAL_TIM_ConfigClockSource+0x176>
 8005a62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a66:	d87f      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x170>
 8005a68:	2b70      	cmp	r3, #112	; 0x70
 8005a6a:	d01a      	beq.n	8005aa2 <HAL_TIM_ConfigClockSource+0xaa>
 8005a6c:	2b70      	cmp	r3, #112	; 0x70
 8005a6e:	d87b      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x170>
 8005a70:	2b60      	cmp	r3, #96	; 0x60
 8005a72:	d050      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x11e>
 8005a74:	2b60      	cmp	r3, #96	; 0x60
 8005a76:	d877      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x170>
 8005a78:	2b50      	cmp	r3, #80	; 0x50
 8005a7a:	d03c      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0xfe>
 8005a7c:	2b50      	cmp	r3, #80	; 0x50
 8005a7e:	d873      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x170>
 8005a80:	2b40      	cmp	r3, #64	; 0x40
 8005a82:	d058      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x13e>
 8005a84:	2b40      	cmp	r3, #64	; 0x40
 8005a86:	d86f      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x170>
 8005a88:	2b30      	cmp	r3, #48	; 0x30
 8005a8a:	d064      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x15e>
 8005a8c:	2b30      	cmp	r3, #48	; 0x30
 8005a8e:	d86b      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x170>
 8005a90:	2b20      	cmp	r3, #32
 8005a92:	d060      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x15e>
 8005a94:	2b20      	cmp	r3, #32
 8005a96:	d867      	bhi.n	8005b68 <HAL_TIM_ConfigClockSource+0x170>
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d05c      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x15e>
 8005a9c:	2b10      	cmp	r3, #16
 8005a9e:	d05a      	beq.n	8005b56 <HAL_TIM_ConfigClockSource+0x15e>
 8005aa0:	e062      	b.n	8005b68 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ab2:	f000 fc55 	bl	8006360 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ac4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	609a      	str	r2, [r3, #8]
      break;
 8005ace:	e04f      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ae0:	f000 fc3e 	bl	8006360 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005af2:	609a      	str	r2, [r3, #8]
      break;
 8005af4:	e03c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b02:	461a      	mov	r2, r3
 8005b04:	f000 fbb2 	bl	800626c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2150      	movs	r1, #80	; 0x50
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fc0b 	bl	800632a <TIM_ITRx_SetConfig>
      break;
 8005b14:	e02c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b22:	461a      	mov	r2, r3
 8005b24:	f000 fbd1 	bl	80062ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2160      	movs	r1, #96	; 0x60
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fbfb 	bl	800632a <TIM_ITRx_SetConfig>
      break;
 8005b34:	e01c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b42:	461a      	mov	r2, r3
 8005b44:	f000 fb92 	bl	800626c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2140      	movs	r1, #64	; 0x40
 8005b4e:	4618      	mov	r0, r3
 8005b50:	f000 fbeb 	bl	800632a <TIM_ITRx_SetConfig>
      break;
 8005b54:	e00c      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	4610      	mov	r0, r2
 8005b62:	f000 fbe2 	bl	800632a <TIM_ITRx_SetConfig>
      break;
 8005b66:	e003      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b6c:	e000      	b.n	8005b70 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005b6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3710      	adds	r7, #16
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
	...

08005b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a40      	ldr	r2, [pc, #256]	; (8005ca0 <TIM_Base_SetConfig+0x114>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d013      	beq.n	8005bcc <TIM_Base_SetConfig+0x40>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005baa:	d00f      	beq.n	8005bcc <TIM_Base_SetConfig+0x40>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a3d      	ldr	r2, [pc, #244]	; (8005ca4 <TIM_Base_SetConfig+0x118>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00b      	beq.n	8005bcc <TIM_Base_SetConfig+0x40>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a3c      	ldr	r2, [pc, #240]	; (8005ca8 <TIM_Base_SetConfig+0x11c>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d007      	beq.n	8005bcc <TIM_Base_SetConfig+0x40>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a3b      	ldr	r2, [pc, #236]	; (8005cac <TIM_Base_SetConfig+0x120>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d003      	beq.n	8005bcc <TIM_Base_SetConfig+0x40>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a3a      	ldr	r2, [pc, #232]	; (8005cb0 <TIM_Base_SetConfig+0x124>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d108      	bne.n	8005bde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a2f      	ldr	r2, [pc, #188]	; (8005ca0 <TIM_Base_SetConfig+0x114>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01f      	beq.n	8005c26 <TIM_Base_SetConfig+0x9a>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bec:	d01b      	beq.n	8005c26 <TIM_Base_SetConfig+0x9a>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a2c      	ldr	r2, [pc, #176]	; (8005ca4 <TIM_Base_SetConfig+0x118>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d017      	beq.n	8005c26 <TIM_Base_SetConfig+0x9a>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a2b      	ldr	r2, [pc, #172]	; (8005ca8 <TIM_Base_SetConfig+0x11c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d013      	beq.n	8005c26 <TIM_Base_SetConfig+0x9a>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a2a      	ldr	r2, [pc, #168]	; (8005cac <TIM_Base_SetConfig+0x120>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00f      	beq.n	8005c26 <TIM_Base_SetConfig+0x9a>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a29      	ldr	r2, [pc, #164]	; (8005cb0 <TIM_Base_SetConfig+0x124>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00b      	beq.n	8005c26 <TIM_Base_SetConfig+0x9a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a28      	ldr	r2, [pc, #160]	; (8005cb4 <TIM_Base_SetConfig+0x128>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d007      	beq.n	8005c26 <TIM_Base_SetConfig+0x9a>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a27      	ldr	r2, [pc, #156]	; (8005cb8 <TIM_Base_SetConfig+0x12c>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d003      	beq.n	8005c26 <TIM_Base_SetConfig+0x9a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a26      	ldr	r2, [pc, #152]	; (8005cbc <TIM_Base_SetConfig+0x130>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d108      	bne.n	8005c38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a10      	ldr	r2, [pc, #64]	; (8005ca0 <TIM_Base_SetConfig+0x114>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d00f      	beq.n	8005c84 <TIM_Base_SetConfig+0xf8>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4a12      	ldr	r2, [pc, #72]	; (8005cb0 <TIM_Base_SetConfig+0x124>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d00b      	beq.n	8005c84 <TIM_Base_SetConfig+0xf8>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a11      	ldr	r2, [pc, #68]	; (8005cb4 <TIM_Base_SetConfig+0x128>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d007      	beq.n	8005c84 <TIM_Base_SetConfig+0xf8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a10      	ldr	r2, [pc, #64]	; (8005cb8 <TIM_Base_SetConfig+0x12c>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d003      	beq.n	8005c84 <TIM_Base_SetConfig+0xf8>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a0f      	ldr	r2, [pc, #60]	; (8005cbc <TIM_Base_SetConfig+0x130>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d103      	bne.n	8005c8c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	691a      	ldr	r2, [r3, #16]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	615a      	str	r2, [r3, #20]
}
 8005c92:	bf00      	nop
 8005c94:	3714      	adds	r7, #20
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40012c00 	.word	0x40012c00
 8005ca4:	40000400 	.word	0x40000400
 8005ca8:	40000800 	.word	0x40000800
 8005cac:	40000c00 	.word	0x40000c00
 8005cb0:	40013400 	.word	0x40013400
 8005cb4:	40014000 	.word	0x40014000
 8005cb8:	40014400 	.word	0x40014400
 8005cbc:	40014800 	.word	0x40014800

08005cc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a1b      	ldr	r3, [r3, #32]
 8005cce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
 8005cd4:	f023 0201 	bic.w	r2, r3, #1
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f023 0303 	bic.w	r3, r3, #3
 8005cfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f023 0302 	bic.w	r3, r3, #2
 8005d0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a2c      	ldr	r2, [pc, #176]	; (8005dcc <TIM_OC1_SetConfig+0x10c>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d00f      	beq.n	8005d40 <TIM_OC1_SetConfig+0x80>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a2b      	ldr	r2, [pc, #172]	; (8005dd0 <TIM_OC1_SetConfig+0x110>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d00b      	beq.n	8005d40 <TIM_OC1_SetConfig+0x80>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	4a2a      	ldr	r2, [pc, #168]	; (8005dd4 <TIM_OC1_SetConfig+0x114>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d007      	beq.n	8005d40 <TIM_OC1_SetConfig+0x80>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a29      	ldr	r2, [pc, #164]	; (8005dd8 <TIM_OC1_SetConfig+0x118>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d003      	beq.n	8005d40 <TIM_OC1_SetConfig+0x80>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a28      	ldr	r2, [pc, #160]	; (8005ddc <TIM_OC1_SetConfig+0x11c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d10c      	bne.n	8005d5a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f023 0308 	bic.w	r3, r3, #8
 8005d46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	68db      	ldr	r3, [r3, #12]
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f023 0304 	bic.w	r3, r3, #4
 8005d58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a1b      	ldr	r2, [pc, #108]	; (8005dcc <TIM_OC1_SetConfig+0x10c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d00f      	beq.n	8005d82 <TIM_OC1_SetConfig+0xc2>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a1a      	ldr	r2, [pc, #104]	; (8005dd0 <TIM_OC1_SetConfig+0x110>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d00b      	beq.n	8005d82 <TIM_OC1_SetConfig+0xc2>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a19      	ldr	r2, [pc, #100]	; (8005dd4 <TIM_OC1_SetConfig+0x114>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d007      	beq.n	8005d82 <TIM_OC1_SetConfig+0xc2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a18      	ldr	r2, [pc, #96]	; (8005dd8 <TIM_OC1_SetConfig+0x118>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d003      	beq.n	8005d82 <TIM_OC1_SetConfig+0xc2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a17      	ldr	r2, [pc, #92]	; (8005ddc <TIM_OC1_SetConfig+0x11c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d111      	bne.n	8005da6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	693a      	ldr	r2, [r7, #16]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68fa      	ldr	r2, [r7, #12]
 8005db0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	621a      	str	r2, [r3, #32]
}
 8005dc0:	bf00      	nop
 8005dc2:	371c      	adds	r7, #28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	40012c00 	.word	0x40012c00
 8005dd0:	40013400 	.word	0x40013400
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40014400 	.word	0x40014400
 8005ddc:	40014800 	.word	0x40014800

08005de0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b087      	sub	sp, #28
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
 8005de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a1b      	ldr	r3, [r3, #32]
 8005dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	f023 0210 	bic.w	r2, r3, #16
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	021b      	lsls	r3, r3, #8
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f023 0320 	bic.w	r3, r3, #32
 8005e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	011b      	lsls	r3, r3, #4
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a28      	ldr	r2, [pc, #160]	; (8005ee0 <TIM_OC2_SetConfig+0x100>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d003      	beq.n	8005e4c <TIM_OC2_SetConfig+0x6c>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a27      	ldr	r2, [pc, #156]	; (8005ee4 <TIM_OC2_SetConfig+0x104>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d10d      	bne.n	8005e68 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	011b      	lsls	r3, r3, #4
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a1d      	ldr	r2, [pc, #116]	; (8005ee0 <TIM_OC2_SetConfig+0x100>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00f      	beq.n	8005e90 <TIM_OC2_SetConfig+0xb0>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a1c      	ldr	r2, [pc, #112]	; (8005ee4 <TIM_OC2_SetConfig+0x104>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00b      	beq.n	8005e90 <TIM_OC2_SetConfig+0xb0>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a1b      	ldr	r2, [pc, #108]	; (8005ee8 <TIM_OC2_SetConfig+0x108>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d007      	beq.n	8005e90 <TIM_OC2_SetConfig+0xb0>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a1a      	ldr	r2, [pc, #104]	; (8005eec <TIM_OC2_SetConfig+0x10c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <TIM_OC2_SetConfig+0xb0>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a19      	ldr	r2, [pc, #100]	; (8005ef0 <TIM_OC2_SetConfig+0x110>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d113      	bne.n	8005eb8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	695b      	ldr	r3, [r3, #20]
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40013400 	.word	0x40013400
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800

08005ef4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f023 0303 	bic.w	r3, r3, #3
 8005f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	021b      	lsls	r3, r3, #8
 8005f48:	697a      	ldr	r2, [r7, #20]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a27      	ldr	r2, [pc, #156]	; (8005ff0 <TIM_OC3_SetConfig+0xfc>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d003      	beq.n	8005f5e <TIM_OC3_SetConfig+0x6a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a26      	ldr	r2, [pc, #152]	; (8005ff4 <TIM_OC3_SetConfig+0x100>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d10d      	bne.n	8005f7a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	021b      	lsls	r3, r3, #8
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a1c      	ldr	r2, [pc, #112]	; (8005ff0 <TIM_OC3_SetConfig+0xfc>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00f      	beq.n	8005fa2 <TIM_OC3_SetConfig+0xae>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a1b      	ldr	r2, [pc, #108]	; (8005ff4 <TIM_OC3_SetConfig+0x100>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d00b      	beq.n	8005fa2 <TIM_OC3_SetConfig+0xae>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a1a      	ldr	r2, [pc, #104]	; (8005ff8 <TIM_OC3_SetConfig+0x104>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d007      	beq.n	8005fa2 <TIM_OC3_SetConfig+0xae>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a19      	ldr	r2, [pc, #100]	; (8005ffc <TIM_OC3_SetConfig+0x108>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d003      	beq.n	8005fa2 <TIM_OC3_SetConfig+0xae>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a18      	ldr	r2, [pc, #96]	; (8006000 <TIM_OC3_SetConfig+0x10c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d113      	bne.n	8005fca <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005fa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	011b      	lsls	r3, r3, #4
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	621a      	str	r2, [r3, #32]
}
 8005fe4:	bf00      	nop
 8005fe6:	371c      	adds	r7, #28
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	40012c00 	.word	0x40012c00
 8005ff4:	40013400 	.word	0x40013400
 8005ff8:	40014000 	.word	0x40014000
 8005ffc:	40014400 	.word	0x40014400
 8006000:	40014800 	.word	0x40014800

08006004 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a1b      	ldr	r3, [r3, #32]
 8006012:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a1b      	ldr	r3, [r3, #32]
 8006018:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006032:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800603e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	021b      	lsls	r3, r3, #8
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	031b      	lsls	r3, r3, #12
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a18      	ldr	r2, [pc, #96]	; (80060c4 <TIM_OC4_SetConfig+0xc0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d00f      	beq.n	8006088 <TIM_OC4_SetConfig+0x84>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a17      	ldr	r2, [pc, #92]	; (80060c8 <TIM_OC4_SetConfig+0xc4>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d00b      	beq.n	8006088 <TIM_OC4_SetConfig+0x84>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a16      	ldr	r2, [pc, #88]	; (80060cc <TIM_OC4_SetConfig+0xc8>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d007      	beq.n	8006088 <TIM_OC4_SetConfig+0x84>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a15      	ldr	r2, [pc, #84]	; (80060d0 <TIM_OC4_SetConfig+0xcc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d003      	beq.n	8006088 <TIM_OC4_SetConfig+0x84>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a14      	ldr	r2, [pc, #80]	; (80060d4 <TIM_OC4_SetConfig+0xd0>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d109      	bne.n	800609c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800608e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	695b      	ldr	r3, [r3, #20]
 8006094:	019b      	lsls	r3, r3, #6
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	697a      	ldr	r2, [r7, #20]
 80060a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40012c00 	.word	0x40012c00
 80060c8:	40013400 	.word	0x40013400
 80060cc:	40014000 	.word	0x40014000
 80060d0:	40014400 	.word	0x40014400
 80060d4:	40014800 	.word	0x40014800

080060d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800611c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	041b      	lsls	r3, r3, #16
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4313      	orrs	r3, r2
 8006128:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a17      	ldr	r2, [pc, #92]	; (800618c <TIM_OC5_SetConfig+0xb4>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d00f      	beq.n	8006152 <TIM_OC5_SetConfig+0x7a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a16      	ldr	r2, [pc, #88]	; (8006190 <TIM_OC5_SetConfig+0xb8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d00b      	beq.n	8006152 <TIM_OC5_SetConfig+0x7a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a15      	ldr	r2, [pc, #84]	; (8006194 <TIM_OC5_SetConfig+0xbc>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d007      	beq.n	8006152 <TIM_OC5_SetConfig+0x7a>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a14      	ldr	r2, [pc, #80]	; (8006198 <TIM_OC5_SetConfig+0xc0>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d003      	beq.n	8006152 <TIM_OC5_SetConfig+0x7a>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a13      	ldr	r2, [pc, #76]	; (800619c <TIM_OC5_SetConfig+0xc4>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d109      	bne.n	8006166 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006158:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	021b      	lsls	r3, r3, #8
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	621a      	str	r2, [r3, #32]
}
 8006180:	bf00      	nop
 8006182:	371c      	adds	r7, #28
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	40012c00 	.word	0x40012c00
 8006190:	40013400 	.word	0x40013400
 8006194:	40014000 	.word	0x40014000
 8006198:	40014400 	.word	0x40014400
 800619c:	40014800 	.word	0x40014800

080061a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a1b      	ldr	r3, [r3, #32]
 80061b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	021b      	lsls	r3, r3, #8
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	4313      	orrs	r3, r2
 80061de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	051b      	lsls	r3, r3, #20
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a18      	ldr	r2, [pc, #96]	; (8006258 <TIM_OC6_SetConfig+0xb8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d00f      	beq.n	800621c <TIM_OC6_SetConfig+0x7c>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a17      	ldr	r2, [pc, #92]	; (800625c <TIM_OC6_SetConfig+0xbc>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00b      	beq.n	800621c <TIM_OC6_SetConfig+0x7c>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a16      	ldr	r2, [pc, #88]	; (8006260 <TIM_OC6_SetConfig+0xc0>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d007      	beq.n	800621c <TIM_OC6_SetConfig+0x7c>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a15      	ldr	r2, [pc, #84]	; (8006264 <TIM_OC6_SetConfig+0xc4>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d003      	beq.n	800621c <TIM_OC6_SetConfig+0x7c>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a14      	ldr	r2, [pc, #80]	; (8006268 <TIM_OC6_SetConfig+0xc8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d109      	bne.n	8006230 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006222:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	695b      	ldr	r3, [r3, #20]
 8006228:	029b      	lsls	r3, r3, #10
 800622a:	697a      	ldr	r2, [r7, #20]
 800622c:	4313      	orrs	r3, r2
 800622e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	68fa      	ldr	r2, [r7, #12]
 800623a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	621a      	str	r2, [r3, #32]
}
 800624a:	bf00      	nop
 800624c:	371c      	adds	r7, #28
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	40012c00 	.word	0x40012c00
 800625c:	40013400 	.word	0x40013400
 8006260:	40014000 	.word	0x40014000
 8006264:	40014400 	.word	0x40014400
 8006268:	40014800 	.word	0x40014800

0800626c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a1b      	ldr	r3, [r3, #32]
 800627c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f023 0201 	bic.w	r2, r3, #1
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	011b      	lsls	r3, r3, #4
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	4313      	orrs	r3, r2
 80062a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f023 030a 	bic.w	r3, r3, #10
 80062a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062aa:	697a      	ldr	r2, [r7, #20]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	697a      	ldr	r2, [r7, #20]
 80062bc:	621a      	str	r2, [r3, #32]
}
 80062be:	bf00      	nop
 80062c0:	371c      	adds	r7, #28
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062ca:	b480      	push	{r7}
 80062cc:	b087      	sub	sp, #28
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	60f8      	str	r0, [r7, #12]
 80062d2:	60b9      	str	r1, [r7, #8]
 80062d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f023 0210 	bic.w	r2, r3, #16
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	699b      	ldr	r3, [r3, #24]
 80062ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	031b      	lsls	r3, r3, #12
 80062fa:	693a      	ldr	r2, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006306:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	4313      	orrs	r3, r2
 8006310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	621a      	str	r2, [r3, #32]
}
 800631e:	bf00      	nop
 8006320:	371c      	adds	r7, #28
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800632a:	b480      	push	{r7}
 800632c:	b085      	sub	sp, #20
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006340:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4313      	orrs	r3, r2
 8006348:	f043 0307 	orr.w	r3, r3, #7
 800634c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	609a      	str	r2, [r3, #8]
}
 8006354:	bf00      	nop
 8006356:	3714      	adds	r7, #20
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800637a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	021a      	lsls	r2, r3, #8
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	431a      	orrs	r2, r3
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4313      	orrs	r3, r2
 8006388:	697a      	ldr	r2, [r7, #20]
 800638a:	4313      	orrs	r3, r2
 800638c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	609a      	str	r2, [r3, #8]
}
 8006394:	bf00      	nop
 8006396:	371c      	adds	r7, #28
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	2201      	movs	r2, #1
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1a      	ldr	r2, [r3, #32]
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	43db      	mvns	r3, r3
 80063c2:	401a      	ands	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1a      	ldr	r2, [r3, #32]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f003 031f 	and.w	r3, r3, #31
 80063d2:	6879      	ldr	r1, [r7, #4]
 80063d4:	fa01 f303 	lsl.w	r3, r1, r3
 80063d8:	431a      	orrs	r2, r3
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	621a      	str	r2, [r3, #32]
}
 80063de:	bf00      	nop
 80063e0:	371c      	adds	r7, #28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
	...

080063ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006400:	2302      	movs	r3, #2
 8006402:	e068      	b.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2202      	movs	r2, #2
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a2e      	ldr	r2, [pc, #184]	; (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d004      	beq.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a2d      	ldr	r2, [pc, #180]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d108      	bne.n	800644a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800643e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	4313      	orrs	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006450:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4313      	orrs	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a1e      	ldr	r2, [pc, #120]	; (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d01d      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006476:	d018      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a1b      	ldr	r2, [pc, #108]	; (80064ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d013      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1a      	ldr	r2, [pc, #104]	; (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00e      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a18      	ldr	r2, [pc, #96]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d009      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a13      	ldr	r2, [pc, #76]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d004      	beq.n	80064aa <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a14      	ldr	r2, [pc, #80]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d10c      	bne.n	80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	4313      	orrs	r3, r2
 80064ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40012c00 	.word	0x40012c00
 80064e8:	40013400 	.word	0x40013400
 80064ec:	40000400 	.word	0x40000400
 80064f0:	40000800 	.word	0x40000800
 80064f4:	40000c00 	.word	0x40000c00
 80064f8:	40014000 	.word	0x40014000

080064fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006514:	2302      	movs	r3, #2
 8006516:	e065      	b.n	80065e4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800657e:	4313      	orrs	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	041b      	lsls	r3, r3, #16
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a16      	ldr	r2, [pc, #88]	; (80065f0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d004      	beq.n	80065a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a14      	ldr	r2, [pc, #80]	; (80065f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d115      	bne.n	80065d2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	051b      	lsls	r3, r3, #20
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	69db      	ldr	r3, [r3, #28]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	40012c00 	.word	0x40012c00
 80065f4:	40013400 	.word	0x40013400

080065f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e040      	b.n	800668c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800660e:	2b00      	cmp	r3, #0
 8006610:	d106      	bne.n	8006620 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fb faac 	bl	8001b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2224      	movs	r2, #36	; 0x24
 8006624:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0201 	bic.w	r2, r2, #1
 8006634:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fc34 	bl	8006eac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f979 	bl	800693c <UART_SetConfig>
 800664a:	4603      	mov	r3, r0
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e01b      	b.n	800668c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006662:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006672:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0201 	orr.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	f000 fcb3 	bl	8006ff0 <UART_CheckIdleState>
 800668a:	4603      	mov	r3, r0
}
 800668c:	4618      	mov	r0, r3
 800668e:	3708      	adds	r7, #8
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b08a      	sub	sp, #40	; 0x28
 8006698:	af02      	add	r7, sp, #8
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	603b      	str	r3, [r7, #0]
 80066a0:	4613      	mov	r3, r2
 80066a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066a8:	2b20      	cmp	r3, #32
 80066aa:	d178      	bne.n	800679e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d002      	beq.n	80066b8 <HAL_UART_Transmit+0x24>
 80066b2:	88fb      	ldrh	r3, [r7, #6]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e071      	b.n	80067a0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2221      	movs	r2, #33	; 0x21
 80066c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066ca:	f7fb fc45 	bl	8001f58 <HAL_GetTick>
 80066ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	88fa      	ldrh	r2, [r7, #6]
 80066d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	88fa      	ldrh	r2, [r7, #6]
 80066dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066e8:	d108      	bne.n	80066fc <HAL_UART_Transmit+0x68>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	691b      	ldr	r3, [r3, #16]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d104      	bne.n	80066fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80066f2:	2300      	movs	r3, #0
 80066f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	e003      	b.n	8006704 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006700:	2300      	movs	r3, #0
 8006702:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006704:	e030      	b.n	8006768 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2200      	movs	r2, #0
 800670e:	2180      	movs	r1, #128	; 0x80
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 fd15 	bl	8007140 <UART_WaitOnFlagUntilTimeout>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d004      	beq.n	8006726 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e03c      	b.n	80067a0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10b      	bne.n	8006744 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	881a      	ldrh	r2, [r3, #0]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006738:	b292      	uxth	r2, r2
 800673a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	3302      	adds	r3, #2
 8006740:	61bb      	str	r3, [r7, #24]
 8006742:	e008      	b.n	8006756 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	781a      	ldrb	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	b292      	uxth	r2, r2
 800674e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006750:	69fb      	ldr	r3, [r7, #28]
 8006752:	3301      	adds	r3, #1
 8006754:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800675c:	b29b      	uxth	r3, r3
 800675e:	3b01      	subs	r3, #1
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1c8      	bne.n	8006706 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	2200      	movs	r2, #0
 800677c:	2140      	movs	r1, #64	; 0x40
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 fcde 	bl	8007140 <UART_WaitOnFlagUntilTimeout>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d004      	beq.n	8006794 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	2220      	movs	r2, #32
 800678e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e005      	b.n	80067a0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	e000      	b.n	80067a0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800679e:	2302      	movs	r3, #2
  }
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3720      	adds	r7, #32
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b08a      	sub	sp, #40	; 0x28
 80067ac:	af02      	add	r7, sp, #8
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	603b      	str	r3, [r7, #0]
 80067b4:	4613      	mov	r3, r2
 80067b6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067be:	2b20      	cmp	r3, #32
 80067c0:	f040 80b6 	bne.w	8006930 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <HAL_UART_Receive+0x28>
 80067ca:	88fb      	ldrh	r3, [r7, #6]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e0ae      	b.n	8006932 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2222      	movs	r2, #34	; 0x22
 80067e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2200      	movs	r2, #0
 80067e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067ea:	f7fb fbb5 	bl	8001f58 <HAL_GetTick>
 80067ee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	88fa      	ldrh	r2, [r7, #6]
 80067f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	88fa      	ldrh	r2, [r7, #6]
 80067fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006808:	d10e      	bne.n	8006828 <HAL_UART_Receive+0x80>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	691b      	ldr	r3, [r3, #16]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d105      	bne.n	800681e <HAL_UART_Receive+0x76>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800681c:	e02d      	b.n	800687a <HAL_UART_Receive+0xd2>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	22ff      	movs	r2, #255	; 0xff
 8006822:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006826:	e028      	b.n	800687a <HAL_UART_Receive+0xd2>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d10d      	bne.n	800684c <HAL_UART_Receive+0xa4>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	691b      	ldr	r3, [r3, #16]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <HAL_UART_Receive+0x9a>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	22ff      	movs	r2, #255	; 0xff
 800683c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006840:	e01b      	b.n	800687a <HAL_UART_Receive+0xd2>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	227f      	movs	r2, #127	; 0x7f
 8006846:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800684a:	e016      	b.n	800687a <HAL_UART_Receive+0xd2>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006854:	d10d      	bne.n	8006872 <HAL_UART_Receive+0xca>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d104      	bne.n	8006868 <HAL_UART_Receive+0xc0>
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	227f      	movs	r2, #127	; 0x7f
 8006862:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006866:	e008      	b.n	800687a <HAL_UART_Receive+0xd2>
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	223f      	movs	r2, #63	; 0x3f
 800686c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006870:	e003      	b.n	800687a <HAL_UART_Receive+0xd2>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006880:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800688a:	d108      	bne.n	800689e <HAL_UART_Receive+0xf6>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	691b      	ldr	r3, [r3, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d104      	bne.n	800689e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006894:	2300      	movs	r3, #0
 8006896:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	61bb      	str	r3, [r7, #24]
 800689c:	e003      	b.n	80068a6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068a2:	2300      	movs	r3, #0
 80068a4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80068a6:	e037      	b.n	8006918 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	2200      	movs	r2, #0
 80068b0:	2120      	movs	r1, #32
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 fc44 	bl	8007140 <UART_WaitOnFlagUntilTimeout>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d005      	beq.n	80068ca <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e033      	b.n	8006932 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10c      	bne.n	80068ea <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	8a7b      	ldrh	r3, [r7, #18]
 80068da:	4013      	ands	r3, r2
 80068dc:	b29a      	uxth	r2, r3
 80068de:	69bb      	ldr	r3, [r7, #24]
 80068e0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	3302      	adds	r3, #2
 80068e6:	61bb      	str	r3, [r7, #24]
 80068e8:	e00d      	b.n	8006906 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	8a7b      	ldrh	r3, [r7, #18]
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	4013      	ands	r3, r2
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	3301      	adds	r3, #1
 8006904:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800690c:	b29b      	uxth	r3, r3
 800690e:	3b01      	subs	r3, #1
 8006910:	b29a      	uxth	r2, r3
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d1c1      	bne.n	80068a8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2220      	movs	r2, #32
 8006928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	e000      	b.n	8006932 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8006930:	2302      	movs	r3, #2
  }
}
 8006932:	4618      	mov	r0, r3
 8006934:	3720      	adds	r7, #32
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800693c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006940:	b08a      	sub	sp, #40	; 0x28
 8006942:	af00      	add	r7, sp, #0
 8006944:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006946:	2300      	movs	r3, #0
 8006948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	431a      	orrs	r2, r3
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	431a      	orrs	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	69db      	ldr	r3, [r3, #28]
 8006960:	4313      	orrs	r3, r2
 8006962:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	4ba4      	ldr	r3, [pc, #656]	; (8006bfc <UART_SetConfig+0x2c0>)
 800696c:	4013      	ands	r3, r2
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	6812      	ldr	r2, [r2, #0]
 8006972:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006974:	430b      	orrs	r3, r1
 8006976:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	68da      	ldr	r2, [r3, #12]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a99      	ldr	r2, [pc, #612]	; (8006c00 <UART_SetConfig+0x2c4>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d004      	beq.n	80069a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	6a1b      	ldr	r3, [r3, #32]
 80069a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069a4:	4313      	orrs	r3, r2
 80069a6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b8:	430a      	orrs	r2, r1
 80069ba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a90      	ldr	r2, [pc, #576]	; (8006c04 <UART_SetConfig+0x2c8>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d126      	bne.n	8006a14 <UART_SetConfig+0xd8>
 80069c6:	4b90      	ldr	r3, [pc, #576]	; (8006c08 <UART_SetConfig+0x2cc>)
 80069c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069cc:	f003 0303 	and.w	r3, r3, #3
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d81b      	bhi.n	8006a0c <UART_SetConfig+0xd0>
 80069d4:	a201      	add	r2, pc, #4	; (adr r2, 80069dc <UART_SetConfig+0xa0>)
 80069d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069da:	bf00      	nop
 80069dc:	080069ed 	.word	0x080069ed
 80069e0:	080069fd 	.word	0x080069fd
 80069e4:	080069f5 	.word	0x080069f5
 80069e8:	08006a05 	.word	0x08006a05
 80069ec:	2301      	movs	r3, #1
 80069ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f2:	e116      	b.n	8006c22 <UART_SetConfig+0x2e6>
 80069f4:	2302      	movs	r3, #2
 80069f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fa:	e112      	b.n	8006c22 <UART_SetConfig+0x2e6>
 80069fc:	2304      	movs	r3, #4
 80069fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a02:	e10e      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006a04:	2308      	movs	r3, #8
 8006a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a0a:	e10a      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006a0c:	2310      	movs	r3, #16
 8006a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a12:	e106      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a7c      	ldr	r2, [pc, #496]	; (8006c0c <UART_SetConfig+0x2d0>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d138      	bne.n	8006a90 <UART_SetConfig+0x154>
 8006a1e:	4b7a      	ldr	r3, [pc, #488]	; (8006c08 <UART_SetConfig+0x2cc>)
 8006a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a24:	f003 030c 	and.w	r3, r3, #12
 8006a28:	2b0c      	cmp	r3, #12
 8006a2a:	d82d      	bhi.n	8006a88 <UART_SetConfig+0x14c>
 8006a2c:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <UART_SetConfig+0xf8>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006a69 	.word	0x08006a69
 8006a38:	08006a89 	.word	0x08006a89
 8006a3c:	08006a89 	.word	0x08006a89
 8006a40:	08006a89 	.word	0x08006a89
 8006a44:	08006a79 	.word	0x08006a79
 8006a48:	08006a89 	.word	0x08006a89
 8006a4c:	08006a89 	.word	0x08006a89
 8006a50:	08006a89 	.word	0x08006a89
 8006a54:	08006a71 	.word	0x08006a71
 8006a58:	08006a89 	.word	0x08006a89
 8006a5c:	08006a89 	.word	0x08006a89
 8006a60:	08006a89 	.word	0x08006a89
 8006a64:	08006a81 	.word	0x08006a81
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a6e:	e0d8      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006a70:	2302      	movs	r3, #2
 8006a72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a76:	e0d4      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006a78:	2304      	movs	r3, #4
 8006a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a7e:	e0d0      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006a80:	2308      	movs	r3, #8
 8006a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a86:	e0cc      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006a88:	2310      	movs	r3, #16
 8006a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a8e:	e0c8      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a5e      	ldr	r2, [pc, #376]	; (8006c10 <UART_SetConfig+0x2d4>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d125      	bne.n	8006ae6 <UART_SetConfig+0x1aa>
 8006a9a:	4b5b      	ldr	r3, [pc, #364]	; (8006c08 <UART_SetConfig+0x2cc>)
 8006a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006aa4:	2b30      	cmp	r3, #48	; 0x30
 8006aa6:	d016      	beq.n	8006ad6 <UART_SetConfig+0x19a>
 8006aa8:	2b30      	cmp	r3, #48	; 0x30
 8006aaa:	d818      	bhi.n	8006ade <UART_SetConfig+0x1a2>
 8006aac:	2b20      	cmp	r3, #32
 8006aae:	d00a      	beq.n	8006ac6 <UART_SetConfig+0x18a>
 8006ab0:	2b20      	cmp	r3, #32
 8006ab2:	d814      	bhi.n	8006ade <UART_SetConfig+0x1a2>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <UART_SetConfig+0x182>
 8006ab8:	2b10      	cmp	r3, #16
 8006aba:	d008      	beq.n	8006ace <UART_SetConfig+0x192>
 8006abc:	e00f      	b.n	8006ade <UART_SetConfig+0x1a2>
 8006abe:	2300      	movs	r3, #0
 8006ac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ac4:	e0ad      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006acc:	e0a9      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006ace:	2304      	movs	r3, #4
 8006ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ad4:	e0a5      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006ad6:	2308      	movs	r3, #8
 8006ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006adc:	e0a1      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006ade:	2310      	movs	r3, #16
 8006ae0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ae4:	e09d      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a4a      	ldr	r2, [pc, #296]	; (8006c14 <UART_SetConfig+0x2d8>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d125      	bne.n	8006b3c <UART_SetConfig+0x200>
 8006af0:	4b45      	ldr	r3, [pc, #276]	; (8006c08 <UART_SetConfig+0x2cc>)
 8006af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006afa:	2bc0      	cmp	r3, #192	; 0xc0
 8006afc:	d016      	beq.n	8006b2c <UART_SetConfig+0x1f0>
 8006afe:	2bc0      	cmp	r3, #192	; 0xc0
 8006b00:	d818      	bhi.n	8006b34 <UART_SetConfig+0x1f8>
 8006b02:	2b80      	cmp	r3, #128	; 0x80
 8006b04:	d00a      	beq.n	8006b1c <UART_SetConfig+0x1e0>
 8006b06:	2b80      	cmp	r3, #128	; 0x80
 8006b08:	d814      	bhi.n	8006b34 <UART_SetConfig+0x1f8>
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <UART_SetConfig+0x1d8>
 8006b0e:	2b40      	cmp	r3, #64	; 0x40
 8006b10:	d008      	beq.n	8006b24 <UART_SetConfig+0x1e8>
 8006b12:	e00f      	b.n	8006b34 <UART_SetConfig+0x1f8>
 8006b14:	2300      	movs	r3, #0
 8006b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b1a:	e082      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b1c:	2302      	movs	r3, #2
 8006b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b22:	e07e      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b24:	2304      	movs	r3, #4
 8006b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b2a:	e07a      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b2c:	2308      	movs	r3, #8
 8006b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b32:	e076      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b34:	2310      	movs	r3, #16
 8006b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b3a:	e072      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a35      	ldr	r2, [pc, #212]	; (8006c18 <UART_SetConfig+0x2dc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d12a      	bne.n	8006b9c <UART_SetConfig+0x260>
 8006b46:	4b30      	ldr	r3, [pc, #192]	; (8006c08 <UART_SetConfig+0x2cc>)
 8006b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b54:	d01a      	beq.n	8006b8c <UART_SetConfig+0x250>
 8006b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b5a:	d81b      	bhi.n	8006b94 <UART_SetConfig+0x258>
 8006b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b60:	d00c      	beq.n	8006b7c <UART_SetConfig+0x240>
 8006b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b66:	d815      	bhi.n	8006b94 <UART_SetConfig+0x258>
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <UART_SetConfig+0x238>
 8006b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b70:	d008      	beq.n	8006b84 <UART_SetConfig+0x248>
 8006b72:	e00f      	b.n	8006b94 <UART_SetConfig+0x258>
 8006b74:	2300      	movs	r3, #0
 8006b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b7a:	e052      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b7c:	2302      	movs	r3, #2
 8006b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b82:	e04e      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b84:	2304      	movs	r3, #4
 8006b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b8a:	e04a      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b8c:	2308      	movs	r3, #8
 8006b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b92:	e046      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b94:	2310      	movs	r3, #16
 8006b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b9a:	e042      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a17      	ldr	r2, [pc, #92]	; (8006c00 <UART_SetConfig+0x2c4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d13a      	bne.n	8006c1c <UART_SetConfig+0x2e0>
 8006ba6:	4b18      	ldr	r3, [pc, #96]	; (8006c08 <UART_SetConfig+0x2cc>)
 8006ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006bb0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bb4:	d01a      	beq.n	8006bec <UART_SetConfig+0x2b0>
 8006bb6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bba:	d81b      	bhi.n	8006bf4 <UART_SetConfig+0x2b8>
 8006bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bc0:	d00c      	beq.n	8006bdc <UART_SetConfig+0x2a0>
 8006bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bc6:	d815      	bhi.n	8006bf4 <UART_SetConfig+0x2b8>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <UART_SetConfig+0x298>
 8006bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bd0:	d008      	beq.n	8006be4 <UART_SetConfig+0x2a8>
 8006bd2:	e00f      	b.n	8006bf4 <UART_SetConfig+0x2b8>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bda:	e022      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006be2:	e01e      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006be4:	2304      	movs	r3, #4
 8006be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bea:	e01a      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006bec:	2308      	movs	r3, #8
 8006bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bf2:	e016      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006bf4:	2310      	movs	r3, #16
 8006bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006bfa:	e012      	b.n	8006c22 <UART_SetConfig+0x2e6>
 8006bfc:	efff69f3 	.word	0xefff69f3
 8006c00:	40008000 	.word	0x40008000
 8006c04:	40013800 	.word	0x40013800
 8006c08:	40021000 	.word	0x40021000
 8006c0c:	40004400 	.word	0x40004400
 8006c10:	40004800 	.word	0x40004800
 8006c14:	40004c00 	.word	0x40004c00
 8006c18:	40005000 	.word	0x40005000
 8006c1c:	2310      	movs	r3, #16
 8006c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a9f      	ldr	r2, [pc, #636]	; (8006ea4 <UART_SetConfig+0x568>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d17a      	bne.n	8006d22 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c30:	2b08      	cmp	r3, #8
 8006c32:	d824      	bhi.n	8006c7e <UART_SetConfig+0x342>
 8006c34:	a201      	add	r2, pc, #4	; (adr r2, 8006c3c <UART_SetConfig+0x300>)
 8006c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c3a:	bf00      	nop
 8006c3c:	08006c61 	.word	0x08006c61
 8006c40:	08006c7f 	.word	0x08006c7f
 8006c44:	08006c69 	.word	0x08006c69
 8006c48:	08006c7f 	.word	0x08006c7f
 8006c4c:	08006c6f 	.word	0x08006c6f
 8006c50:	08006c7f 	.word	0x08006c7f
 8006c54:	08006c7f 	.word	0x08006c7f
 8006c58:	08006c7f 	.word	0x08006c7f
 8006c5c:	08006c77 	.word	0x08006c77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c60:	f7fd fdde 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 8006c64:	61f8      	str	r0, [r7, #28]
        break;
 8006c66:	e010      	b.n	8006c8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c68:	4b8f      	ldr	r3, [pc, #572]	; (8006ea8 <UART_SetConfig+0x56c>)
 8006c6a:	61fb      	str	r3, [r7, #28]
        break;
 8006c6c:	e00d      	b.n	8006c8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c6e:	f7fd fd3f 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8006c72:	61f8      	str	r0, [r7, #28]
        break;
 8006c74:	e009      	b.n	8006c8a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c7a:	61fb      	str	r3, [r7, #28]
        break;
 8006c7c:	e005      	b.n	8006c8a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c88:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 80fb 	beq.w	8006e88 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	4613      	mov	r3, r2
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	4413      	add	r3, r2
 8006c9c:	69fa      	ldr	r2, [r7, #28]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d305      	bcc.n	8006cae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ca8:	69fa      	ldr	r2, [r7, #28]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d903      	bls.n	8006cb6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cb4:	e0e8      	b.n	8006e88 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	461c      	mov	r4, r3
 8006cbc:	4615      	mov	r5, r2
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	f04f 0300 	mov.w	r3, #0
 8006cc6:	022b      	lsls	r3, r5, #8
 8006cc8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006ccc:	0222      	lsls	r2, r4, #8
 8006cce:	68f9      	ldr	r1, [r7, #12]
 8006cd0:	6849      	ldr	r1, [r1, #4]
 8006cd2:	0849      	lsrs	r1, r1, #1
 8006cd4:	2000      	movs	r0, #0
 8006cd6:	4688      	mov	r8, r1
 8006cd8:	4681      	mov	r9, r0
 8006cda:	eb12 0a08 	adds.w	sl, r2, r8
 8006cde:	eb43 0b09 	adc.w	fp, r3, r9
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	603b      	str	r3, [r7, #0]
 8006cea:	607a      	str	r2, [r7, #4]
 8006cec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cf0:	4650      	mov	r0, sl
 8006cf2:	4659      	mov	r1, fp
 8006cf4:	f7f9 fec2 	bl	8000a7c <__aeabi_uldivmod>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4613      	mov	r3, r2
 8006cfe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d06:	d308      	bcc.n	8006d1a <UART_SetConfig+0x3de>
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d0e:	d204      	bcs.n	8006d1a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	60da      	str	r2, [r3, #12]
 8006d18:	e0b6      	b.n	8006e88 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006d20:	e0b2      	b.n	8006e88 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d2a:	d15e      	bne.n	8006dea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006d2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d828      	bhi.n	8006d86 <UART_SetConfig+0x44a>
 8006d34:	a201      	add	r2, pc, #4	; (adr r2, 8006d3c <UART_SetConfig+0x400>)
 8006d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3a:	bf00      	nop
 8006d3c:	08006d61 	.word	0x08006d61
 8006d40:	08006d69 	.word	0x08006d69
 8006d44:	08006d71 	.word	0x08006d71
 8006d48:	08006d87 	.word	0x08006d87
 8006d4c:	08006d77 	.word	0x08006d77
 8006d50:	08006d87 	.word	0x08006d87
 8006d54:	08006d87 	.word	0x08006d87
 8006d58:	08006d87 	.word	0x08006d87
 8006d5c:	08006d7f 	.word	0x08006d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d60:	f7fd fd5e 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 8006d64:	61f8      	str	r0, [r7, #28]
        break;
 8006d66:	e014      	b.n	8006d92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d68:	f7fd fd70 	bl	800484c <HAL_RCC_GetPCLK2Freq>
 8006d6c:	61f8      	str	r0, [r7, #28]
        break;
 8006d6e:	e010      	b.n	8006d92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d70:	4b4d      	ldr	r3, [pc, #308]	; (8006ea8 <UART_SetConfig+0x56c>)
 8006d72:	61fb      	str	r3, [r7, #28]
        break;
 8006d74:	e00d      	b.n	8006d92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d76:	f7fd fcbb 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8006d7a:	61f8      	str	r0, [r7, #28]
        break;
 8006d7c:	e009      	b.n	8006d92 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d82:	61fb      	str	r3, [r7, #28]
        break;
 8006d84:	e005      	b.n	8006d92 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d077      	beq.n	8006e88 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	005a      	lsls	r2, r3, #1
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	085b      	lsrs	r3, r3, #1
 8006da2:	441a      	add	r2, r3
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dae:	69bb      	ldr	r3, [r7, #24]
 8006db0:	2b0f      	cmp	r3, #15
 8006db2:	d916      	bls.n	8006de2 <UART_SetConfig+0x4a6>
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dba:	d212      	bcs.n	8006de2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	f023 030f 	bic.w	r3, r3, #15
 8006dc4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	085b      	lsrs	r3, r3, #1
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	8afb      	ldrh	r3, [r7, #22]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	8afa      	ldrh	r2, [r7, #22]
 8006dde:	60da      	str	r2, [r3, #12]
 8006de0:	e052      	b.n	8006e88 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006de8:	e04e      	b.n	8006e88 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006dea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006dee:	2b08      	cmp	r3, #8
 8006df0:	d827      	bhi.n	8006e42 <UART_SetConfig+0x506>
 8006df2:	a201      	add	r2, pc, #4	; (adr r2, 8006df8 <UART_SetConfig+0x4bc>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e1d 	.word	0x08006e1d
 8006dfc:	08006e25 	.word	0x08006e25
 8006e00:	08006e2d 	.word	0x08006e2d
 8006e04:	08006e43 	.word	0x08006e43
 8006e08:	08006e33 	.word	0x08006e33
 8006e0c:	08006e43 	.word	0x08006e43
 8006e10:	08006e43 	.word	0x08006e43
 8006e14:	08006e43 	.word	0x08006e43
 8006e18:	08006e3b 	.word	0x08006e3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e1c:	f7fd fd00 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 8006e20:	61f8      	str	r0, [r7, #28]
        break;
 8006e22:	e014      	b.n	8006e4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e24:	f7fd fd12 	bl	800484c <HAL_RCC_GetPCLK2Freq>
 8006e28:	61f8      	str	r0, [r7, #28]
        break;
 8006e2a:	e010      	b.n	8006e4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e2c:	4b1e      	ldr	r3, [pc, #120]	; (8006ea8 <UART_SetConfig+0x56c>)
 8006e2e:	61fb      	str	r3, [r7, #28]
        break;
 8006e30:	e00d      	b.n	8006e4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e32:	f7fd fc5d 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8006e36:	61f8      	str	r0, [r7, #28]
        break;
 8006e38:	e009      	b.n	8006e4e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e3e:	61fb      	str	r3, [r7, #28]
        break;
 8006e40:	e005      	b.n	8006e4e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006e42:	2300      	movs	r3, #0
 8006e44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006e4c:	bf00      	nop
    }

    if (pclk != 0U)
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d019      	beq.n	8006e88 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	085a      	lsrs	r2, r3, #1
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	441a      	add	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e66:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	2b0f      	cmp	r3, #15
 8006e6c:	d909      	bls.n	8006e82 <UART_SetConfig+0x546>
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e74:	d205      	bcs.n	8006e82 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	b29a      	uxth	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	60da      	str	r2, [r3, #12]
 8006e80:	e002      	b.n	8006e88 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006e94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3728      	adds	r7, #40	; 0x28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ea2:	bf00      	nop
 8006ea4:	40008000 	.word	0x40008000
 8006ea8:	00f42400 	.word	0x00f42400

08006eac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00a      	beq.n	8006ed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00a      	beq.n	8006f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	f003 0304 	and.w	r3, r3, #4
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	f003 0310 	and.w	r3, r3, #16
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d00a      	beq.n	8006f5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d00a      	beq.n	8006f80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d01a      	beq.n	8006fc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006faa:	d10a      	bne.n	8006fc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	605a      	str	r2, [r3, #4]
  }
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b098      	sub	sp, #96	; 0x60
 8006ff4:	af02      	add	r7, sp, #8
 8006ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007000:	f7fa ffaa 	bl	8001f58 <HAL_GetTick>
 8007004:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0308 	and.w	r3, r3, #8
 8007010:	2b08      	cmp	r3, #8
 8007012:	d12e      	bne.n	8007072 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007014:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007018:	9300      	str	r3, [sp, #0]
 800701a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800701c:	2200      	movs	r2, #0
 800701e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f88c 	bl	8007140 <UART_WaitOnFlagUntilTimeout>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d021      	beq.n	8007072 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007036:	e853 3f00 	ldrex	r3, [r3]
 800703a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800703c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007042:	653b      	str	r3, [r7, #80]	; 0x50
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	461a      	mov	r2, r3
 800704a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800704c:	647b      	str	r3, [r7, #68]	; 0x44
 800704e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007050:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007054:	e841 2300 	strex	r3, r2, [r1]
 8007058:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800705a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800705c:	2b00      	cmp	r3, #0
 800705e:	d1e6      	bne.n	800702e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2220      	movs	r2, #32
 8007064:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e062      	b.n	8007138 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 0304 	and.w	r3, r3, #4
 800707c:	2b04      	cmp	r3, #4
 800707e:	d149      	bne.n	8007114 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007080:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007088:	2200      	movs	r2, #0
 800708a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f856 	bl	8007140 <UART_WaitOnFlagUntilTimeout>
 8007094:	4603      	mov	r3, r0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d03c      	beq.n	8007114 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	623b      	str	r3, [r7, #32]
   return(result);
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	461a      	mov	r2, r3
 80070b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070b8:	633b      	str	r3, [r7, #48]	; 0x30
 80070ba:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e6      	bne.n	800709a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3308      	adds	r3, #8
 80070d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	60fb      	str	r3, [r7, #12]
   return(result);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f023 0301 	bic.w	r3, r3, #1
 80070e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	3308      	adds	r3, #8
 80070ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070ec:	61fa      	str	r2, [r7, #28]
 80070ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	69b9      	ldr	r1, [r7, #24]
 80070f2:	69fa      	ldr	r2, [r7, #28]
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	617b      	str	r3, [r7, #20]
   return(result);
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e5      	bne.n	80070cc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2220      	movs	r2, #32
 8007104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e011      	b.n	8007138 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2220      	movs	r2, #32
 8007118:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3758      	adds	r7, #88	; 0x58
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	603b      	str	r3, [r7, #0]
 800714c:	4613      	mov	r3, r2
 800714e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007150:	e049      	b.n	80071e6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007158:	d045      	beq.n	80071e6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800715a:	f7fa fefd 	bl	8001f58 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	429a      	cmp	r2, r3
 8007168:	d302      	bcc.n	8007170 <UART_WaitOnFlagUntilTimeout+0x30>
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e048      	b.n	8007206 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0304 	and.w	r3, r3, #4
 800717e:	2b00      	cmp	r3, #0
 8007180:	d031      	beq.n	80071e6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69db      	ldr	r3, [r3, #28]
 8007188:	f003 0308 	and.w	r3, r3, #8
 800718c:	2b08      	cmp	r3, #8
 800718e:	d110      	bne.n	80071b2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2208      	movs	r2, #8
 8007196:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f838 	bl	800720e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2208      	movs	r2, #8
 80071a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e029      	b.n	8007206 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071c0:	d111      	bne.n	80071e6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 f81e 	bl	800720e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2220      	movs	r2, #32
 80071d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e00f      	b.n	8007206 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	69da      	ldr	r2, [r3, #28]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	4013      	ands	r3, r2
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	bf0c      	ite	eq
 80071f6:	2301      	moveq	r3, #1
 80071f8:	2300      	movne	r3, #0
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	461a      	mov	r2, r3
 80071fe:	79fb      	ldrb	r3, [r7, #7]
 8007200:	429a      	cmp	r2, r3
 8007202:	d0a6      	beq.n	8007152 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800720e:	b480      	push	{r7}
 8007210:	b095      	sub	sp, #84	; 0x54
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800722a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007234:	643b      	str	r3, [r7, #64]	; 0x40
 8007236:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800723a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800723c:	e841 2300 	strex	r3, r2, [r1]
 8007240:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e6      	bne.n	8007216 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	3308      	adds	r3, #8
 800724e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	6a3b      	ldr	r3, [r7, #32]
 8007252:	e853 3f00 	ldrex	r3, [r3]
 8007256:	61fb      	str	r3, [r7, #28]
   return(result);
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	f023 0301 	bic.w	r3, r3, #1
 800725e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3308      	adds	r3, #8
 8007266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007268:	62fa      	str	r2, [r7, #44]	; 0x2c
 800726a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800726e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007270:	e841 2300 	strex	r3, r2, [r1]
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e5      	bne.n	8007248 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007280:	2b01      	cmp	r3, #1
 8007282:	d118      	bne.n	80072b6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	e853 3f00 	ldrex	r3, [r3]
 8007290:	60bb      	str	r3, [r7, #8]
   return(result);
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	f023 0310 	bic.w	r3, r3, #16
 8007298:	647b      	str	r3, [r7, #68]	; 0x44
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80072a2:	61bb      	str	r3, [r7, #24]
 80072a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a6:	6979      	ldr	r1, [r7, #20]
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	e841 2300 	strex	r3, r2, [r1]
 80072ae:	613b      	str	r3, [r7, #16]
   return(result);
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d1e6      	bne.n	8007284 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2220      	movs	r2, #32
 80072ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80072ca:	bf00      	nop
 80072cc:	3754      	adds	r7, #84	; 0x54
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
	...

080072d8 <__NVIC_SetPriority>:
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	4603      	mov	r3, r0
 80072e0:	6039      	str	r1, [r7, #0]
 80072e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80072e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	db0a      	blt.n	8007302 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	b2da      	uxtb	r2, r3
 80072f0:	490c      	ldr	r1, [pc, #48]	; (8007324 <__NVIC_SetPriority+0x4c>)
 80072f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80072f6:	0112      	lsls	r2, r2, #4
 80072f8:	b2d2      	uxtb	r2, r2
 80072fa:	440b      	add	r3, r1
 80072fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007300:	e00a      	b.n	8007318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	b2da      	uxtb	r2, r3
 8007306:	4908      	ldr	r1, [pc, #32]	; (8007328 <__NVIC_SetPriority+0x50>)
 8007308:	79fb      	ldrb	r3, [r7, #7]
 800730a:	f003 030f 	and.w	r3, r3, #15
 800730e:	3b04      	subs	r3, #4
 8007310:	0112      	lsls	r2, r2, #4
 8007312:	b2d2      	uxtb	r2, r2
 8007314:	440b      	add	r3, r1
 8007316:	761a      	strb	r2, [r3, #24]
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	e000e100 	.word	0xe000e100
 8007328:	e000ed00 	.word	0xe000ed00

0800732c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800732c:	b580      	push	{r7, lr}
 800732e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007330:	2100      	movs	r1, #0
 8007332:	f06f 0004 	mvn.w	r0, #4
 8007336:	f7ff ffcf 	bl	80072d8 <__NVIC_SetPriority>
#endif
}
 800733a:	bf00      	nop
 800733c:	bd80      	pop	{r7, pc}
	...

08007340 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007346:	f3ef 8305 	mrs	r3, IPSR
 800734a:	603b      	str	r3, [r7, #0]
  return(result);
 800734c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007352:	f06f 0305 	mvn.w	r3, #5
 8007356:	607b      	str	r3, [r7, #4]
 8007358:	e00c      	b.n	8007374 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800735a:	4b0a      	ldr	r3, [pc, #40]	; (8007384 <osKernelInitialize+0x44>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d105      	bne.n	800736e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007362:	4b08      	ldr	r3, [pc, #32]	; (8007384 <osKernelInitialize+0x44>)
 8007364:	2201      	movs	r2, #1
 8007366:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007368:	2300      	movs	r3, #0
 800736a:	607b      	str	r3, [r7, #4]
 800736c:	e002      	b.n	8007374 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800736e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007372:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007374:	687b      	ldr	r3, [r7, #4]
}
 8007376:	4618      	mov	r0, r3
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	20000230 	.word	0x20000230

08007388 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800738e:	f3ef 8305 	mrs	r3, IPSR
 8007392:	603b      	str	r3, [r7, #0]
  return(result);
 8007394:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800739a:	f06f 0305 	mvn.w	r3, #5
 800739e:	607b      	str	r3, [r7, #4]
 80073a0:	e010      	b.n	80073c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80073a2:	4b0b      	ldr	r3, [pc, #44]	; (80073d0 <osKernelStart+0x48>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d109      	bne.n	80073be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80073aa:	f7ff ffbf 	bl	800732c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80073ae:	4b08      	ldr	r3, [pc, #32]	; (80073d0 <osKernelStart+0x48>)
 80073b0:	2202      	movs	r2, #2
 80073b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80073b4:	f001 fb9c 	bl	8008af0 <vTaskStartScheduler>
      stat = osOK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	607b      	str	r3, [r7, #4]
 80073bc:	e002      	b.n	80073c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80073be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80073c4:	687b      	ldr	r3, [r7, #4]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3708      	adds	r7, #8
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	20000230 	.word	0x20000230

080073d4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073da:	f3ef 8305 	mrs	r3, IPSR
 80073de:	603b      	str	r3, [r7, #0]
  return(result);
 80073e0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d003      	beq.n	80073ee <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80073e6:	f001 fca5 	bl	8008d34 <xTaskGetTickCountFromISR>
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	e002      	b.n	80073f4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80073ee:	f001 fc91 	bl	8008d14 <xTaskGetTickCount>
 80073f2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80073f4:	687b      	ldr	r3, [r7, #4]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80073fe:	b580      	push	{r7, lr}
 8007400:	b08e      	sub	sp, #56	; 0x38
 8007402:	af04      	add	r7, sp, #16
 8007404:	60f8      	str	r0, [r7, #12]
 8007406:	60b9      	str	r1, [r7, #8]
 8007408:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800740a:	2300      	movs	r3, #0
 800740c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800740e:	f3ef 8305 	mrs	r3, IPSR
 8007412:	617b      	str	r3, [r7, #20]
  return(result);
 8007414:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007416:	2b00      	cmp	r3, #0
 8007418:	d17e      	bne.n	8007518 <osThreadNew+0x11a>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d07b      	beq.n	8007518 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007420:	2380      	movs	r3, #128	; 0x80
 8007422:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007424:	2318      	movs	r3, #24
 8007426:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007428:	2300      	movs	r3, #0
 800742a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800742c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007430:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d045      	beq.n	80074c4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d002      	beq.n	8007446 <osThreadNew+0x48>
        name = attr->name;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d002      	beq.n	8007454 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d008      	beq.n	800746c <osThreadNew+0x6e>
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	2b38      	cmp	r3, #56	; 0x38
 800745e:	d805      	bhi.n	800746c <osThreadNew+0x6e>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <osThreadNew+0x72>
        return (NULL);
 800746c:	2300      	movs	r3, #0
 800746e:	e054      	b.n	800751a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	695b      	ldr	r3, [r3, #20]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d003      	beq.n	8007480 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	695b      	ldr	r3, [r3, #20]
 800747c:	089b      	lsrs	r3, r3, #2
 800747e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00e      	beq.n	80074a6 <osThreadNew+0xa8>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	2b5b      	cmp	r3, #91	; 0x5b
 800748e:	d90a      	bls.n	80074a6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007494:	2b00      	cmp	r3, #0
 8007496:	d006      	beq.n	80074a6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <osThreadNew+0xa8>
        mem = 1;
 80074a0:	2301      	movs	r3, #1
 80074a2:	61bb      	str	r3, [r7, #24]
 80074a4:	e010      	b.n	80074c8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10c      	bne.n	80074c8 <osThreadNew+0xca>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	68db      	ldr	r3, [r3, #12]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d108      	bne.n	80074c8 <osThreadNew+0xca>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d104      	bne.n	80074c8 <osThreadNew+0xca>
          mem = 0;
 80074be:	2300      	movs	r3, #0
 80074c0:	61bb      	str	r3, [r7, #24]
 80074c2:	e001      	b.n	80074c8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80074c4:	2300      	movs	r3, #0
 80074c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d110      	bne.n	80074f0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80074d6:	9202      	str	r2, [sp, #8]
 80074d8:	9301      	str	r3, [sp, #4]
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	6a3a      	ldr	r2, [r7, #32]
 80074e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f001 f92d 	bl	8008744 <xTaskCreateStatic>
 80074ea:	4603      	mov	r3, r0
 80074ec:	613b      	str	r3, [r7, #16]
 80074ee:	e013      	b.n	8007518 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d110      	bne.n	8007518 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	f107 0310 	add.w	r3, r7, #16
 80074fe:	9301      	str	r3, [sp, #4]
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	9300      	str	r3, [sp, #0]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f001 f978 	bl	80087fe <xTaskCreate>
 800750e:	4603      	mov	r3, r0
 8007510:	2b01      	cmp	r3, #1
 8007512:	d001      	beq.n	8007518 <osThreadNew+0x11a>
            hTask = NULL;
 8007514:	2300      	movs	r3, #0
 8007516:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007518:	693b      	ldr	r3, [r7, #16]
}
 800751a:	4618      	mov	r0, r3
 800751c:	3728      	adds	r7, #40	; 0x28
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007522:	b580      	push	{r7, lr}
 8007524:	b084      	sub	sp, #16
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800752a:	f3ef 8305 	mrs	r3, IPSR
 800752e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007530:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007532:	2b00      	cmp	r3, #0
 8007534:	d003      	beq.n	800753e <osDelay+0x1c>
    stat = osErrorISR;
 8007536:	f06f 0305 	mvn.w	r3, #5
 800753a:	60fb      	str	r3, [r7, #12]
 800753c:	e007      	b.n	800754e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800753e:	2300      	movs	r3, #0
 8007540:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <osDelay+0x2c>
      vTaskDelay(ticks);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f001 fa9d 	bl	8008a88 <vTaskDelay>
    }
  }

  return (stat);
 800754e:	68fb      	ldr	r3, [r7, #12]
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007558:	b580      	push	{r7, lr}
 800755a:	b088      	sub	sp, #32
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007560:	2300      	movs	r3, #0
 8007562:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007564:	f3ef 8305 	mrs	r3, IPSR
 8007568:	60bb      	str	r3, [r7, #8]
  return(result);
 800756a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800756c:	2b00      	cmp	r3, #0
 800756e:	d174      	bne.n	800765a <osMutexNew+0x102>
    if (attr != NULL) {
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d003      	beq.n	800757e <osMutexNew+0x26>
      type = attr->attr_bits;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	61bb      	str	r3, [r7, #24]
 800757c:	e001      	b.n	8007582 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800757e:	2300      	movs	r3, #0
 8007580:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d002      	beq.n	8007592 <osMutexNew+0x3a>
      rmtx = 1U;
 800758c:	2301      	movs	r3, #1
 800758e:	617b      	str	r3, [r7, #20]
 8007590:	e001      	b.n	8007596 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	f003 0308 	and.w	r3, r3, #8
 800759c:	2b00      	cmp	r3, #0
 800759e:	d15c      	bne.n	800765a <osMutexNew+0x102>
      mem = -1;
 80075a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075a4:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d015      	beq.n	80075d8 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d006      	beq.n	80075c2 <osMutexNew+0x6a>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	2b4f      	cmp	r3, #79	; 0x4f
 80075ba:	d902      	bls.n	80075c2 <osMutexNew+0x6a>
          mem = 1;
 80075bc:	2301      	movs	r3, #1
 80075be:	613b      	str	r3, [r7, #16]
 80075c0:	e00c      	b.n	80075dc <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d108      	bne.n	80075dc <osMutexNew+0x84>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d104      	bne.n	80075dc <osMutexNew+0x84>
            mem = 0;
 80075d2:	2300      	movs	r3, #0
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	e001      	b.n	80075dc <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80075d8:	2300      	movs	r3, #0
 80075da:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d112      	bne.n	8007608 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d007      	beq.n	80075f8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	4619      	mov	r1, r3
 80075ee:	2004      	movs	r0, #4
 80075f0:	f000 fb17 	bl	8007c22 <xQueueCreateMutexStatic>
 80075f4:	61f8      	str	r0, [r7, #28]
 80075f6:	e016      	b.n	8007626 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	4619      	mov	r1, r3
 80075fe:	2001      	movs	r0, #1
 8007600:	f000 fb0f 	bl	8007c22 <xQueueCreateMutexStatic>
 8007604:	61f8      	str	r0, [r7, #28]
 8007606:	e00e      	b.n	8007626 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10b      	bne.n	8007626 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007614:	2004      	movs	r0, #4
 8007616:	f000 faec 	bl	8007bf2 <xQueueCreateMutex>
 800761a:	61f8      	str	r0, [r7, #28]
 800761c:	e003      	b.n	8007626 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800761e:	2001      	movs	r0, #1
 8007620:	f000 fae7 	bl	8007bf2 <xQueueCreateMutex>
 8007624:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00c      	beq.n	8007646 <osMutexNew+0xee>
        if (attr != NULL) {
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <osMutexNew+0xe2>
          name = attr->name;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	e001      	b.n	800763e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800763a:	2300      	movs	r3, #0
 800763c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800763e:	68f9      	ldr	r1, [r7, #12]
 8007640:	69f8      	ldr	r0, [r7, #28]
 8007642:	f001 f821 	bl	8008688 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d006      	beq.n	800765a <osMutexNew+0x102>
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	f043 0301 	orr.w	r3, r3, #1
 8007658:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800765a:	69fb      	ldr	r3, [r7, #28]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3720      	adds	r7, #32
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f023 0301 	bic.w	r3, r3, #1
 8007674:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800767e:	2300      	movs	r3, #0
 8007680:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007682:	f3ef 8305 	mrs	r3, IPSR
 8007686:	60bb      	str	r3, [r7, #8]
  return(result);
 8007688:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800768e:	f06f 0305 	mvn.w	r3, #5
 8007692:	617b      	str	r3, [r7, #20]
 8007694:	e02c      	b.n	80076f0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d103      	bne.n	80076a4 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800769c:	f06f 0303 	mvn.w	r3, #3
 80076a0:	617b      	str	r3, [r7, #20]
 80076a2:	e025      	b.n	80076f0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d011      	beq.n	80076ce <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80076aa:	6839      	ldr	r1, [r7, #0]
 80076ac:	6938      	ldr	r0, [r7, #16]
 80076ae:	f000 fb07 	bl	8007cc0 <xQueueTakeMutexRecursive>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d01b      	beq.n	80076f0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d003      	beq.n	80076c6 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80076be:	f06f 0301 	mvn.w	r3, #1
 80076c2:	617b      	str	r3, [r7, #20]
 80076c4:	e014      	b.n	80076f0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80076c6:	f06f 0302 	mvn.w	r3, #2
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	e010      	b.n	80076f0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6938      	ldr	r0, [r7, #16]
 80076d2:	f000 fda5 	bl	8008220 <xQueueSemaphoreTake>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d009      	beq.n	80076f0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80076e2:	f06f 0301 	mvn.w	r3, #1
 80076e6:	617b      	str	r3, [r7, #20]
 80076e8:	e002      	b.n	80076f0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80076ea:	f06f 0302 	mvn.w	r3, #2
 80076ee:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80076f0:	697b      	ldr	r3, [r7, #20]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3718      	adds	r7, #24
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b086      	sub	sp, #24
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f023 0301 	bic.w	r3, r3, #1
 8007708:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007716:	f3ef 8305 	mrs	r3, IPSR
 800771a:	60bb      	str	r3, [r7, #8]
  return(result);
 800771c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <osMutexRelease+0x30>
    stat = osErrorISR;
 8007722:	f06f 0305 	mvn.w	r3, #5
 8007726:	617b      	str	r3, [r7, #20]
 8007728:	e01f      	b.n	800776a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d103      	bne.n	8007738 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007730:	f06f 0303 	mvn.w	r3, #3
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	e018      	b.n	800776a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d009      	beq.n	8007752 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800773e:	6938      	ldr	r0, [r7, #16]
 8007740:	f000 fa8a 	bl	8007c58 <xQueueGiveMutexRecursive>
 8007744:	4603      	mov	r3, r0
 8007746:	2b01      	cmp	r3, #1
 8007748:	d00f      	beq.n	800776a <osMutexRelease+0x70>
        stat = osErrorResource;
 800774a:	f06f 0302 	mvn.w	r3, #2
 800774e:	617b      	str	r3, [r7, #20]
 8007750:	e00b      	b.n	800776a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007752:	2300      	movs	r3, #0
 8007754:	2200      	movs	r2, #0
 8007756:	2100      	movs	r1, #0
 8007758:	6938      	ldr	r0, [r7, #16]
 800775a:	f000 fae7 	bl	8007d2c <xQueueGenericSend>
 800775e:	4603      	mov	r3, r0
 8007760:	2b01      	cmp	r3, #1
 8007762:	d002      	beq.n	800776a <osMutexRelease+0x70>
        stat = osErrorResource;
 8007764:	f06f 0302 	mvn.w	r3, #2
 8007768:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800776a:	697b      	ldr	r3, [r7, #20]
}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007774:	b480      	push	{r7}
 8007776:	b085      	sub	sp, #20
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	4a07      	ldr	r2, [pc, #28]	; (80077a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007784:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	4a06      	ldr	r2, [pc, #24]	; (80077a4 <vApplicationGetIdleTaskMemory+0x30>)
 800778a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2280      	movs	r2, #128	; 0x80
 8007790:	601a      	str	r2, [r3, #0]
}
 8007792:	bf00      	nop
 8007794:	3714      	adds	r7, #20
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	20000234 	.word	0x20000234
 80077a4:	20000290 	.word	0x20000290

080077a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4a07      	ldr	r2, [pc, #28]	; (80077d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80077b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	4a06      	ldr	r2, [pc, #24]	; (80077d8 <vApplicationGetTimerTaskMemory+0x30>)
 80077be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077c6:	601a      	str	r2, [r3, #0]
}
 80077c8:	bf00      	nop
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	20000490 	.word	0x20000490
 80077d8:	200004ec 	.word	0x200004ec

080077dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f103 0208 	add.w	r2, r3, #8
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f103 0208 	add.w	r2, r3, #8
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f103 0208 	add.w	r2, r3, #8
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800781c:	b480      	push	{r7}
 800781e:	b083      	sub	sp, #12
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800782a:	bf00      	nop
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007836:	b480      	push	{r7}
 8007838:	b085      	sub	sp, #20
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
 800783e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	687a      	ldr	r2, [r7, #4]
 8007866:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	601a      	str	r2, [r3, #0]
}
 8007872:	bf00      	nop
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800787e:	b480      	push	{r7}
 8007880:	b085      	sub	sp, #20
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007894:	d103      	bne.n	800789e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	e00c      	b.n	80078b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	3308      	adds	r3, #8
 80078a2:	60fb      	str	r3, [r7, #12]
 80078a4:	e002      	b.n	80078ac <vListInsert+0x2e>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	60fb      	str	r3, [r7, #12]
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d2f6      	bcs.n	80078a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	601a      	str	r2, [r3, #0]
}
 80078e4:	bf00      	nop
 80078e6:	3714      	adds	r7, #20
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078f0:	b480      	push	{r7}
 80078f2:	b085      	sub	sp, #20
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	6892      	ldr	r2, [r2, #8]
 8007906:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	6852      	ldr	r2, [r2, #4]
 8007910:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	687a      	ldr	r2, [r7, #4]
 8007918:	429a      	cmp	r2, r3
 800791a:	d103      	bne.n	8007924 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689a      	ldr	r2, [r3, #8]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	1e5a      	subs	r2, r3, #1
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
}
 8007938:	4618      	mov	r0, r3
 800793a:	3714      	adds	r7, #20
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d10a      	bne.n	800796e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800796e:	f002 fb81 	bl	800a074 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797a:	68f9      	ldr	r1, [r7, #12]
 800797c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800797e:	fb01 f303 	mul.w	r3, r1, r3
 8007982:	441a      	add	r2, r3
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799e:	3b01      	subs	r3, #1
 80079a0:	68f9      	ldr	r1, [r7, #12]
 80079a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80079a4:	fb01 f303 	mul.w	r3, r1, r3
 80079a8:	441a      	add	r2, r3
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	22ff      	movs	r2, #255	; 0xff
 80079b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	22ff      	movs	r2, #255	; 0xff
 80079ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d114      	bne.n	80079ee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01a      	beq.n	8007a02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	3310      	adds	r3, #16
 80079d0:	4618      	mov	r0, r3
 80079d2:	f001 fb29 	bl	8009028 <xTaskRemoveFromEventList>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d012      	beq.n	8007a02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079dc:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <xQueueGenericReset+0xcc>)
 80079de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e2:	601a      	str	r2, [r3, #0]
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	e009      	b.n	8007a02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	3310      	adds	r3, #16
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7ff fef2 	bl	80077dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	3324      	adds	r3, #36	; 0x24
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7ff feed 	bl	80077dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007a02:	f002 fb67 	bl	800a0d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007a06:	2301      	movs	r3, #1
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	e000ed04 	.word	0xe000ed04

08007a14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08e      	sub	sp, #56	; 0x38
 8007a18:	af02      	add	r7, sp, #8
 8007a1a:	60f8      	str	r0, [r7, #12]
 8007a1c:	60b9      	str	r1, [r7, #8]
 8007a1e:	607a      	str	r2, [r7, #4]
 8007a20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10a      	bne.n	8007a3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007a3a:	bf00      	nop
 8007a3c:	e7fe      	b.n	8007a3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d10a      	bne.n	8007a5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a56:	bf00      	nop
 8007a58:	e7fe      	b.n	8007a58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <xQueueGenericCreateStatic+0x52>
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <xQueueGenericCreateStatic+0x56>
 8007a66:	2301      	movs	r3, #1
 8007a68:	e000      	b.n	8007a6c <xQueueGenericCreateStatic+0x58>
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d10a      	bne.n	8007a86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	623b      	str	r3, [r7, #32]
}
 8007a82:	bf00      	nop
 8007a84:	e7fe      	b.n	8007a84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d102      	bne.n	8007a92 <xQueueGenericCreateStatic+0x7e>
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <xQueueGenericCreateStatic+0x82>
 8007a92:	2301      	movs	r3, #1
 8007a94:	e000      	b.n	8007a98 <xQueueGenericCreateStatic+0x84>
 8007a96:	2300      	movs	r3, #0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10a      	bne.n	8007ab2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	61fb      	str	r3, [r7, #28]
}
 8007aae:	bf00      	nop
 8007ab0:	e7fe      	b.n	8007ab0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007ab2:	2350      	movs	r3, #80	; 0x50
 8007ab4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b50      	cmp	r3, #80	; 0x50
 8007aba:	d00a      	beq.n	8007ad2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac0:	f383 8811 	msr	BASEPRI, r3
 8007ac4:	f3bf 8f6f 	isb	sy
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	61bb      	str	r3, [r7, #24]
}
 8007ace:	bf00      	nop
 8007ad0:	e7fe      	b.n	8007ad0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ad2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00d      	beq.n	8007afa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ae6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aec:	9300      	str	r3, [sp, #0]
 8007aee:	4613      	mov	r3, r2
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	68b9      	ldr	r1, [r7, #8]
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 f83f 	bl	8007b78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3730      	adds	r7, #48	; 0x30
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}

08007b04 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b08a      	sub	sp, #40	; 0x28
 8007b08:	af02      	add	r7, sp, #8
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d10a      	bne.n	8007b2e <xQueueGenericCreate+0x2a>
	__asm volatile
 8007b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1c:	f383 8811 	msr	BASEPRI, r3
 8007b20:	f3bf 8f6f 	isb	sy
 8007b24:	f3bf 8f4f 	dsb	sy
 8007b28:	613b      	str	r3, [r7, #16]
}
 8007b2a:	bf00      	nop
 8007b2c:	e7fe      	b.n	8007b2c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	68ba      	ldr	r2, [r7, #8]
 8007b32:	fb02 f303 	mul.w	r3, r2, r3
 8007b36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	3350      	adds	r3, #80	; 0x50
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f002 fbbb 	bl	800a2b8 <pvPortMalloc>
 8007b42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d011      	beq.n	8007b6e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007b4a:	69bb      	ldr	r3, [r7, #24]
 8007b4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	3350      	adds	r3, #80	; 0x50
 8007b52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b5c:	79fa      	ldrb	r2, [r7, #7]
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	4613      	mov	r3, r2
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	68b9      	ldr	r1, [r7, #8]
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f000 f805 	bl	8007b78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007b6e:	69bb      	ldr	r3, [r7, #24]
	}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3720      	adds	r7, #32
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}

08007b78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
 8007b84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d103      	bne.n	8007b94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b8c:	69bb      	ldr	r3, [r7, #24]
 8007b8e:	69ba      	ldr	r2, [r7, #24]
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	e002      	b.n	8007b9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ba6:	2101      	movs	r1, #1
 8007ba8:	69b8      	ldr	r0, [r7, #24]
 8007baa:	f7ff fecb 	bl	8007944 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	78fa      	ldrb	r2, [r7, #3]
 8007bb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007bb6:	bf00      	nop
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}

08007bbe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007bbe:	b580      	push	{r7, lr}
 8007bc0:	b082      	sub	sp, #8
 8007bc2:	af00      	add	r7, sp, #0
 8007bc4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00e      	beq.n	8007bea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007bde:	2300      	movs	r3, #0
 8007be0:	2200      	movs	r2, #0
 8007be2:	2100      	movs	r1, #0
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f8a1 	bl	8007d2c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007bea:	bf00      	nop
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b086      	sub	sp, #24
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	617b      	str	r3, [r7, #20]
 8007c00:	2300      	movs	r3, #0
 8007c02:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	461a      	mov	r2, r3
 8007c08:	6939      	ldr	r1, [r7, #16]
 8007c0a:	6978      	ldr	r0, [r7, #20]
 8007c0c:	f7ff ff7a 	bl	8007b04 <xQueueGenericCreate>
 8007c10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f7ff ffd3 	bl	8007bbe <prvInitialiseMutex>

		return xNewQueue;
 8007c18:	68fb      	ldr	r3, [r7, #12]
	}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3718      	adds	r7, #24
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b088      	sub	sp, #32
 8007c26:	af02      	add	r7, sp, #8
 8007c28:	4603      	mov	r3, r0
 8007c2a:	6039      	str	r1, [r7, #0]
 8007c2c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	617b      	str	r3, [r7, #20]
 8007c32:	2300      	movs	r3, #0
 8007c34:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007c36:	79fb      	ldrb	r3, [r7, #7]
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	6939      	ldr	r1, [r7, #16]
 8007c40:	6978      	ldr	r0, [r7, #20]
 8007c42:	f7ff fee7 	bl	8007a14 <xQueueGenericCreateStatic>
 8007c46:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f7ff ffb8 	bl	8007bbe <prvInitialiseMutex>

		return xNewQueue;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
	}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3718      	adds	r7, #24
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007c58:	b590      	push	{r4, r7, lr}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d10a      	bne.n	8007c80 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8007c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6e:	f383 8811 	msr	BASEPRI, r3
 8007c72:	f3bf 8f6f 	isb	sy
 8007c76:	f3bf 8f4f 	dsb	sy
 8007c7a:	60fb      	str	r3, [r7, #12]
}
 8007c7c:	bf00      	nop
 8007c7e:	e7fe      	b.n	8007c7e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	689c      	ldr	r4, [r3, #8]
 8007c84:	f001 fb8e 	bl	80093a4 <xTaskGetCurrentTaskHandle>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	429c      	cmp	r4, r3
 8007c8c:	d111      	bne.n	8007cb2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	1e5a      	subs	r2, r3, #1
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	68db      	ldr	r3, [r3, #12]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d105      	bne.n	8007cac <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	6938      	ldr	r0, [r7, #16]
 8007ca8:	f000 f840 	bl	8007d2c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007cac:	2301      	movs	r3, #1
 8007cae:	617b      	str	r3, [r7, #20]
 8007cb0:	e001      	b.n	8007cb6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007cb6:	697b      	ldr	r3, [r7, #20]
	}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	371c      	adds	r7, #28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd90      	pop	{r4, r7, pc}

08007cc0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007cc0:	b590      	push	{r4, r7, lr}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d10a      	bne.n	8007cea <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8007cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cd8:	f383 8811 	msr	BASEPRI, r3
 8007cdc:	f3bf 8f6f 	isb	sy
 8007ce0:	f3bf 8f4f 	dsb	sy
 8007ce4:	60fb      	str	r3, [r7, #12]
}
 8007ce6:	bf00      	nop
 8007ce8:	e7fe      	b.n	8007ce8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	689c      	ldr	r4, [r3, #8]
 8007cee:	f001 fb59 	bl	80093a4 <xTaskGetCurrentTaskHandle>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	429c      	cmp	r4, r3
 8007cf6:	d107      	bne.n	8007d08 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	1c5a      	adds	r2, r3, #1
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8007d02:	2301      	movs	r3, #1
 8007d04:	617b      	str	r3, [r7, #20]
 8007d06:	e00c      	b.n	8007d22 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007d08:	6839      	ldr	r1, [r7, #0]
 8007d0a:	6938      	ldr	r0, [r7, #16]
 8007d0c:	f000 fa88 	bl	8008220 <xQueueSemaphoreTake>
 8007d10:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d004      	beq.n	8007d22 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	1c5a      	adds	r2, r3, #1
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8007d22:	697b      	ldr	r3, [r7, #20]
	}
 8007d24:	4618      	mov	r0, r3
 8007d26:	371c      	adds	r7, #28
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd90      	pop	{r4, r7, pc}

08007d2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08e      	sub	sp, #56	; 0x38
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
 8007d38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10a      	bne.n	8007d5e <xQueueGenericSend+0x32>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d5a:	bf00      	nop
 8007d5c:	e7fe      	b.n	8007d5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d103      	bne.n	8007d6c <xQueueGenericSend+0x40>
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <xQueueGenericSend+0x44>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e000      	b.n	8007d72 <xQueueGenericSend+0x46>
 8007d70:	2300      	movs	r3, #0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10a      	bne.n	8007d8c <xQueueGenericSend+0x60>
	__asm volatile
 8007d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d88:	bf00      	nop
 8007d8a:	e7fe      	b.n	8007d8a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d103      	bne.n	8007d9a <xQueueGenericSend+0x6e>
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d101      	bne.n	8007d9e <xQueueGenericSend+0x72>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e000      	b.n	8007da0 <xQueueGenericSend+0x74>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10a      	bne.n	8007dba <xQueueGenericSend+0x8e>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	623b      	str	r3, [r7, #32]
}
 8007db6:	bf00      	nop
 8007db8:	e7fe      	b.n	8007db8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dba:	f001 fb03 	bl	80093c4 <xTaskGetSchedulerState>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d102      	bne.n	8007dca <xQueueGenericSend+0x9e>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <xQueueGenericSend+0xa2>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <xQueueGenericSend+0xa4>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d10a      	bne.n	8007dea <xQueueGenericSend+0xbe>
	__asm volatile
 8007dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd8:	f383 8811 	msr	BASEPRI, r3
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	61fb      	str	r3, [r7, #28]
}
 8007de6:	bf00      	nop
 8007de8:	e7fe      	b.n	8007de8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007dea:	f002 f943 	bl	800a074 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d302      	bcc.n	8007e00 <xQueueGenericSend+0xd4>
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d129      	bne.n	8007e54 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	68b9      	ldr	r1, [r7, #8]
 8007e04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e06:	f000 fb2f 	bl	8008468 <prvCopyDataToQueue>
 8007e0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d010      	beq.n	8007e36 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e16:	3324      	adds	r3, #36	; 0x24
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f001 f905 	bl	8009028 <xTaskRemoveFromEventList>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d013      	beq.n	8007e4c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007e24:	4b3f      	ldr	r3, [pc, #252]	; (8007f24 <xQueueGenericSend+0x1f8>)
 8007e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	f3bf 8f4f 	dsb	sy
 8007e30:	f3bf 8f6f 	isb	sy
 8007e34:	e00a      	b.n	8007e4c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d007      	beq.n	8007e4c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007e3c:	4b39      	ldr	r3, [pc, #228]	; (8007f24 <xQueueGenericSend+0x1f8>)
 8007e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007e4c:	f002 f942 	bl	800a0d4 <vPortExitCritical>
				return pdPASS;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e063      	b.n	8007f1c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d103      	bne.n	8007e62 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007e5a:	f002 f93b 	bl	800a0d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	e05c      	b.n	8007f1c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d106      	bne.n	8007e76 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e68:	f107 0314 	add.w	r3, r7, #20
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f001 f93f 	bl	80090f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e72:	2301      	movs	r3, #1
 8007e74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e76:	f002 f92d 	bl	800a0d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e7a:	f000 fe9f 	bl	8008bbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007e7e:	f002 f8f9 	bl	800a074 <vPortEnterCritical>
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e88:	b25b      	sxtb	r3, r3
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e8e:	d103      	bne.n	8007e98 <xQueueGenericSend+0x16c>
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	2200      	movs	r2, #0
 8007e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e9e:	b25b      	sxtb	r3, r3
 8007ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ea4:	d103      	bne.n	8007eae <xQueueGenericSend+0x182>
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007eae:	f002 f911 	bl	800a0d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007eb2:	1d3a      	adds	r2, r7, #4
 8007eb4:	f107 0314 	add.w	r3, r7, #20
 8007eb8:	4611      	mov	r1, r2
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f001 f92e 	bl	800911c <xTaskCheckForTimeOut>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d124      	bne.n	8007f10 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007ec6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ec8:	f000 fbc6 	bl	8008658 <prvIsQueueFull>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d018      	beq.n	8007f04 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	3310      	adds	r3, #16
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	4611      	mov	r1, r2
 8007eda:	4618      	mov	r0, r3
 8007edc:	f001 f854 	bl	8008f88 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007ee2:	f000 fb51 	bl	8008588 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007ee6:	f000 fe77 	bl	8008bd8 <xTaskResumeAll>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	f47f af7c 	bne.w	8007dea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007ef2:	4b0c      	ldr	r3, [pc, #48]	; (8007f24 <xQueueGenericSend+0x1f8>)
 8007ef4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ef8:	601a      	str	r2, [r3, #0]
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	f3bf 8f6f 	isb	sy
 8007f02:	e772      	b.n	8007dea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f06:	f000 fb3f 	bl	8008588 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f0a:	f000 fe65 	bl	8008bd8 <xTaskResumeAll>
 8007f0e:	e76c      	b.n	8007dea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f12:	f000 fb39 	bl	8008588 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f16:	f000 fe5f 	bl	8008bd8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007f1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3738      	adds	r7, #56	; 0x38
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	e000ed04 	.word	0xe000ed04

08007f28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b090      	sub	sp, #64	; 0x40
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
 8007f34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d10a      	bne.n	8007f56 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f44:	f383 8811 	msr	BASEPRI, r3
 8007f48:	f3bf 8f6f 	isb	sy
 8007f4c:	f3bf 8f4f 	dsb	sy
 8007f50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f52:	bf00      	nop
 8007f54:	e7fe      	b.n	8007f54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d103      	bne.n	8007f64 <xQueueGenericSendFromISR+0x3c>
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <xQueueGenericSendFromISR+0x40>
 8007f64:	2301      	movs	r3, #1
 8007f66:	e000      	b.n	8007f6a <xQueueGenericSendFromISR+0x42>
 8007f68:	2300      	movs	r3, #0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10a      	bne.n	8007f84 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f80:	bf00      	nop
 8007f82:	e7fe      	b.n	8007f82 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d103      	bne.n	8007f92 <xQueueGenericSendFromISR+0x6a>
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d101      	bne.n	8007f96 <xQueueGenericSendFromISR+0x6e>
 8007f92:	2301      	movs	r3, #1
 8007f94:	e000      	b.n	8007f98 <xQueueGenericSendFromISR+0x70>
 8007f96:	2300      	movs	r3, #0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d10a      	bne.n	8007fb2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	623b      	str	r3, [r7, #32]
}
 8007fae:	bf00      	nop
 8007fb0:	e7fe      	b.n	8007fb0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007fb2:	f002 f941 	bl	800a238 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007fb6:	f3ef 8211 	mrs	r2, BASEPRI
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	61fa      	str	r2, [r7, #28]
 8007fcc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007fce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007fd0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d302      	bcc.n	8007fe4 <xQueueGenericSendFromISR+0xbc>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d12f      	bne.n	8008044 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	68b9      	ldr	r1, [r7, #8]
 8007ff8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ffa:	f000 fa35 	bl	8008468 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007ffe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008006:	d112      	bne.n	800802e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800c:	2b00      	cmp	r3, #0
 800800e:	d016      	beq.n	800803e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008012:	3324      	adds	r3, #36	; 0x24
 8008014:	4618      	mov	r0, r3
 8008016:	f001 f807 	bl	8009028 <xTaskRemoveFromEventList>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d00e      	beq.n	800803e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00b      	beq.n	800803e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2201      	movs	r2, #1
 800802a:	601a      	str	r2, [r3, #0]
 800802c:	e007      	b.n	800803e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800802e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008032:	3301      	adds	r3, #1
 8008034:	b2db      	uxtb	r3, r3
 8008036:	b25a      	sxtb	r2, r3
 8008038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800803e:	2301      	movs	r3, #1
 8008040:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008042:	e001      	b.n	8008048 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008044:	2300      	movs	r3, #0
 8008046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008052:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008056:	4618      	mov	r0, r3
 8008058:	3740      	adds	r7, #64	; 0x40
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}
	...

08008060 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b08c      	sub	sp, #48	; 0x30
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800806c:	2300      	movs	r3, #0
 800806e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10a      	bne.n	8008090 <xQueueReceive+0x30>
	__asm volatile
 800807a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800807e:	f383 8811 	msr	BASEPRI, r3
 8008082:	f3bf 8f6f 	isb	sy
 8008086:	f3bf 8f4f 	dsb	sy
 800808a:	623b      	str	r3, [r7, #32]
}
 800808c:	bf00      	nop
 800808e:	e7fe      	b.n	800808e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d103      	bne.n	800809e <xQueueReceive+0x3e>
 8008096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809a:	2b00      	cmp	r3, #0
 800809c:	d101      	bne.n	80080a2 <xQueueReceive+0x42>
 800809e:	2301      	movs	r3, #1
 80080a0:	e000      	b.n	80080a4 <xQueueReceive+0x44>
 80080a2:	2300      	movs	r3, #0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10a      	bne.n	80080be <xQueueReceive+0x5e>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	61fb      	str	r3, [r7, #28]
}
 80080ba:	bf00      	nop
 80080bc:	e7fe      	b.n	80080bc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080be:	f001 f981 	bl	80093c4 <xTaskGetSchedulerState>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d102      	bne.n	80080ce <xQueueReceive+0x6e>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <xQueueReceive+0x72>
 80080ce:	2301      	movs	r3, #1
 80080d0:	e000      	b.n	80080d4 <xQueueReceive+0x74>
 80080d2:	2300      	movs	r3, #0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10a      	bne.n	80080ee <xQueueReceive+0x8e>
	__asm volatile
 80080d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080dc:	f383 8811 	msr	BASEPRI, r3
 80080e0:	f3bf 8f6f 	isb	sy
 80080e4:	f3bf 8f4f 	dsb	sy
 80080e8:	61bb      	str	r3, [r7, #24]
}
 80080ea:	bf00      	nop
 80080ec:	e7fe      	b.n	80080ec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080ee:	f001 ffc1 	bl	800a074 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d01f      	beq.n	800813e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008102:	f000 fa1b 	bl	800853c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008108:	1e5a      	subs	r2, r3, #1
 800810a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800810c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00f      	beq.n	8008136 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008118:	3310      	adds	r3, #16
 800811a:	4618      	mov	r0, r3
 800811c:	f000 ff84 	bl	8009028 <xTaskRemoveFromEventList>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d007      	beq.n	8008136 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008126:	4b3d      	ldr	r3, [pc, #244]	; (800821c <xQueueReceive+0x1bc>)
 8008128:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800812c:	601a      	str	r2, [r3, #0]
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008136:	f001 ffcd 	bl	800a0d4 <vPortExitCritical>
				return pdPASS;
 800813a:	2301      	movs	r3, #1
 800813c:	e069      	b.n	8008212 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d103      	bne.n	800814c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008144:	f001 ffc6 	bl	800a0d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008148:	2300      	movs	r3, #0
 800814a:	e062      	b.n	8008212 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800814e:	2b00      	cmp	r3, #0
 8008150:	d106      	bne.n	8008160 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008152:	f107 0310 	add.w	r3, r7, #16
 8008156:	4618      	mov	r0, r3
 8008158:	f000 ffca 	bl	80090f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800815c:	2301      	movs	r3, #1
 800815e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008160:	f001 ffb8 	bl	800a0d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008164:	f000 fd2a 	bl	8008bbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008168:	f001 ff84 	bl	800a074 <vPortEnterCritical>
 800816c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008172:	b25b      	sxtb	r3, r3
 8008174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008178:	d103      	bne.n	8008182 <xQueueReceive+0x122>
 800817a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008188:	b25b      	sxtb	r3, r3
 800818a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800818e:	d103      	bne.n	8008198 <xQueueReceive+0x138>
 8008190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008198:	f001 ff9c 	bl	800a0d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800819c:	1d3a      	adds	r2, r7, #4
 800819e:	f107 0310 	add.w	r3, r7, #16
 80081a2:	4611      	mov	r1, r2
 80081a4:	4618      	mov	r0, r3
 80081a6:	f000 ffb9 	bl	800911c <xTaskCheckForTimeOut>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d123      	bne.n	80081f8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081b2:	f000 fa3b 	bl	800862c <prvIsQueueEmpty>
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d017      	beq.n	80081ec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081be:	3324      	adds	r3, #36	; 0x24
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	4611      	mov	r1, r2
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 fedf 	bl	8008f88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081cc:	f000 f9dc 	bl	8008588 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081d0:	f000 fd02 	bl	8008bd8 <xTaskResumeAll>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d189      	bne.n	80080ee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80081da:	4b10      	ldr	r3, [pc, #64]	; (800821c <xQueueReceive+0x1bc>)
 80081dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	f3bf 8f4f 	dsb	sy
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	e780      	b.n	80080ee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80081ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081ee:	f000 f9cb 	bl	8008588 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081f2:	f000 fcf1 	bl	8008bd8 <xTaskResumeAll>
 80081f6:	e77a      	b.n	80080ee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80081f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80081fa:	f000 f9c5 	bl	8008588 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081fe:	f000 fceb 	bl	8008bd8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008204:	f000 fa12 	bl	800862c <prvIsQueueEmpty>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	f43f af6f 	beq.w	80080ee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008210:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008212:	4618      	mov	r0, r3
 8008214:	3730      	adds	r7, #48	; 0x30
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}
 800821a:	bf00      	nop
 800821c:	e000ed04 	.word	0xe000ed04

08008220 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b08e      	sub	sp, #56	; 0x38
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800822a:	2300      	movs	r3, #0
 800822c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008232:	2300      	movs	r3, #0
 8008234:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10a      	bne.n	8008252 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	f383 8811 	msr	BASEPRI, r3
 8008244:	f3bf 8f6f 	isb	sy
 8008248:	f3bf 8f4f 	dsb	sy
 800824c:	623b      	str	r3, [r7, #32]
}
 800824e:	bf00      	nop
 8008250:	e7fe      	b.n	8008250 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00a      	beq.n	8008270 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800825a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800825e:	f383 8811 	msr	BASEPRI, r3
 8008262:	f3bf 8f6f 	isb	sy
 8008266:	f3bf 8f4f 	dsb	sy
 800826a:	61fb      	str	r3, [r7, #28]
}
 800826c:	bf00      	nop
 800826e:	e7fe      	b.n	800826e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008270:	f001 f8a8 	bl	80093c4 <xTaskGetSchedulerState>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d102      	bne.n	8008280 <xQueueSemaphoreTake+0x60>
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <xQueueSemaphoreTake+0x64>
 8008280:	2301      	movs	r3, #1
 8008282:	e000      	b.n	8008286 <xQueueSemaphoreTake+0x66>
 8008284:	2300      	movs	r3, #0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10a      	bne.n	80082a0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800828a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	61bb      	str	r3, [r7, #24]
}
 800829c:	bf00      	nop
 800829e:	e7fe      	b.n	800829e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082a0:	f001 fee8 	bl	800a074 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80082a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80082aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d024      	beq.n	80082fa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80082b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b2:	1e5a      	subs	r2, r3, #1
 80082b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d104      	bne.n	80082ca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80082c0:	f001 f9f6 	bl	80096b0 <pvTaskIncrementMutexHeldCount>
 80082c4:	4602      	mov	r2, r0
 80082c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00f      	beq.n	80082f2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082d4:	3310      	adds	r3, #16
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fea6 	bl	8009028 <xTaskRemoveFromEventList>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d007      	beq.n	80082f2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082e2:	4b54      	ldr	r3, [pc, #336]	; (8008434 <xQueueSemaphoreTake+0x214>)
 80082e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e8:	601a      	str	r2, [r3, #0]
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082f2:	f001 feef 	bl	800a0d4 <vPortExitCritical>
				return pdPASS;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e097      	b.n	800842a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d111      	bne.n	8008324 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	617b      	str	r3, [r7, #20]
}
 8008318:	bf00      	nop
 800831a:	e7fe      	b.n	800831a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800831c:	f001 feda 	bl	800a0d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008320:	2300      	movs	r3, #0
 8008322:	e082      	b.n	800842a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008326:	2b00      	cmp	r3, #0
 8008328:	d106      	bne.n	8008338 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800832a:	f107 030c 	add.w	r3, r7, #12
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fede 	bl	80090f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008334:	2301      	movs	r3, #1
 8008336:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008338:	f001 fecc 	bl	800a0d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800833c:	f000 fc3e 	bl	8008bbc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008340:	f001 fe98 	bl	800a074 <vPortEnterCritical>
 8008344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008346:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800834a:	b25b      	sxtb	r3, r3
 800834c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008350:	d103      	bne.n	800835a <xQueueSemaphoreTake+0x13a>
 8008352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008360:	b25b      	sxtb	r3, r3
 8008362:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008366:	d103      	bne.n	8008370 <xQueueSemaphoreTake+0x150>
 8008368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836a:	2200      	movs	r2, #0
 800836c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008370:	f001 feb0 	bl	800a0d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008374:	463a      	mov	r2, r7
 8008376:	f107 030c 	add.w	r3, r7, #12
 800837a:	4611      	mov	r1, r2
 800837c:	4618      	mov	r0, r3
 800837e:	f000 fecd 	bl	800911c <xTaskCheckForTimeOut>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d132      	bne.n	80083ee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008388:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800838a:	f000 f94f 	bl	800862c <prvIsQueueEmpty>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d026      	beq.n	80083e2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d109      	bne.n	80083b0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800839c:	f001 fe6a 	bl	800a074 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f001 f82b 	bl	8009400 <xTaskPriorityInherit>
 80083aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80083ac:	f001 fe92 	bl	800a0d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80083b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b2:	3324      	adds	r3, #36	; 0x24
 80083b4:	683a      	ldr	r2, [r7, #0]
 80083b6:	4611      	mov	r1, r2
 80083b8:	4618      	mov	r0, r3
 80083ba:	f000 fde5 	bl	8008f88 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80083be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083c0:	f000 f8e2 	bl	8008588 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80083c4:	f000 fc08 	bl	8008bd8 <xTaskResumeAll>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f47f af68 	bne.w	80082a0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80083d0:	4b18      	ldr	r3, [pc, #96]	; (8008434 <xQueueSemaphoreTake+0x214>)
 80083d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	f3bf 8f6f 	isb	sy
 80083e0:	e75e      	b.n	80082a0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80083e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083e4:	f000 f8d0 	bl	8008588 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083e8:	f000 fbf6 	bl	8008bd8 <xTaskResumeAll>
 80083ec:	e758      	b.n	80082a0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80083ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083f0:	f000 f8ca 	bl	8008588 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083f4:	f000 fbf0 	bl	8008bd8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80083f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083fa:	f000 f917 	bl	800862c <prvIsQueueEmpty>
 80083fe:	4603      	mov	r3, r0
 8008400:	2b00      	cmp	r3, #0
 8008402:	f43f af4d 	beq.w	80082a0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008408:	2b00      	cmp	r3, #0
 800840a:	d00d      	beq.n	8008428 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800840c:	f001 fe32 	bl	800a074 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008410:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008412:	f000 f811 	bl	8008438 <prvGetDisinheritPriorityAfterTimeout>
 8008416:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800841e:	4618      	mov	r0, r3
 8008420:	f001 f8c4 	bl	80095ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008424:	f001 fe56 	bl	800a0d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008428:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800842a:	4618      	mov	r0, r3
 800842c:	3738      	adds	r7, #56	; 0x38
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	e000ed04 	.word	0xe000ed04

08008438 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008438:	b480      	push	{r7}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008444:	2b00      	cmp	r3, #0
 8008446:	d006      	beq.n	8008456 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008452:	60fb      	str	r3, [r7, #12]
 8008454:	e001      	b.n	800845a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008456:	2300      	movs	r3, #0
 8008458:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800845a:	68fb      	ldr	r3, [r7, #12]
	}
 800845c:	4618      	mov	r0, r3
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b086      	sub	sp, #24
 800846c:	af00      	add	r7, sp, #0
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008474:	2300      	movs	r3, #0
 8008476:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800847c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10d      	bne.n	80084a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d14d      	bne.n	800852a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	4618      	mov	r0, r3
 8008494:	f001 f81c 	bl	80094d0 <xTaskPriorityDisinherit>
 8008498:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	609a      	str	r2, [r3, #8]
 80084a0:	e043      	b.n	800852a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d119      	bne.n	80084dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	6858      	ldr	r0, [r3, #4]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b0:	461a      	mov	r2, r3
 80084b2:	68b9      	ldr	r1, [r7, #8]
 80084b4:	f002 fb77 	bl	800aba6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c0:	441a      	add	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	685a      	ldr	r2, [r3, #4]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d32b      	bcc.n	800852a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	605a      	str	r2, [r3, #4]
 80084da:	e026      	b.n	800852a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	68d8      	ldr	r0, [r3, #12]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e4:	461a      	mov	r2, r3
 80084e6:	68b9      	ldr	r1, [r7, #8]
 80084e8:	f002 fb5d 	bl	800aba6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	68da      	ldr	r2, [r3, #12]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f4:	425b      	negs	r3, r3
 80084f6:	441a      	add	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	68da      	ldr	r2, [r3, #12]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	429a      	cmp	r2, r3
 8008506:	d207      	bcs.n	8008518 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	689a      	ldr	r2, [r3, #8]
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008510:	425b      	negs	r3, r3
 8008512:	441a      	add	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b02      	cmp	r3, #2
 800851c:	d105      	bne.n	800852a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	3b01      	subs	r3, #1
 8008528:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	1c5a      	adds	r2, r3, #1
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008532:	697b      	ldr	r3, [r7, #20]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3718      	adds	r7, #24
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}

0800853c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b082      	sub	sp, #8
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854a:	2b00      	cmp	r3, #0
 800854c:	d018      	beq.n	8008580 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	68da      	ldr	r2, [r3, #12]
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	441a      	add	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68da      	ldr	r2, [r3, #12]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	429a      	cmp	r2, r3
 8008566:	d303      	bcc.n	8008570 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	68d9      	ldr	r1, [r3, #12]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008578:	461a      	mov	r2, r3
 800857a:	6838      	ldr	r0, [r7, #0]
 800857c:	f002 fb13 	bl	800aba6 <memcpy>
	}
}
 8008580:	bf00      	nop
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008590:	f001 fd70 	bl	800a074 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800859a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800859c:	e011      	b.n	80085c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d012      	beq.n	80085cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	3324      	adds	r3, #36	; 0x24
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fd3c 	bl	8009028 <xTaskRemoveFromEventList>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80085b6:	f000 fe13 	bl	80091e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
 80085bc:	3b01      	subs	r3, #1
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80085c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	dce9      	bgt.n	800859e <prvUnlockQueue+0x16>
 80085ca:	e000      	b.n	80085ce <prvUnlockQueue+0x46>
					break;
 80085cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	22ff      	movs	r2, #255	; 0xff
 80085d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80085d6:	f001 fd7d 	bl	800a0d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80085da:	f001 fd4b 	bl	800a074 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80085e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80085e6:	e011      	b.n	800860c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d012      	beq.n	8008616 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	3310      	adds	r3, #16
 80085f4:	4618      	mov	r0, r3
 80085f6:	f000 fd17 	bl	8009028 <xTaskRemoveFromEventList>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008600:	f000 fdee 	bl	80091e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	3b01      	subs	r3, #1
 8008608:	b2db      	uxtb	r3, r3
 800860a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800860c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008610:	2b00      	cmp	r3, #0
 8008612:	dce9      	bgt.n	80085e8 <prvUnlockQueue+0x60>
 8008614:	e000      	b.n	8008618 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008616:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	22ff      	movs	r2, #255	; 0xff
 800861c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008620:	f001 fd58 	bl	800a0d4 <vPortExitCritical>
}
 8008624:	bf00      	nop
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008634:	f001 fd1e 	bl	800a074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800863c:	2b00      	cmp	r3, #0
 800863e:	d102      	bne.n	8008646 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008640:	2301      	movs	r3, #1
 8008642:	60fb      	str	r3, [r7, #12]
 8008644:	e001      	b.n	800864a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008646:	2300      	movs	r3, #0
 8008648:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800864a:	f001 fd43 	bl	800a0d4 <vPortExitCritical>

	return xReturn;
 800864e:	68fb      	ldr	r3, [r7, #12]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008660:	f001 fd08 	bl	800a074 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800866c:	429a      	cmp	r2, r3
 800866e:	d102      	bne.n	8008676 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008670:	2301      	movs	r3, #1
 8008672:	60fb      	str	r3, [r7, #12]
 8008674:	e001      	b.n	800867a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008676:	2300      	movs	r3, #0
 8008678:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800867a:	f001 fd2b 	bl	800a0d4 <vPortExitCritical>

	return xReturn;
 800867e:	68fb      	ldr	r3, [r7, #12]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008692:	2300      	movs	r3, #0
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	e014      	b.n	80086c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008698:	4a0f      	ldr	r2, [pc, #60]	; (80086d8 <vQueueAddToRegistry+0x50>)
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10b      	bne.n	80086bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80086a4:	490c      	ldr	r1, [pc, #48]	; (80086d8 <vQueueAddToRegistry+0x50>)
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	683a      	ldr	r2, [r7, #0]
 80086aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80086ae:	4a0a      	ldr	r2, [pc, #40]	; (80086d8 <vQueueAddToRegistry+0x50>)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	00db      	lsls	r3, r3, #3
 80086b4:	4413      	add	r3, r2
 80086b6:	687a      	ldr	r2, [r7, #4]
 80086b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80086ba:	e006      	b.n	80086ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3301      	adds	r3, #1
 80086c0:	60fb      	str	r3, [r7, #12]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2b07      	cmp	r3, #7
 80086c6:	d9e7      	bls.n	8008698 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	200008ec 	.word	0x200008ec

080086dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b086      	sub	sp, #24
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80086ec:	f001 fcc2 	bl	800a074 <vPortEnterCritical>
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80086f6:	b25b      	sxtb	r3, r3
 80086f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80086fc:	d103      	bne.n	8008706 <vQueueWaitForMessageRestricted+0x2a>
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800870c:	b25b      	sxtb	r3, r3
 800870e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008712:	d103      	bne.n	800871c <vQueueWaitForMessageRestricted+0x40>
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	2200      	movs	r2, #0
 8008718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800871c:	f001 fcda 	bl	800a0d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008724:	2b00      	cmp	r3, #0
 8008726:	d106      	bne.n	8008736 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	3324      	adds	r3, #36	; 0x24
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	68b9      	ldr	r1, [r7, #8]
 8008730:	4618      	mov	r0, r3
 8008732:	f000 fc4d 	bl	8008fd0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008736:	6978      	ldr	r0, [r7, #20]
 8008738:	f7ff ff26 	bl	8008588 <prvUnlockQueue>
	}
 800873c:	bf00      	nop
 800873e:	3718      	adds	r7, #24
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008744:	b580      	push	{r7, lr}
 8008746:	b08e      	sub	sp, #56	; 0x38
 8008748:	af04      	add	r7, sp, #16
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	60b9      	str	r1, [r7, #8]
 800874e:	607a      	str	r2, [r7, #4]
 8008750:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10a      	bne.n	800876e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	623b      	str	r3, [r7, #32]
}
 800876a:	bf00      	nop
 800876c:	e7fe      	b.n	800876c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800876e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008770:	2b00      	cmp	r3, #0
 8008772:	d10a      	bne.n	800878a <xTaskCreateStatic+0x46>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	61fb      	str	r3, [r7, #28]
}
 8008786:	bf00      	nop
 8008788:	e7fe      	b.n	8008788 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800878a:	235c      	movs	r3, #92	; 0x5c
 800878c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	2b5c      	cmp	r3, #92	; 0x5c
 8008792:	d00a      	beq.n	80087aa <xTaskCreateStatic+0x66>
	__asm volatile
 8008794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008798:	f383 8811 	msr	BASEPRI, r3
 800879c:	f3bf 8f6f 	isb	sy
 80087a0:	f3bf 8f4f 	dsb	sy
 80087a4:	61bb      	str	r3, [r7, #24]
}
 80087a6:	bf00      	nop
 80087a8:	e7fe      	b.n	80087a8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80087aa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80087ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d01e      	beq.n	80087f0 <xTaskCreateStatic+0xac>
 80087b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d01b      	beq.n	80087f0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80087b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087c0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80087c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c4:	2202      	movs	r2, #2
 80087c6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80087ca:	2300      	movs	r3, #0
 80087cc:	9303      	str	r3, [sp, #12]
 80087ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d0:	9302      	str	r3, [sp, #8]
 80087d2:	f107 0314 	add.w	r3, r7, #20
 80087d6:	9301      	str	r3, [sp, #4]
 80087d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	68b9      	ldr	r1, [r7, #8]
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f000 f850 	bl	8008888 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80087ea:	f000 f8dd 	bl	80089a8 <prvAddNewTaskToReadyList>
 80087ee:	e001      	b.n	80087f4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80087f0:	2300      	movs	r3, #0
 80087f2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80087f4:	697b      	ldr	r3, [r7, #20]
	}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3728      	adds	r7, #40	; 0x28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b08c      	sub	sp, #48	; 0x30
 8008802:	af04      	add	r7, sp, #16
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	603b      	str	r3, [r7, #0]
 800880a:	4613      	mov	r3, r2
 800880c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800880e:	88fb      	ldrh	r3, [r7, #6]
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4618      	mov	r0, r3
 8008814:	f001 fd50 	bl	800a2b8 <pvPortMalloc>
 8008818:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00e      	beq.n	800883e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008820:	205c      	movs	r0, #92	; 0x5c
 8008822:	f001 fd49 	bl	800a2b8 <pvPortMalloc>
 8008826:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008828:	69fb      	ldr	r3, [r7, #28]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d003      	beq.n	8008836 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	631a      	str	r2, [r3, #48]	; 0x30
 8008834:	e005      	b.n	8008842 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008836:	6978      	ldr	r0, [r7, #20]
 8008838:	f001 fe0a 	bl	800a450 <vPortFree>
 800883c:	e001      	b.n	8008842 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800883e:	2300      	movs	r3, #0
 8008840:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d017      	beq.n	8008878 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008850:	88fa      	ldrh	r2, [r7, #6]
 8008852:	2300      	movs	r3, #0
 8008854:	9303      	str	r3, [sp, #12]
 8008856:	69fb      	ldr	r3, [r7, #28]
 8008858:	9302      	str	r3, [sp, #8]
 800885a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885c:	9301      	str	r3, [sp, #4]
 800885e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008860:	9300      	str	r3, [sp, #0]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	68b9      	ldr	r1, [r7, #8]
 8008866:	68f8      	ldr	r0, [r7, #12]
 8008868:	f000 f80e 	bl	8008888 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800886c:	69f8      	ldr	r0, [r7, #28]
 800886e:	f000 f89b 	bl	80089a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008872:	2301      	movs	r3, #1
 8008874:	61bb      	str	r3, [r7, #24]
 8008876:	e002      	b.n	800887e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008878:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800887c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800887e:	69bb      	ldr	r3, [r7, #24]
	}
 8008880:	4618      	mov	r0, r3
 8008882:	3720      	adds	r7, #32
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
 8008894:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008898:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	461a      	mov	r2, r3
 80088a0:	21a5      	movs	r1, #165	; 0xa5
 80088a2:	f002 f8a8 	bl	800a9f6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80088a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80088b0:	3b01      	subs	r3, #1
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80088b8:	69bb      	ldr	r3, [r7, #24]
 80088ba:	f023 0307 	bic.w	r3, r3, #7
 80088be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	f003 0307 	and.w	r3, r3, #7
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00a      	beq.n	80088e0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80088ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ce:	f383 8811 	msr	BASEPRI, r3
 80088d2:	f3bf 8f6f 	isb	sy
 80088d6:	f3bf 8f4f 	dsb	sy
 80088da:	617b      	str	r3, [r7, #20]
}
 80088dc:	bf00      	nop
 80088de:	e7fe      	b.n	80088de <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d01f      	beq.n	8008926 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088e6:	2300      	movs	r3, #0
 80088e8:	61fb      	str	r3, [r7, #28]
 80088ea:	e012      	b.n	8008912 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	4413      	add	r3, r2
 80088f2:	7819      	ldrb	r1, [r3, #0]
 80088f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	4413      	add	r3, r2
 80088fa:	3334      	adds	r3, #52	; 0x34
 80088fc:	460a      	mov	r2, r1
 80088fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	4413      	add	r3, r2
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d006      	beq.n	800891a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800890c:	69fb      	ldr	r3, [r7, #28]
 800890e:	3301      	adds	r3, #1
 8008910:	61fb      	str	r3, [r7, #28]
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	2b0f      	cmp	r3, #15
 8008916:	d9e9      	bls.n	80088ec <prvInitialiseNewTask+0x64>
 8008918:	e000      	b.n	800891c <prvInitialiseNewTask+0x94>
			{
				break;
 800891a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800891c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800891e:	2200      	movs	r2, #0
 8008920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008924:	e003      	b.n	800892e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800892e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008930:	2b37      	cmp	r3, #55	; 0x37
 8008932:	d901      	bls.n	8008938 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008934:	2337      	movs	r3, #55	; 0x37
 8008936:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800893c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800893e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008942:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008946:	2200      	movs	r2, #0
 8008948:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	3304      	adds	r3, #4
 800894e:	4618      	mov	r0, r3
 8008950:	f7fe ff64 	bl	800781c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008956:	3318      	adds	r3, #24
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe ff5f 	bl	800781c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800895e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008962:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800896a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800896c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800896e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008972:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008976:	2200      	movs	r2, #0
 8008978:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800897a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800897c:	2200      	movs	r2, #0
 800897e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008982:	683a      	ldr	r2, [r7, #0]
 8008984:	68f9      	ldr	r1, [r7, #12]
 8008986:	69b8      	ldr	r0, [r7, #24]
 8008988:	f001 fa48 	bl	8009e1c <pxPortInitialiseStack>
 800898c:	4602      	mov	r2, r0
 800898e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008990:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008994:	2b00      	cmp	r3, #0
 8008996:	d002      	beq.n	800899e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800899c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800899e:	bf00      	nop
 80089a0:	3720      	adds	r7, #32
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
	...

080089a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80089b0:	f001 fb60 	bl	800a074 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80089b4:	4b2d      	ldr	r3, [pc, #180]	; (8008a6c <prvAddNewTaskToReadyList+0xc4>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3301      	adds	r3, #1
 80089ba:	4a2c      	ldr	r2, [pc, #176]	; (8008a6c <prvAddNewTaskToReadyList+0xc4>)
 80089bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80089be:	4b2c      	ldr	r3, [pc, #176]	; (8008a70 <prvAddNewTaskToReadyList+0xc8>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d109      	bne.n	80089da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80089c6:	4a2a      	ldr	r2, [pc, #168]	; (8008a70 <prvAddNewTaskToReadyList+0xc8>)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80089cc:	4b27      	ldr	r3, [pc, #156]	; (8008a6c <prvAddNewTaskToReadyList+0xc4>)
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d110      	bne.n	80089f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80089d4:	f000 fc28 	bl	8009228 <prvInitialiseTaskLists>
 80089d8:	e00d      	b.n	80089f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80089da:	4b26      	ldr	r3, [pc, #152]	; (8008a74 <prvAddNewTaskToReadyList+0xcc>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d109      	bne.n	80089f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80089e2:	4b23      	ldr	r3, [pc, #140]	; (8008a70 <prvAddNewTaskToReadyList+0xc8>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d802      	bhi.n	80089f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80089f0:	4a1f      	ldr	r2, [pc, #124]	; (8008a70 <prvAddNewTaskToReadyList+0xc8>)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80089f6:	4b20      	ldr	r3, [pc, #128]	; (8008a78 <prvAddNewTaskToReadyList+0xd0>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	3301      	adds	r3, #1
 80089fc:	4a1e      	ldr	r2, [pc, #120]	; (8008a78 <prvAddNewTaskToReadyList+0xd0>)
 80089fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008a00:	4b1d      	ldr	r3, [pc, #116]	; (8008a78 <prvAddNewTaskToReadyList+0xd0>)
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a0c:	4b1b      	ldr	r3, [pc, #108]	; (8008a7c <prvAddNewTaskToReadyList+0xd4>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d903      	bls.n	8008a1c <prvAddNewTaskToReadyList+0x74>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a18:	4a18      	ldr	r2, [pc, #96]	; (8008a7c <prvAddNewTaskToReadyList+0xd4>)
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a20:	4613      	mov	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4a15      	ldr	r2, [pc, #84]	; (8008a80 <prvAddNewTaskToReadyList+0xd8>)
 8008a2a:	441a      	add	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3304      	adds	r3, #4
 8008a30:	4619      	mov	r1, r3
 8008a32:	4610      	mov	r0, r2
 8008a34:	f7fe feff 	bl	8007836 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008a38:	f001 fb4c 	bl	800a0d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008a3c:	4b0d      	ldr	r3, [pc, #52]	; (8008a74 <prvAddNewTaskToReadyList+0xcc>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00e      	beq.n	8008a62 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a44:	4b0a      	ldr	r3, [pc, #40]	; (8008a70 <prvAddNewTaskToReadyList+0xc8>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d207      	bcs.n	8008a62 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008a52:	4b0c      	ldr	r3, [pc, #48]	; (8008a84 <prvAddNewTaskToReadyList+0xdc>)
 8008a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a58:	601a      	str	r2, [r3, #0]
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a62:	bf00      	nop
 8008a64:	3708      	adds	r7, #8
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	20000e00 	.word	0x20000e00
 8008a70:	2000092c 	.word	0x2000092c
 8008a74:	20000e0c 	.word	0x20000e0c
 8008a78:	20000e1c 	.word	0x20000e1c
 8008a7c:	20000e08 	.word	0x20000e08
 8008a80:	20000930 	.word	0x20000930
 8008a84:	e000ed04 	.word	0xe000ed04

08008a88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008a90:	2300      	movs	r3, #0
 8008a92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d017      	beq.n	8008aca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008a9a:	4b13      	ldr	r3, [pc, #76]	; (8008ae8 <vTaskDelay+0x60>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00a      	beq.n	8008ab8 <vTaskDelay+0x30>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	60bb      	str	r3, [r7, #8]
}
 8008ab4:	bf00      	nop
 8008ab6:	e7fe      	b.n	8008ab6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008ab8:	f000 f880 	bl	8008bbc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008abc:	2100      	movs	r1, #0
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f000 fe0a 	bl	80096d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ac4:	f000 f888 	bl	8008bd8 <xTaskResumeAll>
 8008ac8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d107      	bne.n	8008ae0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008ad0:	4b06      	ldr	r3, [pc, #24]	; (8008aec <vTaskDelay+0x64>)
 8008ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ad6:	601a      	str	r2, [r3, #0]
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ae0:	bf00      	nop
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	20000e28 	.word	0x20000e28
 8008aec:	e000ed04 	.word	0xe000ed04

08008af0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b08a      	sub	sp, #40	; 0x28
 8008af4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008af6:	2300      	movs	r3, #0
 8008af8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008afa:	2300      	movs	r3, #0
 8008afc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008afe:	463a      	mov	r2, r7
 8008b00:	1d39      	adds	r1, r7, #4
 8008b02:	f107 0308 	add.w	r3, r7, #8
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fe fe34 	bl	8007774 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	9202      	str	r2, [sp, #8]
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	2300      	movs	r3, #0
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	460a      	mov	r2, r1
 8008b1e:	4921      	ldr	r1, [pc, #132]	; (8008ba4 <vTaskStartScheduler+0xb4>)
 8008b20:	4821      	ldr	r0, [pc, #132]	; (8008ba8 <vTaskStartScheduler+0xb8>)
 8008b22:	f7ff fe0f 	bl	8008744 <xTaskCreateStatic>
 8008b26:	4603      	mov	r3, r0
 8008b28:	4a20      	ldr	r2, [pc, #128]	; (8008bac <vTaskStartScheduler+0xbc>)
 8008b2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b2c:	4b1f      	ldr	r3, [pc, #124]	; (8008bac <vTaskStartScheduler+0xbc>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008b34:	2301      	movs	r3, #1
 8008b36:	617b      	str	r3, [r7, #20]
 8008b38:	e001      	b.n	8008b3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d102      	bne.n	8008b4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008b44:	f000 fe1c 	bl	8009780 <xTimerCreateTimerTask>
 8008b48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d116      	bne.n	8008b7e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	613b      	str	r3, [r7, #16]
}
 8008b62:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b64:	4b12      	ldr	r3, [pc, #72]	; (8008bb0 <vTaskStartScheduler+0xc0>)
 8008b66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b6a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b6c:	4b11      	ldr	r3, [pc, #68]	; (8008bb4 <vTaskStartScheduler+0xc4>)
 8008b6e:	2201      	movs	r2, #1
 8008b70:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b72:	4b11      	ldr	r3, [pc, #68]	; (8008bb8 <vTaskStartScheduler+0xc8>)
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008b78:	f001 f9da 	bl	8009f30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008b7c:	e00e      	b.n	8008b9c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008b84:	d10a      	bne.n	8008b9c <vTaskStartScheduler+0xac>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	60fb      	str	r3, [r7, #12]
}
 8008b98:	bf00      	nop
 8008b9a:	e7fe      	b.n	8008b9a <vTaskStartScheduler+0xaa>
}
 8008b9c:	bf00      	nop
 8008b9e:	3718      	adds	r7, #24
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	0800bbfc 	.word	0x0800bbfc
 8008ba8:	080091f9 	.word	0x080091f9
 8008bac:	20000e24 	.word	0x20000e24
 8008bb0:	20000e20 	.word	0x20000e20
 8008bb4:	20000e0c 	.word	0x20000e0c
 8008bb8:	20000e04 	.word	0x20000e04

08008bbc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008bc0:	4b04      	ldr	r3, [pc, #16]	; (8008bd4 <vTaskSuspendAll+0x18>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	4a03      	ldr	r2, [pc, #12]	; (8008bd4 <vTaskSuspendAll+0x18>)
 8008bc8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008bca:	bf00      	nop
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr
 8008bd4:	20000e28 	.word	0x20000e28

08008bd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008be2:	2300      	movs	r3, #0
 8008be4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008be6:	4b42      	ldr	r3, [pc, #264]	; (8008cf0 <xTaskResumeAll+0x118>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10a      	bne.n	8008c04 <xTaskResumeAll+0x2c>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	603b      	str	r3, [r7, #0]
}
 8008c00:	bf00      	nop
 8008c02:	e7fe      	b.n	8008c02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c04:	f001 fa36 	bl	800a074 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c08:	4b39      	ldr	r3, [pc, #228]	; (8008cf0 <xTaskResumeAll+0x118>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	4a38      	ldr	r2, [pc, #224]	; (8008cf0 <xTaskResumeAll+0x118>)
 8008c10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c12:	4b37      	ldr	r3, [pc, #220]	; (8008cf0 <xTaskResumeAll+0x118>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d162      	bne.n	8008ce0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c1a:	4b36      	ldr	r3, [pc, #216]	; (8008cf4 <xTaskResumeAll+0x11c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d05e      	beq.n	8008ce0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c22:	e02f      	b.n	8008c84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c24:	4b34      	ldr	r3, [pc, #208]	; (8008cf8 <xTaskResumeAll+0x120>)
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	68db      	ldr	r3, [r3, #12]
 8008c2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	3318      	adds	r3, #24
 8008c30:	4618      	mov	r0, r3
 8008c32:	f7fe fe5d 	bl	80078f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	3304      	adds	r3, #4
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fe fe58 	bl	80078f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c44:	4b2d      	ldr	r3, [pc, #180]	; (8008cfc <xTaskResumeAll+0x124>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	d903      	bls.n	8008c54 <xTaskResumeAll+0x7c>
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c50:	4a2a      	ldr	r2, [pc, #168]	; (8008cfc <xTaskResumeAll+0x124>)
 8008c52:	6013      	str	r3, [r2, #0]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c58:	4613      	mov	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4413      	add	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4a27      	ldr	r2, [pc, #156]	; (8008d00 <xTaskResumeAll+0x128>)
 8008c62:	441a      	add	r2, r3
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3304      	adds	r3, #4
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	f7fe fde3 	bl	8007836 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c74:	4b23      	ldr	r3, [pc, #140]	; (8008d04 <xTaskResumeAll+0x12c>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d302      	bcc.n	8008c84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008c7e:	4b22      	ldr	r3, [pc, #136]	; (8008d08 <xTaskResumeAll+0x130>)
 8008c80:	2201      	movs	r2, #1
 8008c82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c84:	4b1c      	ldr	r3, [pc, #112]	; (8008cf8 <xTaskResumeAll+0x120>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1cb      	bne.n	8008c24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d001      	beq.n	8008c96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008c92:	f000 fb67 	bl	8009364 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008c96:	4b1d      	ldr	r3, [pc, #116]	; (8008d0c <xTaskResumeAll+0x134>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d010      	beq.n	8008cc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ca2:	f000 f859 	bl	8008d58 <xTaskIncrementTick>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d002      	beq.n	8008cb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008cac:	4b16      	ldr	r3, [pc, #88]	; (8008d08 <xTaskResumeAll+0x130>)
 8008cae:	2201      	movs	r2, #1
 8008cb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	3b01      	subs	r3, #1
 8008cb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d1f1      	bne.n	8008ca2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008cbe:	4b13      	ldr	r3, [pc, #76]	; (8008d0c <xTaskResumeAll+0x134>)
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008cc4:	4b10      	ldr	r3, [pc, #64]	; (8008d08 <xTaskResumeAll+0x130>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d009      	beq.n	8008ce0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008cd0:	4b0f      	ldr	r3, [pc, #60]	; (8008d10 <xTaskResumeAll+0x138>)
 8008cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ce0:	f001 f9f8 	bl	800a0d4 <vPortExitCritical>

	return xAlreadyYielded;
 8008ce4:	68bb      	ldr	r3, [r7, #8]
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	20000e28 	.word	0x20000e28
 8008cf4:	20000e00 	.word	0x20000e00
 8008cf8:	20000dc0 	.word	0x20000dc0
 8008cfc:	20000e08 	.word	0x20000e08
 8008d00:	20000930 	.word	0x20000930
 8008d04:	2000092c 	.word	0x2000092c
 8008d08:	20000e14 	.word	0x20000e14
 8008d0c:	20000e10 	.word	0x20000e10
 8008d10:	e000ed04 	.word	0xe000ed04

08008d14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008d1a:	4b05      	ldr	r3, [pc, #20]	; (8008d30 <xTaskGetTickCount+0x1c>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008d20:	687b      	ldr	r3, [r7, #4]
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	370c      	adds	r7, #12
 8008d26:	46bd      	mov	sp, r7
 8008d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2c:	4770      	bx	lr
 8008d2e:	bf00      	nop
 8008d30:	20000e04 	.word	0x20000e04

08008d34 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008d3a:	f001 fa7d 	bl	800a238 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008d3e:	2300      	movs	r3, #0
 8008d40:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008d42:	4b04      	ldr	r3, [pc, #16]	; (8008d54 <xTaskGetTickCountFromISR+0x20>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d48:	683b      	ldr	r3, [r7, #0]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3708      	adds	r7, #8
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20000e04 	.word	0x20000e04

08008d58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d62:	4b4f      	ldr	r3, [pc, #316]	; (8008ea0 <xTaskIncrementTick+0x148>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f040 808f 	bne.w	8008e8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d6c:	4b4d      	ldr	r3, [pc, #308]	; (8008ea4 <xTaskIncrementTick+0x14c>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	3301      	adds	r3, #1
 8008d72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d74:	4a4b      	ldr	r2, [pc, #300]	; (8008ea4 <xTaskIncrementTick+0x14c>)
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d120      	bne.n	8008dc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d80:	4b49      	ldr	r3, [pc, #292]	; (8008ea8 <xTaskIncrementTick+0x150>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00a      	beq.n	8008da0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d8e:	f383 8811 	msr	BASEPRI, r3
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	f3bf 8f4f 	dsb	sy
 8008d9a:	603b      	str	r3, [r7, #0]
}
 8008d9c:	bf00      	nop
 8008d9e:	e7fe      	b.n	8008d9e <xTaskIncrementTick+0x46>
 8008da0:	4b41      	ldr	r3, [pc, #260]	; (8008ea8 <xTaskIncrementTick+0x150>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	60fb      	str	r3, [r7, #12]
 8008da6:	4b41      	ldr	r3, [pc, #260]	; (8008eac <xTaskIncrementTick+0x154>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a3f      	ldr	r2, [pc, #252]	; (8008ea8 <xTaskIncrementTick+0x150>)
 8008dac:	6013      	str	r3, [r2, #0]
 8008dae:	4a3f      	ldr	r2, [pc, #252]	; (8008eac <xTaskIncrementTick+0x154>)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	6013      	str	r3, [r2, #0]
 8008db4:	4b3e      	ldr	r3, [pc, #248]	; (8008eb0 <xTaskIncrementTick+0x158>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	3301      	adds	r3, #1
 8008dba:	4a3d      	ldr	r2, [pc, #244]	; (8008eb0 <xTaskIncrementTick+0x158>)
 8008dbc:	6013      	str	r3, [r2, #0]
 8008dbe:	f000 fad1 	bl	8009364 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008dc2:	4b3c      	ldr	r3, [pc, #240]	; (8008eb4 <xTaskIncrementTick+0x15c>)
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	429a      	cmp	r2, r3
 8008dca:	d349      	bcc.n	8008e60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dcc:	4b36      	ldr	r3, [pc, #216]	; (8008ea8 <xTaskIncrementTick+0x150>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d104      	bne.n	8008de0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd6:	4b37      	ldr	r3, [pc, #220]	; (8008eb4 <xTaskIncrementTick+0x15c>)
 8008dd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ddc:	601a      	str	r2, [r3, #0]
					break;
 8008dde:	e03f      	b.n	8008e60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008de0:	4b31      	ldr	r3, [pc, #196]	; (8008ea8 <xTaskIncrementTick+0x150>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	685b      	ldr	r3, [r3, #4]
 8008dee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d203      	bcs.n	8008e00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008df8:	4a2e      	ldr	r2, [pc, #184]	; (8008eb4 <xTaskIncrementTick+0x15c>)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008dfe:	e02f      	b.n	8008e60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	3304      	adds	r3, #4
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fe fd73 	bl	80078f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d004      	beq.n	8008e1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	3318      	adds	r3, #24
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fe fd6a 	bl	80078f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e20:	4b25      	ldr	r3, [pc, #148]	; (8008eb8 <xTaskIncrementTick+0x160>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d903      	bls.n	8008e30 <xTaskIncrementTick+0xd8>
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	4a22      	ldr	r2, [pc, #136]	; (8008eb8 <xTaskIncrementTick+0x160>)
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e34:	4613      	mov	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4413      	add	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4a1f      	ldr	r2, [pc, #124]	; (8008ebc <xTaskIncrementTick+0x164>)
 8008e3e:	441a      	add	r2, r3
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	3304      	adds	r3, #4
 8008e44:	4619      	mov	r1, r3
 8008e46:	4610      	mov	r0, r2
 8008e48:	f7fe fcf5 	bl	8007836 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e50:	4b1b      	ldr	r3, [pc, #108]	; (8008ec0 <xTaskIncrementTick+0x168>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d3b8      	bcc.n	8008dcc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e5e:	e7b5      	b.n	8008dcc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e60:	4b17      	ldr	r3, [pc, #92]	; (8008ec0 <xTaskIncrementTick+0x168>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e66:	4915      	ldr	r1, [pc, #84]	; (8008ebc <xTaskIncrementTick+0x164>)
 8008e68:	4613      	mov	r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	4413      	add	r3, r2
 8008e6e:	009b      	lsls	r3, r3, #2
 8008e70:	440b      	add	r3, r1
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	2b01      	cmp	r3, #1
 8008e76:	d901      	bls.n	8008e7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008e7c:	4b11      	ldr	r3, [pc, #68]	; (8008ec4 <xTaskIncrementTick+0x16c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d007      	beq.n	8008e94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008e84:	2301      	movs	r3, #1
 8008e86:	617b      	str	r3, [r7, #20]
 8008e88:	e004      	b.n	8008e94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008e8a:	4b0f      	ldr	r3, [pc, #60]	; (8008ec8 <xTaskIncrementTick+0x170>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	4a0d      	ldr	r2, [pc, #52]	; (8008ec8 <xTaskIncrementTick+0x170>)
 8008e92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008e94:	697b      	ldr	r3, [r7, #20]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	20000e28 	.word	0x20000e28
 8008ea4:	20000e04 	.word	0x20000e04
 8008ea8:	20000db8 	.word	0x20000db8
 8008eac:	20000dbc 	.word	0x20000dbc
 8008eb0:	20000e18 	.word	0x20000e18
 8008eb4:	20000e20 	.word	0x20000e20
 8008eb8:	20000e08 	.word	0x20000e08
 8008ebc:	20000930 	.word	0x20000930
 8008ec0:	2000092c 	.word	0x2000092c
 8008ec4:	20000e14 	.word	0x20000e14
 8008ec8:	20000e10 	.word	0x20000e10

08008ecc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b085      	sub	sp, #20
 8008ed0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ed2:	4b28      	ldr	r3, [pc, #160]	; (8008f74 <vTaskSwitchContext+0xa8>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d003      	beq.n	8008ee2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008eda:	4b27      	ldr	r3, [pc, #156]	; (8008f78 <vTaskSwitchContext+0xac>)
 8008edc:	2201      	movs	r2, #1
 8008ede:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ee0:	e041      	b.n	8008f66 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008ee2:	4b25      	ldr	r3, [pc, #148]	; (8008f78 <vTaskSwitchContext+0xac>)
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ee8:	4b24      	ldr	r3, [pc, #144]	; (8008f7c <vTaskSwitchContext+0xb0>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	60fb      	str	r3, [r7, #12]
 8008eee:	e010      	b.n	8008f12 <vTaskSwitchContext+0x46>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d10a      	bne.n	8008f0c <vTaskSwitchContext+0x40>
	__asm volatile
 8008ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	607b      	str	r3, [r7, #4]
}
 8008f08:	bf00      	nop
 8008f0a:	e7fe      	b.n	8008f0a <vTaskSwitchContext+0x3e>
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]
 8008f12:	491b      	ldr	r1, [pc, #108]	; (8008f80 <vTaskSwitchContext+0xb4>)
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	4613      	mov	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	440b      	add	r3, r1
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d0e4      	beq.n	8008ef0 <vTaskSwitchContext+0x24>
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	4413      	add	r3, r2
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4a13      	ldr	r2, [pc, #76]	; (8008f80 <vTaskSwitchContext+0xb4>)
 8008f32:	4413      	add	r3, r2
 8008f34:	60bb      	str	r3, [r7, #8]
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	685a      	ldr	r2, [r3, #4]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	605a      	str	r2, [r3, #4]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	685a      	ldr	r2, [r3, #4]
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	3308      	adds	r3, #8
 8008f48:	429a      	cmp	r2, r3
 8008f4a:	d104      	bne.n	8008f56 <vTaskSwitchContext+0x8a>
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	685a      	ldr	r2, [r3, #4]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	605a      	str	r2, [r3, #4]
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	4a09      	ldr	r2, [pc, #36]	; (8008f84 <vTaskSwitchContext+0xb8>)
 8008f5e:	6013      	str	r3, [r2, #0]
 8008f60:	4a06      	ldr	r2, [pc, #24]	; (8008f7c <vTaskSwitchContext+0xb0>)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6013      	str	r3, [r2, #0]
}
 8008f66:	bf00      	nop
 8008f68:	3714      	adds	r7, #20
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr
 8008f72:	bf00      	nop
 8008f74:	20000e28 	.word	0x20000e28
 8008f78:	20000e14 	.word	0x20000e14
 8008f7c:	20000e08 	.word	0x20000e08
 8008f80:	20000930 	.word	0x20000930
 8008f84:	2000092c 	.word	0x2000092c

08008f88 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10a      	bne.n	8008fae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f9c:	f383 8811 	msr	BASEPRI, r3
 8008fa0:	f3bf 8f6f 	isb	sy
 8008fa4:	f3bf 8f4f 	dsb	sy
 8008fa8:	60fb      	str	r3, [r7, #12]
}
 8008faa:	bf00      	nop
 8008fac:	e7fe      	b.n	8008fac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fae:	4b07      	ldr	r3, [pc, #28]	; (8008fcc <vTaskPlaceOnEventList+0x44>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3318      	adds	r3, #24
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7fe fc61 	bl	800787e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	6838      	ldr	r0, [r7, #0]
 8008fc0:	f000 fb8a 	bl	80096d8 <prvAddCurrentTaskToDelayedList>
}
 8008fc4:	bf00      	nop
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	2000092c 	.word	0x2000092c

08008fd0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10a      	bne.n	8008ff8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe6:	f383 8811 	msr	BASEPRI, r3
 8008fea:	f3bf 8f6f 	isb	sy
 8008fee:	f3bf 8f4f 	dsb	sy
 8008ff2:	617b      	str	r3, [r7, #20]
}
 8008ff4:	bf00      	nop
 8008ff6:	e7fe      	b.n	8008ff6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008ff8:	4b0a      	ldr	r3, [pc, #40]	; (8009024 <vTaskPlaceOnEventListRestricted+0x54>)
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	3318      	adds	r3, #24
 8008ffe:	4619      	mov	r1, r3
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	f7fe fc18 	bl	8007836 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d002      	beq.n	8009012 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800900c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009010:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009012:	6879      	ldr	r1, [r7, #4]
 8009014:	68b8      	ldr	r0, [r7, #8]
 8009016:	f000 fb5f 	bl	80096d8 <prvAddCurrentTaskToDelayedList>
	}
 800901a:	bf00      	nop
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	2000092c 	.word	0x2000092c

08009028 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d10a      	bne.n	8009054 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800903e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009042:	f383 8811 	msr	BASEPRI, r3
 8009046:	f3bf 8f6f 	isb	sy
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	60fb      	str	r3, [r7, #12]
}
 8009050:	bf00      	nop
 8009052:	e7fe      	b.n	8009052 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	3318      	adds	r3, #24
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe fc49 	bl	80078f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800905e:	4b1e      	ldr	r3, [pc, #120]	; (80090d8 <xTaskRemoveFromEventList+0xb0>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d11d      	bne.n	80090a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	3304      	adds	r3, #4
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe fc40 	bl	80078f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009074:	4b19      	ldr	r3, [pc, #100]	; (80090dc <xTaskRemoveFromEventList+0xb4>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	429a      	cmp	r2, r3
 800907a:	d903      	bls.n	8009084 <xTaskRemoveFromEventList+0x5c>
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009080:	4a16      	ldr	r2, [pc, #88]	; (80090dc <xTaskRemoveFromEventList+0xb4>)
 8009082:	6013      	str	r3, [r2, #0]
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009088:	4613      	mov	r3, r2
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	4413      	add	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	4a13      	ldr	r2, [pc, #76]	; (80090e0 <xTaskRemoveFromEventList+0xb8>)
 8009092:	441a      	add	r2, r3
 8009094:	693b      	ldr	r3, [r7, #16]
 8009096:	3304      	adds	r3, #4
 8009098:	4619      	mov	r1, r3
 800909a:	4610      	mov	r0, r2
 800909c:	f7fe fbcb 	bl	8007836 <vListInsertEnd>
 80090a0:	e005      	b.n	80090ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	3318      	adds	r3, #24
 80090a6:	4619      	mov	r1, r3
 80090a8:	480e      	ldr	r0, [pc, #56]	; (80090e4 <xTaskRemoveFromEventList+0xbc>)
 80090aa:	f7fe fbc4 	bl	8007836 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b2:	4b0d      	ldr	r3, [pc, #52]	; (80090e8 <xTaskRemoveFromEventList+0xc0>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d905      	bls.n	80090c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80090bc:	2301      	movs	r3, #1
 80090be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80090c0:	4b0a      	ldr	r3, [pc, #40]	; (80090ec <xTaskRemoveFromEventList+0xc4>)
 80090c2:	2201      	movs	r2, #1
 80090c4:	601a      	str	r2, [r3, #0]
 80090c6:	e001      	b.n	80090cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80090c8:	2300      	movs	r3, #0
 80090ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80090cc:	697b      	ldr	r3, [r7, #20]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3718      	adds	r7, #24
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}
 80090d6:	bf00      	nop
 80090d8:	20000e28 	.word	0x20000e28
 80090dc:	20000e08 	.word	0x20000e08
 80090e0:	20000930 	.word	0x20000930
 80090e4:	20000dc0 	.word	0x20000dc0
 80090e8:	2000092c 	.word	0x2000092c
 80090ec:	20000e14 	.word	0x20000e14

080090f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090f0:	b480      	push	{r7}
 80090f2:	b083      	sub	sp, #12
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80090f8:	4b06      	ldr	r3, [pc, #24]	; (8009114 <vTaskInternalSetTimeOutState+0x24>)
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009100:	4b05      	ldr	r3, [pc, #20]	; (8009118 <vTaskInternalSetTimeOutState+0x28>)
 8009102:	681a      	ldr	r2, [r3, #0]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	605a      	str	r2, [r3, #4]
}
 8009108:	bf00      	nop
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr
 8009114:	20000e18 	.word	0x20000e18
 8009118:	20000e04 	.word	0x20000e04

0800911c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b088      	sub	sp, #32
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d10a      	bne.n	8009142 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800912c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009130:	f383 8811 	msr	BASEPRI, r3
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	f3bf 8f4f 	dsb	sy
 800913c:	613b      	str	r3, [r7, #16]
}
 800913e:	bf00      	nop
 8009140:	e7fe      	b.n	8009140 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d10a      	bne.n	800915e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800914c:	f383 8811 	msr	BASEPRI, r3
 8009150:	f3bf 8f6f 	isb	sy
 8009154:	f3bf 8f4f 	dsb	sy
 8009158:	60fb      	str	r3, [r7, #12]
}
 800915a:	bf00      	nop
 800915c:	e7fe      	b.n	800915c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800915e:	f000 ff89 	bl	800a074 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009162:	4b1d      	ldr	r3, [pc, #116]	; (80091d8 <xTaskCheckForTimeOut+0xbc>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	69ba      	ldr	r2, [r7, #24]
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800917a:	d102      	bne.n	8009182 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800917c:	2300      	movs	r3, #0
 800917e:	61fb      	str	r3, [r7, #28]
 8009180:	e023      	b.n	80091ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	4b15      	ldr	r3, [pc, #84]	; (80091dc <xTaskCheckForTimeOut+0xc0>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	429a      	cmp	r2, r3
 800918c:	d007      	beq.n	800919e <xTaskCheckForTimeOut+0x82>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	69ba      	ldr	r2, [r7, #24]
 8009194:	429a      	cmp	r2, r3
 8009196:	d302      	bcc.n	800919e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009198:	2301      	movs	r3, #1
 800919a:	61fb      	str	r3, [r7, #28]
 800919c:	e015      	b.n	80091ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	697a      	ldr	r2, [r7, #20]
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d20b      	bcs.n	80091c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	1ad2      	subs	r2, r2, r3
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f7ff ff9b 	bl	80090f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80091ba:	2300      	movs	r3, #0
 80091bc:	61fb      	str	r3, [r7, #28]
 80091be:	e004      	b.n	80091ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	2200      	movs	r2, #0
 80091c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80091c6:	2301      	movs	r3, #1
 80091c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80091ca:	f000 ff83 	bl	800a0d4 <vPortExitCritical>

	return xReturn;
 80091ce:	69fb      	ldr	r3, [r7, #28]
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3720      	adds	r7, #32
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	20000e04 	.word	0x20000e04
 80091dc:	20000e18 	.word	0x20000e18

080091e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80091e0:	b480      	push	{r7}
 80091e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80091e4:	4b03      	ldr	r3, [pc, #12]	; (80091f4 <vTaskMissedYield+0x14>)
 80091e6:	2201      	movs	r2, #1
 80091e8:	601a      	str	r2, [r3, #0]
}
 80091ea:	bf00      	nop
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr
 80091f4:	20000e14 	.word	0x20000e14

080091f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009200:	f000 f852 	bl	80092a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009204:	4b06      	ldr	r3, [pc, #24]	; (8009220 <prvIdleTask+0x28>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d9f9      	bls.n	8009200 <prvIdleTask+0x8>
			{
				taskYIELD();
 800920c:	4b05      	ldr	r3, [pc, #20]	; (8009224 <prvIdleTask+0x2c>)
 800920e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009212:	601a      	str	r2, [r3, #0]
 8009214:	f3bf 8f4f 	dsb	sy
 8009218:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800921c:	e7f0      	b.n	8009200 <prvIdleTask+0x8>
 800921e:	bf00      	nop
 8009220:	20000930 	.word	0x20000930
 8009224:	e000ed04 	.word	0xe000ed04

08009228 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800922e:	2300      	movs	r3, #0
 8009230:	607b      	str	r3, [r7, #4]
 8009232:	e00c      	b.n	800924e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	4613      	mov	r3, r2
 8009238:	009b      	lsls	r3, r3, #2
 800923a:	4413      	add	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4a12      	ldr	r2, [pc, #72]	; (8009288 <prvInitialiseTaskLists+0x60>)
 8009240:	4413      	add	r3, r2
 8009242:	4618      	mov	r0, r3
 8009244:	f7fe faca 	bl	80077dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	3301      	adds	r3, #1
 800924c:	607b      	str	r3, [r7, #4]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2b37      	cmp	r3, #55	; 0x37
 8009252:	d9ef      	bls.n	8009234 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009254:	480d      	ldr	r0, [pc, #52]	; (800928c <prvInitialiseTaskLists+0x64>)
 8009256:	f7fe fac1 	bl	80077dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800925a:	480d      	ldr	r0, [pc, #52]	; (8009290 <prvInitialiseTaskLists+0x68>)
 800925c:	f7fe fabe 	bl	80077dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009260:	480c      	ldr	r0, [pc, #48]	; (8009294 <prvInitialiseTaskLists+0x6c>)
 8009262:	f7fe fabb 	bl	80077dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009266:	480c      	ldr	r0, [pc, #48]	; (8009298 <prvInitialiseTaskLists+0x70>)
 8009268:	f7fe fab8 	bl	80077dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800926c:	480b      	ldr	r0, [pc, #44]	; (800929c <prvInitialiseTaskLists+0x74>)
 800926e:	f7fe fab5 	bl	80077dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009272:	4b0b      	ldr	r3, [pc, #44]	; (80092a0 <prvInitialiseTaskLists+0x78>)
 8009274:	4a05      	ldr	r2, [pc, #20]	; (800928c <prvInitialiseTaskLists+0x64>)
 8009276:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009278:	4b0a      	ldr	r3, [pc, #40]	; (80092a4 <prvInitialiseTaskLists+0x7c>)
 800927a:	4a05      	ldr	r2, [pc, #20]	; (8009290 <prvInitialiseTaskLists+0x68>)
 800927c:	601a      	str	r2, [r3, #0]
}
 800927e:	bf00      	nop
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}
 8009286:	bf00      	nop
 8009288:	20000930 	.word	0x20000930
 800928c:	20000d90 	.word	0x20000d90
 8009290:	20000da4 	.word	0x20000da4
 8009294:	20000dc0 	.word	0x20000dc0
 8009298:	20000dd4 	.word	0x20000dd4
 800929c:	20000dec 	.word	0x20000dec
 80092a0:	20000db8 	.word	0x20000db8
 80092a4:	20000dbc 	.word	0x20000dbc

080092a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092ae:	e019      	b.n	80092e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80092b0:	f000 fee0 	bl	800a074 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092b4:	4b10      	ldr	r3, [pc, #64]	; (80092f8 <prvCheckTasksWaitingTermination+0x50>)
 80092b6:	68db      	ldr	r3, [r3, #12]
 80092b8:	68db      	ldr	r3, [r3, #12]
 80092ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	3304      	adds	r3, #4
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7fe fb15 	bl	80078f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80092c6:	4b0d      	ldr	r3, [pc, #52]	; (80092fc <prvCheckTasksWaitingTermination+0x54>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	3b01      	subs	r3, #1
 80092cc:	4a0b      	ldr	r2, [pc, #44]	; (80092fc <prvCheckTasksWaitingTermination+0x54>)
 80092ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80092d0:	4b0b      	ldr	r3, [pc, #44]	; (8009300 <prvCheckTasksWaitingTermination+0x58>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	3b01      	subs	r3, #1
 80092d6:	4a0a      	ldr	r2, [pc, #40]	; (8009300 <prvCheckTasksWaitingTermination+0x58>)
 80092d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80092da:	f000 fefb 	bl	800a0d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f810 	bl	8009304 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092e4:	4b06      	ldr	r3, [pc, #24]	; (8009300 <prvCheckTasksWaitingTermination+0x58>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d1e1      	bne.n	80092b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80092ec:	bf00      	nop
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}
 80092f6:	bf00      	nop
 80092f8:	20000dd4 	.word	0x20000dd4
 80092fc:	20000e00 	.word	0x20000e00
 8009300:	20000de8 	.word	0x20000de8

08009304 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009312:	2b00      	cmp	r3, #0
 8009314:	d108      	bne.n	8009328 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931a:	4618      	mov	r0, r3
 800931c:	f001 f898 	bl	800a450 <vPortFree>
				vPortFree( pxTCB );
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f001 f895 	bl	800a450 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009326:	e018      	b.n	800935a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800932e:	2b01      	cmp	r3, #1
 8009330:	d103      	bne.n	800933a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f001 f88c 	bl	800a450 <vPortFree>
	}
 8009338:	e00f      	b.n	800935a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009340:	2b02      	cmp	r3, #2
 8009342:	d00a      	beq.n	800935a <prvDeleteTCB+0x56>
	__asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	60fb      	str	r3, [r7, #12]
}
 8009356:	bf00      	nop
 8009358:	e7fe      	b.n	8009358 <prvDeleteTCB+0x54>
	}
 800935a:	bf00      	nop
 800935c:	3710      	adds	r7, #16
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800936a:	4b0c      	ldr	r3, [pc, #48]	; (800939c <prvResetNextTaskUnblockTime+0x38>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d104      	bne.n	800937e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009374:	4b0a      	ldr	r3, [pc, #40]	; (80093a0 <prvResetNextTaskUnblockTime+0x3c>)
 8009376:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800937a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800937c:	e008      	b.n	8009390 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800937e:	4b07      	ldr	r3, [pc, #28]	; (800939c <prvResetNextTaskUnblockTime+0x38>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	4a04      	ldr	r2, [pc, #16]	; (80093a0 <prvResetNextTaskUnblockTime+0x3c>)
 800938e:	6013      	str	r3, [r2, #0]
}
 8009390:	bf00      	nop
 8009392:	370c      	adds	r7, #12
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	20000db8 	.word	0x20000db8
 80093a0:	20000e20 	.word	0x20000e20

080093a4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80093aa:	4b05      	ldr	r3, [pc, #20]	; (80093c0 <xTaskGetCurrentTaskHandle+0x1c>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	607b      	str	r3, [r7, #4]

		return xReturn;
 80093b0:	687b      	ldr	r3, [r7, #4]
	}
 80093b2:	4618      	mov	r0, r3
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	2000092c 	.word	0x2000092c

080093c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80093c4:	b480      	push	{r7}
 80093c6:	b083      	sub	sp, #12
 80093c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80093ca:	4b0b      	ldr	r3, [pc, #44]	; (80093f8 <xTaskGetSchedulerState+0x34>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d102      	bne.n	80093d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80093d2:	2301      	movs	r3, #1
 80093d4:	607b      	str	r3, [r7, #4]
 80093d6:	e008      	b.n	80093ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093d8:	4b08      	ldr	r3, [pc, #32]	; (80093fc <xTaskGetSchedulerState+0x38>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d102      	bne.n	80093e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80093e0:	2302      	movs	r3, #2
 80093e2:	607b      	str	r3, [r7, #4]
 80093e4:	e001      	b.n	80093ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80093e6:	2300      	movs	r3, #0
 80093e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80093ea:	687b      	ldr	r3, [r7, #4]
	}
 80093ec:	4618      	mov	r0, r3
 80093ee:	370c      	adds	r7, #12
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	20000e0c 	.word	0x20000e0c
 80093fc:	20000e28 	.word	0x20000e28

08009400 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800940c:	2300      	movs	r3, #0
 800940e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d051      	beq.n	80094ba <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800941a:	4b2a      	ldr	r3, [pc, #168]	; (80094c4 <xTaskPriorityInherit+0xc4>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009420:	429a      	cmp	r2, r3
 8009422:	d241      	bcs.n	80094a8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	699b      	ldr	r3, [r3, #24]
 8009428:	2b00      	cmp	r3, #0
 800942a:	db06      	blt.n	800943a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800942c:	4b25      	ldr	r3, [pc, #148]	; (80094c4 <xTaskPriorityInherit+0xc4>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009432:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	6959      	ldr	r1, [r3, #20]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009442:	4613      	mov	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	009b      	lsls	r3, r3, #2
 800944a:	4a1f      	ldr	r2, [pc, #124]	; (80094c8 <xTaskPriorityInherit+0xc8>)
 800944c:	4413      	add	r3, r2
 800944e:	4299      	cmp	r1, r3
 8009450:	d122      	bne.n	8009498 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	3304      	adds	r3, #4
 8009456:	4618      	mov	r0, r3
 8009458:	f7fe fa4a 	bl	80078f0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800945c:	4b19      	ldr	r3, [pc, #100]	; (80094c4 <xTaskPriorityInherit+0xc4>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800946a:	4b18      	ldr	r3, [pc, #96]	; (80094cc <xTaskPriorityInherit+0xcc>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	429a      	cmp	r2, r3
 8009470:	d903      	bls.n	800947a <xTaskPriorityInherit+0x7a>
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009476:	4a15      	ldr	r2, [pc, #84]	; (80094cc <xTaskPriorityInherit+0xcc>)
 8009478:	6013      	str	r3, [r2, #0]
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800947e:	4613      	mov	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4a10      	ldr	r2, [pc, #64]	; (80094c8 <xTaskPriorityInherit+0xc8>)
 8009488:	441a      	add	r2, r3
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	3304      	adds	r3, #4
 800948e:	4619      	mov	r1, r3
 8009490:	4610      	mov	r0, r2
 8009492:	f7fe f9d0 	bl	8007836 <vListInsertEnd>
 8009496:	e004      	b.n	80094a2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009498:	4b0a      	ldr	r3, [pc, #40]	; (80094c4 <xTaskPriorityInherit+0xc4>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80094a2:	2301      	movs	r3, #1
 80094a4:	60fb      	str	r3, [r7, #12]
 80094a6:	e008      	b.n	80094ba <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094ac:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <xTaskPriorityInherit+0xc4>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d201      	bcs.n	80094ba <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80094b6:	2301      	movs	r3, #1
 80094b8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094ba:	68fb      	ldr	r3, [r7, #12]
	}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	2000092c 	.word	0x2000092c
 80094c8:	20000930 	.word	0x20000930
 80094cc:	20000e08 	.word	0x20000e08

080094d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80094dc:	2300      	movs	r3, #0
 80094de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d056      	beq.n	8009594 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80094e6:	4b2e      	ldr	r3, [pc, #184]	; (80095a0 <xTaskPriorityDisinherit+0xd0>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d00a      	beq.n	8009506 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80094f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f4:	f383 8811 	msr	BASEPRI, r3
 80094f8:	f3bf 8f6f 	isb	sy
 80094fc:	f3bf 8f4f 	dsb	sy
 8009500:	60fb      	str	r3, [r7, #12]
}
 8009502:	bf00      	nop
 8009504:	e7fe      	b.n	8009504 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10a      	bne.n	8009524 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	60bb      	str	r3, [r7, #8]
}
 8009520:	bf00      	nop
 8009522:	e7fe      	b.n	8009522 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009528:	1e5a      	subs	r2, r3, #1
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009536:	429a      	cmp	r2, r3
 8009538:	d02c      	beq.n	8009594 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800953e:	2b00      	cmp	r3, #0
 8009540:	d128      	bne.n	8009594 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	3304      	adds	r3, #4
 8009546:	4618      	mov	r0, r3
 8009548:	f7fe f9d2 	bl	80078f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009550:	693b      	ldr	r3, [r7, #16]
 8009552:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009554:	693b      	ldr	r3, [r7, #16]
 8009556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009558:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800955c:	693b      	ldr	r3, [r7, #16]
 800955e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009564:	4b0f      	ldr	r3, [pc, #60]	; (80095a4 <xTaskPriorityDisinherit+0xd4>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	429a      	cmp	r2, r3
 800956a:	d903      	bls.n	8009574 <xTaskPriorityDisinherit+0xa4>
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009570:	4a0c      	ldr	r2, [pc, #48]	; (80095a4 <xTaskPriorityDisinherit+0xd4>)
 8009572:	6013      	str	r3, [r2, #0]
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009578:	4613      	mov	r3, r2
 800957a:	009b      	lsls	r3, r3, #2
 800957c:	4413      	add	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4a09      	ldr	r2, [pc, #36]	; (80095a8 <xTaskPriorityDisinherit+0xd8>)
 8009582:	441a      	add	r2, r3
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	3304      	adds	r3, #4
 8009588:	4619      	mov	r1, r3
 800958a:	4610      	mov	r0, r2
 800958c:	f7fe f953 	bl	8007836 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009590:	2301      	movs	r3, #1
 8009592:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009594:	697b      	ldr	r3, [r7, #20]
	}
 8009596:	4618      	mov	r0, r3
 8009598:	3718      	adds	r7, #24
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	2000092c 	.word	0x2000092c
 80095a4:	20000e08 	.word	0x20000e08
 80095a8:	20000930 	.word	0x20000930

080095ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b088      	sub	sp, #32
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80095ba:	2301      	movs	r3, #1
 80095bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d06a      	beq.n	800969a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10a      	bne.n	80095e2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80095cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d0:	f383 8811 	msr	BASEPRI, r3
 80095d4:	f3bf 8f6f 	isb	sy
 80095d8:	f3bf 8f4f 	dsb	sy
 80095dc:	60fb      	str	r3, [r7, #12]
}
 80095de:	bf00      	nop
 80095e0:	e7fe      	b.n	80095e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095e6:	683a      	ldr	r2, [r7, #0]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d902      	bls.n	80095f2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	61fb      	str	r3, [r7, #28]
 80095f0:	e002      	b.n	80095f8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80095f2:	69bb      	ldr	r3, [r7, #24]
 80095f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095f6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fc:	69fa      	ldr	r2, [r7, #28]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d04b      	beq.n	800969a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009606:	697a      	ldr	r2, [r7, #20]
 8009608:	429a      	cmp	r2, r3
 800960a:	d146      	bne.n	800969a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800960c:	4b25      	ldr	r3, [pc, #148]	; (80096a4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	69ba      	ldr	r2, [r7, #24]
 8009612:	429a      	cmp	r2, r3
 8009614:	d10a      	bne.n	800962c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961a:	f383 8811 	msr	BASEPRI, r3
 800961e:	f3bf 8f6f 	isb	sy
 8009622:	f3bf 8f4f 	dsb	sy
 8009626:	60bb      	str	r3, [r7, #8]
}
 8009628:	bf00      	nop
 800962a:	e7fe      	b.n	800962a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009630:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	69fa      	ldr	r2, [r7, #28]
 8009636:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	2b00      	cmp	r3, #0
 800963e:	db04      	blt.n	800964a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	6959      	ldr	r1, [r3, #20]
 800964e:	693a      	ldr	r2, [r7, #16]
 8009650:	4613      	mov	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4a13      	ldr	r2, [pc, #76]	; (80096a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800965a:	4413      	add	r3, r2
 800965c:	4299      	cmp	r1, r3
 800965e:	d11c      	bne.n	800969a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009660:	69bb      	ldr	r3, [r7, #24]
 8009662:	3304      	adds	r3, #4
 8009664:	4618      	mov	r0, r3
 8009666:	f7fe f943 	bl	80078f0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800966e:	4b0f      	ldr	r3, [pc, #60]	; (80096ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d903      	bls.n	800967e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967a:	4a0c      	ldr	r2, [pc, #48]	; (80096ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800967c:	6013      	str	r3, [r2, #0]
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009682:	4613      	mov	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4a07      	ldr	r2, [pc, #28]	; (80096a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800968c:	441a      	add	r2, r3
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	3304      	adds	r3, #4
 8009692:	4619      	mov	r1, r3
 8009694:	4610      	mov	r0, r2
 8009696:	f7fe f8ce 	bl	8007836 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800969a:	bf00      	nop
 800969c:	3720      	adds	r7, #32
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}
 80096a2:	bf00      	nop
 80096a4:	2000092c 	.word	0x2000092c
 80096a8:	20000930 	.word	0x20000930
 80096ac:	20000e08 	.word	0x20000e08

080096b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80096b0:	b480      	push	{r7}
 80096b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80096b4:	4b07      	ldr	r3, [pc, #28]	; (80096d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d004      	beq.n	80096c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80096bc:	4b05      	ldr	r3, [pc, #20]	; (80096d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096c2:	3201      	adds	r2, #1
 80096c4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80096c6:	4b03      	ldr	r3, [pc, #12]	; (80096d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80096c8:	681b      	ldr	r3, [r3, #0]
	}
 80096ca:	4618      	mov	r0, r3
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr
 80096d4:	2000092c 	.word	0x2000092c

080096d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
 80096e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096e2:	4b21      	ldr	r3, [pc, #132]	; (8009768 <prvAddCurrentTaskToDelayedList+0x90>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096e8:	4b20      	ldr	r3, [pc, #128]	; (800976c <prvAddCurrentTaskToDelayedList+0x94>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3304      	adds	r3, #4
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe f8fe 	bl	80078f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096fa:	d10a      	bne.n	8009712 <prvAddCurrentTaskToDelayedList+0x3a>
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d007      	beq.n	8009712 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009702:	4b1a      	ldr	r3, [pc, #104]	; (800976c <prvAddCurrentTaskToDelayedList+0x94>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3304      	adds	r3, #4
 8009708:	4619      	mov	r1, r3
 800970a:	4819      	ldr	r0, [pc, #100]	; (8009770 <prvAddCurrentTaskToDelayedList+0x98>)
 800970c:	f7fe f893 	bl	8007836 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009710:	e026      	b.n	8009760 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4413      	add	r3, r2
 8009718:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800971a:	4b14      	ldr	r3, [pc, #80]	; (800976c <prvAddCurrentTaskToDelayedList+0x94>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009722:	68ba      	ldr	r2, [r7, #8]
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	429a      	cmp	r2, r3
 8009728:	d209      	bcs.n	800973e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800972a:	4b12      	ldr	r3, [pc, #72]	; (8009774 <prvAddCurrentTaskToDelayedList+0x9c>)
 800972c:	681a      	ldr	r2, [r3, #0]
 800972e:	4b0f      	ldr	r3, [pc, #60]	; (800976c <prvAddCurrentTaskToDelayedList+0x94>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	3304      	adds	r3, #4
 8009734:	4619      	mov	r1, r3
 8009736:	4610      	mov	r0, r2
 8009738:	f7fe f8a1 	bl	800787e <vListInsert>
}
 800973c:	e010      	b.n	8009760 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800973e:	4b0e      	ldr	r3, [pc, #56]	; (8009778 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	4b0a      	ldr	r3, [pc, #40]	; (800976c <prvAddCurrentTaskToDelayedList+0x94>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3304      	adds	r3, #4
 8009748:	4619      	mov	r1, r3
 800974a:	4610      	mov	r0, r2
 800974c:	f7fe f897 	bl	800787e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009750:	4b0a      	ldr	r3, [pc, #40]	; (800977c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	429a      	cmp	r2, r3
 8009758:	d202      	bcs.n	8009760 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800975a:	4a08      	ldr	r2, [pc, #32]	; (800977c <prvAddCurrentTaskToDelayedList+0xa4>)
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	6013      	str	r3, [r2, #0]
}
 8009760:	bf00      	nop
 8009762:	3710      	adds	r7, #16
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	20000e04 	.word	0x20000e04
 800976c:	2000092c 	.word	0x2000092c
 8009770:	20000dec 	.word	0x20000dec
 8009774:	20000dbc 	.word	0x20000dbc
 8009778:	20000db8 	.word	0x20000db8
 800977c:	20000e20 	.word	0x20000e20

08009780 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b08a      	sub	sp, #40	; 0x28
 8009784:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009786:	2300      	movs	r3, #0
 8009788:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800978a:	f000 fb07 	bl	8009d9c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800978e:	4b1c      	ldr	r3, [pc, #112]	; (8009800 <xTimerCreateTimerTask+0x80>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d021      	beq.n	80097da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009796:	2300      	movs	r3, #0
 8009798:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800979a:	2300      	movs	r3, #0
 800979c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800979e:	1d3a      	adds	r2, r7, #4
 80097a0:	f107 0108 	add.w	r1, r7, #8
 80097a4:	f107 030c 	add.w	r3, r7, #12
 80097a8:	4618      	mov	r0, r3
 80097aa:	f7fd fffd 	bl	80077a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80097ae:	6879      	ldr	r1, [r7, #4]
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	9202      	str	r2, [sp, #8]
 80097b6:	9301      	str	r3, [sp, #4]
 80097b8:	2302      	movs	r3, #2
 80097ba:	9300      	str	r3, [sp, #0]
 80097bc:	2300      	movs	r3, #0
 80097be:	460a      	mov	r2, r1
 80097c0:	4910      	ldr	r1, [pc, #64]	; (8009804 <xTimerCreateTimerTask+0x84>)
 80097c2:	4811      	ldr	r0, [pc, #68]	; (8009808 <xTimerCreateTimerTask+0x88>)
 80097c4:	f7fe ffbe 	bl	8008744 <xTaskCreateStatic>
 80097c8:	4603      	mov	r3, r0
 80097ca:	4a10      	ldr	r2, [pc, #64]	; (800980c <xTimerCreateTimerTask+0x8c>)
 80097cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80097ce:	4b0f      	ldr	r3, [pc, #60]	; (800980c <xTimerCreateTimerTask+0x8c>)
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d001      	beq.n	80097da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80097d6:	2301      	movs	r3, #1
 80097d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d10a      	bne.n	80097f6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80097e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e4:	f383 8811 	msr	BASEPRI, r3
 80097e8:	f3bf 8f6f 	isb	sy
 80097ec:	f3bf 8f4f 	dsb	sy
 80097f0:	613b      	str	r3, [r7, #16]
}
 80097f2:	bf00      	nop
 80097f4:	e7fe      	b.n	80097f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80097f6:	697b      	ldr	r3, [r7, #20]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3718      	adds	r7, #24
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	20000e5c 	.word	0x20000e5c
 8009804:	0800bc04 	.word	0x0800bc04
 8009808:	08009945 	.word	0x08009945
 800980c:	20000e60 	.word	0x20000e60

08009810 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b08a      	sub	sp, #40	; 0x28
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
 800981c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800981e:	2300      	movs	r3, #0
 8009820:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10a      	bne.n	800983e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	623b      	str	r3, [r7, #32]
}
 800983a:	bf00      	nop
 800983c:	e7fe      	b.n	800983c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800983e:	4b1a      	ldr	r3, [pc, #104]	; (80098a8 <xTimerGenericCommand+0x98>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d02a      	beq.n	800989c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	2b05      	cmp	r3, #5
 8009856:	dc18      	bgt.n	800988a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009858:	f7ff fdb4 	bl	80093c4 <xTaskGetSchedulerState>
 800985c:	4603      	mov	r3, r0
 800985e:	2b02      	cmp	r3, #2
 8009860:	d109      	bne.n	8009876 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009862:	4b11      	ldr	r3, [pc, #68]	; (80098a8 <xTimerGenericCommand+0x98>)
 8009864:	6818      	ldr	r0, [r3, #0]
 8009866:	f107 0110 	add.w	r1, r7, #16
 800986a:	2300      	movs	r3, #0
 800986c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800986e:	f7fe fa5d 	bl	8007d2c <xQueueGenericSend>
 8009872:	6278      	str	r0, [r7, #36]	; 0x24
 8009874:	e012      	b.n	800989c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009876:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <xTimerGenericCommand+0x98>)
 8009878:	6818      	ldr	r0, [r3, #0]
 800987a:	f107 0110 	add.w	r1, r7, #16
 800987e:	2300      	movs	r3, #0
 8009880:	2200      	movs	r2, #0
 8009882:	f7fe fa53 	bl	8007d2c <xQueueGenericSend>
 8009886:	6278      	str	r0, [r7, #36]	; 0x24
 8009888:	e008      	b.n	800989c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800988a:	4b07      	ldr	r3, [pc, #28]	; (80098a8 <xTimerGenericCommand+0x98>)
 800988c:	6818      	ldr	r0, [r3, #0]
 800988e:	f107 0110 	add.w	r1, r7, #16
 8009892:	2300      	movs	r3, #0
 8009894:	683a      	ldr	r2, [r7, #0]
 8009896:	f7fe fb47 	bl	8007f28 <xQueueGenericSendFromISR>
 800989a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800989c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3728      	adds	r7, #40	; 0x28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20000e5c 	.word	0x20000e5c

080098ac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b088      	sub	sp, #32
 80098b0:	af02      	add	r7, sp, #8
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098b6:	4b22      	ldr	r3, [pc, #136]	; (8009940 <prvProcessExpiredTimer+0x94>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	68db      	ldr	r3, [r3, #12]
 80098be:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	3304      	adds	r3, #4
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7fe f813 	bl	80078f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80098d0:	f003 0304 	and.w	r3, r3, #4
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d022      	beq.n	800991e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80098d8:	697b      	ldr	r3, [r7, #20]
 80098da:	699a      	ldr	r2, [r3, #24]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	18d1      	adds	r1, r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	683a      	ldr	r2, [r7, #0]
 80098e4:	6978      	ldr	r0, [r7, #20]
 80098e6:	f000 f8d1 	bl	8009a8c <prvInsertTimerInActiveList>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d01f      	beq.n	8009930 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098f0:	2300      	movs	r3, #0
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	2300      	movs	r3, #0
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	2100      	movs	r1, #0
 80098fa:	6978      	ldr	r0, [r7, #20]
 80098fc:	f7ff ff88 	bl	8009810 <xTimerGenericCommand>
 8009900:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d113      	bne.n	8009930 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990c:	f383 8811 	msr	BASEPRI, r3
 8009910:	f3bf 8f6f 	isb	sy
 8009914:	f3bf 8f4f 	dsb	sy
 8009918:	60fb      	str	r3, [r7, #12]
}
 800991a:	bf00      	nop
 800991c:	e7fe      	b.n	800991c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800991e:	697b      	ldr	r3, [r7, #20]
 8009920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009924:	f023 0301 	bic.w	r3, r3, #1
 8009928:	b2da      	uxtb	r2, r3
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	6a1b      	ldr	r3, [r3, #32]
 8009934:	6978      	ldr	r0, [r7, #20]
 8009936:	4798      	blx	r3
}
 8009938:	bf00      	nop
 800993a:	3718      	adds	r7, #24
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}
 8009940:	20000e54 	.word	0x20000e54

08009944 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800994c:	f107 0308 	add.w	r3, r7, #8
 8009950:	4618      	mov	r0, r3
 8009952:	f000 f857 	bl	8009a04 <prvGetNextExpireTime>
 8009956:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	4619      	mov	r1, r3
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f000 f803 	bl	8009968 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009962:	f000 f8d5 	bl	8009b10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009966:	e7f1      	b.n	800994c <prvTimerTask+0x8>

08009968 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009972:	f7ff f923 	bl	8008bbc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009976:	f107 0308 	add.w	r3, r7, #8
 800997a:	4618      	mov	r0, r3
 800997c:	f000 f866 	bl	8009a4c <prvSampleTimeNow>
 8009980:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d130      	bne.n	80099ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10a      	bne.n	80099a4 <prvProcessTimerOrBlockTask+0x3c>
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	429a      	cmp	r2, r3
 8009994:	d806      	bhi.n	80099a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009996:	f7ff f91f 	bl	8008bd8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800999a:	68f9      	ldr	r1, [r7, #12]
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7ff ff85 	bl	80098ac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80099a2:	e024      	b.n	80099ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d008      	beq.n	80099bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80099aa:	4b13      	ldr	r3, [pc, #76]	; (80099f8 <prvProcessTimerOrBlockTask+0x90>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d101      	bne.n	80099b8 <prvProcessTimerOrBlockTask+0x50>
 80099b4:	2301      	movs	r3, #1
 80099b6:	e000      	b.n	80099ba <prvProcessTimerOrBlockTask+0x52>
 80099b8:	2300      	movs	r3, #0
 80099ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80099bc:	4b0f      	ldr	r3, [pc, #60]	; (80099fc <prvProcessTimerOrBlockTask+0x94>)
 80099be:	6818      	ldr	r0, [r3, #0]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	1ad3      	subs	r3, r2, r3
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	4619      	mov	r1, r3
 80099ca:	f7fe fe87 	bl	80086dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80099ce:	f7ff f903 	bl	8008bd8 <xTaskResumeAll>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10a      	bne.n	80099ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80099d8:	4b09      	ldr	r3, [pc, #36]	; (8009a00 <prvProcessTimerOrBlockTask+0x98>)
 80099da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099de:	601a      	str	r2, [r3, #0]
 80099e0:	f3bf 8f4f 	dsb	sy
 80099e4:	f3bf 8f6f 	isb	sy
}
 80099e8:	e001      	b.n	80099ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80099ea:	f7ff f8f5 	bl	8008bd8 <xTaskResumeAll>
}
 80099ee:	bf00      	nop
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	20000e58 	.word	0x20000e58
 80099fc:	20000e5c 	.word	0x20000e5c
 8009a00:	e000ed04 	.word	0xe000ed04

08009a04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009a0c:	4b0e      	ldr	r3, [pc, #56]	; (8009a48 <prvGetNextExpireTime+0x44>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <prvGetNextExpireTime+0x16>
 8009a16:	2201      	movs	r2, #1
 8009a18:	e000      	b.n	8009a1c <prvGetNextExpireTime+0x18>
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d105      	bne.n	8009a34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009a28:	4b07      	ldr	r3, [pc, #28]	; (8009a48 <prvGetNextExpireTime+0x44>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	68db      	ldr	r3, [r3, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	60fb      	str	r3, [r7, #12]
 8009a32:	e001      	b.n	8009a38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009a34:	2300      	movs	r3, #0
 8009a36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009a38:	68fb      	ldr	r3, [r7, #12]
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3714      	adds	r7, #20
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	20000e54 	.word	0x20000e54

08009a4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b084      	sub	sp, #16
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009a54:	f7ff f95e 	bl	8008d14 <xTaskGetTickCount>
 8009a58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009a5a:	4b0b      	ldr	r3, [pc, #44]	; (8009a88 <prvSampleTimeNow+0x3c>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	68fa      	ldr	r2, [r7, #12]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d205      	bcs.n	8009a70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009a64:	f000 f936 	bl	8009cd4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	601a      	str	r2, [r3, #0]
 8009a6e:	e002      	b.n	8009a76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009a76:	4a04      	ldr	r2, [pc, #16]	; (8009a88 <prvSampleTimeNow+0x3c>)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	20000e64 	.word	0x20000e64

08009a8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b086      	sub	sp, #24
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	607a      	str	r2, [r7, #4]
 8009a98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	68ba      	ldr	r2, [r7, #8]
 8009aa2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009aaa:	68ba      	ldr	r2, [r7, #8]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d812      	bhi.n	8009ad8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	1ad2      	subs	r2, r2, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d302      	bcc.n	8009ac6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	617b      	str	r3, [r7, #20]
 8009ac4:	e01b      	b.n	8009afe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009ac6:	4b10      	ldr	r3, [pc, #64]	; (8009b08 <prvInsertTimerInActiveList+0x7c>)
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	3304      	adds	r3, #4
 8009ace:	4619      	mov	r1, r3
 8009ad0:	4610      	mov	r0, r2
 8009ad2:	f7fd fed4 	bl	800787e <vListInsert>
 8009ad6:	e012      	b.n	8009afe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009ad8:	687a      	ldr	r2, [r7, #4]
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d206      	bcs.n	8009aee <prvInsertTimerInActiveList+0x62>
 8009ae0:	68ba      	ldr	r2, [r7, #8]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d302      	bcc.n	8009aee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	617b      	str	r3, [r7, #20]
 8009aec:	e007      	b.n	8009afe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009aee:	4b07      	ldr	r3, [pc, #28]	; (8009b0c <prvInsertTimerInActiveList+0x80>)
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	3304      	adds	r3, #4
 8009af6:	4619      	mov	r1, r3
 8009af8:	4610      	mov	r0, r2
 8009afa:	f7fd fec0 	bl	800787e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009afe:	697b      	ldr	r3, [r7, #20]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3718      	adds	r7, #24
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	20000e58 	.word	0x20000e58
 8009b0c:	20000e54 	.word	0x20000e54

08009b10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b08e      	sub	sp, #56	; 0x38
 8009b14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009b16:	e0ca      	b.n	8009cae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	da18      	bge.n	8009b50 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009b1e:	1d3b      	adds	r3, r7, #4
 8009b20:	3304      	adds	r3, #4
 8009b22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d10a      	bne.n	8009b40 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8009b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	61fb      	str	r3, [r7, #28]
}
 8009b3c:	bf00      	nop
 8009b3e:	e7fe      	b.n	8009b3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b46:	6850      	ldr	r0, [r2, #4]
 8009b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b4a:	6892      	ldr	r2, [r2, #8]
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f2c0 80ab 	blt.w	8009cae <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5e:	695b      	ldr	r3, [r3, #20]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d004      	beq.n	8009b6e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b66:	3304      	adds	r3, #4
 8009b68:	4618      	mov	r0, r3
 8009b6a:	f7fd fec1 	bl	80078f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009b6e:	463b      	mov	r3, r7
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7ff ff6b 	bl	8009a4c <prvSampleTimeNow>
 8009b76:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b09      	cmp	r3, #9
 8009b7c:	f200 8096 	bhi.w	8009cac <prvProcessReceivedCommands+0x19c>
 8009b80:	a201      	add	r2, pc, #4	; (adr r2, 8009b88 <prvProcessReceivedCommands+0x78>)
 8009b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b86:	bf00      	nop
 8009b88:	08009bb1 	.word	0x08009bb1
 8009b8c:	08009bb1 	.word	0x08009bb1
 8009b90:	08009bb1 	.word	0x08009bb1
 8009b94:	08009c25 	.word	0x08009c25
 8009b98:	08009c39 	.word	0x08009c39
 8009b9c:	08009c83 	.word	0x08009c83
 8009ba0:	08009bb1 	.word	0x08009bb1
 8009ba4:	08009bb1 	.word	0x08009bb1
 8009ba8:	08009c25 	.word	0x08009c25
 8009bac:	08009c39 	.word	0x08009c39
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009bb6:	f043 0301 	orr.w	r3, r3, #1
 8009bba:	b2da      	uxtb	r2, r3
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	18d1      	adds	r1, r2, r3
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bd0:	f7ff ff5c 	bl	8009a8c <prvInsertTimerInActiveList>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d069      	beq.n	8009cae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009be0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d05e      	beq.n	8009cae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009bf0:	68ba      	ldr	r2, [r7, #8]
 8009bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	441a      	add	r2, r3
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	2100      	movs	r1, #0
 8009c00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c02:	f7ff fe05 	bl	8009810 <xTimerGenericCommand>
 8009c06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009c08:	6a3b      	ldr	r3, [r7, #32]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d14f      	bne.n	8009cae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	61bb      	str	r3, [r7, #24]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c2a:	f023 0301 	bic.w	r3, r3, #1
 8009c2e:	b2da      	uxtb	r2, r3
 8009c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009c36:	e03a      	b.n	8009cae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c3e:	f043 0301 	orr.w	r3, r3, #1
 8009c42:	b2da      	uxtb	r2, r3
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009c4a:	68ba      	ldr	r2, [r7, #8]
 8009c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c52:	699b      	ldr	r3, [r3, #24]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d10a      	bne.n	8009c6e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	617b      	str	r3, [r7, #20]
}
 8009c6a:	bf00      	nop
 8009c6c:	e7fe      	b.n	8009c6c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c70:	699a      	ldr	r2, [r3, #24]
 8009c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c74:	18d1      	adds	r1, r2, r3
 8009c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c7c:	f7ff ff06 	bl	8009a8c <prvInsertTimerInActiveList>
					break;
 8009c80:	e015      	b.n	8009cae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c88:	f003 0302 	and.w	r3, r3, #2
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d103      	bne.n	8009c98 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c92:	f000 fbdd 	bl	800a450 <vPortFree>
 8009c96:	e00a      	b.n	8009cae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009c9e:	f023 0301 	bic.w	r3, r3, #1
 8009ca2:	b2da      	uxtb	r2, r3
 8009ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009caa:	e000      	b.n	8009cae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009cac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009cae:	4b08      	ldr	r3, [pc, #32]	; (8009cd0 <prvProcessReceivedCommands+0x1c0>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	1d39      	adds	r1, r7, #4
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f7fe f9d2 	bl	8008060 <xQueueReceive>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f47f af2a 	bne.w	8009b18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009cc4:	bf00      	nop
 8009cc6:	bf00      	nop
 8009cc8:	3730      	adds	r7, #48	; 0x30
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000e5c 	.word	0x20000e5c

08009cd4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b088      	sub	sp, #32
 8009cd8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009cda:	e048      	b.n	8009d6e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cdc:	4b2d      	ldr	r3, [pc, #180]	; (8009d94 <prvSwitchTimerLists+0xc0>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ce6:	4b2b      	ldr	r3, [pc, #172]	; (8009d94 <prvSwitchTimerLists+0xc0>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	68db      	ldr	r3, [r3, #12]
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	3304      	adds	r3, #4
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f7fd fdfb 	bl	80078f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	6a1b      	ldr	r3, [r3, #32]
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009d08:	f003 0304 	and.w	r3, r3, #4
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d02e      	beq.n	8009d6e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	699b      	ldr	r3, [r3, #24]
 8009d14:	693a      	ldr	r2, [r7, #16]
 8009d16:	4413      	add	r3, r2
 8009d18:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d90e      	bls.n	8009d40 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d2e:	4b19      	ldr	r3, [pc, #100]	; (8009d94 <prvSwitchTimerLists+0xc0>)
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	3304      	adds	r3, #4
 8009d36:	4619      	mov	r1, r3
 8009d38:	4610      	mov	r0, r2
 8009d3a:	f7fd fda0 	bl	800787e <vListInsert>
 8009d3e:	e016      	b.n	8009d6e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009d40:	2300      	movs	r3, #0
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	2300      	movs	r3, #0
 8009d46:	693a      	ldr	r2, [r7, #16]
 8009d48:	2100      	movs	r1, #0
 8009d4a:	68f8      	ldr	r0, [r7, #12]
 8009d4c:	f7ff fd60 	bl	8009810 <xTimerGenericCommand>
 8009d50:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d10a      	bne.n	8009d6e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5c:	f383 8811 	msr	BASEPRI, r3
 8009d60:	f3bf 8f6f 	isb	sy
 8009d64:	f3bf 8f4f 	dsb	sy
 8009d68:	603b      	str	r3, [r7, #0]
}
 8009d6a:	bf00      	nop
 8009d6c:	e7fe      	b.n	8009d6c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009d6e:	4b09      	ldr	r3, [pc, #36]	; (8009d94 <prvSwitchTimerLists+0xc0>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1b1      	bne.n	8009cdc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009d78:	4b06      	ldr	r3, [pc, #24]	; (8009d94 <prvSwitchTimerLists+0xc0>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009d7e:	4b06      	ldr	r3, [pc, #24]	; (8009d98 <prvSwitchTimerLists+0xc4>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a04      	ldr	r2, [pc, #16]	; (8009d94 <prvSwitchTimerLists+0xc0>)
 8009d84:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009d86:	4a04      	ldr	r2, [pc, #16]	; (8009d98 <prvSwitchTimerLists+0xc4>)
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	6013      	str	r3, [r2, #0]
}
 8009d8c:	bf00      	nop
 8009d8e:	3718      	adds	r7, #24
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}
 8009d94:	20000e54 	.word	0x20000e54
 8009d98:	20000e58 	.word	0x20000e58

08009d9c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009da2:	f000 f967 	bl	800a074 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009da6:	4b15      	ldr	r3, [pc, #84]	; (8009dfc <prvCheckForValidListAndQueue+0x60>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d120      	bne.n	8009df0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009dae:	4814      	ldr	r0, [pc, #80]	; (8009e00 <prvCheckForValidListAndQueue+0x64>)
 8009db0:	f7fd fd14 	bl	80077dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009db4:	4813      	ldr	r0, [pc, #76]	; (8009e04 <prvCheckForValidListAndQueue+0x68>)
 8009db6:	f7fd fd11 	bl	80077dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009dba:	4b13      	ldr	r3, [pc, #76]	; (8009e08 <prvCheckForValidListAndQueue+0x6c>)
 8009dbc:	4a10      	ldr	r2, [pc, #64]	; (8009e00 <prvCheckForValidListAndQueue+0x64>)
 8009dbe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009dc0:	4b12      	ldr	r3, [pc, #72]	; (8009e0c <prvCheckForValidListAndQueue+0x70>)
 8009dc2:	4a10      	ldr	r2, [pc, #64]	; (8009e04 <prvCheckForValidListAndQueue+0x68>)
 8009dc4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	9300      	str	r3, [sp, #0]
 8009dca:	4b11      	ldr	r3, [pc, #68]	; (8009e10 <prvCheckForValidListAndQueue+0x74>)
 8009dcc:	4a11      	ldr	r2, [pc, #68]	; (8009e14 <prvCheckForValidListAndQueue+0x78>)
 8009dce:	2110      	movs	r1, #16
 8009dd0:	200a      	movs	r0, #10
 8009dd2:	f7fd fe1f 	bl	8007a14 <xQueueGenericCreateStatic>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4a08      	ldr	r2, [pc, #32]	; (8009dfc <prvCheckForValidListAndQueue+0x60>)
 8009dda:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ddc:	4b07      	ldr	r3, [pc, #28]	; (8009dfc <prvCheckForValidListAndQueue+0x60>)
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d005      	beq.n	8009df0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009de4:	4b05      	ldr	r3, [pc, #20]	; (8009dfc <prvCheckForValidListAndQueue+0x60>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	490b      	ldr	r1, [pc, #44]	; (8009e18 <prvCheckForValidListAndQueue+0x7c>)
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fe fc4c 	bl	8008688 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009df0:	f000 f970 	bl	800a0d4 <vPortExitCritical>
}
 8009df4:	bf00      	nop
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	bf00      	nop
 8009dfc:	20000e5c 	.word	0x20000e5c
 8009e00:	20000e2c 	.word	0x20000e2c
 8009e04:	20000e40 	.word	0x20000e40
 8009e08:	20000e54 	.word	0x20000e54
 8009e0c:	20000e58 	.word	0x20000e58
 8009e10:	20000f08 	.word	0x20000f08
 8009e14:	20000e68 	.word	0x20000e68
 8009e18:	0800bc0c 	.word	0x0800bc0c

08009e1c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	60f8      	str	r0, [r7, #12]
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	3b04      	subs	r3, #4
 8009e2c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	3b04      	subs	r3, #4
 8009e3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	f023 0201 	bic.w	r2, r3, #1
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	3b04      	subs	r3, #4
 8009e4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e4c:	4a0c      	ldr	r2, [pc, #48]	; (8009e80 <pxPortInitialiseStack+0x64>)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	3b14      	subs	r3, #20
 8009e56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e58:	687a      	ldr	r2, [r7, #4]
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	3b04      	subs	r3, #4
 8009e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f06f 0202 	mvn.w	r2, #2
 8009e6a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	3b20      	subs	r3, #32
 8009e70:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e72:	68fb      	ldr	r3, [r7, #12]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3714      	adds	r7, #20
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7e:	4770      	bx	lr
 8009e80:	08009e85 	.word	0x08009e85

08009e84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009e8e:	4b12      	ldr	r3, [pc, #72]	; (8009ed8 <prvTaskExitError+0x54>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e96:	d00a      	beq.n	8009eae <prvTaskExitError+0x2a>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	60fb      	str	r3, [r7, #12]
}
 8009eaa:	bf00      	nop
 8009eac:	e7fe      	b.n	8009eac <prvTaskExitError+0x28>
	__asm volatile
 8009eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	60bb      	str	r3, [r7, #8]
}
 8009ec0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ec2:	bf00      	nop
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d0fc      	beq.n	8009ec4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009eca:	bf00      	nop
 8009ecc:	bf00      	nop
 8009ece:	3714      	adds	r7, #20
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	2000000c 	.word	0x2000000c
 8009edc:	00000000 	.word	0x00000000

08009ee0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ee0:	4b07      	ldr	r3, [pc, #28]	; (8009f00 <pxCurrentTCBConst2>)
 8009ee2:	6819      	ldr	r1, [r3, #0]
 8009ee4:	6808      	ldr	r0, [r1, #0]
 8009ee6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eea:	f380 8809 	msr	PSP, r0
 8009eee:	f3bf 8f6f 	isb	sy
 8009ef2:	f04f 0000 	mov.w	r0, #0
 8009ef6:	f380 8811 	msr	BASEPRI, r0
 8009efa:	4770      	bx	lr
 8009efc:	f3af 8000 	nop.w

08009f00 <pxCurrentTCBConst2>:
 8009f00:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f04:	bf00      	nop
 8009f06:	bf00      	nop

08009f08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009f08:	4808      	ldr	r0, [pc, #32]	; (8009f2c <prvPortStartFirstTask+0x24>)
 8009f0a:	6800      	ldr	r0, [r0, #0]
 8009f0c:	6800      	ldr	r0, [r0, #0]
 8009f0e:	f380 8808 	msr	MSP, r0
 8009f12:	f04f 0000 	mov.w	r0, #0
 8009f16:	f380 8814 	msr	CONTROL, r0
 8009f1a:	b662      	cpsie	i
 8009f1c:	b661      	cpsie	f
 8009f1e:	f3bf 8f4f 	dsb	sy
 8009f22:	f3bf 8f6f 	isb	sy
 8009f26:	df00      	svc	0
 8009f28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f2a:	bf00      	nop
 8009f2c:	e000ed08 	.word	0xe000ed08

08009f30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009f36:	4b46      	ldr	r3, [pc, #280]	; (800a050 <xPortStartScheduler+0x120>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a46      	ldr	r2, [pc, #280]	; (800a054 <xPortStartScheduler+0x124>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d10a      	bne.n	8009f56 <xPortStartScheduler+0x26>
	__asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	613b      	str	r3, [r7, #16]
}
 8009f52:	bf00      	nop
 8009f54:	e7fe      	b.n	8009f54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009f56:	4b3e      	ldr	r3, [pc, #248]	; (800a050 <xPortStartScheduler+0x120>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a3f      	ldr	r2, [pc, #252]	; (800a058 <xPortStartScheduler+0x128>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d10a      	bne.n	8009f76 <xPortStartScheduler+0x46>
	__asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	60fb      	str	r3, [r7, #12]
}
 8009f72:	bf00      	nop
 8009f74:	e7fe      	b.n	8009f74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f76:	4b39      	ldr	r3, [pc, #228]	; (800a05c <xPortStartScheduler+0x12c>)
 8009f78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	22ff      	movs	r2, #255	; 0xff
 8009f86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	781b      	ldrb	r3, [r3, #0]
 8009f8c:	b2db      	uxtb	r3, r3
 8009f8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f90:	78fb      	ldrb	r3, [r7, #3]
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f98:	b2da      	uxtb	r2, r3
 8009f9a:	4b31      	ldr	r3, [pc, #196]	; (800a060 <xPortStartScheduler+0x130>)
 8009f9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f9e:	4b31      	ldr	r3, [pc, #196]	; (800a064 <xPortStartScheduler+0x134>)
 8009fa0:	2207      	movs	r2, #7
 8009fa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fa4:	e009      	b.n	8009fba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009fa6:	4b2f      	ldr	r3, [pc, #188]	; (800a064 <xPortStartScheduler+0x134>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3b01      	subs	r3, #1
 8009fac:	4a2d      	ldr	r2, [pc, #180]	; (800a064 <xPortStartScheduler+0x134>)
 8009fae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009fb0:	78fb      	ldrb	r3, [r7, #3]
 8009fb2:	b2db      	uxtb	r3, r3
 8009fb4:	005b      	lsls	r3, r3, #1
 8009fb6:	b2db      	uxtb	r3, r3
 8009fb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fc2:	2b80      	cmp	r3, #128	; 0x80
 8009fc4:	d0ef      	beq.n	8009fa6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009fc6:	4b27      	ldr	r3, [pc, #156]	; (800a064 <xPortStartScheduler+0x134>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f1c3 0307 	rsb	r3, r3, #7
 8009fce:	2b04      	cmp	r3, #4
 8009fd0:	d00a      	beq.n	8009fe8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd6:	f383 8811 	msr	BASEPRI, r3
 8009fda:	f3bf 8f6f 	isb	sy
 8009fde:	f3bf 8f4f 	dsb	sy
 8009fe2:	60bb      	str	r3, [r7, #8]
}
 8009fe4:	bf00      	nop
 8009fe6:	e7fe      	b.n	8009fe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fe8:	4b1e      	ldr	r3, [pc, #120]	; (800a064 <xPortStartScheduler+0x134>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	021b      	lsls	r3, r3, #8
 8009fee:	4a1d      	ldr	r2, [pc, #116]	; (800a064 <xPortStartScheduler+0x134>)
 8009ff0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009ff2:	4b1c      	ldr	r3, [pc, #112]	; (800a064 <xPortStartScheduler+0x134>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009ffa:	4a1a      	ldr	r2, [pc, #104]	; (800a064 <xPortStartScheduler+0x134>)
 8009ffc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	b2da      	uxtb	r2, r3
 800a002:	697b      	ldr	r3, [r7, #20]
 800a004:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a006:	4b18      	ldr	r3, [pc, #96]	; (800a068 <xPortStartScheduler+0x138>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a17      	ldr	r2, [pc, #92]	; (800a068 <xPortStartScheduler+0x138>)
 800a00c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a010:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a012:	4b15      	ldr	r3, [pc, #84]	; (800a068 <xPortStartScheduler+0x138>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a14      	ldr	r2, [pc, #80]	; (800a068 <xPortStartScheduler+0x138>)
 800a018:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a01c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a01e:	f000 f8dd 	bl	800a1dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a022:	4b12      	ldr	r3, [pc, #72]	; (800a06c <xPortStartScheduler+0x13c>)
 800a024:	2200      	movs	r2, #0
 800a026:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a028:	f000 f8fc 	bl	800a224 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a02c:	4b10      	ldr	r3, [pc, #64]	; (800a070 <xPortStartScheduler+0x140>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a0f      	ldr	r2, [pc, #60]	; (800a070 <xPortStartScheduler+0x140>)
 800a032:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a036:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a038:	f7ff ff66 	bl	8009f08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a03c:	f7fe ff46 	bl	8008ecc <vTaskSwitchContext>
	prvTaskExitError();
 800a040:	f7ff ff20 	bl	8009e84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a044:	2300      	movs	r3, #0
}
 800a046:	4618      	mov	r0, r3
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	e000ed00 	.word	0xe000ed00
 800a054:	410fc271 	.word	0x410fc271
 800a058:	410fc270 	.word	0x410fc270
 800a05c:	e000e400 	.word	0xe000e400
 800a060:	20000f58 	.word	0x20000f58
 800a064:	20000f5c 	.word	0x20000f5c
 800a068:	e000ed20 	.word	0xe000ed20
 800a06c:	2000000c 	.word	0x2000000c
 800a070:	e000ef34 	.word	0xe000ef34

0800a074 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
	__asm volatile
 800a07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07e:	f383 8811 	msr	BASEPRI, r3
 800a082:	f3bf 8f6f 	isb	sy
 800a086:	f3bf 8f4f 	dsb	sy
 800a08a:	607b      	str	r3, [r7, #4]
}
 800a08c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a08e:	4b0f      	ldr	r3, [pc, #60]	; (800a0cc <vPortEnterCritical+0x58>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	3301      	adds	r3, #1
 800a094:	4a0d      	ldr	r2, [pc, #52]	; (800a0cc <vPortEnterCritical+0x58>)
 800a096:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a098:	4b0c      	ldr	r3, [pc, #48]	; (800a0cc <vPortEnterCritical+0x58>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d10f      	bne.n	800a0c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a0a0:	4b0b      	ldr	r3, [pc, #44]	; (800a0d0 <vPortEnterCritical+0x5c>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00a      	beq.n	800a0c0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ae:	f383 8811 	msr	BASEPRI, r3
 800a0b2:	f3bf 8f6f 	isb	sy
 800a0b6:	f3bf 8f4f 	dsb	sy
 800a0ba:	603b      	str	r3, [r7, #0]
}
 800a0bc:	bf00      	nop
 800a0be:	e7fe      	b.n	800a0be <vPortEnterCritical+0x4a>
	}
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr
 800a0cc:	2000000c 	.word	0x2000000c
 800a0d0:	e000ed04 	.word	0xe000ed04

0800a0d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a0da:	4b12      	ldr	r3, [pc, #72]	; (800a124 <vPortExitCritical+0x50>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10a      	bne.n	800a0f8 <vPortExitCritical+0x24>
	__asm volatile
 800a0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	607b      	str	r3, [r7, #4]
}
 800a0f4:	bf00      	nop
 800a0f6:	e7fe      	b.n	800a0f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a0f8:	4b0a      	ldr	r3, [pc, #40]	; (800a124 <vPortExitCritical+0x50>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	4a09      	ldr	r2, [pc, #36]	; (800a124 <vPortExitCritical+0x50>)
 800a100:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a102:	4b08      	ldr	r3, [pc, #32]	; (800a124 <vPortExitCritical+0x50>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d105      	bne.n	800a116 <vPortExitCritical+0x42>
 800a10a:	2300      	movs	r3, #0
 800a10c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	f383 8811 	msr	BASEPRI, r3
}
 800a114:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a116:	bf00      	nop
 800a118:	370c      	adds	r7, #12
 800a11a:	46bd      	mov	sp, r7
 800a11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a120:	4770      	bx	lr
 800a122:	bf00      	nop
 800a124:	2000000c 	.word	0x2000000c
	...

0800a130 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a130:	f3ef 8009 	mrs	r0, PSP
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	4b15      	ldr	r3, [pc, #84]	; (800a190 <pxCurrentTCBConst>)
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	f01e 0f10 	tst.w	lr, #16
 800a140:	bf08      	it	eq
 800a142:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a146:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a14a:	6010      	str	r0, [r2, #0]
 800a14c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a150:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a154:	f380 8811 	msr	BASEPRI, r0
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	f3bf 8f6f 	isb	sy
 800a160:	f7fe feb4 	bl	8008ecc <vTaskSwitchContext>
 800a164:	f04f 0000 	mov.w	r0, #0
 800a168:	f380 8811 	msr	BASEPRI, r0
 800a16c:	bc09      	pop	{r0, r3}
 800a16e:	6819      	ldr	r1, [r3, #0]
 800a170:	6808      	ldr	r0, [r1, #0]
 800a172:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a176:	f01e 0f10 	tst.w	lr, #16
 800a17a:	bf08      	it	eq
 800a17c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a180:	f380 8809 	msr	PSP, r0
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	f3af 8000 	nop.w

0800a190 <pxCurrentTCBConst>:
 800a190:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a194:	bf00      	nop
 800a196:	bf00      	nop

0800a198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b082      	sub	sp, #8
 800a19c:	af00      	add	r7, sp, #0
	__asm volatile
 800a19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a2:	f383 8811 	msr	BASEPRI, r3
 800a1a6:	f3bf 8f6f 	isb	sy
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	607b      	str	r3, [r7, #4]
}
 800a1b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a1b2:	f7fe fdd1 	bl	8008d58 <xTaskIncrementTick>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a1bc:	4b06      	ldr	r3, [pc, #24]	; (800a1d8 <xPortSysTickHandler+0x40>)
 800a1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1c2:	601a      	str	r2, [r3, #0]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	f383 8811 	msr	BASEPRI, r3
}
 800a1ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a1d0:	bf00      	nop
 800a1d2:	3708      	adds	r7, #8
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}
 800a1d8:	e000ed04 	.word	0xe000ed04

0800a1dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a1dc:	b480      	push	{r7}
 800a1de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a1e0:	4b0b      	ldr	r3, [pc, #44]	; (800a210 <vPortSetupTimerInterrupt+0x34>)
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a1e6:	4b0b      	ldr	r3, [pc, #44]	; (800a214 <vPortSetupTimerInterrupt+0x38>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a1ec:	4b0a      	ldr	r3, [pc, #40]	; (800a218 <vPortSetupTimerInterrupt+0x3c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a0a      	ldr	r2, [pc, #40]	; (800a21c <vPortSetupTimerInterrupt+0x40>)
 800a1f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f6:	099b      	lsrs	r3, r3, #6
 800a1f8:	4a09      	ldr	r2, [pc, #36]	; (800a220 <vPortSetupTimerInterrupt+0x44>)
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a1fe:	4b04      	ldr	r3, [pc, #16]	; (800a210 <vPortSetupTimerInterrupt+0x34>)
 800a200:	2207      	movs	r2, #7
 800a202:	601a      	str	r2, [r3, #0]
}
 800a204:	bf00      	nop
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	e000e010 	.word	0xe000e010
 800a214:	e000e018 	.word	0xe000e018
 800a218:	20000000 	.word	0x20000000
 800a21c:	10624dd3 	.word	0x10624dd3
 800a220:	e000e014 	.word	0xe000e014

0800a224 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a224:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a234 <vPortEnableVFP+0x10>
 800a228:	6801      	ldr	r1, [r0, #0]
 800a22a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a22e:	6001      	str	r1, [r0, #0]
 800a230:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a232:	bf00      	nop
 800a234:	e000ed88 	.word	0xe000ed88

0800a238 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a238:	b480      	push	{r7}
 800a23a:	b085      	sub	sp, #20
 800a23c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a23e:	f3ef 8305 	mrs	r3, IPSR
 800a242:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b0f      	cmp	r3, #15
 800a248:	d914      	bls.n	800a274 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a24a:	4a17      	ldr	r2, [pc, #92]	; (800a2a8 <vPortValidateInterruptPriority+0x70>)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	4413      	add	r3, r2
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a254:	4b15      	ldr	r3, [pc, #84]	; (800a2ac <vPortValidateInterruptPriority+0x74>)
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	7afa      	ldrb	r2, [r7, #11]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d20a      	bcs.n	800a274 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a262:	f383 8811 	msr	BASEPRI, r3
 800a266:	f3bf 8f6f 	isb	sy
 800a26a:	f3bf 8f4f 	dsb	sy
 800a26e:	607b      	str	r3, [r7, #4]
}
 800a270:	bf00      	nop
 800a272:	e7fe      	b.n	800a272 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a274:	4b0e      	ldr	r3, [pc, #56]	; (800a2b0 <vPortValidateInterruptPriority+0x78>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a27c:	4b0d      	ldr	r3, [pc, #52]	; (800a2b4 <vPortValidateInterruptPriority+0x7c>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	429a      	cmp	r2, r3
 800a282:	d90a      	bls.n	800a29a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a288:	f383 8811 	msr	BASEPRI, r3
 800a28c:	f3bf 8f6f 	isb	sy
 800a290:	f3bf 8f4f 	dsb	sy
 800a294:	603b      	str	r3, [r7, #0]
}
 800a296:	bf00      	nop
 800a298:	e7fe      	b.n	800a298 <vPortValidateInterruptPriority+0x60>
	}
 800a29a:	bf00      	nop
 800a29c:	3714      	adds	r7, #20
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	e000e3f0 	.word	0xe000e3f0
 800a2ac:	20000f58 	.word	0x20000f58
 800a2b0:	e000ed0c 	.word	0xe000ed0c
 800a2b4:	20000f5c 	.word	0x20000f5c

0800a2b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b08a      	sub	sp, #40	; 0x28
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a2c4:	f7fe fc7a 	bl	8008bbc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a2c8:	4b5b      	ldr	r3, [pc, #364]	; (800a438 <pvPortMalloc+0x180>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d101      	bne.n	800a2d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a2d0:	f000 f920 	bl	800a514 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a2d4:	4b59      	ldr	r3, [pc, #356]	; (800a43c <pvPortMalloc+0x184>)
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4013      	ands	r3, r2
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f040 8093 	bne.w	800a408 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d01d      	beq.n	800a324 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a2e8:	2208      	movs	r2, #8
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f003 0307 	and.w	r3, r3, #7
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d014      	beq.n	800a324 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f023 0307 	bic.w	r3, r3, #7
 800a300:	3308      	adds	r3, #8
 800a302:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f003 0307 	and.w	r3, r3, #7
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d00a      	beq.n	800a324 <pvPortMalloc+0x6c>
	__asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	617b      	str	r3, [r7, #20]
}
 800a320:	bf00      	nop
 800a322:	e7fe      	b.n	800a322 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d06e      	beq.n	800a408 <pvPortMalloc+0x150>
 800a32a:	4b45      	ldr	r3, [pc, #276]	; (800a440 <pvPortMalloc+0x188>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	429a      	cmp	r2, r3
 800a332:	d869      	bhi.n	800a408 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a334:	4b43      	ldr	r3, [pc, #268]	; (800a444 <pvPortMalloc+0x18c>)
 800a336:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a338:	4b42      	ldr	r3, [pc, #264]	; (800a444 <pvPortMalloc+0x18c>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a33e:	e004      	b.n	800a34a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a342:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	429a      	cmp	r2, r3
 800a352:	d903      	bls.n	800a35c <pvPortMalloc+0xa4>
 800a354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1f1      	bne.n	800a340 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a35c:	4b36      	ldr	r3, [pc, #216]	; (800a438 <pvPortMalloc+0x180>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a362:	429a      	cmp	r2, r3
 800a364:	d050      	beq.n	800a408 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a366:	6a3b      	ldr	r3, [r7, #32]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2208      	movs	r2, #8
 800a36c:	4413      	add	r3, r2
 800a36e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	6a3b      	ldr	r3, [r7, #32]
 800a376:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37a:	685a      	ldr	r2, [r3, #4]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	1ad2      	subs	r2, r2, r3
 800a380:	2308      	movs	r3, #8
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	429a      	cmp	r2, r3
 800a386:	d91f      	bls.n	800a3c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a388:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4413      	add	r3, r2
 800a38e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	f003 0307 	and.w	r3, r3, #7
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00a      	beq.n	800a3b0 <pvPortMalloc+0xf8>
	__asm volatile
 800a39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	613b      	str	r3, [r7, #16]
}
 800a3ac:	bf00      	nop
 800a3ae:	e7fe      	b.n	800a3ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	1ad2      	subs	r2, r2, r3
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	687a      	ldr	r2, [r7, #4]
 800a3c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a3c2:	69b8      	ldr	r0, [r7, #24]
 800a3c4:	f000 f908 	bl	800a5d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a3c8:	4b1d      	ldr	r3, [pc, #116]	; (800a440 <pvPortMalloc+0x188>)
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	1ad3      	subs	r3, r2, r3
 800a3d2:	4a1b      	ldr	r2, [pc, #108]	; (800a440 <pvPortMalloc+0x188>)
 800a3d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a3d6:	4b1a      	ldr	r3, [pc, #104]	; (800a440 <pvPortMalloc+0x188>)
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	4b1b      	ldr	r3, [pc, #108]	; (800a448 <pvPortMalloc+0x190>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d203      	bcs.n	800a3ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a3e2:	4b17      	ldr	r3, [pc, #92]	; (800a440 <pvPortMalloc+0x188>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a18      	ldr	r2, [pc, #96]	; (800a448 <pvPortMalloc+0x190>)
 800a3e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	4b13      	ldr	r3, [pc, #76]	; (800a43c <pvPortMalloc+0x184>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	431a      	orrs	r2, r3
 800a3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a3fe:	4b13      	ldr	r3, [pc, #76]	; (800a44c <pvPortMalloc+0x194>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3301      	adds	r3, #1
 800a404:	4a11      	ldr	r2, [pc, #68]	; (800a44c <pvPortMalloc+0x194>)
 800a406:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a408:	f7fe fbe6 	bl	8008bd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a40c:	69fb      	ldr	r3, [r7, #28]
 800a40e:	f003 0307 	and.w	r3, r3, #7
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00a      	beq.n	800a42c <pvPortMalloc+0x174>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	60fb      	str	r3, [r7, #12]
}
 800a428:	bf00      	nop
 800a42a:	e7fe      	b.n	800a42a <pvPortMalloc+0x172>
	return pvReturn;
 800a42c:	69fb      	ldr	r3, [r7, #28]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3728      	adds	r7, #40	; 0x28
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20001b20 	.word	0x20001b20
 800a43c:	20001b34 	.word	0x20001b34
 800a440:	20001b24 	.word	0x20001b24
 800a444:	20001b18 	.word	0x20001b18
 800a448:	20001b28 	.word	0x20001b28
 800a44c:	20001b2c 	.word	0x20001b2c

0800a450 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d04d      	beq.n	800a4fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a462:	2308      	movs	r3, #8
 800a464:	425b      	negs	r3, r3
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	4413      	add	r3, r2
 800a46a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	685a      	ldr	r2, [r3, #4]
 800a474:	4b24      	ldr	r3, [pc, #144]	; (800a508 <vPortFree+0xb8>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4013      	ands	r3, r2
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d10a      	bne.n	800a494 <vPortFree+0x44>
	__asm volatile
 800a47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	60fb      	str	r3, [r7, #12]
}
 800a490:	bf00      	nop
 800a492:	e7fe      	b.n	800a492 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00a      	beq.n	800a4b2 <vPortFree+0x62>
	__asm volatile
 800a49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a0:	f383 8811 	msr	BASEPRI, r3
 800a4a4:	f3bf 8f6f 	isb	sy
 800a4a8:	f3bf 8f4f 	dsb	sy
 800a4ac:	60bb      	str	r3, [r7, #8]
}
 800a4ae:	bf00      	nop
 800a4b0:	e7fe      	b.n	800a4b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	685a      	ldr	r2, [r3, #4]
 800a4b6:	4b14      	ldr	r3, [pc, #80]	; (800a508 <vPortFree+0xb8>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d01e      	beq.n	800a4fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d11a      	bne.n	800a4fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	685a      	ldr	r2, [r3, #4]
 800a4cc:	4b0e      	ldr	r3, [pc, #56]	; (800a508 <vPortFree+0xb8>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	43db      	mvns	r3, r3
 800a4d2:	401a      	ands	r2, r3
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a4d8:	f7fe fb70 	bl	8008bbc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	685a      	ldr	r2, [r3, #4]
 800a4e0:	4b0a      	ldr	r3, [pc, #40]	; (800a50c <vPortFree+0xbc>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4413      	add	r3, r2
 800a4e6:	4a09      	ldr	r2, [pc, #36]	; (800a50c <vPortFree+0xbc>)
 800a4e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a4ea:	6938      	ldr	r0, [r7, #16]
 800a4ec:	f000 f874 	bl	800a5d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a4f0:	4b07      	ldr	r3, [pc, #28]	; (800a510 <vPortFree+0xc0>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	4a06      	ldr	r2, [pc, #24]	; (800a510 <vPortFree+0xc0>)
 800a4f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a4fa:	f7fe fb6d 	bl	8008bd8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a4fe:	bf00      	nop
 800a500:	3718      	adds	r7, #24
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	20001b34 	.word	0x20001b34
 800a50c:	20001b24 	.word	0x20001b24
 800a510:	20001b30 	.word	0x20001b30

0800a514 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a51a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a51e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a520:	4b27      	ldr	r3, [pc, #156]	; (800a5c0 <prvHeapInit+0xac>)
 800a522:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f003 0307 	and.w	r3, r3, #7
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00c      	beq.n	800a548 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3307      	adds	r3, #7
 800a532:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f023 0307 	bic.w	r3, r3, #7
 800a53a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a53c:	68ba      	ldr	r2, [r7, #8]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	1ad3      	subs	r3, r2, r3
 800a542:	4a1f      	ldr	r2, [pc, #124]	; (800a5c0 <prvHeapInit+0xac>)
 800a544:	4413      	add	r3, r2
 800a546:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a54c:	4a1d      	ldr	r2, [pc, #116]	; (800a5c4 <prvHeapInit+0xb0>)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a552:	4b1c      	ldr	r3, [pc, #112]	; (800a5c4 <prvHeapInit+0xb0>)
 800a554:	2200      	movs	r2, #0
 800a556:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	4413      	add	r3, r2
 800a55e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a560:	2208      	movs	r2, #8
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	1a9b      	subs	r3, r3, r2
 800a566:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f023 0307 	bic.w	r3, r3, #7
 800a56e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	4a15      	ldr	r2, [pc, #84]	; (800a5c8 <prvHeapInit+0xb4>)
 800a574:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a576:	4b14      	ldr	r3, [pc, #80]	; (800a5c8 <prvHeapInit+0xb4>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	2200      	movs	r2, #0
 800a57c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a57e:	4b12      	ldr	r3, [pc, #72]	; (800a5c8 <prvHeapInit+0xb4>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2200      	movs	r2, #0
 800a584:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	1ad2      	subs	r2, r2, r3
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a594:	4b0c      	ldr	r3, [pc, #48]	; (800a5c8 <prvHeapInit+0xb4>)
 800a596:	681a      	ldr	r2, [r3, #0]
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	4a0a      	ldr	r2, [pc, #40]	; (800a5cc <prvHeapInit+0xb8>)
 800a5a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	685b      	ldr	r3, [r3, #4]
 800a5a8:	4a09      	ldr	r2, [pc, #36]	; (800a5d0 <prvHeapInit+0xbc>)
 800a5aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a5ac:	4b09      	ldr	r3, [pc, #36]	; (800a5d4 <prvHeapInit+0xc0>)
 800a5ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a5b2:	601a      	str	r2, [r3, #0]
}
 800a5b4:	bf00      	nop
 800a5b6:	3714      	adds	r7, #20
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	20000f60 	.word	0x20000f60
 800a5c4:	20001b18 	.word	0x20001b18
 800a5c8:	20001b20 	.word	0x20001b20
 800a5cc:	20001b28 	.word	0x20001b28
 800a5d0:	20001b24 	.word	0x20001b24
 800a5d4:	20001b34 	.word	0x20001b34

0800a5d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a5e0:	4b28      	ldr	r3, [pc, #160]	; (800a684 <prvInsertBlockIntoFreeList+0xac>)
 800a5e2:	60fb      	str	r3, [r7, #12]
 800a5e4:	e002      	b.n	800a5ec <prvInsertBlockIntoFreeList+0x14>
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	60fb      	str	r3, [r7, #12]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d8f7      	bhi.n	800a5e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	68ba      	ldr	r2, [r7, #8]
 800a600:	4413      	add	r3, r2
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	429a      	cmp	r2, r3
 800a606:	d108      	bne.n	800a61a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	441a      	add	r2, r3
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	68ba      	ldr	r2, [r7, #8]
 800a624:	441a      	add	r2, r3
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d118      	bne.n	800a660 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	4b15      	ldr	r3, [pc, #84]	; (800a688 <prvInsertBlockIntoFreeList+0xb0>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	429a      	cmp	r2, r3
 800a638:	d00d      	beq.n	800a656 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685a      	ldr	r2, [r3, #4]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	441a      	add	r2, r3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	601a      	str	r2, [r3, #0]
 800a654:	e008      	b.n	800a668 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a656:	4b0c      	ldr	r3, [pc, #48]	; (800a688 <prvInsertBlockIntoFreeList+0xb0>)
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	601a      	str	r2, [r3, #0]
 800a65e:	e003      	b.n	800a668 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d002      	beq.n	800a676 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a676:	bf00      	nop
 800a678:	3714      	adds	r7, #20
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	20001b18 	.word	0x20001b18
 800a688:	20001b20 	.word	0x20001b20

0800a68c <atoi>:
 800a68c:	220a      	movs	r2, #10
 800a68e:	2100      	movs	r1, #0
 800a690:	f000 b882 	b.w	800a798 <strtol>

0800a694 <_strtol_l.constprop.0>:
 800a694:	2b01      	cmp	r3, #1
 800a696:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a69a:	d001      	beq.n	800a6a0 <_strtol_l.constprop.0+0xc>
 800a69c:	2b24      	cmp	r3, #36	; 0x24
 800a69e:	d906      	bls.n	800a6ae <_strtol_l.constprop.0+0x1a>
 800a6a0:	f000 fa54 	bl	800ab4c <__errno>
 800a6a4:	2316      	movs	r3, #22
 800a6a6:	6003      	str	r3, [r0, #0]
 800a6a8:	2000      	movs	r0, #0
 800a6aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6ae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a794 <_strtol_l.constprop.0+0x100>
 800a6b2:	460d      	mov	r5, r1
 800a6b4:	462e      	mov	r6, r5
 800a6b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a6ba:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a6be:	f017 0708 	ands.w	r7, r7, #8
 800a6c2:	d1f7      	bne.n	800a6b4 <_strtol_l.constprop.0+0x20>
 800a6c4:	2c2d      	cmp	r4, #45	; 0x2d
 800a6c6:	d132      	bne.n	800a72e <_strtol_l.constprop.0+0x9a>
 800a6c8:	782c      	ldrb	r4, [r5, #0]
 800a6ca:	2701      	movs	r7, #1
 800a6cc:	1cb5      	adds	r5, r6, #2
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d05b      	beq.n	800a78a <_strtol_l.constprop.0+0xf6>
 800a6d2:	2b10      	cmp	r3, #16
 800a6d4:	d109      	bne.n	800a6ea <_strtol_l.constprop.0+0x56>
 800a6d6:	2c30      	cmp	r4, #48	; 0x30
 800a6d8:	d107      	bne.n	800a6ea <_strtol_l.constprop.0+0x56>
 800a6da:	782c      	ldrb	r4, [r5, #0]
 800a6dc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a6e0:	2c58      	cmp	r4, #88	; 0x58
 800a6e2:	d14d      	bne.n	800a780 <_strtol_l.constprop.0+0xec>
 800a6e4:	786c      	ldrb	r4, [r5, #1]
 800a6e6:	2310      	movs	r3, #16
 800a6e8:	3502      	adds	r5, #2
 800a6ea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a6ee:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a6f2:	f04f 0e00 	mov.w	lr, #0
 800a6f6:	fbb8 f9f3 	udiv	r9, r8, r3
 800a6fa:	4676      	mov	r6, lr
 800a6fc:	fb03 8a19 	mls	sl, r3, r9, r8
 800a700:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a704:	f1bc 0f09 	cmp.w	ip, #9
 800a708:	d816      	bhi.n	800a738 <_strtol_l.constprop.0+0xa4>
 800a70a:	4664      	mov	r4, ip
 800a70c:	42a3      	cmp	r3, r4
 800a70e:	dd24      	ble.n	800a75a <_strtol_l.constprop.0+0xc6>
 800a710:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800a714:	d008      	beq.n	800a728 <_strtol_l.constprop.0+0x94>
 800a716:	45b1      	cmp	r9, r6
 800a718:	d31c      	bcc.n	800a754 <_strtol_l.constprop.0+0xc0>
 800a71a:	d101      	bne.n	800a720 <_strtol_l.constprop.0+0x8c>
 800a71c:	45a2      	cmp	sl, r4
 800a71e:	db19      	blt.n	800a754 <_strtol_l.constprop.0+0xc0>
 800a720:	fb06 4603 	mla	r6, r6, r3, r4
 800a724:	f04f 0e01 	mov.w	lr, #1
 800a728:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a72c:	e7e8      	b.n	800a700 <_strtol_l.constprop.0+0x6c>
 800a72e:	2c2b      	cmp	r4, #43	; 0x2b
 800a730:	bf04      	itt	eq
 800a732:	782c      	ldrbeq	r4, [r5, #0]
 800a734:	1cb5      	addeq	r5, r6, #2
 800a736:	e7ca      	b.n	800a6ce <_strtol_l.constprop.0+0x3a>
 800a738:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a73c:	f1bc 0f19 	cmp.w	ip, #25
 800a740:	d801      	bhi.n	800a746 <_strtol_l.constprop.0+0xb2>
 800a742:	3c37      	subs	r4, #55	; 0x37
 800a744:	e7e2      	b.n	800a70c <_strtol_l.constprop.0+0x78>
 800a746:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a74a:	f1bc 0f19 	cmp.w	ip, #25
 800a74e:	d804      	bhi.n	800a75a <_strtol_l.constprop.0+0xc6>
 800a750:	3c57      	subs	r4, #87	; 0x57
 800a752:	e7db      	b.n	800a70c <_strtol_l.constprop.0+0x78>
 800a754:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 800a758:	e7e6      	b.n	800a728 <_strtol_l.constprop.0+0x94>
 800a75a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 800a75e:	d105      	bne.n	800a76c <_strtol_l.constprop.0+0xd8>
 800a760:	2322      	movs	r3, #34	; 0x22
 800a762:	6003      	str	r3, [r0, #0]
 800a764:	4646      	mov	r6, r8
 800a766:	b942      	cbnz	r2, 800a77a <_strtol_l.constprop.0+0xe6>
 800a768:	4630      	mov	r0, r6
 800a76a:	e79e      	b.n	800a6aa <_strtol_l.constprop.0+0x16>
 800a76c:	b107      	cbz	r7, 800a770 <_strtol_l.constprop.0+0xdc>
 800a76e:	4276      	negs	r6, r6
 800a770:	2a00      	cmp	r2, #0
 800a772:	d0f9      	beq.n	800a768 <_strtol_l.constprop.0+0xd4>
 800a774:	f1be 0f00 	cmp.w	lr, #0
 800a778:	d000      	beq.n	800a77c <_strtol_l.constprop.0+0xe8>
 800a77a:	1e69      	subs	r1, r5, #1
 800a77c:	6011      	str	r1, [r2, #0]
 800a77e:	e7f3      	b.n	800a768 <_strtol_l.constprop.0+0xd4>
 800a780:	2430      	movs	r4, #48	; 0x30
 800a782:	2b00      	cmp	r3, #0
 800a784:	d1b1      	bne.n	800a6ea <_strtol_l.constprop.0+0x56>
 800a786:	2308      	movs	r3, #8
 800a788:	e7af      	b.n	800a6ea <_strtol_l.constprop.0+0x56>
 800a78a:	2c30      	cmp	r4, #48	; 0x30
 800a78c:	d0a5      	beq.n	800a6da <_strtol_l.constprop.0+0x46>
 800a78e:	230a      	movs	r3, #10
 800a790:	e7ab      	b.n	800a6ea <_strtol_l.constprop.0+0x56>
 800a792:	bf00      	nop
 800a794:	0800bca5 	.word	0x0800bca5

0800a798 <strtol>:
 800a798:	4613      	mov	r3, r2
 800a79a:	460a      	mov	r2, r1
 800a79c:	4601      	mov	r1, r0
 800a79e:	4802      	ldr	r0, [pc, #8]	; (800a7a8 <strtol+0x10>)
 800a7a0:	6800      	ldr	r0, [r0, #0]
 800a7a2:	f7ff bf77 	b.w	800a694 <_strtol_l.constprop.0>
 800a7a6:	bf00      	nop
 800a7a8:	20000068 	.word	0x20000068

0800a7ac <std>:
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	b510      	push	{r4, lr}
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	e9c0 3300 	strd	r3, r3, [r0]
 800a7b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a7ba:	6083      	str	r3, [r0, #8]
 800a7bc:	8181      	strh	r1, [r0, #12]
 800a7be:	6643      	str	r3, [r0, #100]	; 0x64
 800a7c0:	81c2      	strh	r2, [r0, #14]
 800a7c2:	6183      	str	r3, [r0, #24]
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	2208      	movs	r2, #8
 800a7c8:	305c      	adds	r0, #92	; 0x5c
 800a7ca:	f000 f914 	bl	800a9f6 <memset>
 800a7ce:	4b0d      	ldr	r3, [pc, #52]	; (800a804 <std+0x58>)
 800a7d0:	6263      	str	r3, [r4, #36]	; 0x24
 800a7d2:	4b0d      	ldr	r3, [pc, #52]	; (800a808 <std+0x5c>)
 800a7d4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a7d6:	4b0d      	ldr	r3, [pc, #52]	; (800a80c <std+0x60>)
 800a7d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a7da:	4b0d      	ldr	r3, [pc, #52]	; (800a810 <std+0x64>)
 800a7dc:	6323      	str	r3, [r4, #48]	; 0x30
 800a7de:	4b0d      	ldr	r3, [pc, #52]	; (800a814 <std+0x68>)
 800a7e0:	6224      	str	r4, [r4, #32]
 800a7e2:	429c      	cmp	r4, r3
 800a7e4:	d006      	beq.n	800a7f4 <std+0x48>
 800a7e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a7ea:	4294      	cmp	r4, r2
 800a7ec:	d002      	beq.n	800a7f4 <std+0x48>
 800a7ee:	33d0      	adds	r3, #208	; 0xd0
 800a7f0:	429c      	cmp	r4, r3
 800a7f2:	d105      	bne.n	800a800 <std+0x54>
 800a7f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a7f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7fc:	f000 b9d0 	b.w	800aba0 <__retarget_lock_init_recursive>
 800a800:	bd10      	pop	{r4, pc}
 800a802:	bf00      	nop
 800a804:	0800a971 	.word	0x0800a971
 800a808:	0800a993 	.word	0x0800a993
 800a80c:	0800a9cb 	.word	0x0800a9cb
 800a810:	0800a9ef 	.word	0x0800a9ef
 800a814:	20001b38 	.word	0x20001b38

0800a818 <stdio_exit_handler>:
 800a818:	4a02      	ldr	r2, [pc, #8]	; (800a824 <stdio_exit_handler+0xc>)
 800a81a:	4903      	ldr	r1, [pc, #12]	; (800a828 <stdio_exit_handler+0x10>)
 800a81c:	4803      	ldr	r0, [pc, #12]	; (800a82c <stdio_exit_handler+0x14>)
 800a81e:	f000 b869 	b.w	800a8f4 <_fwalk_sglue>
 800a822:	bf00      	nop
 800a824:	20000010 	.word	0x20000010
 800a828:	0800b4dd 	.word	0x0800b4dd
 800a82c:	2000001c 	.word	0x2000001c

0800a830 <cleanup_stdio>:
 800a830:	6841      	ldr	r1, [r0, #4]
 800a832:	4b0c      	ldr	r3, [pc, #48]	; (800a864 <cleanup_stdio+0x34>)
 800a834:	4299      	cmp	r1, r3
 800a836:	b510      	push	{r4, lr}
 800a838:	4604      	mov	r4, r0
 800a83a:	d001      	beq.n	800a840 <cleanup_stdio+0x10>
 800a83c:	f000 fe4e 	bl	800b4dc <_fflush_r>
 800a840:	68a1      	ldr	r1, [r4, #8]
 800a842:	4b09      	ldr	r3, [pc, #36]	; (800a868 <cleanup_stdio+0x38>)
 800a844:	4299      	cmp	r1, r3
 800a846:	d002      	beq.n	800a84e <cleanup_stdio+0x1e>
 800a848:	4620      	mov	r0, r4
 800a84a:	f000 fe47 	bl	800b4dc <_fflush_r>
 800a84e:	68e1      	ldr	r1, [r4, #12]
 800a850:	4b06      	ldr	r3, [pc, #24]	; (800a86c <cleanup_stdio+0x3c>)
 800a852:	4299      	cmp	r1, r3
 800a854:	d004      	beq.n	800a860 <cleanup_stdio+0x30>
 800a856:	4620      	mov	r0, r4
 800a858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a85c:	f000 be3e 	b.w	800b4dc <_fflush_r>
 800a860:	bd10      	pop	{r4, pc}
 800a862:	bf00      	nop
 800a864:	20001b38 	.word	0x20001b38
 800a868:	20001ba0 	.word	0x20001ba0
 800a86c:	20001c08 	.word	0x20001c08

0800a870 <global_stdio_init.part.0>:
 800a870:	b510      	push	{r4, lr}
 800a872:	4b0b      	ldr	r3, [pc, #44]	; (800a8a0 <global_stdio_init.part.0+0x30>)
 800a874:	4c0b      	ldr	r4, [pc, #44]	; (800a8a4 <global_stdio_init.part.0+0x34>)
 800a876:	4a0c      	ldr	r2, [pc, #48]	; (800a8a8 <global_stdio_init.part.0+0x38>)
 800a878:	601a      	str	r2, [r3, #0]
 800a87a:	4620      	mov	r0, r4
 800a87c:	2200      	movs	r2, #0
 800a87e:	2104      	movs	r1, #4
 800a880:	f7ff ff94 	bl	800a7ac <std>
 800a884:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a888:	2201      	movs	r2, #1
 800a88a:	2109      	movs	r1, #9
 800a88c:	f7ff ff8e 	bl	800a7ac <std>
 800a890:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a894:	2202      	movs	r2, #2
 800a896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a89a:	2112      	movs	r1, #18
 800a89c:	f7ff bf86 	b.w	800a7ac <std>
 800a8a0:	20001c70 	.word	0x20001c70
 800a8a4:	20001b38 	.word	0x20001b38
 800a8a8:	0800a819 	.word	0x0800a819

0800a8ac <__sfp_lock_acquire>:
 800a8ac:	4801      	ldr	r0, [pc, #4]	; (800a8b4 <__sfp_lock_acquire+0x8>)
 800a8ae:	f000 b978 	b.w	800aba2 <__retarget_lock_acquire_recursive>
 800a8b2:	bf00      	nop
 800a8b4:	20001c79 	.word	0x20001c79

0800a8b8 <__sfp_lock_release>:
 800a8b8:	4801      	ldr	r0, [pc, #4]	; (800a8c0 <__sfp_lock_release+0x8>)
 800a8ba:	f000 b973 	b.w	800aba4 <__retarget_lock_release_recursive>
 800a8be:	bf00      	nop
 800a8c0:	20001c79 	.word	0x20001c79

0800a8c4 <__sinit>:
 800a8c4:	b510      	push	{r4, lr}
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	f7ff fff0 	bl	800a8ac <__sfp_lock_acquire>
 800a8cc:	6a23      	ldr	r3, [r4, #32]
 800a8ce:	b11b      	cbz	r3, 800a8d8 <__sinit+0x14>
 800a8d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a8d4:	f7ff bff0 	b.w	800a8b8 <__sfp_lock_release>
 800a8d8:	4b04      	ldr	r3, [pc, #16]	; (800a8ec <__sinit+0x28>)
 800a8da:	6223      	str	r3, [r4, #32]
 800a8dc:	4b04      	ldr	r3, [pc, #16]	; (800a8f0 <__sinit+0x2c>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1f5      	bne.n	800a8d0 <__sinit+0xc>
 800a8e4:	f7ff ffc4 	bl	800a870 <global_stdio_init.part.0>
 800a8e8:	e7f2      	b.n	800a8d0 <__sinit+0xc>
 800a8ea:	bf00      	nop
 800a8ec:	0800a831 	.word	0x0800a831
 800a8f0:	20001c70 	.word	0x20001c70

0800a8f4 <_fwalk_sglue>:
 800a8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8f8:	4607      	mov	r7, r0
 800a8fa:	4688      	mov	r8, r1
 800a8fc:	4614      	mov	r4, r2
 800a8fe:	2600      	movs	r6, #0
 800a900:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a904:	f1b9 0901 	subs.w	r9, r9, #1
 800a908:	d505      	bpl.n	800a916 <_fwalk_sglue+0x22>
 800a90a:	6824      	ldr	r4, [r4, #0]
 800a90c:	2c00      	cmp	r4, #0
 800a90e:	d1f7      	bne.n	800a900 <_fwalk_sglue+0xc>
 800a910:	4630      	mov	r0, r6
 800a912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a916:	89ab      	ldrh	r3, [r5, #12]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d907      	bls.n	800a92c <_fwalk_sglue+0x38>
 800a91c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a920:	3301      	adds	r3, #1
 800a922:	d003      	beq.n	800a92c <_fwalk_sglue+0x38>
 800a924:	4629      	mov	r1, r5
 800a926:	4638      	mov	r0, r7
 800a928:	47c0      	blx	r8
 800a92a:	4306      	orrs	r6, r0
 800a92c:	3568      	adds	r5, #104	; 0x68
 800a92e:	e7e9      	b.n	800a904 <_fwalk_sglue+0x10>

0800a930 <siprintf>:
 800a930:	b40e      	push	{r1, r2, r3}
 800a932:	b500      	push	{lr}
 800a934:	b09c      	sub	sp, #112	; 0x70
 800a936:	ab1d      	add	r3, sp, #116	; 0x74
 800a938:	9002      	str	r0, [sp, #8]
 800a93a:	9006      	str	r0, [sp, #24]
 800a93c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a940:	4809      	ldr	r0, [pc, #36]	; (800a968 <siprintf+0x38>)
 800a942:	9107      	str	r1, [sp, #28]
 800a944:	9104      	str	r1, [sp, #16]
 800a946:	4909      	ldr	r1, [pc, #36]	; (800a96c <siprintf+0x3c>)
 800a948:	f853 2b04 	ldr.w	r2, [r3], #4
 800a94c:	9105      	str	r1, [sp, #20]
 800a94e:	6800      	ldr	r0, [r0, #0]
 800a950:	9301      	str	r3, [sp, #4]
 800a952:	a902      	add	r1, sp, #8
 800a954:	f000 faae 	bl	800aeb4 <_svfiprintf_r>
 800a958:	9b02      	ldr	r3, [sp, #8]
 800a95a:	2200      	movs	r2, #0
 800a95c:	701a      	strb	r2, [r3, #0]
 800a95e:	b01c      	add	sp, #112	; 0x70
 800a960:	f85d eb04 	ldr.w	lr, [sp], #4
 800a964:	b003      	add	sp, #12
 800a966:	4770      	bx	lr
 800a968:	20000068 	.word	0x20000068
 800a96c:	ffff0208 	.word	0xffff0208

0800a970 <__sread>:
 800a970:	b510      	push	{r4, lr}
 800a972:	460c      	mov	r4, r1
 800a974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a978:	f000 f8c4 	bl	800ab04 <_read_r>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	bfab      	itete	ge
 800a980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a982:	89a3      	ldrhlt	r3, [r4, #12]
 800a984:	181b      	addge	r3, r3, r0
 800a986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a98a:	bfac      	ite	ge
 800a98c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a98e:	81a3      	strhlt	r3, [r4, #12]
 800a990:	bd10      	pop	{r4, pc}

0800a992 <__swrite>:
 800a992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a996:	461f      	mov	r7, r3
 800a998:	898b      	ldrh	r3, [r1, #12]
 800a99a:	05db      	lsls	r3, r3, #23
 800a99c:	4605      	mov	r5, r0
 800a99e:	460c      	mov	r4, r1
 800a9a0:	4616      	mov	r6, r2
 800a9a2:	d505      	bpl.n	800a9b0 <__swrite+0x1e>
 800a9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f000 f898 	bl	800aae0 <_lseek_r>
 800a9b0:	89a3      	ldrh	r3, [r4, #12]
 800a9b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9ba:	81a3      	strh	r3, [r4, #12]
 800a9bc:	4632      	mov	r2, r6
 800a9be:	463b      	mov	r3, r7
 800a9c0:	4628      	mov	r0, r5
 800a9c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c6:	f000 b8af 	b.w	800ab28 <_write_r>

0800a9ca <__sseek>:
 800a9ca:	b510      	push	{r4, lr}
 800a9cc:	460c      	mov	r4, r1
 800a9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d2:	f000 f885 	bl	800aae0 <_lseek_r>
 800a9d6:	1c43      	adds	r3, r0, #1
 800a9d8:	89a3      	ldrh	r3, [r4, #12]
 800a9da:	bf15      	itete	ne
 800a9dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9e6:	81a3      	strheq	r3, [r4, #12]
 800a9e8:	bf18      	it	ne
 800a9ea:	81a3      	strhne	r3, [r4, #12]
 800a9ec:	bd10      	pop	{r4, pc}

0800a9ee <__sclose>:
 800a9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9f2:	f000 b865 	b.w	800aac0 <_close_r>

0800a9f6 <memset>:
 800a9f6:	4402      	add	r2, r0
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d100      	bne.n	800aa00 <memset+0xa>
 800a9fe:	4770      	bx	lr
 800aa00:	f803 1b01 	strb.w	r1, [r3], #1
 800aa04:	e7f9      	b.n	800a9fa <memset+0x4>
	...

0800aa08 <strtok>:
 800aa08:	4b16      	ldr	r3, [pc, #88]	; (800aa64 <strtok+0x5c>)
 800aa0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa0c:	681e      	ldr	r6, [r3, #0]
 800aa0e:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800aa10:	4605      	mov	r5, r0
 800aa12:	b9fc      	cbnz	r4, 800aa54 <strtok+0x4c>
 800aa14:	2050      	movs	r0, #80	; 0x50
 800aa16:	9101      	str	r1, [sp, #4]
 800aa18:	f000 f93e 	bl	800ac98 <malloc>
 800aa1c:	9901      	ldr	r1, [sp, #4]
 800aa1e:	6470      	str	r0, [r6, #68]	; 0x44
 800aa20:	4602      	mov	r2, r0
 800aa22:	b920      	cbnz	r0, 800aa2e <strtok+0x26>
 800aa24:	4b10      	ldr	r3, [pc, #64]	; (800aa68 <strtok+0x60>)
 800aa26:	4811      	ldr	r0, [pc, #68]	; (800aa6c <strtok+0x64>)
 800aa28:	215b      	movs	r1, #91	; 0x5b
 800aa2a:	f000 f8cb 	bl	800abc4 <__assert_func>
 800aa2e:	e9c0 4400 	strd	r4, r4, [r0]
 800aa32:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800aa36:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800aa3a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800aa3e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800aa42:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800aa46:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800aa4a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800aa4e:	6184      	str	r4, [r0, #24]
 800aa50:	7704      	strb	r4, [r0, #28]
 800aa52:	6244      	str	r4, [r0, #36]	; 0x24
 800aa54:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800aa56:	2301      	movs	r3, #1
 800aa58:	4628      	mov	r0, r5
 800aa5a:	b002      	add	sp, #8
 800aa5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa60:	f000 b806 	b.w	800aa70 <__strtok_r>
 800aa64:	20000068 	.word	0x20000068
 800aa68:	0800bda5 	.word	0x0800bda5
 800aa6c:	0800bdbc 	.word	0x0800bdbc

0800aa70 <__strtok_r>:
 800aa70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa72:	b908      	cbnz	r0, 800aa78 <__strtok_r+0x8>
 800aa74:	6810      	ldr	r0, [r2, #0]
 800aa76:	b188      	cbz	r0, 800aa9c <__strtok_r+0x2c>
 800aa78:	4604      	mov	r4, r0
 800aa7a:	4620      	mov	r0, r4
 800aa7c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800aa80:	460f      	mov	r7, r1
 800aa82:	f817 6b01 	ldrb.w	r6, [r7], #1
 800aa86:	b91e      	cbnz	r6, 800aa90 <__strtok_r+0x20>
 800aa88:	b965      	cbnz	r5, 800aaa4 <__strtok_r+0x34>
 800aa8a:	6015      	str	r5, [r2, #0]
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	e005      	b.n	800aa9c <__strtok_r+0x2c>
 800aa90:	42b5      	cmp	r5, r6
 800aa92:	d1f6      	bne.n	800aa82 <__strtok_r+0x12>
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d1f0      	bne.n	800aa7a <__strtok_r+0xa>
 800aa98:	6014      	str	r4, [r2, #0]
 800aa9a:	7003      	strb	r3, [r0, #0]
 800aa9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa9e:	461c      	mov	r4, r3
 800aaa0:	e00c      	b.n	800aabc <__strtok_r+0x4c>
 800aaa2:	b915      	cbnz	r5, 800aaaa <__strtok_r+0x3a>
 800aaa4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aaa8:	460e      	mov	r6, r1
 800aaaa:	f816 5b01 	ldrb.w	r5, [r6], #1
 800aaae:	42ab      	cmp	r3, r5
 800aab0:	d1f7      	bne.n	800aaa2 <__strtok_r+0x32>
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d0f3      	beq.n	800aa9e <__strtok_r+0x2e>
 800aab6:	2300      	movs	r3, #0
 800aab8:	f804 3c01 	strb.w	r3, [r4, #-1]
 800aabc:	6014      	str	r4, [r2, #0]
 800aabe:	e7ed      	b.n	800aa9c <__strtok_r+0x2c>

0800aac0 <_close_r>:
 800aac0:	b538      	push	{r3, r4, r5, lr}
 800aac2:	4d06      	ldr	r5, [pc, #24]	; (800aadc <_close_r+0x1c>)
 800aac4:	2300      	movs	r3, #0
 800aac6:	4604      	mov	r4, r0
 800aac8:	4608      	mov	r0, r1
 800aaca:	602b      	str	r3, [r5, #0]
 800aacc:	f7f7 f92e 	bl	8001d2c <_close>
 800aad0:	1c43      	adds	r3, r0, #1
 800aad2:	d102      	bne.n	800aada <_close_r+0x1a>
 800aad4:	682b      	ldr	r3, [r5, #0]
 800aad6:	b103      	cbz	r3, 800aada <_close_r+0x1a>
 800aad8:	6023      	str	r3, [r4, #0]
 800aada:	bd38      	pop	{r3, r4, r5, pc}
 800aadc:	20001c74 	.word	0x20001c74

0800aae0 <_lseek_r>:
 800aae0:	b538      	push	{r3, r4, r5, lr}
 800aae2:	4d07      	ldr	r5, [pc, #28]	; (800ab00 <_lseek_r+0x20>)
 800aae4:	4604      	mov	r4, r0
 800aae6:	4608      	mov	r0, r1
 800aae8:	4611      	mov	r1, r2
 800aaea:	2200      	movs	r2, #0
 800aaec:	602a      	str	r2, [r5, #0]
 800aaee:	461a      	mov	r2, r3
 800aaf0:	f7f7 f943 	bl	8001d7a <_lseek>
 800aaf4:	1c43      	adds	r3, r0, #1
 800aaf6:	d102      	bne.n	800aafe <_lseek_r+0x1e>
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	b103      	cbz	r3, 800aafe <_lseek_r+0x1e>
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
 800ab00:	20001c74 	.word	0x20001c74

0800ab04 <_read_r>:
 800ab04:	b538      	push	{r3, r4, r5, lr}
 800ab06:	4d07      	ldr	r5, [pc, #28]	; (800ab24 <_read_r+0x20>)
 800ab08:	4604      	mov	r4, r0
 800ab0a:	4608      	mov	r0, r1
 800ab0c:	4611      	mov	r1, r2
 800ab0e:	2200      	movs	r2, #0
 800ab10:	602a      	str	r2, [r5, #0]
 800ab12:	461a      	mov	r2, r3
 800ab14:	f7f7 f8d1 	bl	8001cba <_read>
 800ab18:	1c43      	adds	r3, r0, #1
 800ab1a:	d102      	bne.n	800ab22 <_read_r+0x1e>
 800ab1c:	682b      	ldr	r3, [r5, #0]
 800ab1e:	b103      	cbz	r3, 800ab22 <_read_r+0x1e>
 800ab20:	6023      	str	r3, [r4, #0]
 800ab22:	bd38      	pop	{r3, r4, r5, pc}
 800ab24:	20001c74 	.word	0x20001c74

0800ab28 <_write_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	4d07      	ldr	r5, [pc, #28]	; (800ab48 <_write_r+0x20>)
 800ab2c:	4604      	mov	r4, r0
 800ab2e:	4608      	mov	r0, r1
 800ab30:	4611      	mov	r1, r2
 800ab32:	2200      	movs	r2, #0
 800ab34:	602a      	str	r2, [r5, #0]
 800ab36:	461a      	mov	r2, r3
 800ab38:	f7f7 f8dc 	bl	8001cf4 <_write>
 800ab3c:	1c43      	adds	r3, r0, #1
 800ab3e:	d102      	bne.n	800ab46 <_write_r+0x1e>
 800ab40:	682b      	ldr	r3, [r5, #0]
 800ab42:	b103      	cbz	r3, 800ab46 <_write_r+0x1e>
 800ab44:	6023      	str	r3, [r4, #0]
 800ab46:	bd38      	pop	{r3, r4, r5, pc}
 800ab48:	20001c74 	.word	0x20001c74

0800ab4c <__errno>:
 800ab4c:	4b01      	ldr	r3, [pc, #4]	; (800ab54 <__errno+0x8>)
 800ab4e:	6818      	ldr	r0, [r3, #0]
 800ab50:	4770      	bx	lr
 800ab52:	bf00      	nop
 800ab54:	20000068 	.word	0x20000068

0800ab58 <__libc_init_array>:
 800ab58:	b570      	push	{r4, r5, r6, lr}
 800ab5a:	4d0d      	ldr	r5, [pc, #52]	; (800ab90 <__libc_init_array+0x38>)
 800ab5c:	4c0d      	ldr	r4, [pc, #52]	; (800ab94 <__libc_init_array+0x3c>)
 800ab5e:	1b64      	subs	r4, r4, r5
 800ab60:	10a4      	asrs	r4, r4, #2
 800ab62:	2600      	movs	r6, #0
 800ab64:	42a6      	cmp	r6, r4
 800ab66:	d109      	bne.n	800ab7c <__libc_init_array+0x24>
 800ab68:	4d0b      	ldr	r5, [pc, #44]	; (800ab98 <__libc_init_array+0x40>)
 800ab6a:	4c0c      	ldr	r4, [pc, #48]	; (800ab9c <__libc_init_array+0x44>)
 800ab6c:	f000 fffa 	bl	800bb64 <_init>
 800ab70:	1b64      	subs	r4, r4, r5
 800ab72:	10a4      	asrs	r4, r4, #2
 800ab74:	2600      	movs	r6, #0
 800ab76:	42a6      	cmp	r6, r4
 800ab78:	d105      	bne.n	800ab86 <__libc_init_array+0x2e>
 800ab7a:	bd70      	pop	{r4, r5, r6, pc}
 800ab7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab80:	4798      	blx	r3
 800ab82:	3601      	adds	r6, #1
 800ab84:	e7ee      	b.n	800ab64 <__libc_init_array+0xc>
 800ab86:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab8a:	4798      	blx	r3
 800ab8c:	3601      	adds	r6, #1
 800ab8e:	e7f2      	b.n	800ab76 <__libc_init_array+0x1e>
 800ab90:	0800be90 	.word	0x0800be90
 800ab94:	0800be90 	.word	0x0800be90
 800ab98:	0800be90 	.word	0x0800be90
 800ab9c:	0800be94 	.word	0x0800be94

0800aba0 <__retarget_lock_init_recursive>:
 800aba0:	4770      	bx	lr

0800aba2 <__retarget_lock_acquire_recursive>:
 800aba2:	4770      	bx	lr

0800aba4 <__retarget_lock_release_recursive>:
 800aba4:	4770      	bx	lr

0800aba6 <memcpy>:
 800aba6:	440a      	add	r2, r1
 800aba8:	4291      	cmp	r1, r2
 800abaa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800abae:	d100      	bne.n	800abb2 <memcpy+0xc>
 800abb0:	4770      	bx	lr
 800abb2:	b510      	push	{r4, lr}
 800abb4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800abb8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800abbc:	4291      	cmp	r1, r2
 800abbe:	d1f9      	bne.n	800abb4 <memcpy+0xe>
 800abc0:	bd10      	pop	{r4, pc}
	...

0800abc4 <__assert_func>:
 800abc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abc6:	4614      	mov	r4, r2
 800abc8:	461a      	mov	r2, r3
 800abca:	4b09      	ldr	r3, [pc, #36]	; (800abf0 <__assert_func+0x2c>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	4605      	mov	r5, r0
 800abd0:	68d8      	ldr	r0, [r3, #12]
 800abd2:	b14c      	cbz	r4, 800abe8 <__assert_func+0x24>
 800abd4:	4b07      	ldr	r3, [pc, #28]	; (800abf4 <__assert_func+0x30>)
 800abd6:	9100      	str	r1, [sp, #0]
 800abd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abdc:	4906      	ldr	r1, [pc, #24]	; (800abf8 <__assert_func+0x34>)
 800abde:	462b      	mov	r3, r5
 800abe0:	f000 fca4 	bl	800b52c <fiprintf>
 800abe4:	f000 fcde 	bl	800b5a4 <abort>
 800abe8:	4b04      	ldr	r3, [pc, #16]	; (800abfc <__assert_func+0x38>)
 800abea:	461c      	mov	r4, r3
 800abec:	e7f3      	b.n	800abd6 <__assert_func+0x12>
 800abee:	bf00      	nop
 800abf0:	20000068 	.word	0x20000068
 800abf4:	0800be16 	.word	0x0800be16
 800abf8:	0800be23 	.word	0x0800be23
 800abfc:	0800be51 	.word	0x0800be51

0800ac00 <_free_r>:
 800ac00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac02:	2900      	cmp	r1, #0
 800ac04:	d044      	beq.n	800ac90 <_free_r+0x90>
 800ac06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac0a:	9001      	str	r0, [sp, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	f1a1 0404 	sub.w	r4, r1, #4
 800ac12:	bfb8      	it	lt
 800ac14:	18e4      	addlt	r4, r4, r3
 800ac16:	f000 f8e7 	bl	800ade8 <__malloc_lock>
 800ac1a:	4a1e      	ldr	r2, [pc, #120]	; (800ac94 <_free_r+0x94>)
 800ac1c:	9801      	ldr	r0, [sp, #4]
 800ac1e:	6813      	ldr	r3, [r2, #0]
 800ac20:	b933      	cbnz	r3, 800ac30 <_free_r+0x30>
 800ac22:	6063      	str	r3, [r4, #4]
 800ac24:	6014      	str	r4, [r2, #0]
 800ac26:	b003      	add	sp, #12
 800ac28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac2c:	f000 b8e2 	b.w	800adf4 <__malloc_unlock>
 800ac30:	42a3      	cmp	r3, r4
 800ac32:	d908      	bls.n	800ac46 <_free_r+0x46>
 800ac34:	6825      	ldr	r5, [r4, #0]
 800ac36:	1961      	adds	r1, r4, r5
 800ac38:	428b      	cmp	r3, r1
 800ac3a:	bf01      	itttt	eq
 800ac3c:	6819      	ldreq	r1, [r3, #0]
 800ac3e:	685b      	ldreq	r3, [r3, #4]
 800ac40:	1949      	addeq	r1, r1, r5
 800ac42:	6021      	streq	r1, [r4, #0]
 800ac44:	e7ed      	b.n	800ac22 <_free_r+0x22>
 800ac46:	461a      	mov	r2, r3
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	b10b      	cbz	r3, 800ac50 <_free_r+0x50>
 800ac4c:	42a3      	cmp	r3, r4
 800ac4e:	d9fa      	bls.n	800ac46 <_free_r+0x46>
 800ac50:	6811      	ldr	r1, [r2, #0]
 800ac52:	1855      	adds	r5, r2, r1
 800ac54:	42a5      	cmp	r5, r4
 800ac56:	d10b      	bne.n	800ac70 <_free_r+0x70>
 800ac58:	6824      	ldr	r4, [r4, #0]
 800ac5a:	4421      	add	r1, r4
 800ac5c:	1854      	adds	r4, r2, r1
 800ac5e:	42a3      	cmp	r3, r4
 800ac60:	6011      	str	r1, [r2, #0]
 800ac62:	d1e0      	bne.n	800ac26 <_free_r+0x26>
 800ac64:	681c      	ldr	r4, [r3, #0]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	6053      	str	r3, [r2, #4]
 800ac6a:	440c      	add	r4, r1
 800ac6c:	6014      	str	r4, [r2, #0]
 800ac6e:	e7da      	b.n	800ac26 <_free_r+0x26>
 800ac70:	d902      	bls.n	800ac78 <_free_r+0x78>
 800ac72:	230c      	movs	r3, #12
 800ac74:	6003      	str	r3, [r0, #0]
 800ac76:	e7d6      	b.n	800ac26 <_free_r+0x26>
 800ac78:	6825      	ldr	r5, [r4, #0]
 800ac7a:	1961      	adds	r1, r4, r5
 800ac7c:	428b      	cmp	r3, r1
 800ac7e:	bf04      	itt	eq
 800ac80:	6819      	ldreq	r1, [r3, #0]
 800ac82:	685b      	ldreq	r3, [r3, #4]
 800ac84:	6063      	str	r3, [r4, #4]
 800ac86:	bf04      	itt	eq
 800ac88:	1949      	addeq	r1, r1, r5
 800ac8a:	6021      	streq	r1, [r4, #0]
 800ac8c:	6054      	str	r4, [r2, #4]
 800ac8e:	e7ca      	b.n	800ac26 <_free_r+0x26>
 800ac90:	b003      	add	sp, #12
 800ac92:	bd30      	pop	{r4, r5, pc}
 800ac94:	20001c7c 	.word	0x20001c7c

0800ac98 <malloc>:
 800ac98:	4b02      	ldr	r3, [pc, #8]	; (800aca4 <malloc+0xc>)
 800ac9a:	4601      	mov	r1, r0
 800ac9c:	6818      	ldr	r0, [r3, #0]
 800ac9e:	f000 b823 	b.w	800ace8 <_malloc_r>
 800aca2:	bf00      	nop
 800aca4:	20000068 	.word	0x20000068

0800aca8 <sbrk_aligned>:
 800aca8:	b570      	push	{r4, r5, r6, lr}
 800acaa:	4e0e      	ldr	r6, [pc, #56]	; (800ace4 <sbrk_aligned+0x3c>)
 800acac:	460c      	mov	r4, r1
 800acae:	6831      	ldr	r1, [r6, #0]
 800acb0:	4605      	mov	r5, r0
 800acb2:	b911      	cbnz	r1, 800acba <sbrk_aligned+0x12>
 800acb4:	f000 fc66 	bl	800b584 <_sbrk_r>
 800acb8:	6030      	str	r0, [r6, #0]
 800acba:	4621      	mov	r1, r4
 800acbc:	4628      	mov	r0, r5
 800acbe:	f000 fc61 	bl	800b584 <_sbrk_r>
 800acc2:	1c43      	adds	r3, r0, #1
 800acc4:	d00a      	beq.n	800acdc <sbrk_aligned+0x34>
 800acc6:	1cc4      	adds	r4, r0, #3
 800acc8:	f024 0403 	bic.w	r4, r4, #3
 800accc:	42a0      	cmp	r0, r4
 800acce:	d007      	beq.n	800ace0 <sbrk_aligned+0x38>
 800acd0:	1a21      	subs	r1, r4, r0
 800acd2:	4628      	mov	r0, r5
 800acd4:	f000 fc56 	bl	800b584 <_sbrk_r>
 800acd8:	3001      	adds	r0, #1
 800acda:	d101      	bne.n	800ace0 <sbrk_aligned+0x38>
 800acdc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ace0:	4620      	mov	r0, r4
 800ace2:	bd70      	pop	{r4, r5, r6, pc}
 800ace4:	20001c80 	.word	0x20001c80

0800ace8 <_malloc_r>:
 800ace8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acec:	1ccd      	adds	r5, r1, #3
 800acee:	f025 0503 	bic.w	r5, r5, #3
 800acf2:	3508      	adds	r5, #8
 800acf4:	2d0c      	cmp	r5, #12
 800acf6:	bf38      	it	cc
 800acf8:	250c      	movcc	r5, #12
 800acfa:	2d00      	cmp	r5, #0
 800acfc:	4607      	mov	r7, r0
 800acfe:	db01      	blt.n	800ad04 <_malloc_r+0x1c>
 800ad00:	42a9      	cmp	r1, r5
 800ad02:	d905      	bls.n	800ad10 <_malloc_r+0x28>
 800ad04:	230c      	movs	r3, #12
 800ad06:	603b      	str	r3, [r7, #0]
 800ad08:	2600      	movs	r6, #0
 800ad0a:	4630      	mov	r0, r6
 800ad0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ade4 <_malloc_r+0xfc>
 800ad14:	f000 f868 	bl	800ade8 <__malloc_lock>
 800ad18:	f8d8 3000 	ldr.w	r3, [r8]
 800ad1c:	461c      	mov	r4, r3
 800ad1e:	bb5c      	cbnz	r4, 800ad78 <_malloc_r+0x90>
 800ad20:	4629      	mov	r1, r5
 800ad22:	4638      	mov	r0, r7
 800ad24:	f7ff ffc0 	bl	800aca8 <sbrk_aligned>
 800ad28:	1c43      	adds	r3, r0, #1
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	d155      	bne.n	800adda <_malloc_r+0xf2>
 800ad2e:	f8d8 4000 	ldr.w	r4, [r8]
 800ad32:	4626      	mov	r6, r4
 800ad34:	2e00      	cmp	r6, #0
 800ad36:	d145      	bne.n	800adc4 <_malloc_r+0xdc>
 800ad38:	2c00      	cmp	r4, #0
 800ad3a:	d048      	beq.n	800adce <_malloc_r+0xe6>
 800ad3c:	6823      	ldr	r3, [r4, #0]
 800ad3e:	4631      	mov	r1, r6
 800ad40:	4638      	mov	r0, r7
 800ad42:	eb04 0903 	add.w	r9, r4, r3
 800ad46:	f000 fc1d 	bl	800b584 <_sbrk_r>
 800ad4a:	4581      	cmp	r9, r0
 800ad4c:	d13f      	bne.n	800adce <_malloc_r+0xe6>
 800ad4e:	6821      	ldr	r1, [r4, #0]
 800ad50:	1a6d      	subs	r5, r5, r1
 800ad52:	4629      	mov	r1, r5
 800ad54:	4638      	mov	r0, r7
 800ad56:	f7ff ffa7 	bl	800aca8 <sbrk_aligned>
 800ad5a:	3001      	adds	r0, #1
 800ad5c:	d037      	beq.n	800adce <_malloc_r+0xe6>
 800ad5e:	6823      	ldr	r3, [r4, #0]
 800ad60:	442b      	add	r3, r5
 800ad62:	6023      	str	r3, [r4, #0]
 800ad64:	f8d8 3000 	ldr.w	r3, [r8]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d038      	beq.n	800adde <_malloc_r+0xf6>
 800ad6c:	685a      	ldr	r2, [r3, #4]
 800ad6e:	42a2      	cmp	r2, r4
 800ad70:	d12b      	bne.n	800adca <_malloc_r+0xe2>
 800ad72:	2200      	movs	r2, #0
 800ad74:	605a      	str	r2, [r3, #4]
 800ad76:	e00f      	b.n	800ad98 <_malloc_r+0xb0>
 800ad78:	6822      	ldr	r2, [r4, #0]
 800ad7a:	1b52      	subs	r2, r2, r5
 800ad7c:	d41f      	bmi.n	800adbe <_malloc_r+0xd6>
 800ad7e:	2a0b      	cmp	r2, #11
 800ad80:	d917      	bls.n	800adb2 <_malloc_r+0xca>
 800ad82:	1961      	adds	r1, r4, r5
 800ad84:	42a3      	cmp	r3, r4
 800ad86:	6025      	str	r5, [r4, #0]
 800ad88:	bf18      	it	ne
 800ad8a:	6059      	strne	r1, [r3, #4]
 800ad8c:	6863      	ldr	r3, [r4, #4]
 800ad8e:	bf08      	it	eq
 800ad90:	f8c8 1000 	streq.w	r1, [r8]
 800ad94:	5162      	str	r2, [r4, r5]
 800ad96:	604b      	str	r3, [r1, #4]
 800ad98:	4638      	mov	r0, r7
 800ad9a:	f104 060b 	add.w	r6, r4, #11
 800ad9e:	f000 f829 	bl	800adf4 <__malloc_unlock>
 800ada2:	f026 0607 	bic.w	r6, r6, #7
 800ada6:	1d23      	adds	r3, r4, #4
 800ada8:	1af2      	subs	r2, r6, r3
 800adaa:	d0ae      	beq.n	800ad0a <_malloc_r+0x22>
 800adac:	1b9b      	subs	r3, r3, r6
 800adae:	50a3      	str	r3, [r4, r2]
 800adb0:	e7ab      	b.n	800ad0a <_malloc_r+0x22>
 800adb2:	42a3      	cmp	r3, r4
 800adb4:	6862      	ldr	r2, [r4, #4]
 800adb6:	d1dd      	bne.n	800ad74 <_malloc_r+0x8c>
 800adb8:	f8c8 2000 	str.w	r2, [r8]
 800adbc:	e7ec      	b.n	800ad98 <_malloc_r+0xb0>
 800adbe:	4623      	mov	r3, r4
 800adc0:	6864      	ldr	r4, [r4, #4]
 800adc2:	e7ac      	b.n	800ad1e <_malloc_r+0x36>
 800adc4:	4634      	mov	r4, r6
 800adc6:	6876      	ldr	r6, [r6, #4]
 800adc8:	e7b4      	b.n	800ad34 <_malloc_r+0x4c>
 800adca:	4613      	mov	r3, r2
 800adcc:	e7cc      	b.n	800ad68 <_malloc_r+0x80>
 800adce:	230c      	movs	r3, #12
 800add0:	603b      	str	r3, [r7, #0]
 800add2:	4638      	mov	r0, r7
 800add4:	f000 f80e 	bl	800adf4 <__malloc_unlock>
 800add8:	e797      	b.n	800ad0a <_malloc_r+0x22>
 800adda:	6025      	str	r5, [r4, #0]
 800addc:	e7dc      	b.n	800ad98 <_malloc_r+0xb0>
 800adde:	605b      	str	r3, [r3, #4]
 800ade0:	deff      	udf	#255	; 0xff
 800ade2:	bf00      	nop
 800ade4:	20001c7c 	.word	0x20001c7c

0800ade8 <__malloc_lock>:
 800ade8:	4801      	ldr	r0, [pc, #4]	; (800adf0 <__malloc_lock+0x8>)
 800adea:	f7ff beda 	b.w	800aba2 <__retarget_lock_acquire_recursive>
 800adee:	bf00      	nop
 800adf0:	20001c78 	.word	0x20001c78

0800adf4 <__malloc_unlock>:
 800adf4:	4801      	ldr	r0, [pc, #4]	; (800adfc <__malloc_unlock+0x8>)
 800adf6:	f7ff bed5 	b.w	800aba4 <__retarget_lock_release_recursive>
 800adfa:	bf00      	nop
 800adfc:	20001c78 	.word	0x20001c78

0800ae00 <__ssputs_r>:
 800ae00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae04:	688e      	ldr	r6, [r1, #8]
 800ae06:	461f      	mov	r7, r3
 800ae08:	42be      	cmp	r6, r7
 800ae0a:	680b      	ldr	r3, [r1, #0]
 800ae0c:	4682      	mov	sl, r0
 800ae0e:	460c      	mov	r4, r1
 800ae10:	4690      	mov	r8, r2
 800ae12:	d82c      	bhi.n	800ae6e <__ssputs_r+0x6e>
 800ae14:	898a      	ldrh	r2, [r1, #12]
 800ae16:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ae1a:	d026      	beq.n	800ae6a <__ssputs_r+0x6a>
 800ae1c:	6965      	ldr	r5, [r4, #20]
 800ae1e:	6909      	ldr	r1, [r1, #16]
 800ae20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ae24:	eba3 0901 	sub.w	r9, r3, r1
 800ae28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ae2c:	1c7b      	adds	r3, r7, #1
 800ae2e:	444b      	add	r3, r9
 800ae30:	106d      	asrs	r5, r5, #1
 800ae32:	429d      	cmp	r5, r3
 800ae34:	bf38      	it	cc
 800ae36:	461d      	movcc	r5, r3
 800ae38:	0553      	lsls	r3, r2, #21
 800ae3a:	d527      	bpl.n	800ae8c <__ssputs_r+0x8c>
 800ae3c:	4629      	mov	r1, r5
 800ae3e:	f7ff ff53 	bl	800ace8 <_malloc_r>
 800ae42:	4606      	mov	r6, r0
 800ae44:	b360      	cbz	r0, 800aea0 <__ssputs_r+0xa0>
 800ae46:	6921      	ldr	r1, [r4, #16]
 800ae48:	464a      	mov	r2, r9
 800ae4a:	f7ff feac 	bl	800aba6 <memcpy>
 800ae4e:	89a3      	ldrh	r3, [r4, #12]
 800ae50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ae54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae58:	81a3      	strh	r3, [r4, #12]
 800ae5a:	6126      	str	r6, [r4, #16]
 800ae5c:	6165      	str	r5, [r4, #20]
 800ae5e:	444e      	add	r6, r9
 800ae60:	eba5 0509 	sub.w	r5, r5, r9
 800ae64:	6026      	str	r6, [r4, #0]
 800ae66:	60a5      	str	r5, [r4, #8]
 800ae68:	463e      	mov	r6, r7
 800ae6a:	42be      	cmp	r6, r7
 800ae6c:	d900      	bls.n	800ae70 <__ssputs_r+0x70>
 800ae6e:	463e      	mov	r6, r7
 800ae70:	6820      	ldr	r0, [r4, #0]
 800ae72:	4632      	mov	r2, r6
 800ae74:	4641      	mov	r1, r8
 800ae76:	f000 fb6b 	bl	800b550 <memmove>
 800ae7a:	68a3      	ldr	r3, [r4, #8]
 800ae7c:	1b9b      	subs	r3, r3, r6
 800ae7e:	60a3      	str	r3, [r4, #8]
 800ae80:	6823      	ldr	r3, [r4, #0]
 800ae82:	4433      	add	r3, r6
 800ae84:	6023      	str	r3, [r4, #0]
 800ae86:	2000      	movs	r0, #0
 800ae88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae8c:	462a      	mov	r2, r5
 800ae8e:	f000 fb90 	bl	800b5b2 <_realloc_r>
 800ae92:	4606      	mov	r6, r0
 800ae94:	2800      	cmp	r0, #0
 800ae96:	d1e0      	bne.n	800ae5a <__ssputs_r+0x5a>
 800ae98:	6921      	ldr	r1, [r4, #16]
 800ae9a:	4650      	mov	r0, sl
 800ae9c:	f7ff feb0 	bl	800ac00 <_free_r>
 800aea0:	230c      	movs	r3, #12
 800aea2:	f8ca 3000 	str.w	r3, [sl]
 800aea6:	89a3      	ldrh	r3, [r4, #12]
 800aea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeac:	81a3      	strh	r3, [r4, #12]
 800aeae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aeb2:	e7e9      	b.n	800ae88 <__ssputs_r+0x88>

0800aeb4 <_svfiprintf_r>:
 800aeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb8:	4698      	mov	r8, r3
 800aeba:	898b      	ldrh	r3, [r1, #12]
 800aebc:	061b      	lsls	r3, r3, #24
 800aebe:	b09d      	sub	sp, #116	; 0x74
 800aec0:	4607      	mov	r7, r0
 800aec2:	460d      	mov	r5, r1
 800aec4:	4614      	mov	r4, r2
 800aec6:	d50e      	bpl.n	800aee6 <_svfiprintf_r+0x32>
 800aec8:	690b      	ldr	r3, [r1, #16]
 800aeca:	b963      	cbnz	r3, 800aee6 <_svfiprintf_r+0x32>
 800aecc:	2140      	movs	r1, #64	; 0x40
 800aece:	f7ff ff0b 	bl	800ace8 <_malloc_r>
 800aed2:	6028      	str	r0, [r5, #0]
 800aed4:	6128      	str	r0, [r5, #16]
 800aed6:	b920      	cbnz	r0, 800aee2 <_svfiprintf_r+0x2e>
 800aed8:	230c      	movs	r3, #12
 800aeda:	603b      	str	r3, [r7, #0]
 800aedc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aee0:	e0d0      	b.n	800b084 <_svfiprintf_r+0x1d0>
 800aee2:	2340      	movs	r3, #64	; 0x40
 800aee4:	616b      	str	r3, [r5, #20]
 800aee6:	2300      	movs	r3, #0
 800aee8:	9309      	str	r3, [sp, #36]	; 0x24
 800aeea:	2320      	movs	r3, #32
 800aeec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aef0:	f8cd 800c 	str.w	r8, [sp, #12]
 800aef4:	2330      	movs	r3, #48	; 0x30
 800aef6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b09c <_svfiprintf_r+0x1e8>
 800aefa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aefe:	f04f 0901 	mov.w	r9, #1
 800af02:	4623      	mov	r3, r4
 800af04:	469a      	mov	sl, r3
 800af06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af0a:	b10a      	cbz	r2, 800af10 <_svfiprintf_r+0x5c>
 800af0c:	2a25      	cmp	r2, #37	; 0x25
 800af0e:	d1f9      	bne.n	800af04 <_svfiprintf_r+0x50>
 800af10:	ebba 0b04 	subs.w	fp, sl, r4
 800af14:	d00b      	beq.n	800af2e <_svfiprintf_r+0x7a>
 800af16:	465b      	mov	r3, fp
 800af18:	4622      	mov	r2, r4
 800af1a:	4629      	mov	r1, r5
 800af1c:	4638      	mov	r0, r7
 800af1e:	f7ff ff6f 	bl	800ae00 <__ssputs_r>
 800af22:	3001      	adds	r0, #1
 800af24:	f000 80a9 	beq.w	800b07a <_svfiprintf_r+0x1c6>
 800af28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af2a:	445a      	add	r2, fp
 800af2c:	9209      	str	r2, [sp, #36]	; 0x24
 800af2e:	f89a 3000 	ldrb.w	r3, [sl]
 800af32:	2b00      	cmp	r3, #0
 800af34:	f000 80a1 	beq.w	800b07a <_svfiprintf_r+0x1c6>
 800af38:	2300      	movs	r3, #0
 800af3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af42:	f10a 0a01 	add.w	sl, sl, #1
 800af46:	9304      	str	r3, [sp, #16]
 800af48:	9307      	str	r3, [sp, #28]
 800af4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af4e:	931a      	str	r3, [sp, #104]	; 0x68
 800af50:	4654      	mov	r4, sl
 800af52:	2205      	movs	r2, #5
 800af54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af58:	4850      	ldr	r0, [pc, #320]	; (800b09c <_svfiprintf_r+0x1e8>)
 800af5a:	f7f5 f951 	bl	8000200 <memchr>
 800af5e:	9a04      	ldr	r2, [sp, #16]
 800af60:	b9d8      	cbnz	r0, 800af9a <_svfiprintf_r+0xe6>
 800af62:	06d0      	lsls	r0, r2, #27
 800af64:	bf44      	itt	mi
 800af66:	2320      	movmi	r3, #32
 800af68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af6c:	0711      	lsls	r1, r2, #28
 800af6e:	bf44      	itt	mi
 800af70:	232b      	movmi	r3, #43	; 0x2b
 800af72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af76:	f89a 3000 	ldrb.w	r3, [sl]
 800af7a:	2b2a      	cmp	r3, #42	; 0x2a
 800af7c:	d015      	beq.n	800afaa <_svfiprintf_r+0xf6>
 800af7e:	9a07      	ldr	r2, [sp, #28]
 800af80:	4654      	mov	r4, sl
 800af82:	2000      	movs	r0, #0
 800af84:	f04f 0c0a 	mov.w	ip, #10
 800af88:	4621      	mov	r1, r4
 800af8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af8e:	3b30      	subs	r3, #48	; 0x30
 800af90:	2b09      	cmp	r3, #9
 800af92:	d94d      	bls.n	800b030 <_svfiprintf_r+0x17c>
 800af94:	b1b0      	cbz	r0, 800afc4 <_svfiprintf_r+0x110>
 800af96:	9207      	str	r2, [sp, #28]
 800af98:	e014      	b.n	800afc4 <_svfiprintf_r+0x110>
 800af9a:	eba0 0308 	sub.w	r3, r0, r8
 800af9e:	fa09 f303 	lsl.w	r3, r9, r3
 800afa2:	4313      	orrs	r3, r2
 800afa4:	9304      	str	r3, [sp, #16]
 800afa6:	46a2      	mov	sl, r4
 800afa8:	e7d2      	b.n	800af50 <_svfiprintf_r+0x9c>
 800afaa:	9b03      	ldr	r3, [sp, #12]
 800afac:	1d19      	adds	r1, r3, #4
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	9103      	str	r1, [sp, #12]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	bfbb      	ittet	lt
 800afb6:	425b      	neglt	r3, r3
 800afb8:	f042 0202 	orrlt.w	r2, r2, #2
 800afbc:	9307      	strge	r3, [sp, #28]
 800afbe:	9307      	strlt	r3, [sp, #28]
 800afc0:	bfb8      	it	lt
 800afc2:	9204      	strlt	r2, [sp, #16]
 800afc4:	7823      	ldrb	r3, [r4, #0]
 800afc6:	2b2e      	cmp	r3, #46	; 0x2e
 800afc8:	d10c      	bne.n	800afe4 <_svfiprintf_r+0x130>
 800afca:	7863      	ldrb	r3, [r4, #1]
 800afcc:	2b2a      	cmp	r3, #42	; 0x2a
 800afce:	d134      	bne.n	800b03a <_svfiprintf_r+0x186>
 800afd0:	9b03      	ldr	r3, [sp, #12]
 800afd2:	1d1a      	adds	r2, r3, #4
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	9203      	str	r2, [sp, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	bfb8      	it	lt
 800afdc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800afe0:	3402      	adds	r4, #2
 800afe2:	9305      	str	r3, [sp, #20]
 800afe4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b0ac <_svfiprintf_r+0x1f8>
 800afe8:	7821      	ldrb	r1, [r4, #0]
 800afea:	2203      	movs	r2, #3
 800afec:	4650      	mov	r0, sl
 800afee:	f7f5 f907 	bl	8000200 <memchr>
 800aff2:	b138      	cbz	r0, 800b004 <_svfiprintf_r+0x150>
 800aff4:	9b04      	ldr	r3, [sp, #16]
 800aff6:	eba0 000a 	sub.w	r0, r0, sl
 800affa:	2240      	movs	r2, #64	; 0x40
 800affc:	4082      	lsls	r2, r0
 800affe:	4313      	orrs	r3, r2
 800b000:	3401      	adds	r4, #1
 800b002:	9304      	str	r3, [sp, #16]
 800b004:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b008:	4825      	ldr	r0, [pc, #148]	; (800b0a0 <_svfiprintf_r+0x1ec>)
 800b00a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b00e:	2206      	movs	r2, #6
 800b010:	f7f5 f8f6 	bl	8000200 <memchr>
 800b014:	2800      	cmp	r0, #0
 800b016:	d038      	beq.n	800b08a <_svfiprintf_r+0x1d6>
 800b018:	4b22      	ldr	r3, [pc, #136]	; (800b0a4 <_svfiprintf_r+0x1f0>)
 800b01a:	bb1b      	cbnz	r3, 800b064 <_svfiprintf_r+0x1b0>
 800b01c:	9b03      	ldr	r3, [sp, #12]
 800b01e:	3307      	adds	r3, #7
 800b020:	f023 0307 	bic.w	r3, r3, #7
 800b024:	3308      	adds	r3, #8
 800b026:	9303      	str	r3, [sp, #12]
 800b028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b02a:	4433      	add	r3, r6
 800b02c:	9309      	str	r3, [sp, #36]	; 0x24
 800b02e:	e768      	b.n	800af02 <_svfiprintf_r+0x4e>
 800b030:	fb0c 3202 	mla	r2, ip, r2, r3
 800b034:	460c      	mov	r4, r1
 800b036:	2001      	movs	r0, #1
 800b038:	e7a6      	b.n	800af88 <_svfiprintf_r+0xd4>
 800b03a:	2300      	movs	r3, #0
 800b03c:	3401      	adds	r4, #1
 800b03e:	9305      	str	r3, [sp, #20]
 800b040:	4619      	mov	r1, r3
 800b042:	f04f 0c0a 	mov.w	ip, #10
 800b046:	4620      	mov	r0, r4
 800b048:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b04c:	3a30      	subs	r2, #48	; 0x30
 800b04e:	2a09      	cmp	r2, #9
 800b050:	d903      	bls.n	800b05a <_svfiprintf_r+0x1a6>
 800b052:	2b00      	cmp	r3, #0
 800b054:	d0c6      	beq.n	800afe4 <_svfiprintf_r+0x130>
 800b056:	9105      	str	r1, [sp, #20]
 800b058:	e7c4      	b.n	800afe4 <_svfiprintf_r+0x130>
 800b05a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b05e:	4604      	mov	r4, r0
 800b060:	2301      	movs	r3, #1
 800b062:	e7f0      	b.n	800b046 <_svfiprintf_r+0x192>
 800b064:	ab03      	add	r3, sp, #12
 800b066:	9300      	str	r3, [sp, #0]
 800b068:	462a      	mov	r2, r5
 800b06a:	4b0f      	ldr	r3, [pc, #60]	; (800b0a8 <_svfiprintf_r+0x1f4>)
 800b06c:	a904      	add	r1, sp, #16
 800b06e:	4638      	mov	r0, r7
 800b070:	f3af 8000 	nop.w
 800b074:	1c42      	adds	r2, r0, #1
 800b076:	4606      	mov	r6, r0
 800b078:	d1d6      	bne.n	800b028 <_svfiprintf_r+0x174>
 800b07a:	89ab      	ldrh	r3, [r5, #12]
 800b07c:	065b      	lsls	r3, r3, #25
 800b07e:	f53f af2d 	bmi.w	800aedc <_svfiprintf_r+0x28>
 800b082:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b084:	b01d      	add	sp, #116	; 0x74
 800b086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b08a:	ab03      	add	r3, sp, #12
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	462a      	mov	r2, r5
 800b090:	4b05      	ldr	r3, [pc, #20]	; (800b0a8 <_svfiprintf_r+0x1f4>)
 800b092:	a904      	add	r1, sp, #16
 800b094:	4638      	mov	r0, r7
 800b096:	f000 f879 	bl	800b18c <_printf_i>
 800b09a:	e7eb      	b.n	800b074 <_svfiprintf_r+0x1c0>
 800b09c:	0800be52 	.word	0x0800be52
 800b0a0:	0800be5c 	.word	0x0800be5c
 800b0a4:	00000000 	.word	0x00000000
 800b0a8:	0800ae01 	.word	0x0800ae01
 800b0ac:	0800be58 	.word	0x0800be58

0800b0b0 <_printf_common>:
 800b0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0b4:	4616      	mov	r6, r2
 800b0b6:	4699      	mov	r9, r3
 800b0b8:	688a      	ldr	r2, [r1, #8]
 800b0ba:	690b      	ldr	r3, [r1, #16]
 800b0bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0c0:	4293      	cmp	r3, r2
 800b0c2:	bfb8      	it	lt
 800b0c4:	4613      	movlt	r3, r2
 800b0c6:	6033      	str	r3, [r6, #0]
 800b0c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0cc:	4607      	mov	r7, r0
 800b0ce:	460c      	mov	r4, r1
 800b0d0:	b10a      	cbz	r2, 800b0d6 <_printf_common+0x26>
 800b0d2:	3301      	adds	r3, #1
 800b0d4:	6033      	str	r3, [r6, #0]
 800b0d6:	6823      	ldr	r3, [r4, #0]
 800b0d8:	0699      	lsls	r1, r3, #26
 800b0da:	bf42      	ittt	mi
 800b0dc:	6833      	ldrmi	r3, [r6, #0]
 800b0de:	3302      	addmi	r3, #2
 800b0e0:	6033      	strmi	r3, [r6, #0]
 800b0e2:	6825      	ldr	r5, [r4, #0]
 800b0e4:	f015 0506 	ands.w	r5, r5, #6
 800b0e8:	d106      	bne.n	800b0f8 <_printf_common+0x48>
 800b0ea:	f104 0a19 	add.w	sl, r4, #25
 800b0ee:	68e3      	ldr	r3, [r4, #12]
 800b0f0:	6832      	ldr	r2, [r6, #0]
 800b0f2:	1a9b      	subs	r3, r3, r2
 800b0f4:	42ab      	cmp	r3, r5
 800b0f6:	dc26      	bgt.n	800b146 <_printf_common+0x96>
 800b0f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0fc:	1e13      	subs	r3, r2, #0
 800b0fe:	6822      	ldr	r2, [r4, #0]
 800b100:	bf18      	it	ne
 800b102:	2301      	movne	r3, #1
 800b104:	0692      	lsls	r2, r2, #26
 800b106:	d42b      	bmi.n	800b160 <_printf_common+0xb0>
 800b108:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b10c:	4649      	mov	r1, r9
 800b10e:	4638      	mov	r0, r7
 800b110:	47c0      	blx	r8
 800b112:	3001      	adds	r0, #1
 800b114:	d01e      	beq.n	800b154 <_printf_common+0xa4>
 800b116:	6823      	ldr	r3, [r4, #0]
 800b118:	6922      	ldr	r2, [r4, #16]
 800b11a:	f003 0306 	and.w	r3, r3, #6
 800b11e:	2b04      	cmp	r3, #4
 800b120:	bf02      	ittt	eq
 800b122:	68e5      	ldreq	r5, [r4, #12]
 800b124:	6833      	ldreq	r3, [r6, #0]
 800b126:	1aed      	subeq	r5, r5, r3
 800b128:	68a3      	ldr	r3, [r4, #8]
 800b12a:	bf0c      	ite	eq
 800b12c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b130:	2500      	movne	r5, #0
 800b132:	4293      	cmp	r3, r2
 800b134:	bfc4      	itt	gt
 800b136:	1a9b      	subgt	r3, r3, r2
 800b138:	18ed      	addgt	r5, r5, r3
 800b13a:	2600      	movs	r6, #0
 800b13c:	341a      	adds	r4, #26
 800b13e:	42b5      	cmp	r5, r6
 800b140:	d11a      	bne.n	800b178 <_printf_common+0xc8>
 800b142:	2000      	movs	r0, #0
 800b144:	e008      	b.n	800b158 <_printf_common+0xa8>
 800b146:	2301      	movs	r3, #1
 800b148:	4652      	mov	r2, sl
 800b14a:	4649      	mov	r1, r9
 800b14c:	4638      	mov	r0, r7
 800b14e:	47c0      	blx	r8
 800b150:	3001      	adds	r0, #1
 800b152:	d103      	bne.n	800b15c <_printf_common+0xac>
 800b154:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b15c:	3501      	adds	r5, #1
 800b15e:	e7c6      	b.n	800b0ee <_printf_common+0x3e>
 800b160:	18e1      	adds	r1, r4, r3
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	2030      	movs	r0, #48	; 0x30
 800b166:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b16a:	4422      	add	r2, r4
 800b16c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b170:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b174:	3302      	adds	r3, #2
 800b176:	e7c7      	b.n	800b108 <_printf_common+0x58>
 800b178:	2301      	movs	r3, #1
 800b17a:	4622      	mov	r2, r4
 800b17c:	4649      	mov	r1, r9
 800b17e:	4638      	mov	r0, r7
 800b180:	47c0      	blx	r8
 800b182:	3001      	adds	r0, #1
 800b184:	d0e6      	beq.n	800b154 <_printf_common+0xa4>
 800b186:	3601      	adds	r6, #1
 800b188:	e7d9      	b.n	800b13e <_printf_common+0x8e>
	...

0800b18c <_printf_i>:
 800b18c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b190:	7e0f      	ldrb	r7, [r1, #24]
 800b192:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b194:	2f78      	cmp	r7, #120	; 0x78
 800b196:	4691      	mov	r9, r2
 800b198:	4680      	mov	r8, r0
 800b19a:	460c      	mov	r4, r1
 800b19c:	469a      	mov	sl, r3
 800b19e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b1a2:	d807      	bhi.n	800b1b4 <_printf_i+0x28>
 800b1a4:	2f62      	cmp	r7, #98	; 0x62
 800b1a6:	d80a      	bhi.n	800b1be <_printf_i+0x32>
 800b1a8:	2f00      	cmp	r7, #0
 800b1aa:	f000 80d4 	beq.w	800b356 <_printf_i+0x1ca>
 800b1ae:	2f58      	cmp	r7, #88	; 0x58
 800b1b0:	f000 80c0 	beq.w	800b334 <_printf_i+0x1a8>
 800b1b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1bc:	e03a      	b.n	800b234 <_printf_i+0xa8>
 800b1be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1c2:	2b15      	cmp	r3, #21
 800b1c4:	d8f6      	bhi.n	800b1b4 <_printf_i+0x28>
 800b1c6:	a101      	add	r1, pc, #4	; (adr r1, 800b1cc <_printf_i+0x40>)
 800b1c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1cc:	0800b225 	.word	0x0800b225
 800b1d0:	0800b239 	.word	0x0800b239
 800b1d4:	0800b1b5 	.word	0x0800b1b5
 800b1d8:	0800b1b5 	.word	0x0800b1b5
 800b1dc:	0800b1b5 	.word	0x0800b1b5
 800b1e0:	0800b1b5 	.word	0x0800b1b5
 800b1e4:	0800b239 	.word	0x0800b239
 800b1e8:	0800b1b5 	.word	0x0800b1b5
 800b1ec:	0800b1b5 	.word	0x0800b1b5
 800b1f0:	0800b1b5 	.word	0x0800b1b5
 800b1f4:	0800b1b5 	.word	0x0800b1b5
 800b1f8:	0800b33d 	.word	0x0800b33d
 800b1fc:	0800b265 	.word	0x0800b265
 800b200:	0800b2f7 	.word	0x0800b2f7
 800b204:	0800b1b5 	.word	0x0800b1b5
 800b208:	0800b1b5 	.word	0x0800b1b5
 800b20c:	0800b35f 	.word	0x0800b35f
 800b210:	0800b1b5 	.word	0x0800b1b5
 800b214:	0800b265 	.word	0x0800b265
 800b218:	0800b1b5 	.word	0x0800b1b5
 800b21c:	0800b1b5 	.word	0x0800b1b5
 800b220:	0800b2ff 	.word	0x0800b2ff
 800b224:	682b      	ldr	r3, [r5, #0]
 800b226:	1d1a      	adds	r2, r3, #4
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	602a      	str	r2, [r5, #0]
 800b22c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b234:	2301      	movs	r3, #1
 800b236:	e09f      	b.n	800b378 <_printf_i+0x1ec>
 800b238:	6820      	ldr	r0, [r4, #0]
 800b23a:	682b      	ldr	r3, [r5, #0]
 800b23c:	0607      	lsls	r7, r0, #24
 800b23e:	f103 0104 	add.w	r1, r3, #4
 800b242:	6029      	str	r1, [r5, #0]
 800b244:	d501      	bpl.n	800b24a <_printf_i+0xbe>
 800b246:	681e      	ldr	r6, [r3, #0]
 800b248:	e003      	b.n	800b252 <_printf_i+0xc6>
 800b24a:	0646      	lsls	r6, r0, #25
 800b24c:	d5fb      	bpl.n	800b246 <_printf_i+0xba>
 800b24e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b252:	2e00      	cmp	r6, #0
 800b254:	da03      	bge.n	800b25e <_printf_i+0xd2>
 800b256:	232d      	movs	r3, #45	; 0x2d
 800b258:	4276      	negs	r6, r6
 800b25a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b25e:	485a      	ldr	r0, [pc, #360]	; (800b3c8 <_printf_i+0x23c>)
 800b260:	230a      	movs	r3, #10
 800b262:	e012      	b.n	800b28a <_printf_i+0xfe>
 800b264:	682b      	ldr	r3, [r5, #0]
 800b266:	6820      	ldr	r0, [r4, #0]
 800b268:	1d19      	adds	r1, r3, #4
 800b26a:	6029      	str	r1, [r5, #0]
 800b26c:	0605      	lsls	r5, r0, #24
 800b26e:	d501      	bpl.n	800b274 <_printf_i+0xe8>
 800b270:	681e      	ldr	r6, [r3, #0]
 800b272:	e002      	b.n	800b27a <_printf_i+0xee>
 800b274:	0641      	lsls	r1, r0, #25
 800b276:	d5fb      	bpl.n	800b270 <_printf_i+0xe4>
 800b278:	881e      	ldrh	r6, [r3, #0]
 800b27a:	4853      	ldr	r0, [pc, #332]	; (800b3c8 <_printf_i+0x23c>)
 800b27c:	2f6f      	cmp	r7, #111	; 0x6f
 800b27e:	bf0c      	ite	eq
 800b280:	2308      	moveq	r3, #8
 800b282:	230a      	movne	r3, #10
 800b284:	2100      	movs	r1, #0
 800b286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b28a:	6865      	ldr	r5, [r4, #4]
 800b28c:	60a5      	str	r5, [r4, #8]
 800b28e:	2d00      	cmp	r5, #0
 800b290:	bfa2      	ittt	ge
 800b292:	6821      	ldrge	r1, [r4, #0]
 800b294:	f021 0104 	bicge.w	r1, r1, #4
 800b298:	6021      	strge	r1, [r4, #0]
 800b29a:	b90e      	cbnz	r6, 800b2a0 <_printf_i+0x114>
 800b29c:	2d00      	cmp	r5, #0
 800b29e:	d04b      	beq.n	800b338 <_printf_i+0x1ac>
 800b2a0:	4615      	mov	r5, r2
 800b2a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800b2a6:	fb03 6711 	mls	r7, r3, r1, r6
 800b2aa:	5dc7      	ldrb	r7, [r0, r7]
 800b2ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2b0:	4637      	mov	r7, r6
 800b2b2:	42bb      	cmp	r3, r7
 800b2b4:	460e      	mov	r6, r1
 800b2b6:	d9f4      	bls.n	800b2a2 <_printf_i+0x116>
 800b2b8:	2b08      	cmp	r3, #8
 800b2ba:	d10b      	bne.n	800b2d4 <_printf_i+0x148>
 800b2bc:	6823      	ldr	r3, [r4, #0]
 800b2be:	07de      	lsls	r6, r3, #31
 800b2c0:	d508      	bpl.n	800b2d4 <_printf_i+0x148>
 800b2c2:	6923      	ldr	r3, [r4, #16]
 800b2c4:	6861      	ldr	r1, [r4, #4]
 800b2c6:	4299      	cmp	r1, r3
 800b2c8:	bfde      	ittt	le
 800b2ca:	2330      	movle	r3, #48	; 0x30
 800b2cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2d0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b2d4:	1b52      	subs	r2, r2, r5
 800b2d6:	6122      	str	r2, [r4, #16]
 800b2d8:	f8cd a000 	str.w	sl, [sp]
 800b2dc:	464b      	mov	r3, r9
 800b2de:	aa03      	add	r2, sp, #12
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	4640      	mov	r0, r8
 800b2e4:	f7ff fee4 	bl	800b0b0 <_printf_common>
 800b2e8:	3001      	adds	r0, #1
 800b2ea:	d14a      	bne.n	800b382 <_printf_i+0x1f6>
 800b2ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b2f0:	b004      	add	sp, #16
 800b2f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	f043 0320 	orr.w	r3, r3, #32
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	4833      	ldr	r0, [pc, #204]	; (800b3cc <_printf_i+0x240>)
 800b300:	2778      	movs	r7, #120	; 0x78
 800b302:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	6829      	ldr	r1, [r5, #0]
 800b30a:	061f      	lsls	r7, r3, #24
 800b30c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b310:	d402      	bmi.n	800b318 <_printf_i+0x18c>
 800b312:	065f      	lsls	r7, r3, #25
 800b314:	bf48      	it	mi
 800b316:	b2b6      	uxthmi	r6, r6
 800b318:	07df      	lsls	r7, r3, #31
 800b31a:	bf48      	it	mi
 800b31c:	f043 0320 	orrmi.w	r3, r3, #32
 800b320:	6029      	str	r1, [r5, #0]
 800b322:	bf48      	it	mi
 800b324:	6023      	strmi	r3, [r4, #0]
 800b326:	b91e      	cbnz	r6, 800b330 <_printf_i+0x1a4>
 800b328:	6823      	ldr	r3, [r4, #0]
 800b32a:	f023 0320 	bic.w	r3, r3, #32
 800b32e:	6023      	str	r3, [r4, #0]
 800b330:	2310      	movs	r3, #16
 800b332:	e7a7      	b.n	800b284 <_printf_i+0xf8>
 800b334:	4824      	ldr	r0, [pc, #144]	; (800b3c8 <_printf_i+0x23c>)
 800b336:	e7e4      	b.n	800b302 <_printf_i+0x176>
 800b338:	4615      	mov	r5, r2
 800b33a:	e7bd      	b.n	800b2b8 <_printf_i+0x12c>
 800b33c:	682b      	ldr	r3, [r5, #0]
 800b33e:	6826      	ldr	r6, [r4, #0]
 800b340:	6961      	ldr	r1, [r4, #20]
 800b342:	1d18      	adds	r0, r3, #4
 800b344:	6028      	str	r0, [r5, #0]
 800b346:	0635      	lsls	r5, r6, #24
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	d501      	bpl.n	800b350 <_printf_i+0x1c4>
 800b34c:	6019      	str	r1, [r3, #0]
 800b34e:	e002      	b.n	800b356 <_printf_i+0x1ca>
 800b350:	0670      	lsls	r0, r6, #25
 800b352:	d5fb      	bpl.n	800b34c <_printf_i+0x1c0>
 800b354:	8019      	strh	r1, [r3, #0]
 800b356:	2300      	movs	r3, #0
 800b358:	6123      	str	r3, [r4, #16]
 800b35a:	4615      	mov	r5, r2
 800b35c:	e7bc      	b.n	800b2d8 <_printf_i+0x14c>
 800b35e:	682b      	ldr	r3, [r5, #0]
 800b360:	1d1a      	adds	r2, r3, #4
 800b362:	602a      	str	r2, [r5, #0]
 800b364:	681d      	ldr	r5, [r3, #0]
 800b366:	6862      	ldr	r2, [r4, #4]
 800b368:	2100      	movs	r1, #0
 800b36a:	4628      	mov	r0, r5
 800b36c:	f7f4 ff48 	bl	8000200 <memchr>
 800b370:	b108      	cbz	r0, 800b376 <_printf_i+0x1ea>
 800b372:	1b40      	subs	r0, r0, r5
 800b374:	6060      	str	r0, [r4, #4]
 800b376:	6863      	ldr	r3, [r4, #4]
 800b378:	6123      	str	r3, [r4, #16]
 800b37a:	2300      	movs	r3, #0
 800b37c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b380:	e7aa      	b.n	800b2d8 <_printf_i+0x14c>
 800b382:	6923      	ldr	r3, [r4, #16]
 800b384:	462a      	mov	r2, r5
 800b386:	4649      	mov	r1, r9
 800b388:	4640      	mov	r0, r8
 800b38a:	47d0      	blx	sl
 800b38c:	3001      	adds	r0, #1
 800b38e:	d0ad      	beq.n	800b2ec <_printf_i+0x160>
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	079b      	lsls	r3, r3, #30
 800b394:	d413      	bmi.n	800b3be <_printf_i+0x232>
 800b396:	68e0      	ldr	r0, [r4, #12]
 800b398:	9b03      	ldr	r3, [sp, #12]
 800b39a:	4298      	cmp	r0, r3
 800b39c:	bfb8      	it	lt
 800b39e:	4618      	movlt	r0, r3
 800b3a0:	e7a6      	b.n	800b2f0 <_printf_i+0x164>
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	4632      	mov	r2, r6
 800b3a6:	4649      	mov	r1, r9
 800b3a8:	4640      	mov	r0, r8
 800b3aa:	47d0      	blx	sl
 800b3ac:	3001      	adds	r0, #1
 800b3ae:	d09d      	beq.n	800b2ec <_printf_i+0x160>
 800b3b0:	3501      	adds	r5, #1
 800b3b2:	68e3      	ldr	r3, [r4, #12]
 800b3b4:	9903      	ldr	r1, [sp, #12]
 800b3b6:	1a5b      	subs	r3, r3, r1
 800b3b8:	42ab      	cmp	r3, r5
 800b3ba:	dcf2      	bgt.n	800b3a2 <_printf_i+0x216>
 800b3bc:	e7eb      	b.n	800b396 <_printf_i+0x20a>
 800b3be:	2500      	movs	r5, #0
 800b3c0:	f104 0619 	add.w	r6, r4, #25
 800b3c4:	e7f5      	b.n	800b3b2 <_printf_i+0x226>
 800b3c6:	bf00      	nop
 800b3c8:	0800be63 	.word	0x0800be63
 800b3cc:	0800be74 	.word	0x0800be74

0800b3d0 <__sflush_r>:
 800b3d0:	898a      	ldrh	r2, [r1, #12]
 800b3d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3d6:	4605      	mov	r5, r0
 800b3d8:	0710      	lsls	r0, r2, #28
 800b3da:	460c      	mov	r4, r1
 800b3dc:	d458      	bmi.n	800b490 <__sflush_r+0xc0>
 800b3de:	684b      	ldr	r3, [r1, #4]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	dc05      	bgt.n	800b3f0 <__sflush_r+0x20>
 800b3e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	dc02      	bgt.n	800b3f0 <__sflush_r+0x20>
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3f2:	2e00      	cmp	r6, #0
 800b3f4:	d0f9      	beq.n	800b3ea <__sflush_r+0x1a>
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b3fc:	682f      	ldr	r7, [r5, #0]
 800b3fe:	6a21      	ldr	r1, [r4, #32]
 800b400:	602b      	str	r3, [r5, #0]
 800b402:	d032      	beq.n	800b46a <__sflush_r+0x9a>
 800b404:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b406:	89a3      	ldrh	r3, [r4, #12]
 800b408:	075a      	lsls	r2, r3, #29
 800b40a:	d505      	bpl.n	800b418 <__sflush_r+0x48>
 800b40c:	6863      	ldr	r3, [r4, #4]
 800b40e:	1ac0      	subs	r0, r0, r3
 800b410:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b412:	b10b      	cbz	r3, 800b418 <__sflush_r+0x48>
 800b414:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b416:	1ac0      	subs	r0, r0, r3
 800b418:	2300      	movs	r3, #0
 800b41a:	4602      	mov	r2, r0
 800b41c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b41e:	6a21      	ldr	r1, [r4, #32]
 800b420:	4628      	mov	r0, r5
 800b422:	47b0      	blx	r6
 800b424:	1c43      	adds	r3, r0, #1
 800b426:	89a3      	ldrh	r3, [r4, #12]
 800b428:	d106      	bne.n	800b438 <__sflush_r+0x68>
 800b42a:	6829      	ldr	r1, [r5, #0]
 800b42c:	291d      	cmp	r1, #29
 800b42e:	d82b      	bhi.n	800b488 <__sflush_r+0xb8>
 800b430:	4a29      	ldr	r2, [pc, #164]	; (800b4d8 <__sflush_r+0x108>)
 800b432:	410a      	asrs	r2, r1
 800b434:	07d6      	lsls	r6, r2, #31
 800b436:	d427      	bmi.n	800b488 <__sflush_r+0xb8>
 800b438:	2200      	movs	r2, #0
 800b43a:	6062      	str	r2, [r4, #4]
 800b43c:	04d9      	lsls	r1, r3, #19
 800b43e:	6922      	ldr	r2, [r4, #16]
 800b440:	6022      	str	r2, [r4, #0]
 800b442:	d504      	bpl.n	800b44e <__sflush_r+0x7e>
 800b444:	1c42      	adds	r2, r0, #1
 800b446:	d101      	bne.n	800b44c <__sflush_r+0x7c>
 800b448:	682b      	ldr	r3, [r5, #0]
 800b44a:	b903      	cbnz	r3, 800b44e <__sflush_r+0x7e>
 800b44c:	6560      	str	r0, [r4, #84]	; 0x54
 800b44e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b450:	602f      	str	r7, [r5, #0]
 800b452:	2900      	cmp	r1, #0
 800b454:	d0c9      	beq.n	800b3ea <__sflush_r+0x1a>
 800b456:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b45a:	4299      	cmp	r1, r3
 800b45c:	d002      	beq.n	800b464 <__sflush_r+0x94>
 800b45e:	4628      	mov	r0, r5
 800b460:	f7ff fbce 	bl	800ac00 <_free_r>
 800b464:	2000      	movs	r0, #0
 800b466:	6360      	str	r0, [r4, #52]	; 0x34
 800b468:	e7c0      	b.n	800b3ec <__sflush_r+0x1c>
 800b46a:	2301      	movs	r3, #1
 800b46c:	4628      	mov	r0, r5
 800b46e:	47b0      	blx	r6
 800b470:	1c41      	adds	r1, r0, #1
 800b472:	d1c8      	bne.n	800b406 <__sflush_r+0x36>
 800b474:	682b      	ldr	r3, [r5, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d0c5      	beq.n	800b406 <__sflush_r+0x36>
 800b47a:	2b1d      	cmp	r3, #29
 800b47c:	d001      	beq.n	800b482 <__sflush_r+0xb2>
 800b47e:	2b16      	cmp	r3, #22
 800b480:	d101      	bne.n	800b486 <__sflush_r+0xb6>
 800b482:	602f      	str	r7, [r5, #0]
 800b484:	e7b1      	b.n	800b3ea <__sflush_r+0x1a>
 800b486:	89a3      	ldrh	r3, [r4, #12]
 800b488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b48c:	81a3      	strh	r3, [r4, #12]
 800b48e:	e7ad      	b.n	800b3ec <__sflush_r+0x1c>
 800b490:	690f      	ldr	r7, [r1, #16]
 800b492:	2f00      	cmp	r7, #0
 800b494:	d0a9      	beq.n	800b3ea <__sflush_r+0x1a>
 800b496:	0793      	lsls	r3, r2, #30
 800b498:	680e      	ldr	r6, [r1, #0]
 800b49a:	bf08      	it	eq
 800b49c:	694b      	ldreq	r3, [r1, #20]
 800b49e:	600f      	str	r7, [r1, #0]
 800b4a0:	bf18      	it	ne
 800b4a2:	2300      	movne	r3, #0
 800b4a4:	eba6 0807 	sub.w	r8, r6, r7
 800b4a8:	608b      	str	r3, [r1, #8]
 800b4aa:	f1b8 0f00 	cmp.w	r8, #0
 800b4ae:	dd9c      	ble.n	800b3ea <__sflush_r+0x1a>
 800b4b0:	6a21      	ldr	r1, [r4, #32]
 800b4b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b4b4:	4643      	mov	r3, r8
 800b4b6:	463a      	mov	r2, r7
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	47b0      	blx	r6
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	dc06      	bgt.n	800b4ce <__sflush_r+0xfe>
 800b4c0:	89a3      	ldrh	r3, [r4, #12]
 800b4c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4c6:	81a3      	strh	r3, [r4, #12]
 800b4c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b4cc:	e78e      	b.n	800b3ec <__sflush_r+0x1c>
 800b4ce:	4407      	add	r7, r0
 800b4d0:	eba8 0800 	sub.w	r8, r8, r0
 800b4d4:	e7e9      	b.n	800b4aa <__sflush_r+0xda>
 800b4d6:	bf00      	nop
 800b4d8:	dfbffffe 	.word	0xdfbffffe

0800b4dc <_fflush_r>:
 800b4dc:	b538      	push	{r3, r4, r5, lr}
 800b4de:	690b      	ldr	r3, [r1, #16]
 800b4e0:	4605      	mov	r5, r0
 800b4e2:	460c      	mov	r4, r1
 800b4e4:	b913      	cbnz	r3, 800b4ec <_fflush_r+0x10>
 800b4e6:	2500      	movs	r5, #0
 800b4e8:	4628      	mov	r0, r5
 800b4ea:	bd38      	pop	{r3, r4, r5, pc}
 800b4ec:	b118      	cbz	r0, 800b4f6 <_fflush_r+0x1a>
 800b4ee:	6a03      	ldr	r3, [r0, #32]
 800b4f0:	b90b      	cbnz	r3, 800b4f6 <_fflush_r+0x1a>
 800b4f2:	f7ff f9e7 	bl	800a8c4 <__sinit>
 800b4f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d0f3      	beq.n	800b4e6 <_fflush_r+0xa>
 800b4fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b500:	07d0      	lsls	r0, r2, #31
 800b502:	d404      	bmi.n	800b50e <_fflush_r+0x32>
 800b504:	0599      	lsls	r1, r3, #22
 800b506:	d402      	bmi.n	800b50e <_fflush_r+0x32>
 800b508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b50a:	f7ff fb4a 	bl	800aba2 <__retarget_lock_acquire_recursive>
 800b50e:	4628      	mov	r0, r5
 800b510:	4621      	mov	r1, r4
 800b512:	f7ff ff5d 	bl	800b3d0 <__sflush_r>
 800b516:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b518:	07da      	lsls	r2, r3, #31
 800b51a:	4605      	mov	r5, r0
 800b51c:	d4e4      	bmi.n	800b4e8 <_fflush_r+0xc>
 800b51e:	89a3      	ldrh	r3, [r4, #12]
 800b520:	059b      	lsls	r3, r3, #22
 800b522:	d4e1      	bmi.n	800b4e8 <_fflush_r+0xc>
 800b524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b526:	f7ff fb3d 	bl	800aba4 <__retarget_lock_release_recursive>
 800b52a:	e7dd      	b.n	800b4e8 <_fflush_r+0xc>

0800b52c <fiprintf>:
 800b52c:	b40e      	push	{r1, r2, r3}
 800b52e:	b503      	push	{r0, r1, lr}
 800b530:	4601      	mov	r1, r0
 800b532:	ab03      	add	r3, sp, #12
 800b534:	4805      	ldr	r0, [pc, #20]	; (800b54c <fiprintf+0x20>)
 800b536:	f853 2b04 	ldr.w	r2, [r3], #4
 800b53a:	6800      	ldr	r0, [r0, #0]
 800b53c:	9301      	str	r3, [sp, #4]
 800b53e:	f000 f891 	bl	800b664 <_vfiprintf_r>
 800b542:	b002      	add	sp, #8
 800b544:	f85d eb04 	ldr.w	lr, [sp], #4
 800b548:	b003      	add	sp, #12
 800b54a:	4770      	bx	lr
 800b54c:	20000068 	.word	0x20000068

0800b550 <memmove>:
 800b550:	4288      	cmp	r0, r1
 800b552:	b510      	push	{r4, lr}
 800b554:	eb01 0402 	add.w	r4, r1, r2
 800b558:	d902      	bls.n	800b560 <memmove+0x10>
 800b55a:	4284      	cmp	r4, r0
 800b55c:	4623      	mov	r3, r4
 800b55e:	d807      	bhi.n	800b570 <memmove+0x20>
 800b560:	1e43      	subs	r3, r0, #1
 800b562:	42a1      	cmp	r1, r4
 800b564:	d008      	beq.n	800b578 <memmove+0x28>
 800b566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b56a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b56e:	e7f8      	b.n	800b562 <memmove+0x12>
 800b570:	4402      	add	r2, r0
 800b572:	4601      	mov	r1, r0
 800b574:	428a      	cmp	r2, r1
 800b576:	d100      	bne.n	800b57a <memmove+0x2a>
 800b578:	bd10      	pop	{r4, pc}
 800b57a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b57e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b582:	e7f7      	b.n	800b574 <memmove+0x24>

0800b584 <_sbrk_r>:
 800b584:	b538      	push	{r3, r4, r5, lr}
 800b586:	4d06      	ldr	r5, [pc, #24]	; (800b5a0 <_sbrk_r+0x1c>)
 800b588:	2300      	movs	r3, #0
 800b58a:	4604      	mov	r4, r0
 800b58c:	4608      	mov	r0, r1
 800b58e:	602b      	str	r3, [r5, #0]
 800b590:	f7f6 fc00 	bl	8001d94 <_sbrk>
 800b594:	1c43      	adds	r3, r0, #1
 800b596:	d102      	bne.n	800b59e <_sbrk_r+0x1a>
 800b598:	682b      	ldr	r3, [r5, #0]
 800b59a:	b103      	cbz	r3, 800b59e <_sbrk_r+0x1a>
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	bd38      	pop	{r3, r4, r5, pc}
 800b5a0:	20001c74 	.word	0x20001c74

0800b5a4 <abort>:
 800b5a4:	b508      	push	{r3, lr}
 800b5a6:	2006      	movs	r0, #6
 800b5a8:	f000 fa34 	bl	800ba14 <raise>
 800b5ac:	2001      	movs	r0, #1
 800b5ae:	f7f6 fb7a 	bl	8001ca6 <_exit>

0800b5b2 <_realloc_r>:
 800b5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5b6:	4680      	mov	r8, r0
 800b5b8:	4614      	mov	r4, r2
 800b5ba:	460e      	mov	r6, r1
 800b5bc:	b921      	cbnz	r1, 800b5c8 <_realloc_r+0x16>
 800b5be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	f7ff bb90 	b.w	800ace8 <_malloc_r>
 800b5c8:	b92a      	cbnz	r2, 800b5d6 <_realloc_r+0x24>
 800b5ca:	f7ff fb19 	bl	800ac00 <_free_r>
 800b5ce:	4625      	mov	r5, r4
 800b5d0:	4628      	mov	r0, r5
 800b5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5d6:	f000 fa39 	bl	800ba4c <_malloc_usable_size_r>
 800b5da:	4284      	cmp	r4, r0
 800b5dc:	4607      	mov	r7, r0
 800b5de:	d802      	bhi.n	800b5e6 <_realloc_r+0x34>
 800b5e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5e4:	d812      	bhi.n	800b60c <_realloc_r+0x5a>
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	4640      	mov	r0, r8
 800b5ea:	f7ff fb7d 	bl	800ace8 <_malloc_r>
 800b5ee:	4605      	mov	r5, r0
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	d0ed      	beq.n	800b5d0 <_realloc_r+0x1e>
 800b5f4:	42bc      	cmp	r4, r7
 800b5f6:	4622      	mov	r2, r4
 800b5f8:	4631      	mov	r1, r6
 800b5fa:	bf28      	it	cs
 800b5fc:	463a      	movcs	r2, r7
 800b5fe:	f7ff fad2 	bl	800aba6 <memcpy>
 800b602:	4631      	mov	r1, r6
 800b604:	4640      	mov	r0, r8
 800b606:	f7ff fafb 	bl	800ac00 <_free_r>
 800b60a:	e7e1      	b.n	800b5d0 <_realloc_r+0x1e>
 800b60c:	4635      	mov	r5, r6
 800b60e:	e7df      	b.n	800b5d0 <_realloc_r+0x1e>

0800b610 <__sfputc_r>:
 800b610:	6893      	ldr	r3, [r2, #8]
 800b612:	3b01      	subs	r3, #1
 800b614:	2b00      	cmp	r3, #0
 800b616:	b410      	push	{r4}
 800b618:	6093      	str	r3, [r2, #8]
 800b61a:	da08      	bge.n	800b62e <__sfputc_r+0x1e>
 800b61c:	6994      	ldr	r4, [r2, #24]
 800b61e:	42a3      	cmp	r3, r4
 800b620:	db01      	blt.n	800b626 <__sfputc_r+0x16>
 800b622:	290a      	cmp	r1, #10
 800b624:	d103      	bne.n	800b62e <__sfputc_r+0x1e>
 800b626:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b62a:	f000 b935 	b.w	800b898 <__swbuf_r>
 800b62e:	6813      	ldr	r3, [r2, #0]
 800b630:	1c58      	adds	r0, r3, #1
 800b632:	6010      	str	r0, [r2, #0]
 800b634:	7019      	strb	r1, [r3, #0]
 800b636:	4608      	mov	r0, r1
 800b638:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b63c:	4770      	bx	lr

0800b63e <__sfputs_r>:
 800b63e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b640:	4606      	mov	r6, r0
 800b642:	460f      	mov	r7, r1
 800b644:	4614      	mov	r4, r2
 800b646:	18d5      	adds	r5, r2, r3
 800b648:	42ac      	cmp	r4, r5
 800b64a:	d101      	bne.n	800b650 <__sfputs_r+0x12>
 800b64c:	2000      	movs	r0, #0
 800b64e:	e007      	b.n	800b660 <__sfputs_r+0x22>
 800b650:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b654:	463a      	mov	r2, r7
 800b656:	4630      	mov	r0, r6
 800b658:	f7ff ffda 	bl	800b610 <__sfputc_r>
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	d1f3      	bne.n	800b648 <__sfputs_r+0xa>
 800b660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b664 <_vfiprintf_r>:
 800b664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b668:	460d      	mov	r5, r1
 800b66a:	b09d      	sub	sp, #116	; 0x74
 800b66c:	4614      	mov	r4, r2
 800b66e:	4698      	mov	r8, r3
 800b670:	4606      	mov	r6, r0
 800b672:	b118      	cbz	r0, 800b67c <_vfiprintf_r+0x18>
 800b674:	6a03      	ldr	r3, [r0, #32]
 800b676:	b90b      	cbnz	r3, 800b67c <_vfiprintf_r+0x18>
 800b678:	f7ff f924 	bl	800a8c4 <__sinit>
 800b67c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b67e:	07d9      	lsls	r1, r3, #31
 800b680:	d405      	bmi.n	800b68e <_vfiprintf_r+0x2a>
 800b682:	89ab      	ldrh	r3, [r5, #12]
 800b684:	059a      	lsls	r2, r3, #22
 800b686:	d402      	bmi.n	800b68e <_vfiprintf_r+0x2a>
 800b688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b68a:	f7ff fa8a 	bl	800aba2 <__retarget_lock_acquire_recursive>
 800b68e:	89ab      	ldrh	r3, [r5, #12]
 800b690:	071b      	lsls	r3, r3, #28
 800b692:	d501      	bpl.n	800b698 <_vfiprintf_r+0x34>
 800b694:	692b      	ldr	r3, [r5, #16]
 800b696:	b99b      	cbnz	r3, 800b6c0 <_vfiprintf_r+0x5c>
 800b698:	4629      	mov	r1, r5
 800b69a:	4630      	mov	r0, r6
 800b69c:	f000 f93a 	bl	800b914 <__swsetup_r>
 800b6a0:	b170      	cbz	r0, 800b6c0 <_vfiprintf_r+0x5c>
 800b6a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6a4:	07dc      	lsls	r4, r3, #31
 800b6a6:	d504      	bpl.n	800b6b2 <_vfiprintf_r+0x4e>
 800b6a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6ac:	b01d      	add	sp, #116	; 0x74
 800b6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b2:	89ab      	ldrh	r3, [r5, #12]
 800b6b4:	0598      	lsls	r0, r3, #22
 800b6b6:	d4f7      	bmi.n	800b6a8 <_vfiprintf_r+0x44>
 800b6b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6ba:	f7ff fa73 	bl	800aba4 <__retarget_lock_release_recursive>
 800b6be:	e7f3      	b.n	800b6a8 <_vfiprintf_r+0x44>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6c4:	2320      	movs	r3, #32
 800b6c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b6ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800b6ce:	2330      	movs	r3, #48	; 0x30
 800b6d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b884 <_vfiprintf_r+0x220>
 800b6d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b6d8:	f04f 0901 	mov.w	r9, #1
 800b6dc:	4623      	mov	r3, r4
 800b6de:	469a      	mov	sl, r3
 800b6e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b6e4:	b10a      	cbz	r2, 800b6ea <_vfiprintf_r+0x86>
 800b6e6:	2a25      	cmp	r2, #37	; 0x25
 800b6e8:	d1f9      	bne.n	800b6de <_vfiprintf_r+0x7a>
 800b6ea:	ebba 0b04 	subs.w	fp, sl, r4
 800b6ee:	d00b      	beq.n	800b708 <_vfiprintf_r+0xa4>
 800b6f0:	465b      	mov	r3, fp
 800b6f2:	4622      	mov	r2, r4
 800b6f4:	4629      	mov	r1, r5
 800b6f6:	4630      	mov	r0, r6
 800b6f8:	f7ff ffa1 	bl	800b63e <__sfputs_r>
 800b6fc:	3001      	adds	r0, #1
 800b6fe:	f000 80a9 	beq.w	800b854 <_vfiprintf_r+0x1f0>
 800b702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b704:	445a      	add	r2, fp
 800b706:	9209      	str	r2, [sp, #36]	; 0x24
 800b708:	f89a 3000 	ldrb.w	r3, [sl]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f000 80a1 	beq.w	800b854 <_vfiprintf_r+0x1f0>
 800b712:	2300      	movs	r3, #0
 800b714:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b718:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b71c:	f10a 0a01 	add.w	sl, sl, #1
 800b720:	9304      	str	r3, [sp, #16]
 800b722:	9307      	str	r3, [sp, #28]
 800b724:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b728:	931a      	str	r3, [sp, #104]	; 0x68
 800b72a:	4654      	mov	r4, sl
 800b72c:	2205      	movs	r2, #5
 800b72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b732:	4854      	ldr	r0, [pc, #336]	; (800b884 <_vfiprintf_r+0x220>)
 800b734:	f7f4 fd64 	bl	8000200 <memchr>
 800b738:	9a04      	ldr	r2, [sp, #16]
 800b73a:	b9d8      	cbnz	r0, 800b774 <_vfiprintf_r+0x110>
 800b73c:	06d1      	lsls	r1, r2, #27
 800b73e:	bf44      	itt	mi
 800b740:	2320      	movmi	r3, #32
 800b742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b746:	0713      	lsls	r3, r2, #28
 800b748:	bf44      	itt	mi
 800b74a:	232b      	movmi	r3, #43	; 0x2b
 800b74c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b750:	f89a 3000 	ldrb.w	r3, [sl]
 800b754:	2b2a      	cmp	r3, #42	; 0x2a
 800b756:	d015      	beq.n	800b784 <_vfiprintf_r+0x120>
 800b758:	9a07      	ldr	r2, [sp, #28]
 800b75a:	4654      	mov	r4, sl
 800b75c:	2000      	movs	r0, #0
 800b75e:	f04f 0c0a 	mov.w	ip, #10
 800b762:	4621      	mov	r1, r4
 800b764:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b768:	3b30      	subs	r3, #48	; 0x30
 800b76a:	2b09      	cmp	r3, #9
 800b76c:	d94d      	bls.n	800b80a <_vfiprintf_r+0x1a6>
 800b76e:	b1b0      	cbz	r0, 800b79e <_vfiprintf_r+0x13a>
 800b770:	9207      	str	r2, [sp, #28]
 800b772:	e014      	b.n	800b79e <_vfiprintf_r+0x13a>
 800b774:	eba0 0308 	sub.w	r3, r0, r8
 800b778:	fa09 f303 	lsl.w	r3, r9, r3
 800b77c:	4313      	orrs	r3, r2
 800b77e:	9304      	str	r3, [sp, #16]
 800b780:	46a2      	mov	sl, r4
 800b782:	e7d2      	b.n	800b72a <_vfiprintf_r+0xc6>
 800b784:	9b03      	ldr	r3, [sp, #12]
 800b786:	1d19      	adds	r1, r3, #4
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	9103      	str	r1, [sp, #12]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	bfbb      	ittet	lt
 800b790:	425b      	neglt	r3, r3
 800b792:	f042 0202 	orrlt.w	r2, r2, #2
 800b796:	9307      	strge	r3, [sp, #28]
 800b798:	9307      	strlt	r3, [sp, #28]
 800b79a:	bfb8      	it	lt
 800b79c:	9204      	strlt	r2, [sp, #16]
 800b79e:	7823      	ldrb	r3, [r4, #0]
 800b7a0:	2b2e      	cmp	r3, #46	; 0x2e
 800b7a2:	d10c      	bne.n	800b7be <_vfiprintf_r+0x15a>
 800b7a4:	7863      	ldrb	r3, [r4, #1]
 800b7a6:	2b2a      	cmp	r3, #42	; 0x2a
 800b7a8:	d134      	bne.n	800b814 <_vfiprintf_r+0x1b0>
 800b7aa:	9b03      	ldr	r3, [sp, #12]
 800b7ac:	1d1a      	adds	r2, r3, #4
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	9203      	str	r2, [sp, #12]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	bfb8      	it	lt
 800b7b6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b7ba:	3402      	adds	r4, #2
 800b7bc:	9305      	str	r3, [sp, #20]
 800b7be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b894 <_vfiprintf_r+0x230>
 800b7c2:	7821      	ldrb	r1, [r4, #0]
 800b7c4:	2203      	movs	r2, #3
 800b7c6:	4650      	mov	r0, sl
 800b7c8:	f7f4 fd1a 	bl	8000200 <memchr>
 800b7cc:	b138      	cbz	r0, 800b7de <_vfiprintf_r+0x17a>
 800b7ce:	9b04      	ldr	r3, [sp, #16]
 800b7d0:	eba0 000a 	sub.w	r0, r0, sl
 800b7d4:	2240      	movs	r2, #64	; 0x40
 800b7d6:	4082      	lsls	r2, r0
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	3401      	adds	r4, #1
 800b7dc:	9304      	str	r3, [sp, #16]
 800b7de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7e2:	4829      	ldr	r0, [pc, #164]	; (800b888 <_vfiprintf_r+0x224>)
 800b7e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b7e8:	2206      	movs	r2, #6
 800b7ea:	f7f4 fd09 	bl	8000200 <memchr>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d03f      	beq.n	800b872 <_vfiprintf_r+0x20e>
 800b7f2:	4b26      	ldr	r3, [pc, #152]	; (800b88c <_vfiprintf_r+0x228>)
 800b7f4:	bb1b      	cbnz	r3, 800b83e <_vfiprintf_r+0x1da>
 800b7f6:	9b03      	ldr	r3, [sp, #12]
 800b7f8:	3307      	adds	r3, #7
 800b7fa:	f023 0307 	bic.w	r3, r3, #7
 800b7fe:	3308      	adds	r3, #8
 800b800:	9303      	str	r3, [sp, #12]
 800b802:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b804:	443b      	add	r3, r7
 800b806:	9309      	str	r3, [sp, #36]	; 0x24
 800b808:	e768      	b.n	800b6dc <_vfiprintf_r+0x78>
 800b80a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b80e:	460c      	mov	r4, r1
 800b810:	2001      	movs	r0, #1
 800b812:	e7a6      	b.n	800b762 <_vfiprintf_r+0xfe>
 800b814:	2300      	movs	r3, #0
 800b816:	3401      	adds	r4, #1
 800b818:	9305      	str	r3, [sp, #20]
 800b81a:	4619      	mov	r1, r3
 800b81c:	f04f 0c0a 	mov.w	ip, #10
 800b820:	4620      	mov	r0, r4
 800b822:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b826:	3a30      	subs	r2, #48	; 0x30
 800b828:	2a09      	cmp	r2, #9
 800b82a:	d903      	bls.n	800b834 <_vfiprintf_r+0x1d0>
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d0c6      	beq.n	800b7be <_vfiprintf_r+0x15a>
 800b830:	9105      	str	r1, [sp, #20]
 800b832:	e7c4      	b.n	800b7be <_vfiprintf_r+0x15a>
 800b834:	fb0c 2101 	mla	r1, ip, r1, r2
 800b838:	4604      	mov	r4, r0
 800b83a:	2301      	movs	r3, #1
 800b83c:	e7f0      	b.n	800b820 <_vfiprintf_r+0x1bc>
 800b83e:	ab03      	add	r3, sp, #12
 800b840:	9300      	str	r3, [sp, #0]
 800b842:	462a      	mov	r2, r5
 800b844:	4b12      	ldr	r3, [pc, #72]	; (800b890 <_vfiprintf_r+0x22c>)
 800b846:	a904      	add	r1, sp, #16
 800b848:	4630      	mov	r0, r6
 800b84a:	f3af 8000 	nop.w
 800b84e:	4607      	mov	r7, r0
 800b850:	1c78      	adds	r0, r7, #1
 800b852:	d1d6      	bne.n	800b802 <_vfiprintf_r+0x19e>
 800b854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b856:	07d9      	lsls	r1, r3, #31
 800b858:	d405      	bmi.n	800b866 <_vfiprintf_r+0x202>
 800b85a:	89ab      	ldrh	r3, [r5, #12]
 800b85c:	059a      	lsls	r2, r3, #22
 800b85e:	d402      	bmi.n	800b866 <_vfiprintf_r+0x202>
 800b860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b862:	f7ff f99f 	bl	800aba4 <__retarget_lock_release_recursive>
 800b866:	89ab      	ldrh	r3, [r5, #12]
 800b868:	065b      	lsls	r3, r3, #25
 800b86a:	f53f af1d 	bmi.w	800b6a8 <_vfiprintf_r+0x44>
 800b86e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b870:	e71c      	b.n	800b6ac <_vfiprintf_r+0x48>
 800b872:	ab03      	add	r3, sp, #12
 800b874:	9300      	str	r3, [sp, #0]
 800b876:	462a      	mov	r2, r5
 800b878:	4b05      	ldr	r3, [pc, #20]	; (800b890 <_vfiprintf_r+0x22c>)
 800b87a:	a904      	add	r1, sp, #16
 800b87c:	4630      	mov	r0, r6
 800b87e:	f7ff fc85 	bl	800b18c <_printf_i>
 800b882:	e7e4      	b.n	800b84e <_vfiprintf_r+0x1ea>
 800b884:	0800be52 	.word	0x0800be52
 800b888:	0800be5c 	.word	0x0800be5c
 800b88c:	00000000 	.word	0x00000000
 800b890:	0800b63f 	.word	0x0800b63f
 800b894:	0800be58 	.word	0x0800be58

0800b898 <__swbuf_r>:
 800b898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89a:	460e      	mov	r6, r1
 800b89c:	4614      	mov	r4, r2
 800b89e:	4605      	mov	r5, r0
 800b8a0:	b118      	cbz	r0, 800b8aa <__swbuf_r+0x12>
 800b8a2:	6a03      	ldr	r3, [r0, #32]
 800b8a4:	b90b      	cbnz	r3, 800b8aa <__swbuf_r+0x12>
 800b8a6:	f7ff f80d 	bl	800a8c4 <__sinit>
 800b8aa:	69a3      	ldr	r3, [r4, #24]
 800b8ac:	60a3      	str	r3, [r4, #8]
 800b8ae:	89a3      	ldrh	r3, [r4, #12]
 800b8b0:	071a      	lsls	r2, r3, #28
 800b8b2:	d525      	bpl.n	800b900 <__swbuf_r+0x68>
 800b8b4:	6923      	ldr	r3, [r4, #16]
 800b8b6:	b31b      	cbz	r3, 800b900 <__swbuf_r+0x68>
 800b8b8:	6823      	ldr	r3, [r4, #0]
 800b8ba:	6922      	ldr	r2, [r4, #16]
 800b8bc:	1a98      	subs	r0, r3, r2
 800b8be:	6963      	ldr	r3, [r4, #20]
 800b8c0:	b2f6      	uxtb	r6, r6
 800b8c2:	4283      	cmp	r3, r0
 800b8c4:	4637      	mov	r7, r6
 800b8c6:	dc04      	bgt.n	800b8d2 <__swbuf_r+0x3a>
 800b8c8:	4621      	mov	r1, r4
 800b8ca:	4628      	mov	r0, r5
 800b8cc:	f7ff fe06 	bl	800b4dc <_fflush_r>
 800b8d0:	b9e0      	cbnz	r0, 800b90c <__swbuf_r+0x74>
 800b8d2:	68a3      	ldr	r3, [r4, #8]
 800b8d4:	3b01      	subs	r3, #1
 800b8d6:	60a3      	str	r3, [r4, #8]
 800b8d8:	6823      	ldr	r3, [r4, #0]
 800b8da:	1c5a      	adds	r2, r3, #1
 800b8dc:	6022      	str	r2, [r4, #0]
 800b8de:	701e      	strb	r6, [r3, #0]
 800b8e0:	6962      	ldr	r2, [r4, #20]
 800b8e2:	1c43      	adds	r3, r0, #1
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d004      	beq.n	800b8f2 <__swbuf_r+0x5a>
 800b8e8:	89a3      	ldrh	r3, [r4, #12]
 800b8ea:	07db      	lsls	r3, r3, #31
 800b8ec:	d506      	bpl.n	800b8fc <__swbuf_r+0x64>
 800b8ee:	2e0a      	cmp	r6, #10
 800b8f0:	d104      	bne.n	800b8fc <__swbuf_r+0x64>
 800b8f2:	4621      	mov	r1, r4
 800b8f4:	4628      	mov	r0, r5
 800b8f6:	f7ff fdf1 	bl	800b4dc <_fflush_r>
 800b8fa:	b938      	cbnz	r0, 800b90c <__swbuf_r+0x74>
 800b8fc:	4638      	mov	r0, r7
 800b8fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b900:	4621      	mov	r1, r4
 800b902:	4628      	mov	r0, r5
 800b904:	f000 f806 	bl	800b914 <__swsetup_r>
 800b908:	2800      	cmp	r0, #0
 800b90a:	d0d5      	beq.n	800b8b8 <__swbuf_r+0x20>
 800b90c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b910:	e7f4      	b.n	800b8fc <__swbuf_r+0x64>
	...

0800b914 <__swsetup_r>:
 800b914:	b538      	push	{r3, r4, r5, lr}
 800b916:	4b2a      	ldr	r3, [pc, #168]	; (800b9c0 <__swsetup_r+0xac>)
 800b918:	4605      	mov	r5, r0
 800b91a:	6818      	ldr	r0, [r3, #0]
 800b91c:	460c      	mov	r4, r1
 800b91e:	b118      	cbz	r0, 800b928 <__swsetup_r+0x14>
 800b920:	6a03      	ldr	r3, [r0, #32]
 800b922:	b90b      	cbnz	r3, 800b928 <__swsetup_r+0x14>
 800b924:	f7fe ffce 	bl	800a8c4 <__sinit>
 800b928:	89a3      	ldrh	r3, [r4, #12]
 800b92a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b92e:	0718      	lsls	r0, r3, #28
 800b930:	d422      	bmi.n	800b978 <__swsetup_r+0x64>
 800b932:	06d9      	lsls	r1, r3, #27
 800b934:	d407      	bmi.n	800b946 <__swsetup_r+0x32>
 800b936:	2309      	movs	r3, #9
 800b938:	602b      	str	r3, [r5, #0]
 800b93a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b93e:	81a3      	strh	r3, [r4, #12]
 800b940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b944:	e034      	b.n	800b9b0 <__swsetup_r+0x9c>
 800b946:	0758      	lsls	r0, r3, #29
 800b948:	d512      	bpl.n	800b970 <__swsetup_r+0x5c>
 800b94a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b94c:	b141      	cbz	r1, 800b960 <__swsetup_r+0x4c>
 800b94e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b952:	4299      	cmp	r1, r3
 800b954:	d002      	beq.n	800b95c <__swsetup_r+0x48>
 800b956:	4628      	mov	r0, r5
 800b958:	f7ff f952 	bl	800ac00 <_free_r>
 800b95c:	2300      	movs	r3, #0
 800b95e:	6363      	str	r3, [r4, #52]	; 0x34
 800b960:	89a3      	ldrh	r3, [r4, #12]
 800b962:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b966:	81a3      	strh	r3, [r4, #12]
 800b968:	2300      	movs	r3, #0
 800b96a:	6063      	str	r3, [r4, #4]
 800b96c:	6923      	ldr	r3, [r4, #16]
 800b96e:	6023      	str	r3, [r4, #0]
 800b970:	89a3      	ldrh	r3, [r4, #12]
 800b972:	f043 0308 	orr.w	r3, r3, #8
 800b976:	81a3      	strh	r3, [r4, #12]
 800b978:	6923      	ldr	r3, [r4, #16]
 800b97a:	b94b      	cbnz	r3, 800b990 <__swsetup_r+0x7c>
 800b97c:	89a3      	ldrh	r3, [r4, #12]
 800b97e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b986:	d003      	beq.n	800b990 <__swsetup_r+0x7c>
 800b988:	4621      	mov	r1, r4
 800b98a:	4628      	mov	r0, r5
 800b98c:	f000 f88c 	bl	800baa8 <__smakebuf_r>
 800b990:	89a0      	ldrh	r0, [r4, #12]
 800b992:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b996:	f010 0301 	ands.w	r3, r0, #1
 800b99a:	d00a      	beq.n	800b9b2 <__swsetup_r+0x9e>
 800b99c:	2300      	movs	r3, #0
 800b99e:	60a3      	str	r3, [r4, #8]
 800b9a0:	6963      	ldr	r3, [r4, #20]
 800b9a2:	425b      	negs	r3, r3
 800b9a4:	61a3      	str	r3, [r4, #24]
 800b9a6:	6923      	ldr	r3, [r4, #16]
 800b9a8:	b943      	cbnz	r3, 800b9bc <__swsetup_r+0xa8>
 800b9aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b9ae:	d1c4      	bne.n	800b93a <__swsetup_r+0x26>
 800b9b0:	bd38      	pop	{r3, r4, r5, pc}
 800b9b2:	0781      	lsls	r1, r0, #30
 800b9b4:	bf58      	it	pl
 800b9b6:	6963      	ldrpl	r3, [r4, #20]
 800b9b8:	60a3      	str	r3, [r4, #8]
 800b9ba:	e7f4      	b.n	800b9a6 <__swsetup_r+0x92>
 800b9bc:	2000      	movs	r0, #0
 800b9be:	e7f7      	b.n	800b9b0 <__swsetup_r+0x9c>
 800b9c0:	20000068 	.word	0x20000068

0800b9c4 <_raise_r>:
 800b9c4:	291f      	cmp	r1, #31
 800b9c6:	b538      	push	{r3, r4, r5, lr}
 800b9c8:	4604      	mov	r4, r0
 800b9ca:	460d      	mov	r5, r1
 800b9cc:	d904      	bls.n	800b9d8 <_raise_r+0x14>
 800b9ce:	2316      	movs	r3, #22
 800b9d0:	6003      	str	r3, [r0, #0]
 800b9d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b9d6:	bd38      	pop	{r3, r4, r5, pc}
 800b9d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b9da:	b112      	cbz	r2, 800b9e2 <_raise_r+0x1e>
 800b9dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9e0:	b94b      	cbnz	r3, 800b9f6 <_raise_r+0x32>
 800b9e2:	4620      	mov	r0, r4
 800b9e4:	f000 f830 	bl	800ba48 <_getpid_r>
 800b9e8:	462a      	mov	r2, r5
 800b9ea:	4601      	mov	r1, r0
 800b9ec:	4620      	mov	r0, r4
 800b9ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9f2:	f000 b817 	b.w	800ba24 <_kill_r>
 800b9f6:	2b01      	cmp	r3, #1
 800b9f8:	d00a      	beq.n	800ba10 <_raise_r+0x4c>
 800b9fa:	1c59      	adds	r1, r3, #1
 800b9fc:	d103      	bne.n	800ba06 <_raise_r+0x42>
 800b9fe:	2316      	movs	r3, #22
 800ba00:	6003      	str	r3, [r0, #0]
 800ba02:	2001      	movs	r0, #1
 800ba04:	e7e7      	b.n	800b9d6 <_raise_r+0x12>
 800ba06:	2400      	movs	r4, #0
 800ba08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba0c:	4628      	mov	r0, r5
 800ba0e:	4798      	blx	r3
 800ba10:	2000      	movs	r0, #0
 800ba12:	e7e0      	b.n	800b9d6 <_raise_r+0x12>

0800ba14 <raise>:
 800ba14:	4b02      	ldr	r3, [pc, #8]	; (800ba20 <raise+0xc>)
 800ba16:	4601      	mov	r1, r0
 800ba18:	6818      	ldr	r0, [r3, #0]
 800ba1a:	f7ff bfd3 	b.w	800b9c4 <_raise_r>
 800ba1e:	bf00      	nop
 800ba20:	20000068 	.word	0x20000068

0800ba24 <_kill_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	4d07      	ldr	r5, [pc, #28]	; (800ba44 <_kill_r+0x20>)
 800ba28:	2300      	movs	r3, #0
 800ba2a:	4604      	mov	r4, r0
 800ba2c:	4608      	mov	r0, r1
 800ba2e:	4611      	mov	r1, r2
 800ba30:	602b      	str	r3, [r5, #0]
 800ba32:	f7f6 f928 	bl	8001c86 <_kill>
 800ba36:	1c43      	adds	r3, r0, #1
 800ba38:	d102      	bne.n	800ba40 <_kill_r+0x1c>
 800ba3a:	682b      	ldr	r3, [r5, #0]
 800ba3c:	b103      	cbz	r3, 800ba40 <_kill_r+0x1c>
 800ba3e:	6023      	str	r3, [r4, #0]
 800ba40:	bd38      	pop	{r3, r4, r5, pc}
 800ba42:	bf00      	nop
 800ba44:	20001c74 	.word	0x20001c74

0800ba48 <_getpid_r>:
 800ba48:	f7f6 b915 	b.w	8001c76 <_getpid>

0800ba4c <_malloc_usable_size_r>:
 800ba4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba50:	1f18      	subs	r0, r3, #4
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	bfbc      	itt	lt
 800ba56:	580b      	ldrlt	r3, [r1, r0]
 800ba58:	18c0      	addlt	r0, r0, r3
 800ba5a:	4770      	bx	lr

0800ba5c <__swhatbuf_r>:
 800ba5c:	b570      	push	{r4, r5, r6, lr}
 800ba5e:	460c      	mov	r4, r1
 800ba60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba64:	2900      	cmp	r1, #0
 800ba66:	b096      	sub	sp, #88	; 0x58
 800ba68:	4615      	mov	r5, r2
 800ba6a:	461e      	mov	r6, r3
 800ba6c:	da0d      	bge.n	800ba8a <__swhatbuf_r+0x2e>
 800ba6e:	89a3      	ldrh	r3, [r4, #12]
 800ba70:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ba74:	f04f 0100 	mov.w	r1, #0
 800ba78:	bf0c      	ite	eq
 800ba7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ba7e:	2340      	movne	r3, #64	; 0x40
 800ba80:	2000      	movs	r0, #0
 800ba82:	6031      	str	r1, [r6, #0]
 800ba84:	602b      	str	r3, [r5, #0]
 800ba86:	b016      	add	sp, #88	; 0x58
 800ba88:	bd70      	pop	{r4, r5, r6, pc}
 800ba8a:	466a      	mov	r2, sp
 800ba8c:	f000 f848 	bl	800bb20 <_fstat_r>
 800ba90:	2800      	cmp	r0, #0
 800ba92:	dbec      	blt.n	800ba6e <__swhatbuf_r+0x12>
 800ba94:	9901      	ldr	r1, [sp, #4]
 800ba96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ba9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ba9e:	4259      	negs	r1, r3
 800baa0:	4159      	adcs	r1, r3
 800baa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800baa6:	e7eb      	b.n	800ba80 <__swhatbuf_r+0x24>

0800baa8 <__smakebuf_r>:
 800baa8:	898b      	ldrh	r3, [r1, #12]
 800baaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800baac:	079d      	lsls	r5, r3, #30
 800baae:	4606      	mov	r6, r0
 800bab0:	460c      	mov	r4, r1
 800bab2:	d507      	bpl.n	800bac4 <__smakebuf_r+0x1c>
 800bab4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bab8:	6023      	str	r3, [r4, #0]
 800baba:	6123      	str	r3, [r4, #16]
 800babc:	2301      	movs	r3, #1
 800babe:	6163      	str	r3, [r4, #20]
 800bac0:	b002      	add	sp, #8
 800bac2:	bd70      	pop	{r4, r5, r6, pc}
 800bac4:	ab01      	add	r3, sp, #4
 800bac6:	466a      	mov	r2, sp
 800bac8:	f7ff ffc8 	bl	800ba5c <__swhatbuf_r>
 800bacc:	9900      	ldr	r1, [sp, #0]
 800bace:	4605      	mov	r5, r0
 800bad0:	4630      	mov	r0, r6
 800bad2:	f7ff f909 	bl	800ace8 <_malloc_r>
 800bad6:	b948      	cbnz	r0, 800baec <__smakebuf_r+0x44>
 800bad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800badc:	059a      	lsls	r2, r3, #22
 800bade:	d4ef      	bmi.n	800bac0 <__smakebuf_r+0x18>
 800bae0:	f023 0303 	bic.w	r3, r3, #3
 800bae4:	f043 0302 	orr.w	r3, r3, #2
 800bae8:	81a3      	strh	r3, [r4, #12]
 800baea:	e7e3      	b.n	800bab4 <__smakebuf_r+0xc>
 800baec:	89a3      	ldrh	r3, [r4, #12]
 800baee:	6020      	str	r0, [r4, #0]
 800baf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baf4:	81a3      	strh	r3, [r4, #12]
 800baf6:	9b00      	ldr	r3, [sp, #0]
 800baf8:	6163      	str	r3, [r4, #20]
 800bafa:	9b01      	ldr	r3, [sp, #4]
 800bafc:	6120      	str	r0, [r4, #16]
 800bafe:	b15b      	cbz	r3, 800bb18 <__smakebuf_r+0x70>
 800bb00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb04:	4630      	mov	r0, r6
 800bb06:	f000 f81d 	bl	800bb44 <_isatty_r>
 800bb0a:	b128      	cbz	r0, 800bb18 <__smakebuf_r+0x70>
 800bb0c:	89a3      	ldrh	r3, [r4, #12]
 800bb0e:	f023 0303 	bic.w	r3, r3, #3
 800bb12:	f043 0301 	orr.w	r3, r3, #1
 800bb16:	81a3      	strh	r3, [r4, #12]
 800bb18:	89a3      	ldrh	r3, [r4, #12]
 800bb1a:	431d      	orrs	r5, r3
 800bb1c:	81a5      	strh	r5, [r4, #12]
 800bb1e:	e7cf      	b.n	800bac0 <__smakebuf_r+0x18>

0800bb20 <_fstat_r>:
 800bb20:	b538      	push	{r3, r4, r5, lr}
 800bb22:	4d07      	ldr	r5, [pc, #28]	; (800bb40 <_fstat_r+0x20>)
 800bb24:	2300      	movs	r3, #0
 800bb26:	4604      	mov	r4, r0
 800bb28:	4608      	mov	r0, r1
 800bb2a:	4611      	mov	r1, r2
 800bb2c:	602b      	str	r3, [r5, #0]
 800bb2e:	f7f6 f909 	bl	8001d44 <_fstat>
 800bb32:	1c43      	adds	r3, r0, #1
 800bb34:	d102      	bne.n	800bb3c <_fstat_r+0x1c>
 800bb36:	682b      	ldr	r3, [r5, #0]
 800bb38:	b103      	cbz	r3, 800bb3c <_fstat_r+0x1c>
 800bb3a:	6023      	str	r3, [r4, #0]
 800bb3c:	bd38      	pop	{r3, r4, r5, pc}
 800bb3e:	bf00      	nop
 800bb40:	20001c74 	.word	0x20001c74

0800bb44 <_isatty_r>:
 800bb44:	b538      	push	{r3, r4, r5, lr}
 800bb46:	4d06      	ldr	r5, [pc, #24]	; (800bb60 <_isatty_r+0x1c>)
 800bb48:	2300      	movs	r3, #0
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	4608      	mov	r0, r1
 800bb4e:	602b      	str	r3, [r5, #0]
 800bb50:	f7f6 f908 	bl	8001d64 <_isatty>
 800bb54:	1c43      	adds	r3, r0, #1
 800bb56:	d102      	bne.n	800bb5e <_isatty_r+0x1a>
 800bb58:	682b      	ldr	r3, [r5, #0]
 800bb5a:	b103      	cbz	r3, 800bb5e <_isatty_r+0x1a>
 800bb5c:	6023      	str	r3, [r4, #0]
 800bb5e:	bd38      	pop	{r3, r4, r5, pc}
 800bb60:	20001c74 	.word	0x20001c74

0800bb64 <_init>:
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb66:	bf00      	nop
 800bb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb6a:	bc08      	pop	{r3}
 800bb6c:	469e      	mov	lr, r3
 800bb6e:	4770      	bx	lr

0800bb70 <_fini>:
 800bb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb72:	bf00      	nop
 800bb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb76:	bc08      	pop	{r3}
 800bb78:	469e      	mov	lr, r3
 800bb7a:	4770      	bx	lr
